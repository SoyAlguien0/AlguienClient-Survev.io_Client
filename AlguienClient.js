//version 1.1.0

(async () => {
    const links = Array.from(document.querySelectorAll('link[rel="modulepreload"][href]'));

const vendorLink = links.find(link => link.href.includes('vendor-'));
const sharedLink = links.find(link => link.href.includes('shared-'));

const vendorModule = await import(vendorLink.href);
const sharedModule = await import(sharedLink.href);

const { i: Pe, $: c, C: J, T: H, S: ee, G: pe, a: ur, b: $e, R: dr, c: pr, P: Et, d: ot, B: Gt, e: Ut, f: fr, g: wr, s: gr, A: Sr } = vendorModule, 
      { G: B, a: R, u: g, m: z, v: n, C: We, c: U, P: je, E: ue, b: Re, I: A, d: xe, M: re, e: ve, f: it, O: ce, g: Ri, h: He, i: yr, j: xr, B: nt, k: $t, l: zr, A: me, n: ie, H: Oe, o: dt, T: Se, R: Oi, S: _t, p: kt, D: Be, q: Me, J: br, r: ne, s: Wt, t: Ht, W: Ye, w: _r, x: kr, y: vr, z: Xt, F: Ir, K: Mr, U: Tr, L: Cr, N: Pr, Q: Dr, V: Lr, X: Ar, Y: Er, Z: Rr, _: Or, $: vt, a0: _e, a1: Rt, a2: Zt } = sharedModule;
    
        (function() {
            const e = document.createElement("link").relList;
            if (e && e.supports && e.supports("modulepreload"))
                return;
            for (const r of document.querySelectorAll('link[rel="modulepreload"]'))
                i(r);
            new MutationObserver(r => {
                for (const a of r)
                    if (a.type === "childList")
                        for (const l of a.addedNodes)
                            l.tagName === "LINK" && l.rel === "modulepreload" && i(l)
            }
            ).observe(document, {
                childList: !0,
                subtree: !0
            });
            function t(r) {
                const a = {};
                return r.integrity && (a.integrity = r.integrity),
                r.referrerPolicy && (a.referrerPolicy = r.referrerPolicy),
                r.crossOrigin === "use-credentials" ? a.credentials = "include" : r.crossOrigin === "anonymous" ? a.credentials = "omit" : a.credentials = "same-origin",
                a
            }
            function i(r) {
                if (r.ep)
                    return;
                r.ep = !0;
                const a = t(r);
                fetch(r.href, a)
            }
        }
        )();
        function Br() {
            return new URLSearchParams(self.location.search).has("crazygames")
        }
        async function Nr() {
            return new Promise(function(u, e) {
                const t = document.createElement("script");
                t.src = "https://sdk.crazygames.com/crazygames-sdk-v3.js",
                document.head.appendChild(t),
                Pe.phone && (document.getElementById("btn-hamburger").style.display = "none"),
                document.getElementById("crazygamesDiscord").style.display = "block",
                t.addEventListener("load", async function() {
                    await window.CrazyGames.SDK.init(),
                    It("survev-io_728x90", 728, 90),
                    setInterval( () => {
                        const i = document.getElementById("start-menu-wrapper");
                        getComputedStyle(i).display != "none" && It("survev-io_728x90", 728, 90)
                    }
                    , 6e4),
                    u()
                }),
                t.addEventListener("error", function() {
                    console.log("CrazyGames SDK load error"),
                    e()
                })
            }
            )
        }
        async function It(u, e, t) {
            return new Promise(async function(i, r) {
                try {
                    await window.CrazyGames.SDK.banner.requestBanner({
                        id: u,
                        width: e,
                        height: t
                    }),
                    i()
                } catch (a) {
                    console.log("Banner request error", a),
                    r()
                }
            }
            )
        }
        function rt(u) {
            const e = {
                adFinished: u,
                adError: u,
                adStarted: () => console.log("Start midgame ad")
            };
            window.CrazyGames.SDK.ad.requestAd("midgame", e)
        }
        function Bi(u) {
            let e = u.target;
            for (; e && e !== document.body; ) {
                const t = getComputedStyle(e).overflowY;
                if (t === "auto" || t === "scroll")
                    return;
                e = e.parentElement
            }
            u.preventDefault()
        }
        window.addEventListener("wheel", Bi, {
            passive: !1
        });
        window.addEventListener("touchmove", Bi, {
            passive: !1
        });
        document.addEventListener("keydown", u => {
            if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(u.key)) {
                const t = u.target
                    , i = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
                if (u.key === " " && (i.includes(t.tagName) || t.isContentEditable))
                    return;
                u.preventDefault()
            }
        }
        );
        let lt;
        async function Fr() {
            return new Promise(function(u) {
                const e = document.createElement("script");
                e.src = "https://api.gamemonetize.com/sdk.js",
                e.id = "gamemonetize-sdk",
                document.head.appendChild(e),
                document.getElementById("crazygamesDiscord").style.display = "block",
                window.SDK_OPTIONS = {
                    gameId: "q9xrmuceu30pey8llzop5cr0p1p2fbx9",
                    onEvent: function(t) {
                        switch (t.name) {
                        case "SDK_GAME_PAUSE":
                            break;
                        case "SDK_GAME_START":
                            lt && lt();
                            break;
                        case "SDK_READY":
                            console.log("Successfully loaded GameMonetize SDK");
                            break
                        }
                    }
                },
                u()
            }
            )
        }
        function at(u) {
            lt = u,
            window.sdk && window.sdk.showBanner ? window.sdk.showBanner() : lt()
        }
        function qr() {
            if (window !== window.parent) {
                if (new URL(document.referrer).origin.includes("gamemonetize"))
                    return !0
            } else if (window.location.href.includes("gamemonetize"))
                return !0;
            return !1
        }
        async function jr() {
            return new Promise(function(u) {
                const e = document.createElement("script");
                e.src = "https://game-cdn.poki.com/scripts/v2/poki-sdk.js",
                document.head.appendChild(e),
                document.getElementById("crazygamesDiscord").style.display = "block",
                e.addEventListener("load", async function() {
                    window.PokiSDK.init().then( () => {
                        console.log("Poki SDK successfully initialized")
                    }
                    ).catch( () => {
                        console.log("Initialized, something went wrong, load you game anyway")
                    }
                    ),
                    u()
                })
            }
            )
        }
        function st(u) {
            window.PokiSDK.commercialBreak( () => {}
            ).then( () => {
                u()
            }
            )
        }
        function Vr() {
            return !!(window !== window.parent && new URL(document.referrer).origin.includes("poki"))
        }
        const Gr = "https://surviv.mathsiscoolfun.com"
            , Xe = {
            resolveUrl: function(u) {
                return Gr + u
            },
            resolveRoomHost: function() {
                return "surviv.mathsiscoolfun.com"
            }
        }
            , Ee = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(u) {
            return typeof u
        }
        : function(u) {
            return u && typeof Symbol == "function" && u.constructor === Symbol && u !== Symbol.prototype ? "symbol" : typeof u
        }
            , Kt = Array.prototype.slice
            , Qt = Object.keys
            , Ur = function() {
            return Object.prototype.toString.call(arguments)
        }() == "[object Arguments]";
        function $r(u) {
            return Object.prototype.toString.call(u) == "[object Arguments]"
        }
        function Wr(u) {
            return u && (typeof u > "u" ? "undefined" : Ee(u)) == "object" && typeof u.length == "number" && Object.prototype.hasOwnProperty.call(u, "callee") && !Object.prototype.propertyIsEnumerable.call(u, "callee") || !1
        }
        const Yt = Ur ? $r : Wr
            , Mt = function(u, e, t) {
            return t || (t = {}),
            u === e ? !0 : u instanceof Date && e instanceof Date ? u.getTime() === e.getTime() : !u || !e || (typeof u > "u" ? "undefined" : Ee(u)) != "object" && (typeof e > "u" ? "undefined" : Ee(e)) != "object" ? t.strict ? u === e : u == e : Hr(u, e, t)
        };
        function Jt(u) {
            return u == null
        }
        function ei(u) {
            return !(!u || (typeof u > "u" ? "undefined" : Ee(u)) !== "object" || typeof u.length != "number" || typeof u.copy != "function" || typeof u.slice != "function" || u.length > 0 && typeof u[0] != "number")
        }
        function Hr(u, e, t) {
            let i, r;
            if (Jt(u) || Jt(e) || u.prototype !== e.prototype)
                return !1;
            if (Yt(u))
                return Yt(e) ? (u = Kt.call(u),
                e = Kt.call(e),
                Mt(u, e, t)) : !1;
            if (ei(u)) {
                if (!ei(e) || u.length !== e.length)
                    return !1;
                for (i = 0; i < u.length; i++)
                    if (u[i] !== e[i])
                        return !1;
                return !0
            }
            let a, l;
            try {
                a = Qt(u),
                l = Qt(e)
            } catch {
                return !1
            }
            if (a.length != l.length)
                return !1;
            for (a.sort(),
            l.sort(),
            i = a.length - 1; i >= 0; i--)
                if (a[i] != l[i])
                    return !1;
            for (i = a.length - 1; i >= 0; i--)
                if (r = a[i],
                !Mt(u[r], e[r], t))
                    return !1;
            return (typeof u > "u" ? "undefined" : Ee(u)) === (typeof e > "u" ? "undefined" : Ee(e))
        }
        var Ni = (u => (u[u.New = 0] = "New",
        u[u.Confirmed = 1] = "Confirmed",
        u[u.Ackd = 2] = "Ackd",
        u))(Ni || {});
        const le = {
            ItemStatus: Ni,
            validate: function(u) {
                const e = function(l, s, m) {
                    const d = B[s];
                    return d && d.type == l ? s : m
                }
                    , t = function(l, s) {
                    const m = parseFloat(l);
                    return Number.isNaN(m) ? s : m
                }
                    , i = {
                    crosshair: {
                        type: "",
                        color: 16777215,
                        size: 1,
                        stroke: 0
                    },
                    emotes: [],
                    ...u
                }
                    , r = {
                    outfit: e("outfit", i.outfit, "outfitBase"),
                    melee: e("melee", i.melee, "fists"),
                    heal: e("heal_effect", i.heal, "heal_basic"),
                    boost: e("boost_effect", i.boost, "boost_basic"),
                    player_icon: e("emote", i.player_icon, ""),
                    crosshair: {
                        type: e("crosshair", i.crosshair.type, "crosshair_default"),
                        color: parseInt(i.crosshair.color) || 16777215,
                        size: t(i.crosshair.size, 1).toFixed(2),
                        stroke: t(i.crosshair.stroke, 0).toFixed(2)
                    },
                    emotes: []
                }
                    , a = R.defaultEmoteLoadout.slice();
                for (let l = 0; l < R.EmoteSlot.Count; l++) {
                    const s = l < i.emotes.length ? i.emotes[l] : "";
                    r.emotes.push(e("emote", s, a[l]))
                }
                return r
            },
            defaultLoadout: function() {
                return le.validate({})
            },
            modified: function(u, e) {
                return !Mt(u, e)
            },
            getUserAvailableItems: function(u) {
                const e = []
                    , t = B.unlock_default;
                for (let i = 0; i < t.unlocks.length; i++) {
                    const r = t.unlocks[i];
                    e.push({
                        type: r,
                        source: "unlock_default",
                        timeAcquired: 0,
                        ackd: le.ItemStatus.Ackd
                    })
                }
                for (let i = 0; i < u.length; i++)
                    e.push(u[i]);
                return e
            }
        };
        function Xr(u, e, t) {
            typeof e == "function" && (t = e,
            e = null);
            const i = {
                url: Xe.resolveUrl(u),
                type: "POST",
                timeout: 10 * 1e3,
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                }
            };
            e && (i.contentType = "application/json; charset=utf-8",
            i.data = JSON.stringify(e)),
            c.ajax(i).done(r => {
                t(null, r)
            }
            ).fail(r => {
                t(r)
            }
            )
        }
        class Zr {
            constructor(e) {
                this.config = e,
                window.login = () => {
                    this.login()
                }
                ,
                window.deleteAccount = () => {
                    this.deleteAccount()
                }
                ,
                window.deleteItems = () => {
                    this.ajaxRequest("/api/user/delete_items", {}, (t, i) => {
                        this.loadProfile()
                    }
                    )
                }
                ,
                window.unlock = t => {
                    console.log(`Unlocking ${t}`),
                    this.unlock(t)
                }
                ,
                window.setQuest = (t, i=0) => {
                    this.ajaxRequest("/api/user/set_quest", {
                        questType: t,
                        idx: i
                    }, (r, a) => {
                        this.getPass()
                    }
                    )
                }
                ,
                window.refreshQuest = t => {
                    this.refreshQuest(t)
                }
                ,
                window.setPassUnlock = t => {
                    this.setPassUnlock(t)
                }
            }
            events = {};
            requestsInFlight = 0;
            loggingIn = !1;
            loggedIn = !1;
            profile = {
                linkedTwitch: !1,
                linkedDiscord: !1,
                usernameSet: !1,
                username: "",
                slug: "",
                usernameChangeTime: 0
            };
            loadout = le.defaultLoadout();
            loadoutPriv = "";
            items = [];
            quests = [];
            questPriv = "";
            pass = {};
            ajaxRequest(e, t, i) {
                typeof t == "function" && (i = t,
                t = null),
                this.requestsInFlight++,
                this.emit("request", this),
                Xr(e, t, (r, a) => {
                    i(r, a),
                    this.requestsInFlight--,
                    this.emit("request", this),
                    this.requestsInFlight == 0 && this.emit("requestsComplete")
                }
                )
            }
            addEventListener(e, t) {
                this.events[e] = this.events[e] || [],
                this.events[e].push(t)
            }
            removeEventListener(e, t) {
                const i = this.events[e] || [];
                for (let r = i.length - 1; r >= 0; r--)
                    i[r] == t && i.splice(r, 1)
            }
            emit(e, ...t) {
                const i = (this.events[e] || []).slice(0);
                for (let r = 0; r < i.length; r++)
                    i[r](...t)
            }
            init() {
                this.config.get("sessionCookie") && this.setSessionCookies(),
                this.login()
            }
            setSessionCookies() {
                this.clearSessionCookies(),
                document.cookie = this.config.get("sessionCookie"),
                document.cookie = `app-data=${Date.now()}`
            }
            clearSessionCookies() {
                document.cookie = "app-sid=;expires=Thu, 01 Jan 1970 00:00:01 GMT;",
                document.cookie = "app-data=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"
            }
            loginWithAccessToken(e, t, i) {
                t( (r, a) => {
                    if (r) {
                        this.emit("error", "login_failed");
                        return
                    }
                    const l = i(a);
                    this.ajaxRequest(`${e}?access_token=${l}`, (s, m) => {
                        s ? this.emit("error", "login_failed") : (this.config.set("sessionCookie", m.cookie),
                        this.setSessionCookies(),
                        this.login())
                    }
                    )
                }
                )
            }
            login() {
                this.loadProfile(),
                this.getPass(!0)
            }
            logout() {
                this.config.set("profile", null),
                this.config.set("sessionCookie", null),
                this.ajaxRequest("/api/user/logout", (e, t) => {
                    window.location.reload()
                }
                )
            }
            loadProfile() {
                this.loggingIn = !this.loggedIn,
                this.ajaxRequest("/api/user/profile", (t, i) => {
                    const r = this.loggingIn;
                    if (this.loggingIn = !1,
                    this.loggedIn = !1,
                    this.profile = {},
                    this.loadoutPriv = "",
                    this.items = [],
                    t)
                        console.error("account", "load_profile_error");
                    else if (i.banned)
                        this.emit("error", "account_banned", i.reason);
                    else if (i.success) {
                        this.loggedIn = !0,
                        this.profile = i.profile,
                        this.loadoutPriv = i.loadoutPriv,
                        this.items = i.items;
                        const a = this.config.get("profile") || {
                            slug: ""
                        };
                        a.slug = i.profile.slug,
                        this.config.set("profile", a)
                    }
                    this.loggedIn || this.config.set("sessionCookie", null),
                    r && this.loggedIn && this.emit("login", this),
                    this.emit("items", this.items)
                }
                );
                const e = this.config.get("loadout");
                this.loadout = g.mergeDeep({}, le.defaultLoadout(), e),
                this.emit("loadout", this.loadout)
            }
            resetStats() {
                this.ajaxRequest("/api/user/reset_stats", (e, t) => {
                    e && (console.error("account", "reset_stats_error"),
                    this.emit("error", "server_error"))
                }
                )
            }
            deleteAccount() {
                this.ajaxRequest("/api/user/delete", (e, t) => {
                    if (e) {
                        console.error("account", "delete_error"),
                        this.emit("error", "server_error");
                        return
                    }
                    this.config.set("profile", null),
                    this.config.set("sessionCookie", null),
                    window.location.reload()
                }
                )
            }
            setUsername(e, t) {
                this.ajaxRequest("/api/user/username", {
                    username: e
                }, (i, r) => {
                    if (i) {
                        console.error("account", "set_username_error"),
                        t(i);
                        return
                    }
                    r.result == "success" ? (this.loadProfile(),
                    t()) : t(r.result)
                }
                )
            }
            setLoadout(e) {
                this.loadout,
                this.loadout = e,
                this.emit("loadout", this.loadout),
                this.config.set("loadout", e)
            }
            setItemStatus(e, t) {
                if (t.length != 0) {
                    for (let i = 0; i < t.length; i++) {
                        const r = this.items.find(a => a.type == t[i]);
                        r && (r.status = Math.max(r.status, e))
                    }
                    this.emit("items", this.items),
                    this.ajaxRequest("/api/user/set_item_status", {
                        status: e,
                        itemTypes: t
                    }, (i, r) => {
                        i && console.error("account", "set_item_status_error")
                    }
                    )
                }
            }
            unlock(e) {
                this.ajaxRequest("/api/user/unlock", {
                    unlockType: e
                }, (t, i) => {
                    if (t || !i.success) {
                        console.error("account", "unlock_error"),
                        this.emit("error", "server_error");
                        return
                    }
                    this.items = i.items,
                    this.emit("items", this.items)
                }
                )
            }
            getPass(e) {}
            setPassUnlock(e) {
                this.ajaxRequest("/api/user/set_pass_unlock", {
                    unlockType: e
                }, (t, i) => {
                    t || !i.success ? console.error("account", "set_pass_unlock_error") : this.getPass(!1)
                }
                )
            }
            refreshQuest(e) {
                this.ajaxRequest("/api/user/refresh_quest", {
                    idx: e
                }, (t, i) => {
                    if (t) {
                        console.error("account", "refresh_quest_error");
                        return
                    }
                    i.success ? this.getPass(!1) : this.emit("pass", this.pass, this.quests, !1)
                }
                )
            }
        }
        class Kr {
            introMusic = !0;
            soundUpdateThrottle = 0;
            tracks;
            trackToIdx;
            initTime;
            constructor() {
                this.tracks = [],
                this.trackToIdx = {};
                const e = (t, i, r, a) => {
                    this.tracks.push({
                        name: t,
                        sound: i,
                        channel: r,
                        immediateMode: a,
                        inst: null,
                        instSound: "",
                        filter: "",
                        weight: 0,
                        volume: 0
                    }),
                    this.trackToIdx[t] = this.tracks.length - 1
                }
                ;
                e("music", "menu_music", "music", !1),
                e("wind", "ambient_wind_01", "ambient", !1),
                e("river", "ambient_stream_01", "ambient", !1),
                e("waves", "ambient_waves_01", "ambient", !1),
                e("interior_0", "", "ambient", !0),
                e("interior_1", "", "ambient", !0),
                this.initTime = Date.now()
            }
            getTrack(e) {
                return this.tracks[this.trackToIdx[e]]
            }
            onGameStart() {
                this.introMusic = !1;
                for (let e = 0; e < this.tracks.length; e++)
                    this.tracks[e].weight = 0;
                this.getTrack("wind").weight = 1,
                this.soundUpdateThrottle = 0
            }
            onGameComplete(e) {
                for (let t = 0; t < this.tracks.length; t++) {
                    const i = this.tracks[t];
                    i.immediateMode && (i.weight = 0)
                }
                this.getTrack("river").weight = 0
            }
            update(e, t, i) {
                let r = !1;
                this.soundUpdateThrottle -= e,
                this.soundUpdateThrottle <= 0 && (this.soundUpdateThrottle = .2,
                r = !0);
                let a = 0;
                for (let l = this.tracks.length - 1; l >= 0; l--) {
                    const s = this.tracks[l];
                    if (!s.inst && s.sound && t.isSoundLoaded(s.sound, s.channel) && (console.log("Start track", s.sound, s.channel),
                    s.inst = t.playSound(s.sound, {
                        channel: s.channel,
                        startSilent: !0,
                        loop: s.channel == "ambient",
                        forceStart: !0,
                        filter: s.filter,
                        forceFilter: !0
                    }),
                    s.instSound = s.sound,
                    l == 0 && console.log("Play delay", Date.now() - this.initTime)),
                    s.inst && r) {
                        const m = s.weight * (1 - a);
                        a += m,
                        s.volume = m;
                        const d = t.getSoundDefVolume(s.sound, s.channel);
                        t.setVolume(s.inst, m * d, s.channel)
                    }
                    s.inst && (!s.sound && z.eqAbs(t.getVolume(s.inst), 0) || s.sound && s.sound != s.instSound) && (console.log("Stop track", s.name, s.channel),
                    t.stopSound(s.inst),
                    s.inst = null,
                    s.instSound = ""),
                    s.immediateMode && (s.sound = "",
                    s.weight = 0)
                }
                if (this.introMusic) {
                    const l = this.getTrack("music");
                    l.inst && (l.weight = z.min(l.weight + e, 1));
                    const s = this.getTrack("wind");
                    l.inst && !t.isSoundPlaying(l.inst) && (s.weight = z.min(s.weight + e, 1))
                }
            }
        }
        const Ge = window.navigator.userAgent.includes("iPod") || window.navigator.userAgent.includes("iPhone") || window.navigator.userAgent.includes("iPad");
        let Fi = null
            , qi = !1;
        function Qr(u) {
            try {
                return u.createGain().disconnect(u.destination),
                !1
            } catch {
                return !0
            }
        }
        const De = 128;
        class ti {
            constructor(e) {
                this.ctx = e,
                this.volumeOld = this.volume,
                this.panOld = this.pan,
                this.gainNode = this.ctx.createGain(),
                this.pannerNode = this.ctx.createPanner(),
                this.pannerNode.panningModel = "equalpower",
                this.gainNode.connect(this.pannerNode)
            }
            sound = null;
            id = 0;
            volume = 1;
            volumeOld;
            pan = 0;
            panOld;
            ambient;
            sourceNode = null;
            destination = null;
            paramEvents = 0;
            gainNode;
            pannerNode;
            stopTime = 0;
            stopping = !1;
            playState = "playFinished";
            setGain(e) {
                this.stopping || (Ge ? this.gainNode.gain.value = e : (this.gainNode.gain.setTargetAtTime(e, this.ctx.currentTime, .02),
                ++this.paramEvents))
            }
            setPan(e) {
                this.stopping || (this.pannerNode.setPosition(e, 0, -.5),
                this.paramEvents += 3)
            }
            start(e, t, i, r, a, l, s, m, d) {
                this.volume = this.volumeOld = i,
                this.pan = this.panOld = r,
                this.ambient = m,
                this.stopping = !1,
                this.destination = e,
                this.sourceNode = this.ctx.createBufferSource(),
                this.sourceNode.buffer = t,
                this.sourceNode.connect(this.gainNode),
                this.pannerNode.connect(this.destination),
                this.sourceNode.loop = a,
                Ge ? this.gainNode.gain.value = i : (this.gainNode.gain.setValueAtTime(i, this.ctx.currentTime),
                ++this.paramEvents),
                this.setPan(r),
                this.sourceNode.detune && (this.sourceNode.detune.value = d),
                this.sourceNode.start(this.ctx.currentTime + l, s),
                this.stopTime = a ? 1e100 : this.ctx.currentTime + l + t.duration - s,
                this.playState = "playSucceeded"
            }
            stop() {
                this.stopping || (this.setGain(0),
                this.stopTime = this.ctx.currentTime + .1,
                this.stopping = !0,
                this.playState = "playInterrupted")
            }
            disconnect() {
                if (this.sound?.instances.splice(this.sound?.instances.indexOf(this), 1),
                this.sound = null,
                this.sourceNode?.stop(0),
                this.sourceNode?.disconnect(this.gainNode),
                this.pannerNode?.disconnect(this.destination),
                Ge)
                    try {
                        this.sourceNode.buffer = Fi
                    } catch {}
                this.destination = null,
                this.sourceNode = null,
                this.playState = "playFinished"
            }
            reallocNodes() {
                this.gainNode.disconnect(this.pannerNode),
                this.gainNode = this.ctx.createGain(),
                this.pannerNode = this.ctx.createPanner(),
                this.pannerNode.panningModel = "equalpower",
                this.gainNode.connect(this.pannerNode),
                this.paramEvents = 0
            }
        }
        let mt = null;
        class ii {
            constructor(e) {
                this.instance = e,
                this.id = e.id
            }
            id;
            check(e) {
                this.id != this.instance.id && (this.instance = mt,
                this.id = mt?.id)
            }
            stop() {
                this.check(),
                this.instance.stop()
            }
            get volume() {
                return this.check(),
                this.instance.volume
            }
            set volume(e) {
                this.check(!0),
                this.instance.volume = e
            }
            get pan() {
                return this.check(),
                this.instance.pan
            }
            set pan(e) {
                this.check(!0),
                this.instance.pan = e
            }
            get playState() {
                return this.check(),
                this.instance.playState
            }
        }
        let Ie = null;
        class Yr {
            constructor(e, t, i, r, a) {
                if (this.ctx = e,
                this.inNode = t,
                this.outNode = i,
                this.name = r,
                this.params = a,
                this.volume = a.volume != null ? a.volume : 1,
                this.echoVolume = a.echoVolume || 0,
                this.echoDelay = a.echoDelay || 0,
                this.echoLowPass = a.echoLowPass || 3e3,
                this.stereoSpread = a.stereoSpread || 0,
                !qi) {
                    const l = this.ctx.createGain();
                    this.inNode.connect(l),
                    this.inNode = l
                }
                this.convolverNode = this.ctx.createConvolver(),
                this.echoVolume && (this.echoLowPassNode = this.ctx.createBiquadFilter(),
                this.echoLowPassNode.type = "lowpass",
                this.echoLowPassNode.frequency.setValueAtTime(this.echoLowPass, 0),
                this.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
                this.echoDelayNode = this.ctx.createDelay(this.echoDelay || .01),
                this.echoDelayNode.delayTime.setValueAtTime(this.echoDelay, 0)),
                this.stereoSpread && (this.stereoDelayNode = this.ctx.createDelay(this.stereoSpread),
                this.stereoDelayNode.delayTime.setValueAtTime(this.stereoSpread, 0),
                this.mergerNode = this.ctx.createChannelMerger(2))
            }
            volume;
            echoVolume;
            echoDelay;
            echoLowPass;
            stereoSpread;
            gainNode = null;
            convolverNode = null;
            echoGainNode = null;
            echoLowPassNode = null;
            echoDelayNode = null;
            stereoDelayNode = null;
            mergerNode = null;
            targetLevel = 0;
            gain = 0;
            drainEndTime = 0;
            active = !1;
            isConnected() {
                return this.gainNode != null
            }
            connect() {
                if (this.gainNode = this.ctx.createGain(),
                this.gainNode.channelCount = 1,
                this.gainNode.channelCountMode = "explicit",
                this.gainNode.gain.setValueAtTime(0, 0),
                this.echoVolume && (this.echoGainNode = this.ctx.createGain(),
                this.echoGainNode.channelCount = 1,
                this.echoGainNode.channelCountMode = "explicit",
                this.echoGainNode.gain.setValueAtTime(this.echoVolume, 0)),
                this.inNode.connect(this.gainNode),
                this.gainNode.connect(this.convolverNode),
                this.echoVolume && (this.convolverNode?.connect(this.echoGainNode),
                this.echoGainNode?.connect(this.echoLowPassNode),
                this.echoLowPassNode?.connect(this.echoDelayNode),
                this.echoDelayNode?.connect(this.convolverNode)),
                this.stereoSpread) {
                    const {buffer: e} = this.convolverNode;
                    e && e.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
                    this.convolverNode?.connect(this.stereoDelayNode),
                    this.convolverNode?.connect(this.mergerNode, 0, 0),
                    this.stereoDelayNode?.connect(this.mergerNode, 0, 1),
                    this.mergerNode?.connect(this.outNode)
                } else
                    this.convolverNode?.connect(this.outNode)
            }
            disconnect() {
                this.inNode.disconnect(this.gainNode),
                this.gainNode?.disconnect(this.convolverNode),
                this.echoVolume && (this.convolverNode?.disconnect(this.echoGainNode),
                this.echoGainNode?.disconnect(this.echoLowPassNode),
                this.echoLowPassNode?.disconnect(this.echoDelayNode),
                this.echoDelayNode?.disconnect(this.convolverNode)),
                this.stereoSpread ? (this.convolverNode?.disconnect(this.stereoDelayNode),
                this.convolverNode?.disconnect(this.mergerNode, 0, 0),
                this.stereoDelayNode?.disconnect(this.mergerNode, 0, 1),
                this.mergerNode?.disconnect(this.outNode)) : this.convolverNode?.disconnect(this.outNode),
                this.gainNode = null,
                this.echoGainNode = null
            }
            setGain(e, t, i) {
                if (e *= this.volume,
                this.gain != e) {
                    if (e != 0 && !this.gainNode && this.connect(),
                    e == 0) {
                        this.echoGainNode && this.echoGainNode.gain.setValueAtTime(0, i);
                        const {buffer: r} = this.convolverNode
                            , a = r ? r.duration : 0;
                        this.drainEndTime = i + a + this.echoDelay + this.stereoSpread
                    }
                    this.gain == 0 && this.echoGainNode && this.echoGainNode.gain.setValueAtTime(this.echoVolume, t),
                    this.gainNode?.gain.setValueAtTime(this.gain, t),
                    this.gainNode?.gain.linearRampToValueAtTime(e, i),
                    this.gain = e
                }
            }
        }
        class Jr {
            ctx = new (window.AudioContext || window.webkitAudioContext);
            masterGainNode;
            compressorNode;
            reverbNode;
            eqNodes = {};
            files = {};
            sounds = {};
            instances = [];
            instanceId = 0;
            playingInstances = [];
            reverbs = {};
            activeReverbs = [];
            reverbFadeEndTime = 0;
            volume = 1;
            volumeOld;
            muted = !1;
            mutedOld;
            runningOfflineTest;
            offlineCtx;
            startTime;
            onfileload = function(...e) {}
            ;
            PLAY_INITED = "playInited";
            PLAY_SUCCEEDED = "playSucceeded";
            PLAY_INTERRUPTED = "playInterrupted";
            PLAY_FINISHED = "playFinished";
            PLAY_FAILED = "playFailed";
            constructor() {
                if (Ge) {
                    const t = this.ctx.createBuffer(1, 1, 44100)
                        , i = this.ctx.createBufferSource();
                    i.buffer = t,
                    i.connect(this.ctx.destination),
                    i.start(),
                    i.disconnect(this.ctx.destination),
                    this.ctx.close(),
                    this.ctx = new (window.AudioContext || window.webkitAudioContext)
                }
                qi = Qr(this.ctx),
                window.audioEngine = this,
                this.masterGainNode = this.ctx.createGain(),
                this.compressorNode = this.ctx.createDynamicsCompressor(),
                this.masterGainNode.connect(this.compressorNode),
                this.compressorNode.connect(this.ctx.destination),
                this.reverbNode = this.ctx.createGain(),
                this.reverbNode.connect(this.masterGainNode);
                const e = {
                    muffled: [[20, 2.8284 / 2, -6, "peaking"], [40, 2.8284 / 2, -7, "peaking"], [80, 2.8284 / 2, -10, "peaking"], [160, 2.8284 / 2, -13, "peaking"], [320, 2.8284 / 2, -22, "peaking"], [640, 2.8284 / 2, -18, "peaking"], [1280, 2.8284 / 2, -25, "peaking"], [2560, 2.8284 / 2, -10, "peaking"], [5120, 2.8284 / 2, -30, "peaking"], [10240, 2.8284 / 2, -25, "peaking"]],
                    club: [[20, 2.8284 / 2, -6, "lowshelf"], [63, 2.8284 / 2, -3, "lowshelf"], [125, 2.8284 / 2, -3, "lowshelf"], [250, 2.8284 / 2, -6, "lowshelf"], [500, 2.8284 / 2, -18, "peaking"], [1e3, 2.8284 / 2, -36, "peaking"], [2e3, 2.8284 / 2, -48, "peaking"], [4e3, 2.8284 / 2, -50, "highshelf"], [8e3, 2.8284 / 2, -50, "highshelf"], [16e3, 2.8284 / 2, -50, "highshelf"]]
                };
                Object.keys(e).forEach(t => {
                    const i = this.ctx.createGain();
                    i.gain.setValueAtTime(16, 0);
                    const r = e[t];
                    let a = i;
                    for (let l = 0; l < r.length; l++) {
                        const s = this.ctx.createBiquadFilter();
                        a.connect(s),
                        a = s,
                        s.frequency.setValueAtTime(r[l][0], 0),
                        s.Q.setValueAtTime(r[l][1], 0),
                        s.gain.setValueAtTime(r[l][2], 0),
                        s.type = r[l][3]
                    }
                    a.connect(this.reverbNode),
                    this.eqNodes[t] = i
                }
                );
                for (let t = 0; t < De; t++) {
                    const i = new ti(this.ctx);
                    this.instances[t] = i
                }
                if (mt = new ti(this.ctx),
                Ie = new ii(mt),
                this.volumeOld = this.volume,
                this.mutedOld = this.muted,
                this.ctx.state == "suspended") {
                    const t = () => {
                        this.ctx.resume();
                        const i = this.ctx.createBufferSource();
                        i.buffer = this.ctx.createBuffer(1, 1, 22050),
                        i.connect(this.ctx.destination),
                        i.start(),
                        setTimeout( () => {
                            this.ctx.state == "running" && (document.body.removeEventListener("mousedown", t, !1),
                            document.body.removeEventListener("touchend", t, !1))
                        }
                        , 0)
                    }
                    ;
                    document.body.addEventListener("mousedown", t, !1),
                    document.body.addEventListener("touchend", t, !1)
                }
                Ge && (Fi = this.ctx.createBuffer(1, 1, 22050))
            }
            loadFile(e, t) {
                if (this.files[e] != null)
                    return t(e),
                    this.files[e];
                this.files[e] = {
                    buffer: null
                };
                const i = new XMLHttpRequest;
                i.open("GET", e),
                i.responseType = "arraybuffer";
                const r = function(l) {
                    console.error(`Failed loading sound file: ${e}`)
                };
                return i.addEventListener("load", a => {
                    const l = i.response;
                    if (!l) {
                        r();
                        return
                    }
                    this.ctx.decodeAudioData(l, s => {
                        this.files[e].buffer = s,
                        t(e)
                    }
                    , () => {
                        console.error(`Failed decoding sound: ${e}`)
                    }
                    )
                }
                ),
                i.addEventListener("abort", r),
                i.addEventListener("error", r),
                i.addEventListener("timeout", r),
                i.send(),
                this.files[e]
            }
            registerSound(e, t, i) {
                const a = {
                    file: this.loadFile(e, this.onfileload.bind(this)),
                    canCoalesce: !!i.canCoalesce,
                    maxInstances: i.channels || 16,
                    volume: i.volume || 1,
                    instances: []
                };
                this.sounds[t] = a
            }
            play(e, t) {
                const i = this.sounds[e];
                if (!i)
                    return console.error(`No sound named: ${e}`),
                    Ie;
                const r = t.filter || "none";
                let a = t.volume != null ? t.volume : 1;
                a *= i.volume,
                a = this.muted ? 0 : a;
                const l = t.pan || 0
                    , s = !!t.loop
                    , m = t.delay ? t.delay * .001 : 0
                    , d = t.offset ? t.offset : 0
                    , h = t.ambient || !1
                    , p = t.detune || 0;
                if (!i.file.buffer || this.muted && !t.loop)
                    return Ie;
                if (r !== "none" && r !== "reverb" && r !== "muffled" && r !== "club")
                    return console.error(`Invalid filter: ${r}. Only valid filters are 'none', 'reverb', 'muffled' and 'club'.`),
                    Ie;
                if (i.canCoalesce) {
                    const P = this.ctx.currentTime + i.file.buffer.duration;
                    for (let C = 0; C < i.instances.length; C++) {
                        const k = i.instances[C];
                        if (Math.abs(P - k.stopTime) > .03)
                            continue;
                        const b = k.volume * k.volume + a * a
                            , M = k.volume * k.pan + a * l
                            , E = k.volume + a;
                        return k.volume = Math.sqrt(b),
                        k.pan = M / Math.max(.001, E),
                        Ie
                    }
                }
                for (let y = 0; y < De && (++this.instanceId,
                !!this.instances[this.instanceId % De].sound); y++)
                    ;
                const w = this.instances[this.instanceId % De];
                if (w.sound)
                    return console.error(`All ${De} sound instances in use. You are using way too many sounds!`),
                    Ie;
                w.id = this.instanceId;
                const f = w.paramEvents > 150
                    , S = w.paramEvents > 20 && !(this.instanceId % 7);
                for ((f || S) && w.reallocNodes(); i.instances.length >= i.maxInstances; ) {
                    let y = i.instances[0];
                    for (let P = 1; P < i.instances.length; P++)
                        y.stopTime > i.instances[P].stopTime && (y = i.instances[P]);
                    y.disconnect()
                }
                w.sound = i,
                i.instances.push(w);
                const x = r === "none" ? this.masterGainNode : r === "reverb" ? this.reverbNode : this.eqNodes[r];
                return w.start(x, i.file.buffer, a, l, s, m, d, h, p),
                this.playingInstances.includes(w) || this.playingInstances.push(w),
                new ii(w)
            }
            registerReverb(e, t, i) {
                const r = new Yr(this.ctx,this.reverbNode,this.masterGainNode,t,i);
                this.loadFile(e, a => {
                    r.convolverNode.buffer = this.files[a].buffer,
                    this.onfileload(a)
                }
                ),
                this.reverbs[t] = r
            }
            setReverbs(e) {
                for (let t = 0; t < this.activeReverbs.length; t++) {
                    const i = this.activeReverbs[t];
                    e[i.name] || (i.targetLevel = 0)
                }
                for (const t in e) {
                    if (!e[t])
                        continue;
                    const i = this.reverbs[t];
                    if (!i) {
                        console.error(`No reverb named ${t}`);
                        continue
                    }
                    this.reverbs[t].active || (this.activeReverbs.push(i),
                    i.active = !0),
                    i.targetLevel = e[t]
                }
            }
            stop(e=!0) {
                for (let t = 0; t < De; t++) {
                    const i = this.instances[t];
                    e && i.ambient || i.sound && i.stop()
                }
            }
            update(e) {
                this.ctx.state == "suspended" && this.ctx.resume();
                const t = this.muted ? 0 : this.volume
                    , i = this.mutedOld ? 0 : this.volumeOld;
                this.volumeOld = this.volume,
                this.mutedOld = this.muted,
                t != i && this.masterGainNode.gain.setTargetAtTime(t, this.ctx.currentTime, .02);
                for (let r = this.playingInstances.length - 1; r >= 0; r--) {
                    const a = this.playingInstances[r];
                    a.volumeOld != a.volume && (a.volumeOld = a.volume,
                    a.setGain(a.volume)),
                    a.panOld != a.pan && (a.panOld = a.pan,
                    a.setPan(a.pan)),
                    a.sound && this.ctx.currentTime > a.stopTime && a.disconnect(),
                    a.sound || this.playingInstances.splice(r, 1)
                }
                if (this.ctx.currentTime > this.reverbFadeEndTime) {
                    const r = this.ctx.currentTime + .006
                        , a = .025;
                    this.reverbFadeEndTime = r + a;
                    let l = 0;
                    for (let m = 0; m < this.activeReverbs.length; m++) {
                        const d = this.activeReverbs[m];
                        l += d.targetLevel
                    }
                    const s = l > 1 ? 1 / l : 1;
                    for (let m = 0; m < this.activeReverbs.length; m++) {
                        const d = this.activeReverbs[m]
                            , h = Math.sqrt(s * d.targetLevel);
                        d.setGain(h, r, this.reverbFadeEndTime)
                    }
                    for (let m = this.activeReverbs.length - 1; m >= 0; m--) {
                        const d = this.activeReverbs[m]
                            , h = this.ctx.currentTime > d.drainEndTime;
                        d.gain == 0 && h && (d.isConnected() && d.disconnect(),
                        d.active = !1,
                        this.activeReverbs.splice(m, 1))
                    }
                }
            }
            setMute(e) {
                this.muted = e
            }
            on(e, t, i) {
                if (e != "fileload") {
                    console.error('Only "fileload" event supported');
                    return
                }
                this.onfileload = t.bind(i)
            }
            updatePerformanceTest() {
                if (this.runningOfflineTest = this.runningOfflineTest != null ? this.runningOfflineTest : !1,
                this.runningOfflineTest)
                    return;
                this.runningOfflineTest = !0;
                const e = 10;
                this.offlineCtx = new OfflineAudioContext(2,e * this.ctx.sampleRate,this.ctx.sampleRate);
                const t = this.offlineCtx.createBuffer(2, e * this.ctx.sampleRate, this.ctx.sampleRate);
                for (let m = 0; m < t.numberOfChannels; m++) {
                    const d = t.getChannelData(m);
                    for (let h = 0; h < d.length; h++)
                        d[h] = Math.sin(h / 2333) * Math.sin(h / 5741) * 2 * Math.random() - 1
                }
                const i = this.offlineCtx.createBufferSource();
                i.buffer = t;
                const r = this.offlineCtx.createConvolver()
                    , l = this.offlineCtx.createBuffer(1, 4 * this.ctx.sampleRate, this.ctx.sampleRate);
                for (let m = 0; m < l.numberOfChannels; m++) {
                    const d = l.getChannelData(m);
                    for (let h = 0; h < d.length; h++)
                        d[h] = 2 * Math.random() - 1
                }
                r.buffer = l;
                const s = {
                    echoVolume: .5,
                    echoLowPass: 800,
                    echoDelay: .25,
                    stereoSpread: .004
                };
                s.convolverNode = r,
                s.echoLowPassNode = this.offlineCtx.createBiquadFilter(),
                s.echoLowPassNode.type = "lowpass",
                s.echoLowPassNode.frequency.setValueAtTime(s.echoLowPass, 0),
                s.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
                s.echoDelayNode = this.offlineCtx.createDelay(s.echoDelay),
                s.echoDelayNode.delayTime.setValueAtTime(s.echoDelay, 0),
                s.stereoDelayNode = this.offlineCtx.createDelay(s.stereoSpread),
                s.stereoDelayNode.delayTime.setValueAtTime(s.stereoSpread, 0),
                s.mergerNode = this.offlineCtx.createChannelMerger(2),
                s.gainNode = this.offlineCtx.createGain(),
                s.gainNode.channelCount = 1,
                s.gainNode.channelCountMode = "explicit",
                s.gainNode.gain.setValueAtTime(1, 0),
                s.echoGainNode = this.offlineCtx.createGain(),
                s.echoGainNode.channelCount = 1,
                s.echoGainNode.channelCountMode = "explicit",
                s.echoGainNode.gain.setValueAtTime(s.echoVolume, 0),
                s.outNode = this.offlineCtx.createGain(),
                s.gainNode.connect(s.convolverNode);
                {
                    const {buffer: m} = s.convolverNode;
                    m && m.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
                    s.convolverNode.connect(s.stereoDelayNode),
                    s.convolverNode.connect(s.mergerNode, 0, 0),
                    s.stereoDelayNode?.connect(s.mergerNode, 0, 1),
                    s.mergerNode?.connect(s.outNode)
                }
                console.log("starting convolver"),
                i.connect(s.gainNode),
                s.outNode.connect(this.offlineCtx.destination),
                i.start(),
                this.startTime = performance.now(),
                this.offlineCtx.oncomplete = m => {
                    const d = performance.now();
                    console.log("Offline render time: ", d - this.startTime),
                    this.runningOfflineTest = !1
                }
                ,
                this.offlineCtx.startRendering()
            }
        }
        const ye = {
            Sound: new Jr
        }
            , ea = {
            players: {
                m9_01: {
                    path: "audio/guns/m9_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m9_reload_01: {
                    path: "audio/guns/m9_reload_01.mp3",
                    volume: 1
                },
                m9_reload_02: {
                    path: "audio/guns/m9_reload_02.mp3",
                    volume: 1
                },
                m9_switch_01: {
                    path: "audio/guns/m9_switch_01.mp3",
                    volume: 1
                },
                m93r_01: {
                    path: "audio/guns/m93r_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m93r_reload_01: {
                    path: "audio/guns/m93r_reload_01.mp3",
                    volume: 1
                },
                m93r_reload_02: {
                    path: "audio/guns/m93r_reload_02.mp3",
                    volume: 1
                },
                m93r_switch_01: {
                    path: "audio/guns/m93r_switch_01.mp3",
                    volume: 1
                },
                glock_01: {
                    path: "audio/guns/glock_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                glock_reload_01: {
                    path: "audio/guns/glock_reload_01.mp3",
                    volume: 1
                },
                glock_reload_02: {
                    path: "audio/guns/glock_reload_02.mp3",
                    volume: 1
                },
                glock_switch_01: {
                    path: "audio/guns/glock_switch_01.mp3",
                    volume: 1
                },
                p30l_01: {
                    path: "audio/guns/p30l_01.mp3",
                    volume: 1.2,
                    maxInstances: 5
                },
                p30l_reload_01: {
                    path: "audio/guns/p30l_reload_01.mp3",
                    volume: 1.4
                },
                p30l_reload_02: {
                    path: "audio/guns/p30l_reload_02.mp3",
                    volume: 1.4
                },
                p30l_switch_01: {
                    path: "audio/guns/p30l_switch_01.mp3",
                    volume: 1.5
                },
                m1911_01: {
                    path: "audio/guns/m1911_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m1911_reload_01: {
                    path: "audio/guns/m1911_reload_01.mp3",
                    volume: 1
                },
                m1911_reload_02: {
                    path: "audio/guns/m1911_reload_02.mp3",
                    volume: 1
                },
                m1911_switch_01: {
                    path: "audio/guns/m1911_switch_01.mp3",
                    volume: 1
                },
                ot38_01: {
                    path: "audio/guns/ot38_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                ot38_reload_01: {
                    path: "audio/guns/ot38_reload_01.mp3",
                    volume: 1
                },
                ot38_reload_02: {
                    path: "audio/guns/ot38_reload_02.mp3",
                    volume: 1
                },
                ot38_switch_01: {
                    path: "audio/guns/ot38_switch_01.mp3",
                    volume: 1
                },
                ots38_01: {
                    path: "audio/guns/ots38_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                colt45_01: {
                    path: "audio/guns/colt45_01.mp3",
                    volume: 1
                },
                colt45_reload_01: {
                    path: "audio/guns/colt45_reload_01.mp3",
                    volume: 1
                },
                colt45_reload_02: {
                    path: "audio/guns/colt45_reload_02.mp3",
                    volume: 1
                },
                colt45_switch_01: {
                    path: "audio/guns/colt45_switch_01.mp3",
                    volume: 1
                },
                deagle_01: {
                    path: "audio/guns/deagle_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                deagle_reload_01: {
                    path: "audio/guns/deagle_reload_01.mp3",
                    volume: 1
                },
                deagle_reload_02: {
                    path: "audio/guns/deagle_reload_02.mp3",
                    volume: 1
                },
                deagle_switch_01: {
                    path: "audio/guns/deagle_switch_01.mp3",
                    volume: 1
                },
                flare_gun_01: {
                    path: "audio/guns/flare_gun_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                flare_gun_reload_01: {
                    path: "audio/guns/flare_gun_reload_01.mp3",
                    volume: 1
                },
                flare_gun_reload_02: {
                    path: "audio/guns/flare_gun_reload_02.mp3",
                    volume: 1
                },
                ak47_01: {
                    path: "audio/guns/ak47_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                ak47_reload_01: {
                    path: "audio/guns/ak47_reload_01.mp3",
                    volume: 1
                },
                ak47_switch_01: {
                    path: "audio/guns/ak47_switch_01.mp3",
                    volume: 1
                },
                an94_01: {
                    path: "audio/guns/an94_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                an94_reload_01: {
                    path: "audio/guns/an94_reload_01.mp3",
                    volume: 1
                },
                an94_switch_01: {
                    path: "audio/guns/an94_switch_01.mp3",
                    volume: 1
                },
                groza_01: {
                    path: "audio/guns/groza_01.mp3",
                    volume: .95,
                    maxInstances: 5
                },
                groza_reload_01: {
                    path: "audio/guns/groza_reload_01.mp3",
                    volume: 1.1
                },
                groza_switch_01: {
                    path: "audio/guns/groza_switch_01.mp3",
                    volume: 1.1
                },
                grozas_01: {
                    path: "audio/guns/grozas_01.mp3",
                    volume: .95,
                    maxInstances: 5
                },
                scar_01: {
                    path: "audio/guns/scar_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                scar_reload_01: {
                    path: "audio/guns/scar_reload_01.mp3",
                    volume: 1
                },
                scar_switch_01: {
                    path: "audio/guns/scar_switch_01.mp3",
                    volume: 1
                },
                scarssr_01: {
                    path: "audio/guns/scarssr_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                dp28_01: {
                    path: "audio/guns/dp28_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                dp28_reload_01: {
                    path: "audio/guns/dp28_reload_01.mp3",
                    volume: 1
                },
                dp28_switch_01: {
                    path: "audio/guns/dp28_switch_01.mp3",
                    volume: 1
                },
                bar_01: {
                    path: "audio/guns/bar_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                bar_reload_01: {
                    path: "audio/guns/bar_reload_01.mp3",
                    volume: 1
                },
                bar_switch_01: {
                    path: "audio/guns/bar_switch_01.mp3",
                    volume: 1
                },
                pkp_01: {
                    path: "audio/guns/pkp_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                pkp_reload_01: {
                    path: "audio/guns/pkp_reload_01.mp3",
                    volume: 1
                },
                pkp_switch_01: {
                    path: "audio/guns/pkp_switch_01.mp3",
                    volume: 1
                },
                m870_01: {
                    path: "audio/guns/m870_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m870_reload_01: {
                    path: "audio/guns/m870_reload_01.mp3",
                    volume: 1
                },
                m870_cycle_01: {
                    path: "audio/guns/m870_cycle_01.mp3",
                    volume: 1
                },
                m870_pull_01: {
                    path: "audio/guns/m870_pull_01.mp3",
                    volume: 1
                },
                spas12_01: {
                    path: "audio/guns/spas12_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                spas12_reload_01: {
                    path: "audio/guns/spas12_reload_01.mp3",
                    volume: 1
                },
                spas12_cycle_01: {
                    path: "audio/guns/spas12_cycle_01.mp3",
                    volume: 1
                },
                spas12_pull_01: {
                    path: "audio/guns/spas12_pull_01.mp3",
                    volume: 1
                },
                mp220_01: {
                    path: "audio/guns/mp220_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                mp220_reload_01: {
                    path: "audio/guns/mp220_reload_01.mp3",
                    volume: 1
                },
                mp220_deploy_01: {
                    path: "audio/guns/mp220_deploy_01.mp3",
                    volume: 1
                },
                saiga_01: {
                    path: "audio/guns/saiga_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                saiga_reload_01: {
                    path: "audio/guns/saiga_reload_01.mp3",
                    volume: 1
                },
                saiga_switch_01: {
                    path: "audio/guns/saiga_switch_01.mp3",
                    volume: 1
                },
                usas_01: {
                    path: "audio/guns/usas_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                usas_reload_01: {
                    path: "audio/guns/usas_reload_01.mp3",
                    volume: 1
                },
                usas_switch_01: {
                    path: "audio/guns/usas_switch_01.mp3",
                    volume: 1
                },
                m1100_01: {
                    path: "audio/guns/m1100_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m1100_reload_01: {
                    path: "audio/guns/m1100_reload_01.mp3",
                    volume: 1
                },
                m1100_deploy_01: {
                    path: "audio/guns/m1100_deploy_01.mp3",
                    volume: 1
                },
                m1014_01: {
                    path: "audio/guns/m1014_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m1014_reload_01: {
                    path: "audio/guns/m1014_reload_01.mp3",
                    volume: 1
                },
                m1014_deploy_01: {
                    path: "audio/guns/m1014_deploy_01.mp3",
                    volume: 1
                },
                m39_01: {
                    path: "audio/guns/m39_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m39_reload_01: {
                    path: "audio/guns/m39_reload_01.mp3",
                    volume: 1
                },
                m39_switch_01: {
                    path: "audio/guns/m39_switch_01.mp3",
                    volume: 1
                },
                svd_01: {
                    path: "audio/guns/svd_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                svd_reload_01: {
                    path: "audio/guns/svd_reload_01.mp3",
                    volume: 1
                },
                svd_switch_01: {
                    path: "audio/guns/svd_switch_01.mp3",
                    volume: 1
                },
                garand_01: {
                    path: "audio/guns/garand_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                garand_02: {
                    path: "audio/guns/garand_02.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                garand_reload_01: {
                    path: "audio/guns/garand_reload_01.mp3",
                    volume: 1
                },
                garand_switch_01: {
                    path: "audio/guns/garand_switch_01.mp3",
                    volume: 1
                },
                m1a1_01: {
                    path: "audio/guns/m1a1_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m1a1_reload_01: {
                    path: "audio/guns/m1a1_reload_01.mp3",
                    volume: 1
                },
                m1a1_switch_01: {
                    path: "audio/guns/m1a1_switch_01.mp3",
                    volume: 1
                },
                mp5_01: {
                    path: "audio/guns/mp5_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                mp5_reload_01: {
                    path: "audio/guns/mp5_reload_01.mp3",
                    volume: 1
                },
                mp5_switch_01: {
                    path: "audio/guns/mp5_switch_01.mp3",
                    volume: 1
                },
                mac10_01: {
                    path: "audio/guns/mac10_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                mac10_reload_01: {
                    path: "audio/guns/mac10_reload_01.mp3",
                    volume: 1
                },
                mac10_switch_01: {
                    path: "audio/guns/mac10_switch_01.mp3",
                    volume: 1
                },
                ump9_01: {
                    path: "audio/guns/ump9_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                ump9_reload_01: {
                    path: "audio/guns/ump9_reload_01.mp3",
                    volume: 1
                },
                ump9_switch_01: {
                    path: "audio/guns/ump9_switch_01.mp3",
                    volume: 1
                },
                vector_01: {
                    path: "audio/guns/vector_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                vector_02: {
                    path: "audio/guns/vector_02.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                vector_reload_01: {
                    path: "audio/guns/vector_reload_01.mp3",
                    volume: 1
                },
                vector_switch_01: {
                    path: "audio/guns/vector_switch_01.mp3",
                    volume: 1
                },
                scorpion_01: {
                    path: "audio/guns/scorpion_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                scorpion_reload_01: {
                    path: "audio/guns/scorpion_reload_01.mp3",
                    volume: 1
                },
                scorpion_switch_01: {
                    path: "audio/guns/scorpion_switch_01.mp3",
                    volume: 1
                },
                vss_01: {
                    path: "audio/guns/vss_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                vss_reload_01: {
                    path: "audio/guns/vss_reload_01.mp3",
                    volume: 1
                },
                vss_switch_01: {
                    path: "audio/guns/vss_switch_01.mp3",
                    volume: 1
                },
                famas_01: {
                    path: "audio/guns/famas_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                famas_reload_01: {
                    path: "audio/guns/famas_reload_01.mp3",
                    volume: 1
                },
                famas_switch_01: {
                    path: "audio/guns/famas_switch_01.mp3",
                    volume: 1
                },
                hk416_01: {
                    path: "audio/guns/hk416_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                hk416_reload_01: {
                    path: "audio/guns/hk416_reload_01.mp3",
                    volume: 1
                },
                hk416_switch_01: {
                    path: "audio/guns/hk416_switch_01.mp3",
                    volume: 1
                },
                m4a1_01: {
                    path: "audio/guns/m4a1_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m4a1_reload_01: {
                    path: "audio/guns/m4a1_reload_01.mp3",
                    volume: 1
                },
                m4a1_switch_01: {
                    path: "audio/guns/m4a1_switch_01.mp3",
                    volume: 1
                },
                mk12_01: {
                    path: "audio/guns/mk12_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                mk12_reload_01: {
                    path: "audio/guns/mk12_reload_01.mp3",
                    volume: 1
                },
                mk12_switch_01: {
                    path: "audio/guns/mk12_switch_01.mp3",
                    volume: 1
                },
                l86_01: {
                    path: "audio/guns/l86_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                l86_reload_01: {
                    path: "audio/guns/l86_reload_01.mp3",
                    volume: 1
                },
                l86_switch_01: {
                    path: "audio/guns/l86_switch_01.mp3",
                    volume: 1
                },
                m249_01: {
                    path: "audio/guns/m249_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                m249_reload_01: {
                    path: "audio/guns/m249_reload_01.mp3",
                    volume: 1.5
                },
                m249_switch_01: {
                    path: "audio/guns/m249_switch_01.mp3",
                    volume: 1.5
                },
                qbb97_01: {
                    path: "audio/guns/qbb97_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                qbb97_reload_01: {
                    path: "audio/guns/qbb97_reload_01.mp3",
                    volume: 1
                },
                qbb97_switch_01: {
                    path: "audio/guns/qbb97_switch_01.mp3",
                    volume: 1
                },
                scout_01: {
                    path: "audio/guns/scout_01.mp3",
                    volume: 2,
                    maxInstances: 5
                },
                scout_reload_01: {
                    path: "audio/guns/scout_reload_01.mp3",
                    volume: 1.2
                },
                scout_cycle_01: {
                    path: "audio/guns/scout_cycle_01.mp3",
                    volume: 1.2
                },
                scout_pull_01: {
                    path: "audio/guns/scout_pull_01.mp3",
                    volume: 1.2
                },
                model94_01: {
                    path: "audio/guns/model94_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                model94_reload_01: {
                    path: "audio/guns/model94_reload_01.mp3",
                    volume: 1
                },
                model94_cycle_01: {
                    path: "audio/guns/model94_cycle_01.mp3",
                    volume: 1
                },
                mkg45_01: {
                    path: "audio/guns/mkg45_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                mkg45_reload_01: {
                    path: "audio/guns/mkg45_reload_01.mp3",
                    volume: 1.25
                },
                mkg45_switch_01: {
                    path: "audio/guns/mkg45_switch_01.mp3",
                    volume: 1.25
                },
                blr_01: {
                    path: "audio/guns/blr_01.mp3",
                    volume: 1.5,
                    maxInstances: 5
                },
                blr_reload_01: {
                    path: "audio/guns/blr_reload_01.mp3",
                    volume: 1
                },
                blr_cycle_01: {
                    path: "audio/guns/blr_cycle_01.mp3",
                    volume: 1
                },
                mosin_01: {
                    path: "audio/guns/mosin_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                mosin_reload_01: {
                    path: "audio/guns/mosin_reload_01.mp3",
                    volume: 1
                },
                mosin_reload_02: {
                    path: "audio/guns/mosin_reload_02.mp3",
                    volume: 1
                },
                mosin_cycle_01: {
                    path: "audio/guns/mosin_cycle_01.mp3",
                    volume: 1
                },
                mosin_pull_01: {
                    path: "audio/guns/mosin_pull_01.mp3",
                    volume: 1
                },
                sv98_01: {
                    path: "audio/guns/sv98_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                sv98_reload_01: {
                    path: "audio/guns/sv98_reload_01.mp3",
                    volume: 1
                },
                sv98_cycle_01: {
                    path: "audio/guns/sv98_cycle_01.mp3",
                    volume: 1
                },
                sv98_pull_01: {
                    path: "audio/guns/sv98_pull_01.mp3",
                    volume: 1
                },
                awc_01: {
                    path: "audio/guns/awc_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                awc_reload_01: {
                    path: "audio/guns/awc_reload_01.mp3",
                    volume: 1
                },
                awc_cycle_01: {
                    path: "audio/guns/awc_cycle_01.mp3",
                    volume: 1
                },
                awc_pull_01: {
                    path: "audio/guns/awc_pull_01.mp3",
                    volume: 1
                },
                potato_cannon_01: {
                    path: "audio/guns/potato_cannon_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                potato_cannon_reload_01: {
                    path: "audio/guns/potato_cannon_reload_01.mp3",
                    volume: 1
                },
                potato_cannon_switch_01: {
                    path: "audio/guns/potato_cannon_switch_01.mp3",
                    volume: 1
                },
                potato_smg_01: {
                    path: "audio/guns/potato_smg_01.mp3",
                    volume: 1,
                    maxInstances: 5
                },
                potato_smg_reload_01: {
                    path: "audio/guns/potato_smg_reload_01.mp3",
                    volume: 1
                },
                potato_smg_switch_01: {
                    path: "audio/guns/potato_smg_switch_01.mp3",
                    volume: 1
                },
                bugle_01: {
                    path: "audio/guns/bugle_01.mp3",
                    volume: 1.5,
                    maxInstances: 3,
                    preload: !1
                },
                bugle_02: {
                    path: "audio/guns/bugle_02.mp3",
                    volume: 1.5,
                    maxInstances: 3,
                    preload: !1
                },
                bugle_03: {
                    path: "audio/guns/bugle_03.mp3",
                    volume: 1.5,
                    maxInstances: 3,
                    preload: !1
                },
                empty_fire_01: {
                    path: "audio/guns/empty_fire_01.mp3",
                    volume: .9
                },
                empty_fire_02: {
                    path: "audio/guns/empty_fire_02.mp3",
                    volume: .9
                },
                gun_switch_01: {
                    path: "audio/guns/gun_switch_01.mp3",
                    volume: 1
                },
                bandage_use_01: {
                    path: "audio/ui/bandage_use_01.mp3",
                    volume: 1
                },
                healthkit_use_01: {
                    path: "audio/ui/healthkit_use_01.mp3",
                    volume: 1
                },
                soda_use_01: {
                    path: "audio/ui/soda_use_01.mp3",
                    volume: 1
                },
                pills_use_01: {
                    path: "audio/ui/pills_use_01.mp3",
                    volume: 1
                },
                stow_weapon_01: {
                    path: "audio/ui/stow_weapon_01.mp3",
                    volume: 1
                }
            },
            hits: {
                stone_bullet_hit_01: {
                    path: "audio/hits/stone_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                wood_bullet_hit_01: {
                    path: "audio/hits/wood_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                wood_bullet_hit_02: {
                    path: "audio/hits/wood_bullet_hit_02.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                wood_bullet_hit_03: {
                    path: "audio/hits/wood_bullet_hit_03.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                wood_bullet_hit_04: {
                    path: "audio/hits/wood_bullet_hit_04.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                bush_bullet_hit_01: {
                    path: "audio/hits/bush_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                metal_bullet_hit_01: {
                    path: "audio/hits/metal_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                metal_bullet_hit_02: {
                    path: "audio/hits/metal_bullet_hit_02.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                metal_bullet_hit_03: {
                    path: "audio/hits/metal_bullet_hit_03.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                metal_bullet_hit_04: {
                    path: "audio/hits/metal_bullet_hit_04.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 6
                },
                pan_bullet_hit_01: {
                    path: "audio/hits/pan_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 6
                },
                brick_bullet_hit_01: {
                    path: "audio/hits/brick_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                punch_hit_01: {
                    path: "audio/hits/punch_hit_01.mp3",
                    volume: 1
                },
                knife_hit_01: {
                    path: "audio/hits/knife_hit_01.mp3",
                    volume: 1
                },
                pan_hit_01: {
                    path: "audio/hits/pan_hit_01.mp3",
                    volume: 1
                },
                axe_hit_01: {
                    path: "audio/hits/axe_hit_01.mp3",
                    volume: 1
                },
                hook_hit_01: {
                    path: "audio/hits/hook_hit_01.mp3",
                    volume: 1
                },
                saw_hit_01: {
                    path: "audio/hits/saw_hit_01.mp3",
                    volume: 2.5
                },
                crowbar_hit_01: {
                    path: "audio/hits/crowbar_hit_01.mp3",
                    volume: 1
                },
                spade_hit_01: {
                    path: "audio/hits/spade_hit_01.mp3",
                    volume: 1
                },
                hammer_hit_01: {
                    path: "audio/hits/hammer_hit_01.mp3",
                    volume: 1
                },
                metal_punch_hit_01: {
                    path: "audio/hits/metal_punch_hit_01.mp3",
                    volume: 1
                },
                metal_punch_hit_02: {
                    path: "audio/hits/metal_punch_hit_02.mp3",
                    volume: 1
                },
                player_bullet_hit_01: {
                    path: "audio/hits/player_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                player_bullet_hit_02: {
                    path: "audio/hits/player_bullet_hit_02.mp3",
                    volume: 1,
                    canCoalesce: !0
                },
                plastic_bullet_hit_01: {
                    path: "audio/hits/plastic_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                toilet_bullet_hit_01: {
                    path: "audio/hits/toilet_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                toilet_bullet_hit_02: {
                    path: "audio/hits/toilet_bullet_hit_02.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                glass_bullet_hit_01: {
                    path: "audio/hits/glass_bullet_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                concrete_hit_01: {
                    path: "audio/hits/concrete_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                frag_grass_01: {
                    path: "audio/hits/frag_grass_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                frag_sand_01: {
                    path: "audio/hits/frag_sand_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                frag_water_01: {
                    path: "audio/hits/frag_water_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                cloth_hit_01: {
                    path: "audio/hits/cloth_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                cloth_hit_02: {
                    path: "audio/hits/cloth_hit_02.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                organic_hit_01: {
                    path: "audio/hits/organic_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                piano_hit_01: {
                    path: "audio/hits/piano_hit_01.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                },
                piano_hit_02: {
                    path: "audio/hits/piano_hit_02.mp3",
                    volume: 1,
                    canCoalesce: !0,
                    maxInstances: 3
                }
            },
            sfx: {
                crate_break_01: {
                    path: "audio/sfx/crate_break_01.mp3",
                    volume: 1
                },
                crate_break_02: {
                    path: "audio/sfx/crate_break_02.mp3",
                    volume: 1
                },
                tree_break_01: {
                    path: "audio/sfx/tree_break_01.mp3",
                    volume: 1
                },
                bush_break_01: {
                    path: "audio/sfx/bush_break_01.mp3",
                    volume: 1
                },
                bush_enter_01: {
                    path: "audio/sfx/bush_enter_01.mp3",
                    volume: 1,
                    canCoalesce: !0
                },
                bush_enter_02: {
                    path: "audio/sfx/bush_enter_02.mp3",
                    volume: 1,
                    canCoalesce: !0
                },
                barrel_break_01: {
                    path: "audio/sfx/barrel_break_01.mp3",
                    volume: 1
                },
                barrel_break_02: {
                    path: "audio/sfx/barrel_break_02.mp3",
                    volume: 1
                },
                stone_break_01: {
                    path: "audio/sfx/stone_break_01.mp3",
                    volume: 1
                },
                wall_break_01: {
                    path: "audio/sfx/wall_break_01.mp3",
                    volume: 1
                },
                ceiling_break_01: {
                    path: "audio/sfx/ceiling_break_01.mp3",
                    volume: 1
                },
                ceiling_break_02: {
                    path: "audio/sfx/ceiling_break_02.mp3",
                    volume: 1
                },
                toilet_break_01: {
                    path: "audio/sfx/toilet_break_01.mp3",
                    volume: 1
                },
                toilet_break_02: {
                    path: "audio/sfx/toilet_break_02.mp3",
                    volume: 1
                },
                vending_break_01: {
                    path: "audio/sfx/vending_break_01.mp3",
                    volume: 1
                },
                window_break_01: {
                    path: "audio/sfx/window_break_01.mp3",
                    volume: 1
                },
                window_break_02: {
                    path: "audio/sfx/window_break_02.mp3",
                    volume: 1
                },
                drawers_break_01: {
                    path: "audio/sfx/drawers_break_01.mp3",
                    volume: 1
                },
                oven_break_01: {
                    path: "audio/sfx/oven_break_01.mp3",
                    volume: 1
                },
                deposit_box_break_01: {
                    path: "audio/sfx/deposit_box_break_01.mp3",
                    volume: 1
                },
                cloth_break_01: {
                    path: "audio/sfx/cloth_break_01.mp3",
                    volume: 1
                },
                screen_break_01: {
                    path: "audio/sfx/screen_break_01.mp3",
                    volume: 1
                },
                pumpkin_break_01: {
                    path: "audio/sfx/pumpkin_break_01.mp3",
                    volume: 1,
                    preload: !1
                },
                ceramic_break_01: {
                    path: "audio/sfx/ceramic_break_01.mp3",
                    volume: 1
                },
                footstep_grass_01: {
                    path: "audio/sfx/footstep_grass_01.mp3",
                    volume: 1
                },
                footstep_grass_02: {
                    path: "audio/sfx/footstep_grass_02.mp3",
                    volume: 1
                },
                footstep_metal_01: {
                    path: "audio/sfx/footstep_metal_01.mp3",
                    volume: 1
                },
                footstep_metal_02: {
                    path: "audio/sfx/footstep_metal_02.mp3",
                    volume: 1
                },
                footstep_metal_03: {
                    path: "audio/sfx/footstep_metal_03.mp3",
                    volume: 1
                },
                footstep_metal_04: {
                    path: "audio/sfx/footstep_metal_04.mp3",
                    volume: 1
                },
                footstep_metal_05: {
                    path: "audio/sfx/footstep_metal_05.mp3",
                    volume: 1
                },
                footstep_wood_01: {
                    path: "audio/sfx/footstep_wood_01.mp3",
                    volume: 1
                },
                footstep_wood_02: {
                    path: "audio/sfx/footstep_wood_02.mp3",
                    volume: 1
                },
                footstep_wood_03: {
                    path: "audio/sfx/footstep_wood_03.mp3",
                    volume: 1
                },
                footstep_sand_01: {
                    path: "audio/sfx/footstep_sand_01.mp3",
                    volume: 1
                },
                footstep_sand_02: {
                    path: "audio/sfx/footstep_sand_02.mp3",
                    volume: 1
                },
                footstep_water_01: {
                    path: "audio/sfx/footstep_water_01.mp3",
                    volume: 1
                },
                footstep_water_02: {
                    path: "audio/sfx/footstep_water_02.mp3",
                    volume: 1
                },
                footstep_tile_01: {
                    path: "audio/sfx/footstep_tile_01.mp3",
                    volume: 1
                },
                footstep_tile_02: {
                    path: "audio/sfx/footstep_tile_02.mp3",
                    volume: 1
                },
                footstep_asphalt_01: {
                    path: "audio/sfx/footstep_asphalt_01.mp3",
                    volume: 1
                },
                footstep_asphalt_02: {
                    path: "audio/sfx/footstep_asphalt_02.mp3",
                    volume: 1
                },
                footstep_brick_01: {
                    path: "audio/sfx/footstep_brick_01.mp3",
                    volume: 1
                },
                footstep_stone_01: {
                    path: "audio/sfx/footstep_stone_01.mp3",
                    volume: .8
                },
                footstep_carpet_01: {
                    path: "audio/sfx/footstep_carpet_01.mp3",
                    volume: 1
                },
                punch_swing_01: {
                    path: "audio/sfx/punch_swing_01.mp3",
                    volume: 1
                },
                knife_swing_01: {
                    path: "audio/sfx/knife_swing_01.mp3",
                    volume: 1
                },
                medium_swing_01: {
                    path: "audio/sfx/medium_swing_01.mp3",
                    volume: 1
                },
                heavy_swing_01: {
                    path: "audio/sfx/heavy_swing_01.mp3",
                    volume: 1
                },
                bullet_whiz_01: {
                    path: "audio/sfx/bullet_whiz_01.mp3",
                    volume: 1
                },
                bullet_whiz_02: {
                    path: "audio/sfx/bullet_whiz_02.mp3",
                    volume: 1
                },
                bullet_whiz_03: {
                    path: "audio/sfx/bullet_whiz_03.mp3",
                    volume: 1
                },
                frag_throw_01: {
                    path: "audio/sfx/frag_throw_01.mp3",
                    volume: 1
                },
                frag_pin_01: {
                    path: "audio/sfx/frag_pin_01.mp3",
                    volume: 1
                },
                frag_deploy_01: {
                    path: "audio/ui/frag_pickup_01.mp3",
                    volume: 1
                },
                frag_water_01: {
                    path: "audio/hits/frag_water_01.mp3",
                    volume: 1
                },
                strobe_click_01: {
                    path: "audio/sfx/strobe_click_01.mp3",
                    volume: 1
                },
                explosion_01: {
                    path: "audio/sfx/explosion_01.mp3",
                    volume: 1
                },
                explosion_02: {
                    path: "audio/sfx/explosion_02.mp3",
                    volume: 1
                },
                explosion_03: {
                    path: "audio/sfx/explosion_03.mp3",
                    volume: 1
                },
                explosion_04: {
                    path: "audio/sfx/explosion_04.mp3",
                    volume: 1,
                    maxInstances: 4
                },
                explosion_05: {
                    path: "audio/sfx/explosion_05.mp3",
                    volume: 1
                },
                explosion_smoke_01: {
                    path: "audio/sfx/explosion_smoke_01.mp3",
                    volume: 1
                },
                snowball_01: {
                    path: "audio/sfx/snowball_01.mp3",
                    volume: 1,
                    preload: !1
                },
                snowball_02: {
                    path: "audio/sfx/snowball_02.mp3",
                    volume: 1,
                    preload: !1
                },
                potato_01: {
                    path: "audio/sfx/potato_01.mp3",
                    volume: 1,
                    preload: !1
                },
                potato_02: {
                    path: "audio/sfx/potato_02.mp3",
                    volume: 1,
                    preload: !1
                },
                stow_weapon_01: {
                    path: "audio/ui/stow_weapon_01.mp3",
                    volume: 1
                },
                knife_deploy_01: {
                    path: "audio/ui/knife_deploy_01.mp3",
                    volume: 1
                },
                pan_pickup_01: {
                    path: "audio/ui/pan_pickup_01.mp3",
                    volume: 1
                },
                knuckles_deploy_01: {
                    path: "audio/ui/knuckles_deploy_01.mp3",
                    volume: 1
                },
                door_open_01: {
                    path: "audio/sfx/door_open_01.mp3",
                    volume: 1
                },
                door_close_01: {
                    path: "audio/sfx/door_close_01.mp3",
                    volume: 1
                },
                door_open_02: {
                    path: "audio/sfx/door_open_02.mp3",
                    volume: 1
                },
                door_close_02: {
                    path: "audio/sfx/door_close_02.mp3",
                    volume: 1
                },
                door_open_03: {
                    path: "audio/sfx/door_open_03.mp3",
                    volume: 1
                },
                door_close_03: {
                    path: "audio/sfx/door_close_03.mp3",
                    volume: 1
                },
                door_open_04: {
                    path: "audio/sfx/door_open_04.mp3",
                    volume: .8
                },
                door_error_01: {
                    path: "audio/sfx/door_error_01.mp3",
                    volume: 1
                },
                vault_change_01: {
                    path: "audio/sfx/vault_change_01.mp3",
                    volume: 1
                },
                vault_change_02: {
                    path: "audio/sfx/vault_change_02.mp3",
                    volume: 1,
                    preload: !1
                },
                vault_change_03: {
                    path: "audio/sfx/vault_change_03.mp3",
                    volume: 1,
                    preload: !1
                },
                cell_control_01: {
                    path: "audio/sfx/cell_control_01.mp3",
                    volume: 1
                },
                cell_control_02: {
                    path: "audio/sfx/cell_control_02.mp3",
                    volume: 1
                },
                plane_01: {
                    path: "audio/sfx/plane_01.mp3",
                    volume: 1
                },
                plane_02: {
                    path: "audio/sfx/plane_02.mp3",
                    volume: 1,
                    preload: !1
                },
                fighter_01: {
                    path: "audio/sfx/fighter_01.mp3",
                    volume: 1
                },
                airdrop_chute_01: {
                    path: "audio/sfx/airdrop_chute_01.mp3",
                    volume: 1
                },
                airdrop_fall_01: {
                    path: "audio/sfx/airdrop_fall_01.mp3",
                    volume: 1
                },
                airdrop_crash_01: {
                    path: "audio/sfx/airdrop_crash_01.mp3",
                    volume: 1
                },
                airdrop_crash_02: {
                    path: "audio/sfx/airdrop_crash_02.mp3",
                    volume: 1
                },
                airdrop_open_01: {
                    path: "audio/sfx/airdrop_open_01.mp3",
                    volume: 1
                },
                airdrop_open_02: {
                    path: "audio/sfx/airdrop_open_02.mp3",
                    volume: 1
                },
                button_press_01: {
                    path: "audio/sfx/button_press_01.mp3",
                    volume: 1,
                    maxInstances: 3
                },
                watering_01: {
                    path: "audio/sfx/watering_01.mp3",
                    volume: 1,
                    maxInstances: 3,
                    preload: !1
                },
                piano_02: {
                    path: "audio/sfx/piano_02.mp3",
                    volume: 1,
                    preload: !1
                },
                footstep_08: {
                    path: "audio/sfx/footstep_08.mp3",
                    volume: 1,
                    preload: !1
                },
                footstep_09: {
                    path: "audio/sfx/footstep_09.mp3",
                    volume: 1,
                    preload: !1
                },
                howl_01: {
                    path: "audio/sfx/howl_01.mp3",
                    volume: 1,
                    preload: !1
                },
                wheel_control_01: {
                    path: "audio/sfx/wheel_control_01.mp3",
                    volume: 1,
                    preload: !1
                },
                log_01: {
                    path: "audio/sfx/log_01.mp3",
                    volume: 1,
                    preload: !1
                },
                log_02: {
                    path: "audio/sfx/log_02.mp3",
                    volume: 1,
                    preload: !1
                },
                log_03: {
                    path: "audio/sfx/log_03.mp3",
                    volume: 1,
                    preload: !1
                },
                log_04: {
                    path: "audio/sfx/log_04.mp3",
                    volume: 1,
                    preload: !1
                },
                log_05: {
                    path: "audio/sfx/log_05.mp3",
                    volume: 1,
                    preload: !1
                },
                log_06: {
                    path: "audio/sfx/log_06.mp3",
                    volume: 1,
                    preload: !1
                },
                log_11: {
                    path: "audio/sfx/log_11.mp3",
                    volume: 4,
                    preload: !1
                },
                log_12: {
                    path: "audio/sfx/log_12.mp3",
                    volume: 4,
                    preload: !1
                },
                log_13: {
                    path: "audio/sfx/log_13.mp3",
                    volume: 2,
                    preload: !1
                },
                log_14: {
                    path: "audio/sfx/log_14.mp3",
                    volume: 2,
                    preload: !1
                },
                ability_stim_01: {
                    path: "audio/sfx/ability_stim_01.mp3",
                    volume: 4
                },
                xp_drop_01: {
                    path: "audio/sfx/xp_drop_01.mp3",
                    volume: 1.25,
                    preload: !1
                },
                xp_drop_02: {
                    path: "audio/sfx/xp_drop_02.mp3",
                    volume: 1.25,
                    preload: !1
                },
                cluck_01: {
                    path: "audio/sfx/cluck_01.mp3",
                    volume: 1,
                    preload: !1
                },
                cluck_02: {
                    path: "audio/sfx/cluck_02.mp3",
                    volume: 1,
                    preload: !1
                },
                feather_01: {
                    path: "audio/sfx/feather_01.mp3",
                    volume: 1,
                    preload: !1
                }
            },
            ambient: {
                ambient_wind_01: {
                    path: "audio/ambient/ambient_wind_01.mp3",
                    volume: 1,
                    loadPriority: 1
                },
                ambient_waves_01: {
                    path: "audio/ambient/ambient_waves_01.mp3",
                    volume: 1,
                    loadPriority: 1
                },
                ambient_stream_01: {
                    path: "audio/ambient/ambient_stream_01.mp3",
                    volume: 1,
                    loadPriority: 1
                },
                piano_music_01: {
                    path: "audio/ambient/piano_music_01.mp3",
                    volume: 1,
                    preload: !1
                },
                ambient_wind_02: {
                    path: "audio/ambient/ambient_wind_02.mp3",
                    volume: 1,
                    preload: !1
                },
                ambient_steam_01: {
                    path: "audio/ambient/ambient_steam_01.mp3",
                    volume: 1,
                    preload: !1
                },
                club_music_01: {
                    path: "audio/ambient/club_music_01.mp3",
                    volume: 1,
                    preload: !1
                },
                club_music_02: {
                    path: "audio/ambient/club_music_02.mp3",
                    volume: 1,
                    preload: !1
                },
                ambient_lab_01: {
                    path: "audio/ambient/ambient_lab_01.mp3",
                    volume: .2,
                    preload: !1
                }
            },
            ui: {
                ammo_pickup_01: {
                    path: "audio/ui/ammo_pickup_01.mp3",
                    volume: 1
                },
                clothes_pickup_01: {
                    path: "audio/ui/clothes_pickup_01.mp3",
                    volume: 1
                },
                bells_01: {
                    path: "audio/sfx/plane_02.mp3",
                    volume: 1,
                    preload: !1
                },
                helmet_pickup_01: {
                    path: "audio/ui/helmet_pickup_01.mp3",
                    volume: 1
                },
                chest_pickup_01: {
                    path: "audio/ui/chest_pickup_01.mp3",
                    volume: 1
                },
                gun_pickup_01: {
                    path: "audio/ui/gun_pickup_01.mp3",
                    volume: 1
                },
                scope_pickup_01: {
                    path: "audio/ui/scope_pickup_01.mp3",
                    volume: 1
                },
                pack_pickup_01: {
                    path: "audio/ui/pack_pickup_01.mp3",
                    volume: 1
                },
                soda_pickup_01: {
                    path: "audio/ui/soda_pickup_01.mp3",
                    volume: 1
                },
                pills_pickup_01: {
                    path: "audio/ui/pills_pickup_01.mp3",
                    volume: 1
                },
                bandage_pickup_01: {
                    path: "audio/ui/bandage_pickup_01.mp3",
                    volume: 1
                },
                healthkit_pickup_01: {
                    path: "audio/ui/healthkit_pickup_01.mp3",
                    volume: 1
                },
                frag_pickup_01: {
                    path: "audio/ui/frag_pickup_01.mp3",
                    volume: 1
                },
                snowball_pickup_01: {
                    path: "audio/ui/snowball_pickup_01.mp3",
                    volume: 1,
                    preload: !1
                },
                potato_pickup_01: {
                    path: "audio/ui/potato_pickup_01.mp3",
                    volume: 1,
                    preload: !1
                },
                heavy_pickup_01: {
                    path: "audio/ui/heavy_pickup_01.mp3",
                    volume: 1
                },
                pan_pickup_01: {
                    path: "audio/ui/pan_pickup_01.mp3",
                    volume: 1
                },
                perk_pickup_01: {
                    path: "audio/ui/perk_pickup_01.mp3",
                    volume: 1
                },
                xp_pickup_01: {
                    path: "audio/ui/xp_pickup_01.mp3",
                    volume: 1.5,
                    preload: !1
                },
                xp_pickup_02: {
                    path: "audio/ui/xp_pickup_02.mp3",
                    volume: 1.5,
                    preload: !1
                },
                ping_danger_01: {
                    path: "audio/ui/ping_danger_01.mp3",
                    volume: 1
                },
                ping_coming_01: {
                    path: "audio/ui/ping_coming_01.mp3",
                    volume: 1
                },
                ping_help_01: {
                    path: "audio/ui/ping_help_01.mp3",
                    volume: 1
                },
                ping_leader_01: {
                    path: "audio/ui/ping_leader_01.mp3",
                    volume: 1,
                    preload: !1
                },
                ping_airdrop_01: {
                    path: "audio/ui/ping_airdrop_01.mp3",
                    volume: 1
                },
                ping_airstrike_01: {
                    path: "audio/ui/ping_airstrike_01.mp3",
                    volume: 1
                },
                ping_unlock_01: {
                    path: "audio/ui/ping_unlock_01.mp3",
                    volume: 1,
                    preload: !1
                },
                emote_01: {
                    path: "audio/ui/emote_01.mp3",
                    volume: 1
                },
                trick_01: {
                    path: "audio/ui/trick_01.mp3",
                    volume: 1.5,
                    preload: !1
                },
                trick_02: {
                    path: "audio/ui/trick_02.mp3",
                    volume: 1.5,
                    preload: !1
                },
                trick_03: {
                    path: "audio/ui/trick_03.mp3",
                    volume: 1.5,
                    preload: !1
                },
                treat_01: {
                    path: "audio/ui/treat_01.mp3",
                    volume: 1,
                    preload: !1
                },
                loot_drop_01: {
                    path: "audio/ui/loot_drop_01.mp3",
                    volume: 1
                },
                notification_start_01: {
                    path: "audio/ui/notification_start_01.mp3",
                    volume: 1
                },
                notification_join_01: {
                    path: "audio/ui/notification_join_01.mp3",
                    volume: 1
                },
                leader_assigned_01: {
                    path: "audio/ui/leader_assigned_01.mp3",
                    volume: 1,
                    maxInstances: 1
                },
                leader_dead_01: {
                    path: "audio/ui/leader_dead_01.mp3",
                    volume: 1.75,
                    maxInstances: 1
                },
                lt_assigned_01: {
                    path: "audio/ui/lt_assigned_01.mp3",
                    volume: 1,
                    preload: !1,
                    maxInstances: 1
                },
                medic_assigned_01: {
                    path: "audio/ui/medic_assigned_01.mp3",
                    volume: 2,
                    preload: !1,
                    maxInstances: 1
                },
                marksman_assigned_01: {
                    path: "audio/ui/marksman_assigned_01.mp3",
                    volume: 2,
                    preload: !1,
                    maxInstances: 1
                },
                recon_assigned_01: {
                    path: "audio/ui/recon_assigned_01.mp3",
                    volume: 1.5,
                    preload: !1,
                    maxInstances: 1
                },
                grenadier_assigned_01: {
                    path: "audio/ui/grenadier_assigned_01.mp3",
                    volume: 2.5,
                    preload: !1,
                    maxInstances: 1
                },
                bugler_assigned_01: {
                    path: "audio/ui/bugler_assigned_01.mp3",
                    volume: 2.5,
                    preload: !1,
                    maxInstances: 1
                },
                last_man_assigned_01: {
                    path: "audio/ui/last_man_assigned_01.mp3",
                    volume: 1.75,
                    preload: !1,
                    maxInstances: 1
                },
                helmet03_forest_pickup_01: {
                    path: "audio/ui/helmet03_forest_pickup_01.mp3",
                    volume: 1,
                    maxInstances: 1,
                    preload: !1
                },
                kill_leader_assigned_01: {
                    path: "audio/ui/kill_leader_assigned_01.mp3",
                    volume: 1.5,
                    maxInstances: 1,
                    preload: !1
                },
                kill_leader_assigned_02: {
                    path: "audio/ui/kill_leader_assigned_02.mp3",
                    volume: 1.5,
                    maxInstances: 1,
                    preload: !1
                },
                kill_leader_dead_01: {
                    path: "audio/ui/kill_leader_dead_01.mp3",
                    volume: 1.5,
                    maxInstances: 1,
                    preload: !1
                },
                kill_leader_dead_02: {
                    path: "audio/ui/kill_leader_dead_02.mp3",
                    volume: 1.5,
                    maxInstances: 1,
                    preload: !1
                },
                spawn_01: {
                    path: "audio/ui/spawn_01.mp3",
                    volume: 3,
                    preload: !1
                }
            },
            music: {
                menu_music: {
                    path: "audio/ambient/menu_music_01.mp3",
                    volume: 1,
                    loadPriority: 2
                }
            }
        }
            , ta = {
            footstep_grass: {
                channel: "sfx",
                sounds: ["footstep_grass_01", "footstep_grass_02"]
            },
            footstep_container: {
                channel: "sfx",
                sounds: ["footstep_metal_03"]
            },
            footstep_warehouse: {
                channel: "sfx",
                sounds: ["footstep_metal_01", "footstep_metal_02"]
            },
            footstep_house: {
                channel: "sfx",
                sounds: ["footstep_wood_02", "footstep_wood_03"]
            },
            footstep_shack: {
                channel: "sfx",
                sounds: ["footstep_wood_01"]
            },
            footstep_sand: {
                channel: "sfx",
                sounds: ["footstep_sand_01", "footstep_sand_02"]
            },
            footstep_water: {
                channel: "sfx",
                sounds: ["footstep_water_01", "footstep_water_02"]
            },
            footstep_tile: {
                channel: "sfx",
                sounds: ["footstep_tile_01", "footstep_tile_02"]
            },
            footstep_asphalt: {
                channel: "sfx",
                sounds: ["footstep_asphalt_01", "footstep_asphalt_02"]
            },
            footstep_brick: {
                channel: "sfx",
                sounds: ["footstep_brick_01"]
            },
            footstep_bunker: {
                channel: "sfx",
                sounds: ["footstep_metal_04", "footstep_metal_05"]
            },
            footstep_stone: {
                channel: "sfx",
                sounds: ["footstep_stone_01"]
            },
            footstep_carpet: {
                channel: "sfx",
                sounds: ["footstep_carpet_01"]
            },
            player_bullet_hit: {
                channel: "hits",
                sounds: ["player_bullet_hit_01"]
            },
            metal_punch: {
                channel: "hits",
                sounds: ["metal_punch_hit_01", "metal_punch_hit_02"]
            },
            cloth_punch: {
                channel: "hits",
                sounds: ["cloth_hit_01"]
            },
            cloth_bullet: {
                channel: "hits",
                sounds: ["cloth_hit_02"]
            },
            organic_hit: {
                channel: "hits",
                sounds: ["organic_hit_01"]
            },
            piano_hit: {
                channel: "hits",
                sounds: ["piano_hit_01", "piano_hit_02"]
            },
            wall_bullet: {
                channel: "hits",
                sounds: ["metal_bullet_hit_01"]
            },
            wall_wood_bullet: {
                channel: "hits",
                sounds: ["wood_bullet_hit_02"]
            },
            wall_brick_bullet: {
                channel: "hits",
                sounds: ["brick_bullet_hit_01"]
            },
            stone_bullet: {
                channel: "hits",
                sounds: ["stone_bullet_hit_01"]
            },
            barrel_bullet: {
                channel: "hits",
                sounds: ["metal_bullet_hit_03"]
            },
            pan_bullet: {
                channel: "hits",
                sounds: ["pan_bullet_hit_01"]
            },
            silo_bullet: {
                channel: "hits",
                sounds: ["metal_bullet_hit_04"]
            },
            toilet_porc_bullet: {
                channel: "hits",
                sounds: ["toilet_bullet_hit_01"]
            },
            toilet_metal_bullet: {
                channel: "hits",
                sounds: ["toilet_bullet_hit_02"]
            },
            glass_bullet: {
                channel: "hits",
                sounds: ["glass_bullet_hit_01"]
            },
            cobalt_bullet: {
                channel: "hits",
                sounds: ["metal_bullet_hit_02"]
            },
            concrete_hit: {
                channel: "hits",
                sounds: ["concrete_hit_01"]
            },
            wood_prop_bullet: {
                channel: "hits",
                sounds: ["wood_bullet_hit_03"]
            },
            wood_crate_bullet: {
                channel: "hits",
                sounds: ["wood_bullet_hit_04"]
            },
            ammo_crate_bullet: {
                channel: "hits",
                sounds: ["plastic_bullet_hit_01"]
            },
            bush_bullet: {
                channel: "hits",
                sounds: ["bush_bullet_hit_01"]
            },
            tree_bullet: {
                channel: "hits",
                sounds: ["wood_bullet_hit_01"]
            },
            player_bullet_grunt: {
                channel: "hits",
                sounds: ["player_bullet_hit_02"]
            },
            bullet_whiz: {
                channel: "sfx",
                sounds: ["bullet_whiz_01", "bullet_whiz_02", "bullet_whiz_03"]
            },
            frag_grass: {
                channel: "hits",
                sounds: ["frag_grass_01"]
            },
            frag_sand: {
                channel: "hits",
                sounds: ["frag_sand_01"]
            },
            frag_water: {
                channel: "hits",
                sounds: ["frag_water_01"]
            },
            kill_leader_assigned: {
                channel: "ui",
                sounds: ["kill_leader_assigned_01", "kill_leader_assigned_02"]
            },
            kill_leader_dead: {
                channel: "ui",
                sounds: ["kill_leader_dead_01", "kill_leader_dead_02"]
            },
            cluck: {
                channel: "sfx",
                sounds: ["cluck_01", "cluck_02"]
            }
        }
            , ia = {
            activePlayer: {
                volume: .5,
                maxRange: 48,
                list: "players",
                type: "sound"
            },
            otherPlayers: {
                volume: .5,
                maxRange: 48,
                list: "players",
                type: "sound"
            },
            hits: {
                volume: .4,
                maxRange: 48,
                list: "hits",
                type: "sound"
            },
            sfx: {
                volume: 1,
                maxRange: 48,
                list: "sfx",
                type: "sound"
            },
            ambient: {
                volume: 1,
                maxRange: 1,
                list: "ambient",
                type: "sound"
            },
            ui: {
                volume: .75,
                maxRange: 48,
                list: "ui",
                type: "sound"
            },
            music: {
                volume: 1,
                maxRange: 1,
                list: "music",
                type: "music"
            }
        }
            , ra = {
            cathedral: {
                path: "audio/reverb/cathedral_01.mp3",
                volume: .7,
                stereoSpread: .004
            },
            cave: {
                path: "audio/reverb/cave_mono_01.mp3",
                volume: .7,
                echoVolume: .5,
                echoDelay: .25,
                echoLowPass: 800,
                stereoSpread: .004
            }
        }
            , fe = {
            Sounds: ea,
            Groups: ta,
            Channels: ia,
            Reverbs: ra
        }
            , ri = .003
            , pt = .5;
        class aa {
            mute = !1;
            masterVolume = 1;
            soundVolume = 1;
            musicVolume = 1;
            baseVolume = .5;
            sounds = {};
            loadedFiles = {};
            preloadedSounds = !1;
            cameraPos = n.create(0, 0);
            activeLayer = 0;
            underground = !1;
            soundInstances = [];
            constructor(e) {
                ye.Sound.volume = .5,
                ye.Sound.on("fileload", this.loadHandler, this)
            }
            preloadSounds() {
                if (!this.preloadedSounds) {
                    this.preloadedSounds = !0;
                    const e = {}
                        , t = Object.keys(fe.Sounds);
                    for (let s = 0; s < t.length; s++) {
                        const m = t[s]
                            , d = fe.Sounds[m]
                            , h = Object.keys(d);
                        for (let p = 0; p < h.length; p++) {
                            const w = h[p];
                            e[w] !== void 0 && console.log(`Sound ${w} defined multiple times!`),
                            e[w] = !0
                        }
                    }
                    const i = []
                        , r = Object.keys(fe.Channels);
                    for (let s = 0; s < r.length; s++) {
                        const m = r[s]
                            , d = fe.Channels[m]
                            , h = fe.Sounds[d.list]
                            , p = Object.keys(h);
                        for (let w = 0; w < p.length; w++) {
                            const f = p[w]
                                , S = h[f];
                            if (S.preload === void 0 || S.preload) {
                                const x = {
                                    canCoalesce: S.canCoalesce,
                                    channels: S.maxInstances,
                                    volume: S.volume
                                };
                                i.push({
                                    name: f,
                                    channel: m,
                                    path: S.path,
                                    options: x,
                                    priority: S.loadPriority || 0
                                })
                            }
                        }
                    }
                    i.sort( (s, m) => m.priority - s.priority);
                    for (let s = 0; s < i.length; s++) {
                        const m = i[s];
                        this.loadSound(m)
                    }
                    const a = fe.Reverbs
                        , l = Object.keys(a);
                    for (let s = 0; s < l.length; s++) {
                        const m = l[s]
                            , d = a[m];
                        ye.Sound.registerReverb(d.path, m, d)
                    }
                }
            }
            loadSound(e) {
                const t = e.name + e.channel;
                this.sounds[t] || (ye.Sound.registerSound(e.path, t, e.options),
                this.sounds[t] = {
                    path: e.path,
                    name: e.name,
                    channel: e.channel
                })
            }
            loadHandler(e) {
                this.loadedFiles[e] = !0
            }
            update(e) {
                for (let r = this.soundInstances.length - 1; r >= 0; r--) {
                    const a = this.soundInstances[r];
                    (a.instance.playState == "playFinished" || a.instance.playState == "playInterrupted" || a.instance.playState == "playFailed") && this.soundInstances.splice(r, 1)
                }
                const t = [0, 1, 1 / 3, 2 / 3]
                    , i = this.underground ? t[this.activeLayer] : 0;
                ye.Sound.setReverbs({
                    cathedral: i
                }),
                ye.Sound.update(e)
            }
            playSound(e, t={}) {
                if (!e || e == "none")
                    return null;
                t.channel = t.channel || "activePlayer",
                t.startSilent = t.startSilent || !1,
                t.forceStart = t.forceStart || !1,
                t.loop = t.loop || !1,
                t.soundPos = t.soundPos || null,
                t.fallOff = t.fallOff || 0,
                t.filter = t.filter || "",
                t.delay = t.delay || 0,
                t.ignoreMinAllowable = t.ignoreMinAllowable || !1,
                t.rangeMult = t.rangeMult || 1,
                t.offset = t.offset || 0,
                t.ambient = t.channel == "ambient" || t.channel == "music",
                t.detune = t.detune || 0,
                t.volumeScale = t.volumeScale || 1;
                let i = null;
                const r = fe.Channels[t.channel];
                if (r && (!this.mute || t.forceStart)) {
                    const a = this.baseVolume * 1 * this.getTypeVolume(r.type) * t.volumeScale
                        , l = t.layer !== void 0 && !g.sameAudioLayer(t.layer, this.activeLayer)
                        , s = t.filter ? l || t.forceFilter ? t.filter : "reverb" : "none";
                    if (t.channel != "activePlayer" && t.soundPos) {
                        const m = n.sub(this.cameraPos, t.soundPos)
                            , d = n.length(m);
                        let h = r.maxRange * t.rangeMult;
                        z.eqAbs(h, 0) && (h = 1);
                        const p = z.clamp(Math.abs(d / h), 0, 1)
                            , w = Math.pow(1 - p, 1 + t.fallOff * 2);
                        let f = r.volume * w * a;
                        if (f = l ? f * pt : f,
                        f > ri || t.ignoreMinAllowable) {
                            const S = z.clamp(m.x / h * -1, -1, 1);
                            i = ye.Sound.play(e + t.channel, {
                                filter: s,
                                loop: t.loop ? -1 : 0,
                                volume: t.startSilent ? 0 : f,
                                pan: S,
                                delay: t.delay,
                                offset: t.offset,
                                ambient: t.ambient,
                                detune: t.detune
                            })
                        }
                    } else {
                        let m = r.volume * a;
                        m = l ? m * pt : m,
                        i = ye.Sound.play(e + t.channel, {
                            filter: s,
                            loop: t.loop ? -1 : 0,
                            volume: t.startSilent ? 0 : m,
                            delay: t.delay,
                            offset: t.offset,
                            ambient: t.ambient,
                            detune: t.detune
                        })
                    }
                    if (i && (t.loop || t.channel == "music")) {
                        const m = t.channel == "music" ? "music" : "sound";
                        this.soundInstances.push({
                            instance: i,
                            type: m
                        })
                    }
                }
                return i
            }
            playGroup(e, t={}) {
                const i = fe.Groups[e];
                if (i) {
                    const r = i.sounds
                        , a = Math.floor(g.random(0, r.length));
                    return t.channel = i.channel,
                    this.playSound(r[a], t)
                }
                return null
            }
            updateSound(e, t, i, r={}) {
                r.fallOff = r.fallOff || 0,
                r.rangeMult = r.rangeMult || 1,
                r.ignoreMinAllowable = r.ignoreMinAllowable || !1,
                r.volumeScale = r.volumeScale || 1;
                const a = fe.Channels[t];
                if (e && a) {
                    const l = this.baseVolume * 1 * this.getTypeVolume(a.type) * r.volumeScale
                        , s = n.sub(this.cameraPos, i)
                        , m = n.length(s);
                    let d = a.maxRange * r.rangeMult;
                    z.eqAbs(d, 0) && (d = 1);
                    const h = z.clamp(Math.abs(m / d), 0, 1)
                        , p = Math.pow(1 - h, 1 + r.fallOff * 2);
                    let w = a.volume * p * l;
                    if (w = r.layer === void 0 || g.sameAudioLayer(r.layer, this.activeLayer) ? w : w * pt,
                    w > ri || r.ignoreMinAllowable) {
                        const S = z.clamp(s.x / d * -1, -1, 1);
                        e.volume = w,
                        e.pan = S
                    }
                }
            }
            setMasterVolume(e) {
                e = z.clamp(e, 0, 1),
                ye.Sound.volume = e
            }
            _setInstanceTypeVolume(e, t) {
                t = z.clamp(t, 0, 1);
                const i = this.getTypeVolume(e)
                    , r = i > 1e-4 ? t / i : 0;
                for (let a = 0; a < this.soundInstances.length; a++) {
                    const l = this.soundInstances[a];
                    l.type == e && (l.instance.volume *= r)
                }
            }
            setSoundVolume(e) {
                this._setInstanceTypeVolume("sound", e),
                this.soundVolume = e
            }
            setMusicVolume(e) {
                this._setInstanceTypeVolume("music", e),
                this.musicVolume = e
            }
            setVolume(e, t, i) {
                if (e) {
                    i = i || "sound";
                    const r = this.getTypeVolume(i);
                    e.volume = t * r
                }
            }
            getVolume(e) {
                return e ? e.volume : 0
            }
            setMute(e) {
                return this.mute = e,
                ye.Sound.setMute(this.mute),
                this.mute
            }
            muteToggle() {
                return this.setMute(!this.mute)
            }
            stopSound(e) {
                e?.stop()
            }
            stopAll() {
                ye.Sound.stop()
            }
            allLoaded() {
                const e = Object.keys(this.sounds);
                for (let t = 0; t < e.length; t++) {
                    const i = this.sounds[e[t]];
                    if (!this.isSoundLoaded(i.name, i.channel))
                        return !1
                }
                return !0
            }
            isSoundLoaded(e, t) {
                const i = this.sounds[e + t];
                return i && this.loadedFiles[i.path]
            }
            isSoundPlaying(e) {
                return !!e && e.playState == ye.Sound.PLAY_SUCCEEDED
            }
            getSoundDefVolume(e, t) {
                const i = fe.Sounds[t][e]
                    , r = fe.Channels[t];
                return i && r ? i.volume * r.volume : 1
            }
            getTypeVolume(e) {
                switch (e) {
                case "music":
                    return this.musicVolume;
                case "sound":
                    return this.soundVolume;
                default:
                    return this.soundVolume
                }
            }
        }
        const sa = {
            ENV: "website",
            muteAudio: !1,
            masterVolume: 1,
            soundVolume: 1,
            musicVolume: 1,
            highResTex: !0,
            screenShake: !0,
            anonPlayerNames: !1,
            touchMoveStyle: "anywhere",
            touchAimStyle: "anywhere",
            touchAimLine: !0,
            profile: null,
            playerName: "",
            region: "na",
            gameModeIdx: 2,
            teamAutoFill: !0,
            language: "en",
            prerollGamesPlayed: 0,
            totalGamesPlayed: 0,
            promptAppRate: !0,
            regionSelected: !1,
            lastNewsTimestamp: 0,
            perkModeRole: "",
            loadout: le.defaultLoadout(),
            sessionCookie: "",
            binds: "",
            version: 1
        };
        class oa {
            loaded = !1;
            localStorageAvailable = !0;
            config = {};
            onModifiedListeners = [];
            async load(e) {
                const t = r => {
                    let a = {};
                    try {
                        a = JSON.parse(r)
                    } catch {}
                    this.config = g.mergeDeep({}, sa, a),
                    this.checkUpgradeConfig(),
                    this.onModified(),
                    this.loaded = !0
                }
                ;
                let i = "{}";
                try {
                    i = localStorage.getItem("surviv_config")
                } catch {
                    this.localStorageAvailable = !1
                }
                t(i),
                Br() ? (this.config.ENV = "CrazyGames",
                await Nr()) : Vr() ? (this.config.ENV = "POKI",
                await jr()) : qr() ? (this.config.ENV = "GameMonetize",
                await Fr()) : (this.config.ENV = "website",
                document.getElementById("btn-start-fullscreen").style.display = "inline-block",
                document.getElementById("btn-game-fullscreen").style.display = "block",
                document.getElementById("left-column").style.display = "block"),
                e(),
                this.config.ENV === "POKI" && window.PokiSDK.gameLoadingFinished()
            }
            store() {
                const e = JSON.stringify(this.config);
                if (this.localStorageAvailable)
                    try {
                        localStorage.setItem("surviv_config", e)
                    } catch {}
            }
            set(e, t) {
                if (!e)
                    return;
                const i = e.split(".");
                let r = this.config;
                for (; i.length > 1; )
                    r = r[i.shift()];
                r[i.shift()] = t,
                this.store(),
                this.onModified(e)
            }
            get(e) {
                if (!e)
                    return;
                const t = e.split(".");
                let i = this.config;
                for (let r = 0; r < t.length; r++)
                    i = i[t[r]];
                return i
            }
            addModifiedListener(e) {
                this.onModifiedListeners.push(e)
            }
            onModified(e) {
                for (let t = 0; t < this.onModifiedListeners.length; t++)
                    this.onModifiedListeners[t](e)
            }
            checkUpgradeConfig() {}
        }
        const la = JSON.parse(`["2 girls 1 cup","2g1c","4r5e","5h1t","5hit","a_s_s","a55","a55hole","acrotomophilia","aeolus","ahole","alabama hot pocket","alaskan pipeline","anal","analprobe","anilingus","anus","apeshit","ar5e","areola","areole","arian","arrse","arse","arsehole","aryan","ass","ass hole","assbag","assbandit","assbang","assbanged","assbanger","assbangs","assbite","assclown","asscock","asscracker","asses","assface","assfuck","assfucker","ass-fucker","assfukka","assgoblin","assh0le","asshat","ass-hat","asshead","assho1e","asshole","assholes","asshopper","ass-jabber","assjacker","asslick","asslicker","assmaster","assmonkey","assmunch","assmuncher","assnigger","asspirate","ass-pirate","assshit","assshole","asssucker","asswad","asswhole","asswipe","asswipes","auto erotic","autoerotic","axwound","azazel","azz","b!tch","b00bs","b17ch","b1tch","babe","babeland","babes","baby batter","baby juice","balls","ball gag","ball gravy","ball kicking","ball licking","ball sack","ball sucking","ballbag","ballsack","bampot","bang","bangbros","banger","bareback","barely legal","barenaked","barf","bastard","bastardo","bastards","bastinado","bawdy","bbw","bdsm","beaner","beaners","beardedclam","beastial","beastiality","beatch","beater","beaver cleaver","beaver lips","beeyotch","bellend","beotch","bestial","bestiality","bi+ch","biatch","big black","big breasts","big knockers","big tits","bigtits","bimbo","bimbos","birdlock","bitch","bitchass","bitched","bitcher","bitchers","bitches","bitchin","bitching","bitchtits","bitchy","black cock","blonde action","blonde on blonde action","blow job","blow your load","blowjob","blowjobs","blue waffle","blumpkin","bod","bodily","boink","boiolas","bollock","bollocks","bollok","bollox","bondage","boned","boner","boners","bong","boob","boobies","boobs","booby","booger","bookie","booobs","boooobs","booooobs","booooooobs","bootee","bootie","booty","booty call","booze","boozer","boozy","bosom","bosomy","bra","brassiere","breast","breasts","breeder","brotherfucker","brown showers","brunette action","buceta","bugger","bukkake","bull shit","bulldyke","bullet vibe","bullshit","bullshits","bullshitted","bullturds","bum","bumblefuck","bung","bung hole","bunghole","bunny fucker","busty","butt","butt fuck","butt plug","buttcheeks","buttfuck","buttfucka","buttfucker","butthole","buttmuch","butt-pirate","buttplug","c.0.c.k","c.o.c.k.","c.u.n.t","c0ck","c-0-c-k","c0cksucker","caca","cahone","camel toe","cameltoe","camgirl","camslut","camwhore","carpet muncher","carpetmuncher","cawk","cervix","chesticle","chinc","chincs","chink","choad","chocolate rosebuds","chode","chodes","cipa","circlejerk","cl1t","cleveland steamer","climax","clit","clitface","clitfuck","clitoris","clitorus","clits","clitty","clover clamps","clusterfuck","cnut","cocain","cocaine","cock","c-o-c-k","cock sucker","cockass","cockbite","cockblock","cockburger","cockeye","cockface","cockfucker","cockhead","cockholster","cockjockey","cockknocker","cockknoker","cocklump","cockmaster","cockmongler","cockmongruel","cockmonkey","cockmunch","cockmuncher","cocknose","cocknugget","cocks","cockshit","cocksmith","cocksmoke","cocksmoker","cocksniffer","cocksuck","cocksucked","cocksucker","cock-sucker","cocksucking","cocksucks","cocksuka","cocksukka","cockwaffle","coital","cok","cokmuncher","coksucka","commie","condom","coochie","coochy","coon","coons","cooter","coprolagnia","coprophilia","corksucker","cornhole","cox","crabs","crack","crackwhore","crap","crappy","creampie","crotte","cum","cumbubble","cumdumpster","cumguzzler","cumjockey","cummer","cummin","cumming","cums","cumshot","cumshots","cumslut","cumstain","cumtart","cunilingus","cunillingus","cunnie","cunnilingus","cunny","cunt","c-u-n-t","cuntass","cuntface","cunthole","cunthunter","cuntlick","cuntlicker","cuntlicking","cuntrag","cunts","cuntslut","cyalis","cyberfuc","cyberfuck","cyberfucked","cyberfucker","cyberfuckers","cyberfucking","d0ng","d0uch3","d0uche","d1ck","d1ld0","d1ldo","dago","dagos","darkie","damn","damned","dammit","date rape","daterape","dawgie-style","deep throat","deepthroat","deggo","dendrophilia","dick","dickbag","dickbeaters","dickdipper","dickface","dickflipper","dickfuck","dickfucker","dickhead","dickheads","dickhole","dickish","dick-ish","dickjuice","dickmilk ","dickmonger","dickripper","dicks","dicksipper","dickslap","dick-sneeze","dicksuck","dicksucker","dicksucking","dicktickler","dickwad","dickweasel","dickweed","dickwhipper","dickwod","dickzipper","diddle","dike","dildo","dildos","diligaf","dillweed","dimwit","dingle","dingleberries","dingleberry","dink","dinks","dipship","dipshit","dirsa","dirty pillows","dirty sanchez","dlck","dog style","dog-fucker","doggie style","doggiestyle","doggie-style","doggin","dogging","doggy style","doggystyle","doggy-style","dolcett","domination","dominatrix","dommes","dong","donkey punch","donkeyribber","doochbag","doofus","dookie","doosh","dopey","double dong","double penetration","doublelift","douch3","douche","douchebag","douchebags","douche-fag","douchewaffle","douchey","dp action","drunk","dry hump","duche","dumass","dumb ass","dumbass","dumbasses","dumbcunt","dumbfuck","dumbshit","dummy","dumshit","dvda","dyke","dykes","eat my ass","ecchi","ejaculate","ejaculated","ejaculates","ejaculating","ejaculatings","ejaculation","ejakulate","enlargement","erect","erection","erotic","erotism","escort","essohbee","eunuch","extacy","extasy","f u c k","f u c k e r","f.u.c.k","f_u_c_k","f4nny","fack","fag","fagbag","fagfucker","fagg","fagged","fagging","faggit","faggitt","faggot","faggotcock","faggs","fagot","fagots","fags","fagtard","faig","faigt","fanny","fannybandit","fannyflaps","fannyfucker","fanyy","fartknocker","fatass","fcuk","fcuker","fcuking","fecal","feck","fecker","felch","felcher","felching","fellate","fellatio","feltch","feltcher","female squirting","femdom","figging","fingerbang","fingerfuck","fingerfucked","fingerfucker","fingerfuckers","fingerfucking","fingerfucks","fingering","fisted","fistfuck","fistfucked","fistfucker","fistfuckers","fistfucking","fistfuckings","fistfucks","fisting","fisty","flamer","flange","floozy","foad","foah","fondle","foobar","fook","fooker","foot fetish","footjob","foreskin","freex","frigg","frigga","frotting","fubar","fuck","f-u-c-k","fuck buttons","fuck off","fucka","fuckass","fuckbag","fuckboy","fuckbrain","fuckbutt","fuckbutter","fucked","fucker","fuckers","fuckersucker","fuckface","fuckhead","fuckheads","fuckhole","fuckin","fucking","fuckings","fuckingshitmotherfucker","fuckme","fucknugget","fucknut","fucknutt","fuckoff","fucks","fuckstick","fucktard","fuck-tard","fucktards","fucktart","fucktwat","fuckup","fuckwad","fuckwhit","fuckwit","fuckwitt","fudge packer","fudgepacker","fuk","fuker","fukker","fukkin","fuks","fukwhit","fukwit","futanari","fux","fux0r","fvck","fxck","gae","gai","gang bang","gangbang","gangbanged","gangbangs","ganja","gay","gay sex","gayass","gaybob","gaydo","gayfuck","gayfuckist","gaylord","gays","gaysex","gaytard","gaywad","genitals","gey","gfy","ghay","ghey","giant cock","gigolo","girl on","girl on top","girls gone wild","glans","goatcx","goatse","god damn","godamn","godamnit","goddam","god-dam","goddammit","goddamn","goddamned","god-damned","goddamnit","gokkun","golden shower","goldenshower","gonad","gonads","goo girl","gooch","goodpoop","gook","gooks","goregasm","gringo","grope","group sex","gspot","g-spot","gtfo","guido","guro","h0m0","h0mo","hand job","handjob","hard core","hard on","hardcore","hardcoresex","he11","heeb","hemp","hentai","heroin","herp","herpes","herpy","heshe","hitler","hiv","ho","hoar","hoare","hobag","hoe","hoer","hom0","homey","homo","homodumbshit","homoerotic","homoey","honkey","honky","hooch","hookah","hooker","hoor","hootch","hooter","hooters","hore","horniest","horny","hot carl","hot chick","hotsex","how to kill","how to murder","huge fat","hump","humped","humping","hussy","hymen","inbred","incest","injun","intercourse","j3rk0ff","jack Off","jackass","jackhole","jackoff","jack-off","jaggi","jagoff","jail bait","jailbait","jap","japs","jelly donut","jerk","jerk off","jerk0ff","jerkass","jerked","jerkoff","jerk-off","jigaboo","jiggaboo","jiggerboo","jism","jiz","jizm","jizz","jizzed","juggs","jungle bunny","junglebunny","junkie","junky","kawk","kike","kikes","kinbaku","kinkster","kinky","kkk","knob","knobbing","knobead","knobed","knobend","knobhead","knobjocky","knobjokey","kock","kondum","kondums","kooch","kooches","kootch","kraut","kum","kummer","kumming","kums","kunilingus","kunja","kunt","kyke","l3i+ch","l3itch","labia","lameass","lardass","leather restraint","leather straight jacket","lech","lemon party","leper","lesbian","lesbians","lesbo","lesbos","lez","lezbian","lezbians","lezbo","lezbos","lezzie","lezzies","lezzy","lmao","lmfao","loin","loins","lolita","lovemaking","lube","lust","lusting","lusty","m0f0","m0fo","m45terbate","ma5terb8","ma5terbate","make me come","male squirting","mams","masochist","massa","masterb8","masterbat","masterbat3","masterbate","master-bate","masterbating","masterbation","masterbations","masturbate","masturbating","masturbation","maxi","mcfagget","menage a trois","menses","menstruate","menstruation","meth","m-fucking","mick","milf","minge","missionary position","mof0","mofo","mo-fo","molest","moolie","moron","mothafuck","mothafucka","mothafuckas","mothafuckaz","mothafucked","mothafucker","mothafuckers","mothafuckin","mothafucking","mothafuckings","mothafucks","mother fucker","motherfuck","motherfucka","motherfucked","motherfucker","motherfuckers","motherfuckin","motherfucking","motherfuckings","motherfuckka","motherfucks","mound of venus","mr hands","mtherfucker","mthrfucker","mthrfucking","muff","muff diver","muffdiver","muffdiving","munging","murder","mutha","muthafecker","muthafuckaz","muthafucker","muthafuckker","muther","mutherfucker","mutherfucking","muthrfucking","n1gga","n1gger","nad","nads","naked","nambla","napalm","nappy","nawashi","nazi","nazism","negro","neonazi","nig nog","nigaboo","nigg3r","nigg4h","nigga","niggah","niggas","niggaz","nigger","niggers","niggle","niglet","nimphomania","nimrod","ninny","nipple","nipples","nob","nob jokey","nobhead","nobjocky","nobjokey","nooky","nsfw images","nude","nudity","numbnuts","nut sack","nutsack","nympho","nymphomania","octopussy","omorashi","one cup two girls","one guy one jar","opiate","opium","oral","orally","organ","orgasim","orgasims","orgasm","orgasmic","orgasms","orgies","orgy","ovary","ovum","ovums","p.u.s.s.y.","p0rn","paddy","paedophile","paki","panooch","pantie","panties","panty","pastie","pasty","pawn","pcp","pecker","peckerhead","pedo","pedobear","pedophile","pedophilia","pedophiliac","peepee","pegging","penetrate","penetration","penial","penile","penis","penisbanger","penisfucker","penispuffer","perversion","peyote","phalli","phallic","phone sex","phonesex","phuck","phuk","phuked","phuking","phukked","phukking","phuks","phuq","piece of shit","pigfucker","pillowbiter","pimp","pimpis","pinko","piss pig","pissed","pissed off","pisser","pissers","pisses","pissflaps","pissin","pissing","pissoff","piss-off","pisspig","playboy","pleasure chest","pms","polack","pole smoker","polesmoker","pollock","ponyplay","poof","poon","poonani","poonany","poontang","poop","poop chute","poopchute","poopuncher","porch monkey","porchmonkey","porn","porno","pornography","pornos","potty","prick","pricks","prig","prince albert piercing","pron","prostitute","prude","pthc","pube","pubes","pubic","pubis","punanny","punany","punkass","punky","punta","puss","pusse","pussi","pussies","pussy","pussylicking","pussypounder","pussys","pust","puto","queaf","queef","queer","queerbait","queerhole","queero","queers","quicky","quim","racy","raghead","raging boner","rape","raped","raper","raping","rapist","raunch","rectal","rectum","rectus","reefer","reetard","reich","renob","retard","retarded","reverse cowgirl","revue","rimjaw","rimjob","rimming","ritard","rosy palm","rosy palm and her 5 sisters","rtard","r-tard","rump","rumprammer","ruski","rusty trombone","s hit","s&m","s.h.i.t.","s.o.b.","s_h_i_t","s0b","sadism","sadist","sand nigger","sandler","sandnigger","sanger","santorum","scag","scantily","scat","schizo","schlong","scissoring","screw","screwed","screwing","scroat","scrog","scrot","scrote","scrotum","scrud","scum","seaman","seamen","seduce","seks","semen","sex","sexo","sexual","sexy","sh!+","sh!t","sh1t","s-h-1-t","shag","shagger","shaggin","shagging","shamedame","shaved beaver","shaved pussy","shemale","shi+","shibari","shit","s-h-i-t","shitass","shitbag","shitbagger","shitblimp","shitbrains","shitbreath","shitcanned","shitcunt","shitdick","shite","shiteater","shited","shitey","shitface","shitfaced","shitfuck","shitfull","shithead","shithole","shithouse","shiting","shitings","shits","shitspitter","shitstain","shitt","shitted","shitter","shitters","shittiest","shitting","shittings","shitty","shiz","shiznit","shota","shrimping","sissy","skag","skank","skeet","skullfuck","slag","slanteye","slave","sleaze","sleazy","slut","slutbag","slutdumper","slutkiss","sluts","smeg","smegma","smut","smutty","snatch","snowballing","snuff","s-o-b","sodom","sodomize","sodomy","son-of-a-bitch","souse","soused","spac","sperm","spic","spick","spik","spiks","splooge","splooge moose","spooge","spook","spread legs","spunk","steamy","stfu","stiffy","stoned","strap on","strapon","strappado","strip","strip club","stroke","stupid","style doggy","suck","suckass","sucked","sucking","suckmydick","sucks","suicide girls","sultry women","sumofabiatch","swastika","swinger","t1t","t1tt1e5","t1tties","tainted love","tampon","tard","taste my","tawdry","tea bagging","teabagging","teat","teets","teez","terd","teste","testee","testes","testical","testicle","testis","threesome","throating","thrust","thug","thundercunt","tied up","tight white","tinkle","tit","titfuck","titi","tits","titt","tittie5","tittiefucker","titties","titty","tittyfuck","tittyfucker","tittywank","titwank","toke","tongue in a","toots","topless","tosser","towelhead","tramp","tranny","transsexual","trashy","tribadism","tub girl","tubgirl","turd","tush","tushy","tw4t","twat","twathead","twatlips","twats","twatty","twatwaffle","twink","twinkie","two girls one cup","twunt","twunter","ugly","unclefucker","undies","undressing","unwed","upskirt","urethra play","urinal","urine","urophilia","uterus","uzi","v14gra","v1gra","vag","vagina","vajayjay","va-j-j","valium","venus mound","viagra","vibrator","violet wand","virgin","vixen","vjayjay","vodka","vomit","vorarephilia","voyeur","vulgar","vulva","w00se","wad","wang","wank","wanker","wankjob","wanky","wazoo","wedgie","weed","weenie","weewee","weiner","weirdo","wench","wet dream","wetback","wh0re","wh0reface","white power","whitey","whiz","whoar","whoralicious","whore","whorealicious","whorebag","whored","whoreface","whorehopper","whorehouse","whores","whoring","wigger","willies","willy","womb","woody","wop","wrapping men","wrinkled starfish","wtf","xrated","x-rated","xxx","yaoi","yeasty","yellow showers","yiffy","yobbo","zoophile","zoophilia","zubb","(ock","[ock",".f uc k","@rse","@rsehol","@unt","[unt","< unt","<.unt","<loth head","<lothhead","<nuts","<o(k","<o<&nbsp;k","<o<ksu<ka","<o<ksu<ker","<oon","<u&nbsp;nt","<u&nbsp;nts","<u*t","<unt","<unt's","<vnt","<vnts","a$$hole","a$$hole$","a$$holes","a.rse","a+*hole","ar$ehole","ar$hole","ar$holes","ar5h0le","ar5h0les","ars3","arse hole","arseh0le","arseh0les","arseho","arsehol","arseholes","arsewipe","arsh0le","arshole","arsholes","ashole","ass h0le","assh0les","b.astard","b.ollocks","b.ugger","b@st@rd","b@st@rds","b00tha","b00thas","b0ll0cks","b0llocks","b3llend","basterd","basyard","basyards","batty boy","batty&nbsp;boi","batty&nbsp;boy","beef curtains","belend","bell end","bell.end","bell-end","bin dippers","bin-dippers","bo11ocks","boabie sooking","boaby sooking","boll0cks","bolocks","bolox","bootha","boothas","bum bandit","bum hole","bumbandit","bum-bandit","bumh0l3","bumh0le","bumhol3","bumhole","c *nt!","c *nts!","c u n t","c u n t.","c#nt","c&nbsp;u&nbsp;n&nbsp;t","c* nt","c.unt","c.untyb.ollocks","c_u_n_t","c00n","c0cksucka","cahnt","cahnts","clunge","cnuts","co(k","coc&nbsp;k","cocksucka","cocksuckers","cocksuckers.","cossor ali","cretin","cripple","critest","cu&nbsp;nt","cu&nbsp;nts","cunting","cunt's","cvnt","cvnts","d1ck!","d1ckh@ed","darky","dick&nbsp;head","dumbfucker","dxxkhead","ethnics","f ck","f o a d","f off","f u c ked","f uc k","f uc king","f uck","f###","f##k","f##king","f#cked","f$cks","f&nbsp;cked","f&nbsp;u&nbsp;c&nbsp;k","f&nbsp;uck","f&nbsp;ucker","f&nbsp;ucking","f()()k","f()()ker","f()()king","f*#kin'","f*&k","f*&k!ng","f.o.a.d","f.o.a.d.","f.u.c.k.","f.uck","f@@@in","f@@@ing","f@ck","f@g","f@gs","f[_]cker","f[_]cking","f^^k","f^^ked","f^^ker","f^^king","f^ck","f^cker","f^cking","f__kin","f__king","f<uk","f>>k","f00k","f00ked","f0oked","fackin","facking","f4ggot","f4gg0t","fagg0t","faggits","fagits","fck","f'ck","fck&nbsp;ing","fck1ng","fckeud","fckin","fcking","fcks","fckw1t","fckwit","fcuked","fcukin","fcuks","feckin","fecking","f---ed","fekking","felched","feltching","f-----g","f---ing","f--k","fkin","fking","flucknuts","fo0ked","f-o-a-d","fookd","fooked","fookin","fookin'","fooking","frig","frigging","frigin","friging","fu <k","fu&kin","fu&king","fu&nbsp;ck","fu&nbsp;cked","fu&nbsp;cker","fu&nbsp;cking","fu(k","fu(ker","fu(kers","fu.ck","fu@k","fu@ker","fu^k","fu^ker","fu^king","fu< kin","fu<k","f-u-<-k","fu<ked","fu<ker","fu<kin","fu<king","fu<kker","fu<kr","fu<ks","fuc&nbsp;ked","fuc&nbsp;ker","fuc&nbsp;king","f-uck","fúck","fúçk","fùck","fûck","fück","fuck&nbsp;ed","fuck&nbsp;ing","fucke&nbsp;d","fucki&nbsp;ng","fúcking","fuckinghell","fuckk","fuckw1t","fuck-wit","fuckwits","fucw1t","fucwit","fudge p@cker","fudgep@cker","fudge-p@cker","fudge-packer","fudgpacker","fukced","fuked","fukin","fuking","fukk","fukked","fukking","fuukn","fvckup","fvck-up","fvckw1t","fvckwit","gang-bang","gash","gayhole","gimp","girlie-gardening","goris","gypo","gypos","gyppo","gyppos","hvns","israelians","ities","k@ffir","k@ffirs","k@fir","k@firs","kaf1r","kaff1r","kaffir","kaffirs","kafir","kafirs","kafr","kants","khunt","kiddie fiddler","kiddie fiddling","kiddie-fiddler","kiddie-fiddling","kiddy fiddler","kiddyfiddler","kiddy-fiddler","kn0b","knob&nbsp;head","knobber","kuffar","m.inge","m.otherf.ucker","m1nge","mofuccer","mofucker","mofuckers","mofucking","mofukcer","mohterfuccer","mohterfuccers","mohterfuck","mohterfucker","mohterfuckers","mohterfucking","mohterfucks","mohterfuk","mohterfukcer","mohterfukcers","mohterfuking","mohterfuks","moterfuccer","moterfuck","moterfucker","moterfuckers","moterfucking","moterfucks","mothafuccer","motha-fucka","mother f---ers","motherfuccer","motherfuccers","motherfukkker","mthafucca","mthafuccas","mthafucka","mthafuckas","mthafukca","mthafukcas","muff-diver","muff-diving","muffs","muth@fucker","muthafuccer","muthafuck","muthafuck@","muthafucka","muthafuckers","muthafucking","muthafucks","muthafukas","niga","nignog","nig-nog","nob&nbsp;head","nonce","p.iss-flaps","p@ki","p@kis","p00f","p00fs","p00fter","p00fters","p0of","paedo","paedophiles","pak1","pakis","peado","peadofile","peadofiles","peedo","peedofile","peedofiles","peedophile","peedophiles","peedos","pench0d","pench0ds","penchod","penchods","phanny","phanny.","pheck","phecking","phelching","pheque","phequing","phucker","phuckin","phucking","phucks","pikey","pillow biter","pillow-biter","piss off","po0f","poff","ponce","poo stabber","poo stabbers","poofs","poofter","pr!ck","pr!ck.","pr1ck","pr1ck!","pr1cks","pr1cks!","prik","pu$$y","ragheads","ret@rd","rim job","s.hit","s1ut","sc u m!","sc um","sh hit","sh!te","sh!tes","sh1te","shirtlifter","shirtlifters","shit stabber","shit stabbers","shitstabber","shitstabbers","spastic","spaz","spaz.","spit roasting","spitroast","spit-roast","spit-roasting","spunking","ß0ll0çk5","t w a t","t wat","t.wat","t0$$er","t0sser","t0ssers","tea-bagging","to55er","to55ers","tosser,","tossers","tossurs","towel head","tvvat","tvvats","tw at","tw&nbsp;at","tw@","tw@t","tw@ts","tw_t","twa t","twatt","twattish","twunts","up the gary","w anker","w ankers","w#nker","w#nkers","w*nkers, 0","w.ank","w@nk","w@nker","w@nkers","w@nks","w0g","w0gs","w4nker!","w4nkers!","wa nker","wan k er","wan k ers","wan ker","wanka","wanke r","wanked","wankers","wanking","wanks","wank's","wet spam","whanker","whankers","wog","xrse","xrseh","xrsehol","xrsehole","xxxhole","y!ddo!","y!ddo!!","yid","yido","zachariah bishop","blow-job","boner:deboner","bonk:bonkers","candy-ass","chuffnuts","cojones","dipstick","feak","furbox","furburger","gayboy","ginch","gnikcuf","hardon","honkers","kcid","kcuf","lactoids","lesbyterian","lezzo","man-root","nestlecock","onanism","pusy","queve","quimsteak","qveer","sappho","scumbag","scumber","sexpot","shagbucket","shagstress","snarf","sodomite","strollop","suckster","tnuc","toggaf","tribadist","twank","wiseass","wizzer","abbo","abortionist","abuser","alabama hotpocket","alligatorbait","analannie","analsex","arsebagger","arsebandit","arseblaster","arsecowboy","arsefuck","arsefucker","arsehat","arsehore","arsejockey","arsekiss","arsekisser","arselick","arselicker","arselover","arseman","arsemonkey","arsemunch","arsemuncher","arsepacker","arsepirate","arsepuppies","arseranger","arses","arsewhore","assbagger","assblaster","asscowboy","assholz","asshore","assjockey","asskiss","asskisser","assklown","asslover","assman","ass monkey","asspacker","asspuppies","assranger","asswhore","azzhole","backdoorman","badfuck","baldy","ball licker","balllicker","banging","barelylegal","barface","barfface","bassterds","bastardz","basterds","basterdz","bazongas","bazooms","beastality","beat-off","beatoff","beatyourmeat","bicurious","bigass","bigbastard","bigbutt","bitchez","bitchslap","biteme","boffing","bohunk","bollick","bootycall","bountybar","breastjob","breastlover","breastman","brothel","buggered","buggery","bukake","bullcrap","bulldike","bumfuck","bungabunga","butchbabes","butchdike","butchdyke","butt-bang","buttbang","buttface","butt-fuck","butt-fucker","butt-fuckers","buttfuckers","butthead","buttman","buttmunch","buttmuncher","buttpirate","buttstain","buttwipe","byatch","cacker","cameljockey","cawks","chav","cherrypopper","chickslick","clamdigger","clamdiver","clogwog","cnts","cntz","cockblocker","cockcowboy","cockfight","cock-head","cockknob","cocklicker","cocklover","cocknob","cockqueen","cockrider","cocksman","cocksucer","cocktease","cocky","coitus","coondog","copulate","cracker","crackpipe","crack-whore","crotchjockey","crotchmonkey","crotchrot","cumfest","cumm","cumquat","cumqueen","cunntt","cunteyed","cuntfuck","cuntfucker","cuntsucker","cuntz","cybersex","cyberslimer","damnation","damnit","datnigga","deapthroat","dego","devilworshipper","dickbrain","dickforbrains","dickless","dicklick","dicklicker","dickmilk","dilldo","dilldos","dixiedike","dixiedyke","dominatricks","dominatrics","douch","douchbag","drag queen","dragqueen","dragqween","dripdick","dumbbitch","easyslut","eatballs","eatme","eatpussy","enema","excrement","facefucker","facist","faeces","faget","faggots","fagit","fagz","faigs","fark","farted","farting","farty","fastfuck","fatfuck","fatfucker","fatso","feces","felatio","fister","flasher","flid","flipping the bird","flyd","flydie","flydye","footaction","footfuck","footfucker","footlicker","fornicate","freakfuck","freakyfucker","freefuck","fucck","fuckable","fuckbuddy","fuckedup","fuckfest","fuckfreak","fuckfriend","fuckher","fuckina","fuckingbitch","fuckingcunt","fuckinnuts","fuckinright","fuckit","fuckknob","fuckmehard","fuckmonkey","fuckpig","fuckwhore","fuckyou","fugly","Fukah","Fuken","Fukkah","Fukken","funfuck","fuuck","gangbanger","gatorbait","gaygirl","gaymuthafuckinwhore","gayz","getiton","givehead","glazeddonut","godammit","goddamit","goddamnes","goddamnmuthafucker","gonorrehea","gonzagas","gotohell","greaseball","grostulation","gypp","gyppie","gyppy","headfuck","hells","hijacker","hijacking","hillbillies","hindoo","hitlerism","hitlerist","hobo","hoes","holestuffer","homobangers","honger","hookers","hoore","horney","horseshit","hosejob","hotdamn","hotpussy","hottotrot","iblowu","idiot","insest","internet wife","intheass","inthebuff","jackshit","japcrap","jesuschrist","jiggabo","jihad","jijjiboo","jisim","jiss","jizim","jizjuice","jizzim","jizzum","jubblies","juggalo","kissass","knobz","krap","krappy","kumbubble","kumbullbe","kunnilingus","kunts","kuntz","lactate","lady boy","ladyboy","lapdance","lesbain","lesbayn","lesbin","lezbe","lezbefriends","lezz","lezzer","libido","lickme","limpdick","lipshits","lipshitz","livesex","loadedgun","lovebone","lovegoo","lovegun","lovejuice","lovemuscle","lovepistol","loverocket","low life","lowlife","lubejob","luckycameltoe","manhater","manpaste","masokist","massterbait","masstrbait","masstrbate","mastabate","mastabater","masterbaiter","master bates","masterbates","mastrabator","mattressprincess","meatbeater","meatrack","mgger","mggor","molestation","molester","molestor","moneyshot","mooncricket","motha fucker","motha fuker","motha fukkah","motha fukker","mother-fucker","mother fukah","mother fuker","mother fukkah","mother fukker","motherlovebone","muffdive","muffindiver","mufflikcer","muncher","mutha fucker","mutha fukah","mutha fuker","mutha fukkah","mutha fukker","nastt","nastybitch","nastyho","nastyslut","nastywhore","necro","negroes","negroid","niggaracci","niggard","niggarded","niggarding","niggardliness","niggardliness's,","niggardly","niggard's,","niggards","niggerhead","niggerhole","nigger's,","niggled","niggles","niggling","nigglings","niggor","niggur","nigr","nigra","nigre","nigur","niiger","niigr","nipplering","nittit","nlgger","nlggor","nofuckingway","nookey","nookie","nudger","nut case","nutcase","nutfucker","ontherag","orafis","orgasum","oriface","orifice","orifiss","packi","packie","packy","paedofile","pakie","paky","palesimian","panti","pearlnecklace","peckerwood","peeenus","peeenusss","peehole","peenus","peinus","penas","penis-breath","penises","penus","penuus","perv","pervert","phuc","phuker","phukker","phungky","pi55","picaninny","piccaninny","pickaninny","piky","pimper","pimpjuic","pimpjuice","pimpsimp","pindick","piss","pisshead","play boy","play bunny","playbunny","play girl","playgirl","plumper","pocketpool","polac","polak","pooperscooper","pooping","poorwhitetrash","poostabber","popimp","pornflick","pornking","pornprincess","pric","prickhead","pu55i","pu55y","pubiclice","puke","puntang","purinaprincess","pussee","pussie","pussyeater","pussyfucker","pussylicker","pussylips","pussylover","puuke","puuker","queerz","qweers","qweerz","qweir","rag head","rearend","rearentry","recktum","redneck","rentafuck","russki","russkie","sadom","saeema butt","sandm","scank","screwyou","seaman staines","sexed","sexfarm","sexhound","sexhouse","sexing","sexkitten","sexslave","sextogo","sextoy","sextoys","sexwhore","sexymoma","sexy-slim","seymour butts","shat","shhit","shitcan","shiter","shitfit","shitforbrains","shitfucker","shithapens","shithappens","shitlist","shitola","shitoutofluck","shity","shitz","shortfuck","shyt","shyte","shytty","shyty","sixsixsix","sixtynine","sixtyniner","skanck","skankbitch","skankee","skankey","skankfuck","skanks","skankwhore","skanky","skankybitch","skankywhore","skinflute","skum","skumbag","slantyeye","slapper","slavedriver","sleezebag","sleezeball","slideitin","slimeball","slimebucket","slopehead","slopey","slopy","slutt","slutting","slutty","slutwear","slutwhore","slutz","smackthemonkey","smelly","snatchpatch","snot","snowback","snownigger","sodomise","sonofabitch","sonofbitch","spacca","spaghettibender","spaghettinigger","spankthemonkey","spazza","spermacide","spermbag","spermhearder","spermherder","spig","spigotty","spitter","splittail","spreadeagle","squaw","stabber","stripclub","stroking","stupidfuck","stupidfucker","suckdick","sucker","suckme","suckmyass","suckmytit","suckoff","tarbaby","testicles","thicklips","thicko","thirdeye","thirdleg","timbernigger","titbitnipply","titfucker","titfuckin","titjob","titlicker","titlover","tittie","tonguethrust","tonguethruster","tonguetramp","torture","tosspot","trailertrash","trannie","trots","trouser snake","tuckahoe","tunneloflove","twobitwhore","unfuckable","uptheass","upthebutt","urinate","usama bin laden","vaginal","vajina","valjina","vibrater","vietcong","violate","violation","virginbreaker","vullva","waysted","welcher","wetspot","whacker","whigger","whiskeydick","whiskydick","whitenigger","whitetrash","whoor","whop","whorefucker","wife beater","williewanker","wuss","wuzzie","yellowman","zigabo","zipperhea","zipper head","suicide","kill yourself","kys","hang yourself","unalive yourself","nigg","puta","amcik","boobz","boody","boong","cazzo","forni","fotze","ginzo","gippo","gipps","godam","goyim","groid","gubba","guizi","gyopo","gyped","harem","heebs","horis","hoser","hymie","japie","jewed","jigga","jiggs","jiggy","jizin","jizzd","jizzn","kacap","kumer","kurac","kurwa","kushi","kykes","kyopo","kyrpa","lebos","lubra","lugan","lynch","mibun","mocky","nibba","nigar","nigas","niger","nigha","nigor","niqqa","nudie","nymph","pansy","paska","pendy","pizda","pocha","pocho","pohms","quiff","seppo","smack","spank","spics","stagg","trois","ukrop","vittu","wigga","beaney","boches","bungas","chinga","crotch","darkey","doggie","dyefly","dziwka","exkwew","fetish","ficken","geezer","gummer","gwailo","gweilo","gypped","gypsys","hodgie","honkie","huevon","humper","humpin","ikeymo","jewess","jigger","jizzin","kaffer","kaffre","kanake","kanker","katsap","kigger","knulle","kwailo","mabuno","macaca","maumau","menage","mierda","mockey","mockie","moskal","moslem","mtrfck","mulkku","muschi","mzungu","necked","negres","noonan","nooner","orospu","piefke","pimmel","pimped","pooper","pudboy","punani","pusies","qahbeh","racial","redleg","rigger","sambos","shipal","skribz","slanty","sloper","slopes","tantra","tiedup","tittis","tortur","trojan","turnon","yarpie","arabush","asholes","ballgag","bangbro","bluegum","bootlip","buffies","coolies","coonass","cowgirl","dothead","dryhump","fanculo","flikker","gangsta","genital","googirl","horndog","hotcarl","hugefat","humpher","humphim","hustler","israels","jerries","jimfish","khokhol","lezzian","licking","mahbuno","mamhoon","maricon","mideast","mulatto","nigette","pendejo","pierdol","preteen","puddboy","quashie","sanchez","scheiss","schmuck","septics","sheeney","shinola","shylock","slopeys","spludge","squinty","triplex","urethra","vagiina","whities","wichser","africoon","andskota","bassterd","bigblack","blackman","burrhead","chinaman","chinamen","clansman","clansmen","dogstyle","dunecoon","earotics","eatmyass","footstar","foursome","godsdamn","golliwog","homicide","horndawg","hotchick","illegals","klansman","klansmen","klootzak","knockers","kuksuger","lingerie","mosshead","peepshow","peepshpw","poontsee","pplicker","schaffer","schlampe","sharmuta","sharmute","stringer","syphilis","tacohead","thicklip","threeway","wetdream","yourtits","zabourah","arschloch","assrammer","babyjuice","ballgravy","futkretzn","girlontop","hairyback","halfbreed","halfcaste","hillbilly","howtokill","jigarooni","magicwand","marijuana","masturbat","monkleigh","mouliewop","penthouse","poundtown","premature","scallywag","schvartse","schwartze","skurwysyn","sphencter","squirting","stuinties","swallower","tarbabies","tongueina","babybatter","beastility","beaverlips","bigbreasts","bluewaffle","buddhahead","bulletvibe","chinaswede","chingchong","clanswoman","clanswomen","deepaction","doubledong","ejackulate","jellydonut","klanswoman","klanswomen","makemecome","mickeyfinn","missionary","rautenberg","samckdaddy","shawtypimp","socksucker","spierdalaj","spreadlegs","squarehead","styledoggy","tightwhite","udgepacker","venusmound","whitepower","zipperhead","ballkicking","dawgiestyle","diaperdaddy","donkeypunch","howtomurder","meatbeatter","pancakeface","pommiegrant","swampguinea","taintedlove","beefcurtains","blowyourload","brownshowers","christkiller","cloverclamps","currymuncher","dirtypillows","motherfvcker","moundofvenus","pickaninnies","porchmonkies","spearchucker","tigolbitties","transvestite","beavercleaver","girlsgonewild","jacktheripper","junglebunnies","masterblaster","pleasurechest","tigoldbitties","tongethruster","yellowshowers","brunetteaction","femalesquirtin","luckycammeltoe","purinapricness","clevelandsteamer","wrinkledstarfish","princealbertpiercing","niggardliness's","niggard's","nigger's","nicotine","hell","f*ck","f**k","f***k","fu*k","fu**k","fk","fuq","sh*t","damm","d@mn","d@mm","h3ll","h*ll","b*tch","btch","bast4rd","b@stard","bast@rd","@ss","a$$","@$$","cr@p","d!ck","p1ss","p!ss","p@ss","c*nt","c**t","wh*re","wh0r3","slvt","sl*t","sl*tt","d*uche","d*uch3","@sshole","@$$hole","m0therfucker","m0therf*cker","m0th3rfucker","motherf*cker","c*cksucker","c*cksuck3r","cocksuck3r","j@ckass","j@ck@ss","jack@ss","j@ck*ss","b*llshit","b@llshit","bllsht","b*llsh1t","bullsh1t","b@llsh1t","@rsehole","ars3hole","ars*hole","f*ggot","f@gg0t","b@st4rd","sh!thead","sh1thead","sh1th3ad","shith3ad","sh*thead","c*ck","c0k","p*rn","pr0n","porn0","fckr","f*ckr","fc*k","fc*kr","fkn","fn","fqn","fnck","d1k","d!k","dik","dyk","dykk","d*kk","c*m","c*mm","s!ut","p1mp","p!mp","b00b","b*ob","b0b","b00bz","b0bz","b0obs","@ssh0le","@$$h0le","f!ck","f1ck","f*q","f*cking","f**king","f***king","fkng","f*kin","f@king","buggr","buggrr","bugg3r","buggering","f@ggot","f*gg0t","twatface","twatfaced","wankr","w4nk","w4nker","w@nkr","w*nkr","wankd","tossr","toss3r","t0ss3r","t!t","titz","t!tt","t!tz","c_nt","c*ntz","c_ntz","pisd","pissd","pishead","p!sshead","p1sshead","f*cker","f_ckr","f@ckr","fcukr","f_ck3r","f*cked","fc*ked","f_ckd","f_cked","f_cking","fc*king","f_ckn","f_ckng","f@cking","motherfckr","mthrfcukr","mthrfcuker","mothrf*cker","mthrf*cker","d!ckhead","d!ckhed","d!ckh3ad","d1ckh3ad","dickh3ad","d!ckhd","d*ckhead","dickhed","dikhead","dickhd","ballz","ballzy","ballsy","ballsz","b@llz","b@lls","b*llz","b*lls","b00bies","boobi","boobied","co*k","co**k","pr!k","prickr","pr1kr","pr!kr","pr!cker","w0gg","w0gger","wogger","w*gg","w0gg3r","wogging","f4git","f@git","fag0t","f@got","fagott","f4gott","faggets","faggy","fagzz","pissr","p!ssr","piss3r","p1ss3r","p1ssr","p!ssed","p1ssed","p1ssd","tw*t","fuc","fucc","fkk","f*k","d*mn","dammn","d@mmn","sl*tty","slttty","sltttty","sluttz","slttz","sltttz","bitchz","biotch","bitchr","b*tchr","b1tchr","n!gger","nigg*r","nigg@r","n!gg3r","n1gg3r","n1gg@r","n!gg@r","n1gg*r","n!gg*r","n1g","n!gg","n1gg","n*gg","niggr","n!ggr","n1ggr","n*gger","n!gga","n!gg@","n1gg@","nigg@","n1ggah","n!ggah","n*ggah","nigg@h","n!gg@h","n1gg@h","n1g@h","n!g@h","nigguh","n1gguh","n!gguh","n*gguh","n1ggaz","n!ggaz","n*ggaz","nigg@s","n!gg@s","n1gg@s","n1gg@z","nigg@z","n!gg@z","n*gg@z","niggahz","n1ggahz","n!ggahz","n*ggahz","nigg@hz","n!gg@hz","n1gg@hz","niggar","n1ggar","n!ggar","n*ggar","nigg@rs","n1gg@rs","n!gg@rs","n!g@rs","n!g@r","n!g@rz","niggrz","n1ggrz","n!ggrz","n!gg@rz","nigg@rz","niggrs","n1ggrs","n!ggrs","shiit","cr4p","c@cksucker","c0cksuck3r","c0ck$ucker","c*cksucka","c@cksucka","c0cksuck@h","loser","l0ser","looser","l00ser","l0s3r","l*ser","l*s3r","l@s3r","l@ser","l0$er","l0$3r","l0ozer","lozer","l0z3r","l*zer","l*z3r","lo$er","l0zer","loz3r","loos3r","l0oser","l00z3r","looz3r","looz*r","l0o$er","l0os3r","l*ozer"]`)
            , ma = document.createElement("canvas");
        function ji(u, e) {
            return new URLSearchParams(e || window.location.search).get(u) || ""
        }
        const X = {
            getParameterByName: ji,
            getCookie: function(u) {
                const e = `${u}=`
                    , i = decodeURIComponent(document.cookie).split(";");
                for (let r = 0; r < i.length; r++) {
                    let a = i[r];
                    for (; a.charAt(0) == " "; )
                        a = a.substring(1);
                    if (a.indexOf(e) == 0)
                        return a.substring(e.length, a.length)
                }
                return ""
            },
            sanitizeNameInput: function(u) {
                let e = u.trim();
                e.length > We.PlayerNameMaxLen && (e = e.substring(0, We.PlayerNameMaxLen));
                const t = ` ${e.toLowerCase()} `;
                return la.some(i => t.includes(` ${i} `)) && (e = "Survev.io"),
                e
            },
            colorToHexString: function(u) {
                return `#${`000000${u.toString(16)}`.slice(-6)}`
            },
            colorToDOMString: function(u, e) {
                return `rgba(${u >> 16 & 255}, ${u >> 8 & 255}, ${u & 255}, ${e})`
            },
            htmlEscape: function(u="") {
                return u.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
            },
            truncateString: function(u, e, t) {
                const i = ma.getContext("2d");
                i.font = e;
                let r = u;
                for (let a = u.length; a > 0 && i.measureText(r).width > t; )
                    r = `${u.substring(0, --a)}…`;
                return r
            },
            toggleFullScreen: function(u) {
                let e = document.documentElement;
                document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || u ? document.exitFullscreen ? document.exitFullscreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen?.() : e.requestFullscreen ? e.requestFullscreen() : e.msRequestFullscreen ? (e = document.body,
                e.msRequestFullscreen()) : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullscreen?.()
            },
            copyTextToClipboard: function(u) {
                try {
                    const e = c("<input>");
                    if (c("body").append(e),
                    e.val(u),
                    _.os == "ios") {
                        const t = e.get(0)
                            , i = t.contentEditable
                            , r = t.readOnly;
                        t.contentEditable = "true",
                        t.readOnly = !0;
                        const a = document.createRange();
                        a.selectNodeContents(t);
                        const l = window.getSelection();
                        l.removeAllRanges(),
                        l.addRange(a),
                        t.setSelectionRange(0, 999999),
                        t.contentEditable = i,
                        t.readOnly = r
                    } else
                        e.select();
                    document.execCommand("copy"),
                    e.remove()
                } catch {}
            },
            getSvgFromGameType: function(u) {
                const e = B[u];
                switch (e ? e.type : "") {
                case "gun":
                case "melee":
                case "throwable":
                case "heal":
                case "boost":
                case "helmet":
                case "chest":
                case "scope":
                case "backpack":
                case "perk":
                case "xp":
                    return `img/loot/${e.lootImg?.sprite.slice(0, -4)}.svg`;
                case "heal_effect":
                case "boost_effect":
                    return `img/particles/${e.texture?.slice(0, -4)}.svg`;
                case "emote":
                    return `img/emotes/${e.texture.slice(0, -4)}.svg`;
                case "crosshair":
                    return `img/crosshairs/${e.texture.slice(0, -4)}.svg`;
                case "outfit":
                    {
                        const i = e.lootImg;
                        if (i.sprite !== "loot-shirt-01.img")
                            return `img/loot/${i.sprite.slice(0, -4)}.svg`;
                        const r = `<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128"><path d="M63.993 8.15c-10.38 0-22.796 3.526-30.355 7.22-8.038 3.266-14.581 7.287-19.253 14.509C8.102 39.594 5.051 54.6 7.13 78.482c5.964 2.07 11.333 1.45 16.842-.415-1.727-7.884-1.448-15.764.496-22.204 2.126-7.044 6.404-12.722 12.675-13.701l2.77-.432.074 2.803c.054 2.043.09 4.17.116 6.335l.027 6.312c-.037 8.798-.382 18.286-1.277 27.845 5.637 1.831 14.806 2.954 23.964 3.019l4.597-.058c8.53-.275 16.742-1.449 21.665-3.063-1.093-14.65-1.166-29.434-1.52-41.334l-.097-3.283 3.18.824c6.238 1.617 10.55 7.376 12.76 14.507 2.02 6.51 2.353 14.37.64 22.248a29.764 29.764 0 0 0 12.847 1.181l4.399-.588c1.033-18.811-1.433-37.403-6.27-46.264l-4.408-6.376c-4.647-5.357-10.62-8.399-17.665-11.074-6.746-3.458-18.358-6.614-28.95-6.614zm0 3.05c6.494 0 13.37 1.942 19.274 4.516-3.123 2.758-6.971 4.665-11.067 5.754l-7.852 17.31-6.838-16.882c-4.757-.93-9.26-2.957-12.783-6.174C50.9 13.081 57.809 11.2 63.993 11.2zm.58 28.539l3.512 5.327-3.497 5.053-3.53-5.053zm0 11.888l3.512 5.328-3.497 5.052-3.53-5.053 3.514-5.327zm0 11.733l3.512 5.327-3.497 5.054-3.53-5.054zm0 11.876l3.512 5.327-3.497 5.054-3.53-5.053 3.514-5.327zm25.079 13.715c-6.61 2.055-15.829 2.907-25.277 2.951-9.5.045-18.965-.744-25.902-2.892-.205 1.785-.43 3.569-.678 5.347 5.968 2.132 16.346 3.408 26.497 3.36 10.143-.05 20.355-1.444 25.912-3.433a241.302 241.302 0 0 1-.552-5.333zm1.368 9.086c-6.782 2.308-16.533 3.262-26.53 3.31-2.935.015-5.866-.052-8.724-.213l-4.227-.315c-5.358-.5-10.307-1.382-14.329-2.758-.897 5.43-2.02 10.772-3.413 15.903 2.117 1.06 4.41 1.968 6.835 2.733l3.97 1.096c15.85 3.805 35.88 2.156 49.601-3.513-1.355-5.09-2.387-10.57-3.183-16.243z" fill="${this.colorToHexString(i.tint)}"/></svg>`;
                        return URL.createObjectURL(new Blob([r],{
                            type: "image/svg+xml;charset=utf-8"
                        }))
                    }
                default:
                    return ""
                }
            },
            getCssTransformFromGameType: function(u) {
                const e = B[u];
                let t = "";
                return e?.lootImg && (t = `rotate(${e.lootImg.rot || 0}rad) scaleX(${e.lootImg.mirror ? -1 : 1})`),
                t
            },
            random64: function() {
                function u() {
                    return Math.floor(Math.random() * Math.pow(2, 32)).toString(16)
                }
                return u() + u()
            }
        };
        function na() {
            return Pe.android.device || Pe.apple.device || Vi()
        }
        function Vi() {
            const u = navigator.userAgent.toLowerCase();
            return u.includes("ipad") || u.includes("macintosh") && "ontouchend"in document
        }
        function Gi() {
            return Pe.apple.phone || Pe.apple.ipod
        }
        function ha() {
            return Pe.android.device
        }
        function ca() {
            const u = window.navigator.userAgent
                , e = u.indexOf("MSIE ")
                , t = u.indexOf("Trident/");
            return e > 0 || t > 0
        }
        function ua() {
            return window.navigator.userAgent.indexOf("Edge/") > 0
        }
        function da() {
            return Gi() && (screen.width == 375 && screen.height == 812 || screen.height == 375 && screen.width == 812 || screen.width == 414 && screen.height == 896 || screen.height == 414 && screen.width == 896)
        }
        function pa() {
            return Gi() ? "ios" : ha() ? "android" : "pc"
        }
        function fa() {
            return ca() ? "ie" : ua() ? "edge" : "unknown"
        }
        function wa(u, e) {
            try {
                localStorage.setItem(u, e)
            } catch {}
        }
        function ga(u) {
            let e = null;
            try {
                e = localStorage.getItem(u)
            } catch {}
            return e
        }
        class Sa {
            os;
            browser;
            model;
            pixelRatio = window.devicePixelRatio;
            version;
            mobile;
            tablet;
            touch;
            uiLayout;
            debug = !1;
            UiLayout = {
                Lg: 0,
                Sm: 1
            };
            isLandscape = !0;
            screenWidth = 0;
            screenHeight = 0;
            constructor() {
                this.os = pa(),
                this.browser = fa(),
                this.model = da() ? "iphonex" : "unknown";
                const e = ji("version");
                e && wa("surviv_version", e),
                this.version = ga("surviv_version") || "1.0.0",
                this.mobile = na(),
                this.tablet = Pe.tablet || Vi(),
                this.touch = this.mobile || this.tablet,
                this.uiLayout = this.mobile ? this.UiLayout.Sm : this.UiLayout.Lg,
                this.onResize()
            }
            onResize() {
                this.isLandscape = window.innerWidth > window.innerHeight || window.orientation == 90 || window.orientation == -90,
                this.screenWidth = window.innerWidth,
                this.screenHeight = window.innerHeight;
                const e = this.isLandscape ? this.screenWidth : this.screenHeight;
                this.uiLayout = this.mobile || e <= 850 || e <= 900 && this.pixelRatio >= 3 ? this.UiLayout.Sm : this.UiLayout.Lg
            }
        }
        const _ = new Sa;
        class Ui {
            _0x63 = n.create(0, 0);
            _0x68 = 16;
            _0x69 = 1.5;
            _0x48 = 1.5;
            _0x66 = 1;
            _0x67 = 1;
            _0x102 = !0;
            _0x103 = 0;
            _0x104() {
                return this._0x68 * this._0x69
            }
            _0x105(e) {
                return {
                    x: this._0x66 * .5 + (e.x - this._0x63.x) * this._0x104(),
                    y: this._0x67 * .5 - (e.y - this._0x63.y) * this._0x104()
                }
            }
            _0x70(e) {
                return {
                    x: this._0x63.x + (e.x - this._0x66 * .5) / this._0x104(),
                    y: this._0x63.y + (this._0x67 * .5 - e.y) / this._0x104()
                }
            }
            _0x106(e) {
                return e * this._0x69
            }
            _0x107(e) {
                return e * this._0x104()
            }
            _0x59(e) {
                this._0x102 = e
            }
            _0x108(e, t) {
                const i = n.length(n.sub(this._0x63, e))
                    , r = z.delerp(i, 40, 10) * t;
                this._0x103 = Math.max(this._0x103, r)
            }
            _0x64() {
                this._0x102 && (this._0x63 = n.add(this._0x63, n.mul(n.randomUnit(), this._0x103))),
                this._0x103 = 0
            }
        }
        class ya {
            shapes = [];
            addLine(e, t, i, r) {
                this.shapes.push({
                    type: 0,
                    start: n.copy(e),
                    end: n.copy(t),
                    color: i,
                    fill: r
                })
            }
            addRay(e, t, i, r, a) {
                this.shapes.push({
                    type: 1,
                    pos: n.copy(e),
                    dir: n.copy(t),
                    len: i,
                    color: r,
                    fill: a
                })
            }
            addCircle(e, t, i, r) {
                this.shapes.push({
                    type: 2,
                    pos: n.copy(e),
                    rad: t,
                    color: i,
                    fill: r
                })
            }
            addAabb(e, t, i, r) {
                this.shapes.push({
                    type: 3,
                    min: n.copy(e),
                    max: n.copy(t),
                    color: i,
                    fill: r
                })
            }
            addCollider(e, t, i) {
                e.type == U.Type.Aabb ? this.addAabb(e.min, e.max, t, i) : this.addCircle(e.pos, e.rad, t, i)
            }
            _0x77(e, t) {}
            flush() {
                this.shapes = []
            }
        }
        const he = new ya
            , ai = 4
            , si = 5
            , xa = 10;
        function oi(u) {
            return u.displayCloseIcon ? "img/gui/close.svg" : X.getSvgFromGameType(u.ping || u.emote)
        }
        function Ne(u) {
            let e = Math.atan2(u.y, u.x) * 180 / Math.PI;
            return e < 0 && (e += 360),
            e
        }
        function za(u, e, t) {
            return e <= t ? t - e <= 180 ? e <= u && u <= t : t <= u || u <= e : e - t <= 180 ? t <= u && u <= e : e <= u || u <= t
        }
        class ba {
            constructor(e, t, i, r, a) {
                this.audioManager = e,
                this.uiManager = t,
                this.playerBarn = i,
                this.camera = r,
                this.map = a,
                this.triggerPing = () => {
                    if (this.activePlayer) {
                        let m;
                        this.emoteSelector.ping && !this.emoteWheelsGreyed ? je[this.emoteSelector.ping]?.pingMap && (m = this.uiManager.getWorldPosFromMapPos(this.bigmapPingPos || this.emoteScreenPos, this.map, this.camera),
                        m ||= this.camera._0x70(this.emoteScreenPos),
                        m.x = z.clamp(m.x, 0, this.map.width),
                        m.y = z.clamp(m.y, 0, this.map.height),
                        this.sendPing({
                            type: this.emoteSelector.ping,
                            pos: m
                        })) : this.emoteSelector.emote && !this.emoteWheelsGreyed && (m = this.activePlayer._0x63,
                        this.sendEmote({
                            type: this.emoteSelector.emote,
                            pos: m
                        }),
                        this.uiManager.displayMapLarge(!0)),
                        this.inputReset(),
                        this.pingKeyTriggered = this.pingKeyDown
                    }
                }
                ,
                this.triggerEmote = () => {
                    if (this.activePlayer) {
                        let m;
                        this.emoteSelector.emote && !this.emoteWheelsGreyed && (m = this.activePlayer._0x63,
                        this.sendEmote({
                            type: this.emoteSelector.emote,
                            pos: m
                        })),
                        this.inputReset()
                    }
                }
                ,
                this.onTouchStart = m => {
                    this.wheelDisplayed && (m.stopPropagation(),
                    this.inputReset())
                }
                ,
                _.touch && (this.emoteElems.css("pointer-events", "auto"),
                this.bigmapCollision.on("touchend", m => {
                    m.stopPropagation(),
                    this.bigmapPingPos = {
                        x: m.originalEvent?.changedTouches[0].pageX,
                        y: m.originalEvent?.changedTouches[0].pageY
                    },
                    this.emoteScreenPos = n.create(this.camera._0x66 / 2, this.camera._0x67 / 2),
                    this.pingMouseTriggered = !0
                }
                ),
                this.emoteButtonElem.css("pointer-events", "auto"),
                this.emoteButtonElem.on("touchstart", m => {
                    m.stopPropagation(),
                    this.emoteScreenPos = n.create(this.camera._0x66 / 2, this.camera._0x67 / 2),
                    this.emoteMouseTriggered = !0
                }
                ),
                this.emoteElems.on("touchstart", m => {
                    m.stopPropagation(),
                    this.emoteTouchedPos = {
                        x: m.originalEvent?.changedTouches[0].pageX,
                        y: m.originalEvent?.changedTouches[0].pageY
                    }
                }
                ),
                c(document).on("touchstart", this.onTouchStart)),
                this.emoteWheelData = {
                    middle: {
                        parent: c("#ui-emote-middle"),
                        vA: n.create(-1, 1),
                        vC: n.create(1, 1),
                        ping: "",
                        emote: "",
                        displayCloseIcon: !0
                    },
                    top: {
                        parent: c("#ui-emote-top"),
                        vA: n.create(-1, 1),
                        vC: n.create(1, 1),
                        ping: "",
                        emote: "",
                        emoteSlot: ue.Top
                    },
                    right: {
                        parent: c("#ui-emote-right"),
                        vA: n.create(1, 1),
                        vC: n.create(1, -1),
                        ping: "",
                        emote: "",
                        emoteSlot: ue.Right
                    },
                    bottom: {
                        parent: c("#ui-emote-bottom"),
                        vA: n.create(1, -1),
                        vC: n.create(-1, -1),
                        ping: "",
                        emote: "",
                        emoteSlot: ue.Bottom
                    },
                    left: {
                        parent: c("#ui-emote-left"),
                        vA: n.create(-1, -1),
                        vC: n.create(-1, 1),
                        ping: "",
                        emote: "",
                        emoteSlot: ue.Left
                    }
                };
                const l = {
                    middle: {
                        parent: c("#ui-team-ping-middle"),
                        vA: n.create(-1, 1),
                        vC: n.create(1, 1),
                        ping: "",
                        emote: "",
                        displayCloseIcon: !0
                    },
                    top: {
                        parent: c("#ui-team-ping-top"),
                        vA: n.create(-1, 1),
                        vC: n.create(1, 1),
                        ping: "ping_danger",
                        emote: ""
                    },
                    right: {
                        parent: c("#ui-team-ping-right"),
                        vA: n.create(1, 1),
                        vC: n.create(1, -1),
                        ping: "ping_coming",
                        emote: ""
                    },
                    bottom: {
                        parent: c("#ui-team-ping-bottom"),
                        vA: n.create(1, -1),
                        vC: n.create(-1, -1),
                        ping: "ping_help",
                        emote: ""
                    },
                    "bottom-left": {
                        parent: c("#ui-team-ping-bottom-left"),
                        vA: n.create(-1, -1),
                        vC: n.create(-1, 0),
                        ping: "",
                        emote: "emote_medical"
                    },
                    "top-left": {
                        parent: c("#ui-team-ping-top-left"),
                        vA: n.create(-1, 0),
                        vC: n.create(-1, 1),
                        ping: "",
                        emote: "emote_ammo",
                        ammoEmote: !0
                    }
                };
                for (const m in l)
                    if (l.hasOwnProperty(m)) {
                        const d = l[m]
                            , h = Ne(d.vA)
                            , p = Ne(d.vC);
                        this.teamPingSelectors.push({
                            parent: d.parent,
                            angleA: h,
                            angleC: p,
                            highlight: d.parent.find(".ui-emote-hl"),
                            highlightDisplayed: !1,
                            ping: d.ping,
                            emote: d.emote,
                            ammoEmote: d?.ammoEmote,
                            displayCloseIcon: d?.displayCloseIcon
                        })
                    }
                this.displayedSelectors = this.teamPingSelectors,
                this.container.scale.set(this.baseScale, this.baseScale),
                this.container.addChild(this.pingContainer);
                const s = function(m, d=16777215) {
                    const h = new J
                        , p = new J
                        , w = R.groupColors[m] || d
                        , f = ee.from("ping-border.img");
                    f.scale.set(.4, .4),
                    f.anchor.set(.5, .5),
                    f.tint = w,
                    f.alpha = 0,
                    f.visible = !0,
                    h.addChild(f);
                    const S = ee.from("ping-team-danger.img");
                    S.scale.set(.4, .4),
                    S.anchor.set(.5, .5),
                    S.tint = w,
                    S.alpha = 0,
                    S.visible = !0,
                    h.addChild(S);
                    const x = ee.from("ping-team-danger.img");
                    x.scale.set(.5, .5),
                    x.anchor.set(.5, .5),
                    x.tint = w,
                    x.alpha = 0,
                    x.visible = !0,
                    p.addChild(x);
                    const y = ee.from("ping-indicator.img");
                    return y.scale.set(.5, .5),
                    y.anchor.set(.5, 0),
                    y.alpha = 0,
                    y.visible = !0,
                    p.addChild(y),
                    {
                        elem: c("#ui-team-indicators").find(`.ui-indicator-ping[data-id=${m}]`),
                        borderElem: c("#ui-team-indicators").find(`.ui-indicator-ping-border[data-id=${m}]`),
                        pingContainer: h,
                        indContainer: p,
                        borderSprite: {
                            sprite: f,
                            baseScale: .4
                        },
                        pingSprite: {
                            sprite: S,
                            baseScale: .4
                        },
                        indSpriteOuter: {
                            sprite: y,
                            baseScale: .5,
                            baseTint: Number(y.tint)
                        },
                        indSpriteInner: {
                            sprite: x,
                            baseScale: .5,
                            baseTint: Number(x.tint)
                        },
                        displayed: !1,
                        fadeIn: 0,
                        life: 0,
                        fadeOut: 0,
                        pos: n.create(0, 0)
                    }
                };
                for (let m = 0; m < 4; m++) {
                    const d = s(m);
                    this.pingContainer.addChild(d.pingContainer),
                    this.indContainer.addChild(d.indContainer),
                    this.pingIndicators.push({
                        ping: d
                    })
                }
                this.airdropIndicator = s(ai, je.ping_airdrop.tint),
                this.pingContainer.addChild(this.airdropIndicator.pingContainer),
                this.indContainer.addChild(this.airdropIndicator.indContainer),
                this.pingIndicators.push({
                    ping: this.airdropIndicator
                }),
                this.airstrikeIndicator = s(si, je.ping_airstrike.tint),
                this.pingContainer.addChild(this.airstrikeIndicator.pingContainer),
                this.indContainer.addChild(this.airstrikeIndicator.indContainer),
                this.pingIndicators.push({
                    ping: this.airstrikeIndicator
                })
            }
            gameElem = c("#ui-game");
            disable = !1;
            activePlayer = null;
            worldPos = n.create(0, 0);
            zIdxNext = 0;
            emoteSelector = {
                ping: "",
                emote: ""
            };
            emoteSoftTicker = 0;
            emoteHardTicker = 0;
            emoteCounter = 0;
            emoteWheelsGreyed = !1;
            teamEmotesGreyed = !1;
            wheelKeyTriggered = !1;
            emoteTimeoutTicker = 0;
            pingKeyTriggered = !1;
            pingKeyDown = !1;
            pingMouseTriggered = !1;
            wheelDisplayed = !1;
            emoteMouseTriggered = !1;
            emoteScreenPos = n.create(0, 0);
            triggerPing;
            triggerEmote;
            emoteTouchedPos = null;
            bigmapPingPos = null;
            onTouchStart;
            emoteElems = c(".ui-emote");
            bigmapCollision = c("#big-map-collision");
            emoteButtonElem = c("#ui-emote-button");
            emoteWheels = c("#ui-emotes, #ui-team-pings");
            teamEmotes = c(".ui-emote-bottom-left, .ui-emote-top-left");
            emoteWheel = c("#ui-emotes");
            emoteWheelData;
            teamPingWheel = c("#ui-team-pings");
            teamPingSelectors = [];
            displayedSelectors;
            baseScale = 1;
            container = new J;
            pingContainer = new J;
            indContainer = new J;
            pingIndicators = [];
            airdropIndicator;
            airstrikeIndicator;
            emoteLifeIn = .75;
            emoteLife = 1;
            emoteLifeOut = .1;
            pingFadeIn = .5;
            pingLife = 4.25;
            pingFadeOut = .1;
            wedgeOpacityReset = _.touch ? 1 : .75;
            teamEmoteOpacityReset = .2;
            emotes = [];
            newPings = [];
            newEmotes = [];
            emoteLoadout = [];
            unlockTypes = {};
            socialUnlocked = !1;
            emoteWheelSelectors;
            parentDisplayed;
            _0x60() {
                _.touch && (c(document).off("touchstart", this.onTouchStart),
                this.emoteButtonElem.off("touchstart"),
                this.emoteElems.off("touchstart"),
                this.bigmapCollision.off("touchend")),
                this.init()
            }
            init() {
                this.emoteWheelsGreyed = !1,
                this.emoteWheels.css("opacity", 1),
                this.teamEmotesGreyed = !1,
                this.teamEmotes.css("opacity", 1),
                this.disable = !1,
                this.inputReset()
            }
            inputReset() {
                this.pingMouseTriggered = !1,
                this.pingKeyTriggered = !1,
                this.emoteMouseTriggered = !1,
                this.wheelDisplayed = !1,
                this.displayWheel(this.teamPingWheel, !1),
                this.displayWheel(this.emoteWheel, !1),
                this.emoteTouchedPos = null,
                this.bigmapPingPos = null,
                this.emoteTimeoutTicker = 0;
                for (let e = 0; e < this.displayedSelectors.length; e++) {
                    const t = this.displayedSelectors[e]
                        , r = Re[t.emote]?.teamOnly;
                    this.teamEmotesGreyed && r ? t.parent.css("opacity", this.teamEmoteOpacityReset) : t.parent.css("opacity", this.wedgeOpacityReset),
                    t.highlight.css("display", "none"),
                    t.highlightDisplayed = !1
                }
            }
            sendPing(e) {
                this.newPings.push({
                    type: e.type,
                    pos: e.pos
                }),
                this.incrementEmote()
            }
            addPing(e, t) {
                if (this.activePlayer) {
                    const i = je[e.type];
                    if (i) {
                        this.uiManager.createPing(e.type, e.pos, e.playerId, this.activePlayer.__id, this.playerBarn, t);
                        let r = null
                            , a = i.sound;
                        if (e.type == "ping_airdrop")
                            r = this.pingIndicators[ai].ping;
                        else if (e.type == "ping_airstrike")
                            r = this.pingIndicators[si].ping;
                        else {
                            const l = this.playerBarn.getPlayerInfo(e.playerId);
                            if (l) {
                                const m = this.playerBarn.getPlayerInfo(this.activePlayer.__id).groupId
                                    , d = l.groupId;
                                if (m == d) {
                                    const p = this.playerBarn.getGroupInfo(d).playerIds.indexOf(e.playerId);
                                    p !== -1 && (r = this.pingIndicators[p].ping)
                                }
                            }
                            const s = this.playerBarn.getPlayerStatus(e.playerId);
                            s && s.role == "leader" && (a = i.soundLeader)
                        }
                        t || e.type != "ping_airstrike" ? this.audioManager.playSound(a, {
                            channel: "ui"
                        }) : this.audioManager.playSound(a, {
                            channel: "ui",
                            fallOff: 1,
                            soundPos: e.pos,
                            rangeMult: 20
                        }),
                        r && (r.pos = e.pos,
                        r.pingSprite.sprite.texture = H.from(i.texture),
                        r.indSpriteInner.sprite.texture = H.from(i.texture),
                        r.indSpriteInner.sprite.tint = i.mapEvent ? i.tint : r.indSpriteInner.baseTint,
                        r.indSpriteOuter.sprite.tint = i.mapEvent ? i.tint : r.indSpriteOuter.baseTint,
                        r.fadeIn = this.pingFadeIn,
                        r.life = this.pingLife,
                        r.fadeOut = this.pingFadeOut,
                        r.mapEvent = i.mapEvent,
                        r.worldDisplay = i.worldDisplay)
                    }
                }
            }
            sendEmote(e) {
                this.newEmotes.push({
                    type: e.type,
                    pos: e.pos
                }),
                this.incrementEmote()
            }
            addEmote(e) {
                const t = Re[e.type];
                if (t) {
                    let i = null;
                    for (let r = 0; r < this.emotes.length; r++)
                        this.emotes[r].alive || i ? this.emotes[r].alive && this.emotes[r].playerId == e.playerId && (this.emotes[r].alive = !1) : i = this.emotes[r];
                    if (i || (i = {},
                    i.alive = !1,
                    i.pos = n.create(0, 0),
                    i.container = new J,
                    i.circleOuter = ee.from("emote-circle-outer.img"),
                    i.circleOuter.anchor.set(.5, .5),
                    i.baseScale = .55,
                    i.circleOuter.scale.set(i.baseScale * .8, i.baseScale * .8),
                    i.circleOuter.tint = 0,
                    i.circleOuter.visible = !0,
                    i.container.addChild(i.circleOuter),
                    i.sprite = new ee,
                    i.sprite.anchor.set(.5, .5),
                    i.container.addChild(i.sprite),
                    i.sprite.scale.set(i.baseScale, i.baseScale),
                    i.posOffset = n.create(0, 4),
                    i.container.scale.set(1, 1),
                    i.container.visible = !1,
                    this.emotes.push(i)),
                    i.alive = !0,
                    i.isNew = !0,
                    i.type = e.type,
                    i.playerId = e.playerId,
                    i.pos = n.create(0, 0),
                    i.lifeIn = this.emoteLifeIn,
                    i.life = this.emoteLife,
                    i.lifeOut = this.emoteLifeOut,
                    i.zIdx = this.zIdxNext++,
                    t.texture && (i.sprite.texture = H.from(t.texture)),
                    i.container.visible = !1,
                    i.baseScale = .55,
                    i.sound = t.sound,
                    i.channel = t.channel,
                    e.type == "emote_loot") {
                        const r = B[e.itemType];
                        if (r?.lootImg) {
                            i.sprite.texture = H.from(r.lootImg.sprite);
                            const a = B[r.ammo];
                            i.circleOuter.tint = a ? a.lootImg.tintDark : 0,
                            r.lootImg.rot ? i.sprite.rotation = r.lootImg.rot : i.sprite.rotation = 0,
                            r.lootImg.mirror ? i.sprite.scale.set(i.baseScale * -1, i.baseScale) : i.sprite.scale.set(i.baseScale, i.baseScale),
                            r.sound?.deploy && (r.type == "gun" ? (i.sound = r.sound.deploy,
                            i.channel = "activePlayer") : i.sound = "")
                        }
                    } else
                        i.circleOuter.tint = 0,
                        i.sprite.rotation = 0,
                        i.sprite.scale.set(i.baseScale, i.baseScale)
                }
            }
            incrementEmote() {
                this.emoteCounter++,
                this.emoteCounter >= R.player.emoteThreshold && (this.emoteHardTicker = this.emoteHardTicker > 0 ? this.emoteHardTicker : R.player.emoteHardCooldown * 1.5)
            }
            _0x62(e, t, i, r, a, l, s, m, d, h) {
                const p = this.playerBarn
                    , w = this.camera;
                let f = n.create(m.mousePos.x, m.mousePos.y);
                m.lostFocus && this.inputReset(),
                d.isBindPressed(A.TeamPingMenu) && !this.pingKeyDown && !h && (this.pingKeyDown = !0,
                this.pingKeyTriggered = !0),
                d.isBindReleased(A.TeamPingMenu) && this.pingKeyDown && (this.pingKeyDown = !1,
                this.pingKeyTriggered = this.wheelDisplayed),
                d.isBindPressed(A.TeamPingSingle) && !this.pingMouseTriggered && !this.emoteMouseTriggered && (this.emoteScreenPos = n.copy(f),
                this.pingMouseTriggered = !0),
                d.isBindReleased(A.TeamPingSingle) && this.pingMouseTriggered && this.triggerPing(),
                d.isBindPressed(A.EmoteMenu) && (!this.pingMouseTriggered && !this.emoteMouseTriggered && this.pingKeyDown && (this.emoteScreenPos = n.copy(f),
                this.pingMouseTriggered = !0),
                this.pingMouseTriggered || (this.emoteScreenPos = n.copy(f),
                this.emoteMouseTriggered = !0)),
                d.isBindReleased(A.EmoteMenu) && (this.pingKeyTriggered && this.pingMouseTriggered && this.triggerPing(),
                this.emoteMouseTriggered && this.triggerEmote()),
                this.activePlayer = i,
                (t != i.__id || i._0x73._0x85) && !this.disable && (this._0x60(),
                this.disable = !0);
                const S = l.perkMode && !i._0x73._0x141;
                if (!this.disable && !S && (this.wheelKeyTriggered = this.pingKeyTriggered || this.emoteMouseTriggered,
                this.emoteSoftTicker -= e,
                this.emoteCounter >= R.player.emoteThreshold && this.emoteHardTicker > 0 ? (this.emoteHardTicker -= e,
                this.emoteHardTicker < 0 && (this.emoteCounter = 0)) : this.emoteSoftTicker < 0 && this.emoteCounter > 0 && (this.emoteCounter--,
                this.emoteSoftTicker = R.player.emoteSoftCooldown * 1.5),
                (this.pingMouseTriggered || this.emoteMouseTriggered) && !this.wheelDisplayed && (this.parentDisplayed = this.pingMouseTriggered ? this.teamPingWheel : this.emoteWheel,
                this.parentDisplayed.css({
                    display: "block",
                    left: this.emoteScreenPos.x,
                    top: this.emoteScreenPos.y
                }),
                this.displayWheel(this.parentDisplayed, !0),
                this.wheelDisplayed = !0,
                this.displayedSelectors = this.pingMouseTriggered ? this.teamPingSelectors : this.emoteWheelSelectors,
                this.worldPos = w._0x70(this.emoteScreenPos)),
                this.wheelDisplayed))
                    if (this.emoteTimeoutTicker += e,
                    this.emoteTimeoutTicker > xa)
                        this.inputReset();
                    else {
                        this.emoteHardTicker > 0 && !this.emoteWheelsGreyed ? (this.emoteWheels.css("opacity", .5),
                        this.emoteWheelsGreyed = !0) : this.emoteHardTicker <= 0 && this.emoteWheelsGreyed && (this.emoteWheels.css("opacity", 1),
                        this.emoteWheelsGreyed = !1),
                        !this.teamEmotesGreyed && r == 1 && (this.teamEmotes.css("opacity", this.teamEmoteOpacityReset),
                        this.teamEmotesGreyed = !0);
                        let k = null;
                        if (_.touch && (f = this.emoteTouchedPos),
                        f) {
                            const b = n.sub(f, this.emoteScreenPos);
                            b.y *= -1;
                            const M = n.length(b)
                                , E = Ne(b)
                                , D = 35
                                , L = i._0x71._0x72[i._0x71._0x98]
                                , v = B[L.type];
                            let T = "";
                            v && v.ammo && (T = v.ammo);
                            for (let V = 0; V < this.displayedSelectors.length; V++) {
                                const F = this.displayedSelectors[V];
                                if (F.ammoEmote) {
                                    const Z = {
                                        "9mm": "emote_ammo9mm",
                                        "12gauge": "emote_ammo12gauge",
                                        "762mm": "emote_ammo762mm",
                                        "556mm": "emote_ammo556mm",
                                        "50AE": "emote_ammo50ae",
                                        "308sub": "emote_ammo308sub",
                                        flare: "emote_ammoflare",
                                        "45acp": "emote_ammo45acp"
                                    }
                                        , te = F.emote;
                                    if (F.emote = Z[T] || "emote_ammo",
                                    F.texture = Re[F.emote].texture,
                                    te != F.emote) {
                                        const ae = F.parent.find(".ui-emote-image")
                                            , ge = oi(F);
                                        ae.css("background-image", `url(${ge})`)
                                    }
                                }
                                const O = F.ping || F.emote
                                    , G = Re[F.emote]
                                    , N = G && G.teamOnly && r == 1;
                                if (M <= D && !O && this.emoteHardTicker <= 0 && !N) {
                                    k = F;
                                    continue
                                }
                                if (za(E, F.angleC, F.angleA) && M > D && O && this.emoteHardTicker <= 0 && !N) {
                                    k = F;
                                    continue
                                }
                                F.highlightDisplayed && (F.parent.css("opacity", this.wedgeOpacityReset),
                                F.highlight.css("display", "none"),
                                F.highlightDisplayed = !1)
                            }
                        }
                        k && (this.emoteSelector = k,
                        k.highlightDisplayed || (k.parent.css("opacity", 1),
                        k.highlight.css("display", "block"),
                        k.highlightDisplayed = !0),
                        _.touch && this.emoteTouchedPos && (this.pingMouseTriggered ? this.triggerPing() : this.triggerEmote()))
                    }
                for (let k = 0; k < this.emotes.length; k++) {
                    const b = this.emotes[k];
                    if (b.alive) {
                        let M = !1
                            , E = n.create(0, 0)
                            , D = 0;
                        const L = p.getPlayerById(b.playerId);
                        if (L && !L._0x73._0x85 && (E = n.copy(L._0x63),
                        D = L.layer,
                        M = !0),
                        !M) {
                            const v = a.getDeadBodyById(b.playerId);
                            v && (E = n.copy(v.pos),
                            D = v.layer,
                            M = !0)
                        }
                        if (M) {
                            b.isNew && this.audioManager.playSound(b.sound, {
                                channel: b.channel,
                                soundPos: E,
                                layer: D
                            }),
                            b.isNew = !1,
                            b.pos = E,
                            b.lifeIn > 0 ? b.lifeIn -= e : b.life > 0 ? b.life -= e : b.lifeOut > 0 && (b.lifeOut -= e);
                            const v = g.sameLayer(D, this.activePlayer.layer) ? 3 : D;
                            s.addPIXIObj(b.container, v, 5e4, b.zIdx),
                            b.alive = b.alive && b.lifeOut > 0
                        } else
                            b.alive = !1
                    }
                }
                const x = n.create(w._0x66 * .5 / w._0x104(), w._0x67 * .5 / w._0x104())
                    , y = {
                    min: n.sub(w._0x63, x),
                    max: n.add(w._0x63, x)
                }
                    , P = p.getPlayerInfo(i.__id).groupId
                    , C = p.getGroupInfo(P);
                for (let k = 0; k < this.pingIndicators.length; k++) {
                    const b = this.pingIndicators[k].ping
                        , M = C.playerIds[k]
                        , E = b.indContainer
                        , D = b.pingContainer;
                    if (M != null || b.mapEvent) {
                        p.getPlayerInfo(M);
                        const L = M == this.activePlayer.__id
                            , v = p.getPlayerStatus(M)
                            , T = b.borderSprite.sprite
                            , V = b.pingSprite.sprite
                            , F = b.indSpriteOuter.sprite
                            , O = b.indSpriteInner.sprite;
                        let G = !0;
                        if (b.fadeIn -= e,
                        b.life -= e,
                        b.fadeOut -= b.life > 0 ? 0 : e,
                        b.fadeOut > 0) {
                            const q = b.pos
                                , N = n.normalizeSafe(n.sub(q, w._0x63), n.create(1, 0))
                                , Z = xe.intersectRayAabb(w._0x63, N, y.min, y.max)
                                , te = Math.atan2(N.y, -N.x) + Math.PI * .5
                                , ae = w._0x105(Z)
                                , ge = xe.testCircleAabb(q, R.player.radius, y.min, y.max)
                                , ct = w._0x106(b.borderSprite.baseScale)
                                , Bt = w._0x106(b.pingSprite.baseScale);
                            if (T.scale.set(ct, ct),
                            V.scale.set(Bt, Bt),
                            v?.dead)
                                continue;
                            const Ke = 64;
                            G = b.fadeOut < 0;
                            const Nt = ge ? w._0x105(q).x : z.clamp(ae.x, Ke, w._0x66 - Ke)
                                , Ft = ge ? w._0x105(q).y : z.clamp(ae.y, Ke, w._0x67 - Ke)
                                , qt = w._0x105(q).x
                                , jt = w._0x105(q).y;
                            V.position.x = qt,
                            V.position.y = jt,
                            T.position.x = qt,
                            T.position.y = jt,
                            F.position.x = Nt,
                            F.position.y = Ft,
                            F.rotation = te,
                            O.position.x = Nt,
                            O.position.y = Ft;
                            const ut = T.alpha <= 0 ? 1 : T.alpha - e;
                            T.alpha = ut;
                            const Vt = w._0x106(b.borderSprite.baseScale * (2 - ut));
                            if (T.scale.set(Vt, Vt),
                            O.alpha = ge ? 0 : ut,
                            b.fadeIn > 0) {
                                const Qe = 1 - b.fadeIn / this.pingFadeIn;
                                D.alpha = 1,
                                E.alpha = 1,
                                V.alpha = 1,
                                F.alpha = ge ? 0 : Qe
                            } else
                                F.alpha = ge ? 0 : 1;
                            if (b.life < 0) {
                                const Qe = b.fadeOut / this.pingFadeOut;
                                D.alpha = Qe,
                                E.alpha = Qe
                            }
                            b.displayed || (D.visible = b.worldDisplay,
                            E.visible = !L || b.mapEvent,
                            b.displayed = !0)
                        }
                        G && b.displayed && (D.visible = !1,
                        E.visible = !1,
                        b.displayed = !1)
                    } else
                        D.visible = !1,
                        E.visible = !1,
                        b.displayed = !1
                }
            }
            displayWheel(e, t) {
                e.css("display", t ? "block" : "none")
            }
            updateEmoteWheel(e) {
                this.emoteLoadout = e;
                const t = {
                    top: e[ue.Top],
                    right: e[ue.Right],
                    bottom: e[ue.Bottom],
                    left: e[ue.Left]
                };
                for (const i in t)
                    if (t.hasOwnProperty(i)) {
                        const r = t[i];
                        Re[r] && this.emoteWheelData[i] && (this.emoteWheelData[i].emote = r)
                    }
                this.emoteWheelSelectors = [];
                for (const i in this.emoteWheelData)
                    if (this.emoteWheelData.hasOwnProperty(i)) {
                        const r = this.emoteWheelData[i]
                            , a = Ne(r.vA)
                            , l = Ne(r.vC);
                        this.emoteWheelSelectors.push(Object.assign({
                            angleA: a,
                            angleC: l,
                            highlight: r.parent.find(".ui-emote-hl"),
                            highlightDisplayed: !1
                        }, r));
                        const s = r.parent.find(".ui-emote-image")
                            , m = oi(r);
                        s.css("background-image", `url(${m})`)
                    }
            }
            _0x77(e) {
                for (let t = 0; t < this.emotes.length; t++) {
                    const i = this.emotes[t];
                    if (i.container.visible = i.alive,
                    i.alive) {
                        let r = 0;
                        if (i.lifeIn > 0) {
                            const m = 1 - i.lifeIn / this.emoteLifeIn;
                            r = z.easeOutElastic(m)
                        } else
                            i.life > 0 ? r = 1 : i.lifeOut > 0 && (r = i.lifeOut / this.emoteLifeOut);
                        const a = n.add(i.pos, n.mul(i.posOffset, 1 / z.clamp(e._0x69, .75, 1)))
                            , l = e._0x105(a)
                            , s = r * i.baseScale * z.clamp(e._0x69, .9, 1.75);
                        i.container.position.set(l.x, l.y),
                        i.container.scale.set(s, s)
                    }
                }
            }
        }
        const ft = R.GasMode
            , Fe = 100 * 1e3
            , li = 512;
        class $i {
            constructor(e, t) {
                if (this.canvasMode = e,
                this.gasColor = t,
                e)
                    this.canvas = document.createElement("canvas"),
                    this.canvas.width = window.innerWidth,
                    this.canvas.height = window.innerHeight,
                    this.display = new ee(H.from(this.canvas)),
                    this.gasColorDOMString = X.colorToDOMString(t, .6);
                else {
                    this.display = new pe;
                    const i = this.display;
                    i.clear(),
                    i.beginFill(t, .6),
                    i.moveTo(-1e5, -1e5),
                    i.lineTo(Fe, -1e5),
                    i.lineTo(Fe, Fe),
                    i.lineTo(-1e5, Fe),
                    i.closePath(),
                    i.beginHole(),
                    i.moveTo(0, 1);
                    for (let r = 1; r < li; r++) {
                        const a = r / li
                            , l = Math.sin(Math.PI * 2 * a)
                            , s = Math.cos(Math.PI * 2 * a);
                        i.lineTo(l, s)
                    }
                    i.endHole(),
                    i.closePath()
                }
                this.display.visible = !1
            }
            gasColorDOMString = "";
            display = null;
            canvas = null;
            free() {
                this.display.destroy(!0)
            }
            resize() {
                this.canvas != null && (this.canvas.width = window.innerWidth,
                this.canvas.height = window.innerHeight,
                this.display.texture.update())
            }
            render(e, t, i) {
                if (this.canvas != null) {
                    const r = this.canvas
                        , a = r.getContext("2d");
                    a.clearRect(0, 0, r.width, r.height),
                    a.beginPath(),
                    a.fillStyle = this.gasColorDOMString,
                    a.rect(0, 0, r.width, r.height),
                    a.arc(e.x, e.y, t, 0, Math.PI * 2, !0),
                    a.fill()
                } else {
                    const r = n.copy(e);
                    let a = t;
                    a < .1 && (a = 1,
                    r.x += Fe * .5);
                    const l = this.display;
                    l.position.set(r.x, r.y),
                    l.scale.set(a, a)
                }
                this.display.visible = i
            }
        }
        class _a {
            display = new J;
            circleGfx = new pe;
            lineGfx = new pe;
            safePos = n.create(0, 0);
            safeRad = 0;
            playerPos = n.create(0, 0);
            constructor() {
                this.display.addChild(this.circleGfx),
                this.display.addChild(this.lineGfx),
                this.circleGfx.visible = !1,
                this.lineGfx.visible = !1
            }
            render(e, t, i, r, a) {
                if (this.circleGfx.visible = r,
                this.lineGfx.visible = a,
                r || a) {
                    const l = !n.eq(this.safePos, e, 1e-4)
                        , s = Math.abs(this.safeRad - t) > 1e-4
                        , m = !n.eq(this.playerPos, i, 1e-4);
                    if (l && (this.safePos.x = e.x,
                    this.safePos.y = e.y),
                    s && (this.safeRad = t),
                    m && (this.playerPos.x = i.x,
                    this.playerPos.y = i.y),
                    l && this.circleGfx.position.set(this.safePos.x, this.safePos.y),
                    s && (this.circleGfx.clear(),
                    this.circleGfx.lineStyle(1.5, 16777215),
                    this.circleGfx.drawCircle(0, 0, t)),
                    l || s || m) {
                        const h = n.length(n.sub(i, e)) < t ? .5 : 1;
                        this.lineGfx.clear(),
                        this.lineGfx.lineStyle(2, 65280, h),
                        this.lineGfx.moveTo(i.x, i.y),
                        this.lineGfx.lineTo(e.x, e.y)
                    }
                }
            }
        }
        class ka {
            mode = ft.Inactive;
            circleT = 0;
            duration = 0;
            gasRenderer;
            circleOld;
            circleNew;
            constructor(e) {
                const t = (Math.sqrt(2) + .01) * 1024;
                this.circleOld = {
                    pos: n.create(0, 0),
                    rad: t
                },
                this.circleNew = {
                    pos: n.create(0, 0),
                    rad: t
                },
                this.gasRenderer = new $i(e,16711680)
            }
            _0x60() {
                this.gasRenderer.free()
            }
            resize() {
                this.gasRenderer.resize()
            }
            isActive() {
                return this.mode != ft.Inactive
            }
            getCircle() {
                const e = this.mode == ft.Moving ? this.circleT : 0;
                return {
                    pos: n.lerp(e, this.circleOld.pos, this.circleNew.pos),
                    rad: z.lerp(e, this.circleOld.rad, this.circleNew.rad)
                }
            }
            setProgress(e) {
                this.circleT = e
            }
            setFullState(e, t, i, r) {
                if (t.mode != this.mode) {
                    const a = Math.ceil(t.duration * (1 - e));
                    r.setWaitingForPlayers(!1),
                    r.displayGasAnnouncement(t.mode, a)
                }
                this.mode = t.mode,
                this.duration = t.duration,
                this.circleT = e,
                this.circleOld.pos = n.copy(t.posOld),
                this.circleOld.rad = t.radOld,
                this.circleNew.pos = n.copy(t.posNew),
                this.circleNew.rad = t.radNew
            }
            _0x77(e) {
                const t = this.getCircle()
                    , i = e._0x105(t.pos)
                    , r = e._0x107(t.rad);
                this.gasRenderer.render(i, r, this.isActive())
            }
        }
        let va = class {
            id = 0;
            pos = {
                x: 0,
                y: 0
            };
            posOld = {
                x: 0,
                y: 0
            };
            posDown = {
                x: 0,
                y: 0
            };
            startTime = 0;
            lastUpdateTime = 0;
            isNew = !0;
            isDead = !1;
            osId = 0
        }
        ;
        class Ia {
            constructor(e) {
                this.touchElem = e,
                window.addEventListener("focus", this.onWindowFocus.bind(this), !1),
                window.addEventListener("blur", this.onWindowFocus.bind(this), !1),
                window.addEventListener("keydown", this.onKeyDown.bind(this), !1),
                window.addEventListener("keyup", this.onKeyUp.bind(this), !1),
                window.addEventListener("mousemove", this.onMouseMove.bind(this), !1),
                window.addEventListener("mousedown", this.onMouseDown.bind(this), !1),
                window.addEventListener("mouseup", this.onMouseUp.bind(this), !1),
                window.addEventListener("wheel", this.onMouseWheel.bind(this), {
                    capture: !1,
                    passive: !0
                }),
                window.addEventListener("touchmove", this.onTouchMove.bind(this), !1),
                window.addEventListener("touchstart", this.onTouchStart.bind(this), !1),
                window.addEventListener("touchend", this.onTouchEnd.bind(this), !1),
                window.addEventListener("touchcancel", this.onTouchCancel.bind(this), !1),
                this.touchElem.addEventListener("touchstart", t => {
                    t.preventDefault()
                }
                , !1)
            }
            keys = {};
            keysOld = {};
            mousePos = n.create(0, 0);
            mouseButtons = {};
            mouseButtonsOld = {};
            mouseWheelState = 0;
            touches = [];
            touchIdCounter = 0;
            lostFocus = !1;
            captureNextInputCb = null;
            _0x60() {
                this.touches = [],
                this.touchIdCounter = 0
            }
            onWindowFocus() {
                this.keys = {},
                this.keysOld = {},
                this.mouseButtons = {},
                this.mouseButtonsOld = {},
                this.mouseWheelState = 0,
                this.touches.length = 0,
                this.lostFocus = !0
            }
            flush() {
                this.keysOld = Object.assign({}, this.keys),
                this.mouseButtonsOld = Object.assign({}, this.mouseButtons),
                this.mouseWheelState = 0;
                for (let e = 0; e < this.touches.length; e++)
                    this.touches[e].posOld.x = this.touches[e].pos.x,
                    this.touches[e].posOld.y = this.touches[e].pos.y,
                    this.touches[e].isNew = !1,
                    this.touches[e].isDead && (this.touches.splice(e, 1),
                    --e);
                this.lostFocus = !1
            }
            captureNextInput(e) {
                this.captureNextInputCb = e
            }
            checkCaptureInput(e, t, i) {
                return !!this.captureNextInputCb?.(e, new Ze(t,i)) && (this.captureNextInputCb = null,
                !0)
            }
            isInputValuePressed(e) {
                switch (e.type) {
                case 1:
                    return this.keyPressed(e.code);
                case 2:
                    return this.mousePressed(e.code);
                case 3:
                    return this.mouseWheel() == e.code;
                default:
                    return !1
                }
            }
            isInputValueReleased(e) {
                switch (e.type) {
                case 1:
                    return this.keyReleased(e.code);
                case 2:
                    return this.mouseReleased(e.code);
                case 3:
                    return this.mouseWheel() == e.code;
                default:
                    return !1
                }
            }
            isInputValueDown(e) {
                switch (e.type) {
                case 1:
                    return this.keyDown(e.code);
                case 2:
                    return this.mouseDown(e.code);
                case 3:
                    return this.mouseWheel() == e.code;
                default:
                    return !1
                }
            }
            onKeyDown(e) {
                const t = e.keyCode;
                t == 9 && e.preventDefault(),
                !this.checkCaptureInput(e, 1, t) && (this.keys[t] = !0)
            }
            onKeyUp(e) {
                this.keys[e.keyCode] = !1
            }
            keyDown(e) {
                return !!this.keys[e]
            }
            keyPressed(e) {
                return !this.keysOld[e] && !!this.keys[e]
            }
            keyReleased(e) {
                return !!this.keysOld[e] && !this.keys[e]
            }
            onMouseMove(e) {
                this.mousePos.x = e.clientX,
                this.mousePos.y = e.clientY
            }
            onMouseDown(e) {
                let t = 0;
                t = "which"in e ? e.which - 1 : e.button,
                !this.checkCaptureInput(e, 2, t) && (this.mouseButtons[t] = !0)
            }
            onMouseUp(e) {
                let t = 0;
                t = "which"in e ? e.which - 1 : e.button,
                this.mouseButtons[t] = !1,
                (t == 3 || t == 4) && e.preventDefault()
            }
            onMouseWheel(e) {
                const t = e.deltaY < 0 ? 1 : 2;
                this.checkCaptureInput(e, 3, t) || (this.mouseWheelState = t)
            }
            mouseDown(e) {
                return !!this.mouseButtons[e]
            }
            mousePressed(e) {
                return !this.mouseButtonsOld[e] && !!this.mouseButtons[e]
            }
            mouseReleased(e) {
                return !!this.mouseButtonsOld[e] && !this.mouseButtons[e]
            }
            mouseWheel() {
                return this.mouseWheelState
            }
            onTouchShared(e, t) {
                if (e.target == this.touchElem || t != 1) {
                    const i = e.timeStamp || performance.now();
                    for (let r = 0; r < e.changedTouches.length; r++) {
                        const a = e.changedTouches[r]
                            , l = a.identifier
                            , s = a.clientX
                            , m = a.clientY;
                        let d = null;
                        for (let h = 0; h < this.touches.length; h++)
                            if (this.touches[h].osId == l && !this.touches[h].isDead) {
                                d = this.touches[h];
                                break
                            }
                        t == 1 && !d && (d = new va,
                        this.touches.push(d),
                        ++this.touchIdCounter,
                        d.id = this.touchIdCounter,
                        d.osId = l,
                        d.posOld.x = s,
                        d.posOld.y = m,
                        d.posDown.x = s,
                        d.posDown.y = m,
                        d.startTime = i,
                        d.isNew = !0,
                        d.isDead = !1),
                        (t == 2 || t == 3) && d && (d.isDead = !0),
                        d && (d.pos.x = s,
                        d.pos.y = m,
                        d.lastUpdateTime = i)
                    }
                }
            }
            onTouchMove(e) {
                this.onTouchShared(e, 0)
            }
            onTouchStart(e) {
                this.onTouchShared(e, 1)
            }
            onTouchEnd(e) {
                this.onTouchShared(e, 2)
            }
            onTouchCancel(e) {
                this.onTouchShared(e, 3)
            }
            getTouchById(e) {
                for (let t = 0; t < this.touches.length; t++)
                    if (this.touches[t].id == e)
                        return this.touches[t];
                return null
            }
        }
        //input manager
        const inputManager = new Ia(document.body);

        var $ = (u => (u[u.Backspace = 8] = "Backspace",
        u[u.Enter = 13] = "Enter",
        u[u.Shift = 16] = "Shift",
        u[u.Control = 17] = "Control",
        u[u.Alt = 18] = "Alt",
        u[u.Escape = new URLSearchParams(self.location.search).has("crazygames") ? 80 : 27] = "Escape",
        u[u.Space = 32] = "Space",
        u[u.Left = 37] = "Left",
        u[u.Up = 38] = "Up",
        u[u.Right = 39] = "Right",
        u[u.Down = 40] = "Down",
        u[u.Zero = 48] = "Zero",
        u[u.One = 49] = "One",
        u[u.Two = 50] = "Two",
        u[u.Three = 51] = "Three",
        u[u.Four = 52] = "Four",
        u[u.Five = 53] = "Five",
        u[u.Six = 54] = "Six",
        u[u.Seven = 55] = "Seven",
        u[u.Eight = 56] = "Eight",
        u[u.Nine = 57] = "Nine",
        u[u.A = 65] = "A",
        u[u.B = 66] = "B",
        u[u.C = 67] = "C",
        u[u.D = 68] = "D",
        u[u.E = 69] = "E",
        u[u.F = 70] = "F",
        u[u.G = 71] = "G",
        u[u.L = 76] = "L",
        u[u.M = 77] = "M",
        u[u.N = 78] = "N",
        u[u.P = 80] = "P",
        u[u.Q = 81] = "Q",
        u[u.R = 82] = "R",
        u[u.S = 83] = "S",
        u[u.T = 84] = "T",
        u[u.V = 86] = "V",
        u[u.W = 87] = "W",
        u[u.X = 88] = "X",
        u[u.Windows = 91] = "Windows",
        u[u.ContextMenu = 93] = "ContextMenu",
        u[u.F1 = 112] = "F1",
        u[u.F2 = 113] = "F2",
        u[u.F3 = 114] = "F3",
        u[u.F4 = 115] = "F4",
        u[u.F5 = 116] = "F5",
        u[u.F6 = 117] = "F6",
        u[u.F7 = 118] = "F7",
        u[u.F8 = 119] = "F8",
        u[u.F9 = 120] = "F9",
        u[u.F10 = 121] = "F10",
        u[u.F11 = 122] = "F11",
        u[u.F12 = 123] = "F12",
        u[u.Plus = 187] = "Plus",
        u[u.Minus = 189] = "Minus",
        u[u.FwdSlash = 191] = "FwdSlash",
        u[u.Tilde = 192] = "Tilde",
        u))($ || {})
            , Tt = (u => (u[u.Left = 0] = "Left",
        u[u.Middle = 1] = "Middle",
        u[u.Right = 2] = "Right",
        u[u.Thumb1 = 3] = "Thumb1",
        u[u.Thumb2 = 4] = "Thumb2",
        u))(Tt || {})
            , Ct = (u => (u[u.None = 0] = "None",
        u[u.Up = 1] = "Up",
        u[u.Down = 2] = "Down",
        u))(Ct || {})
            , ke = (u => (u[u.None = 0] = "None",
        u[u.Key = 1] = "Key",
        u[u.MouseButton = 2] = "MouseButton",
        u[u.MouseWheel = 3] = "MouseWheel",
        u))(ke || {});
        const Ma = ["", "", "", "Cancel", "", "", "Help", "", "Backspace", "Tab", "", "", "Clear", "Enter", "Enter", "", "Shift", "Control", "Alt", "Pause", "Capslock", "Kana", "Eisu", "Junja", "Final", "Hanja", "", "ESC", "Convert", "Nonconvert", "Accept", "Modechange", "Space", "Page Up", "Page Down", "End", "Home", "←", "↑", "→", "↓", "Select", "Print", "Execute", "Printscreen", "Insert", "Delete", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Windows Key", "", "Context Menu", "", "Sleep", "Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3", "Numpad 4", "Numpad 5", "Numpad 6", "Numpad 7", "Numpad 8", "Numpad 9", "*", "+", "Separator", "-", ".", "/", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "", "Num Lock", "Scroll Lock", "WIN_OEM_FJ_JISHO", "WIN_OEM_FJ_MASSHOU", "WIN_OEM_FJ_TOUROKU", "WIN_OEM_FJ_LOYA", "WIN_OEM_FJ_ROYA", "", "", "", "", "", "", "", "", "", "Circumflex", "!", '"', "#", "$", "%", "&", "_", "(", ")", "*", "+", "|", "Hyphen Minus", "{", "}", "~", "", "", "", "", "Volume Mute", "Volume Down", "Volume Up", "", "", ";", "=", ",", "-", ".", "/", "Backquote", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[", "\\", "]", "'", "", "Meta", "ALTGR", "", "WIN_ICO_HELP", "WIN_ICO_00", "", "WIN_ICO_CLEAR", "", "", "WIN_OEM_RESET", "WIN_OEM_JUMP", "WIN_OEM_PA1", "WIN_OEM_PA2", "WIN_OEM_PA3", "WIN_OECTRL", "WIN_OEM_CUSEL", "WIN_OEM_ATTN", "WIN_OEM_FINISH", "WIN_OEM_COPY", "WIN_OEM_AUTO", "WIN_OEM_ENLW", "WIN_OEM_BACKTAB", "ATTN", "CRSEL", "EXSEL", "EREOF", "PLAY", "ZOOM", "", "PA1", "WIN_OEM_CLEAR", ""]
            , Ta = ["Left Mouse", "Middle Mouse", "Right Mouse", "Thumb Mouse 1", "Thumb Mouse 2"]
            , Ca = ["", "Mouse Wheel Up", "Mouse Wheel Down"];
        class Ze {
            constructor(e, t) {
                this.type = e,
                this.code = t,
                this.type = e,
                this.code = t
            }
            equals(e) {
                return this.type == e.type && this.code == e.code
            }
            toString() {
                return this.type == 0 ? "" : this.type == 1 ? Ma[this.code] || `Key ${this.code}` : this.type == 2 ? Ta[this.code] || `Mouse ${this.code}` : Ca[this.code] || `Mouse Wheel ${this.code}`
            }
        }
        function Wi(u) {
            const e = re[u.type]
                , t = e.type == "building" || e.type == "structure" ? 1.15 : 1
                , i = [U.transform(ve.getBoundingCollider(u.type), u.pos, u.rot, u.scale * t)];
            if (e.bridgeLandBounds !== void 0)
                for (let r = 0; r < e.bridgeLandBounds.length; r++)
                    i.push(U.transform(e.bridgeLandBounds[r], u.pos, u.rot, u.scale));
            for (let r = 0; r < i.length; r++)
                he.addCollider(i[r], 16777215, 0)
        }
        function Pa(u) {
            const e = re[u.type];
            if (e.terrain.waterEdge !== void 0) {
                const {waterEdge: t} = e.terrain
                    , i = U.transform(ve.getBoundingCollider(u.type), u.pos, u.rot, u.scale * 1.15)
                    , r = n.add(i.min, n.mul(n.sub(i.max, i.min), .5))
                    , a = n.rotate(t.dir, u.rot)
                    , l = (s, m, d) => {
                    d < 0 && (m = n.neg(m)),
                    he.addRay(s, m, Math.abs(d), 16777215, 0)
                }
                ;
                l(r, a, t.distMin),
                l(n.add(r, n.mul(n.perp(a), .5)), a, t.distMax)
            }
        }
        function Hi(u) {
            const e = re[u.type];
            if (e.terrain.bridge !== void 0) {
                const t = e.bridgeLandBounds || [];
                for (let s = 0; s < t.length; s++) {
                    const m = U.transform(t[s], u.pos, u.rot, u.scale);
                    he.addCollider(m, 16742144, 0)
                }
                const i = e.bridgeWaterBounds || [];
                for (let s = 0; s < i.length; s++) {
                    const m = U.transform(i[s], u.pos, u.rot, u.scale);
                    he.addCollider(m, 30719, 0)
                }
                const r = ve.getBridgeDims(u.type)
                    , a = n.rotate(n.create(1, 0), u.rot);
                he.addRay(u.pos, a, r.length * .5, 16711680, 0),
                he.addRay(u.pos, n.perp(a), r.width * .5, 65280, 0);
                const l = ve.getBridgeOverlapCollider(u.type, u.pos, u.rot, u.scale);
                he.addCollider(l, 7799039, 0)
            }
        }
        function Da(u, e, t) {
            const i = e - u
                , r = i * t;
            return Math.abs(r) < .001 ? i : r
        }
        class La {
            __id;
            __type;
            active;
            sprites = [];
            particleEmitters = [];
            soundEmitters = [];
            isNew;
            residue;
            ceilingDead;
            ceilingDamaged;
            playedCeilingDeadFx;
            playedSolvedPuzzleFx;
            hasPuzzle;
            puzzleErrSeqModified;
            puzzleErrSeq;
            puzzleSolved;
            soundEmitterTicker;
            type;
            pos;
            ori;
            rot;
            scale;
            layer;
            occupied;
            imgs = [];
            zIdx;
            bounds;
            ceiling;
            surfaces;
            _0x113() {
                this.isNew = !1,
                this.residue = null,
                this.ceilingDead = !1,
                this.ceilingDamaged = !1,
                this.playedCeilingDeadFx = !1,
                this.playedSolvedPuzzleFx = !1,
                this.hasPuzzle = !1,
                this.puzzleErrSeqModified = !1,
                this.puzzleErrSeq = 0,
                this.puzzleSolved = !1,
                this.soundEmitterTicker = 0
            }
            _0x60() {
                for (let e = 0; e < this.sprites.length; e++) {
                    const t = this.sprites[e];
                    t.active = !1,
                    t.sprite.visible = !1,
                    t.sprite.parent?.removeChild(t.sprite),
                    t.sprite.removeChildren()
                }
                for (let e = 0; e < this.particleEmitters.length; e++)
                    this.particleEmitters[e].stop();
                this.particleEmitters = [];
                for (let e = 0; e < this.soundEmitters.length; e++)
                    this.soundEmitters[e].instance?.stop();
                this.soundEmitters = []
            }
            allocSprite() {
                for (let t = 0; t < this.sprites.length; t++) {
                    const i = this.sprites[t];
                    if (!i.active)
                        return i.active = !0,
                        i.sprite
                }
                const e = new ee;
                return e.anchor.set(.5, .5),
                this.sprites.push({
                    active: !0,
                    sprite: e
                }),
                e
            }
            _0x119(e, t, i, r) {
                t && (this.type = e.type,
                this.pos = n.copy(e.pos),
                this.ori = e.ori,
                this.rot = z.oriToRad(e.ori),
                this.scale = 1,
                this.layer = e.layer),
                this.ceilingDead = e.ceilingDead,
                this.ceilingDamaged = e.ceilingDamaged,
                this.occupied = e.occupied,
                this.hasPuzzle = e.hasPuzzle,
                this.hasPuzzle && (this.puzzleErrSeqModified = e.puzzleErrSeq != this.puzzleErrSeq,
                this.puzzleSolved = e.puzzleSolved,
                this.puzzleErrSeq = e.puzzleErrSeq);
                const a = re[this.type];
                if (i) {
                    this.isNew = !0,
                    this.playedCeilingDeadFx = a.ceiling.destroy !== void 0 && r.map.deadCeilingIds.includes(this.__id),
                    this.playedSolvedPuzzleFx = this.hasPuzzle && r.map.solvedPuzzleIds.includes(this.__id);
                    const l = h => {
                        const p = h.pos || n.create(0, 0)
                            , w = z.oriToRad(h.rot || 0)
                            , f = this.allocSprite();
                        h.sprite && h.sprite != "none" ? f.texture = H.from(h.sprite) : f.texture = H.EMPTY,
                        f.tint = h.tint;
                        const S = r.map.getMapDef().biome.valueAdjust;
                        return S < 1 && (f.tint = g.adjustValue(f.tint, S)),
                        f.posOffset = n.rotate(p, this.rot),
                        f.rotOffset = w,
                        f.imgAlpha = h.alpha,
                        f.alpha = f.imgAlpha,
                        f.defScale = h.scale,
                        f.mirrorY = !!h.mirrorY,
                        f.mirrorX = !!h.mirrorX,
                        f.visible = !0,
                        f
                    }
                    ;
                    this.bounds = U.transform(ve.getBoundingCollider(this.type), this.pos, this.rot, this.scale),
                    this.zIdx = a.zIdx || 0,
                    this.surfaces = [];
                    for (let h = 0; h < a.floor.surfaces.length; h++) {
                        const p = a.floor.surfaces[h]
                            , w = {
                            type: p.type,
                            data: p.data || {},
                            colliders: []
                        };
                        for (let f = 0; f < p.collision.length; f++)
                            w.colliders.push(U.transform(p.collision[f], this.pos, this.rot, this.scale));
                        this.surfaces.push(w)
                    }
                    const s = Object.assign({
                        dist: 5.5,
                        width: 2.75,
                        linger: 0,
                        fadeRate: 12
                    }, a.ceiling.vision);
                    this.ceiling = {
                        zoomRegions: [],
                        vision: s,
                        visionTicker: 0,
                        fadeAlpha: 1
                    };
                    for (let h = 0; h < a.ceiling.zoomRegions.length; h++) {
                        const p = a.ceiling.zoomRegions[h];
                        this.ceiling.zoomRegions?.push({
                            zoomIn: p.zoomIn ? U.transform(p.zoomIn, this.pos, this.rot, this.scale) : null,
                            zoomOut: p.zoomOut ? U.transform(p.zoomOut, this.pos, this.rot, this.scale) : null
                        })
                    }
                    this.imgs = [];
                    for (let h = 0; h < a.floor.imgs.length; h++)
                        this.imgs.push({
                            sprite: l(a.floor.imgs[h]),
                            isCeiling: !1,
                            zOrd: this.zIdx,
                            zIdx: this.__id * 100 + h
                        });
                    for (let h = 0; h < a.ceiling.imgs.length; h++) {
                        const p = a.ceiling.imgs[h];
                        this.imgs.push({
                            sprite: l(p),
                            isCeiling: !0,
                            removeOnDamaged: !!p.removeOnDamaged,
                            zOrd: 750 - this.zIdx,
                            zIdx: this.__id * 100 + h
                        })
                    }
                    const m = a.occupiedEmitters || [];
                    for (let h = 0; h < m.length; h++) {
                        const p = m[h]
                            , w = p.rot !== void 0 ? p.rot : 0
                            , f = this.rot + w;
                        let S = n.add(this.pos, n.rotate(p.pos, f));
                        const x = p.dir || n.create(1, 0);
                        let y = n.rotate(x, f)
                            , P = p.scale
                            , C = null;
                        if (p.parentToCeiling) {
                            let b = -1;
                            for (let M = 0; M < this.imgs.length; M++)
                                this.imgs[M].isCeiling && (b = M);
                            if (b >= 0) {
                                const M = this.imgs[b];
                                C = M.sprite,
                                S = n.mul(p.pos, 32),
                                S.y *= -1,
                                y = n.rotate(n.create(1, 0), p.rot),
                                P = 1 / M.sprite.defScale
                            }
                        }
                        const k = r.particleBarn.addEmitter(p.type, {
                            pos: S,
                            dir: y,
                            scale: P,
                            layer: p.layer,
                            parent: C
                        });
                        this.particleEmitters.push(k)
                    }
                    const d = a.soundEmitters || [];
                    for (let h = 0; h < d.length; h++) {
                        const p = d[h]
                            , w = n.add(this.pos, n.rotate(p.pos, this.rot));
                        this.soundEmitters.push({
                            instance: null,
                            sound: p.sound,
                            channel: p.channel,
                            pos: w,
                            range: p.range,
                            falloff: p.falloff,
                            volume: p.volume
                        })
                    }
                }
            }
            _0x62(e, t, i, r, a, l, s, m) {
                if (this.hasPuzzle) {
                    const f = re[this.type];
                    if (this.puzzleErrSeqModified && (this.puzzleErrSeqModified = !1,
                    !this.isNew)) {
                        let S = this
                            , x = n.length(n.sub(l._0x63, S.pos));
                        const y = t._0x53._0x89();
                        for (let P = 0; P < y.length; P++) {
                            const C = y[P];
                            if (C.active && C.isPuzzlePiece && C.parentBuildingId == this.__id) {
                                const k = n.length(n.sub(l._0x63, C.pos));
                                k < x && (S = C,
                                x = k)
                            }
                        }
                        r.playSound(f.puzzle?.sound.fail, {
                            channel: "sfx",
                            soundPos: S.pos,
                            layer: S.layer,
                            filter: "muffled"
                        })
                    }
                    this.puzzleSolved && !this.playedSolvedPuzzleFx && (t.solvedPuzzleIds.push(this.__id),
                    this.playedSolvedPuzzleFx = !0,
                    !this.isNew && f.puzzle?.sound.complete != "none" && r.playSound(f.puzzle?.sound.complete, {
                        channel: "sfx",
                        soundPos: this.pos,
                        layer: this.layer,
                        filter: "muffled"
                    }))
                }
                if (this.ceilingDead && !this.playedCeilingDeadFx && (t.deadCeilingIds.push(this.__id),
                this.playedCeilingDeadFx = !0,
                this.isNew || this.destroyCeilingFx(i, r)),
                this.isNew = !1,
                this.ceilingDead && !this.residue) {
                    const f = re[this.type];
                    if (f.ceiling.destroy?.residue) {
                        const S = this.allocSprite();
                        S.texture = H.from(f.ceiling.destroy.residue),
                        S.position.set(0, 0),
                        S.scale.set(1, 1),
                        S.rotation = 0,
                        S.tint = 16777215,
                        S.visible = !0,
                        this.imgs[0].sprite.addChild(S),
                        this.residue = S
                    }
                }
                this.ceiling.visionTicker -= e;
                const d = this.ceiling.vision;
                let h = !1;
                for (let f = 0; f < this.ceiling.zoomRegions.length; f++) {
                    const S = this.ceiling.zoomRegions[f].zoomIn;
                    if (S && (this.layer == l.layer || l.layer & 2) && it.scanCollider(S, t._0x53._0x89(), l._0x63, l.layer, .5, d.width * 2, d.dist, 5)) {
                        h = !0;
                        break
                    }
                }
                this.ceilingDead && (h = !0),
                h && (this.ceiling.visionTicker = d.linger + 1e-4),
                l.noCeilingRevealTicker > 0 && !this.ceilingDead && (this.ceiling.visionTicker = 0);
                const p = this.ceiling.visionTicker > 0
                    , w = Da(this.ceiling.fadeAlpha, p ? 0 : 1, e * (p ? 12 : d?.fadeRate));
                this.ceiling.fadeAlpha += w,
                h && l.noCeilingRevealTicker <= 0 && l.layer & 2 && !g.sameLayer(l.layer, this.layer) && (this.ceiling.fadeAlpha = 0);
                for (let f = 0; f < this.particleEmitters.length; f++)
                    this.particleEmitters[f].enabled = this.occupied;
                if (this.soundEmitterTicker += e,
                this.soundEmitterTicker > .1) {
                    this.soundEmitterTicker = 0;
                    for (let f = 0; f < this.soundEmitters.length; f++) {
                        const S = this.soundEmitters[f];
                        if (!S.instance && r.isSoundLoaded(S.sound, S.channel) && (S.instance = r.playSound(S.sound, {
                            channel: S.channel,
                            loop: !0,
                            forceStart: !0,
                            startSilent: !0
                        })),
                        S.instance) {
                            const x = n.sub(m._0x63, S.pos)
                                , y = n.length(x)
                                , P = z.remap(y, S.range.min, S.range.max, 1, 0)
                                , C = Math.pow(P, S.falloff)
                                , k = z.lerp(this.ceiling.fadeAlpha, 1, .25);
                            let b = r.baseVolume * r.getTypeVolume("sound") * S.volume * C * k;
                            g.sameAudioLayer(this.layer, l.layer) || (b = 0),
                            b < .003 && (b = 0),
                            S.instance.volume = b
                        }
                    }
                }
                for (let f = 0; f < this.imgs.length; f++) {
                    const S = this.imgs[f]
                        , x = S.isCeiling ? this.ceiling.fadeAlpha : 1;
                    this.positionSprite(S.sprite, x, m),
                    S.removeOnDamaged && this.ceilingDamaged && (S.sprite.visible = !this.ceilingDamaged);
                    let y = this.layer;
                    S.isCeiling && (this.layer == l.layer || l.layer & 2 && this.layer == 1) && (y |= 2),
                    s.addPIXIObj(S.sprite, y, S.zOrd, S.zIdx)
                }
            }
            isInsideCeiling(e) {
                for (let t = 0; t < this.ceiling.zoomRegions.length; t++) {
                    const i = this.ceiling.zoomRegions[t].zoomIn;
                    if (i && U.intersect(i, e))
                        return !0
                }
                return !1
            }
            getDistanceToBuilding(e, t) {
                let i = t;
                for (let r = 0; r < this.ceiling.zoomRegions.length; r++) {
                    const a = this.ceiling.zoomRegions[r].zoomIn;
                    if (a) {
                        const l = U.intersectCircle(a, e, t);
                        l && (i = z.clamp(t - l.pen, 0, i))
                    }
                }
                return i
            }
            destroyCeilingFx(e, t) {
                const i = re[this.type].ceiling.destroy
                    , r = this.surfaces[0];
                for (let a = 0; a < r.colliders.length; a++) {
                    const l = U.toAabb(r.colliders[a]);
                    for (let s = 0; s < i.particleCount; s++) {
                        const m = n.create(g.random(l.min.x, l.max.x), g.random(l.min.y, l.max.y))
                            , d = n.mul(n.randomUnit(), g.random(0, 15));
                        e.addParticle(i.particle, this.layer, m, d)
                    }
                    break
                }
                t.playSound(i.sound || "ceiling_break_01", {
                    channel: "sfx",
                    soundPos: this.pos
                })
            }
            positionSprite(e, t, i) {
                const r = i._0x105(n.add(this.pos, e.posOffset))
                    , a = i._0x106(this.scale * e.defScale);
                e.position.set(r.x, r.y),
                e.scale.set(a, a),
                e.mirrorY && (e.scale.y *= -1),
                e.mirrorX && (e.scale.x *= -1),
                e.rotation = -this.rot + e.rotOffset,
                e.alpha = e.imgAlpha * t
            }
            render(e, t, i) {
                if (_.debug && i === this.layer && (t.buildings?.bounds && Wi(this),
                t?.bridge && Hi(this),
                t.buildings?.ceiling))
                    for (let r = 0; r < this.ceiling.zoomRegions.length; r++) {
                        const a = this.ceiling.zoomRegions[r];
                        a.zoomIn && he.addCollider(a.zoomIn, 65280, 0),
                        a.zoomOut && he.addCollider(a.zoomOut, 255, 0)
                    }
            }
        }
        class be {
            _0x109 = [];
            _0x110 = 0;
            _0x111;
            constructor(e) {
                this._0x111 = {
                    type: e
                },
                Ri(e !== void 0)
            }
            _0x112() {
                let e = null;
                for (let t = 0; t < this._0x109.length; t++)
                    if (!this._0x109[t].active) {
                        e = this._0x109[t];
                        break
                    }
                return e || (e = new this._0x111.type,
                this._0x109.push(e)),
                e.active = !0,
                e._0x113(),
                this._0x110++,
                e
            }
            _0x60(e) {
                if (e._0x60(),
                e.active = !1,
                this._0x110--,
                this._0x109.length > 128 && this._0x110 < this._0x109.length / 2) {
                    const t = [];
                    for (let i = 0; i < this._0x109.length; i++)
                        this._0x109[i].active && t.push(this._0x109[i]);
                    this._0x109 = t
                }
            }
            _0x89() {
                return this._0x109
            }
        }
        class Xi {
            _0x114 = {};
            _0x115 = {};
            _0x116 = 0;
            _0x57(e, t) {
                this._0x115[e] = t
            }
            _0x117(e) {
                return this._0x114[e]
            }
            _0x118(e, t) {
                const i = this._0x117(e);
                if (!i) {
                    const r = {
                        id: e,
                        ids: Object.keys(this._0x114),
                        stream: t._view._view
                    };
                    return console.error("objectPoolErr", `getTypeById${JSON.stringify(r)}`),
                    ce.Invalid
                }
                return i.__type
            }
            _0x80(e, t, i, r) {
                let a = this._0x117(t)
                    , l = !1;
                return a === void 0 && (a = this._0x115[e]._0x112(),
                a.__id = t,
                a.__type = e,
                this._0x114[t] = a,
                this._0x116++,
                l = !0),
                a._0x119(i, !0, l, r),
                a
            }
            _0x81(e, t, i) {
                const r = this._0x117(e);
                r ? r._0x119(t, !1, !1, i) : console.error("updateObjPart, missing object", e)
            }
            _0x79(e) {
                const t = this._0x117(e);
                t === void 0 ? console.error("deleteObj, missing object", e) : (this._0x115[t.__type]._0x60(t),
                delete this._0x114[e])
            }
        }
        class Aa {
            __id;
            __type;
            active;
            sprite = new ee;
            isNew;
            smokeEmitter;
            img;
            type;
            layer;
            healthT;
            dead;
            isSkin;
            rot;
            scale;
            pos;
            imgMirrorX;
            imgMirrorY;
            exploded;
            collidable;
            destructible;
            height;
            isWall;
            isWindow;
            isBush;
            isDoor;
            isButton;
            isPuzzlePiece;
            parentBuildingId;
            button;
            door;
            imgScale;
            explodeParticle;
            skinPlayerId;
            collider;
            constructor() {
                this.sprite.anchor.set(.5, .5),
                this.sprite.visible = !1
            }
            _0x113() {
                this.isNew = !1,
                this.smokeEmitter = null,
                this.sprite.visible = !1,
                this.img = ""
            }
            _0x60() {
                this.sprite.visible = !1,
                this.sprite.parent?.removeChild(this.sprite),
                this.door?.casingSprite && (this.door.casingSprite.destroy(),
                this.door.casingSprite = null),
                this.smokeEmitter && (this.smokeEmitter.stop(),
                this.smokeEmitter = null)
            }
            _0x119(e, t, i, r) {
                t && (this.type = e.type,
                this.layer = e.layer,
                this.healthT = e.healthT,
                this.dead = e.dead,
                this.isSkin = e.isSkin,
                this.isSkin && (this.skinPlayerId = e.skinPlayerId));
                const a = re[this.type];
                if (this.pos = n.copy(e.pos),
                this.rot = z.oriToRad(e.ori),
                this.scale = e.scale,
                this.imgScale = a.img.scale,
                this.imgMirrorY = a.img.mirrorY,
                this.imgMirrorX = a.img.mirrorX,
                this.collider = U.transform(a.collision, this.pos, this.rot, this.scale),
                i) {
                    if (this.isNew = !0,
                    this.exploded = r.map.deadObstacleIds.includes(this.__id),
                    this.explodeParticle = a.explodeParticle,
                    this.collidable = a.collidable && !this.isSkin,
                    this.destructible = a.destructible,
                    this.height = a.height,
                    this.isWall = !!a.isWall,
                    this.isWindow = !!a.isWindow,
                    this.isBush = !!a.isBush,
                    this.isDoor = a.door !== void 0,
                    this.isDoor) {
                        this.door = {
                            openOneWay: a.door?.openOneWay,
                            closedPos: n.copy(e.pos),
                            autoOpen: a.door?.autoOpen,
                            interactionRad: a.door?.interactionRad,
                            interpSpeed: a.door?.openSpeed,
                            interpPos: n.copy(e.pos),
                            interpRot: z.oriToRad(e.ori),
                            seq: e.door?.seq,
                            seqOld: e.door?.seq,
                            open: e.door?.open,
                            wasOpen: e.door?.open,
                            locked: e.door?.locked,
                            casingSprite: null
                        };
                        const d = a.door?.casingImg;
                        if (d !== void 0) {
                            let h = d.pos || n.create(0, 0);
                            h = n.rotate(h, this.rot + Math.PI * .5);
                            const p = new ee;
                            p.texture = H.from(d.sprite),
                            p.anchor.set(.5, .5),
                            p.posOffset = h,
                            p.imgScale = d.scale,
                            p.tint = d.tint,
                            p.alpha = d.alpha,
                            p.visible = !0,
                            this.door.casingSprite = p
                        }
                    }
                    this.isButton = a.button !== void 0,
                    this.isButton && (this.button = {
                        interactionRad: a.button?.interactionRad,
                        interactionText: a.button?.interactionText || "game-use",
                        seq: e.button?.seq,
                        seqOld: e.button?.seq
                    }),
                    this.isPuzzlePiece = e.isPuzzlePiece,
                    this.parentBuildingId = this.isPuzzlePiece ? e.parentBuildingId : 0
                }
                if (this.isDoor && t) {
                    this.door.canUse = e.door?.canUse,
                    this.door.open = e.door?.open,
                    this.door.seq = e.door?.seq;
                    const d = n.rotate(n.create(a.door?.slideOffset, 0), this.rot + Math.PI * .5);
                    this.door.closedPos = e.door?.open ? n.add(e.pos, d) : n.copy(e.pos)
                }
                if (this.isButton && t && (this.button.onOff = e.button?.onOff,
                this.button.canUse = e.button?.canUse,
                this.button.seq = e.button?.seq),
                a.explosion !== void 0 && !this.smokeEmitter && e.healthT < .5 && !e.dead) {
                    const d = n.normalize(n.create(1, 1));
                    this.smokeEmitter = r.particleBarn.addEmitter("smoke_barrel", {
                        pos: this.pos,
                        dir: d,
                        layer: this.layer
                    })
                }
                let l = !1
                    , s = this.dead ? a.img.residue : a.img.sprite;
                if (this.isButton && this.button.onOff && !this.dead && a.button?.useImg ? s = a.button.useImg : this.isButton && !this.button.canUse && a.button?.offImg && (s = a.button.offImg),
                s != this.img) {
                    let d = n.create(.5, .5);
                    this.isDoor && (d = a.door?.spriteAnchor);
                    const h = s !== void 0;
                    h || this.sprite.parent?.removeChild(this.sprite),
                    h && (this.sprite.texture = s == "none" || !s ? H.EMPTY : H.from(s),
                    this.sprite.anchor.set(d.x, d.y),
                    this.sprite.tint = a.img.tint,
                    this.sprite.imgAlpha = this.dead ? .75 : a.img.alpha,
                    this.sprite.zOrd = a.img.zIdx,
                    this.sprite.zIdx = Math.floor(this.scale * 1e3) * 65535 + this.__id,
                    this.sprite.alpha = this.sprite.imgAlpha,
                    l = !0),
                    this.sprite.visible = h,
                    this.img = s
                }
                const m = r.map.getMapDef().biome.valueAdjust;
                l && m < 1 && (this.sprite.tint = g.adjustValue(this.sprite.tint, m))
            }
            getInteraction() {
                return this.isButton && this.button.canUse ? {
                    rad: this.button.interactionRad,
                    action: this.button.interactionText,
                    object: `game-${this.type}`
                } : this.isDoor && this.door.canUse && !this.door.autoOpen ? {
                    rad: this.door.interactionRad,
                    action: this.door.open ? "game-close-door" : "game-open-door",
                    object: ""
                } : null
            }
            update(e, t, i, r, a, l, s) {
                if (this.isButton) {
                    const m = this.button;
                    if (m.seq != m.seqOld) {
                        const d = re[this.type];
                        if (d.button?.useParticle) {
                            const p = U.toAabb(this.collider)
                                , w = n.mul(n.sub(p.max, p.min), .5)
                                , f = n.add(p.min, w)
                                , S = n.mul(n.randomUnit(), g.random(5, 15));
                            r.addParticle(d.button.useParticle, this.layer, f, S)
                        }
                        const h = this.button.onOff ? d.button?.sound.on : d.button?.sound.off;
                        h && a.playSound(h, {
                            channel: "sfx",
                            soundPos: this.pos,
                            layer: this.layer,
                            filter: "muffled"
                        })
                    }
                    m.seqOld = m.seq
                }
                if (this.isDoor) {
                    const m = this.door
                        , d = m.interpSpeed
                        , h = n.sub(this.pos, m.interpPos)
                        , p = n.length(h);
                    let w = d * e;
                    p < w && (w = p);
                    const f = p > 1e-4 ? n.div(h, p) : n.create(1, 0);
                    m.interpPos = n.add(m.interpPos, n.mul(f, w));
                    const S = Math.PI * m.interpSpeed
                        , x = z.angleDiff(m.interpRot, this.rot);
                    let y = z.sign(x) * S * e;
                    if (Math.abs(x) < Math.abs(y) && (y = x),
                    m.interpRot += y,
                    m.seq != m.seqOld) {
                        const C = re[this.type].door?.sound.change || "";
                        C != "" && a.playSound(C, {
                            channel: "sfx",
                            soundPos: this.pos,
                            layer: this.layer,
                            filter: "muffled"
                        }),
                        m.seqOld = m.seq
                    }
                    if (m.open != m.wasOpen) {
                        const P = re[this.type]
                            , C = m.open ? P.door?.sound.open : P.door?.sound.close;
                        a.playSound(C, {
                            channel: "sfx",
                            soundPos: this.pos,
                            layer: this.layer,
                            filter: "muffled"
                        }),
                        m.wasOpen = m.open
                    }
                }
                if (this.dead && !this.exploded && (t.deadObstacleIds.push(this.__id),
                this.exploded = !0,
                this.smokeEmitter && (this.smokeEmitter.stop(),
                this.smokeEmitter = null),
                !this.isNew)) {
                    const m = re[this.type]
                        , d = U.toAabb(this.collider)
                        , h = n.mul(n.sub(d.max, d.min), .5)
                        , p = n.add(d.min, h)
                        , w = Math.floor(g.random(5, 11));
                    for (let f = 0; f < w; f++) {
                        const S = n.mul(n.randomUnit(), g.random(5, 15))
                            , x = Array.isArray(this.explodeParticle) ? this.explodeParticle[Math.floor(Math.random() * this.explodeParticle.length)] : this.explodeParticle;
                        r.addParticle(x, this.layer, p, S)
                    }
                    a.playSound(m.sound?.explode, {
                        channel: "sfx",
                        soundPos: p,
                        layer: this.layer,
                        filter: "muffled"
                    })
                }
                if (this.smokeEmitter) {
                    const m = this.isSkin ? .3 : .5;
                    this.smokeEmitter.pos = n.copy(this.pos),
                    this.smokeEmitter.enabled = !this.dead && this.healthT < m
                }
                if (this.sprite.visible && this.img) {
                    let m = this.dead ? 5 : this.sprite.zOrd
                        , d = this.sprite.zIdx
                        , h = this.layer;
                    if (!this.dead && m >= 50 && this.layer == 0 && l.layer == 0 && (m += 100,
                    h |= 2),
                    !this.dead && this.isSkin) {
                        const p = i.getPlayerById(this.skinPlayerId);
                        p && (m = z.max(z.max(m, p.renderZOrd), 21),
                        p.renderLayer != 0 && (h = p.renderLayer,
                        m = p.renderZOrd),
                        d = p.renderZIdx + 262144)
                    }
                    s.addPIXIObj(this.sprite, h, m, d),
                    this.isDoor && this.door.casingSprite && s.addPIXIObj(this.door.casingSprite, h, m + 1, d)
                }
                this.isNew = !1
            }
            render(e, t, i) {
                const r = this.isDoor ? this.door.interpPos : this.pos
                    , a = this.isDoor ? this.door.interpRot : this.rot
                    , l = this.scale
                    , s = e._0x105(r)
                    , m = e._0x106(l * this.imgScale);
                if (this.sprite.position.set(s.x, s.y),
                this.sprite.scale.set(m, m),
                this.imgMirrorY && (this.sprite.scale.y *= -1),
                this.imgMirrorX && (this.sprite.scale.x *= -1),
                this.sprite.rotation = -a,
                this.isDoor && this.door?.casingSprite) {
                    const d = e._0x105(n.add(this.door.closedPos, this.door.casingSprite.posOffset))
                        , h = e._0x106(l * this.door.casingSprite.imgScale);
                    this.door.casingSprite.position.set(d.x, d.y),
                    this.door.casingSprite.scale.set(h, h),
                    this.door.casingSprite.rotation = -a,
                    this.door.casingSprite.visible = !this.dead
                }
                _.debug && t.obstacles && g.sameLayer(i, this.layer) && he.addCollider(this.collider, 16711680, 0)
            }
        }
        class Ea {
            __id;
            __type;
            active;
            soundTransitionT;
            soundEnabledT;
            type;
            layer;
            pos;
            rot;
            scale;
            interiorSoundAlt;
            interiorSoundEnabled;
            aabb;
            layers;
            stairs;
            mask;
            _0x113() {
                this.soundTransitionT = 0
            }
            _0x60() {}
            _0x119(e, t, i, r) {
                if (t) {
                    this.type = e.type,
                    this.layer = 0,
                    this.pos = n.copy(e.pos),
                    this.rot = z.oriToRad(e.ori),
                    this.scale = 1,
                    this.interiorSoundAlt = e.interiorSoundAlt,
                    this.interiorSoundEnabled = e.interiorSoundEnabled,
                    i && (this.soundTransitionT = this.interiorSoundAlt ? 1 : 0,
                    this.soundEnabledT = this.interiorSoundEnabled ? 1 : 0),
                    this.aabb = U.transform(ve.getBoundingCollider(this.type), this.pos, this.rot, this.scale);
                    const a = re[this.type];
                    this.layers = [];
                    for (let l = 0; l < a.layers.length; l++) {
                        const s = a.layers[l]
                            , m = e.layerObjIds[l]
                            , d = s?.inheritOri === void 0 || s.inheritOri
                            , h = s.underground !== void 0 ? s.underground : l == 1
                            , p = n.add(this.pos, s.pos)
                            , w = z.oriToRad(d ? e.ori + s.ori : s.ori)
                            , f = U.transform(ve.getBoundingCollider(s.type), p, w, 1);
                        this.layers.push({
                            objId: m,
                            collision: f,
                            underground: h
                        })
                    }
                    this.stairs = [];
                    for (let l = 0; l < a.stairs.length; l++) {
                        const s = a.stairs[l]
                            , m = U.transform(s.collision, this.pos, this.rot, this.scale)
                            , d = n.rotate(s.downDir, this.rot)
                            , h = xe.splitAabb(m, d);
                        this.stairs.push({
                            collision: m,
                            center: n.add(m.min, n.mul(n.sub(m.max, m.min), .5)),
                            downDir: d,
                            downAabb: U.createAabb(h[0].min, h[0].max),
                            upAabb: U.createAabb(h[1].min, h[1].max),
                            noCeilingReveal: !!s.noCeilingReveal,
                            lootOnly: !!s.lootOnly
                        })
                    }
                    this.mask = [];
                    for (let l = 0; l < a.mask.length; l++)
                        this.mask.push(U.transform(a.mask[l], this.pos, this.rot, this.scale));
                    r.renderer.layerMaskDirty = !0
                }
            }
            update(e, t, i, r) {
                re[this.type].interiorSound && this.updateInteriorSounds(e, t, i, r)
            }
            updateInteriorSounds(e, t, i, r) {
                const a = re[this.type];
                U.createCircle(i._0x63, .001),
                t._0x54._0x89();
                const l = this.layers.length > 0 ? t.getBuildingById(this.layers[0].objId) : null
                    , s = this.layers.length > 1 ? t.getBuildingById(this.layers[1].objId) : null
                    , m = a.interiorSound?.outsideMaxDist !== void 0 ? a.interiorSound.outsideMaxDist : 10
                    , d = a.interiorSound?.outsideVolume !== void 0 ? a.interiorSound.outsideVolume : 0
                    , h = a.interiorSound?.undergroundVolume !== void 0 ? a.interiorSound.undergroundVolume : 1;
                let p = 0
                    , w = 0;
                if (i.layer != 1) {
                    if (l) {
                        const C = l.getDistanceToBuilding(i._0x63, m)
                            , k = z.remap(C, m, 0, 0, 1)
                            , b = i.layer & 2
                            , M = l.ceiling.fadeAlpha;
                        p = k * (1 - M),
                        w = k * M * (b ? h : d)
                    }
                } else if (s) {
                    const C = s.getDistanceToBuilding(i._0x63, m)
                        , k = z.remap(C, m, 0, 0, 1);
                    p = 0,
                    w = k * h
                }
                const f = a.interiorSound?.transitionTime !== void 0 ? a.interiorSound.transitionTime : 1;
                this.interiorSoundAlt && (this.soundTransitionT = z.clamp(this.soundTransitionT + e / f, 0, 1));
                const S = Math.abs(this.soundTransitionT - .5) * 2;
                this.interiorSoundEnabled || (this.soundEnabledT = z.clamp(this.soundEnabledT - e * .5, 0, 1));
                const x = this.soundTransitionT > .5 ? a.interiorSound?.soundAlt : a.interiorSound?.sound
                    , y = r.getTrack("interior_0");
                y.sound = x,
                y.filter = "",
                y.weight = x ? p * S * this.soundEnabledT : 0;
                const P = r.getTrack("interior_1");
                P.sound = x,
                P.filter = a.interiorSound?.filter,
                P.weight = x ? w * S * this.soundEnabledT : 0
            }
            render(e, t, i) {
                if (_.debug && (t.structures?.bounds && Wi(this),
                t?.bridge && Hi(this),
                t.structures?.waterEdge && Pa(this),
                t.structures?.stairs))
                    for (let r = 0; r < this.stairs.length; r++)
                        he.addCollider(this.stairs[r].downAabb, 255, 0),
                        he.addCollider(this.stairs[r].upAabb, 65280, 0)
            }
            insideStairs(e) {
                for (let t = 0; t < this.stairs.length; t++)
                    if (U.intersect(this.stairs[t]?.collision, e))
                        return !0;
                return !1
            }
            insideMask(e) {
                for (let t = 0; t < this.mask.length; t++)
                    if (U.intersect(this.mask[t], e))
                        return !0;
                return !1
            }
        }
        function Le(u, e, t) {
            u.moveTo(e.x, e.y),
            u.lineTo(t.x, t.y)
        }
        function Te(u, e) {
            let t = e[0];
            u.moveTo(t.x, t.y);
            for (let i = 1; i < e.length; ++i)
                t = e[i],
                u.lineTo(t.x, t.y);
            u.closePath()
        }
        function mi(u, e, t) {
            const i = e.max.x - e.min.x
                , r = e.max.y - e.min.y
                , a = z.max(e.offsetDist, .001)
                , l = e.roughness
                , s = Math.round(i * l / a)
                , m = Math.round(r * l / a)
                , d = g.seededRand(t);
            Te(u, xr(e, s, m, a, d))
        }
        class Zi {
            constructor(e) {
                this.decalBarn = e
            }
            display = {
                ground: new pe
            };
            mapName = "";
            mapDef = {};
            factionMode = !1;
            perkMode = !1;
            turkeyMode = !1;
            seed = 0;
            width = 0;
            height = 0;
            mapData = {
                places: [],
                objects: [],
                groundPatches: []
            };
            mapLoaded = !1;
            mapTexture = null;
            _0x53 = new be(Aa);
            _0x54 = new be(La);
            _0x55 = new be(Ea);
            deadObstacleIds = [];
            deadCeilingIds = [];
            solvedPuzzleIds = [];
            lootDropSfxIds = [];
            terrain = null;
            cameraEmitter = null;
            _0x60() {
                const e = this._0x54._0x89();
                for (let t = 0; t < e.length; t++)
                    e[t]._0x60();
                this.mapTexture?.destroy(!0),
                this.display.ground.destroy({
                    children: !0
                }),
                this.cameraEmitter?.stop(),
                this.cameraEmitter = null
            }
            resize(e, t) {
                this.renderMap(e, t)
            }
            loadMap(e, t, i, r) {
                this.mapName = e.mapName;
                const a = He[this.mapName];
                if (!a)
                    throw new Error(`Failed loading mapDef ${this.mapName}`);
                this.mapDef = g.cloneDeep(a),
                this.factionMode = !!this.mapDef.gameMode.factionMode,
                this.perkMode = !!this.mapDef.gameMode.perkMode,
                this.turkeyMode = !!this.mapDef.gameMode.turkeyMode,
                this.seed = e.seed,
                this.width = e.width,
                this.height = e.height,
                this.terrain = yr(this.width, this.height, e.shoreInset, e.grassInset, e.rivers, this.seed),
                this.mapData = {
                    places: e.places,
                    objects: e.objects,
                    groundPatches: e.groundPatches
                },
                this.mapLoaded = !0;
                const l = this.mapDef.biome.particles.camera;
                if (l) {
                    const s = n.normalize(n.create(1, -1));
                    this.cameraEmitter = r.addEmitter(l, {
                        pos: n.create(0, 0),
                        dir: s,
                        layer: 99999
                    })
                }
                this.display.ground.clear(),
                this.renderTerrain(this.display.ground, 2 / t._0x68, i, !1)
            }
            getMapDef() {
                if (!this.mapLoaded)
                    throw new Error("Map not loaded!");
                return this.mapDef
            }
            getMapTexture() {
                return this.mapTexture
            }
            _0x62(e, t, i, r, a, l, s, m, d, h) {
                const p = this._0x53._0x89();
                for (let f = 0; f < p.length; f++) {
                    const S = p[f];
                    S.active && (S.update(e, this, i, r, a, t, s),
                    S.render(m, h, t.layer))
                }
                const w = this._0x54._0x89();
                for (let f = 0; f < w.length; f++) {
                    const S = w[f];
                    S.active && (S._0x62(e, this, r, a, l, t, s, m),
                    S.render(m, h, t.layer))
                }
                for (let f = this._0x55._0x89(), S = 0; S < f.length; S++) {
                    const x = f[S];
                    x.active && (x.update(e, this, t, l),
                    x.render(m, h, t.layer))
                }
                if (this.cameraEmitter) {
                    this.cameraEmitter.pos = n.copy(m._0x63),
                    this.cameraEmitter.enabled = !0;
                    const f = 120
                        , S = t._0x65() * 2.5;
                    this.cameraEmitter.radius = z.min(S, f);
                    const x = this.cameraEmitter.radius
                        , y = x * x / (f * f);
                    this.cameraEmitter.rateMult = 1 / y;
                    const P = t.layer == 0 ? 1 : 0;
                    this.cameraEmitter.alpha = z.lerp(e * 6, this.cameraEmitter.alpha, P)
                }
            }
            renderTerrain(e, t, i, r) {
                const a = this.width
                    , l = this.height
                    , s = this.terrain
                    , m = {
                    x: 0,
                    y: 0
                }
                    , d = {
                    x: a,
                    y: 0
                }
                    , h = {
                    x: 0,
                    y: l
                }
                    , p = {
                    x: a,
                    y: l
                }
                    , w = this.mapDef.biome.colors
                    , f = this.mapData.groundPatches;
                e.beginFill(w.background),
                e.drawRect(-120, -120, a + 240, 120),
                e.drawRect(-120, l, a + 240, 120),
                e.drawRect(-120, -120, 120, l + 240),
                e.drawRect(a, -120, 120, l + 240),
                e.endFill(),
                e.beginFill(w.beach),
                Te(e, s?.shore),
                e.beginHole(),
                Te(e, s?.grass),
                e.endHole(),
                e.endFill(),
                i && (e.beginFill(w.grass),
                Te(e, s?.grass),
                e.endFill());
                for (let x = 0; x < f.length; x++) {
                    const y = f[x];
                    y.order == 0 && (!r || y.useAsMapShape) && (e.beginFill(y.color),
                    mi(e, y, this.seed),
                    e.endFill())
                }
                e.beginFill(w.riverbank);
                for (let x = 0; x < s.rivers.length; x++)
                    Te(e, s.rivers[x].shorePoly);
                e.endFill(),
                e.beginFill(w.water);
                for (let x = 0; x < s.rivers.length; x++)
                    Te(e, s.rivers[x].waterPoly);
                e.endFill(),
                e.beginFill(w.water),
                e.moveTo(h.x, h.y),
                e.lineTo(p.x, p.y),
                e.lineTo(d.x, d.y),
                e.lineTo(m.x, m.y),
                e.beginHole(),
                Te(e, s.shore),
                e.endHole(),
                e.closePath(),
                e.endFill();
                const S = e;
                S.lineStyle(t, 0, .15);
                for (let x = 0; x <= a; x += R.map.gridSize)
                    Le(S, {
                        x,
                        y: 0
                    }, {
                        x,
                        y: l
                    });
                for (let x = 0; x <= l; x += R.map.gridSize)
                    Le(S, {
                        x: 0,
                        y: x
                    }, {
                        x: a,
                        y: x
                    });
                S.lineStyle(t, 0, 0);
                for (let x = 0; x < f.length; x++) {
                    const y = f[x];
                    y.order == 1 && (!r || y.useAsMapShape) && (e.beginFill(y.color),
                    mi(e, y, this.seed),
                    e.endFill())
                }
            }
            _0x77(e) {
                const t = e._0x105(n.create(0, 0))
                    , i = e._0x105(n.create(1, 1))
                    , r = n.sub(i, t);
                this.display.ground.position.set(t.x, t.y),
                this.display.ground.scale.set(r.x, r.y)
            }
            getMinimapRender(e) {
                const t = re[e.type]
                    , i = t.type == "building" ? 750 + (t.zIdx || 0) : t.img.zIdx || 0;
                let r = [];
                if (t.map?.shapes !== void 0)
                    r = t.map?.shapes;
                else {
                    let a = null;
                    (a = t.type == "obstacle" ? t.collision : t.ceiling.zoomRegions.length > 0 && t.ceiling.zoomRegions[0].zoomIn ? t.ceiling.zoomRegions[0].zoomIn : ve.getBoundingCollider(e.type)) && r.push({
                        collider: U.copy(a),
                        scale: t.map?.scale || 1,
                        color: t.map?.color
                    })
                }
                return {
                    obj: e,
                    zIdx: i,
                    shapes: r
                }
            }
            renderMap(e, t) {
                if (this.mapLoaded) {
                    const i = new J
                        , r = new J
                        , a = this.mapDef.biome.colors
                        , l = this.mapData.places
                        , s = this.mapData.objects;
                    let m = _.screenHeight;
                    _.mobile && (_.isLandscape || (m = _.screenWidth),
                    m *= z.min(_.pixelRatio, 2));
                    const d = this.height / m
                        , h = new pe;
                    h.beginFill(a.grass),
                    h.drawRect(0, 0, this.width, this.height),
                    h.endFill(),
                    this.renderTerrain(h, d, t, !0);
                    const p = {
                        x: 0,
                        y: 0
                    }
                        , w = {
                        x: this.width,
                        y: 0
                    }
                        , f = {
                        x: 0,
                        y: this.height
                    }
                        , S = {
                        x: this.width,
                        y: this.height
                    };
                    h.lineStyle(d * 2, 0, 1),
                    Le(h, p, f),
                    Le(h, f, S),
                    Le(h, S, w),
                    Le(h, w, p),
                    h.position.y = this.height,
                    h.scale.y = -1,
                    i.addChild(h);
                    const x = [];
                    for (let C = 0; C < s.length; C++) {
                        const k = s[C];
                        x.push(this.getMinimapRender(k))
                    }
                    x.sort( (C, k) => C.zIdx - k.zIdx);
                    const y = new pe;
                    for (let C = 0; C < x.length; C++) {
                        const k = x[C]
                            , b = k.obj;
                        for (let M = 0; M < k.shapes.length; M++) {
                            const E = k.shapes[M]
                                , D = U.transform(E.collider, b.pos, z.oriToRad(b.ori), b.scale)
                                , L = E.scale !== void 0 ? E.scale : 1;
                            switch (y.beginFill(E.color, 1),
                            D.type) {
                            case U.Type.Circle:
                                y.drawCircle(D.pos.x, this.height - D.pos.y, D.rad * L);
                                break;
                            case U.Type.Aabb:
                                {
                                    let v = n.mul(n.sub(D.max, D.min), .5);
                                    const T = n.add(D.min, v);
                                    v = n.mul(v, L),
                                    y.drawRect(T.x - v.x, this.height - T.y - v.y, v.x * 2, v.y * 2),
                                    y.endFill()
                                }
                            }
                        }
                    }
                    i.addChild(y);
                    const P = new J;
                    for (let C = 0; C < l.length; C++) {
                        const k = l[C]
                            , b = new ur({
                            fontFamily: "Arial",
                            fontSize: _.mobile ? 20 : 22,
                            fontWeight: "bold",
                            fill: ["#ffffff"],
                            stroke: "#000000",
                            strokeThickness: 1,
                            dropShadow: !0,
                            dropShadowColor: "#000000",
                            dropShadowBlur: 1,
                            dropShadowAngle: Math.PI / 3,
                            dropShadowDistance: 1,
                            wordWrap: !1,
                            align: "center"
                        })
                            , M = new $e(k.name,b);
                        M.anchor.set(.5, .5),
                        M.x = k.pos.x * this.height / d,
                        M.y = k.pos.y * this.height / d,
                        M.alpha = .75,
                        P.addChild(M)
                    }
                    r.addChild(P),
                    this.mapTexture ? this.mapTexture.resize(m, m) : this.mapTexture = dr.create({
                        width: m,
                        height: m,
                        scaleMode: pr.LINEAR,
                        resolution: 1
                    }),
                    i.scale = new Et(m / this.height,m / this.height),
                    e.render(i, {
                        renderTexture: this.mapTexture,
                        clear: !0
                    }),
                    e.render(r, {
                        renderTexture: this.mapTexture,
                        clear: !1
                    }),
                    i.destroy({
                        children: !0,
                        texture: !0,
                        baseTexture: !0
                    }),
                    r.destroy({
                        children: !0,
                        texture: !0,
                        baseTexture: !0
                    })
                }
            }
            getGroundSurface(e, t) {
                const i = (h, p={}) => {
                    if (h == "water") {
                        const w = this.getMapDef().biome.colors;
                        p.waterColor = p.waterColor !== void 0 ? p.waterColor : w.water,
                        p.rippleColor = p.rippleColor !== void 0 ? p.rippleColor : w.waterRipple
                    }
                    return {
                        type: h,
                        data: p
                    }
                }
                    , r = this.decalBarn.decalPool._0x89();
                for (let h = 0; h < r.length; h++) {
                    const p = r[h];
                    if (p.active && p.surface && g.sameLayer(p.layer, t) && U.intersectCircle(p.collider, e, 1e-4))
                        return i(p.surface.type, p.surface.data)
                }
                let a = null
                    , l = 0;
                const s = t & 2
                    , m = this._0x54._0x89();
                for (let h = 0; h < m.length; h++) {
                    const p = m[h];
                    if (p.active && p.zIdx >= l && (p.layer == t || s) && (p.layer != 1 || !s))
                        for (let w = 0; w < p.surfaces.length; w++) {
                            const f = p.surfaces[w];
                            for (let S = 0; S < f.colliders.length; S++)
                                if (U.intersectCircle(f.colliders[S], e, 1e-4)) {
                                    l = p.zIdx,
                                    a = f;
                                    break
                                }
                        }
                }
                if (a)
                    return i(a.type, a.data);
                let d = !1;
                if (t != 1) {
                    const h = this.terrain?.rivers;
                    for (let p = 0; p < h.length; p++) {
                        const w = h[p];
                        if (xe.testPointAabb(e, w.aabb.min, w.aabb.max) && z.pointInsidePolygon(e, w.shorePoly) && (d = !0,
                        z.pointInsidePolygon(e, w.waterPoly)))
                            return i("water", {
                                river: w
                            })
                    }
                }
                return i(z.pointInsidePolygon(e, this.terrain?.grass) ? d ? this.mapDef.biome.sound.riverShore : "grass" : z.pointInsidePolygon(e, this.terrain?.shore) ? "sand" : "water")
            }
            isInOcean(e) {
                return !z.pointInsidePolygon(e, this.terrain?.shore)
            }
            distanceToShore(e) {
                return z.distToPolygon(e, this.terrain?.shore)
            }
            insideStructureStairs(e) {
                const t = this._0x55._0x89();
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    if (r.active && r.insideStairs(e))
                        return !0
                }
                return !1
            }
            getBuildingById(e) {
                const t = this._0x54._0x89();
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    if (r.active && r.__id == e)
                        return r
                }
                return null
            }
            insideStructureMask(e) {
                const t = this._0x55._0x89();
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    if (r.active && r.insideMask(e))
                        return !0
                }
                return !1
            }
            insideBuildingCeiling(e, t) {
                const i = this._0x54._0x89();
                for (let r = 0; r < i.length; r++) {
                    const a = i[r];
                    if (a.active && (!t || a.ceiling.visionTicker > 0 && !a.ceilingDead) && a.isInsideCeiling(e))
                        return !0
                }
                return !1
            }
        }
        class Ra {
            __id;
            __type;
            active;
            sprite = new ee;
            playedLandFx;
            landed;
            fallInstance;
            chuteDeployed;
            soundUpdateThrottle;
            pos;
            isNew;
            fallTicker;
            rad;
            constructor() {
                this.sprite.anchor.set(.5, .5),
                this.sprite.visible = !1
            }
            _0x113() {
                this.playedLandFx = !1,
                this.landed = !1,
                this.fallInstance = null,
                this.chuteDeployed = !1,
                this.soundUpdateThrottle = 0,
                this.pos = n.create(0, 0),
                this.isNew = !1,
                this.fallTicker = 0
            }
            _0x60() {
                this.fallInstance?.stop(),
                this.fallInstance = null,
                this.sprite.visible = !1
            }
            _0x119(e, t, i, r) {
                if (i) {
                    this.isNew = !0,
                    this.fallTicker = e.fallT * R.airdrop.fallTime;
                    const a = r.map.getMapDef().biome.airdrop.airdropImg;
                    this.sprite.texture = H.from(a)
                }
                t && (this.pos = n.copy(e.pos)),
                this.landed = e.landed
            }
        }
        class Oa {
            airdropPool = new be(Ra);
            _0x60() {
                const e = this.airdropPool._0x89();
                for (let t = 0; t < e.length; t++)
                    e[t]._0x60()
            }
            _0x62(e, t, i, r, a, l, s) {
                const m = this.airdropPool._0x89();
                for (let d = 0; d < m.length; d++) {
                    const h = m[d];
                    if (!h.active)
                        continue;
                    h.fallTicker += e;
                    const p = z.clamp(h.fallTicker / R.airdrop.fallTime, 0, 1);
                    let w = 0;
                    if ((g.sameLayer(w, t.layer) || t.layer & 2) && (!(t.layer & 2) || !r.insideStructureMask(U.createCircle(h.pos, 1))) && (w |= 2),
                    h.landed && !h.playedLandFx && (h.playedLandFx = !0,
                    !h.isNew)) {
                        for (let P = 0; P < 10; P++) {
                            const C = n.randomUnit();
                            a.addParticle("airdropSmoke", w, h.pos, C)
                        }
                        const x = r.getGroundSurface(h.pos, w);
                        if (x.type == "water")
                            for (let P = 0; P < 12; P++) {
                                const C = n.add(h.pos, n.mul(n.randomUnit(), g.random(4.5, 6)));
                                a.addRippleParticle(C, w, x.data.rippleColor).setDelay(P * .075)
                            }
                        const y = x.type == "water" ? "airdrop_crash_02" : "airdrop_crash_01";
                        s.playSound(y, {
                            channel: "sfx",
                            soundPos: h.pos,
                            layer: w,
                            filter: "muffled"
                        }),
                        s.stopSound(h.fallInstance),
                        h.fallInstance = null
                    }
                    !h.chuteDeployed && p <= .1 && (s.playSound("airdrop_chute_01", {
                        channel: "sfx",
                        soundPos: h.pos,
                        layer: w,
                        rangeMult: 1.75
                    }),
                    h.chuteDeployed = !0),
                    !h.landed && !h.fallInstance && (h.fallInstance = s.playSound("airdrop_fall_01", {
                        channel: "sfx",
                        soundPos: h.pos,
                        layer: w,
                        rangeMult: 1.75,
                        ignoreMinAllowable: !0,
                        offset: h.fallTicker
                    })),
                    h.fallInstance && h.soundUpdateThrottle < 0 ? (h.soundUpdateThrottle = .1,
                    s.updateSound(h.fallInstance, "sfx", h.pos, {
                        layer: w,
                        rangeMult: 1.75,
                        ignoreMinAllowable: !0
                    })) : h.soundUpdateThrottle -= e,
                    h.rad = z.lerp((1 - p) ** 1.1, 5, 12),
                    l.addPIXIObj(h.sprite, w, 1500, h.__id);
                    const f = i._0x105(h.pos)
                        , S = i._0x106(2 * h.rad / i._0x68);
                    h.sprite.position.set(f.x, f.y),
                    h.sprite.scale.set(S, S),
                    h.sprite.tint = 16776960,
                    h.sprite.alpha = 1,
                    h.sprite.visible = !h.landed,
                    h.isNew = !1
                }
            }
        }
        function ni(u, e, t, i) {
            const r = Math.atan2(i.y, i.x);
            return {
                p0: n.add(t, n.rotate(u, r)),
                p1: n.add(t, n.rotate(e, r))
            }
        }
        function Ba(u, e, t, i, r) {
            nt[u.bulletType].addFlare ? t.addFlare(u, i, r) : e.addBullet(u, i, r)
        }
        function Pt(u, e, t, i, r, a, l) {
            const s = Math.floor(g.random(1, 2));
            let m = n.mul(i, 9.5);
            for (let d = 0; d < s; d++)
                m = n.rotate(m, (Math.random() - .5) * Math.PI / 3),
                a.addParticle(u, r, t, m);
            l.playGroup(e, {
                channel: "hits",
                soundPos: t,
                layer: r,
                filter: "muffled"
            })
        }
        class Na {
            bullets = [];
            tracerColors = {};
            onMapLoad(e) {
                this.tracerColors = g.mergeDeep(R.tracerColors, e.getMapDef().biome.tracerColors)
            }
            addBullet(e, t, i) {
                let r = null;
                for (let S = 0; S < this.bullets.length; S++)
                    if (!this.bullets[S].alive && !this.bullets[S].collided) {
                        r = this.bullets[S];
                        break
                    }
                r || (r = {},
                r.alive = !1,
                r.container = new J,
                r.container.pivot.set(14.5, 0),
                r.container.visible = !1,
                r.bulletTrail = ee.from("player-bullet-trail-02.img"),
                r.bulletTrail.anchor.set(.5, .5),
                r.container.addChild(r.bulletTrail),
                this.bullets.push(r));
                const a = nt[e.bulletType]
                    , l = 1 + e.varianceT * a.variance
                    , s = z.remap(e.distAdjIdx, 0, 16, -1, 1);
                let m = a.distance / Math.pow(R.bullet.reflectDistDecay, e.reflectCount);
                e.clipDistance && (m = e.distance),
                r.alive = !0,
                r.isNew = !0,
                r.collided = !1,
                r.scale = 1,
                r.playerId = e.playerId,
                r.startPos = n.copy(e.pos),
                r.pos = n.copy(e.pos),
                r.dir = n.copy(e.dir),
                r.layer = e.layer,
                r.speed = a.speed * l,
                r.distance = m * l + s,
                r.damageSelf = a.shrapnel || e.reflectCount > 0,
                r.reflectCount = e.reflectCount,
                r.reflectObjId = e.reflectObjId,
                r.whizHeard = !1;
                const d = Math.atan2(r.dir.x, r.dir.y);
                r.container.rotation = d - Math.PI / 2,
                r.layer = e.layer;
                const h = t.getPlayerById(r.playerId);
                h && h.layer & 2 && (r.layer |= 2);
                let p = a.tracerWidth;
                e.trailSmall && (p *= .5),
                e.trailThick && (p *= 2),
                r.bulletTrail.scale.set(.8, p),
                r.tracerLength = a.tracerLength,
                r.suppressed = !!a.suppressed;
                const w = this.tracerColors[a.tracerColor];
                let f = w.regular;
                e.trailSaturated ? f = w.chambered || w.saturated : h?.surface?.data.isBright && (f = w.saturated),
                r.bulletTrail.tint = f,
                r.tracerAlphaRate = w.alphaRate,
                r.tracerAlphaMin = w.alphaMin,
                r.bulletTrail.alpha = 1,
                r.reflectCount > 0 && (r.bulletTrail.alpha *= .5),
                r.container.visible = !0,
                i.addPIXIObj(r.container, r.layer, 20)
            }
            _0x62(e, t, i, r, a, l, s, m) {
                const d = t.playerPool._0x89();
                for (let h = 0; h < this.bullets.length; h++) {
                    const p = this.bullets[h];
                    if (p.collided && (p.scale = z.max(p.scale - e * 6, 0),
                    p.scale <= 0 && (p.collided = !1,
                    p.container.visible = !1)),
                    p.alive) {
                        const w = p.distance - n.length(n.sub(p.startPos, p.pos))
                            , f = z.min(w, e * p.speed)
                            , S = n.copy(p.pos);
                        if (p.pos = n.add(p.pos, n.mul(p.dir, f)),
                        !a._0x73._0x85 && g.sameAudioLayer(a.layer, p.layer) && n.length(n.sub(r._0x63, p.pos)) < 7.5 && !p.whizHeard && p.playerId != a.__id && (m.playGroup("bullet_whiz", {
                            soundPos: p.pos,
                            fallOff: 4
                        }),
                        p.whizHeard = !0),
                        p.tracerAlphaRate && p.suppressed) {
                            const b = p.tracerAlphaRate;
                            p.bulletTrail.alpha = z.max(p.tracerAlphaMin, p.bulletTrail.alpha * b)
                        }
                        const x = []
                            , y = i._0x53._0x89();
                        for (let b = 0; b < y.length; b++) {
                            const M = y[b];
                            if (M.active && !M.dead && g.sameLayer(M.layer, p.layer) && M.height >= R.bullet.height && (p.reflectCount <= 0 || M.__id != p.reflectObjId)) {
                                const E = U.intersectSegment(M.collider, S, p.pos);
                                E && x.push({
                                    type: "obstacle",
                                    obstacleType: M.type,
                                    collidable: M.collidable,
                                    point: E.point,
                                    normal: E.normal
                                })
                            }
                        }
                        for (let b = 0; b < d.length; b++) {
                            const M = d[b];
                            if (M.active && !M._0x73._0x85 && (g.sameLayer(M._0x73._0x83, p.layer) || M._0x73._0x83 & 2) && (M.__id != p.playerId || p.damageSelf)) {
                                let E = null;
                                if (M._0x143()) {
                                    const L = M
                                        , v = L._0x144()
                                        , T = ni(v.p0, v.p1, L._0x124, L._0x126)
                                        , V = ni(v.p0, v.p1, L._0x63, L._0x125)
                                        , F = xe.intersectSegmentSegment(S, p.pos, T.p0, T.p1)
                                        , G = xe.intersectSegmentSegment(S, p.pos, V.p0, V.p1) || F;
                                    if (G) {
                                        const q = n.normalize(n.perp(n.sub(V.p1, V.p0)));
                                        E = {
                                            point: G.point,
                                            normal: q
                                        }
                                    }
                                }
                                const D = xe.intersectSegmentCircle(S, p.pos, M._0x63, M._0x90);
                                if (D && (!E || n.length(n.sub(D.point, p.startPos)) < n.length(n.sub(E.point, p.startPos))) ? (x.push({
                                    type: "player",
                                    player: M,
                                    point: D.point,
                                    normal: D.normal,
                                    layer: M.layer,
                                    collidable: !0
                                }),
                                M._0x95("steelskin") && x.push({
                                    type: "pan",
                                    point: n.add(D.point, n.mul(D.normal, .1)),
                                    normal: D.normal,
                                    layer: M.layer,
                                    collidable: !1
                                })) : E && x.push({
                                    type: "pan",
                                    point: E.point,
                                    normal: E.normal,
                                    layer: M.layer,
                                    collidable: !0
                                }),
                                D || E)
                                    break
                            }
                        }
                        for (let b = 0; b < x.length; b++) {
                            const M = x[b];
                            M.dist = n.length(n.sub(M.point, S))
                        }
                        x.sort( (b, M) => b.dist - M.dist);
                        let P = !1;
                        const C = t.getPlayerById(p.playerId);
                        C && (C._0x73._0x85 || C._0x73._0x88) && (P = !0);
                        let k = !1;
                        for (let b = 0; b < x.length; b++) {
                            const M = x[b];
                            if (M.type == "obstacle") {
                                const E = re[M?.obstacleType];
                                Pt(E.hitParticle, E.sound.bullet, M.point, M.normal, p.layer, s, m),
                                k = M.collidable
                            } else if (M.type == "player") {
                                if (!P) {
                                    const E = M.player;
                                    if (i.turkeyMode && C?._0x95("turkey_shoot")) {
                                        const L = n.mul(n.randomUnit(), g.random(3, 6));
                                        s.addParticle("turkeyFeathersHit", E.layer, E._0x63, L)
                                    }
                                    const D = n.sub(M.point, E?._0x63);
                                    D.y *= -1,
                                    window.CrazyGames || s.addParticle("bloodSplat", E.layer, n.mul(D, r._0x68), n.create(0, 0), 1, 1, E.container),
                                    m.playGroup("player_bullet_hit", {
                                        soundPos: E._0x63,
                                        fallOff: 1,
                                        layer: E.layer,
                                        filter: "muffled"
                                    })
                                }
                                k = M.collidable
                            } else
                                M.type == "pan" && (Pt("barrelChip", B.pan.sound.bullet, M.point, M.normal, M.layer, s, m),
                                k = M.collidable);
                            if (k) {
                                p.pos = M.point;
                                break
                            }
                        }
                        if (!(p.layer & 2)) {
                            const b = i._0x55._0x89();
                            let M = p.layer;
                            for (let E = 0; E < b.length; E++) {
                                const D = b[E];
                                if (D.active) {
                                    let L = !1
                                        , v = !1;
                                    for (let T = 0; T < D.stairs.length; T++) {
                                        const V = D.stairs[T];
                                        if (!V?.lootOnly && U.intersectSegment(V?.collision, p.pos, S)) {
                                            L = !0;
                                            break
                                        }
                                    }
                                    for (let T = 0; T < D.mask.length; T++)
                                        if (U.intersectSegment(D.mask[T], p.pos, S)) {
                                            v = !0;
                                            break
                                        }
                                    L && !v && (M |= 2)
                                }
                            }
                            M != p.layer && (p.layer = M,
                            l.addPIXIObj(p.container, p.layer, 20))
                        }
                        (k || z.eqAbs(w, f)) && (p.collided = !0,
                        p.alive = !1),
                        p.isNew = !1
                    }
                }
            }
            createBulletHit(e, t, i) {
                const r = e.getPlayerById(t);
                r && i.playGroup("player_bullet_hit", {
                    soundPos: r._0x63,
                    fallOff: 1,
                    layer: r.layer,
                    filter: "muffled"
                })
            }
            _0x77(e, t) {
                e._0x106(1);
                for (let i = 0; i < this.bullets.length; i++) {
                    const r = this.bullets[i];
                    if (r.alive || r.collided) {
                        const a = n.length(n.sub(r.pos, r.startPos))
                            , l = e._0x105(r.pos);
                        r.container.position.set(l.x, l.y);
                        const s = e._0x106(1)
                            , m = z.min(r.tracerLength * 15, a / 2);
                        r.container.scale.set(s * m * r.scale, s)
                    }
                }
            }
        }
        function Fa() {
            const u = {
                fontFamily: "Arial",
                fontWeight: "bold",
                fontSize: _.pixelRatio > 1 ? 30 : 24,
                align: "center",
                fill: 16777215,
                stroke: 0,
                strokeThickness: 0,
                dropShadow: !0,
                dropShadowColor: "#000000",
                dropShadowBlur: 1,
                dropShadowAngle: Math.PI / 3,
                dropShadowDistance: 1
            }
                , e = new $e("",u);
            return e.anchor.set(.5, .5),
            e.scale.set(.5, .5),
            e
        }
        class qa {
            __id;
            __type;
            active = !1;
            pos = n.create(0, 0);
            container = new J;
            sprite = ee.from("skull.img");
            nameText = Fa();
            nameTextSet;
            layer;
            playerId;
            constructor() {
                this.container.addChild(this.sprite),
                this.sprite.anchor.set(.5, .5),
                this.sprite.scale.set(.4, .4),
                this.sprite.tint = 5921370,
                this.nameText.anchor.set(.5, -1),
                this.nameText.tint = g.rgbToInt(g.hsvToRgb(0, 0, .5)),
                this.container.addChild(this.nameText),
                this.container.visible = this.sprite
            }
            _0x113() {}
            _0x60() {
                this.container.visible = !1
            }
            _0x119(e, t, i, r) {
                this.pos = n.copy(e.pos),
                t && (this.layer = e.layer,
                this.playerId = e.playerId),
                i && (this.nameTextSet = !1,
                this.container.visible = !0)
            }
        }
        class ja {
            deadBodyPool = new be(qa);
            _0x62(e, t, i, r, a, l) {
                const s = this.deadBodyPool._0x89();
                for (let m = 0; m < s.length; m++) {
                    const d = s[m];
                    if (d.active) {
                        d.nameTextSet || (d.nameText.text = t.getPlayerName(d.playerId, i.__id, !1),
                        d.nameTextSet = !0);
                        const h = U.createCircle(d.pos, 1)
                            , p = r.insideStructureStairs(h);
                        let w = d.layer
                            , f = 12;
                        d.layer == 0 && i.layer == 0 && p && (w |= 2,
                        f += 100),
                        l.addPIXIObj(d.container, w, f, d.__id);
                        const S = a._0x105(d.pos)
                            , x = a._0x106(1);
                        d.container.position.set(S.x, S.y),
                        d.container.scale.set(x, x)
                    }
                }
            }
            getDeadBodyById(e) {
                const t = this.deadBodyPool._0x89();
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    if (r.active && r.playerId == e)
                        return r
                }
                return null
            }
        }
        function wt(u, e, t) {
            return u == 0 ? e : u == 1 ? t : g.lerpColor(u, e, t)
        }
        class Va {
            __id;
            __type;
            active;
            decalRender = null;
            isNew;
            goreT;
            hasGore;
            type;
            pos;
            rot;
            scale;
            layer;
            goreKills;
            collider;
            surface;
            _0x113() {
                this.isNew = !1,
                this.goreT = 0
            }
            _0x60() {
                this.decalRender && (this.decalRender.free(),
                this.decalRender = null)
            }
            _0x119(e, t, i, r) {
                if (t) {
                    const a = re[e.type];
                    this.type = e.type,
                    this.pos = n.copy(e.pos),
                    this.rot = z.oriToRad(e.ori),
                    this.scale = e.scale,
                    this.layer = e.layer,
                    this.goreKills = e.goreKills,
                    this.collider = U.transform(a.collision, this.pos, this.rot, this.scale),
                    this.surface = a.surface ? g.cloneDeep(a.surface) : null,
                    this.hasGore = a.gore !== void 0,
                    this.isNew = i,
                    this.isNew && (this.decalRender = r.decalBarn.allocDecalRender(),
                    this.decalRender.init(this, r.map, r.renderer))
                }
            }
            update(e, t) {
                if (this.hasGore) {
                    const i = re[this.type];
                    let r = z.delerp(this.goreKills, i.gore?.fade.start, i.gore?.fade.end);
                    if (r = Math.pow(r, i.gore?.fade.pow),
                    this.goreT = this.isNew ? r : z.lerp(e * i.gore?.fade.speed, this.goreT, r),
                    i.gore?.tint !== void 0) {
                        const a = wt(this.goreT, i.img.tint, i.gore.tint);
                        this.decalRender.setTint(a)
                    }
                    i.gore?.alpha !== void 0 && (this.decalRender.spriteAlpha = z.lerp(this.goreT, i.img.alpha, i.gore.alpha)),
                    i.gore?.waterColor !== void 0 && this.surface && (this.surface.data.waterColor = wt(this.goreT, i.surface?.data.waterColor, i.gore.waterColor)),
                    i.gore?.rippleColor !== void 0 && this.surface && (this.surface.data.rippleColor = wt(this.goreT, i.surface?.data.rippleColor, i.gore.rippleColor))
                }
                this.isNew = !1
            }
        }
        class Ga {
            sprite = new ee;
            pos;
            rot;
            scale;
            layer;
            zIdx;
            zOrd;
            imgScale;
            spriteAlpha;
            valueAdjust;
            inWater;
            flicker;
            flickerMin;
            flickerMax;
            flickerTarget;
            flickerRate;
            flickerCooldown;
            active;
            deactivated;
            fadeout;
            fadeAlpha;
            constructor() {
                this.sprite.anchor.set(.5, .5),
                this.sprite.visible = !1
            }
            init(e, t, i) {
                const r = re[e.type];
                this.pos = n.copy(e.pos),
                this.rot = e.rot,
                this.scale = e.scale,
                this.layer = e.layer,
                this.zIdx = r.img.zIdx,
                this.zOrd = e.__id;
                const a = r.img;
                if (this.sprite.texture = H.from(a.sprite),
                this.sprite.alpha = 1,
                this.sprite.visible = !0,
                this.imgScale = r.img.scale,
                this.spriteAlpha = a.alpha,
                this.valueAdjust = a.ignoreAdjust ? 1 : t.getMapDef().biome.valueAdjust,
                this.setTint(a.tint),
                this.inWater = !1,
                r.height < .25) {
                    const l = t.getGroundSurface(e.pos, e.layer);
                    this.inWater = l.type == "water"
                }
                this.flicker = r.img.flicker,
                this.flicker && (this.flickerMin = r.img.flickerMin,
                this.flickerMax = r.img.flickerMax,
                this.flickerTarget = this.imgScale,
                this.flickerRate = r.img.flickerRate,
                this.flickerCooldown = 0),
                this.active = !0,
                this.deactivated = !1,
                this.fadeout = r.lifetime !== void 0,
                this.fadeAlpha = 1
            }
            free() {
                this.deactivated = !0
            }
            setTint(e) {
                this.valueAdjust < 1 && (e = g.adjustValue(e, this.valueAdjust)),
                this.sprite.tint = e
            }
            update(e, t, i) {
                this.deactivated && this.fadeout && (this.fadeAlpha = z.lerp(e * 3, this.fadeAlpha, 0),
                this.fadeAlpha < .01 && (this.fadeAlpha = 0)),
                this.deactivated && (!this.fadeout || z.eqAbs(this.fadeAlpha, 0)) && (this.sprite.visible = !1,
                this.active = !1),
                this.flicker && (this.flickerCooldown < 0 ? (this.flickerTarget = g.random(this.flickerMin, this.flickerMax),
                this.flickerCooldown = g.random(.05, this.flickerRate)) : (this.imgScale = z.lerp(this.flickerRate - this.flickerCooldown, this.imgScale, this.flickerTarget),
                this.flickerCooldown -= e));
                const r = t._0x105(this.pos)
                    , a = t._0x106(this.scale * this.imgScale);
                this.sprite.position.set(r.x, r.y),
                this.sprite.scale.set(a, a),
                this.sprite.rotation = -this.rot,
                this.sprite.alpha = this.spriteAlpha * (this.inWater ? .3 : 1) * this.fadeAlpha,
                i.addPIXIObj(this.sprite, this.layer, this.zIdx, this.zOrd)
            }
        }
        class Ki {
            decalPool = new be(Va);
            decalRenders = [];
            allocDecalRender() {
                let e = null;
                for (let t = 0; t < this.decalRenders.length; t++) {
                    const i = this.decalRenders[t];
                    if (!i.active) {
                        e = i;
                        break
                    }
                }
                return e || (e = new Ga,
                this.decalRenders.push(e)),
                e
            }
            _0x62(e, t, i, r) {
                const a = this.decalPool._0x89();
                for (let l = 0; l < a.length; l++) {
                    const s = a[l];
                    s.active && s.update(e)
                }
                for (let l = 0; l < this.decalRenders.length; l++) {
                    const s = this.decalRenders[l];
                    s.active && s.update(e, t, i)
                }
            }
            _0x77(e, t, i) {}
        }
        class Ua {
            active;
            pos;
            vel;
            layer;
            particle;
            ticker;
            colCount;
            constructor() {
                this.active = !1
            }
            init(e, t, i, r) {
                this.pos = n.copy(e),
                this.vel = n.copy(t),
                this.layer = i,
                this.particle = r,
                this.ticker = 0,
                this.colCount = 0,
                this.active = !0
            }
            update(e, t, i) {
                const r = n.copy(this.pos);
                this.pos = n.add(this.pos, n.mul(this.vel, e)),
                this.vel = n.mul(this.vel, 1 / (1 + e * 5));
                const a = []
                    , l = t._0x53._0x89();
                for (let d = 0; d < l.length; d++) {
                    const h = l[d];
                    h.active && !h.dead && g.sameLayer(this.layer, h.layer) && a.push(h.collider)
                }
                const s = i.playerPool._0x89();
                for (let d = 0; d < s.length; d++) {
                    const h = s[d];
                    h.active && !h.dead && g.sameLayer(this.layer, h.layer) && a.push(U.createCircle(h._0x63, h._0x90, 0))
                }
                const m = [];
                for (let d = 0; d < a.length; d++) {
                    const h = U.intersectSegment(a[d], r, this.pos);
                    if (h) {
                        const p = n.length(n.sub(h.point, r));
                        m.push({
                            point: h.point,
                            normal: h.normal,
                            dist: p
                        })
                    }
                }
                if (m.sort( (d, h) => d.dist - h.dist),
                m.length > 0) {
                    const d = m[0]
                        , h = n.normalizeSafe(this.vel, n.create(1, 0))
                        , p = n.length(this.vel)
                        , w = n.sub(h, n.mul(d.normal, n.dot(d.normal, h) * 2))
                        , f = this.colCount++ > 0 ? .35 : 1;
                    this.pos = n.add(d.point, n.mul(d.normal, .01)),
                    this.vel = n.mul(w, p * f)
                }
                this.particle.pos = n.copy(this.pos),
                this.ticker += e,
                this.ticker >= this.particle.life && (this.particle.free(),
                this.active = !1)
            }
        }
        class $a {
            active;
            type;
            done;
            pos;
            layer;
            ticker;
            lifetime;
            soundInstance;
            soundUpdateThrottle;
            constructor(e) {
                this.active = !1
            }
            init(e, t, i) {
                const r = $t[e].explosionEffectType
                    , a = hi[r];
                this.active = !0,
                this.done = !1,
                this.type = e,
                this.pos = n.copy(t),
                this.layer = i,
                this.ticker = 0,
                this.lifetime = a.lifetime,
                this.soundInstance = null,
                this.soundUpdateThrottle = 0
            }
            free() {
                this.active = !1
            }
            update(e, t, i, r, a, l) {
                const s = $t[this.type].explosionEffectType
                    , m = hi[s];
                if (this.ticker == 0) {
                    let p = !0;
                    if (this.type == "explosion_bomb_iron") {
                        const y = U.createCircle(this.pos, .5);
                        a.insideBuildingCeiling(y, !0) && (p = !1)
                    }
                    if (p && (m.burst.particle && i.addParticle(m.burst.particle, this.layer, this.pos, n.create(0, 0), m.burst.scale, 0, null),
                    m.scatter))
                        for (let y = 0; y < m.scatter.count; y++) {
                            const P = i.addParticle(m.scatter.particle, this.layer, this.pos, n.create(0, 0), 1, 0, null)
                                , C = t.addPhysicsParticle()
                                , k = n.mul(n.randomUnit(), g.random(m.scatter.speed.min, m.scatter.speed.max));
                            C.init(this.pos, k, this.layer, P)
                        }
                    const w = a.getGroundSurface(this.pos, this.layer)
                        , f = w.type == "water" ? m.burst.sound.water : m.burst.sound.grass;
                    let S = 0;
                    m.burst.sound.detune != null && (S = m.burst.sound.detune);
                    let x = 1;
                    if (m.burst.sound.volume != null && (x = m.burst.sound.volume),
                    this.soundInstance = r.playSound(f, {
                        channel: "sfx",
                        soundPos: this.pos,
                        layer: this.layer,
                        filter: "muffled",
                        rangeMult: 2,
                        ignoreMinAllowable: !0,
                        detune: S,
                        volumeScale: x
                    }),
                    w.type == "water")
                        for (let y = 0; y < m.rippleCount; y++) {
                            const P = m.rippleCount * .5
                                , C = n.add(this.pos, n.mul(n.randomUnit(), g.random(0, P)));
                            i.addRippleParticle(C, this.layer, w.data.rippleColor).setDelay(y * .06)
                        }
                }
                if (this.soundInstance && this.soundUpdateThrottle < 0) {
                    this.soundUpdateThrottle = .1;
                    let p = 1;
                    m.burst.sound.volume != null && (p = m.burst.sound.volume),
                    r.updateSound(this.soundInstance, "sfx", this.pos, {
                        layer: this.layer,
                        filter: "muffled",
                        volumeScale: p
                    })
                } else
                    this.soundUpdateThrottle -= e;
                this.ticker += e;
                const d = z.min(this.ticker / m.shakeDur, 1)
                    , h = z.lerp(d, m.shakeStr, 0);
                l._0x108(this.pos, h),
                this.ticker >= this.lifetime && (this.active = !1)
            }
        }
        class Wa {
            explosions;
            physicsParticles;
            constructor() {
                this.explosions = [],
                this.physicsParticles = []
            }
            addExplosion(e, t, i) {
                let r = null;
                for (let a = 0; a < this.explosions.length; a++)
                    if (!this.explosions[a].active) {
                        r = this.explosions[a];
                        break
                    }
                r || (r = new $a(this),
                this.explosions.push(r)),
                r.init(e, t, i)
            }
            addPhysicsParticle() {
                let e = null;
                for (let t = 0; t < this.physicsParticles.length; t++) {
                    const i = this.physicsParticles[t];
                    if (!i.active) {
                        e = i;
                        break
                    }
                }
                return e || (e = new Ua,
                this.physicsParticles.push(e)),
                e
            }
            _0x62(e, t, i, r, a, l, s) {
                for (let m = 0; m < this.explosions.length; m++) {
                    const d = this.explosions[m];
                    d.active && (d.update(e, this, a, l, t, r),
                    d.active || d.free())
                }
                for (let m = 0; m < this.physicsParticles.length; m++) {
                    const d = this.physicsParticles[m];
                    d.active && d.update(e, t, i)
                }
            }
        }
        const hi = {
            frag: {
                burst: {
                    particle: "explosionBurst",
                    scale: 1,
                    sound: {
                        grass: "explosion_01",
                        water: "explosion_02"
                    }
                },
                rippleCount: 10,
                shakeStr: .2,
                shakeDur: .35,
                lifetime: 2
            },
            smoke: {
                burst: {
                    particle: "explosionBurst",
                    scale: 0,
                    sound: {
                        grass: "explosion_smoke_01",
                        water: "explosion_smoke_01"
                    }
                },
                rippleCount: 10,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 6
            },
            strobe: {
                burst: {
                    particle: "explosionBurst",
                    scale: .25,
                    sound: {
                        grass: "explosion_04",
                        water: "explosion_02"
                    }
                },
                rippleCount: 3,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 2
            },
            barrel: {
                burst: {
                    particle: "explosionBurst",
                    scale: 1,
                    sound: {
                        grass: "explosion_01",
                        water: "explosion_02"
                    }
                },
                rippleCount: 10,
                shakeStr: .2,
                shakeDur: .35,
                lifetime: 2
            },
            usas: {
                burst: {
                    particle: "explosionUSAS",
                    scale: .75,
                    sound: {
                        grass: "explosion_03",
                        water: "explosion_02"
                    }
                },
                rippleCount: 10,
                shakeStr: .12,
                shakeDur: .25,
                lifetime: 1.25
            },
            rounds: {
                burst: {
                    particle: "explosionRounds",
                    scale: .32,
                    sound: {
                        grass: "explosion_04",
                        water: "explosion_04",
                        detune: 500,
                        volume: .5
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 1
            },
            rounds_sg: {
                burst: {
                    particle: "explosionRounds",
                    scale: .32,
                    sound: {
                        grass: "explosion_04",
                        water: "explosion_04",
                        detune: 500,
                        volume: .2
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 1
            },
            mirv: {
                burst: {
                    particle: "explosionMIRV",
                    scale: 1,
                    sound: {
                        grass: "explosion_01",
                        water: "explosion_02"
                    }
                },
                rippleCount: 10,
                shakeStr: .2,
                shakeDur: .35,
                lifetime: 2
            },
            mirv_mini: {
                burst: {
                    particle: "explosionMIRV",
                    scale: .75,
                    sound: {
                        grass: "explosion_03",
                        water: "explosion_02"
                    }
                },
                rippleCount: 3,
                shakeStr: .1,
                shakeDur: .2,
                lifetime: 1.25
            },
            martyr_nade: {
                burst: {
                    particle: "explosionBurst",
                    scale: .75,
                    sound: {
                        grass: "explosion_03",
                        water: "explosion_02"
                    }
                },
                rippleCount: 3,
                shakeStr: .1,
                shakeDur: .2,
                lifetime: 1.25
            },
            snowball: {
                burst: {
                    particle: "",
                    scale: .75,
                    sound: {
                        grass: "snowball_01",
                        water: "frag_water_01"
                    }
                },
                scatter: {
                    particle: "snowball_impact",
                    count: 5,
                    speed: {
                        min: 5,
                        max: 25
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 1
            },
            snowball_heavy: {
                burst: {
                    particle: "",
                    scale: .75,
                    sound: {
                        grass: "snowball_02",
                        water: "frag_water_01"
                    }
                },
                scatter: {
                    particle: "snowball_impact",
                    count: 8,
                    speed: {
                        min: 5,
                        max: 25
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 1
            },
            potato: {
                burst: {
                    particle: "",
                    scale: .75,
                    sound: {
                        grass: "potato_01",
                        water: "frag_water_01"
                    }
                },
                scatter: {
                    particle: "potato_impact",
                    count: 5,
                    speed: {
                        min: 5,
                        max: 25
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 1
            },
            potato_heavy: {
                burst: {
                    particle: "",
                    scale: .75,
                    sound: {
                        grass: "potato_02",
                        water: "frag_water_01"
                    }
                },
                scatter: {
                    particle: "potato_impact",
                    count: 8,
                    speed: {
                        min: 5,
                        max: 25
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: 1
            },
            potato_cannonball: {
                burst: {
                    particle: "explosionPotato",
                    scale: .75,
                    sound: {
                        grass: "explosion_05",
                        water: "explosion_02"
                    }
                },
                scatter: {
                    particle: "potato_impact",
                    count: 8,
                    speed: {
                        min: 5,
                        max: 25
                    }
                },
                rippleCount: 10,
                shakeStr: .12,
                shakeDur: .25,
                lifetime: 1.25
            },
            potato_smgshot: {
                burst: {
                    particle: "",
                    scale: .2,
                    sound: {
                        grass: "potato_01",
                        water: "potato_02",
                        detune: 250,
                        volume: .5
                    }
                },
                scatter: {
                    particle: "potato_smg_impact",
                    count: 2,
                    speed: {
                        min: 5,
                        max: 25
                    }
                },
                rippleCount: 1,
                shakeStr: 0,
                shakeDur: 0,
                lifetime: .5
            },
            bomb_iron: {
                burst: {
                    particle: "explosionBomb",
                    scale: 2,
                    sound: {
                        grass: "explosion_01",
                        water: "explosion_02"
                    }
                },
                rippleCount: 12,
                shakeStr: .25,
                shakeDur: .4,
                lifetime: 2
            }
        };
        class Ha {
            bullets = [];
            addFlare(e, t, i) {
                let r = null;
                for (let f = 0; f < this.bullets.length; f++)
                    if (!this.bullets[f].alive && !this.bullets[f].collided) {
                        r = this.bullets[f];
                        break
                    }
                r || (r = {},
                r.alive = !1,
                r.flareContainer = new J,
                r.flareContainer.visible = !1,
                r.flare = ee.from("part-flare-01.img"),
                r.flare.anchor.set(.5, .5),
                r.flareContainer.addChild(r.flare),
                r.trailContainer = new J,
                r.trailContainer.visible = !1,
                r.trailContainer.pivot.set(14.5, 0),
                r.bulletTrail = ee.from("player-bullet-trail-02.img"),
                r.bulletTrail.anchor.set(.5, .5),
                r.trailContainer.addChild(r.bulletTrail),
                this.bullets.push(r));
                const a = nt[e.bulletType]
                    , l = 1 + e.varianceT * a.variance
                    , s = z.remap(e.distAdjIdx, 0, 32, -1, 1)
                    , m = a.distance / Math.pow(R.bullet.reflectDistDecay, e.reflectCount);
                r.alive = !0,
                r.isNew = !0,
                r.collided = !1,
                r.flareScale = .01,
                r.trailScale = 1,
                r.timeAlive = 0,
                r.maxTimeAlive = 2.5,
                r.startPos = n.copy(e.pos),
                r.pos = n.copy(e.pos),
                r.dir = n.copy(e.dir),
                r.layer = e.layer,
                r.speed = a.speed * l,
                r.distance = m * l + s;
                const d = Math.atan2(r.dir.x, r.dir.y);
                r.flareContainer.rotation = d - Math.PI / 2,
                r.trailContainer.rotation = d - Math.PI / 2,
                r.layer = e.layer;
                const h = t.getPlayerById(r.playerId);
                h && h.layer & 2 && (r.layer |= 2);
                const p = R.tracerColors[a.tracerColor];
                let w = p.regular;
                h?.isOnBrightSurface && (w = p.saturated),
                r.bulletTrail.scale.set(.8, a.tracerWidth),
                r.tracerLength = a.tracerLength,
                r.bulletTrail.tint = w,
                r.tracerAlphaRate = p.alphaRate,
                r.tracerAlphaMin = p.alphaMin,
                r.bulletTrail.alpha = 1,
                r.flare.scale.set(1, 1),
                r.flare.tint = a.flareColor,
                r.flare.alpha = .8,
                r.maxFlareScale = a.maxFlareScale,
                r.smokeThrottle = 0,
                r.flareContainer.visible = !0,
                r.trailContainer.visible = !0
            }
            _0x62(e, t, i, r, a, l, s, m) {
                for (let d = 0; d < this.bullets.length; d++) {
                    const h = this.bullets[d];
                    if (h.collided && (h.flareScale = z.max(h.flareScale - e * .5, 0),
                    h.flare.alpha = z.max(h.flare.alpha - e, 0),
                    h.trailScale = z.max(h.trailScale - e * 6, 0),
                    h.bulletTrail.alpha = z.max(h.bulletTrail.alpha - e, 0),
                    h.pos = n.add(h.pos, n.mul(h.dir, e * h.speed)),
                    h.flare.alpha <= 0 && (h.collided = !1,
                    h.flareContainer.visible = !1,
                    h.trailContainer.visible = !1)),
                    h.alive) {
                        if (h.tracerAlphaRate) {
                            const S = a.__id == h.playerId ? h.tracerAlphaRate : h.tracerAlphaRate * .9;
                            h.bulletTrail.alpha = z.max(h.tracerAlphaMin, h.bulletTrail.alpha * S)
                        }
                        h.timeAlive += e,
                        h.flareScale = z.easeOutExpo(h.timeAlive / h.maxTimeAlive) * h?.maxFlareScale,
                        h.smokeThrottle <= 0 ? h.smokeThrottle = .05 : h.smokeThrottle -= e;
                        const p = h.distance - n.length(n.sub(h.startPos, h.pos))
                            , w = z.min(p, e * h.speed);
                        h.pos = n.add(h.pos, n.mul(h.dir, w)),
                        z.eqAbs(p, w) && (h.collided = !0,
                        h.alive = !1);
                        let f = 0;
                        (g.sameLayer(f, a.layer) || a.layer & 2) && (!(a.layer & 2) || !i.insideStructureMask(U.createCircle(h.pos, 1))) && (f |= 2),
                        l.addPIXIObj(h.trailContainer, f, 1e3, 0),
                        l.addPIXIObj(h.flareContainer, f, 1e3, 1),
                        h.isNew = !1
                    }
                }
            }
            _0x77(e) {
                for (let t = 0; t < this.bullets.length; t++) {
                    const i = this.bullets[t];
                    if (i.alive || i.collided) {
                        const r = e._0x105(i.pos);
                        i.flareContainer.position.set(r.x, r.y);
                        const a = e._0x106(1);
                        i.flareContainer.scale.set(a * i.flareScale, a * i.flareScale);
                        const l = n.length(n.sub(i.pos, i.startPos));
                        i.trailContainer.position.set(r.x, r.y);
                        const s = z.min(i.tracerLength * 15, l / 2);
                        i.trailContainer.scale.set(a * s * i.trailScale, a)
                    }
                }
            }
        }
        class Xa {
            __id;
            __type;
            active;
            ticker = 0;
            playDropSfx = !1;
            container = new ee;
            sprite = new ee;
            emitter = null;
            updatedData;
            pos;
            isOld;
            layer;
            type;
            count;
            isPreloadedGun;
            ownerId;
            rad;
            imgScale;
            constructor() {
                this.container.anchor.set(.5, .5),
                this.container.scale.set(1, 1),
                this.sprite.anchor.set(.5, .5),
                this.sprite.scale.set(.8, .8),
                this.container.addChild(this.sprite)
            }
            _0x113() {
                this.updatedData = !1
            }
            _0x60() {
                this.container.visible = !1,
                this.emitter && (this.emitter.stop(),
                this.emitter = null)
            }
            _0x119(e, t, i, r) {
                if (this.updatedData = !0,
                this.pos = n.copy(e.pos),
                t && (this.layer = e.layer,
                this.type = e.type,
                this.count = e.count,
                this.isOld = e.isOld,
                this.isPreloadedGun = e.isPreloadedGun,
                this.ownerId = e.hasOwner ? e.ownerId : 0),
                i) {
                    const a = B[this.type];
                    this.ticker = 0,
                    this.isOld && (this.ticker = 10),
                    !this.isOld && a.sound.drop && !r.map.lootDropSfxIds.includes(this.__id) && (this.playDropSfx = !0),
                    this.rad = R.lootRadius[a.type],
                    this.imgScale = a.lootImg?.scale * 1.25;
                    const l = a.lootImg.innerScale || .8;
                    this.sprite.scale.set(l, l),
                    this.sprite.texture = H.from(a.lootImg?.sprite),
                    this.sprite.tint = a.lootImg?.tint,
                    this.container.texture = a.lootImg.border ? H.from(a.lootImg.border) : H.EMPTY,
                    this.isPreloadedGun && (this.container.texture = H.from("loot-circle-outer-06.img"));
                    const s = B[a.ammo];
                    s ? this.container.tint = s.lootImg.tintDark : a.lootImg.borderTint ? this.container.tint = a.lootImg.borderTint : this.container.tint = 0,
                    a.type == "xp" && a.emitter && (this.emitter = r.particleBarn.addEmitter(a.emitter, {
                        pos: this.pos,
                        layer: this.layer
                    })),
                    this.sprite.rotation = a?.lootImg?.rot ? a.lootImg.rot : 0,
                    this.sprite.scale.x = a.lootImg.mirror ? -l : l,
                    this.container.visible = !0
                }
                (i || t) && r.renderer.addPIXIObj(this.container, this.layer, 13, this.__id)
            }
        }
        class Za {
            lootPool = new be(Xa);
            closestLoot = null;
            _0x62(e, t, i, r, a, l) {
                this.closestLoot = null;
                let s = Number.MAX_VALUE;
                const m = this.lootPool._0x89();
                for (let d = 0; d < m.length; d++) {
                    const h = m[d];
                    if (h.active) {
                        if (g.sameLayer(h.layer, t.layer) && !t._0x73._0x85 && (h.ownerId == 0 || h.ownerId == t.__id)) {
                            const x = h.pos
                                , y = _.touch ? t._0x90 + h.rad * R.player.touchLootRadMult : h.rad
                                , P = n.sub(t._0x63, x)
                                , C = n.lengthSqr(P);
                            C < y * y && C < s && (s = C,
                            this.closestLoot = h)
                        }
                        if (h.ticker += e,
                        h.playDropSfx) {
                            i.lootDropSfxIds.push(h.__id),
                            h.playDropSfx = !1;
                            const x = B[h.type];
                            r.playSound(x.sound?.drop, {
                                channel: "sfx",
                                soundPos: h.pos,
                                layer: h.layer,
                                filter: "muffled"
                            })
                        }
                        h.emitter && (h.emitter.pos = n.add(h.pos, n.create(0, .1)),
                        h.emitter.layer = h.layer);
                        const p = z.delerp(h.ticker, 0, 1)
                            , w = z.easeOutElastic(p, .75)
                            , f = a._0x105(h.pos)
                            , S = a._0x106(h.imgScale * w);
                        _.debug && l.loot && t.layer === h.layer && he.addCircle(h.pos, h.rad, 16711680, 0),
                        h.container.position.set(f.x, f.y),
                        h.container.scale.set(S, S)
                    }
                }
            }
            getClosestLoot() {
                return this.closestLoot
            }
        }
        class o {
            constructor(e, t) {
                this.min = e,
                this.max = t
            }
            getRandom() {
                return g.random(this.min, this.max)
            }
        }
        function we(u) {
            return u instanceof o ? u.getRandom() : u
        }
        function Ka(u) {
            return u instanceof Function ? u() : u
        }
        class ci {
            active = !1;
            ticker = 0;
            def = {};
            sprite = new ee;
            hasParent = !1;
            pos;
            vel;
            rot;
            delay;
            life;
            drag;
            rotVel;
            rotDrag;
            scaleUseExp;
            scale;
            scaleEnd;
            scaleExp;
            alphaUseExp;
            alpha;
            alphaEnd;
            alphaExp;
            alphaIn;
            alphaInStart;
            alphaInEnd;
            emitterIdx;
            valueAdjust;
            constructor() {
                this.sprite.anchor.set(.5, .5),
                this.sprite.scale.set(1, 1),
                this.sprite.visible = !1
            }
            init(e, t, i, r, a, l, s, m, d, h) {
                const p = Ot[t];
                this.active = !0,
                this.ticker = 0,
                m ? (this.hasParent = !0,
                m.addChild(this.sprite)) : (this.hasParent = !1,
                e.addPIXIObj(this.sprite, i, d)),
                this.pos = n.copy(r),
                this.vel = n.copy(a),
                this.rot = s,
                this.def = p,
                this.delay = 0,
                this.life = we(p.life),
                this.drag = we(p.drag),
                this.rotVel = we(p.rotVel) * (Math.random() < .5 ? -1 : 1),
                this.rotDrag = we(p.drag) / 2,
                this.scaleUseExp = p.scale.exp !== void 0,
                this.scale = we(p.scale.start) * l,
                this.scaleEnd = this.scaleUseExp ? 0 : we(p.scale?.end) * l,
                this.scaleExp = this.scaleUseExp ? p.scale.exp : 0,
                this.alphaUseExp = p.alpha.exp !== void 0,
                this.alpha = we(p.alpha.start),
                this.alphaEnd = this.alphaUseExp ? 0 : we(p.alpha?.end),
                this.alphaExp = this.alphaUseExp ? p.alpha.exp : 0,
                this.alphaIn = p.alphaIn !== void 0,
                this.alphaInStart = this.alphaIn ? we(p.alphaIn?.start) : 0,
                this.alphaInEnd = this.alphaIn ? we(p.alphaIn?.end) : 0,
                this.emitterIdx = -1;
                const w = Array.isArray(p.image) ? p.image[Math.floor(Math.random() * p.image.length)] : p.image;
                this.sprite.texture = H.from(w),
                this.sprite.visible = !1,
                this.valueAdjust = p.ignoreValueAdjust ? 1 : h,
                this.setColor(Ka(p.color))
            }
            free() {
                this.active = !1,
                this.sprite.visible = !1
            }
            setDelay(e) {
                this.delay = e
            }
            setColor(e) {
                this.valueAdjust < 1 && (e = g.adjustValue(e, this.valueAdjust)),
                this.sprite.tint = e
            }
        }
        class Qa {
            active = !1;
            enabled;
            type;
            pos;
            dir;
            scale;
            layer;
            duration;
            radius;
            ticker;
            nextSpawn;
            spawnCount;
            parent;
            alpha;
            rateMult;
            zOrd;
            init(e, t={}) {
                const i = Yi[e];
                this.active = !0,
                this.enabled = !0,
                this.type = e,
                this.pos = t.pos ? n.copy(t.pos) : n.create(0, 0),
                this.dir = t.dir ? n.copy(t.dir) : n.create(0, 1),
                this.scale = t.scale !== void 0 ? t.scale : 1,
                this.layer = t.layer || 0,
                this.duration = t.duration !== void 0 ? t.duration : Number.MAX_VALUE,
                this.radius = t.radius !== void 0 ? t.radius : i.radius,
                this.ticker = 0,
                this.nextSpawn = 0,
                this.spawnCount = 0,
                this.parent = t.parent || null,
                this.alpha = 1,
                this.rateMult = t.rateMult !== void 0 ? t.rateMult : 1;
                const r = Ot[i.particle];
                this.zOrd = i.zOrd !== void 0 ? i.zOrd : r.zOrd !== void 0 ? r.zOrd : 20
            }
            free() {
                this.active = !1
            }
            stop() {
                this.duration = this.ticker
            }
        }
        class Qi {
            constructor(e) {
                this.renderer = e;
                for (let t = 0; t < 256; t++)
                    this.particles[t] = new ci
            }
            particles = [];
            emitters = [];
            valueAdjust = 1;
            onMapLoad(e) {
                this.valueAdjust = e.getMapDef().biome.valueAdjust
            }
            _0x60() {
                for (let e = 0; e < this.particles.length; e++) {
                    const t = this.particles[e].sprite;
                    t.parent?.removeChild(t),
                    t.destroy({
                        children: !0
                    })
                }
            }
            addParticle(e, t, i, r, a, l, s, m) {
                let d = null;
                for (let h = 0; h < this.particles.length; h++)
                    if (!this.particles[h].active) {
                        d = this.particles[h];
                        break
                    }
                return d || (d = new ci,
                this.particles.push(d)),
                a = a !== void 0 ? a : 1,
                l = l !== void 0 ? l : Math.random() * Math.PI * 2,
                m = m !== void 0 ? m : Ot[e].zOrd || 20,
                d.init(this.renderer, e, t, i, r, a, l, s, m, this.valueAdjust),
                d
            }
            addRippleParticle(e, t, i) {
                const r = this.addParticle("waterRipple", t, e, n.create(0, 0), 1, 0, null);
                return r.setColor(i),
                r
            }
            addEmitter(e, t={}) {
                let i = null;
                for (let r = 0; r < this.emitters.length; r++)
                    if (!this.emitters[r].active) {
                        i = this.emitters[r];
                        break
                    }
                return i || (i = new Qa,
                this.emitters.push(i)),
                i.init(e, t),
                i
            }
            _0x62(e, t, i) {
                for (let r = 0; r < this.emitters.length; r++) {
                    const a = this.emitters[r];
                    if (a.active && a.enabled) {
                        a.ticker += e,
                        a.nextSpawn -= e;
                        const l = Yi[a.type];
                        for (; a.nextSpawn <= 0 && a.spawnCount < l.maxCount; ) {
                            const s = a.scale * a.radius
                                , m = n.add(a.pos, g.randomPointInCircle(s))
                                , d = n.rotate(a.dir, (Math.random() - .5) * l.angle)
                                , h = n.mul(d, we(l.speed))
                                , p = we(l.rot)
                                , w = this.addParticle(l.particle, a.layer, m, h, a.scale, p, a.parent, a.zOrd);
                            w.emitterIdx = r;
                            let f = we(l.rate);
                            if (l.maxRate) {
                                const S = z.easeInExpo(z.min(1, a.ticker / l.maxElapsed))
                                    , x = we(l.maxRate);
                                f = z.lerp(S, f, x)
                            }
                            a.nextSpawn += f * a.rateMult,
                            a.spawnCount++
                        }
                        a.ticker >= a.duration && a.free()
                    }
                }
                for (let r = 0; r < this.particles.length; r++) {
                    const a = this.particles[r];
                    if (a.active && (a.ticker += e,
                    a.ticker >= a.delay)) {
                        const l = z.min((a.ticker - a.delay) / a.life, 1);
                        a.vel = n.mul(a.vel, 1 / (1 + e * a.drag)),
                        a.pos = n.add(a.pos, n.mul(a.vel, e)),
                        a.rotVel *= 1 / (1 + e * a.rotDrag),
                        a.rot += a.rotVel * e,
                        a.scaleUseExp && (a.scale += e * a.scaleExp),
                        a.alphaUseExp && (a.alpha = z.max(a.alpha + e * a.alphaExp, 0));
                        const s = a.hasParent ? a.pos : t._0x105(a.pos);
                        let m = a.scaleUseExp ? a.scale : z.remap(l, a.def.scale.lerp?.min, a.def.scale.lerp?.max, a.scale, a.scaleEnd)
                            , d = a.alphaUseExp ? a.alpha : z.remap(l, a.def.alpha.lerp?.min, a.def.alpha.lerp?.max, a.alpha, a.alphaEnd);
                        a.alphaIn && l < a.def.alphaIn?.lerp?.max && (d = z.remap(l, a.def.alphaIn?.lerp?.min, a.def.alphaIn?.lerp?.max, a.alphaInStart, a.alphaInEnd)),
                        a.emitterIdx >= 0 && (d *= this.emitters[a.emitterIdx].alpha),
                        a.hasParent || (m = t._0x106(m)),
                        a.sprite.position.set(s.x, s.y),
                        a.sprite.scale.set(m, m),
                        a.sprite.rotation = a.rot,
                        a.sprite.alpha = d,
                        a.sprite.visible = !0,
                        l >= 1 && a.free()
                    }
                }
            }
        }
        const Ot = {
            archwayBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.2,.35),
                    end: new o(.08,.12),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.06, .84, g.random(.46, .48)))
                }
            },
            bloodSplat: {
                image: ["part-splat-01.img", "part-splat-02.img", "part-splat-03.img"],
                life: .5,
                drag: 1,
                rotVel: 0,
                scale: {
                    start: .04,
                    end: new o(.15,.2),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(16711680, 1, g.random(.45, .8)))
                }
            },
            barrelPlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(3,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.08,.18),
                    end: new o(.07,.17),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.09, .8, g.random(.66, .68)))
                }
            },
            barrelChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.01, .02, g.random(.38, .41)))
                }
            },
            barrelBreak: {
                image: ["part-spark-02.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.01, .02, g.random(.38, .41)))
                }
            },
            blackChip: {
                image: ["part-woodchip-01.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, .08, g.random(.16, .18)))
                }
            },
            blueChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.64, 1, g.random(.83, .85)))
                }
            },
            book: {
                image: ["part-book-01.img"],
                life: new o(1,1.5),
                drag: new o(3,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.09,.19),
                    end: new o(.07,.17),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, .42, g.random(.72, .74)))
                }
            },
            bottleBrownChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,5),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.02,.04),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: 7878664
            },
            bottleBrownBreak: {
                image: ["part-spark-02.img"],
                life: new o(.4,.8),
                drag: new o(1,4),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.03,.06),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .8,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 7878664
            },
            bottleBlueChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,5),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.02,.04),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: 19544
            },
            bottleWhiteBreak: {
                image: ["part-spark-02.img"],
                life: new o(.4,.8),
                drag: new o(1,4),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.03,.06),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .75,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 16777215
            },
            bottleWhiteChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,5),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.02,.04),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .75,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: 16777215
            },
            bottleBlueBreak: {
                image: ["part-spark-02.img"],
                life: new o(.4,.8),
                drag: new o(1,4),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.03,.06),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .8,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 19544
            },
            brickChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, .71, g.random(.32, .34)))
                }
            },
            clothBreak: {
                image: ["part-cloth-01.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.95, 1)))
                }
            },
            clothHit: {
                image: ["part-cloth-01.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.95, 1)))
                }
            },
            depositBoxGreyBreak: {
                image: ["part-plate-01.img"],
                life: new o(.5,1),
                drag: new o(7,8),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.15,.25),
                    end: new o(.12,.2),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.36, .38)))
                }
            },
            depositBoxGoldBreak: {
                image: ["part-plate-01.img"],
                life: new o(.5,1),
                drag: new o(6,8),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.2,.35),
                    end: new o(.18,.25),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.11, .84, g.random(.64, .66)))
                }
            },
            glassChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,5),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: 8444415
            },
            glassPlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 8444415
            },
            goldChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.11, .84, g.random(.88, .9)))
                }
            },
            greenChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.4, .18, g.random(.5, .62)))
                }
            },
            greenPlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.08,.16),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 3884335
            },
            greenhouseBreak: {
                image: ["part-spark-02.img", "part-plate-01.img", "part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .8,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 8444415
            },
            hutBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.1, .81, g.random(.78, .82)))
                }
            },
            leaf: {
                image: ["part-leaf-01.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.5, .75)))
                }
            },
            leafPrickly: {
                image: ["part-leaf-01sv.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.8, .85)))
                }
            },
            leafRiver: {
                image: ["part-leaf-02.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.5, .75)))
                }
            },
            lockerBreak: {
                image: ["part-plate-01.img"],
                life: new o(.5,1),
                drag: new o(7,8),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.15,.2),
                    end: new o(.12,.15),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.1, .23, g.random(.51, .53)))
                }
            },
            ltgreenChip: {
                image: ["part-woodchip-01.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.2, .42, g.random(.38, .42)))
                }
            },
            outhouseChip: {
                image: ["part-woodchip-01.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, .57, g.random(.4, .46)))
                }
            },
            outhouseBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, .79, g.random(.52, .54)))
                }
            },
            outhousePlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, .57, g.random(.4, .46)))
                }
            },
            potChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.06, .84, g.random(.73, .77)))
                }
            },
            potBreak: {
                image: ["part-pot-01.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.06, .84, g.random(.73, .77)))
                }
            },
            potatoChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.075, .43, g.random(.48, .5)))
                }
            },
            potatoBreak: {
                image: ["part-pumpkin-01.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.075, .43, g.random(.48, .5)))
                }
            },
            pumpkinChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.07, 1, g.random(.98, 1)))
                }
            },
            pumpkinBreak: {
                image: ["part-pumpkin-01.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, 1, g.random(.95, .97)))
                }
            },
            squashChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.31, .86, g.random(.35, .36)))
                }
            },
            squashBreak: {
                image: ["part-pumpkin-01.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.31, .86, g.random(.35, .36)))
                }
            },
            redChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.98, 1, g.random(.52, .54)))
                }
            },
            redBreak: {
                image: ["part-spark-02.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.98, 1, g.random(.52, .54)))
                }
            },
            redPlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.02, 1, g.random(.26, .28)))
                }
            },
            rockChip: {
                image: ["map-stone-01.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.5, .75)))
                }
            },
            rockBreak: {
                image: ["map-stone-01.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.5, .75)))
                }
            },
            rockEyeChip: {
                image: ["map-stone-01.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.03,.06),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: 2696225
            },
            rockEyeBreak: {
                image: ["map-stone-01.img"],
                life: new o(.8,1),
                drag: new o(4,12),
                rotVel: 0,
                scale: {
                    start: new o(.05,.1),
                    end: new o(.03,.06),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 2696225
            },
            shackBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.1, .24, g.random(.38, .41)))
                }
            },
            shackGreenBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 5730406
            },
            tanChip: {
                image: ["part-woodchip-01.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.1, .35, g.random(.48, .52)))
                }
            },
            teahouseBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.6, .31, g.random(.42, .45)))
                }
            },
            teapavilionBreak: {
                image: ["part-panel-01.img"],
                life: new o(.5,1.5),
                drag: new o(1,5),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.25,.55),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, .8, g.random(.6, .62)))
                }
            },
            toiletBreak: {
                image: ["part-spark-02.img"],
                life: new o(.8,1),
                drag: new o(1,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.97, 0, g.random(.95, .97)))
                }
            },
            toiletMetalBreak: {
                image: ["part-spark-02.img"],
                life: new o(.8,1),
                drag: new o(4,5),
                rotVel: 0,
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.01, .02, g.random(.38, .41)))
                }
            },
            turkeyFeathersHit: {
                image: ["part-feather-01.img", "part-feather-02.img"],
                life: new o(1,1.5),
                drag: new o(1,10),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.12),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return 16777215
                }
            },
            turkeyFeathersDeath: {
                image: ["part-feather-01.img", "part-feather-02.img"],
                life: new o(1,1.5),
                drag: new o(1,10),
                rotVel: new o(0,Math.PI * 3),
                scale: {
                    start: new o(.15,.25),
                    end: new o(.12,.2),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return 16777215
                }
            },
            whiteChip: {
                image: ["part-spark-02.img"],
                life: .5,
                drag: new o(1,10),
                rotVel: 0,
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.97, 0, g.random(.95, .97)))
                }
            },
            whitePlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.97, 0, g.random(.95, .97)))
                }
            },
            windowBreak: {
                image: ["part-spark-02.img"],
                life: new o(.4,.8),
                drag: new o(1,4),
                rotVel: new o(Math.PI * 1,Math.PI * 6),
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .8,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 8444415
            },
            woodChip: {
                image: ["part-woodchip-01.img"],
                life: new o(.5,1),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.04,.08),
                    end: new o(.01,.02),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.05, 1, g.random(.35, .45)))
                }
            },
            woodLog: {
                image: ["part-log-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.05, 1, g.random(.35, .45)))
                }
            },
            woodPlank: {
                image: ["part-plank-01.img"],
                life: new o(1,1.5),
                drag: new o(1,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.1,.2),
                    end: new o(.08,.18),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.05, 1, g.random(.25, .35)))
                }
            },
            woodShard: {
                image: ["part-spark-02.img"],
                life: new o(1,1.5),
                drag: new o(3,5),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: new o(.06,.15),
                    end: new o(.02,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.05, 1, g.random(.25, .35)))
                }
            },
            "9mm": {
                image: ["part-shell-01.img"],
                life: new o(.5,.75),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .0625,
                    end: .0325,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "9mm_cursed": {
                image: ["part-shell-01.img"],
                life: new o(.5,.75),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .0625,
                    end: .0325,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "762mm": {
                image: ["part-shell-02.img"],
                life: new o(.75,1),
                drag: new o(1.5,2.5),
                rotVel: new o(Math.PI * 2.5,Math.PI * 2.5),
                scale: {
                    start: .075,
                    end: .045,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.925,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "556mm": {
                image: ["part-shell-04.img"],
                life: new o(.75,1),
                drag: new o(1.5,2.5),
                rotVel: new o(Math.PI * 2.5,Math.PI * 2.5),
                scale: {
                    start: .075,
                    end: .045,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.925,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "12gauge": {
                image: ["part-shell-03.img"],
                life: new o(.5,.75),
                drag: new o(1,2),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .1,
                    end: .05,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "50AE": {
                image: ["part-shell-01.img"],
                life: new o(.5,.75),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .0625,
                    end: .0325,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "308sub": {
                image: ["part-shell-05.img"],
                life: new o(.5,.75),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .0625,
                    end: .0325,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            flare: {
                image: ["part-shell-03.img"],
                life: new o(.5,.75),
                drag: new o(1,2),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .1,
                    end: .05,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            "45acp": {
                image: ["part-shell-01.img"],
                life: new o(.5,.75),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .07,
                    end: .04,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            potato_ammo: {
                image: ["part-wedge-01.img"],
                life: new o(.5,.75),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 3,Math.PI * 3),
                scale: {
                    start: .07,
                    end: .04,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.95,1)
                },
                color: 16777215
            },
            bugle_ammo: {
                image: ["part-note-02.img"],
                life: new o(1.25,1.3),
                drag: new o(3,4),
                rotVel: new o(Math.PI * 1,Math.PI * 1),
                scale: {
                    start: .1,
                    end: .14,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.5,1)
                },
                color: 16767488
            },
            fragPin: {
                image: ["part-frag-pin-01.img"],
                life: new o(.5,.5),
                drag: new o(.9,1),
                rotVel: 0,
                scale: {
                    start: .18,
                    end: .14,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.5,1)
                },
                color: 16777215
            },
            fragLever: {
                image: ["part-frag-lever-01.img"],
                life: new o(.5,.5),
                drag: new o(.9,1),
                rotVel: Math.PI * 9,
                scale: {
                    start: .18,
                    end: .14,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.5,1)
                },
                color: 16777215
            },
            explosionBurst: {
                image: ["part-frag-burst-01.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.065, 1, g.random(.98, .99)))
                }
            },
            explosionMIRV: {
                image: ["part-frag-burst-01.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 1, g.random(.82, .84)))
                }
            },
            explosionSmoke: {
                image: ["part-smoke-01.img"],
                life: new o(2,3),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            explosionUSAS: {
                image: ["part-frag-burst-01.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, 1, g.random(.98, .99)))
                }
            },
            explosionRounds: {
                image: ["part-frag-burst-03.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.08, .7, g.random(.75, .8)))
                }
            },
            explosionBomb: {
                image: ["part-frag-burst-02.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 16777215
            },
            explosionPotato: {
                image: ["part-frag-burst-01.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 11363866
            },
            explosionPotatoSMG: {
                image: ["part-frag-burst-01.img"],
                life: .5,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: 1,
                    end: 4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.75,1)
                },
                color: 12888074
            },
            airdropSmoke: {
                image: ["part-smoke-02.img", "part-smoke-03.img"],
                zOrd: 499,
                life: new o(1,1.5),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.67,.72),
                    end: new o(.55,.61),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            airdropCrate01: {
                image: ["part-airdrop-01.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate01h: {
                image: ["part-airdrop-01h.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate01x: {
                image: ["part-airdrop-01x.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate02: {
                image: ["part-airdrop-02.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate02h: {
                image: ["part-airdrop-02h.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate02x: {
                image: ["part-airdrop-02x.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate03: {
                image: ["part-airdrop-03.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            airdropCrate04: {
                image: ["part-airdrop-04.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            classShell01a: {
                image: ["part-class-shell-01a.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            classShell01b: {
                image: ["part-class-shell-01b.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            classShell02a: {
                image: ["part-class-shell-02a.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            classShell02b: {
                image: ["part-class-shell-02b.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            classShell03a: {
                image: ["part-class-shell-03a.img"],
                life: new o(.85,1.15),
                drag: new o(2,2.25),
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            classShell03b: {
                image: ["part-class-shell-03b.img"],
                life: new o(.85,1.15),
                drag: new o(1.85,2.15),
                rotVel: new o(0,Math.PI * 2),
                scale: {
                    start: .5,
                    end: .4,
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16777215
            },
            cabinSmoke: {
                image: ["part-smoke-02.img", "part-smoke-03.img"],
                life: new o(3,3.25),
                drag: new o(.2,.22),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.2,.25),
                    end: new o(.6,.65),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .7,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: .7,
                    lerp: new o(0,.1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.69, .695)))
                }
            },
            bathhouseSteam: {
                image: ["part-smoke-02.img", "part-smoke-03.img"],
                life: new o(10,12),
                drag: new o(.04,.06),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.2,.25),
                    end: new o(.9,.95),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .5,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: .5,
                    lerp: new o(0,.1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.99, .995)))
                }
            },
            bunkerBubbles: {
                image: ["player-ripple-01.img"],
                zOrd: 10,
                life: new o(2.25,2.5),
                drag: new o(1.85,2.15),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.2,.25),
                    end: new o(.65,.7),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: .25,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.95, 1)))
                }
            },
            waterRipple: {
                image: ["player-ripple-01.img"],
                zOrd: 10,
                life: 1.75,
                drag: 0,
                rotVel: 0,
                scale: {
                    start: .15,
                    exp: .5
                },
                alpha: {
                    start: 1,
                    exp: -1
                },
                color: 11792639
            },
            leafAutumn: {
                image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.15),
                    end: new o(.08,.11),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            leafHalloween: {
                image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.15),
                    end: new o(.08,.11),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.5, .55)))
                },
                ignoreValueAdjust: !0
            },
            leafSpring: {
                image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.13,.15),
                    end: new o(.08,.11),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            leafSummer: {
                image: ["part-leaf-06.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.15),
                    end: new o(.08,.11),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.7, .95)))
                },
                ignoreValueAdjust: !0
            },
            leafPotato: {
                image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img", "part-potato-02.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.13,.15),
                    end: new o(.08,.11),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            potato: {
                image: ["part-potato-02.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.13,.15),
                    end: new o(.08,.11),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            snow: {
                image: ["part-snow-01.img"],
                life: new o(10,15),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.07,.12),
                    end: new o(.05,.1),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            snowball_impact: {
                image: ["part-snow-01.img"],
                life: new o(.5,1),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.13,.23),
                    end: new o(.07,.14),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            potato_impact: {
                image: ["part-potato-01.img"],
                life: new o(.5,1),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.13,.23),
                    end: new o(.07,.14),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95)))
                }
            },
            potato_smg_impact: {
                image: ["part-potato-01.img"],
                life: new o(.5,1),
                drag: new o(0,0),
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.13,.23),
                    end: new o(.07,.14),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.9,1)
                },
                color: 16770437
            },
            heal_basic: {
                image: ["part-heal-basic.img"],
                life: new o(.75,1),
                drag: .25,
                rotVel: 0,
                scale: {
                    start: new o(.1,.12),
                    end: new o(.05,.07),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            heal_heart: {
                image: ["part-heal-heart.img"],
                life: new o(.75,1),
                drag: .25,
                rotVel: 0,
                scale: {
                    start: new o(.1,.12),
                    end: new o(.05,.07),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            heal_moon: {
                image: ["part-heal-moon.img"],
                life: new o(.75,1),
                drag: .25,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.1,.12),
                    end: new o(.05,.07),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            heal_tomoe: {
                image: ["part-heal-tomoe.img"],
                life: new o(.75,1),
                drag: .25,
                rotVel: new o(Math.PI * .5,Math.PI * 1),
                scale: {
                    start: new o(.1,.12),
                    end: new o(.05,.07),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(0, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            boost_basic: {
                image: ["part-boost-basic.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.3, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            boost_star: {
                image: ["part-boost-star.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.3, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            boost_naturalize: {
                image: ["part-boost-naturalize.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * .35,Math.PI * .7),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.3, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            boost_shuriken: {
                image: ["part-boost-shuriken.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * 1,Math.PI * 2),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.3, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            revive_basic: {
                image: ["part-heal-basic.img"],
                life: new o(.75,1),
                drag: .25,
                rotVel: 0,
                scale: {
                    start: new o(.1,.12),
                    end: new o(.05,.07),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.83, 1, g.random(.7, 1)))
                },
                ignoreValueAdjust: !0
            },
            leafStim: {
                image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
                life: new o(4,5),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.37, 1, g.random(.95, 1)))
                }
            },
            takedownStim: {
                image: ["part-takedown-01.img"],
                life: new o(4,5),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: 13107200
            },
            inspireStim: {
                image: ["part-note-01.img"],
                life: new o(4,5),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return g.rgbToInt(g.hsvToRgb(.13, 1, g.random(.98, 1)))
                }
            },
            xp_common: {
                image: ["part-boost-basic.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return Math.random() > .5 ? g.rgbToInt(g.hsvToRgb(.12, .97, g.random(.95, 1))) : g.rgbToInt(g.hsvToRgb(.16, 1, g.random(.95, 1)))
                },
                ignoreValueAdjust: !0
            },
            xp_rare: {
                image: ["part-boost-basic.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return Math.random() > .5 ? g.rgbToInt(g.hsvToRgb(.05, .94, g.random(.85, .88))) : g.rgbToInt(g.hsvToRgb(.06, .95, g.random(.95, 1)))
                },
                ignoreValueAdjust: !0
            },
            xp_mythic: {
                image: ["part-boost-basic.img"],
                life: new o(.75,1),
                drag: 0,
                rotVel: new o(Math.PI * .25,Math.PI * .5),
                scale: {
                    start: new o(.12,.14),
                    end: new o(.06,.08),
                    lerp: new o(0,1)
                },
                alpha: {
                    start: 1,
                    end: 0,
                    lerp: new o(.7,1)
                },
                alphaIn: {
                    start: 0,
                    end: 1,
                    lerp: new o(0,.05)
                },
                color: function() {
                    return Math.random() > .5 ? g.rgbToInt(g.hsvToRgb(0, .96, g.random(.91, .94))) : g.rgbToInt(g.hsvToRgb(.03, .95, g.random(.92, .95)))
                },
                ignoreValueAdjust: !0
            }
        }
            , Yi = {
            smoke_barrel: {
                particle: "explosionSmoke",
                rate: new o(.2,.3),
                radius: 0,
                speed: new o(2,3),
                angle: Math.PI * .1,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            cabin_smoke_parent: {
                particle: "cabinSmoke",
                rate: new o(.72,.83),
                radius: 0,
                speed: new o(64,96),
                angle: Math.PI * .1,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            bathhouse_steam: {
                particle: "bathhouseSteam",
                rate: new o(2,3),
                radius: 1,
                speed: new o(1.5,2),
                angle: Math.PI * .1,
                maxCount: Number.MAX_VALUE
            },
            bunker_bubbles_01: {
                particle: "bunkerBubbles",
                rate: new o(.3,.325),
                radius: 0,
                speed: new o(1.6,1.8),
                angle: Math.PI * -2.2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            bunker_bubbles_02: {
                particle: "bunkerBubbles",
                rate: new o(.4,.425),
                radius: 0,
                speed: new o(1.6,1.8),
                angle: Math.PI * -2.2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            falling_leaf: {
                particle: "leafAutumn",
                rate: new o(.08,.12),
                radius: 120,
                speed: new o(2,3),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_leaf_halloween: {
                particle: "leafHalloween",
                rate: new o(.08,.12),
                radius: 120,
                speed: new o(2,3),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_leaf_spring: {
                particle: "leafSpring",
                rate: new o(.1,.14),
                radius: 120,
                speed: new o(2,3),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_leaf_summer: {
                particle: "leafSummer",
                rate: new o(.18,.24),
                radius: 120,
                speed: new o(1.4,2.4),
                angle: Math.PI * .2,
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_leaf_potato: {
                particle: "leafPotato",
                rate: new o(.1,.14),
                radius: 120,
                speed: new o(2,3),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_potato: {
                particle: "potato",
                rate: new o(.2,.24),
                radius: 120,
                speed: new o(2,3),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_snow_fast: {
                particle: "snow",
                rate: new o(.12,.17),
                maxRate: new o(.05,.07),
                maxElapsed: 240,
                radius: 70,
                speed: new o(1,1.5),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            falling_snow_slow: {
                particle: "snow",
                rate: new o(.08,.12),
                radius: 70,
                speed: new o(1,1.5),
                angle: Math.PI * .2,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE,
                zOrd: 999
            },
            heal_basic: {
                particle: "heal_basic",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            heal_heart: {
                particle: "heal_heart",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            heal_moon: {
                particle: "heal_moon",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            heal_tomoe: {
                particle: "heal_tomoe",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            boost_basic: {
                particle: "boost_basic",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            boost_star: {
                particle: "boost_star",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            boost_naturalize: {
                particle: "boost_naturalize",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            boost_shuriken: {
                particle: "boost_shuriken",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: new o(0,Math.PI * 2),
                maxCount: Number.MAX_VALUE
            },
            revive_basic: {
                particle: "revive_basic",
                rate: new o(.5,.55),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            windwalk: {
                particle: "leafStim",
                rate: new o(.1,.12),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            takedown: {
                particle: "takedownStim",
                rate: new o(.1,.12),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            inspire: {
                particle: "inspireStim",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            xp_common: {
                particle: "xp_common",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            xp_rare: {
                particle: "xp_rare",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            },
            xp_mythic: {
                particle: "xp_mythic",
                rate: new o(.3,.35),
                radius: 1.5,
                speed: new o(1,1.5),
                angle: 0,
                rot: 0,
                maxCount: Number.MAX_VALUE
            }
        }
            , Ya = 1.25
            , Dt = .75
            , Ja = .75
            , Ji = 2;
        class es {
            active = !1;
            sprite = new ee;
            soundRangeMult;
            id;
            pos;
            planeDir;
            actionComplete;
            dirty;
            soundInstance;
            soundUpdateThrottle;
            alpha;
            renderAlpha;
            spriteUpdateTime;
            type;
            config;
            rad;
            planeSound;
            constructor() {
                this.sprite.anchor.set(.5, .5),
                this.sprite.visible = !1
            }
            _0x113(e, t) {
                switch (this.id = e.id,
                this.pos = n.copy(e.pos),
                this.planeDir = n.copy(e.planeDir),
                this.actionComplete = e.actionComplete,
                this.active = !0,
                this.dirty = !1,
                this.soundInstance = null,
                this.soundUpdateThrottle = 0,
                this.alpha = Dt,
                this.renderAlpha = 1,
                this.spriteUpdateTime = 0,
                this.type = e.action,
                this.config = this.type == R.Plane.Airdrop ? R.airdrop : R.airstrike,
                this.rad = this.config.planeRad,
                this.type) {
                case R.Plane.Airdrop:
                    this.sprite.texture = H.from(t.getMapDef().biome.airdrop.planeImg),
                    this.planeSound = t.getMapDef().biome.airdrop.planeSound;
                    break;
                case R.Plane.Airstrike:
                    this.sprite.texture = H.from("map-plane-02.img"),
                    this.planeSound = "fighter_01"
                }
                this.sprite.visible = !0,
                this.sprite.rotation = Math.atan2(this.planeDir.x, this.planeDir.y)
            }
            _0x60(e) {
                this.spriteUpdateTime >= Ji && (this.soundInstance && (e.stopSound(this.soundInstance),
                this.soundInstance = null),
                this.sprite.visible = !1,
                this.active = !1)
            }
        }
        class ts {
            constructor(e) {
                this.container = e,
                e.addChild(this.gfx)
            }
            active = !1;
            pos = n.create(0, 0);
            rad = 0;
            duration = 0;
            ticker = 0;
            gfx = new pe;
            renderPos;
            renderRad;
            _0x113(e, t, i) {
                this.active = !0,
                this.pos = n.copy(e),
                this.rad = t,
                this.duration = i,
                this.ticker = 0,
                this.renderPos = n.create(0, 0),
                this.renderRad = 0,
                this.gfx.visible = !0
            }
            _0x62(e) {
                this.ticker += e,
                this.gfx.visible = !0,
                this.ticker >= this.duration && (this.gfx.visible = !1,
                this.active = !1)
            }
            render(e, t, i) {
                const r = e.getMapPosFromWorldPos(this.pos, t)
                    , a = e.getMapPosFromWorldPos(n.add(this.pos, n.create(this.rad, 0)), t)
                    , l = n.length(n.sub(a, r))
                    , s = !n.eq(this.renderPos, r, 1e-4)
                    , m = !z.eqAbs(this.renderRad, l, 1e-4);
                s && (this.renderPos = n.copy(r)),
                m && (this.renderRad = l),
                s && this.gfx.position.set(this.renderPos.x, this.renderPos.y),
                m && (this.gfx.clear(),
                this.gfx.lineStyle(1.5, 15400704),
                this.gfx.beginFill(15400704, .2),
                this.gfx.drawCircle(0, 0, this.renderRad),
                this.gfx.endFill());
                const d = z.smoothstep(this.ticker, 0, .5) * (1 - z.smoothstep(this.ticker, this.duration - .5, this.duration));
                this.gfx.alpha = d
            }
        }
        class is {
            constructor(e) {
                this.audioManager = e
            }
            planes = [];
            airstrikeZones = [];
            airstrikeZoneContainer = new J;
            _0x60() {
                for (let e = 0; e < this.planes.length; e++)
                    this.planes[e]._0x60(this.audioManager)
            }
            updatePlanes(e, t) {
                for (let i = 0; i < this.planes.length; i++)
                    this.planes[i].dirty = !0;
                for (let i = 0; i < e.length; i++) {
                    const r = e[i];
                    let a = null;
                    for (let l = 0; l < this.planes.length; l++) {
                        const s = this.planes[l];
                        if (s.active && s.id == r.id) {
                            a = s;
                            break
                        }
                    }
                    a ||= this.addPlane(r, t),
                    a.dirty = !1,
                    a.actionComplete = r.actionComplete
                }
                for (let i = 0; i < this.planes.length; i++) {
                    const r = this.planes[i];
                    r.active && r.dirty && r._0x60(this.audioManager)
                }
            }
            addPlane(e, t) {
                let i = null;
                for (let r = 0; r < this.planes.length; r++)
                    if (!this.planes[r].active) {
                        i = this.planes[r];
                        break
                    }
                return i || (i = new es,
                this.planes.push(i)),
                i._0x113(e, t),
                i
            }
            createAirstrikeZone(e) {
                let t = null;
                for (let i = 0; i < this.airstrikeZones.length; i++)
                    if (!this.airstrikeZones[i]) {
                        t = this.airstrikeZones[i];
                        break
                    }
                return t || (t = new ts(this.airstrikeZoneContainer),
                this.airstrikeZones.push(t)),
                t._0x113(e.pos, e.rad, e.duration),
                t
            }
            _0x62(e, t, i, r, a) {
                for (let l = 0; l < this.planes.length; l++) {
                    const s = this.planes[l];
                    if (s.active) {
                        let m = 0;
                        if ((g.sameLayer(m, i.layer) || i.layer & 2) && (!(i.layer & 2) || !r.insideStructureMask(U.createCircle(s.pos, 1))) && (m |= 2),
                        s.pos = n.add(s.pos, n.mul(s.planeDir, e * s.config.planeVel)),
                        s.actionComplete && (s.spriteUpdateTime = Math.min(s.spriteUpdateTime + e, Ji),
                        s.rad = z.lerp(s.spriteUpdateTime, s.config.planeRad, s.config.planeRad * Ya),
                        s.alpha = z.lerp(s.spriteUpdateTime, Dt, Dt * Ja),
                        s.soundRangeMult = z.max(0, z.lerp(s.spriteUpdateTime, s.config.soundRangeMult, s.config.soundRangeMult - s.config.soundRangeDelta))),
                        s.soundInstance)
                            s.soundUpdateThrottle < 0 ? (this.audioManager.updateSound(s.soundInstance, "sfx", s.pos, {
                                layer: m,
                                rangeMult: s.config.soundRangeMult,
                                ignoreMinAllowable: !0,
                                fallOff: s.config.fallOff
                            }),
                            s.soundUpdateThrottle = .1) : s.soundUpdateThrottle -= e;
                        else {
                            const f = n.length(n.sub(i._0x63, s.pos))
                                , S = s.config.soundRangeMax * s.config.soundRangeMult;
                            let x = 0;
                            if (s.type == R.Plane.Airstrike) {
                                const k = z.max(150, f);
                                x = (1 - z.clamp(z.max(0, k) / 800, 0, 1)) * 2.25
                            }
                            f < S && (s.soundInstance = this.audioManager.playSound(s.planeSound, {
                                channel: "sfx",
                                soundPos: s.pos,
                                layer: m,
                                loop: !0,
                                rangeMult: 2.5,
                                ignoreMinAllowable: !0,
                                fallOff: s.config.fallOff,
                                offset: x
                            }))
                        }
                        a.addPIXIObj(s.sprite, m, 1501, s.id);
                        const d = t._0x105(s.pos)
                            , h = t._0x106(s.rad / t._0x68)
                            , p = r.insideBuildingCeiling(U.createCircle(i._0x63, .01), !0);
                        let w = s.alpha;
                        i.layer == 1 ? w = 0 : (p || i.layer & 1) && (w = .15),
                        s.renderAlpha = z.lerp(e * 3, s.renderAlpha, w),
                        s.sprite.position.set(d.x, d.y),
                        s.sprite.scale.set(h, h),
                        s.sprite.tint = 16776960,
                        s.sprite.alpha = s.renderAlpha,
                        s.sprite.visible = !0
                    }
                }
                for (let l = 0; l < this.airstrikeZones.length; l++) {
                    const s = this.airstrikeZones[l];
                    s.active && s._0x62(e)
                }
            }
            renderAirstrikeZones(e, t, i) {
                for (let r = 0; r < this.airstrikeZones.length; r++) {
                    const a = this.airstrikeZones[r];
                    a.active && a.render(e, t, i)
                }
            }
        }
        function j(u, e) {
            return {
                time: u,
                bones: e
            }
        }
        function Y(u, e, t) {
            return {
                time: u,
                fn: e,
                args: t
            }
        }
        class I {
            constructor(e=n.create(0, 0), t=0, i=n.create(0, 0)) {
                this.pivot = e,
                this.rot = t,
                this.pos = i,
                this.pivot = n.copy(e),
                this.rot = 0,
                this.pos = n.copy(i)
            }
            copy(e) {
                n.set(this.pivot, e.pivot),
                this.rot = e.rot,
                n.set(this.pos, e.pos)
            }
            rotate(e) {
                return this.rot = e,
                this
            }
            offset(e) {
                return this.pos = n.copy(e),
                this
            }
            static identity = new I(n.create(0, 0));
            static lerp(e, t, i) {
                const r = new I;
                return r.pos = n.lerp(e, t.pos, i.pos),
                r.rot = z.lerp(e, t.rot, i.rot),
                r.pivot = n.lerp(e, t.pivot, i.pivot),
                r
            }
        }
        var Ce = (u => (u[u.HandL = 0] = "HandL",
        u[u.HandR = 1] = "HandR",
        u[u.FootL = 2] = "FootL",
        u[u.FootR = 3] = "FootR",
        u))(Ce || {});
        Ri(Object.keys(Ce).length % 2 == 0);
        const ui = {
            fists: {
                0: new I(n.create(14, -12.25)),
                1: new I(n.create(14, 12.25))
            },
            slash: {
                0: new I(n.create(18, -8.25)),
                1: new I(n.create(6, 20.25))
            },
            meleeTwoHanded: {
                0: new I(n.create(10.5, -14.25)),
                1: new I(n.create(18, 6.25))
            },
            meleeKatana: {
                0: new I(n.create(8.5, 13.25)),
                1: new I(n.create(-3, 17.75))
            },
            meleeNaginata: {
                0: new I(n.create(19, -7.25)),
                1: new I(n.create(8.5, 24.25))
            },
            machete: {
                0: new I(n.create(14, -12.25)),
                1: new I(n.create(1, 17.75))
            },
            rifle: {
                0: new I(n.create(28, 5.25)),
                1: new I(n.create(14, 1.75))
            },
            dualRifle: {
                0: new I(n.create(5.75, -16)),
                1: new I(n.create(5.75, 16))
            },
            bullpup: {
                0: new I(n.create(28, 5.25)),
                1: new I(n.create(24, 1.75))
            },
            launcher: {
                0: new I(n.create(20, 10)),
                1: new I(n.create(2, 22))
            },
            pistol: {
                0: new I(n.create(14, 1.75)),
                1: new I(n.create(14, 1.75))
            },
            dualPistol: {
                0: new I(n.create(15.75, -8.75)),
                1: new I(n.create(15.75, 8.75))
            },
            throwable: {
                0: new I(n.create(15.75, -9.625)),
                1: new I(n.create(15.75, 9.625))
            },
            downed: {
                0: new I(n.create(14, -12.25)),
                1: new I(n.create(14, 12.25)),
                2: new I(n.create(-15.75, -9)),
                3: new I(n.create(-15.75, 9))
            }
        }
            , W = B
            , rs = {
            none: {
                keyframes: [],
                effects: []
            },
            fists: {
                keyframes: [j(0, {
                    1: new I(n.create(14, 12.25))
                }), j(W.fists.attack.damageTimes[0], {
                    1: new I(n.create(29.75, 1.75))
                }), j(W.fists.attack.cooldownTime, {
                    1: new I(n.create(14, 12.25))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.fists.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            cut: {
                keyframes: [j(0, {
                    1: new I(n.create(14, 12.25))
                }), j(W.fists.attack.damageTimes[0] * .25, {
                    1: new I(n.create(14, 12.25)).rotate(-Math.PI * .35)
                }), j(W.fists.attack.damageTimes[0] * 1.25, {
                    1: new I(n.create(14, 12.25)).rotate(Math.PI * .35)
                }), j(W.fists.attack.cooldownTime, {
                    1: new I(n.create(14, 12.25))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.fists.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            cutReverse: {
                keyframes: [j(0, {
                    1: new I(n.create(1, 17.75))
                }), j(W.fists.attack.damageTimes[0] * .4, {
                    1: new I(n.create(25, 6.25)).rotate(Math.PI * .3)
                }), j(W.fists.attack.damageTimes[0] * 1.4, {
                    1: new I(n.create(25, 6.25)).rotate(-Math.PI * .5)
                }), j(W.fists.attack.cooldownTime, {
                    1: new I(n.create(1, 17.75))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.fists.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            thrust: {
                keyframes: [j(0, {
                    1: new I(n.create(14, 12.25))
                }), j(W.fists.attack.damageTimes[0] * .4, {
                    1: new I(n.create(5, 12.25)).rotate(Math.PI * .1)
                }), j(W.fists.attack.damageTimes[0] * 1.4, {
                    1: new I(n.create(25, 6.25)).rotate(-Math.PI * 0)
                }), j(W.fists.attack.cooldownTime, {
                    1: new I(n.create(14, 12.25))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.fists.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            slash: {
                keyframes: [j(0, {
                    0: new I(n.create(18, -8.25)),
                    1: new I(n.create(6, 20.25))
                }), j(W.fists.attack.damageTimes[0], {
                    0: new I(n.create(6, -22.25)),
                    1: new I(n.create(6, 20.25)).rotate(-Math.PI * .6)
                }), j(W.fists.attack.cooldownTime, {
                    0: new I(n.create(18, -8.25)),
                    1: new I(n.create(6, 20.25)).rotate(0)
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.fists.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            hook: {
                keyframes: [j(0, {
                    1: new I(n.create(14, 12.25))
                }), j(W.hook.attack.damageTimes[0] * .25, {
                    1: new I(n.create(14, 12.25)).rotate(Math.PI * .1)
                }), j(W.hook.attack.damageTimes[0], {
                    1: new I(n.create(24, 1.75))
                }), j(W.hook.attack.damageTimes[0] + .05, {
                    1: new I(n.create(14, 12.25)).rotate(Math.PI * -.3)
                }), j(W.hook.attack.damageTimes[0] + .1, {
                    1: new I(n.create(14, 12.25))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.hook.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            pan: {
                keyframes: [j(0, {
                    1: new I(n.create(14, 12.25))
                }), j(.15, {
                    1: new I(n.create(22, -8.25)).rotate(-Math.PI * .2)
                }), j(.25, {
                    1: new I(n.create(28, -8.25)).rotate(Math.PI * .5)
                }), j(.55, {
                    1: new I(n.create(14, 12.25))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.pan.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            axeSwing: {
                keyframes: [j(0, {
                    0: new I(n.create(10.5, -14.25)),
                    1: new I(n.create(18, 6.25))
                }), j(W.woodaxe.attack.damageTimes[0] * .4, {
                    0: new I(n.create(9, -14.25)).rotate(Math.PI * .4),
                    1: new I(n.create(18, 6.25)).rotate(Math.PI * .4)
                }), j(W.woodaxe.attack.damageTimes[0], {
                    0: new I(n.create(9, -14.25)).rotate(-Math.PI * .4),
                    1: new I(n.create(18, 6.25)).rotate(-Math.PI * .4)
                }), j(W.woodaxe.attack.cooldownTime, {
                    0: new I(n.create(10.5, -14.25)),
                    1: new I(n.create(18, 6.25))
                })],
                effects: [Y(W.woodaxe.attack.damageTimes[0], "animPlaySound", {
                    sound: "swing"
                }), Y(W.woodaxe.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            hammerSwing: {
                keyframes: [j(0, {
                    0: new I(n.create(10.5, -14.25)),
                    1: new I(n.create(18, 6.25))
                }), j(W.stonehammer.attack.damageTimes[0] * .4, {
                    0: new I(n.create(9, -14.25)).rotate(Math.PI * .4),
                    1: new I(n.create(18, 6.25)).rotate(Math.PI * .4)
                }), j(W.stonehammer.attack.damageTimes[0], {
                    0: new I(n.create(9, -14.25)).rotate(-Math.PI * .4),
                    1: new I(n.create(18, 6.25)).rotate(-Math.PI * .4)
                }), j(W.stonehammer.attack.cooldownTime, {
                    0: new I(n.create(10.5, -14.25)),
                    1: new I(n.create(18, 6.25))
                })],
                effects: [Y(W.stonehammer.attack.damageTimes[0], "animPlaySound", {
                    sound: "swing"
                }), Y(W.stonehammer.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            katanaSwing: {
                keyframes: [j(0, {
                    0: new I(n.create(8.5, 13.25)),
                    1: new I(n.create(-3, 17.75))
                }), j(W.katana.attack.damageTimes[0] * .3, {
                    0: new I(n.create(8.5, 13.25)).rotate(Math.PI * .2),
                    1: new I(n.create(-3, 17.75)).rotate(Math.PI * .2)
                }), j(W.katana.attack.damageTimes[0] * .9, {
                    0: new I(n.create(8.5, 13.25)).rotate(-Math.PI * 1.2),
                    1: new I(n.create(-3, 17.75)).rotate(-Math.PI * 1.2)
                }), j(W.katana.attack.cooldownTime, {
                    0: new I(n.create(8.5, 13.25)),
                    1: new I(n.create(-3, 17.75))
                })],
                effects: [Y(W.katana.attack.damageTimes[0], "animPlaySound", {
                    sound: "swing"
                }), Y(W.katana.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            naginataSwing: {
                keyframes: [j(0, {
                    0: new I(n.create(19, -7.25)),
                    1: new I(n.create(8.5, 24.25))
                }), j(W.naginata.attack.damageTimes[0] * .3, {
                    0: new I(n.create(19, -7.25)).rotate(Math.PI * .3),
                    1: new I(n.create(8.5, 24.25)).rotate(Math.PI * .3)
                }), j(W.naginata.attack.damageTimes[0] * .9, {
                    0: new I(n.create(19, -7.25)).rotate(-Math.PI * .85),
                    1: new I(n.create(8.5, 24.25)).rotate(-Math.PI * .85)
                }), j(W.naginata.attack.cooldownTime, {
                    0: new I(n.create(19, -7.25)),
                    1: new I(n.create(8.5, 24.25))
                })],
                effects: [Y(W.woodaxe.attack.damageTimes[0], "animPlaySound", {
                    sound: "swing"
                }), Y(W.woodaxe.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            sawSwing: {
                keyframes: [j(0, {
                    1: new I(n.create(1, 17.75))
                }), j(W.saw.attack.damageTimes[0] * .4, {
                    1: new I(n.create(25, 6.25)).rotate(Math.PI * .3)
                }), j(W.saw.attack.damageTimes[0], {
                    1: new I(n.create(25, 6.25)).rotate(-Math.PI * .3)
                }), j(W.saw.attack.damageTimes[1] - .1, {
                    1: new I(n.create(25, 17.75)).rotate(-Math.PI * .25)
                }), j(W.saw.attack.damageTimes[1] * .6, {
                    1: new I(n.create(-36, 7.75)).rotate(-Math.PI * .25)
                }), j(W.saw.attack.damageTimes[1] + .2, {
                    1: new I(n.create(1, 17.75))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(.4, "animPlaySound", {
                    sound: "swing"
                }), Y(W.saw.attack.damageTimes[0], "animMeleeCollision", {}), Y(W.saw.attack.damageTimes[1], "animMeleeCollision", {
                    playerHit: "playerHit2"
                })]
            },
            cutReverseShort: {
                keyframes: [j(0, {
                    1: new I(n.create(1, 17.75))
                }), j(W.saw.attack.damageTimes[0] * .4, {
                    1: new I(n.create(25, 6.25)).rotate(Math.PI * .3)
                }), j(W.saw.attack.damageTimes[0], {
                    1: new I(n.create(25, 6.25)).rotate(-Math.PI * .3)
                }), j(W.fists.attack.cooldownTime, {
                    1: new I(n.create(14, 17.75))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "swing"
                }), Y(W.fists.attack.damageTimes[0], "animMeleeCollision", {})]
            },
            cook: {
                keyframes: [j(0, {
                    0: new I(n.create(15.75, -9.625)),
                    1: new I(n.create(15.75, 9.625))
                }), j(.1, {
                    0: new I(n.create(14, -1.75)),
                    1: new I(n.create(14, 1.75))
                }), j(.3, {
                    0: new I(n.create(14, -1.75)),
                    1: new I(n.create(14, 1.75))
                }), j(.4, {
                    0: new I(n.create(22.75, -1.75)),
                    1: new I(n.create(1.75, 14))
                }), j(99999, {
                    0: new I(n.create(22.75, -1.75)),
                    1: new I(n.create(1.75, 14))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "pullPin"
                }), Y(.1, "animSetThrowableState", {
                    state: "cook"
                })]
            },
            throw: {
                keyframes: [j(0, {
                    0: new I(n.create(22.75, -1.75)),
                    1: new I(n.create(1.75, 14.175))
                }), j(.15, {
                    0: new I(n.create(5.25, -15.75)),
                    1: new I(n.create(29.75, 1.75))
                }), j(.15 + R.player.throwTime, {
                    0: new I(n.create(15.75, -9.625)),
                    1: new I(n.create(15.75, 9.625))
                })],
                effects: [Y(0, "animPlaySound", {
                    sound: "throwing"
                }), Y(0, "animSetThrowableState", {
                    state: "throwing"
                }), Y(0, "animThrowableParticles", {})]
            },
            crawl_forward: {
                keyframes: [j(0, {
                    0: new I(n.create(14, -12.25)),
                    2: new I(n.create(-15.75, -9))
                }), j(R.player.crawlTime * .33, {
                    0: new I(n.create(19.25, -10.5)),
                    2: new I(n.create(-20.25, -9))
                }), j(R.player.crawlTime * .66, {
                    0: new I(n.create(5.25, -15.75)),
                    2: new I(n.create(-11.25, -9))
                }), j(R.player.crawlTime * 1, {
                    0: new I(n.create(14, -12.25)),
                    2: new I(n.create(-15.75, -9))
                })],
                effects: []
            },
            crawl_backward: {
                keyframes: [j(0, {
                    0: new I(n.create(14, -12.25)),
                    2: new I(n.create(-15.75, -9))
                }), j(R.player.crawlTime * .33, {
                    0: new I(n.create(5.25, -15.75)),
                    2: new I(n.create(-11.25, -9))
                }), j(R.player.crawlTime * .66, {
                    0: new I(n.create(19.25, -10.5)),
                    2: new I(n.create(-20.25, -9))
                }), j(R.player.crawlTime * 1, {
                    0: new I(n.create(14, -12.25)),
                    2: new I(n.create(-15.75, -9))
                })],
                effects: []
            },
            revive: {
                keyframes: [j(0, {
                    0: new I(n.create(14, -12.25)),
                    1: new I(n.create(14, 12.25))
                }), j(.2, {
                    0: new I(n.create(24.5, -8.75)),
                    1: new I(n.create(5.25, 21))
                }), j(.2 + R.player.reviveDuration, {
                    0: new I(n.create(24.5, -8.75)),
                    1: new I(n.create(5.25, 21))
                })],
                effects: []
            }
        }
            , er = {
            "proj-frag-nopin-01.img": "proj-frag-nopin-02.img",
            "proj-frag-nopin-nolever-01.img": "proj-frag-nopin-nolever-02.img",
            "proj-frag-pin-01.img": "proj-frag-pin-02.img",
            "proj-mirv-mini-01.img": "proj-mirv-mini-02.img"
        };
        class as {
            __id;
            __type;
            active;
            isNew;
            container = new J;
            trail = ee.from("player-bullet-trail-02.img");
            sprite = new ee;
            strobeSprite = null;
            layer;
            type;
            rad;
            pos;
            posOld;
            posZ;
            posZOld;
            dir;
            imgScale;
            rot;
            rotVel;
            rotDrag;
            velZ;
            grounded;
            inWater;
            lastSoundObjId;
            playHitSfx;
            alwaysRenderOntop;
            strobeScale;
            strobeScaleMax;
            strobeTicker;
            strobeDir;
            strobeSpeed;
            constructor() {
                this.container.visible = !1,
                this.trail.anchor.set(1, .5),
                this.trail.scale.set(1, 1),
                this.trail.visible = !1,
                this.container.addChild(this.trail),
                this.sprite.anchor.set(.5, .5),
                this.container.addChild(this.sprite)
            }
            _0x113() {}
            _0x60() {
                this.container.visible = !1,
                this.strobeSprite && (this.strobeSprite.visible = !1)
            }
            _0x119(e, t, i, r) {
                if (t) {
                    const a = B[e.type];
                    this.layer = e.layer,
                    this.type = e.type,
                    this.rad = a.rad * .5
                }
                if (this.posOld = i ? n.copy(e.pos) : n.copy(this.pos),
                this.posZOld = i ? e.posZ : this.posZ,
                this.pos = n.copy(e.pos),
                this.posZ = e.posZ,
                this.dir = n.copy(e.dir),
                i) {
                    const a = B[e.type]
                        , l = a.worldImg;
                    this.imgScale = l.scale,
                    this.rot = 0,
                    this.rotVel = a.throwPhysics.spinVel,
                    a.throwPhysics.randomizeSpinDir && Math.random() < .5 && (this.rotVel *= -1),
                    this.rotDrag = a.throwPhysics.spinDrag * g.random(1, 2),
                    this.velZ = 0,
                    this.grounded = !1,
                    this.inWater = !1,
                    this.lastSoundObjId = 0,
                    this.playHitSfx = !a.explodeOnImpact,
                    this.alwaysRenderOntop = !1;
                    let s = !0;
                    if (this.type == "bomb_iron") {
                        this.alwaysRenderOntop = !0;
                        const d = U.createCircle(this.pos, .5);
                        r.map.insideBuildingCeiling(d, !0) && (s = !1)
                    }
                    let m = l.sprite;
                    r.map.mapDef.gameMode.spookyKillSounds && (m = er[m] || m),
                    this.sprite.texture = H.from(m),
                    this.sprite.tint = l.tint,
                    this.sprite.alpha = 1,
                    this.container.visible = s,
                    e.type == "strobe" && (this.strobeSprite || (this.strobeSprite = new ee,
                    this.strobeSprite.texture = H.from("part-strobe-01.img"),
                    this.strobeSprite.anchor.set(.5, .5),
                    this.container.addChild(this.strobeSprite)),
                    this.strobeSprite.scale.set(0, 0),
                    this.strobeSprite.visible = !0,
                    this.strobeScale = 0,
                    this.strobeScaleMax = 12,
                    this.strobeTicker = 0,
                    this.strobeDir = 1,
                    this.strobeSpeed = 1.25)
                }
            }
        }
        const ss = {
            grass: "frag_grass",
            sand: "frag_sand",
            water: "frag_water"
        };
        class os {
            projectilePool = new be(as);
            _0x62(e, t, i, r, a, l, s) {
                const m = this.projectilePool._0x89();
                for (let d = 0; d < m.length; d++) {
                    const h = m[d];
                    if (h.active) {
                        const p = B[h.type];
                        let w = h.rotDrag;
                        h.inWater && (w *= 3),
                        h.rotVel *= 1 / (1 + e * w),
                        h.rot += h.rotVel * e;
                        const f = {
                            obj: null,
                            pen: 0
                        }
                            , S = {
                            obj: null,
                            pen: 0
                        }
                            , x = U.createCircle(h.pos, h.rad)
                            , y = a._0x53._0x89();
                        for (let O = 0; O < y.length; O++) {
                            const G = y[O];
                            if (G.active && !G.dead && g.sameLayer(G.layer, h.layer)) {
                                const q = U.intersect(G.collider, x);
                                if (q) {
                                    const N = G.height > h.posZ ? f : S;
                                    q.pen > N.pen && (!N.obj || N.obj.height <= G.height) && (N.obj = G,
                                    N.pen = q.pen)
                                }
                            }
                        }
                        const P = n.div(n.sub(h.pos, h.posOld), e)
                            , C = n.length(P);
                        if (f.obj && f.obj.__id != h.lastSoundObjId && C > 7.5 && (h.lastSoundObjId = f.obj.__id,
                        h.playHitSfx)) {
                            const O = n.mul(n.normalizeSafe(P, n.create(1, 0)), -1)
                                , G = re[f.obj.type];
                            Pt(G.hitParticle, G.sound.bullet, h.pos, O, h.layer, t, i)
                        }
                        const k = a.getGroundSurface(h.pos, h.layer);
                        h.posZ <= .01 && (!h.inWater && k.type == "water" && t.addRippleParticle(h.pos, h.layer, k.data.rippleColor),
                        h.inWater = k.type == "water");
                        const b = h.velZ;
                        if (h.velZ = (h.posZ - h.posZOld) / e,
                        !h.isNew && !h.grounded && h.velZ >= 0 && b < 0) {
                            const O = {
                                fn: "playGroup",
                                channel: "hits",
                                name: ""
                            };
                            if (S.obj) {
                                if (h.lastSoundObjId != S.obj.__id) {
                                    h.lastSoundObjId = S.obj.__id;
                                    const G = re[S.obj.type];
                                    O.name = G.sound.bullet
                                }
                            } else
                                h.grounded = !0,
                                O.name = ss[k.type],
                                O.name === void 0 && (O.name = `footstep_${k.type}`,
                                O.fn = "playGroup",
                                O.channel = "sfx");
                            O.name && h.playHitSfx && i[O.fn](O.name, {
                                channel: O.channel,
                                soundPos: h.pos,
                                layer: h.layer,
                                filter: "muffled"
                            })
                        }
                        if (h.type == "strobe" && h.strobeSprite && (h.strobeTicker = z.clamp(h.strobeTicker + e * h.strobeDir * h.strobeSpeed, 0, 1),
                        h.strobeScale = z.easeInExpo(h.strobeTicker) * h.strobeScaleMax,
                        h.strobeSprite.scale.set(h.strobeScale, h.strobeScale),
                        (h.strobeScale >= h.strobeScaleMax || h.strobeTicker <= 0) && (h.strobeDir *= -1)),
                        h.sprite.rotation = h.rot,
                        h.sprite.alpha = h.inWater ? .3 : 1,
                        p.trail) {
                            const O = n.length(P)
                                , G = z.remap(O, p.throwPhysics.speed * .25, p.throwPhysics.speed * 1, 0, 1) * z.remap(h.posZ, .1, R.projectile.maxHeight * .5, 0, 1);
                            h.trail.scale.set(p.trail.maxLength * G, p.trail.width),
                            h.trail.rotation = -Math.atan2(h.dir.y, h.dir.x),
                            h.trail.tint = p.trail.tint,
                            h.trail.alpha = p.trail.alpha * G,
                            h.trail.visible = !0
                        } else
                            h.trail.visible = !1;
                        let M = h.layer
                            , E = h.posZ < .25 ? 14 : 25;
                        const D = U.createCircle(h.pos, h.rad * 3)
                            , L = a.insideStructureStairs(D)
                            , v = a.insideStructureMask(D);
                        h.posZ >= .25 && L && (h.layer & 1) == (r.layer & 1) && (!v || !(r.layer & 2)) && (M |= 2,
                        E += 100),
                        h.alwaysRenderOntop && r.layer == 0 && (E = 1e3,
                        M |= 2),
                        l.addPIXIObj(h.container, M, E);
                        const T = h.imgScale * z.remap(h.posZ, 0, R.projectile.maxHeight, 1, 4.75)
                            , V = s._0x105(h.pos)
                            , F = s._0x106(T);
                        h.container.position.set(V.x, V.y),
                        h.container.scale.set(F, F)
                    }
                }
            }
        }
        function tr(u, e, t, i, r, a, l, s) {
            const m = B[u];
            if (m) {
                let d = n.rotate(r, e);
                m.particle.shellForward && (d = n.mul(r, m.particle.shellForward));
                let h = n.mul(d, t * 9.5);
                h = n.rotate(h, (Math.random() - .5) * Math.PI / 3);
                let p = n.add(i, n.mul(r, R.player.radius + m.particle.shellOffset));
                m.particle.shellOffsetY && (p = n.add(p, n.mul(d, m.particle.shellOffsetY))),
                m.particle.shellReverse && (h = n.mul(h, -1)),
                s.addParticle(m.ammo, a, p, h, m.particle.shellScale, -Math.atan2(d.y, d.x), null, l)
            }
        }
        class ls {
            shots = [];
            addShot(e) {
                let t = null;
                for (let a = 0; a < this.shots.length; a++)
                    if (!this.shots[a].active) {
                        t = this.shots[a];
                        break
                    }
                t || (t = {},
                this.shots.push(t));
                const i = e.shotSourceType
                    , r = B[i];
                t.active = !0,
                t.pos = n.copy(e.pos),
                t.layer = e.layer,
                t.playerId = e.playerId,
                t.weaponType = i,
                t.offhand = e.shotOffhand,
                t.lastShot = e.lastShot,
                t.shotAlt = e.shotAlt,
                t.ticker = 0,
                t.pullDelay = r.pullDelay !== void 0 ? r.pullDelay * .45 : 0,
                t.splinter = e.splinter,
                t.trailSaturated = e.trailSaturated
            }
            _0x62(e, t, i, r, a) {
                for (let l = 0; l < this.shots.length; l++) {
                    const s = this.shots[l];
                    if (s.active) {
                        const m = B[s.weaponType];
                        if (s.ticker == 0) {
                            const d = i.getPlayerById(s.playerId);
                            let h = m.sound.shoot;
                            if (m.sound.shootTeam) {
                                const w = i.getPlayerInfo(s.playerId).teamId;
                                m.sound.shootTeam[w] && (h = m.sound.shootTeam[w])
                            }
                            s.lastShot && m.sound.shootLast && (h = m.sound.shootLast),
                            s.shotAlt && m.sound.shootAlt && (h = m.sound.shootAlt);
                            let p = 0;
                            if (s.trailSaturated && !m.ignoreDetune ? p = 300 : s.splinter && (p = -300),
                            a.playSound(h, {
                                channel: s.playerId == t ? "activePlayer" : "otherPlayers",
                                soundPos: s.pos,
                                layer: d ? d.layer : s.layer,
                                filter: "muffled",
                                fallOff: m.sound.fallOff ? m.sound.fallOff : 0,
                                detune: p,
                                volumeScale: s.splinter ? .75 : 1
                            }),
                            s.splinter && a.playSound(h, {
                                channel: s.playerId == t ? "activePlayer" : "otherPlayers",
                                soundPos: s.pos,
                                layer: d ? d.layer : s.layer,
                                filter: "muffled",
                                fallOff: m.sound.fallOff ? m.sound.fallOff : 0,
                                detune: 1200,
                                delay: 30,
                                volumeScale: .75
                            }),
                            d) {
                                if (d.__id == t && m.fireMode == "single" && m.pullDelay) {
                                    const x = d._0x71._0x72[d._0x71._0x98].ammo > 0 ? m.sound.cycle : m.sound.pull;
                                    a.stopSound(d.cycleSoundInstance),
                                    d.cycleSoundInstance = a.playSound(x)
                                }
                                const w = s.offhand || !m.isDual
                                    , f = !s.offhand || !m.isDual;
                                d.addRecoil(m.worldImg.recoil, w, f),
                                d.fireDelay = m.fireDelay
                            }
                        }
                        if (s.ticker += e,
                        s.ticker >= s.pullDelay) {
                            const d = i.getPlayerById(s.playerId);
                            d && !d._0x73._0x85 && d._0x73._0x128 == s.weaponType && m.caseTiming == "shoot" && tr(s.weaponType, Math.PI / 2 * -1, 1, d._0x73._0x63, d._0x73._0x125, d.renderLayer, d.renderZOrd + 1, r),
                            s.active = !1
                        }
                    }
                }
            }
        }
        const di = .1;
        function ms(u, e) {
            if (u.length != e.length)
                return !1;
            for (let t = 0; t < u.length; t++)
                if (u[t].type != e[t].type)
                    return !1;
            return !0
        }
        function ns() {
            const u = {
                fontFamily: "Arial",
                fontWeight: "bold",
                fontSize: _.pixelRatio > 1 ? 30 : 22,
                align: "center",
                fill: 65535,
                stroke: 0,
                strokeThickness: 0,
                dropShadow: !0,
                dropShadowColor: "#000000",
                dropShadowBlur: 1,
                dropShadowAngle: Math.PI / 3,
                dropShadowDistance: 1
            }
                , e = new $e("",u);
            return e.anchor.set(.5, .5),
            e.scale.set(.5, .5),
            e.position.set(0, 30),
            e.visible = !1,
            e
        }
        function se() {
            const u = new ee;
            return u.texture = H.EMPTY,
            u.anchor.set(.5, .5),
            u.scale.set(1, 1),
            u.tint = 16777215,
            u.visible = !1,
            u
        }
        const hs = Object.values(R.scopeZoomRadius.desktop)
            , cs = Object.values(R.scopeZoomRadius.mobile);
        class pi {
            gunBarrel = se();
            gunMag = se();
            container = new J;
            magTop = !1;
            constructor() {
                this.container.addChild(this.gunBarrel),
                this.container.addChild(this.gunMag),
                this.container.rotation = Math.PI * .5,
                this.container.visible = !1
            }
            setVisible(e) {
                this.container.visible = e
            }
            setType(e, t) {
                const i = B[e]
                    , r = i.worldImg;
                if (this.gunBarrel.texture = H.from(r.sprite),
                this.gunBarrel.anchor.set(.5, 1),
                this.gunBarrel.position.set(0, 0),
                this.gunBarrel.scale.set(r.scale.x * .5 / t, r.scale.y * .5 / t),
                this.gunBarrel.tint = r.tint,
                this.gunBarrel.visible = !0,
                r.magImg) {
                    const l = r.magImg;
                    this.gunMag.texture = H.from(l.sprite),
                    this.gunMag.anchor.set(.5, .5),
                    this.gunMag.position.set(l.pos.x / t, l.pos.y / t),
                    this.gunMag.scale.set(.25 / t, .25 / t),
                    this.gunMag.tint = 16777215,
                    this.gunMag.visible = !0,
                    l.top ? this.container.addChild(this.gunMag) : this.container.addChildAt(this.gunMag, 0)
                } else
                    this.gunMag.visible = !1;
                this.magTop = r.magImg?.top;
                const a = i.isDual ? n.create(-5.95, 0) : n.create(-4.25, -1.75);
                r.gunOffset && (a.x += r.gunOffset.x,
                a.y += r.gunOffset.y),
                this.container.position.set(a.x, a.y)
            }
        }
        class us {
            __id;
            __type;
            active;
            bodySprite = se();
            chestSprite = se();
            flakSprite = se();
            steelskinSprite = se();
            helmetSprite = se();
            visorSprite = se();
            backpackSprite = se();
            handLSprite = se();
            handRSprite = se();
            footLSprite = se();
            footRSprite = se();
            hipSprite = se();
            gunLSprites = new pi;
            gunRSprites = new pi;
            objectLSprite = se();
            objectRSprite = se();
            meleeSprite = se();
            bodySubmergeSprite = se();
            handLSubmergeSprite = se();
            handRSubmergeSprite = se();
            footLSubmergeSprite = se();
            footRSubmergeSprite = se();
            bodyEffectSprite = se();
            patchSprite = se();
            handLContainer = new J;
            handRContainer = new J;
            footLContainer = new J;
            footRContainer = new J;
            bodyContainer = new J;
            container = new J;
            nameText = ns();
            auraContainer = new J;
            auraCircle = se();
            bones = [];
            anim = {
                type: me.None,
                data: {},
                seq: -1,
                ticker: 0,
                bones: []
            };
            perks = [];
            perkTypes = [];
            perksDirty = !1;
            surface = null;
            wasInWater = !1;
            weapTypeOld = "";
            visualsDirty = !1;
            stepDistance = 0;
            zoomFast = !1;
            playedDryFire = !1;
            lastSwapIdx = -1;
            hasteSeq = -1;
            cycleSoundInstance = null;
            actionSoundInstance = null;
            useItemEmitter = null;
            hasteEmitter = null;
            passiveHealEmitter = null;
            downed = !1;
            wasDowned = !1;
            bleedTicker = 0;
            submersion = 0;
            gunRecoilL = 0;
            gunRecoilR = 0;
            fireDelay = 0;
            throwableState = "equip";
            lastThrowablePickupSfxTicker = 0;
            isNearDoorError = !1;
            doorErrorTicker = 0;
            noCeilingRevealTicker = 0;
            frozenTicker = 0;
            updateFrozenImage = !0;
            viewAabb = {
                min: n.create(0, 0),
                max: n.create(0, 0)
            };
            auraViewFade = 0;
            auraPulseTicker = 0;
            auraPulseDir = 1;
            renderLayer = 0;
            renderZOrd = 18;
            renderZIdx = 0;
            _0x96;
            _0x73;
            _0x71;
            throwableStatePrev;
            _0x90 = R.player.radius;
            _0x123;
            _0x63 = n.create(0, 0);
            _0x124 = n.create(0, 0);
            _0x125 = n.create(1, 0);
            _0x126 = n.create(1, 0);
            layer = 0;
            isLoadoutAvatar = !1;
            playActionStartSfx = !0;
            isNew;
            wasInsideObstacle;
            insideObstacleType;
            lastInsideObstacleTime;
            dead;
            gunSwitchCooldown;
            constructor() {
                this.bodySprite.addChild(this.bodySubmergeSprite),
                this.handLSprite.addChild(this.handLSubmergeSprite),
                this.handRSprite.addChild(this.handRSubmergeSprite),
                this.footLSprite.addChild(this.footLSubmergeSprite),
                this.footRSprite.addChild(this.footRSubmergeSprite),
                this.handLContainer.addChild(this.gunLSprites.container),
                this.handLContainer.addChild(this.handLSprite),
                this.handLContainer.addChild(this.objectLSprite),
                this.handRContainer.addChild(this.gunRSprites.container),
                this.handRContainer.addChild(this.meleeSprite),
                this.handRContainer.addChild(this.handRSprite),
                this.handRContainer.addChild(this.objectRSprite),
                this.footLContainer.addChild(this.footLSprite),
                this.footRContainer.addChild(this.footRSprite),
                this.bodyContainer.addChild(this.footLContainer),
                this.bodyContainer.addChild(this.footRContainer),
                this.bodyContainer.addChild(this.backpackSprite),
                this.bodyContainer.addChild(this.bodySprite),
                this.bodyContainer.addChild(this.chestSprite),
                this.bodyContainer.addChild(this.flakSprite),
                this.bodyContainer.addChild(this.steelskinSprite),
                this.bodyContainer.addChild(this.hipSprite),
                this.bodyContainer.addChild(this.patchSprite),
                this.bodyContainer.addChild(this.bodyEffectSprite),
                this.bodyContainer.addChild(this.handLContainer),
                this.bodyContainer.addChild(this.handRContainer),
                this.bodyContainer.addChild(this.visorSprite),
                this.bodyContainer.addChild(this.helmetSprite),
                this.container.addChild(this.bodyContainer),
                this.container.addChild(this.nameText),
                this.auraContainer.addChild(this.auraCircle),
                this.initSubmergeSprites();
                const e = Object.keys(Ce).length;
                for (let t = 0; t < e; t++)
                    this.bones.push(new I),
                    this.anim.bones.push({
                        weight: 0,
                        pose: new I
                    });
                this.throwableStatePrev = this.throwableState,
                this._0x123 = this._0x90
            }
            _0x113() {
                this.isNew = !1,
                this.wasInsideObstacle = !1,
                this.insideObstacleType = "",
                this.lastInsideObstacleTime = 0,
                this.lastSwapIdx = -1,
                this.hasteSeq = -1,
                this.actionSoundInstance = null,
                this._0x96 = {
                    type: ie.None,
                    seq: -1,
                    seqOld: -1,
                    item: "",
                    skin: "",
                    targetId: 0,
                    time: 0,
                    duration: 0,
                    throttleCount: 0,
                    throttleTicker: 0
                },
                this._0x73 = {
                    _0x63: n.create(0, 0),
                    _0x125: n.create(1, 0),
                    _0x127: "",
                    _0x101: "",
                    _0x75: "",
                    _0x76: "",
                    _0x128: "fists",
                    _0x83: 0,
                    _0x85: !1,
                    _0x88: !1,
                    _0x129: me.None,
                    _0x130: 0,
                    _0x131: ie.None,
                    _0x132: 0,
                    _0x133: !1,
                    _0x134: !1,
                    _0x135: !1,
                    _0x136: 0,
                    _0x137: Oe.None,
                    _0x138: 0,
                    _0x139: "",
                    _0x140: 1,
                    _0x141: "",
                    _0x74: []
                },
                this._0x71 = {
                    _0x86: R.player.health,
                    _0x69: 0,
                    _0x87: 0,
                    _0x99: "",
                    _0x98: 0,
                    _0x97: {},
                    _0x72: [],
                    _0x142: 0
                },
                this.playAnim(me.None, -1)
            }
            _0x60() {
                this.container.visible = !1,
                this.auraContainer.visible = !1,
                this.useItemEmitter && (this.useItemEmitter.stop(),
                this.useItemEmitter = null),
                this.hasteEmitter && (this.hasteEmitter.stop(),
                this.hasteEmitter = null),
                this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
                this.passiveHealEmitter = null)
            }
            _0x119(e, t, i, r) {
                this._0x73._0x63 = n.copy(e.pos),
                this._0x73._0x125 = n.copy(e.dir),
                t && (this._0x73._0x127 = e.outfit,
                this._0x73._0x101 = e.backpack,
                this._0x73._0x75 = e.helmet,
                this._0x73._0x76 = e.chest,
                this._0x73._0x128 = e.activeWeapon,
                this._0x73._0x83 = e.layer,
                this._0x73._0x85 = e.dead,
                this._0x73._0x88 = e.downed,
                this._0x73._0x129 = e.animType,
                this._0x73._0x130 = e.animSeq,
                this._0x73._0x131 = e.actionType,
                this._0x73._0x132 = e.actionSeq,
                this._0x73._0x133 = e.wearingPan,
                this._0x73._0x134 = e.healEffect,
                this._0x73._0x135 = e.frozen,
                this._0x73._0x136 = e.frozenOri,
                this._0x73._0x137 = e.hasteType,
                this._0x73._0x138 = e.hasteSeq,
                this._0x73._0x139 = e.actionItem,
                this._0x73._0x140 = e.scale,
                this._0x73._0x141 = e.role,
                (i || !ms(this._0x73._0x74, e.perks)) && (this.perksDirty = !0),
                this._0x73._0x74 = e.perks,
                e.animSeq != this.anim.seq && this.playAnim(e.animType, e.animSeq),
                this._0x96.type = e.actionType,
                this._0x96.seq = e.actionSeq,
                this._0x96.item = e.actionItem,
                this.visualsDirty = !0),
                i && (this.isNew = !0,
                this.renderLayer = this._0x73._0x83,
                this.renderZOrd = 18,
                this.renderZIdx = this.__id)
            }
            _0x82(e, t) {
                const i = this._0x71._0x99;
                if (e.healthDirty && (this._0x71._0x86 = e.health),
                e.boostDirty && (this._0x71._0x87 = e.boost),
                e.zoomDirty && (this._0x71._0x69 = e.zoom,
                this.zoomFast = !1),
                e.actionDirty && (this._0x96.time = e.action.time,
                this._0x96.duration = e.action.duration,
                this._0x96.targetId = e.action.targetId),
                e.inventoryDirty) {
                    this._0x71._0x99 = e.scope,
                    this._0x71._0x97 = {};
                    for (const r in R.bagSizes)
                        R.bagSizes.hasOwnProperty(r) && (this._0x71._0x97[r] = e.inventory[r])
                }
                if (e.weapsDirty) {
                    this._0x71._0x98 = e.curWeapIdx,
                    this._0x71._0x72 = [];
                    for (let r = 0; r < R.WeaponSlot.Count; r++) {
                        const a = {
                            type: e.weapons[r].type,
                            ammo: e.weapons[r].ammo
                        };
                        this._0x71._0x72.push(a)
                    }
                }
                e.spectatorCountDirty && (this._0x71._0x142 = e.spectatorCount),
                this._0x71._0x99 != i && (this.zoomFast = !0)
            }
            _0x65() {
                let e = this._0x71._0x69;
                if (_.mobile) {
                    const t = hs.indexOf(e);
                    t !== -1 && (e = cs[t])
                }
                return e
            }
            _0x93() {
                return this._0x73._0x75 ? B[this._0x73._0x75].level : 0
            }
            _0x94() {
                return this._0x73._0x76 ? B[this._0x73._0x76].level : 0
            }
            _0x100() {
                return B[this._0x73._0x101].level
            }
            _0x92() {
                return B[this._0x73._0x128].type
            }
            _0x91(e) {
                return this._0x71._0x72[e].type !== ""
            }
            getMeleeCollider() {
                const e = B[this._0x73._0x128]
                    , t = Math.atan2(this._0x125.y, this._0x125.x)
                    , i = n.add(e.attack.offset, n.mul(n.create(1, 0), this._0x73._0x140 - 1))
                    , r = n.add(this._0x63, n.rotate(i, t))
                    , a = e.attack.rad;
                return U.createCircle(r, a, 0)
            }
            _0x143() {
                return this._0x73._0x133 || this._0x73._0x128 == "pan" && this.currentAnim() != me.Melee
            }
            _0x144() {
                const e = this._0x73._0x133 ? "unequipped" : "equipped";
                return B.pan.reflectSurface?.[e]
            }
            canInteract(e) {
                return !this._0x73._0x85 && (!e.perkMode || this._0x73._0x141)
            }
            _0x145(e, t, i) {
                for (let r = 0; r < this.perks.length; r++)
                    this.perks[r].isNew = !1;
                if (this.perksDirty) {
                    if (e && !t) {
                        for (let a = 0; a < this._0x73._0x74.length; a++) {
                            const l = this._0x73._0x74[a];
                            this.perks.findIndex(s => s.type == l.type) === -1 && i.addRareLootMessage(l.type)
                        }
                        for (let a = 0; a < this.perks.length; a++) {
                            const l = this.perks[a];
                            this._0x73._0x74.findIndex(s => s.type == l.type) === -1 && i.removeRareLootMessage(l.type)
                        }
                    }
                    const r = [];
                    for (let a = 0; a < this._0x73._0x74.length; a++) {
                        const l = this._0x73._0x74[a]
                            , s = this.perks.findIndex(m => m.type == l.type) === -1;
                        r.push({
                            type: l.type,
                            droppable: l.droppable,
                            isNew: s && !this.isNew
                        })
                    }
                    this.perks = r,
                    this.perkTypes = [];
                    for (let a = 0; a < this._0x73._0x74.length; a++)
                        this.perkTypes.push(this._0x73._0x74[a].type);
                    this.perksDirty = !1
                }
            }
            _0x95(e) {
                return this.perkTypes.includes(e)
            }
            _0x62(e, t, i, r, a, l, s, m, d, h, p, w, f) {
    const S = B[this._0x73._0x128],
          x = this.__id == h,
          y = t.getPlayerById(h);

    this._0x124 = n.copy(this._0x63);
    this._0x126 = n.copy(this._0x125);
    this._0x63 = n.copy(this._0x73._0x63);

    if (window.isInterpolation && (Math.abs(this._0x63.x - this._0x124.x) <= 10 && Math.abs(this._0x63.y - this._0x124.y) <= 10)) {
        // Movement Interpolation
        this._0x63.x += (this._0x124.x - this._0x63.x) * 0.5;
        this._0x63.y += (this._0x124.y - this._0x63.y) * 0.5;
    }

    this._0x125 = n.copy(this._0x73._0x125);
    this.layer = this._0x73._0x83;
    this.downed = this._0x73._0x88;
    this._0x90 = this._0x73._0x140 * R.player.radius;

    if (!z.eqAbs(this._0x90, this._0x123)) {
        const q = this._0x90 - this._0x123;
        let N = Math.abs(q) > 1e-4 ? q * e * 6 : q;
        this.isNew && (N = q);
        this._0x123 += N;
        this.visualsDirty = !0;
    }
                if (x) {
                    const q = s._0x70(n.create(s._0x66, 0))
                        , N = n.sub(q, s._0x63);
                    this.viewAabb.min = n.sub(s._0x63, N),
                    this.viewAabb.max = n.add(s._0x63, N)
                }
                this._0x145(x, f, d);
                const P = this.weapTypeOld != this._0x73._0x128;
                this.weapTypeOld = this._0x73._0x128,
                this.lastThrowablePickupSfxTicker -= e,
                this.noCeilingRevealTicker -= e;
                const C = t.getPlayerInfo(h).groupId
                    , k = t.getPlayerInfo(this.__id)
                    , b = k.groupId == C;
                this.nameText.text = k.name,
                this.nameText.visible = !x && b;
                let M = null
                    , E = null;
                const D = i._0x53._0x89();
                for (let q = 0; q < D.length; q++) {
                    const N = D[q];
                    if (N.active && !N.dead && N.layer == this._0x73._0x83) {
                        if (N.isBush) {
                            const Z = this._0x90 * .25;
                            U.intersectCircle(N.collider, this._0x63, Z) && (M = N)
                        } else if (N.isDoor) {
                            const Z = this._0x90 + .25
                                , te = n.sub(N.pos, this._0x63)
                                , ae = n.rotate(n.create(1, 0), N.rot);
                            U.intersectCircle(N.collider, this._0x63, Z) && (N.door.locked || N.door.openOneWay && n.dot(te, ae) < 0) && (E = N)
                        }
                    }
                }
                const L = M != null;
                if (L && (this.insideObstacleType = M?.type),
                this.lastInsideObstacleTime -= e,
                this.wasInsideObstacle != L && this.lastInsideObstacleTime < 0 && !this.isNew) {
                    const q = re[this.insideObstacleType];
                    this.lastInsideObstacleTime = .2,
                    r.playSound(q?.sound.enter, {
                        channel: "sfx",
                        soundPos: this._0x63,
                        fallOff: 1,
                        layer: this.layer,
                        filter: "muffled"
                    });
                    const N = n.normalizeSafe(n.sub(this._0x124, this._0x63), n.create(1, 0))
                        , Z = L ? 1 : -1
                        , te = Math.floor(g.random(3, 5));
                    for (let ae = 0; ae < te; ae++) {
                        const ge = n.mul(n.rotate(n.mul(N, Z), (Math.random() - .5) * Math.PI / 1.5), g.random(6, 8));
                        a.addParticle(q.hitParticle, this.layer, this._0x63, ge)
                    }
                }
                this.wasInsideObstacle = L;
                const v = this.isNearDoorError;
                if (this.isNearDoorError = E != null,
                this.doorErrorTicker -= e,
                this.isNearDoorError && !v && this.doorErrorTicker <= 0) {
                    this.doorErrorTicker = .5;
                    const N = re[E?.type].door?.sound.error;
                    r.playSound(N, {
                        channel: "sfx",
                        soundPos: this._0x63,
                        fallOff: 1,
                        layer: this.layer,
                        filter: "muffled"
                    })
                }
                this.surface = i.getGroundSurface(this._0x63, this.layer);
                const T = this.surface.type == "water";
                if (this.updateSubmersion(e, i),
                this.updateFrozenState(e),
                this._0x73._0x85 || (this.stepDistance += n.length(n.sub(this._0x124, this._0x63)),
                this.stepDistance > 5 && T || T && !this.wasInWater ? (this.stepDistance = 0,
                a.addRippleParticle(this._0x63, this.layer, this.surface?.data.rippleColor),
                r.playGroup("footstep_water", {
                    soundPos: this._0x63,
                    fallOff: 3,
                    layer: this.layer,
                    filter: "muffled"
                })) : this.stepDistance > 4 && !T && (this.stepDistance = 0,
                r.playGroup(`footstep_${this.surface.type}`, {
                    soundPos: this._0x63,
                    fallOff: 3,
                    layer: this.layer,
                    filter: "muffled"
                })),
                this.wasInWater = T),
                this.bleedTicker -= e,
                !this._0x73._0x85 && (this._0x73._0x88 && this._0x96.type == ie.None || this._0x95("trick_drain")) && this.bleedTicker < 0) {
                    this.bleedTicker = this._0x95("trick_drain") ? R.player.bleedTickRate * 3 : R.player.bleedTickRate;
                    const q = n.rotate(n.mul(this._0x125, -1), (Math.random() - .5) * Math.PI / 3);
                    q.y *= -1,
                    window.CrazyGames || a.addParticle("bloodSplat", this.renderLayer, n.create(0, 0), n.mul(q, s._0x68), 1, Math.random() * Math.PI * 2, this.container, this.renderZOrd + 1),
                    w || r.playSound("player_bullet_hit_02", {
                        channel: "hits",
                        soundPos: this._0x63,
                        fallOff: 3,
                        layer: this.layer,
                        filter: "muffled"
                    })
                }
                if (this.gunSwitchCooldown -= e,
                this.fireDelay -= e,
                x && (P || this.lastSwapIdx != this._0x71._0x98)) {
                    const q = this.lastSwapIdx;
                    this.lastSwapIdx = this._0x71._0x98;
                    const N = B[this._0x73._0x128];
                    if (N.type == "melee" || N.type == "throwable") {
                        if (N.type != "throwable" || this.lastThrowablePickupSfxTicker <= 0) {
                            const Z = this.isLoadoutAvatar ? s._0x63 : this._0x63;
                            r.playSound(N.sound.deploy, {
                                channel: "sfx",
                                soundPos: Z,
                                fallOff: 3
                            })
                        }
                    } else if (N.type == "gun") {
                        let Z = "gun_switch_01"
                            , te = !1;
                        if ((q == 0 || q == 1) && (this.lastSwapIdx == 0 || this.lastSwapIdx == 1) && this.fireDelay > 0) {
                            const ae = B[this._0x71._0x72[q].type];
                            N && ae && N.deployGroup !== void 0 && ae.deployGroup !== void 0 && N.deployGroup == ae.deployGroup && (te = !0)
                        }
                        this.gunSwitchCooldown > 0 || te ? Z = N.sound.deploy : this.gunSwitchCooldown = R.player.freeSwitchCooldown,
                        r.stopSound(this.cycleSoundInstance),
                        this.cycleSoundInstance = r.playSound(Z, {
                            channel: "activePlayer"
                        }),
                        this.fireDelay = 0
                    }
                }
                if (r.isSoundPlaying(this.cycleSoundInstance) || (this.cycleSoundInstance = null),
                this._0x96.seq != this._0x96.seqOld && !this.isNew) {
                    let q = !0;
                    !x && this._0x96.type != ie.None && (this._0x96.throttleTicker = .5,
                    this._0x96.throttleCount < 5 ? this._0x96.throttleCount++ : q = !1),
                    q && this.playActionStartEffect(x, a, r)
                }
                if (this._0x96.seqOld = this._0x96.seq,
                this.updateActionEffect(x, k, a, r),
                this._0x96.throttleTicker -= e,
                this._0x96.throttleTicker < 0 && this._0x96.throttleCount > 0 && (this._0x96.throttleCount--,
                this._0x96.throttleTicker = .25),
                this._0x73._0x137 && this._0x73._0x138 != this.hasteSeq) {
                    const N = {
                        [Oe.None]: {
                            particle: "",
                            sound: ""
                        },
                        [Oe.Windwalk]: {
                            particle: "windwalk",
                            sound: "ability_stim_01"
                        },
                        [Oe.Takedown]: {
                            particle: "takedown",
                            sound: "ability_stim_01"
                        },
                        [Oe.Inspire]: {
                            particle: "inspire",
                            sound: "ability_stim_01"
                        }
                    }[this._0x73._0x137];
                    this.isNew || r.playSound(N.sound, {
                        channel: "sfx",
                        soundPos: this._0x63,
                        fallOff: 1,
                        layer: this.layer,
                        filter: "muffled"
                    }),
                    this.hasteEmitter?.stop(),
                    this.hasteEmitter = a.addEmitter(N.particle, {
                        pos: this._0x63,
                        layer: this.layer
                    }),
                    this.hasteSeq = this._0x73._0x138
                } else
                    !this._0x73._0x137 && this.hasteEmitter && (this.hasteEmitter.stop(),
                    this.hasteEmitter = null);
                if (this.hasteEmitter && (this.hasteEmitter.pos = n.add(this._0x63, n.create(0, .1)),
                this.hasteEmitter.layer = this.renderLayer,
                this.hasteEmitter.zOrd = this.renderZOrd + 1),
                this._0x73._0x134 && !this.passiveHealEmitter ? this.passiveHealEmitter = a.addEmitter("heal_basic", {
                    pos: this._0x63,
                    layer: this.layer
                }) : !this._0x73._0x134 && this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
                this.passiveHealEmitter = null),
                this.passiveHealEmitter && (this.passiveHealEmitter.pos = n.add(this._0x63, n.create(0, .1)),
                this.passiveHealEmitter.layer = this.renderLayer,
                this.passiveHealEmitter.zOrd = this.renderZOrd + 1),
                x && !f) {
                    const q = this._0x71._0x98
                        , N = this._0x71._0x72[q]
                        , Z = B[N.type];
                    if (!this.playedDryFire && this._0x92() == "gun" && (l.isBindPressed(A.Fire) || l.isBindDown(A.Fire) && Z.fireMode == "auto") && this._0x96.type == ie.None && !p && !Z.ammoInfinite) {
                        const te = this._0x71._0x97[Z.ammo] || 0
                            , ae = N.ammo;
                        te == 0 && ae == 0 && (r.playSound(Z.sound.empty),
                        this.playedDryFire = !0)
                    }
                    l.isBindDown(A.Fire) || (this.playedDryFire = !1)
                }
                this.gunRecoilL = z.max(0, this.gunRecoilL - this.gunRecoilL * e * 5 - e),
                this.gunRecoilR = z.max(0, this.gunRecoilR - this.gunRecoilR * e * 5 - e);
                const V = {
                    playerBarn: t,
                    map: i,
                    audioManager: r,
                    particleBarn: a
                };
                this.updateAnim(e, V),
                this.currentAnim() == me.None && (this.throwableState = "equip"),
                (this.currentAnim() == me.Cook || this.currentAnim() == me.Throw) && S.type != "throwable" && this.playAnim(me.None, this.anim.seq);
                const F = this.selectIdlePose()
                    , O = ui[F];
                for (let q = 0; q < this.bones.length; q++) {
                    const N = O[q] || I.identity
                        , Z = this.anim.bones[q];
                    Z.weight > 0 ? this.bones[q].copy(I.lerp(Z.weight, N, Z.pose)) : this.bones[q].copy(N)
                }
                this.throwableStatePrev != this.throwableState && (this.visualsDirty = !0),
                this.throwableStatePrev = this.throwableState,
                this.visualsDirty && this.updateVisuals(t, i),
                this.visualsDirty = !1,
                this.updateAura(e, x, y),
                this.Zr(),
                this.updateRenderLayer(x, y, i),
                m.addPIXIObj(this.auraContainer, this.renderLayer, this.renderZOrd - 1, this.renderZIdx);
                const G = y.layer & 2 || (y.layer & 1) == 1 || (this.layer & 1) == 0;
                this.auraContainer.visible = !!(!this._0x73._0x85 && G),
                m.addPIXIObj(this.container, this.renderLayer, this.renderZOrd, this.renderZIdx),
                this.isNew = !1
            }
            render(e, t) {
                const i = e._0x105(this._0x63)
                    , r = e._0x106(1);
                if (this.container.position.set(i.x, i.y),
                this.container.scale.set(r, r),
                this.container.visible = !this._0x73._0x85,
                this.auraContainer.position.set(i.x, i.y),
                this.auraContainer.scale.set(r, r),
                _.debug && t.players) {
                    he.addCircle(this._0x63, this._0x90, 16711680, 0);
                    const a = B[this._0x73._0x128];
                    a.type === "gun" && he.addRay(this._0x63, this._0x125, a.barrelLength, 16711680, 0)
                }
            }
            updateRenderLayer(e, t, i) {
                const r = U.createCircle(this._0x63, R.player.maxVisualRadius);
                let a = !1
                    , l = !1
                    , s = !1;
                const m = i._0x55._0x89();
                for (let w = 0; w < m.length; w++) {
                    const f = m[w];
                    if (f.active) {
                        for (let S = 0; S < f.stairs.length; S++) {
                            const x = f.stairs[S]
                                , y = U.intersect(x.collision, r);
                            if (y) {
                                l = !0;
                                const P = n.add(x.center, n.mul(x.downDir, -2.5));
                                let C = n.sub(P, this._0x63);
                                const k = n.length(C);
                                C = k > 1e-4 ? n.div(C, k) : n.create(1, 0),
                                s = it.intersectSegmentDist(i._0x53._0x89(), this._0x63, C, k, .5, this.layer, !1) < k
                            }
                            e && x.noCeilingReveal && y && this.layer != 0 && (this.noCeilingRevealTicker = .25)
                        }
                        for (let S = 0; S < f.mask.length; S++)
                            if (U.intersect(f.mask[S], r)) {
                                a = !0;
                                break
                            }
                    }
                }
                let d = this.layer
                    , h = 18;
                l && (d & 1 && (t.layer & 1 || !s) || t.layer & 2 && !a) && (d |= 2),
                l && (d & 1) == (t.layer & 1) && (!a || t.layer == 0) && (d |= 2,
                h += 100);
                const p = this.__id + (this._0x73._0x88 ? 0 : 262144) + (e ? 65536 : 0) + (this._0x90 > 1 ? 131072 : 0);
                this.renderLayer = d,
                this.renderZOrd = h,
                this.renderZIdx = p
            }
            updateVisuals(e, t) {
                const i = B[this._0x73._0x127]
                    , r = i.skinImg
                    , a = this._0x123 / R.player.radius;
                if (this.bodySprite.texture = H.from(r.baseSprite),
                this.bodySprite.tint = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.baseTint,
                this.bodySprite.scale.set(.25, .25),
                this.bodySprite.visible = !0,
                this._0x73._0x135 && this.updateFrozenImage) {
                    const p = t.getMapDef().biome.frozenSprites || [];
                    if (p.length > 0) {
                        const w = p[Math.floor(Math.random() * p.length)]
                            , f = z.oriToRad(this._0x73._0x136) + Math.PI * .5 + (Math.random() - .5) * Math.PI * .25;
                        this.bodyEffectSprite.texture = H.from(w),
                        this.bodyEffectSprite.rotation = f,
                        this.bodyEffectSprite.tint = 16777215,
                        this.bodyEffectSprite.scale.set(.25, .25)
                    }
                    this.updateFrozenImage = !1
                }
                if (t.factionMode && !i.ghillie) {
                    const w = e.getPlayerInfo(this.__id).teamId
                        , f = ["player-patch-01.img", "player-patch-02.img"]
                        , S = (w - 1) % f.length
                        , x = f[S]
                        , y = R.teamColors[S]
                        , P = z.oriToRad(3) + Math.PI * .5;
                    this.patchSprite.texture = H.from(x),
                    this.patchSprite.rotation = P,
                    this.patchSprite.tint = y,
                    this.patchSprite.scale.set(.25, .25),
                    this.patchSprite.visible = !0
                } else
                    this.patchSprite.visible = !1;
                const l = function(p, w, f) {
                    p.texture = H.from(w),
                    p.scale.set(.175, .175),
                    p.tint = f,
                    p.visible = !0
                }
                    , s = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.handTint;
                l(this.handLSprite, r.handSprite, s),
                l(this.handRSprite, r.handSprite, s);
                const m = function(p, w, f) {
                    p.texture = H.from("player-feet-01.img"),
                    p.scale.set(.45, .45),
                    p.rotation = Math.PI * .5,
                    p.tint = w,
                    p.visible = f
                }
                    , d = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.footTint;
                if (m(this.footLSprite, d, this.downed),
                m(this.footRSprite, d, this.downed),
                this._0x95("flak_jacket") && !i.ghillie ? (this.flakSprite.texture = H.from("player-armor-base-01.img"),
                this.flakSprite.scale.set(.215, .215),
                this.flakSprite.tint = 3671558,
                this.flakSprite.alpha = .7,
                this.flakSprite.visible = !0) : this.flakSprite.visible = !1,
                this._0x73._0x76 == "" || i.ghillie)
                    this.chestSprite.visible = !1;
                else {
                    const w = B[this._0x73._0x76].skinImg;
                    this.chestSprite.texture = H.from(w.baseSprite),
                    this.chestSprite.scale.set(.25, .25),
                    this.chestSprite.tint = w.baseTint,
                    this.chestSprite.visible = !0
                }
                if (this._0x95("steelskin") && !i.ghillie ? (this.steelskinSprite.texture = H.from("loot-melee-pan-black.img"),
                this.steelskinSprite.scale.set(.4, .4),
                this.steelskinSprite.anchor.set(.575, .5),
                this.steelskinSprite.tint = 16777215,
                this.steelskinSprite.visible = !0) : this.steelskinSprite.visible = !1,
                this._0x73._0x75 == "" || i.ghillie)
                    this.helmetSprite.visible = !1;
                else {
                    const w = B[this._0x73._0x75].skinImg
                        , f = (this.downed ? 1 : -1) * 3.33;
                    this.helmetSprite.texture = H.from(w.baseSprite),
                    this.helmetSprite.position.set(f, 0),
                    w.spriteScale ? this.helmetSprite.scale.set(w.spriteScale, w.spriteScale) : this.helmetSprite.scale.set(.15, .15);
                    let S = w.baseTint;
                    t.factionMode && (S = e.getPlayerInfo(this.__id).teamId == 1 ? w.baseTintRed : w.baseTintBlue),
                    this.helmetSprite.tint = S,
                    this.helmetSprite.visible = !0
                }
                if (this._0x100() > 0 && !i.ghillie && !this.downed) {
                    const p = [10.25, 11.5, 12.75]
                        , w = this._0x100()
                        , f = p[z.min(w - 1, p.length - 1)]
                        , S = (.4 + w * .03) * .5;
                    this.backpackSprite.texture = H.from("player-circle-base-01.img"),
                    this.backpackSprite.position.set(-f, 0),
                    this.backpackSprite.scale.set(S, S),
                    this.backpackSprite.tint = r.backpackTint,
                    this.backpackSprite.visible = !0,
                    function(x, y, P) {
                        x.texture = H.from(y),
                        x.tint = P
                    }(this.backpackSprite, r.backpackSprite, r.backpackTint)
                } else
                    this.backpackSprite.visible = !1;
                if (this._0x73._0x133) {
                    const p = B.pan.hipImg;
                    this.hipSprite.texture = H.from(p.sprite),
                    this.hipSprite.position.set(p.pos.x, p.pos.y),
                    this.hipSprite.scale.set(p.scale.x, p.scale.y),
                    this.hipSprite.rotation = p.rot,
                    this.hipSprite.tint = p.tint,
                    this.hipSprite.visible = !0
                } else
                    this.hipSprite.visible = !1;
                const h = B[this._0x73._0x128];
                if (h.type == "gun") {
                    this.gunRSprites.setType(this._0x73._0x128, a),
                    this.gunRSprites.setVisible(!0),
                    h.isDual ? (this.gunLSprites.setType(this._0x73._0x128, a),
                    this.gunLSprites.setVisible(!0)) : this.gunLSprites.setVisible(!1);
                    const p = this.bodyContainer.getChildIndex(this.handRContainer)
                        , w = this.bodyContainer.getChildIndex(this.handRContainer);
                    let f = p + 1;
                    (this.gunRSprites.magTop || h.worldImg.handsBelow) && (f = p - 1),
                    f = z.max(f, 0),
                    w != f && this.bodyContainer.addChildAt(this.handLContainer, f);
                    const S = this.handRContainer.getChildIndex(this.gunRSprites.container)
                        , x = h.worldImg.handsBelow ? this.handRContainer.children.length : 0;
                    S != x && this.handRContainer.addChildAt(this.gunRSprites.container, x)
                } else
                    this.gunLSprites.setVisible(!1),
                    this.gunRSprites.setVisible(!1);
                if (this.downed != this.wasDowned)
                    if (this.wasDowned = this.downed,
                    this.downed) {
                        const p = this.bodyContainer.getChildIndex(this.footLContainer);
                        this.bodyContainer.addChildAt(this.handLContainer, p),
                        this.bodyContainer.addChildAt(this.handRContainer, p)
                    } else
                        this.bodyContainer.addChild(this.handLContainer),
                        this.bodyContainer.addChild(this.handRContainer);
                if (h.type == "melee" && this._0x73._0x128 != "fists") {
                    const p = h.worldImg;
                    this.meleeSprite.texture = H.from(p.sprite),
                    this.meleeSprite.pivot.set(-p.pos.x, -p.pos.y),
                    this.meleeSprite.scale.set(p.scale.x / a, p.scale.y / a),
                    this.meleeSprite.rotation = p.rot,
                    this.meleeSprite.tint = p.tint,
                    this.meleeSprite.visible = !0;
                    const w = this.handRContainer.getChildIndex(this.handRSprite)
                        , f = z.max(p.renderOnHand ? w + 1 : w - 1, 0);
                    this.handRContainer.getChildIndex(this.meleeSprite) != f && this.handRContainer.addChildAt(this.meleeSprite, f);
                    const S = this.bodyContainer.getChildIndex(this.handRContainer)
                        , x = z.max(p.leftHandOntop ? S + 1 : S - 1, 0);
                    this.bodyContainer.getChildIndex(this.handLContainer) != x && this.bodyContainer.addChildAt(this.handLContainer, x)
                } else
                    this.meleeSprite.visible = !1;
                if (h.type == "throwable") {
                    const p = function(f, S) {
                        if (S.sprite && S.sprite != "none") {
                            let x = S.sprite;
                            t.mapDef.gameMode.spookyKillSounds && (x = er[x] || x),
                            f.texture = H.from(x),
                            f.position.set(S.pos?.x, S.pos?.y),
                            f.scale.set(S.scale, S.scale),
                            f.rotation = Math.PI * .5,
                            f.visible = !0
                        } else
                            f.visible = !1
                    }
                        , w = h.handImg?.[this.throwableState];
                    p(this.objectLSprite, w.left),
                    p(this.objectRSprite, w.right)
                } else
                    this.objectLSprite.visible = !1,
                    this.objectRSprite.visible = !1;
                if ((this.downed || this.currentAnim() == me.Revive) && (this.gunLSprites.setVisible(!1),
                this.gunRSprites.setVisible(!1),
                this.meleeSprite.visible = !1,
                this.objectLSprite.visible = !1,
                this.objectRSprite.visible = !1),
                this.downed && (this.backpackSprite.visible = !1),
                this._0x96.type != ie.UseItem && this._0x96.type != ie.Revive || this._0x73._0x85 || this._0x73._0x88 && !this._0x95("self_revive") || !this._0x95("aoe_heal"))
                    this.auraPulseTicker = 0,
                    this.auraPulseDir = 1,
                    this.auraCircle.visible = !1;
                else {
                    const p = B[this._0x96.item]
                        , w = p?.aura ? p.aura.sprite : "part-aura-circle-01.img"
                        , f = p?.aura ? p.aura.tint : 16711935
                        , S = .125;
                    let x = p ? R.player.medicHealRange : R.player.medicReviveRange;
                    x *= S,
                    this.auraCircle.texture = H.from(w),
                    this.auraCircle.scale.set(x, x),
                    this.auraCircle.tint = f,
                    this.auraCircle.visible = !0
                }
                if (t.perkMode && this._0x73._0x141 != "" && this._0x73._0x75 != "" && !i.ghillie) {
                    const w = B[this._0x73._0x141].visorImg;
                    if (w) {
                        const f = (this.downed ? 1 : -1) * 3.33;
                        this.visorSprite.texture = H.from(w.baseSprite),
                        this.visorSprite.position.set(f, 0)
                    }
                    w.spriteScale ? this.visorSprite.scale.set(w.spriteScale, w.spriteScale) : this.visorSprite.scale.set(.15, .15),
                    this.visorSprite.visible = !0
                } else
                    this.visorSprite.visible = !1;
                this.bodyContainer.scale.set(a, a)
            }
            updateAura(e, t, i) {
                let r = !0;
                if (t || (r = xe.testCircleAabb(this._0x63, this._0x90, i.viewAabb.min, i.viewAabb.max)),
                this.auraViewFade = z.lerp(e * 6, this.auraViewFade, r ? 1 : 0),
                this.auraCircle.visible) {
                    this.auraPulseTicker = z.clamp(this.auraPulseTicker + e * this.auraPulseDir * 1.5, 0, 1);
                    const a = z.easeOutExpo(this.auraPulseTicker) * .75 + .25;
                    (this.auraPulseTicker >= 1 || this.auraPulseTicker <= 0) && (this.auraPulseDir *= -1),
                    this.auraCircle.alpha = a * this.auraViewFade
                }
            }
            Zr() {
                const e = function(i, r) {
                    i.position.set(r.pos.x, r.pos.y),
                    i.pivot.set(-r.pivot.x, -r.pivot.y),
                    i.rotation = r.rot
                };
                e(this.handLContainer, this.bones[Ce.HandL]),
                e(this.handRContainer, this.bones[Ce.HandR]),
                e(this.footLContainer, this.bones[Ce.FootL]),
                e(this.footRContainer, this.bones[Ce.FootR]);
                const t = B[this._0x73._0x128];
                !this.downed && this.currentAnim() != me.Revive && t.type == "gun" && t.worldImg.leftHandOffset && (this.handLContainer.position.x += t.worldImg.leftHandOffset.x,
                this.handLContainer.position.y += t.worldImg.leftHandOffset.y),
                this.handLContainer.position.x -= this.gunRecoilL * 1.125,
                this.handRContainer.position.x -= this.gunRecoilR * 1.125;
                
                
            const mouseX = inputManager.mousePos.x;
            const mouseY = inputManager.mousePos.y;
            //local rotation - 13031
            if (window.activeId == this.__id && !window.spectating && window.isLocalRotation) {
            this.bodyContainer.rotation = Math.atan2(
                mouseY - window.innerHeight / 2,
                mouseX - window.innerWidth / 2,
            );
            } else if (window.activeId != this.__id) {
                this.bodyContainer.rotation = -Math.atan2(this._0x125.y, this._0x125.x);
            }
            }
            playActionStartEffect(e, t, i) {
                let r = null;
                switch (this._0x96.type) {
                case ie.Reload:
                case ie.ReloadAlt:
                    {
                        const a = B[this._0x96.item];
                        a && (r = {
                            sound: this._0x96.type == ie.ReloadAlt ? a.sound.reloadAlt : a.sound.reload,
                            channel: e ? "activePlayer" : "otherPlayers"
                        })
                    }
                    break;
                case ie.UseItem:
                    {
                        const a = B[this._0x96.item];
                        a && (r = {
                            sound: a.sound.use,
                            channel: e ? "activePlayer" : "otherPlayers"
                        })
                    }
                }
                if (i.stopSound(this.actionSoundInstance),
                r && this.playActionStartSfx && (this.actionSoundInstance = i.playSound(r.sound, {
                    channel: r.channel,
                    soundPos: this._0x63,
                    fallOff: 2,
                    layer: this.layer,
                    filter: "muffled"
                })),
                this._0x96.type == ie.Reload || this._0x96.type == ie.ReloadAlt) {
                    const a = B[this._0x96.item];
                    if (a && a.caseTiming == "reload")
                        for (let l = 0; l < a.maxReload; l++) {
                            const s = l % 2 == 0 ? -1 : 1
                                , m = Math.PI + Math.PI / 4 * s
                                , d = a.maxReload <= 2 ? 1 : z.lerp(Math.random(), .8, 1.2);
                            tr(this._0x96.item, m, d, this._0x63, this._0x125, this.renderLayer, this.renderZOrd + 1, t)
                        }
                }
            }
            updateActionEffect(e, t, i, r) {
                let a = "";
                const l = {};
                switch (this._0x96.type) {
                case ie.UseItem:
                    {
                        const s = B[this._0x96.item]
                            , m = t.loadout;
                        s.type == "heal" ? a = B[m.heal].emitter : s.type == "boost" && (a = B[m.boost].emitter),
                        this._0x95("aoe_heal") && (l.scale = 1.5,
                        l.radius = R.player.medicHealRange / l.scale,
                        l.rateMult = .25);
                        break
                    }
                case ie.Revive:
                    {
                        this._0x73._0x88 && (a = "revive_basic");
                        break
                    }
                }
                a && (!this.useItemEmitter || this.useItemEmitter.type != a) && (this.useItemEmitter?.stop(),
                l.pos = this._0x63,
                l.layer = this.layer,
                this.useItemEmitter = i.addEmitter(a, l)),
                this.useItemEmitter && (this.useItemEmitter.pos = n.add(this._0x63, n.create(0, .1)),
                this.useItemEmitter.layer = this.renderLayer,
                this.useItemEmitter.zOrd = this.renderZOrd + 1),
                this.useItemEmitter && !a && (this.useItemEmitter.stop(),
                this.useItemEmitter = null),
                r.isSoundPlaying(this.actionSoundInstance) || (this.actionSoundInstance = null),
                this.actionSoundInstance && !e && r.updateSound(this.actionSoundInstance, "otherPlayers", this._0x63, {
                    layer: this.layer,
                    fallOff: 2,
                    filter: "muffled"
                })
            }
            playItemPickupSound(e, t) {
                const i = B[e];
                i && (t.playSound(i.sound?.pickup, {
                    channel: "ui"
                }),
                i.type == "throwable" && (this.lastThrowablePickupSfxTicker = .3))
            }
            selectIdlePose() {
                const e = B[this._0x73._0x128];
                let t = "fists";
                return this.downed ? t = "downed" : "anim"in e && e.anim.idlePose ? t = e.anim.idlePose : e.type == "gun" ? e.pistol ? t = e.isDual ? "dualPistol" : "pistol" : e.isBullpup ? t = "bullpup" : e.isLauncher ? t = "launcher" : t = e.isDual ? "dualRifle" : "rifle" : e.type == "throwable" ? t = "throwable" : t = "fists",
                ui[t] ? t : "fists"
            }
            selectAnim(e) {
                const t = function(i, r) {
                    return {
                        type: i,
                        mirror: !!r && Math.random() < .5
                    }
                };
                switch (e) {
                case me.None:
                    return t("none", !1);
                case me.Cook:
                    return t("cook", !1);
                case me.Throw:
                    return t("throw", !1);
                case me.Revive:
                    return t("revive", !1);
                case me.CrawlForward:
                    return t("crawl_forward", !0);
                case me.CrawlBackward:
                    return t("crawl_backward", !0);
                case me.Melee:
                    {
                        const i = B[this._0x73._0x128];
                        if (!i.anim?.attackAnims)
                            return t("fists", !0);
                        const r = i.anim.attackAnims
                            , a = Math.floor(Math.random() * r.length)
                            , l = r[a];
                        return t(l, l == "fists" && r.length == 1)
                    }
                default:
                    return t("none", !1)
                }
            }
            currentAnim() {
                return this.anim.type
            }
            playAnim(e, t) {
                this.anim.type = e,
                this.anim.data = this.selectAnim(e),
                this.anim.seq = t,
                this.anim.ticker = 0;
                for (let i = 0; i < this.bones.length; i++) {
                    const r = this.anim.bones[i];
                    r.weight = 0,
                    r.pose.copy(this.bones[i])
                }
            }
            updateAnim(e, t) {
                if (this.anim.data.type == "none" && this.playAnim(me.None, this.anim.seq),
                this.currentAnim() != me.None) {
                    const i = this.anim.ticker;
                    this.anim.ticker += e * 1;
                    const r = rs[this.anim.data.type]
                        , a = r.keyframes;
                    let l = -1
                        , s = 0;
                    for (; this.anim.ticker >= a[s].time && s < a.length - 1; )
                        l++,
                        s++;
                    l = z.max(l, 0);
                    const m = a[l].time
                        , d = a[s].time
                        , h = z.min((this.anim.ticker - m) / (d - m), 1)
                        , p = a[l].bones
                        , w = a[s].bones
                        , f = this.anim.data.mirror;
                    for (let y = 0; y < this.anim.bones.length; y++) {
                        const P = this.anim.bones[y];
                        let C = y;
                        f && (C = y % 2 == 0 ? y + 1 : y - 1),
                        p[C] !== void 0 && w[C] !== void 0 && (P.weight = l == s ? h : 1,
                        P.pose.copy(I.lerp(h, p[C], w[C])),
                        f && (P.pose.pos.y *= -1,
                        P.pose.pivot.y *= -1,
                        P.pose.rot *= -1))
                    }
                    const S = s == a.length - 1 && z.eqAbs(h, 1);
                    let x = this.anim.ticker;
                    S && (x += 1);
                    for (let y = 0; y < r.effects.length; y++) {
                        const P = r.effects[y];
                        P.time >= i && P.time < x && this[P.fn].apply(this, [t, P.args])
                    }
                    S && this.playAnim(me.None, this.anim.seq)
                }
            }
            animPlaySound(e, t) {
                const r = B[this._0x73._0x128].sound[t.sound];
                r && e.audioManager?.playSound(r, {
                    channel: "sfx",
                    soundPos: this._0x63,
                    fallOff: 3,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
            animSetThrowableState(e, t) {
                this.throwableState = t.state
            }
            animThrowableParticles(e, t) {
                if (B[this._0x73._0x128].useThrowParticles) {
                    const i = n.rotate(n.create(.75, .75), Math.atan2(this._0x125.y, this._0x125.x));
                    e.particleBarn?.addParticle("fragPin", this.renderLayer, n.add(this._0x63, i), n.mul(n.rotate(this._0x125, Math.PI * .5), 4.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1);
                    const r = n.rotate(n.create(.75, -.75), Math.atan2(this._0x125.y, this._0x125.x));
                    e.particleBarn?.addParticle("fragLever", this.renderLayer, n.add(this._0x63, r), n.mul(n.rotate(this._0x125, -Math.PI * .25), 3.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1)
                }
            }
            animMeleeCollision(e, t) {
                const i = B[this._0x73._0x128];
                if (i && i.type == "melee") {
                    const r = this.getMeleeCollider()
                        , a = r.rad + n.length(n.sub(this._0x63, r.pos))
                        , l = []
                        , s = e.map?._0x53._0x89();
                    for (let p = 0; p < s.length; p++) {
                        const w = s[p];
                        if (w.active && !w.dead && !w.isSkin && w.height >= R.player.meleeHeight && g.sameLayer(w.layer, this.layer & 1)) {
                            let f = U.intersectCircle(w.collider, r.pos, r.rad);
                            if (i.cleave || i.wallCheck) {
                                const S = n.normalizeSafe(n.sub(w.pos, this._0x63), n.create(1, 0))
                                    , x = it.intersectSegment(e.map?._0x53._0x89(), this._0x63, S, a, 1, this.layer, !1);
                                x && x.id !== w.__id && (f = null)
                            }
                            if (f) {
                                const S = re[w.type]
                                    , x = n.add(r.pos, n.mul(n.neg(f.dir), r.rad - f.pen))
                                    , y = n.rotate(n.mul(f.dir, 7.5), (Math.random() - .5) * Math.PI / 3);
                                l.push({
                                    pen: f.pen,
                                    prio: 1,
                                    pos: x,
                                    vel: y,
                                    layer: this.renderLayer,
                                    zOrd: this.renderZOrd,
                                    particle: S.hitParticle,
                                    sound: S.sound.punch,
                                    soundFn: "playGroup"
                                })
                            }
                        }
                    }
                    const m = e.playerBarn?.getPlayerInfo(this.__id).teamId
                        , d = e.playerBarn?.playerPool._0x89();
                    for (let p = 0; p < d.length; p++) {
                        const w = d[p];
                        if (w.active && w.__id != this.__id && !w._0x73._0x85 && g.sameLayer(w.layer, this.layer)) {
                            const f = n.normalizeSafe(n.sub(w._0x63, this._0x63), n.create(1, 0))
                                , S = xe.intersectCircleCircle(r.pos, r.rad, w._0x63, w._0x90);
                            if (S && z.eqAbs(a, it.intersectSegmentDist(e.map?._0x53._0x89(), this._0x63, f, a, R.player.meleeHeight, this.layer, !1))) {
                                const x = e.playerBarn?.getPlayerInfo(w.__id).teamId
                                    , y = n.rotate(f, (Math.random() - .5) * Math.PI / 3)
                                    , P = i.sound[t.playerHit] || i.sound.playerHit;
                                window.CrazyGames || l.push({
                                    pen: S.pen,
                                    prio: x == m ? 2 : 0,
                                    pos: n.copy(w._0x63),
                                    vel: y,
                                    layer: w.renderLayer,
                                    zOrd: w.renderZOrd,
                                    particle: "bloodSplat",
                                    sound: P,
                                    soundFn: "playSound"
                                })
                            }
                        }
                    }
                    l.sort( (p, w) => p.prio == w.prio ? w.pen - p.pen : p.prio - w.prio);
                    let h = l.length;
                    i.cleave || (h = z.min(h, 1));
                    for (let p = 0; p < h; p++) {
                        const w = l[p];
                        e.particleBarn?.addParticle(w.particle, w.layer, w.pos, w.vel, 1, Math.random() * Math.PI * 2, null, w.zOrd + 1),
                        e.audioManager?.[w.soundFn](w.sound, {
                            channel: "hits",
                            soundPos: w.pos,
                            layer: this.layer,
                            filter: "muffled"
                        })
                    }
                }
            }
            initSubmergeSprites() {
                const e = function(i, r) {
                    i.texture = H.from(r),
                    i.anchor.set(.5, .5),
                    i.tint = 16777215,
                    i.alpha = 0,
                    i.visible = !1
                };
                e(this.bodySubmergeSprite, "player-wading-01.img"),
                e(this.handLSubmergeSprite, "player-hands-01.img"),
                e(this.handRSubmergeSprite, "player-hands-01.img"),
                e(this.footLSubmergeSprite, "player-feet-01.img"),
                e(this.footRSubmergeSprite, "player-feet-01.img");
                const t = new pe;
                t.beginFill(16711680, .5),
                t.drawCircle(0, 0, 38 * 2 * di),
                t.position.set(0, 0),
                this.bodySubmergeSprite.addChild(t),
                this.bodySubmergeSprite.mask = t,
                this.bodySubmergeSprite.scale.set(.5, .5)
            }
            updateSubmersion(e, t) {
                const i = this.surface?.type == "water";
                let r = 0;
                if (i) {
                    const d = this.surface?.data.river
                        , h = d && !t.isInOcean(this._0x63)
                        , p = h ? d.distanceToShore(this._0x63) : t.distanceToShore(this._0x63)
                        , w = h ? 12 : 16;
                    r = z.remap(p, 0, w, .6, 1)
                }
                this.submersion = z.lerp(e * 4, this.submersion, r);
                const a = this.submersion * .8
                    , l = (.9 - this.submersion * .4) * 2
                    , s = 1 / (l * di);
                this.bodySubmergeSprite.scale.set(l, l),
                this.bodySubmergeSprite.mask.scale.set(s, s),
                this.bodySubmergeSprite.alpha = a,
                this.bodySubmergeSprite.visible = a > .001,
                i && (this.bodySubmergeSprite.tint = this.surface?.data.waterColor);
                const m = [this.handLSubmergeSprite, this.handRSubmergeSprite, this.footLSubmergeSprite, this.footRSubmergeSprite];
                for (let d = 0; d < m.length; d++) {
                    const h = m[d];
                    h.alpha = this.downed ? a : 0,
                    h.visible = h.alpha > .001,
                    i && (h.tint = this.surface?.data.waterColor)
                }
            }
            updateFrozenState(e) {
                this._0x73._0x135 ? this.frozenTicker = .25 : (this.frozenTicker -= e,
                this.updateFrozenImage = !0),
                this.bodyEffectSprite.alpha = this._0x73._0x135 ? 1 : z.remap(this.frozenTicker, 0, .25, 0, 1),
                this.bodyEffectSprite.visible = this.frozenTicker > 0
            }
            addRecoil(e, t, i) {
                t && (this.gunRecoilL += e),
                i && (this.gunRecoilR += e)
            }
            isUnderground(e) {
                if (this.layer != 1)
                    return !1;
                const t = e._0x55._0x89();
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    if (r.layers.length >= 2) {
                        const a = r.layers[1];
                        if (U.intersectCircle(a.collision, this._0x63, this._0x90))
                            return a.underground
                    }
                }
                return !0
            }
        }
        class ir {
            playerPool = new be(us);
            playerInfo = {};
            playerIds = [];
            teamInfo = {};
            groupInfo = {};
            playerStatus = {};
            anonPlayerNames = !1;
            onMapLoad(e) {}
            _0x62(e, t, i, r, a, l, s, m, d, h, p, w, f) {
                const S = this.playerPool._0x89();
                for (let k = 0; k < S.length; k++) {
                    const b = S[k];
                    b.active && b._0x62(e, this, s, d, a, m, l, r, h, t, p, w, f)
                }
                const x = this.getPlayerInfo(t)
                    , y = this.getPlayerById(t);
                this.setPlayerStatus(t, {
                    pos: n.copy(y._0x73._0x63),
                    health: y._0x71._0x86,
                    disconnected: !1,
                    dead: y._0x73._0x85,
                    downed: y._0x73._0x88,
                    role: y._0x73._0x141,
                    visible: !0
                });
                const P = zr(s.factionMode)
                    , C = Object.keys(this.playerStatus);
                for (let k = 0; k < C.length; k++) {
                    const b = this.playerStatus[C[k]]
                        , M = b.playerId
                        , E = this.getPlayerInfo(M)
                        , D = this.getPlayerById(M);
                    D ? (b.posDelta = n.length(n.sub(D._0x73._0x63, b.pos)),
                    b.posTarget = n.copy(D._0x73._0x63),
                    b.posInterp = z.clamp(b.posInterp + e * .2, e / P, 1),
                    b.dead = D._0x73._0x85,
                    b.downed = D._0x73._0x88) : b.posInterp = e / P;
                    const L = n.sub(b.posTarget, b.pos)
                        , v = n.length(L)
                        , T = v > 1e-4 ? n.div(L, v) : n.create(1, 0)
                        , V = z.min(v, b.posDelta * b.posInterp);
                    b.pos = n.add(b.pos, n.mul(T, V)),
                    b.timeSinceVisible += e,
                    b.timeSinceUpdate += e;
                    const F = !b.dead || E.teamId != x.teamId && b.role != "leader" ? 0 : .6;
                    b.minimapAlpha = z.smoothstep(b.timeSinceVisible, 0, .1) * z.lerp(z.smoothstep(b.timeSinceUpdate, 2, 2.5), 1, F),
                    !s.factionMode && E.teamId != x.teamId && (b.minimapAlpha = 0),
                    b.minimapVisible = b.minimapAlpha > .01
                }
            }
            _0x77(e, t) {
                const i = this.playerPool._0x89();
                for (let r = 0; r < i.length; r++) {
                    const a = i[r];
                    a.active && a.render(e, t)
                }
            }
            getPlayerById(e) {
                const t = this.playerPool._0x89();
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    if (r.active && r.__id === e)
                        return r
                }
                return null
            }
            setPlayerInfo(e) {
                this.playerInfo[e.playerId] = {
                    playerId: e.playerId,
                    teamId: e.teamId,
                    groupId: e.groupId,
                    name: e.name,
                    nameTruncated: X.truncateString(e.name || "", "bold 16px arial", 180),
                    anonName: `Player${e.playerId - 2750}`,
                    loadout: g.cloneDeep(e.loadout)
                },
                this.playerIds.push(e.playerId),
                this.playerIds.sort( (t, i) => t - i)
            }
            deletePlayerInfo(e) {
                const t = this.playerIds.indexOf(e);
                t !== -1 && this.playerIds.splice(t, 1),
                delete this.playerInfo[e],
                delete this.playerStatus[e]
            }
            getPlayerInfo(e) {
                return this.playerInfo[e] || {
                    playerId: 0,
                    group: 0,
                    teamId: 0,
                    name: "",
                    nameTruncated: "",
                    anonName: "",
                    loadout: {}
                }
            }
            recomputeTeamData() {
                this.teamInfo = {},
                this.groupInfo = {};
                const e = Object.keys(this.playerInfo);
                for (let r = 0; r < e.length; r++) {
                    const a = this.playerInfo[e[r]]
                        , l = a.playerId
                        , s = a.teamId;
                    this.teamInfo[s] = this.teamInfo[s] || {
                        teamId: s,
                        playerIds: []
                    },
                    this.teamInfo[s].playerIds.push(l);
                    const m = a.groupId;
                    this.groupInfo[m] = this.groupInfo[m] || {
                        groupId: m,
                        playerIds: []
                    },
                    this.groupInfo[m].playerIds.push(l)
                }
                const t = Object.keys(this.teamInfo);
                for (let r = 0; r < t.length; r++)
                    this.teamInfo[t[r]].playerIds.sort( (a, l) => a - l);
                const i = Object.keys(this.groupInfo);
                for (let r = 0; r < i.length; r++)
                    this.groupInfo[i[r]].playerIds.sort( (a, l) => a - l)
            }
            getTeamInfo(e) {
                return this.teamInfo[e]
            }
            getGroupInfo(e) {
                return this.groupInfo[e]
            }
            updatePlayerStatus(e, t, i) {
                const r = this.getTeamInfo(e)
                    , a = i ? this.playerIds : r.playerIds;
                if (a.length != t.players.length) {
                    console.error(`PlayerIds and playerStatus.players out of sync. OurLen: ${a.length} MsgLen: ${t.players.length} FactionMode: ${i}`);
                    return
                }
                for (let l = 0; l < a.length; l++) {
                    const s = a[l]
                        , m = t.players[l];
                    m.hasData && this.setPlayerStatus(s, m)
                }
            }
            setPlayerStatus(e, t) {
                const i = this.playerStatus[e] || {
                    playerId: e,
                    pos: n.copy(t.pos),
                    posTarget: n.copy(t.pos),
                    posDelta: n.create(0, 0),
                    health: 100,
                    posInterp: 0,
                    visible: !1,
                    dead: !1,
                    downed: !1,
                    disconnected: !1,
                    role: "",
                    timeSinceUpdate: 0,
                    timeSinceVisible: 0,
                    minimapAlpha: 0,
                    minimapVisible: !1
                };
                i.minimapVisible || (i.pos = n.copy(t.pos),
                !i.visible && t.visible && (i.timeSinceVisible = 0)),
                i.visible = t.visible,
                i.visible && (i.timeSinceUpdate = 0),
                i.posTarget = n.copy(t.pos),
                i.posDelta = n.length(n.sub(t.pos, i.pos)),
                i.dead = t.dead,
                i.downed = t.downed,
                i.role = t.role,
                t.health !== void 0 && (i.health = t.health),
                t.disconnected !== void 0 && (i.disconnected = t.disconnected),
                this.playerStatus[e] = i
            }
            getPlayerStatus(e) {
                return this.playerStatus[e]
            }
            updateGroupStatus(e, t) {
                const i = this.getGroupInfo(e);
                if (i.playerIds.length != t.players.length) {
                    console.error("PlayerIds and groupStatus.players out of sync");
                    return
                }
                for (let r = 0; r < i.playerIds.length; r++) {
                    const a = i.playerIds[r]
                        , l = t.players[r]
                        , s = this.getPlayerStatus(a);
                    s && (s.health = l.health,
                    s.disconnected = l.disconnected)
                }
            }
            getGroupColor(e) {
                const t = this.getPlayerInfo(e)
                    , i = this.getGroupInfo(t.groupId)
                    , r = i ? i.playerIds.indexOf(e) : 0;
                return r >= 0 && r < R.groupColors.length ? R.groupColors[r] : 16777215
            }
            getTeamColor(e) {
                const t = e - 1;
                return t >= 0 && t < R.teamColors.length ? R.teamColors[t] : 16777215
            }
            getPlayerName(e, t, i) {
                const r = this.getPlayerInfo(e);
                if (!r)
                    return "";
                let a = r.name;
                return i && (a = r.nameTruncated),
                this.anonPlayerNames && this.getPlayerInfo(t).groupId != r.groupId && (a = r.anonName),
                a
            }
            addDeathEffect(e, t, i, r, a) {
                const l = this.getPlayerById(e)
                    , s = this.getPlayerById(t);
                if (l && s?._0x95("turkey_shoot")) {
                    r.playGroup("cluck", {
                        soundPos: l._0x63,
                        layer: l.layer,
                        muffled: !0
                    }),
                    r.playSound("feather_01", {
                        channel: "sfx",
                        soundPos: l._0x63,
                        layer: l.layer,
                        muffled: !0
                    });
                    const m = Math.floor(g.random(30, 35));
                    for (let d = 0; d < m; d++) {
                        const h = n.mul(n.randomUnit(), g.random(5, 15));
                        a.addParticle("turkeyFeathersDeath", l.layer, l._0x63, h)
                    }
                }
            }
        }
        class ds {
            __id;
            __type;
            active;
            _0x120;
            _0x63;
            _0x90;
            _0x83;
            _0x121;
            _0x113() {}
            _0x60() {
                this._0x120.fadeOut(),
                this._0x120 = null
            }
            _0x119(e, t, i, r) {
                this._0x63 = n.copy(e.pos),
                this._0x90 = e.rad,
                t && (this._0x83 = e.layer,
                this._0x121 = e.interior),
                i && (this._0x120 = r.smokeBarn._0x122(),
                this._0x120?._0x113(this._0x63, this._0x90, this._0x83, this._0x121)),
                this._0x120.posTarget = n.copy(this._0x63),
                this._0x120.radTarget = this._0x90
            }
        }
        const fi = ["part-smoke-02.img", "part-smoke-03.img"];
        class ps {
            active = !1;
            zIdx = 0;
            sprite = ee.from(fi[Math.floor(Math.random() * fi.length)]);
            pos;
            posTarget;
            rad;
            radTarget;
            rot;
            rotVel;
            fade;
            fadeTicker;
            fadeDuration;
            tint;
            layer;
            interior;
            constructor() {
                this.sprite.anchor = new Et(.5,.5),
                this.sprite.visible = !1
            }
            _0x113(e, t, i, r) {
                this.pos = n.copy(e),
                this.posTarget = n.copy(this.pos),
                this.rad = t,
                this.radTarget = this.rad,
                this.rot = g.random(0, Math.PI * 2),
                this.rotVel = Math.PI * g.random(.25, .5) * (Math.random() < .5 ? -1 : 1),
                this.fade = !1,
                this.fadeTicker = 0,
                this.fadeDuration = g.random(.5, .75),
                this.tint = g.rgbToInt(g.hsvToRgb(0, 0, g.random(.9, .95))),
                this.layer = i,
                this.interior = r
            }
            fadeOut() {
                this.fade = !0
            }
        }
        class rr {
            _0x56 = new be(ds);
            _0x61 = [];
            zIdx = 2147483647;
            _0x122() {
                let e = null;
                for (let t = 0; t < this._0x61.length; t++)
                    if (!this._0x61[t].active) {
                        e = this._0x61[t];
                        break
                    }
                return e || (e = new ps,
                this._0x61.push(e)),
                e.active = !0,
                e.zIdx = this.zIdx--,
                e
            }
            _0x62(e, t, i, r, a) {
                for (let l = 0; l < this._0x61.length; l++) {
                    const s = this._0x61[l];
                    if (s.active) {
                        s.rad = z.lerp(e * 3, s.rad, s.radTarget),
                        s.pos = z.v2lerp(e * 3, s.pos, s.posTarget),
                        s.rotVel *= 1 / (1 + e * .1),
                        s.rot += s.rotVel * e,
                        s.fadeTicker += s.fade ? e : 0,
                        s.active = s.fadeTicker < s.fadeDuration;
                        const m = z.clamp(1 - s.fadeTicker / s.fadeDuration, 0, 1) * .9;
                        let d = s.layer;
                        (g.sameLayer(s.layer, i.layer) || i.layer & 2) && (s.layer == 1 || !(i.layer & 2) || !r.insideStructureMask(U.createCircle(s.pos, 1))) && (d |= 2);
                        const h = s.interior ? 500 : 1e3;
                        a.addPIXIObj(s.sprite, d, h, s.zIdx);
                        const p = t._0x105(s.pos)
                            , w = t._0x106(s.rad * 2 / t._0x68);
                        s.sprite.position.set(p.x, p.y),
                        s.sprite.scale.set(w, w),
                        s.sprite.rotation = s.rot,
                        s.sprite.tint = s.tint,
                        s.sprite.alpha = m,
                        s.sprite.visible = s.active
                    }
                }
            }
        }
        function wi(u, e, t) {
            const i = e - u
                , r = i * t;
            return Math.abs(r) < .01 ? i : r
        }
        function fs() {
            const u = new pe;
            return u.position.set(0, 0),
            u.scale.set(1, 1),
            u.__zOrd = 0,
            u.__zIdx = 0,
            u
        }
        function gt(u, e, t, i, r) {
            u.moveTo(e, t),
            u.lineTo(e, t + r),
            u.lineTo(e + i, t + r),
            u.lineTo(e + i, t),
            u.lineTo(e, t),
            u.closePath()
        }
        class ar {
            constructor(e, t) {
                this.game = e,
                this.canvasMode = t;
                for (let i = 0; i < 4; i++)
                    this.layers.push(new ws(`layer_${i}`));
                this.ground.alpha = 0
            }
            zIdx = 0;
            layer = 0;
            layerAlpha = 0;
            groundAlpha = 0;
            underground = !1;
            layers = [];
            ground = new pe;
            layerMask = fs();
            debugLayerMask = null;
            layerMaskDirty = !0;
            layerMaskActive = !1;
            _0x60() {
                this.layerMask.parent?.removeChild(this.layerMask),
                this.layerMask.destroy(!0)
            }
            addPIXIObj(e, t, i, r) {
                if (!e.transform) {
                    const s = new Error
                        , m = JSON.stringify({
                        type: "addChild",
                        stack: s.stack,
                        browser: navigator.userAgent,
                        playing: this.game._0x2,
                        gameOver: this.game._0x38,
                        spectating: this.game._0x39,
                        time: this.game._0x42,
                        mode: this.game.teamMode,
                        layer: t,
                        zOrd: i,
                        zIdx: r
                    });
                    console.error(m)
                }
                e.__layerIdx === void 0 && (e.__layerIdx = -1,
                e.__zOrd = -1,
                e.__zIdx = -1);
                let a = t;
                t & 2 && (a = i >= 100 ? 3 : 2),
                !(e.parent == this.layers[a] && e.__zOrd == i && (r === void 0 || e.__zIdx == r)) && (e.__layerIdx = a,
                e.__zOrd = i,
                e.__zIdx = r !== void 0 ? r : this.zIdx++,
                this.layers[a].addSortedChild(e))
            }
            setActiveLayer(e) {
                this.layer = e
            }
            setUnderground(e) {
                this.underground = e
            }
            resize(e, t) {
                const i = e.mapLoaded ? e.getMapDef().biome.colors.underground : 1772803;
                this.ground.clear(),
                this.ground.beginFill(i),
                this.ground.drawRect(0, 0, t._0x66, t._0x67),
                this.ground.endFill(),
                this.layerMaskDirty = !0
            }
            redrawLayerMask(e, t) {
                const i = this.layerMask;
                if (this.canvasMode) {
                    if (i.clear(),
                    this.layerMaskActive) {
                        i.beginFill(16777215, 1),
                        i.drawRect(0, 0, e._0x66, e._0x67);
                        const r = t._0x55._0x89();
                        for (let a = 0; a < r.length; a++) {
                            const l = r[a];
                            if (l.active)
                                for (let s = 0; s < l.mask.length; s++) {
                                    const m = l.mask[s]
                                        , d = n.mul(n.sub(m.max, m.min), .5)
                                        , h = n.add(m.min, d)
                                        , p = e._0x105(n.sub(h, d))
                                        , w = e._0x105(n.add(h, d));
                                    i.drawRect(p.x, p.y, w.x - p.x, w.y - p.y)
                                }
                        }
                        i.endFill()
                    }
                } else {
                    if (this.layerMaskDirty) {
                        this.layerMaskDirty = !1,
                        i.clear(),
                        i.beginFill(16777215, 1),
                        gt(i, 0, 0, 1024, 1024);
                        const l = t._0x55._0x89();
                        for (let s = 0; s < l.length; s++) {
                            const m = l[s];
                            if (m.active)
                                for (let d = 0; d < m.mask.length; d++) {
                                    const h = m.mask[d]
                                        , p = n.mul(n.sub(h.max, h.min), .5)
                                        , w = n.add(h.min, p)
                                        , f = w.x - p.x
                                        , S = w.y - p.y
                                        , x = p.x * 2
                                        , y = p.y * 2;
                                    i.beginHole(),
                                    gt(i, f, S, x, y),
                                    i.endHole()
                                }
                        }
                        i.endFill()
                    }
                    const r = e._0x105(n.create(0, 0))
                        , a = e._0x107(1);
                    i.position.set(r.x, r.y),
                    i.scale.set(a, -a)
                }
            }
            redrawDebugLayerMask(e, t) {
                const i = this.debugLayerMask;
                i.clear(),
                i.beginFill(16711935, 1);
                const r = t._0x55._0x89();
                for (let s = 0; s < r.length; s++) {
                    const m = r[s];
                    if (m.active)
                        for (let d = 0; d < m.mask.length; d++) {
                            const h = m.mask[d]
                                , p = n.mul(n.sub(h.max, h.min), .5)
                                , w = n.add(h.min, p)
                                , f = w.x - p.x
                                , S = w.y - p.y
                                , x = p.x * 2
                                , y = p.y * 2;
                            gt(i, f, S, x, y)
                        }
                }
                i.endFill();
                const a = e._0x105(n.create(0, 0));
                e._0x105(n.create(1, 0));
                const l = e._0x107(1);
                i.position.set(a.x, a.y),
                i.scale.set(l, -l)
            }
            _0x62(e, t, i, r) {
                const a = this.layer > 0 ? 1 : 0;
                this.layerAlpha += wi(this.layerAlpha, a, e * 12);
                const l = this.layer == 1 && this.underground ? 1 : 0;
                this.groundAlpha += wi(this.groundAlpha, l, e * 12),
                this.layers[0].alpha = 1,
                this.layers[1].alpha = this.layerAlpha,
                this.layers[2].alpha = 1,
                this.layers[3].alpha = 1,
                this.ground.alpha = this.groundAlpha,
                this.layers[0].visible = this.groundAlpha < 1,
                this.layers[1].visible = this.layerAlpha > 0,
                this.ground.visible = this.groundAlpha > 0,
                this.redrawLayerMask(t, i);
                const s = this.layer == 0;
                s && !this.layerMaskActive ? (this.layers[2].mask = this.layerMask,
                this.layers[2].addChild(this.layerMask),
                this.layerMaskActive = !0) : !s && this.layerMaskActive && (this.layers[2].mask = null,
                this.layers[2].removeChild(this.layerMask),
                this.layerMaskActive = !1);
                for (let m = 0; m < this.layers.length; m++)
                    this.layers[m].checkSort()
            }
        }
        class ws extends J {
            constructor(e="") {
                super(),
                this.debugName = e
            }
            dirty = !0;
            addSortedChild(e) {
                this.addChild(e),
                this.dirty = !0
            }
            checkSort() {
                return this.dirty ? (this.children.sort( (e, t) => e.__zOrd == t.__zOrd ? e.__zIdx - t.__zIdx : e.__zOrd - t.__zOrd),
                this.dirty = !1,
                !0) : !1
            }
        }
        const Je = 2
            , gi = 1e-5;
        class gs {
            constructor(e, t) {
                this.input = e,
                this.config = t;
                const i = function(m, d) {
                    const h = ee.from("pad.img");
                    return h.anchor.set(.5, .5),
                    h.scale.set(1, 1),
                    h.alpha = .2,
                    h.visible = !1,
                    h.tint = d,
                    m.addChild(h),
                    h
                }
                    , r = () => ({
                    touched: !1,
                    centerPos: n.create(0, 0),
                    touchPos: n.create(0, 0),
                    centerSprite: i(this.container, 0),
                    touchSprite: i(this.container, 16777215)
                });
                this.touchPads = [r(), r()];
                const a = function(m) {
                    return ["locked", "anywhere"].includes(m) ? m : "anywhere"
                }
                    , l = a(t.get("touchMoveStyle"))
                    , s = a(t.get("touchAimStyle"));
                this.setMoveStyle(l),
                this.setAimStyle(s),
                this.setTouchAimLine(!!t.get("touchAimLine")),
                this.init()
            }
            container = new J;
            lineSprites = new Ss;
            padScaleBase = 1;
            padScaleDown = .6;
            padScalePos = .25;
            moveDetected = !1;
            shotDetected = !1;
            shotDetectedOld = !1;
            touchingAim = !1;
            display = !0;
            moveStyle = "locked";
            aimStyle = "locked";
            touchAimLine = !0;
            touchPads;
            playerMovement = {
                left: !1,
                right: !1,
                up: !1,
                down: !1,
                moveLen: 0
            };
            analogMovement = {
                toMoveDir: n.create(1, 0),
                toMoveLen: 0
            };
            aimMovement = {
                toAimDir: n.create(1, 0),
                toAimLen: 0
            };
            leftLockedPadCenter = n.create(0, 0);
            rightLockedPadCenter = n.create(0, 0);
            padPosBase = 48;
            padPosRange = 0;
            movePadDetectMult = 1;
            shotPadDetectMult = 1.075;
            turnDirCooldown = .5;
            turnDirTicker = 0;
            mobileOffsetLandscape = 25;
            mobileOffsetPortrait = 100;
            lockedPadOffsetLandscape = n.create(126, 100);
            lockedPadOffsetPortrait = n.create(96, 160);
            lockedPadOffsetYLandscapeSafari = 120;
            lockedPadOffsetYPortraitSafari = 240;
            getTouchMovement(e) {
                return this.getMovement(e)
            }
            getAimMovement(e, t) {
                const i = e._0x71._0x98 == R.WeaponSlot.Throwable;
                return this.getAim(i, t)
            }
            setAimDir(e) {
                this.aimMovement.toAimDir = n.copy(e)
            }
            getMovement(e) {
                let t = null, i = null, r = !1, a;
                this.moveDetected = !1;
                for (let s = 0; s < this.input.touches.length; s++) {
                    const m = this.input.touches[s];
                    if (!m.isDead && this.isLeftSideTouch(m.posDown.x, e)) {
                        const d = this.moveStyle == "anywhere" ? m.posDown : this.leftLockedPadCenter
                            , h = n.sub(m.pos, d)
                            , p = n.length(h);
                        if (p > Je) {
                            const w = (p - Je) / (this.padPosRange / this.movePadDetectMult - Je);
                            a = w > gi ? n.div(h, w) : this.analogMovement.toMoveDir,
                            this.analogMovement = {
                                toMoveDir: n.create(a.x, a.y * -1),
                                toMoveLen: w
                            },
                            this.moveDetected = !0
                        }
                        i = this.getConstrainedPos(d, m.pos, p),
                        t = d,
                        r = !0;
                        break
                    }
                }
                const l = this.touchPads[0];
                return l.touched = r,
                r && this.moveStyle == "anywhere" ? l.centerPos = n.copy(t) : l.centerPos = n.copy(this.leftLockedPadCenter),
                l.touchPos.x = r ? i.x : this.leftLockedPadCenter.x,
                l.touchPos.y = r ? i.y : this.leftLockedPadCenter.y,
                this.analogMovement
            }
            getAim(e, t) {
                let i = !1, r = null, a = null, l;
                for (let m = 0; m < this.input.touches.length; m++) {
                    const d = this.input.touches[m];
                    if (!d.isDead && !this.isLeftSideTouch(d.posDown.x, t)) {
                        const h = this.aimStyle == "anywhere" ? d.posDown : this.rightLockedPadCenter
                            , p = n.sub(d.pos, h)
                            , w = n.length(p);
                        if (w > Je) {
                            const f = n.sub(d.pos, h)
                                , S = n.length(f);
                            l = S > gi ? n.div(f, S) : this.aimMovement.toAimDir,
                            this.aimMovement = {
                                toAimDir: n.create(l.x, l.y * -1),
                                toAimLen: S
                            }
                        } else
                            this.aimMovement.toAimLen = 0;
                        a = this.getConstrainedPos(h, d.pos, w),
                        r = h,
                        i = !0;
                        break
                    }
                }
                this.shotDetectedOld = this.shotDetected,
                this.shotDetected = this.aimMovement.toAimLen > this.padPosRange / this.shotPadDetectMult && i,
                this.touchingAim = i,
                e && this.shotDetectedOld && i && (this.shotDetected = !0);
                const s = this.touchPads[1];
                return s.touched = i,
                i && this.aimStyle == "anywhere" ? s.centerPos = n.copy(r) : s.centerPos = n.copy(this.rightLockedPadCenter),
                s.touchPos.x = i ? a.x : this.rightLockedPadCenter.x,
                s.touchPos.y = i ? a.y : this.rightLockedPadCenter.y,
                {
                    aimMovement: this.aimMovement,
                    touched: s.touched
                }
            }
            _0x62(e, t, i, r, a) {
                for (let l = 0; l < this.touchPads.length; l++) {
                    const s = this.touchPads[l];
                    s.centerSprite.position.x = s.centerPos.x,
                    s.centerSprite.position.y = s.centerPos.y,
                    s.centerSprite.scale.x = this.padScaleBase * this.padScaleDown,
                    s.centerSprite.scale.y = this.padScaleBase * this.padScaleDown,
                    s.centerSprite.visible = _.touch && this.display,
                    s.touchSprite.position.x = s.touchPos.x,
                    s.touchSprite.position.y = s.touchPos.y,
                    s.touchSprite.scale.x = this.padScaleBase * this.padScalePos,
                    s.touchSprite.scale.y = this.padScaleBase * this.padScalePos,
                    s.touchSprite.visible = _.touch && this.display
                }
                this.lineSprites.update(this, t, i, r, a)
            }
            isLeftSideTouch(e, t) {
                return e < t._0x66 * .5
            }
            getConstrainedPos(e, t, i) {
                if (i <= this.padPosRange)
                    return t;
                const r = t.x - e.x
                    , a = t.y - e.y
                    , l = Math.atan2(a, r);
                return n.create(Math.cos(l) * this.padPosRange + e.x, Math.sin(l) * this.padPosRange + e.y)
            }
            getConstrainedPosDown(e, t, i) {
                const r = n.normalizeSafe(t);
                return n.add(e, n.mul(r, Math.max(0, i - this.padPosRange)))
            }
            toggleMoveStyle() {
                this.setMoveStyle(this.moveStyle == "locked" ? "anywhere" : "locked")
            }
            setMoveStyle(e) {
                this.moveStyle = e,
                this.config.set("touchMoveStyle", e);
                const t = document.getElementById("btn-game-move-style");
                t && (this.moveStyle == "locked" ? (t.classList.remove("unlocked-on-icon"),
                t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"),
                t.classList.add("unlocked-on-icon")))
            }
            toggleAimStyle() {
                this.setAimStyle(this.aimStyle == "locked" ? "anywhere" : "locked")
            }
            setAimStyle(e) {
                this.aimStyle = e,
                this.config.set("touchAimStyle", e);
                const t = document.getElementById("btn-game-aim-style");
                this.aimStyle == "locked" ? (t.classList.remove("unlocked-on-icon"),
                t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"),
                t.classList.add("unlocked-on-icon"))
            }
            toggleAimLine() {
                this.setTouchAimLine(!this.touchAimLine)
            }
            setTouchAimLine(e) {
                this.touchAimLine = e,
                this.config.set("touchAimLine", this.touchAimLine);
                const t = document.getElementById("btn-game-aim-line");
                this.touchAimLine ? (t.classList.remove("aim-line-off-icon"),
                t.classList.add("aim-line-on-icon")) : (t.classList.remove("aim-line-on-icon"),
                t.classList.add("aim-line-off-icon"))
            }
            init() {
                this.resize()
            }
            resize() {
                const e = _.isLandscape
                    , t = this.lockedPadOffsetLandscape
                    , i = this.lockedPadOffsetPortrait;
                _.tablet && (t.x = t.x * 1,
                i.x = i.x * 1.25);
                const r = n.create(t.x, t.y)
                    , a = n.create(i.x, i.y)
                    , l = n.create(_.screenWidth - t.x, t.y)
                    , s = n.create(_.screenWidth - i.x, i.y);
                if (_.os == "ios")
                    if (_.model == "iphonex")
                        r.x = r.x + 56,
                        l.x = l.x - 56,
                        r.y = r.y * .9,
                        l.y = l.y * .9;
                    else {
                        let h = this.lockedPadOffsetYLandscapeSafari
                            , p = this.lockedPadOffsetYPortraitSafari;
                        _.tablet && (h *= 1,
                        p *= 1),
                        r.y = h,
                        a.y = p,
                        l.y = h,
                        s.y = p
                    }
                this.padScaleBase = e ? 1 : .8,
                this.padPosRange = this.padPosBase * this.padScaleBase;
                const m = e ? r : a;
                this.leftLockedPadCenter = n.create(m.x, _.screenHeight - m.y);
                const d = e ? l : s;
                this.rightLockedPadCenter = n.create(d.x, _.screenHeight - d.y),
                this.setMobileStyling(e)
            }
            setMobileStyling(e) {
                if (_.touch && (c("#btn-touch-styles").find(".btn-game-container").css("display", "inline-block"),
                c("#ui-emote-button").css("display", "block")),
                _.uiLayout == _.UiLayout.Sm ? (c("#ui-map-wrapper").addClass("ui-map-wrapper-mobile").removeClass("ui-map-wrapper-desktop"),
                c("#ui-settings-container-mobile").css("display", "block"),
                c("#ui-settings-container-desktop").css("display", "none"),
                c("#ui-right-center").addClass("ui-right-center-mobile").removeClass("ui-right-center-desktop"),
                c("#ui-leaderboard-wrapper").css("display", "none"),
                c("#big-map-close").css("display", "block"),
                c("#ui-game-menu").removeClass("ui-game-menu-desktop"),
                c("#btn-game-tabs").css("display", "none"),
                c("#ui-game-tab-settings").removeClass("ui-game-tab-settings-desktop"),
                c(".ui-ability-key").css("display", "none")) : (c("#ui-map-wrapper").removeClass("ui-map-wrapper-mobile").addClass("ui-map-wrapper-desktop"),
                c("#ui-settings-container-mobile").css("display", "none"),
                c("#ui-settings-container-desktop").css("display", "block"),
                c("#ui-right-center").removeClass("ui-right-center-mobile").addClass("ui-right-center-desktop"),
                c("#ui-leaderboard-wrapper").css("display", "block"),
                c("#big-map-close").css("display", "none"),
                c("#ui-game-menu").addClass("ui-game-menu-desktop"),
                c("#btn-game-tabs").css("display", "flex"),
                c("#ui-game-tab-settings").addClass("ui-game-tab-settings-desktop"),
                c(".ui-ability-key").css("display", "block")),
                _.tablet && (e ? (_.os == "ios" ? (c("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-browser"),
                c("#ui-right-center").addClass("ui-right-center-tablet-ipad-browser")) : (c("#ui-bottom-right").addClass("ui-bottom-right-tablet"),
                c("#ui-right-center").addClass("ui-right-center-tablet")),
                c("#ui-bottom-center-left").addClass("ui-bottom-center-left-tablet"),
                c("#ui-bottom-center-right").addClass("ui-bottom-center-right-tablet"),
                c("#ui-top-left").addClass("ui-top-left-tablet"),
                c("#ui-spectate-options-wrapper").addClass("ui-spectate-options-wrapper-tablet"),
                c("#ui-killfeed-wrapper").addClass("ui-killfeed-wrapper-tablet"),
                c("#ui-kill-leader-wrapper").css("right", 144)) : (c("#ui-bottom-left").removeClass("ui-bottom-left-tablet"),
                c("#ui-bottom-right").removeClass("ui-bottom-right-tablet"),
                c("#ui-right-center").removeClass("ui-right-center-tablet"),
                c("#ui-bottom-center-right").removeClass("ui-bottom-center-right-tablet"),
                c("#ui-top-left").removeClass("ui-top-left-tablet"),
                c("#ui-spectate-options-wrapper").removeClass("ui-spectate-options-wrapper-tablet"),
                c("#ui-killfeed-wrapper-wrapper").removeClass("ui-killfeed-wrapper-tablet"))),
                _.os == "ios")
                    if (_.model == "iphonex") {
                        const t = _.isLandscape ? "99%" : "90%"
                            , i = _.isLandscape ? 0 : 32;
                        c("#ui-game").css({
                            height: t,
                            top: i
                        }),
                        c("#ui-stats-contents").css({
                            transform: "translate(-50%) scale(0.95)",
                            "transform-origin": "top"
                        }),
                        e ? c("#ui-game").css({
                            left: "50%",
                            transform: "translateX(-50%)",
                            width: "93%"
                        }) : c("#ui-game").css({
                            left: "",
                            transform: "",
                            width: ""
                        })
                    } else if (window.navigator.standalone && !_.tablet)
                        c("#ui-game").css({
                            height: "95%"
                        });
                    else {
                        let t = _.isLandscape ? "86%" : "82%";
                        _.tablet && (t = "100%"),
                        c("#ui-game").css({
                            height: t
                        }),
                        c("#ui-right-center, #ui-top-center-scopes-wrapper, #ui-top-center, #ui-menu-display").css({
                            "margin-top": 6
                        })
                    }
                _.tablet || e ? (c("#ui-loot-50AE").insertBefore("#ui-loot-556mm"),
                c("#ui-loot-9mm").insertBefore("#ui-loot-556mm"),
                c("#ui-loot-308sub").insertBefore("#ui-loot-556mm"),
                c("#ui-loot-12gauge").insertBefore("#ui-loot-556mm"),
                c("#ui-loot-flare").insertBefore("#ui-loot-556mm"),
                c("#ui-loot-762mm").insertBefore("#ui-loot-556mm"),
                c("#ui-loot-45acp").insertBefore("#ui-loot-556mm")) : (c("#ui-loot-9mm").insertBefore("#ui-loot-45acp"),
                c("#ui-loot-12gauge").insertBefore("#ui-loot-45acp"),
                c("#ui-loot-762mm").insertBefore("#ui-loot-45acp"),
                c("#ui-loot-556mm").insertBefore("#ui-loot-45acp"),
                c("#ui-loot-50AE").insertBefore("#ui-loot-45acp"),
                c("#ui-loot-308sub").insertBefore("#ui-loot-45acp"),
                c("#ui-loot-flare").insertBefore("#ui-loot-45acp"))
            }
            hideAll() {
                this.display = !1
            }
        }
        class Ss {
            container = new J;
            dots = [];
            constructor() {
                this.container.visible = !1
            }
            createDot() {
                const e = new ee;
                return e.texture = H.from("dot.img"),
                e.anchor.set(.5, .5),
                e.position.set(0, 0),
                e.scale.set(1, 1),
                e.tint = 16777215,
                e.alpha = 1,
                e.visible = !1,
                e
            }
            update(e, t, i, r, a) {
                const l = _.touch && e.touchingAim && e.touchAimLine;
                if (l) {
                    const s = t._0x73._0x128
                        , m = B[s];
                    let d = 30;
                    if (m.type == "gun") {
                        const E = nt[m.bulletType].distance;
                        d = m.barrelLength + E
                    }
                    const h = t._0x65()
                        , p = Math.sqrt(h * 1.414 * h);
                    d = z.min(d, p);
                    const w = n.copy(t._0x63);
                    let f = n.add(w, n.mul(t._0x125, d));
                    const S = i._0x53._0x89();
                    for (let E = 0; E < S.length; E++) {
                        const D = S[E];
                        if (D.active && !D.dead && D.height >= R.bullet.height && D.collidable && !D.isWindow && g.sameLayer(t.layer, D.layer) && (m.type != "throwable" || D.height > R.projectile.maxHeight)) {
                            const L = U.intersectSegment(D.collider, w, f);
                            if (L) {
                                const v = n.length(n.sub(L.point, w));
                                v < d && (d = v,
                                f = L.point)
                            }
                        }
                    }
                    const x = 3.5
                        , y = 1.5
                        , P = n.length(n.sub(f, w))
                        , C = Math.max(Math.ceil((P - x) / y), 0);
                    for (; this.dots.length < C; ) {
                        const E = this.createDot();
                        this.container.addChild(E),
                        this.dots.push(E)
                    }
                    for (let E = 0; E < this.dots.length; E++) {
                        const D = this.dots[E]
                            , L = x + E * y
                            , v = n.add(t._0x63, n.mul(t._0x125, L))
                            , T = 1 / 32 * .375;
                        D.position.set(v.x, v.y),
                        D.scale.set(T, T),
                        D.visible = E < C
                    }
                    const k = r._0x105(n.create(0, 0))
                        , b = r._0x105(n.create(1, 1))
                        , M = n.sub(b, k);
                    this.container.position.set(k.x, k.y),
                    this.container.scale.set(M.x, M.y),
                    this.container.alpha = .3,
                    a.addPIXIObj(this.container, t.layer, 19, 0)
                }
                this.container.visible = l
            }
        }
        class ys {
            constructor(e) {
                this.mapSpriteBarn = e
            }
            mapIndicators = [];
            idToMapIdicator = {};
            updateIndicatorData(e) {
                for (let t = 0; t < e.length; t++) {
                    const i = e[t];
                    i.dead ? this.removeIndicator(i.id) : this.updateIndicator(i)
                }
            }
            addIndicator(e) {
                const t = {
                    id: e.id,
                    type: e.type,
                    pos: n.copy(e.pos),
                    equipped: e.equipped,
                    mapSprite: this.mapSpriteBarn.addSprite(),
                    pulseSprite: this.mapSpriteBarn.addSprite(),
                    pulseScale: .5,
                    pulseScaleMin: .5,
                    pulseScaleMax: 1,
                    pulseTicker: 0,
                    pulseDir: 1,
                    pulseSpeed: .3
                };
                return this.mapIndicators.push(t),
                this.idToMapIdicator[e.id] = t,
                t
            }
            removeIndicator(e) {
                for (let t = 0; t < this.mapIndicators.length; t++) {
                    const i = this.mapIndicators[t];
                    if (i.id == e) {
                        i.mapSprite.free(),
                        i.pulseSprite.free(),
                        this.mapIndicators.splice(t, 1),
                        delete this.idToMapIdicator[e];
                        break
                    }
                }
            }
            updateIndicator(e) {
                let t = this.idToMapIdicator[e.id];
                t ||= this.addIndicator(e),
                t.pos = n.copy(e.pos),
                t.equipped = e.equipped;
                const i = B[t.type]
                    , r = (_.uiLayout == _.UiLayout.Sm ? .15 : .2) * 1.25
                    , a = t.equipped ? 655350 : 1
                    , l = t.mapSprite;
                if (l.pos = n.copy(t.pos),
                l.scale = r,
                l.alpha = 1,
                l.zOrder = a,
                l.visible = !0,
                l.sprite.texture = H.from(i.mapIndicator?.sprite),
                l.sprite.tint = i.mapIndicator?.tint ?? 16777215,
                i.mapIndicator?.pulse) {
                    const s = t.pulseSprite;
                    s.pos = n.copy(t.pos),
                    s.scale = 1,
                    s.zOrder = a - 1,
                    s.visible = !0,
                    s.sprite.texture = H.from("part-pulse-01.img"),
                    s.sprite.tint = i.mapIndicator.pulseTint
                }
            }
            updateIndicatorPulses(e) {
                for (let t = 0; t < this.mapIndicators.length; t++) {
                    const i = this.mapIndicators[t];
                    i.pulseTicker = z.clamp(i.pulseTicker + e * i.pulseDir * i.pulseSpeed, i.pulseScaleMin, 1),
                    i.pulseScale = i.pulseTicker * i.pulseScaleMax,
                    (i.pulseScale >= i.pulseScaleMax || i.pulseTicker <= i.pulseScaleMin) && (i.pulseDir *= -1),
                    i.pulseSprite.scale = i.pulseScale,
                    i.pulseSprite.visible = i.equipped
                }
            }
        }
        class xs extends ee {
            __zOrder = -1;
            constructor() {
                super()
            }
        }
        class zs {
            active = !1;
            retained = !0;
            sprite = new xs;
            pos = n.create(0, 0);
            scale = 1;
            alpha = 1;
            visible = !0;
            pulse = !1;
            lifetime = 0;
            ticker = 0;
            zOrder = 0;
            constructor() {
                this.sprite.anchor.set(.5, .5),
                this.sprite.scale.set(1, 1),
                this.sprite.visible = !1
            }
            init() {
                this.active = !0,
                this.retained = !0,
                this.pos = n.create(0, 0),
                this.scale = 1,
                this.alpha = 1,
                this.pulse = !1,
                this.visible = !0,
                this.lifetime = Number.MAX_VALUE,
                this.ticker = 0,
                this.zOrder = 0
            }
            free() {
                this.active = !1,
                this.sprite.visible = !1
            }
            release() {
                this.retained = !1
            }
        }
        class bs {
            container = new J;
            mapSprites = [];
            free() {
                for (let e = 0; e < this.mapSprites.length; e++) {
                    const t = this.mapSprites[e].sprite;
                    t.parent?.removeChild(t),
                    t.destroy({
                        children: !0
                    })
                }
            }
            addSprite() {
                let e = null;
                for (let t = 0; t < this.mapSprites.length; t++)
                    if (!this.mapSprites[t].active) {
                        e = this.mapSprites[t];
                        break
                    }
                return e || (e = new zs,
                this.mapSprites.push(e),
                this.container.addChild(e.sprite)),
                e.init(),
                e
            }
            update(e, t, i) {
                let r = !1;
                for (let a = 0; a < this.mapSprites.length; a++) {
                    const l = this.mapSprites[a];
                    if (l.active) {
                        l.zOrder != l.sprite.__zOrder && (l.sprite.__zOrder = l.zOrder,
                        r = !0),
                        l.ticker += e,
                        l.pulse && (l.scale += e / 2.5);
                        const s = t.getMapPosFromWorldPos(l.pos, i)
                            , m = l.scale
                            , d = z.smoothstep(l.ticker, 0, .1) * (1 - z.smoothstep(l.ticker, l.lifetime - .5, l.lifetime));
                        l.sprite.position.set(s.x, s.y),
                        l.sprite.scale.set(m, m),
                        l.sprite.alpha = l.alpha * d,
                        l.sprite.visible = l.visible && l.sprite.alpha > 1e-4,
                        l.ticker >= l.lifetime && !l.retained && l.free()
                    }
                }
                r && this.container.children.sort( (a, l) => a.__zOrder - l.__zOrder)
            }
        }
        const et = 24;
        class _s {
            container = new J;
            timerBackground = ee.from("timer-background.img");
            counterText = new $e;
            gfx = new pe;
            labelText = new $e;
            screenScaleFactor = 1;
            mobileOffset = 0;
            active = !1;
            label = "";
            elapsed = 0;
            duration = 0;
            constructor() {
                this.container.visible = !1,
                this.timerBackground.anchor.set(.5, .5),
                this.timerBackground.scale.set(1, 1),
                this.container.addChild(this.timerBackground),
                this.container.addChild(this.gfx),
                this.counterText.anchor.set(.5, .5),
                this.counterText.style = {
                    fontFamily: "Roboto Condensed, Arial, sans-serif",
                    fontWeight: "bold",
                    fontSize: et,
                    align: "center",
                    fill: 16777215,
                    stroke: 0,
                    strokeThickness: 3
                },
                this.container.addChild(this.counterText),
                this.labelText.anchor.set(.5, .5),
                this.labelText.style = {
                    fontFamily: "Roboto Condensed, Arial, sans-serif",
                    fontWeight: "100",
                    fontSize: et,
                    align: "center",
                    fill: 16777215
                },
                this.container.addChild(this.labelText)
            }
            destroy() {
                this.container.removeChild(this.timerBackground),
                this.timerBackground.destroy({
                    children: !0
                }),
                this.container.destroy({
                    children: !0,
                    texture: !0
                })
            }
            start(e, t, i) {
                this.active = !0,
                this.label = e,
                this.elapsed = t,
                this.duration = i
            }
            stop() {
                this.active = !1
            }
            resize(e, t) {
                this.screenScaleFactor = t,
                _.uiLayout == _.UiLayout.Sm ? (_.tablet || this.container.scale.set(.5, .5),
                this.mobileOffset = _.isLandscape ? e.mobileOffsetLandscape : e.mobileOffsetPortrait) : (this.container.scale.set(1, 1),
                this.mobileOffset = 0)
            }
            update(e, t) {
                if (!this.active) {
                    this.container.visible = !1;
                    return
                }
                this.elapsed = z.min(this.elapsed + e, this.duration);
                const i = 56 + this.label.length * et * .45
                    , r = et * 1.5
                    , a = 0 - i / 2
                    , l = 87.5 - r / 2
                    , s = z.min(this.elapsed / this.duration, 1) * Math.PI * 2 - Math.PI * .5;
                this.gfx.clear(),
                this.gfx.beginFill(0, .5),
                this.gfx.drawRoundedRect(a, l, i, r, 5),
                this.gfx.endFill(),
                this.gfx.lineStyle(6, 16777215),
                this.gfx.arc(0, 0, 35, -Math.PI * .5, s, !1),
                this.counterText.text = z.max(0, this.duration - this.elapsed).toFixed(1),
                this.labelText.position.y = 87.5,
                this.labelText.text = this.label,
                this.container.position.set(t._0x66 / 2, t._0x67 / 3 * this.screenScaleFactor + this.mobileOffset),
                this.container.visible = !0
            }
        }
        function Si(u) {
            const e = Math.floor(u / 3600)
                , t = Math.floor(u / 60) % 60
                , i = Math.floor(u) % 60;
            let r = "";
            return e > 0 && (r += `${e}h `),
            (e > 0 || t > 0) && (r += `${t}m `),
            r += `${i}s`
        }
        function St(u, e, t, i) {
            const r = u + (e - u) / t * i;
            return Math.floor(r)
        }
        class qe {
            constructor(e, t, i) {
                this.r = e,
                this.g = t,
                this.b = i
            }
            getColors() {
                return {
                    r: this.r,
                    g: this.g,
                    b: this.b
                }
            }
        }
        class ks {
            constructor(e, t, i, r, a, l, s, m, d) {
                this.game = e,
                this.audioManager = t,
                this.particleBarn = i,
                this.planeBarn = r,
                this.localization = a,
                this.canvasMode = l,
                this.touch = s,
                this.inputBinds = m,
                this.inputBindUi = d,
                this.game = e,
                this.particleBarn = i,
                this.localization = a,
                this.touch = s,
                this.inputBinds = m,
                this.inputBindUi = d,
                this.roleMenuConfirm.on("click", f => {
                    f.stopPropagation(),
                    this.roleSelected = this.roleDisplayed,
                    this.setRoleMenuActive(!1)
                }
                ),
                c("#ui-map-wrapper").css("display", "block"),
                c("#ui-team").css("display", "block"),
                c(".ui-map-expand").on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                c(".ui-map-expand").on("click", f => {
                    _.touch ? this.bigmapDisplayed || this.displayMapLarge() : _.uiLayout == _.UiLayout.Lg && this.displayMapLarge(this.bigmapDisplayed)
                }
                ),
                c("#ui-map-minimize").on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                c("#ui-map-minimize").on("click", f => {
                    f.stopPropagation(),
                    this.toggleMiniMap()
                }
                ),
                c("#ui-menu-display").on("click", f => {
                    f.stopPropagation(),
                    this.toggleEscMenu()
                }
                ),
                this.moveStyleButton.on("touchstart", () => {
                    s.toggleMoveStyle()
                }
                ),
                this.aimStyleButton.on("touchstart", () => {
                    s.toggleAimStyle()
                }
                ),
                this.aimLineButton.on("touchstart", () => {
                    s.toggleAimLine()
                }
                ),
                this.onTouchScreen = f => {
                    f.target?.id == "cvs" && this.toggleEscMenu(!0)
                }
                ,
                c(document).on("touchstart", this.onTouchScreen),
                this.bigmapClose = c("#big-map-close"),
                this.bigmapClose.on("touchend", f => {
                    f.stopPropagation(),
                    this.displayMapLarge(!0)
                }
                ),
                this.bigmapClose.on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                this.bigmapClose.on("click", f => {
                    f.stopPropagation(),
                    this.displayMapLarge(!0)
                }
                ),
                this.gameTabBtns.on("click", f => {
                    this.setCurrentGameTab(c(f.target).data("tab"))
                }
                ),
                this.setCurrentGameTab(this.currentGameTab),
                this.fullScreenButton.on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                this.fullScreenButton.on("click", () => {
                    X.toggleFullScreen(),
                    this.toggleEscMenu()
                }
                ),
                _.os == "ios",
                _.touch,
                this.resumeButton.on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                this.resumeButton.on("click", () => {
                    this.toggleEscMenu()
                }
                ),
                _.touch && this.resumeButton.css("display", "none"),
                c("#btn-spectate-quit").on("click", () => {
                    this.quitGame()
                }
                ),
                c("#btn-game-quit").on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                c("#btn-game-quit").on("click", () => {
                    this.game._0x0 = !0,
                    this.game._0x1 = 1,
                    this.quitGame()
                }
                ),
                this.specStatsButton.on("click", () => {
                    this.toggleLocalStats()
                }
                ),
                this.specNextButton.on("click", () => {
                    this.specNext = !0
                }
                ),
                this.specPrevButton.on("click", () => {
                    this.specPrev = !0
                }
                ),
                this.interactionElems.css("pointer-events", "auto"),
                this.interactionElems.on("touchstart", f => {
                    f.stopPropagation(),
                    this.interactionTouched = !0
                }
                ),
                this.reloadElems.css("pointer-events", "auto"),
                this.reloadElems.on("touchstart", f => {
                    f.stopPropagation(),
                    this.reloadTouched = !0
                }
                ),
                this.gasRenderer = new $i(l,0),
                this.resetWeapSlotStyling = () => {
                    this.weapDraggedDiv && (this.weapSwitches.css({
                        left: "",
                        top: ""
                    }),
                    c("#ui-game").css({
                        "pointer-events": ""
                    })),
                    this.weapDraggedDiv = null,
                    this.weapDragging = !1,
                    this.weapDropped = !1,
                    this.weapSwitches.hasClass("ui-weapon-dragged") && this.weapSwitches.removeClass("ui-weapon-dragged"),
                    this.weapNoSwitches.hasClass("ui-outline-hover") || this.weapNoSwitches.addClass("ui-outline-hover")
                }
                ,
                _.touch || (this.weapSwitches.on("mousedown", f => {
                    const S = f.currentTarget;
                    f.button == 0 && (this.weapDraggedDiv = c(S),
                    this.weapDraggedId = c(S).data("slot"))
                }
                ),
                c("#ui-game").on("mousemove", f => {
                    this.weapDraggedDiv && !this.weapDropped && (this.weapDragging ? (this.weapDraggedDiv.css({
                        left: f.pageX - 80,
                        top: f.pageY - 30
                    }),
                    this.weapDraggedDiv.addClass("ui-weapon-dragged")) : (c("#ui-game").css({
                        "pointer-events": "initial"
                    }),
                    this.weapNoSwitches.removeClass("ui-outline-hover"),
                    this.weapDragging = !0))
                }
                ),
                c("#ui-game, #ui-weapon-id-1, #ui-weapon-id-2").on("mouseup", f => {
                    f.button == 0 && this.weapDraggedDiv != null && (this.weapSwitches.each( () => {
                        const S = c(f.currentTarget).data("slot");
                        c(f.currentTarget).is(":hover") && this.weapDraggedId != S && (this.swapWeapSlots = !0,
                        this.weapDropped = !0)
                    }
                    ),
                    this.swapWeapSlots || this.resetWeapSlotStyling())
                }
                )),
                this.mapIndicatorBarn = new ys(this.mapSpriteBarn),
                this.container.mask = new pe,
                this.display = {
                    gas: this.gasRenderer.display,
                    gasSafeZone: this.gasSafeZoneRenderer.display,
                    airstrikeZones: r.airstrikeZoneContainer,
                    mapSprites: this.mapSpriteBarn.container,
                    teammates: new J,
                    player: new J,
                    border: new pe
                },
                this.mapSprite.anchor = new Et(.5,.5),
                this.container.addChild(this.mapSprite),
                this.container.addChild(this.display.gas),
                this.container.addChild(this.display.gasSafeZone),
                this.container.addChild(this.display.airstrikeZones),
                this.container.addChild(this.display.mapSprites),
                this.container.addChild(this.display.teammates),
                this.container.addChild(this.display.player),
                this.container.addChild(this.display.border);
                const h = this.getMinimapMargin()
                    , p = this.getMinimapSize();
                this.minimapPos = n.create(h + p / 2, e._0x14._0x67 - p / 2 - h),
                this.muteButtonImage = this.muteButton.find("img");
                const w = this.audioManager.mute;
                this.muteButtonImage.attr("src", w ? this.muteOffImg : this.muteOnImg),
                this.muteButton.on("mousedown", f => {
                    f.stopPropagation()
                }
                ),
                this.muteButton.on("click", f => {
                    let S = this.audioManager.muteToggle();
                    this.muteButtonImage.attr("src", S ? this.muteOffImg : this.muteOnImg),
                    S = null
                }
                ),
                this.teamMemberHealthBarWidth = parseInt(c(".ui-team-member-health").find(".ui-bar-inner").css("width"));
                for (let f = 0; f < 4; f++) {
                    const S = this.topLeft
                        , x = f;
                    this.teamSelectors.push({
                        teamNameHtml: "",
                        groupId: c(S).find(`[data-id=${x}]`),
                        groupIdDisplayed: !1,
                        teamName: c(S).find(`[data-id=${x}]`).find(".ui-team-member-name"),
                        teamIcon: c(S).find(`[data-id=${x}]`).find(".ui-team-member-icon"),
                        teamStatus: c(S).find(`[data-id=${x}]`).find(".ui-team-member-status"),
                        teamHealthInner: c(S).find(`[data-id=${x}]`).find(".ui-health-actual"),
                        teamColor: c(S).find(`[data-id=${x}]`).find(".ui-team-member-color"),
                        playerId: 0,
                        prevHealth: 0,
                        prevStatus: {
                            disconnected: !1,
                            dead: !1,
                            downed: !1,
                            role: ""
                        },
                        indicators: {
                            main: {
                                elem: c("#ui-team-indicators").find(`.ui-indicator-main[data-id=${x}]`),
                                displayed: !1
                            }
                        }
                    })
                }
                this.init()
            }
            _0x58 = new _s;
            gameElem = c("#ui-game");
            statsMain = c("#ui-stats");
            statsElem = c("#ui-stats-bg");
            statsContentsContainer = c("#ui-stats-contents");
            statsContents = c("#ui-stats-contents-inner");
            statsHeader = c("#ui-stats-header");
            statsInfoBox = c("#ui-stats-info-box");
            statsOptions = c("#ui-stats-options");
            statsAds = c(".ui-stats-ad-container");
            statsLogo = c("#ui-stats-logo");
            escMenuElem = c("#ui-game-menu");
            escMenuDisplayed = !1;
            roleMenuElemWrapper = c("#ui-role-menu-wrapper");
            roleMenuElem = c("#ui-role-menu");
            roleMenuFooterEnterElem = c("#ui-role-footer-enter");
            roleMenuFooterHtml = "";
            roleMenuActive = !1;
            roleMenuDisplayed = !1;
            roleMenuTicker = 0;
            roleDisplayed = "";
            roleSelected = "";
            roleMenuConfirm = c("#ui-role-footer-enter");
            roleMenuInst = null;
            topLeft = c("#ui-top-left");
            waitingForPlayers = !0;
            waitingText = c("#ui-waiting-text");
            spectating = !1;
            prevSpectatorCount = 0;
            spectatorCount = 0;
            spectatorCounterDisplayed = !1;
            spectatorCounterContainer = c("#ui-spec-counter");
            spectatorCounter = c("#ui-spec-counter-number");
            spectateMode = c(".ui-spectate-mode");
            spectatedPlayerText = c("#ui-spectate-text");
            spectatedPlayerName = "";
            spectatedPlayerId = 0;
            spectateModeStats = c("#ui-spectate-stats");
            spectateModeStatsData = c("#ui-spectate-stats-data");
            spectateOptionsWrapper = c("#ui-spectate-options-wrapper");
            rightCenter = c("#ui-right-center");
            leaderboardAlive = c("#ui-leaderboard-alive");
            playersAlive = c(".js-ui-players-alive");
            leaderboardAliveFaction = c("#ui-leaderboard-alive-faction");
            playersAliveRed = c(".js-ui-players-alive-red");
            playersAliveBlue = c(".js-ui-players-alive-blue");
            playersAliveRedCounter = 0;
            playersAliveBlueCounter = 0;
            playerKills = c(".js-ui-player-kills");
            announcement = c("#ui-announcement");
            killLeaderName = c("#ui-kill-leader-name");
            killLeaderCount = c("#ui-kill-leader-count");
            mapContainer = c("#ui-map-container");
            mapContainerBottom = 52;
            mapInfo = c("#ui-map-info");
            mapInfoBottom = 218;
            gasState = {};
            gasIcon = c("#ui-gas-icon");
            gasTimer = c("#ui-gas-timer");
            mapMinimizeButton = c("#ui-map-minimize");
            menuDisplayButton = c("#ui-menu-display");
            bottomCenterRight = c("#ui-bottom-center-right");
            actionSeq = -1;
            displayMapDirty = !1;
            displayMapClear = !1;
            gameTabs = c(".ui-game-tab");
            gameTabBtns = c(".btn-game-tab-select");
            gameKeybindBtns = c(".btn-keybind-desc");
            currentGameTab = "settings";
            onTouchScreen;
            bigmap = c("#big-map");
            bigmapCollision = c("#big-map-collision");
            bigmapClose = c("#big-map-close");
            moveStyleButton = c("#btn-game-move-style");
            aimLineButton = c("#btn-game-aim-line");
            aimStyleButton = c("#btn-game-aim-style");
            fullScreenButton = c("#btn-game-fullscreen");
            resumeButton = c("#btn-game-resume");
            specStatsButton = c("#btn-spectate-view-stats");
            specBegin = !1;
            specNext = !1;
            specPrev = !1;
            specNextButton = c("#btn-spectate-next-player");
            specPrevButton = c("#btn-spectate-prev-player");
            interactionElems = c("#ui-interaction-press, #ui-interaction");
            interactionTouched = !1;
            reloadElems = c("#ui-current-clip, #ui-remaining-ammo, #ui-reload-button-container");
            reloadTouched = !1;
            flairElems = c(".ui-health-flair");
            flairId = 0;
            healthRed = new qe(255,0,0);
            healthDarkpink = new qe(255,45,45);
            healthLightpink = new qe(255,112,112);
            healthWhite = new qe(255,255,255);
            healthGrey = new qe(179,179,179);
            minimapDisplayed = !0;
            visibilityMode = 0;
            hudVisible = !0;
            gasRenderer;
            gasSafeZoneRenderer = new _a;
            sentAdStatus = !1;
            frame = 0;
            weapsDirty = !1;
            weapSwitches = c("#ui-weapon-id-1, #ui-weapon-id-2");
            weapNoSwitches = c("#ui-weapon-id-3, #ui-weapon-id-4");
            weapDraggedId = 0;
            swapWeapSlots = !1;
            weapDraggedDiv = null;
            weapDragging = !1;
            weapDropped = !1;
            mapSpriteBarn = new bs;
            mapIndicatorBarn;
            playerMapSprites = [];
            playerPingSprites = {};
            container = new J;
            resetWeapSlotStyling;
            display;
            mapSprite = new ee(H.EMPTY);
            bigmapDisplayed = !1;
            screenScaleFactor = 1;
            minimapPos;
            dead = !1;
            muteButton = c("#ui-mute-ingame");
            muteButtonImage;
            muteOffImg = "audio-off.img";
            muteOnImg = "audio-on.img";
            displayingStats = !1;
            teamMemberHealthBarWidth;
            teamMemberHeight = 48;
            groupPlayerCount = 0;
            teamSelectors = [];
            displayOldMapSprites = !1;
            _0x60() {
                this.gasRenderer.free(),
                this.clearUI(),
                this.roleMenuConfirm.off("click"),
                c(".ui-role-option").off("click"),
                c(".ui-map-expand").off("mousedown"),
                c(".ui-map-expand").off("click"),
                c("#ui-map-minimize").off("mousedown"),
                c("#ui-map-minimize").off("click"),
                c("#ui-menu-display").off("click"),
                this.moveStyleButton.off("touchstart"),
                this.aimStyleButton.off("touchstart"),
                this.aimLineButton.off("touchstart"),
                c(document).off("touchstart", this.onTouchScreen),
                this.bigmapClose.off("touchend"),
                this.bigmapClose.off("mousedown"),
                this.bigmapClose.off("click"),
                this.gameTabBtns.off("click"),
                this.fullScreenButton.off("mousedown"),
                this.fullScreenButton.off("click"),
                this.resumeButton.off("mousedown"),
                this.resumeButton.off("click"),
                c("#btn-spectate-quit").off("click"),
                c("#btn-game-quit").off("mousedown"),
                c("#btn-game-quit").off("click"),
                this.specStatsButton.off("click"),
                this.specNextButton.off("click"),
                this.specPrevButton.off("click"),
                this.interactionElems.off("touchstart"),
                this.reloadElems.off("touchstart"),
                this.weapSwitches.off("mousedown"),
                c("#ui-game").off("mousemove"),
                c("#ui-game").off("mouseup"),
                c("#ui-weapon-id-1").off("mouseup"),
                c("#ui-weapon-id-2").off("mouseup"),
                this.muteButton.off("mousedown"),
                this.muteButton.off("click"),
                c(".ui-team-member-health").find(".ui-bar-inner").css("width", this.teamMemberHealthBarWidth),
                c("#ui-center").off("mouseenter mouseleave"),
                this.inputBinds.menuHovered = !1,
                this.hudVisible || this.cycleHud(),
                this._0x58.destroy(),
                this.clearStatsElems(),
                this.setRoleMenuActive(!1),
                this.init()
            }
            init() {
                c(".js-ui-map-hidden").css("display", "block"),
                c("#ui-map-counter-default").css("display", "inline-block"),
                c("#ui-map-counter-faction").css("display", "none"),
                this.flairElems.css("display", "none"),
                this.clearStatsElems(),
                this.setSpectating(!1),
                this.updateSpectatorCountDisplay(!0),
                this.resetWeapSlotStyling(),
                this.dead = !1;
                for (let e = 0; e < this.teamSelectors.length; e++)
                    this.teamSelectors[e].teamColor.removeAttr("style")
            }
            onMapLoad(e, t) {
                this.resize(e, t);
                const i = e.getMapDef().gameMode.killLeaderEnabled;
                c("#ui-kill-leader-container").css("display", i ? "block" : "none"),
                _.mobile || c("#ui-killfeed-wrapper").css("top", i ? "60px" : "12px")
            }
            _0x62(e, t, i, r, a, l, s, m, d) {
                const h = t;
                this.weapsDirty && this.resetWeapSlotStyling(),
                this.weapsDirty = !1,
                this.mapIndicatorBarn.updateIndicatorPulses(e);
                const p = z.max(Math.floor(r.duration * (1 - r.circleT)), 0)
                    , w = {
                    mode: r.mode,
                    time: p
                };
                if (this.gasState.mode != w.mode || this.gasState.time != w.time) {
                    this.gasState = w;
                    const k = this.gasState.mode == dt.Moving;
                    this.mapInfo.removeClass("icon-pulse"),
                    this.gasIcon.removeClass("gas-icon"),
                    this.gasIcon.removeClass("danger-icon"),
                    k && this.mapInfo.addClass("icon-pulse"),
                    this.gasIcon.addClass(k ? "danger-icon" : "gas-icon");
                    const b = Math.floor(this.gasState.time / 60)
                        , E = `0${this.gasState.time % 60}`.slice(-2);
                    this.gasTimer.html(`${b}:${E}`)
                }
                if (this.spectatorCount = t._0x71._0x142,
                this.updateSpectatorCountDisplay(!1),
                t._0x73._0x85 && !this.dead && (this.dead = !0,
                this._0x58.stop()),
                (h.downed || this.dead) && this.resetWeapSlotStyling(),
                this.actionSeq != t._0x96.seq && (this.actionSeq = t._0x96.seq,
                this._0x58.stop(),
                t._0x96.type != ie.None && !this.displayingStats)) {
                    let k = ""
                        , b = ""
                        , M = "";
                    switch (t._0x96.type) {
                    case ie.Reload:
                    case ie.ReloadAlt:
                        B[t._0x96.item] && (b = this.localization.translate("game-reloading"));
                        break;
                    case ie.UseItem:
                        B[t._0x96.item] && (b = this.localization.translate("game-using"),
                        M = this.localization.translate(`game-${t._0x96.item}`));
                        break;
                    case ie.Revive:
                        {
                            const E = l.getPlayerInfo(t._0x96.targetId).name;
                            b = this.localization.translate("game-reviving"),
                            M = h.downed ? "" : E;
                            break
                        }
                    }
                    (b != "" || M != "") && (this.localization.translate("word-order") == "svo" ? (k += b || "",
                    k += M ? ` ${M}` : "") : this.localization.translate("word-order") == "sov" && (k += M ? `${M} ` : "",
                    k += b ? ` ${b}` : ""),
                    this._0x58.start(k, t._0x96.time, t._0x96.duration))
                }
                this.bigmapDisplayed || (this.mapSprite.x = this.minimapPos.x + this.mapSprite.width / 2 - t._0x63.x / i.width * this.mapSprite.width,
                this.mapSprite.y = this.minimapPos.y - this.mapSprite.height / 2 + t._0x63.y / i.height * this.mapSprite.height);
                const f = n.create(s._0x66 * .5 / s._0x104(), s._0x67 * .5 / s._0x104())
                    , S = {
                    min: n.sub(s._0x63, f),
                    max: n.add(s._0x63, f)
                }
                    , x = l.getPlayerInfo(t.__id).groupId
                    , y = l.getGroupInfo(x);
                if (!y) {
                    const k = {
                        playerId: t.__id,
                        groupId: x,
                        spectating: this.spectating,
                        playing: this.game._0x42,
                        groupInfo: l.groupInfo
                    };
                    console.error(`badTeamInfo_1: ${JSON.stringify(k)}`)
                }
                const P = _.uiLayout == _.UiLayout.Sm
                    , C = y.playerIds.length;
                for (let k = 0; k < C; k++) {
                    const b = this.teamSelectors[k]
                        , M = y.playerIds[k]
                        , E = l.getPlayerInfo(M)
                        , D = M == h.__id
                        , L = l.getPlayerStatus(M);
                    if (L && m > Se.Solo) {
                        b.groupIdDisplayed || (b.groupId.css("display", "block"),
                        b.groupIdDisplayed = !0),
                        this.updateTeam(k, X.htmlEscape(E.name), L.health, {
                            disconnected: L.disconnected,
                            dead: L.dead,
                            downed: L.downed,
                            role: L.role
                        }, E.playerId, E.teamId, l);
                        for (const v in b.indicators)
                            if (b.indicators.hasOwnProperty(v)) {
                                const T = b.indicators[v]
                                    , V = T.elem;
                                let F = !0;
                                if ((!D || T.displayAll) && !d) {
                                    const O = L.pos
                                        , G = n.normalizeSafe(n.sub(O, s._0x63), n.create(1, 0))
                                        , q = xe.intersectRayAabb(s._0x63, G, S.min, S.max)
                                        , N = Math.atan2(G.y, -G.x) + Math.PI * .5
                                        , Z = s._0x105(q)
                                        , te = xe.testCircleAabb(O, R.player.radius, S.min, S.max);
                                    if (!L.dead && !te) {
                                        let ae = 32
                                            , ge = `translate(-50%, -50%) rotate(${N}rad)`;
                                        P && (ae = 16,
                                        ge += " scale(0.5)"),
                                        F = !1,
                                        V.css({
                                            left: z.clamp(Z.x, ae, s._0x66 - ae),
                                            top: z.clamp(Z.y, ae, s._0x67 - ae - 0),
                                            transform: ge
                                        }),
                                        T.displayed || (V.css("display", "block"),
                                        T.displayed = !0)
                                    }
                                }
                                F && T.displayed && (V.css("display", "none"),
                                T.displayed = !1)
                            }
                    }
                }
                for (let k = C; k < this.teamSelectors.length; k++) {
                    const b = this.teamSelectors[k];
                    for (const M in b.indicators)
                        if (b.indicators.hasOwnProperty(M)) {
                            const E = b.indicators[M];
                            E.displayed && (E.elem.css("display", "none"),
                            E.displayed = !1)
                        }
                    b.groupIdDisplayed && (b.groupId.css("display", "none"),
                    b.groupIdDisplayed = !1)
                }
                if (i.factionMode) {
                    const k = l.getPlayerInfo(h.__id);
                    if (this.flairId != k.teamId) {
                        this.flairId = k.teamId;
                        const b = this.flairId == 1 ? "red" : "blue";
                        this.flairElems.css({
                            display: "block",
                            "background-image": `url(../img/gui/player-patch-${b}.svg)`
                        })
                    }
                }
                if (m > Se.Solo && this.groupPlayerCount != C && _.uiLayout == _.UiLayout.Lg ? (this.groupPlayerCount = C,
                this.spectateOptionsWrapper.css({
                    top: this.groupPlayerCount * this.teamMemberHeight + 12
                })) : m == Se.Solo && this.spectateOptionsWrapper.css({
                    top: 12
                }),
                this.updatePlayerMapSprites(e, t, l, i),
                this.mapSpriteBarn.update(e, this, i),
                this._0x58.update(e, s),
                this.roleMenuActive) {
                    this.roleMenuTicker -= e;
                    const k = Math.ceil(this.roleMenuTicker)
                        , b = `${this.localization.translate("game-enter-game")} (${k})`;
                    b != this.roleMenuFooterHtml && (this.roleMenuFooterEnterElem.html(b),
                    this.roleMenuFooterHtml = b),
                    !this.roleMenuInst && this.audioManager.isSoundLoaded("ambient_lab_01", "ambient") && (this.roleMenuInst = this.audioManager.playSound("ambient_lab_01", {
                        channel: "ambient"
                    })),
                    this.roleMenuTicker <= 0 && (this.roleSelected = this.roleDisplayed,
                    this.setRoleMenuActive(!1))
                }
            }
            updatePlayerMapSprites(e, t, i, r) {
                const a = i.getPlayerInfo(t.__id);
                let l = 0;
                const s = (d, h, p, w, f, S, x) => {
                    if (l >= this.playerMapSprites.length) {
                        const P = this.mapSpriteBarn.addSprite();
                        this.playerMapSprites.push(P)
                    }
                    const y = this.playerMapSprites[l++];
                    y.pos = n.copy(d),
                    y.scale = h,
                    y.alpha = p,
                    y.visible = w,
                    y.zOrder = f,
                    y.sprite.texture = H.from(S),
                    y.sprite.tint = x
                }
                    , m = Object.keys(i.playerStatus);
                for (let d = 0; d < m.length; d++) {
                    const h = i.playerStatus[m[d]]
                        , p = h.playerId
                        , w = i.getPlayerInfo(p)
                        , f = w.groupId == a.groupId;
                    let S = 65535 + p * 2;
                    p == a.playerId && (S += 65535 * 2);
                    const x = Oi[h.role]
                        , y = x?.mapIcon;
                    y && (S += 65535);
                    let P = "player-map-inner.img";
                    y && (P = x.mapIcon.alive),
                    h.dead ? (P = "skull-outlined.img",
                    y && (P = x.mapIcon.dead)) : h.downed && (P = f ? "player-map-inner.img" : "player-map-downed.img");
                    let C = f ? i.getGroupColor(p) : i.getTeamColor(w.teamId);
                    r.factionMode && y && (C = i.getTeamColor(w.teamId));
                    const k = _.uiLayout == _.UiLayout.Sm ? .15 : .2;
                    let b = k;
                    if (b = f ? h.dead ? k * 1.5 : y ? k * 1.25 : k * 1 : h.dead || h.downed || y ? k * 1.25 : k * .75,
                    s(h.pos, b, h.minimapAlpha, h.minimapVisible, S, P, C),
                    f) {
                        const M = _.uiLayout == _.UiLayout.Sm ? .25 : .3
                            , E = h.minimapVisible && !y;
                        s(h.pos, M, h.minimapAlpha, E, S - 1, "player-map-outer.img", 16777215)
                    }
                }
                for (let d = this.playerMapSprites.length - 1; d >= l; d--)
                    this.playerMapSprites[d].visible = !1
            }
            getMinimapMargin() {
                return _.uiLayout == _.UiLayout.Sm ? 4 : 16
            }
            getMinimapSize() {
                return _.uiLayout == _.UiLayout.Sm ? 192 : 256
            }
            getMinimapBorderWidth() {
                return _.uiLayout == _.UiLayout.Sm ? 1 : 4
            }
            createPing(e, t, i, r, a, l) {
                const s = je[e];
                if (s) {
                    const m = (h, p) => {
                        const w = this.mapSpriteBarn.addSprite();
                        return w.pos = n.copy(t),
                        w.scale = h,
                        w.lifetime = s.mapLife,
                        w.pulse = !1,
                        w.zOrder = 100,
                        w.sprite.texture = H.from(s.mapTexture),
                        w.sprite.tint = p,
                        w
                    }
                        , d = h => {
                        const p = this.mapSpriteBarn.addSprite();
                        return p.pos = n.copy(t),
                        p.scale = 0,
                        p.lifetime = s.pingLife,
                        p.pulse = !0,
                        p.zOrder = 99,
                        p.sprite.texture = H.from("ping-map-pulse.img"),
                        p.sprite.tint = h,
                        p
                    }
                    ;
                    if (s.mapEvent) {
                        const h = (_.uiLayout == _.UiLayout.Sm ? .15 : .2) * 1.5;
                        m(h, s.tint).release(),
                        d(s.tint).release()
                    } else {
                        let h = 16777215;
                        const p = a.getPlayerInfo(r)
                            , w = a.getPlayerInfo(i)
                            , f = a.getPlayerStatus(i);
                        p && w && f && (f.role == "leader" ? h = 65280 : p.groupId == w.groupId ? h = a.getGroupColor(i) : h = a.getTeamColor(w.teamId)),
                        this.playerPingSprites[i] || (this.playerPingSprites[i] = []);
                        const S = this.playerPingSprites[i];
                        for (let C = 0; C < S.length; C++)
                            S[C].free();
                        const x = _.uiLayout == _.UiLayout.Sm ? .15 : .2
                            , y = m(x, h)
                            , P = d(h);
                        S.push(y),
                        S.push(P)
                    }
                }
            }
            updateMapSprite(e, t, i, r) {
                e.displayed && (e.life != null && (e.life -= r,
                e.displayed = e.life > 0,
                e.maxLife - e.life < .1 ? t.alpha = (e.maxLife - e.life) / .1 : e.life < .5 ? t.alpha = z.max(e.life / .5, 0) : t.alpha = 1),
                e.pulse && e.displayed && (e.scale = e.scale + r / 2.5,
                t.scale.set(e.scale, e.scale)),
                t.visible = i && t.alpha > 0)
            }
            updateMapIndicators(e) {
                this.mapIndicatorBarn.updateIndicatorData(e)
            }
            getMapPosFromWorldPos(e, t) {
                const i = this.mapSprite.x - this.mapSprite.width / 2 + e.x / t.width * this.mapSprite.width
                    , r = this.mapSprite.y + this.mapSprite.height / 2 - e.y / t.height * this.mapSprite.height;
                return n.create(i, r)
            }
            getWorldPosFromMapPos(e, t, i) {
                let r = !1;
                if (this.bigmapDisplayed) {
                    const a = (i._0x66 - this.mapSprite.width) / 2;
                    let l = (i._0x67 - this.mapSprite.height) / 2;
                    _.uiLayout == _.UiLayout.Sm && !_.isLandscape && (l = 0),
                    r = e.x > a && e.x < i._0x66 - a && e.y > l && e.y < i._0x67 - l
                } else if (this.minimapDisplayed) {
                    const a = this.getMinimapSize()
                        , l = this.getMinimapMargin()
                        , m = (a * this.screenScaleFactor + l) * .5;
                    r = e.x > this.minimapPos.x - m && e.x < this.minimapPos.x + m && e.y > this.minimapPos.y - m && e.y < this.minimapPos.y + m
                }
                if (r) {
                    const a = n.create(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y + this.mapSprite.height / 2)
                        , l = (e.x - a.x) / this.mapSprite.width * t.width
                        , s = (a.y - e.y) / this.mapSprite.height * t.height;
                    return n.create(l, s)
                }
                return !1
            }
            hideAll() {
                this.gameElem.css("display", "none")
            }
            showAll() {
                this.gameElem.css("display", "block")
            }
            setLocalKills(e) {
                this.playerKills.html(e)
            }
            removeAds() {
                if (window.CrazyGames)
                    window.CrazyGames.SDK.banner.clearAllBanners();
                else {
                    if (!window.aiptag)
                        return;
                    const e = ["728x90", "300x250_2"];
                    for (let t = 0; t < e.length; t++) {
                        const i = e[t];
                        window.aiptag.cmd.display.push( () => {
                            window.aipDisplayTag.destroy(`survev-io_${i}`)
                        }
                        )
                    }
                }
            }
            refreshMainPageAds() {
                const e = ["728x90"];
                if (window.CrazyGames)
                    for (let t = 0; t < e.length; t++) {
                        const i = e[t]
                            , r = i.split("x").map(Number);
                        It(`survev-io_${i}`, r[0], r[1])
                    }
                if (window.aiptag)
                    for (let t = 0; t < e.length; t++) {
                        const i = e[t];
                        window.aiptag.cmd.display.push( () => {
                            window.aipDisplayTag.display(`survev-io_${i}`)
                        }
                        )
                    }
            }
            clearUI() {
                this._0x58.stop(),
                this.curAction = {
                    type: ie.None
                },
                this.displayMapLarge(!0),
                this.displayMiniMap(),
                this.clearStatsElems(),
                this.clearTeamUI(),
                this.toggleEscMenu(!0),
                this.toggleLocalStats(!0),
                this.visibilityMode = 0,
                this.spectatorCount = 0,
                this.setLocalKills(0)
            }
            beginSpectating() {
                this.specBegin = !0
            }
            hideStats() {
                this.displayingStats = !1,
                this.statsMain.css("display", "none"),
                this.statsElem.stop().css({
                    display: "none",
                    opacity: 0
                }),
                this.statsContents.stop().hide()
            }
            teamModeToString(e) {
                const t = {
                    unknown: "game-rank",
                    [Se.Solo]: "game-solo-rank",
                    [Se.Duo]: "game-duo-rank",
                    [Se.Squad]: "game-squad-rank"
                }
                    , i = t[e] || t.unknown;
                return this.localization.translate(i)
            }
            getTitleVictoryText(e, t) {
                if (e)
                    return `${this.spectatedPlayerName} ${this.localization.translate("game-won-the-game")}`;
                let i = "game-chicken";
                return t.turkeyMode && (i = "game-turkey"),
                this.localization.translate(i)
            }
            getTitleDefeatText(e, t) {
                return t ? `${this.spectatedPlayerName} ${this.localization.translate("game-player-died")}.` : e > Se.Solo ? this.localization.translate("game-team-eliminated") : `${this.localization.translate("game-You")} ${this.localization.translate("game-you-died")}.`
            }
            getOverviewElems(e, t, i, r) {
                if (r) {
                    const a = this.localization.translate("game-red-team")
                        , l = this.localization.translate("game-blue-team");
                    return `<div class="ui-stats-header-right ui-stats-header-red-team"><span class="ui-stats-header-stat">${a} </span><span class="ui-stats-header-value">${this.playersAliveRedCounter}</span></div><div class="ui-stats-header-left ui-stats-header-blue-team"><span class="ui-stats-header-stat">${l} </span><span class="ui-stats-header-value">${this.playersAliveBlueCounter}</span></div>`
                }
                return e == Se.Solo ? `<div><span class="ui-stats-header-stat">${this.teamModeToString(e)} </span><span class="ui-stats-header-value">#${t}</span></div>` : `<div class="ui-stats-header-right"><span class="ui-stats-header-stat">${this.teamModeToString(e)} </span><span class="ui-stats-header-value">#${t}</span></div><div class="ui-stats-header-left"><span class="ui-stats-header-stat">${this.localization.translate("game-team-kills")} </span><span class="ui-stats-header-value">${i}</span></div>`
            }
            quitGame() {
                this.game._0x38 = !0,
                this.refreshMainPageAds(),
                this.game.onQuit(),
                this.game.respawns.push(performance.now())
            }
            showStats(e, t, i, r, a, l, s, m, d, h, p, w) {
                if (!m || t == l || a) {
                    this.toggleEscMenu(!0),
                    this.displayingStats = !0,
                    this._0x58.stop(),
                    this.displayMapLarge(!0),
                    this.clearStatsElems(),
                    this.setSpectating(!1, s),
                    this.removeAds(),
                    this.statsMain.css("display", "block"),
                    this.statsLogo.css("display", "block"),
                    this.statsContentsContainer.css({
                        top: ""
                    }),
                    this.statsInfoBox.css({
                        height: ""
                    });
                    const S = l == r ? 1750 : 2500;
                    this.setBannerAd(S, w);
                    const x = l == r || m && r == t
                        , y = m && l != t
                        , P = x ? this.getTitleVictoryText(y, p.getMapDef().gameMode) : this.getTitleDefeatText(s, y);
                    let C = 0;
                    for (let O = 0; O < e.length; O++)
                        C += e[O].kills;
                    const k = this.getOverviewElems(s, i, C, p.getMapDef().gameMode.factionMode)
                        , b = c("<div/>").append(c("<div/>", {
                        class: "ui-stats-header-title",
                        html: P
                    })).append(c("<div/>", {
                        class: "ui-stats-header-overview",
                        html: k
                    }));
                    this.statsHeader.html(b);
                    const M = (O, G) => c("<div/>", {
                        class: "ui-stats-info"
                    }).append(c("<div/>", {
                        html: O
                    })).append(c("<div/>", {
                        html: G
                    }))
                        , E = _.uiLayout != _.UiLayout.Sm || _.tablet ? 250 : 125;
                    let D = 0;
                    D -= (e.length - 1) * E / 2,
                    D -= (e.length - 1) * 10;
                    for (let O = 0; O < e.length; O++) {
                        const G = e[O]
                            , q = d.getPlayerInfo(G.playerId)
                            , N = Si(G.timeAlive);
                        let Z = "ui-stats-info-player";
                        Z += G.dead ? " ui-stats-info-status" : "";
                        const te = (ae => c("<div/>", {
                            class: ae
                        }))(Z);
                        if (te.css("left", D),
                        te.append(c("<div/>", {
                            class: "ui-stats-info-player-name",
                            html: X.htmlEscape(q.name)
                        })),
                        te.append(M(this.localization.translate("game-kills"), `${G.kills}`)).append(M(this.localization.translate("game-damage-dealt"), G.damageDealt)).append(M(this.localization.translate("game-damage-taken"), G.damageTaken)).append(M(this.localization.translate("game-survived"), N)),
                        p.getMapDef().gameMode.factionMode && a)
                            switch (O) {
                            case 1:
                                te.append(c("<div/>", {
                                    class: "ui-stats-info-player-badge ui-stats-info-player-red-leader"
                                }));
                                break;
                            case 2:
                                te.append(c("<div/>", {
                                    class: "ui-stats-info-player-badge ui-stats-info-player-blue-leader"
                                }));
                                break;
                            case 3:
                                {
                                    const ae = q.teamId == 1 ? "ui-stats-info-player-red-ribbon" : "ui-stats-info-player-blue-ribbon";
                                    te.append(c("<div/>", {
                                        class: `ui-stats-info-player-badge ${ae}`
                                    }))
                                }
                            }
                        this.statsInfoBox.append(te),
                        D += 10
                    }
                    const L = c("<a/>", {
                        class: "ui-stats-restart btn-green btn-darken menu-option",
                        html: this.localization.translate("game-play-new-game")
                    });
                    if (L.on("click", () => {
                        this.quitGame()
                    }
                    ),
                    this.statsOptions.append(L),
                    a || this.waitingForPlayers)
                        L.css({
                            width: _.uiLayout != _.UiLayout.Sm || _.tablet ? 225 : 130
                        });
                    else {
                        L.css({
                            left: _.uiLayout != _.UiLayout.Sm || _.tablet ? -72 : -46
                        });
                        const O = c("<a/>", {
                            class: "btn-green btn-darken menu-option ui-stats-spectate",
                            html: this.localization.translate("game-spectate")
                        });
                        O.on("click", this.beginSpectating.bind(this)),
                        this.statsOptions.append(O)
                    }
                    let v = 0;
                    const T = 500
                        , V = 250 / z.max(1, e.length)
                        , F = 750 / z.max(1, e.length);
                    this.statsInfoBox.children().each( (O, G) => {
                        const q = c(G);
                        q.css("opacity", 0),
                        q.delay(S + F + (v + O) * V).animate({
                            opacity: 1
                        }, T, () => {
                            q.children().each( (N, Z) => {
                                c(Z).delay(N * V).animate({
                                    opacity: 1
                                }, T)
                            }
                            )
                        }
                        ),
                        q.children().each( (N, Z) => {
                            c(Z).css("opacity", 0),
                            v++
                        }
                        ),
                        v++
                    }
                    ),
                    this.statsOptions.children().each( (O, G) => {
                        const q = c(G);
                        q.hide();
                        const N = S + F + (v + O) * V + 500;
                        q.delay(N).fadeIn(T),
                        v++
                    }
                    ),
                    this.statsElem.stop(),
                    this.statsElem.css("display", "block"),
                    this.statsElem.delay(S).animate({
                        opacity: 1
                    }, 1e3),
                    this.statsContents.stop(),
                    this.statsContents.css("display", "block"),
                    this.statsContents.delay(S).animate({
                        opacity: 1
                    }, 1e3)
                }
            }
            clearStatsElems() {
                this.statsHeader.empty(),
                this.statsInfoBox.empty(),
                this.statsOptions.empty(),
                this.statsAds.css("display", "none"),
                this.statsContents.stop(),
                this.statsContents.css({
                    display: "none",
                    opacity: 0
                }),
                this.statsElem.stop(),
                this.statsElem.css({
                    display: "none",
                    opacity: 0
                }),
                this.statsMain.css("display", "none")
            }
            showTeamAd(e, t) {
                this.toggleEscMenu(!0),
                this.displayMapLarge(!0),
                this.clearStatsElems(),
                this.statsMain.css("display", "block"),
                this.statsLogo.css("display", "none"),
                this._0x58.stop(),
                this.displayingStats = !0,
                this.statsHeader.html(( () => {
                    let l = this.localization.translate("game-You");
                    l += " ",
                    l += this.localization.translate("game-you-died"),
                    l += ".";
                    let s = `<div><span class="ui-stats-header-stat">${this.localization.translate("game-kills")} </span>`;
                    return s += `<span class="ui-stats-header-value">${e.kills}</span></div>`,
                    c("<div/>", {
                        class: ""
                    }).append(c("<div/>", {
                        class: "ui-stats-header-title",
                        html: l
                    })).append(c("<div/>", {
                        class: "ui-stats-header-overview",
                        html: s
                    }))
                }
                )()),
                this.statsContentsContainer.css({
                    top: "10%"
                }),
                this.statsInfoBox.css({
                    height: 0
                });
                const i = c("<a/>", {
                    class: "ui-stats-restart btn-green btn-darken menu-option",
                    html: this.localization.translate("game-play-new-game")
                });
                i.on("click", () => {
                    this.quitGame()
                }
                ),
                this.statsOptions.append(i),
                i.css({
                    left: _.uiLayout != _.UiLayout.Sm || _.tablet ? -72 : -46
                });
                const r = c("<a/>", {
                    class: "btn-green btn-darken menu-option ui-stats-spectate",
                    html: this.localization.translate("game-spectate")
                });
                r.on("click", this.beginSpectating.bind(this)),
                this.statsOptions.append(r);
                let a = 0;
                this.statsOptions.children().each( (l, s) => {
                    const m = c(s);
                    m.hide();
                    const d = 4100 + (a + l) * 300 + 300;
                    m.delay(d).fadeIn(750),
                    a++
                }
                ),
                this.statsElem.stop(),
                this.statsElem.css("display", "block"),
                this.statsElem.delay(2500).animate({
                    opacity: 1
                }, 1e3),
                this.statsContents.stop(),
                this.statsContents.css("display", "block"),
                this.statsContents.delay(2500).animate({
                    opacity: 1
                }, 1e3)
            }
            setBannerAd(e, t) {
                if (!window.aiptag)
                    return;
                let i = Math.max(e - 150, 0);
                setTimeout( () => {
                    c("#ui-stats-ad-container-desktop").css("display", "inline-block"),
                    window.aiptag.cmd.display.push( () => {
                        window.aipDisplayTag.display("survev-io_300x250_2")
                    }
                    ),
                    t.hideKillMessage()
                }
                , i)
            }
            setSpectateTarget(e, t, i, r) {
                if (e != this.spectatedPlayerId) {
                    this.setSpectating(!0, i);
                    const a = r.getPlayerName(e, t, !1);
                    this.spectatedPlayerId = e,
                    this.spectatedPlayerName = X.htmlEscape(a),
                    this.spectatedPlayerText.find("#spectate-player").html(this.spectatedPlayerName),
                    this.actionSeq = -1,
                    this._0x58.stop()
                }
            }
            setSpectating(e, t) {
                if (this.spectating != e)
                    if (this.spectating = e,
                    this.spectating) {
                        this.spectateMode.css("display", "block"),
                        c(".ui-zoom").removeClass("ui-zoom-hover");
                        const i = t == Se.Solo;
                        this.specPrevButton.css("display", i ? "none" : "block"),
                        this.specNextButton.css("display", i ? "none" : "block"),
                        this.hideStats()
                    } else
                        this.spectateMode.css("display", "none"),
                        c(".ui-zoom").addClass("ui-zoom-hover")
            }
            setLocalStats(e) {
                const t = {
                    kills: this.localization.translate("game-kills"),
                    damageDealt: this.localization.translate("game-damage-dealt"),
                    damageTaken: this.localization.translate("game-damage-taken"),
                    timeAlive: this.localization.translate("game-survived")
                };
                this.spectateModeStatsData.empty();
                for (const i in t)
                    if (t.hasOwnProperty(i)) {
                        const r = t[i]
                            , a = i == "timeAlive" ? Si(e[i]) : e[i]
                            , l = `<tr><td class="ui-spectate-stats-category">${r}</td><td class="ui-spectate-stats-value">${a}</td></tr>`;
                        this.spectateModeStatsData.append(l)
                    }
            }
            toggleLocalStats(e=!1) {
                const t = this.spectateModeStats.css("display") == "none" && !e;
                this.spectateModeStats.css("display", t ? "inline-block" : "none"),
                this.specStatsButton.html(t ? this.localization.translate("game-hide-match-stats") : this.localization.translate("game-view-match-stats"))
            }
            updatePlayersAlive(e) {
                this.playersAlive.html(e),
                this.leaderboardAlive.css("display", "block"),
                this.leaderboardAliveFaction.css("display", "none")
            }
            updatePlayersAliveRed(e) {
                this.playersAliveRed.html(e),
                this.playersAliveRedCounter = e,
                this.leaderboardAlive.css("display", "none"),
                this.leaderboardAliveFaction.css("display", "block"),
                c("#ui-map-counter-default").css("display", "none"),
                c("#ui-map-counter-faction").css("display", "inline-block")
            }
            updatePlayersAliveBlue(e) {
                this.playersAliveBlue.html(e),
                this.playersAliveBlueCounter = e,
                this.leaderboardAlive.css("display", "none"),
                this.leaderboardAliveFaction.css("display", "block"),
                c("#ui-map-counter-default").css("display", "none"),
                c("#ui-map-counter-faction").css("display", "inline-block")
            }
            updateKillLeader(e, t, i, r) {
                const a = e != 0
                    , l = r?.sniperMode ? this.localization.translate("game-waiting-for-hunted") : this.localization.translate("game-waiting-for-new-leader");
                this.killLeaderName.html(a ? t : l),
                this.killLeaderCount.html(a ? i : 0)
            }
            displayMapLarge(e) {
                this.bigmapDisplayed = !e && !this.bigmapDisplayed,
                this.bigmapDisplayed ? this.container.alpha = 1 : this.container.alpha = this.minimapDisplayed ? 1 : 0;
                let t = _.uiLayout == _.UiLayout.Sm ? ".js-ui-mobile-map-hidden" : "js-ui-desktop-map-hidden";
                t += ", .js-ui-map-hidden",
                c(this.visibilityMode == 2 ? ".js-ui-hud-show" : t).css("display", this.bigmapDisplayed ? "none" : "block"),
                c(".js-ui-map-show").css("display", this.bigmapDisplayed ? "block" : "none"),
                this.updateSpectatorCountDisplay(!0),
                this.redraw(this.game._0x14)
            }
            updateSpectatorCountDisplay(e) {
                const t = !this.bigmapDisplayed && this.spectatorCount > 0;
                e = e || this.spectatorCount > 0 && !this.spectatorCounterDisplayed || this.spectatorCount == 0 && this.spectatorCounterDisplayed,
                this.spectatorCount != this.prevSpectatorCount && (this.spectatorCounter.html(this.spectatorCount),
                this.prevSpectatorCount = this.spectatorCount),
                e && (this.spectatorCounterContainer.css("display", t ? "block" : "none"),
                this.spectatorCounterDisplayed = t)
            }
            toggleMiniMap() {
                this.minimapDisplayed ? this.hideMiniMap() : this.displayMiniMap()
            }
            cycleVisibilityMode() {
                if (!this.bigmapDisplayed)
                    switch (this.visibilityMode) {
                    case 0:
                        this.hideMiniMap(),
                        this.visibilityMode = 1;
                        break;
                    case 1:
                        this.displayMiniMap(),
                        this.visibilityMode = 0
                    }
            }
            cycleHud() {
                this.gameElem.css("display") == "none" ? (this.gameElem.css("display", "block"),
                this.displayMiniMap(),
                this.hudVisible = !0) : (this.gameElem.css("display", "none"),
                this.hideMiniMap(),
                this.hudVisible = !1)
            }
            hideMiniMap() {
                this.bigmapDisplayed || (this.minimapDisplayed = !1,
                this.container.alpha = 0,
                this.mapInfo.css("bottom", "auto"),
                this.spectatorCounterContainer.css({
                    bottom: 6,
                    left: 98
                }))
            }
            displayMiniMap() {
                if (!this.bigmapDisplayed) {
                    const e = _.uiLayout == _.UiLayout.Sm;
                    this.minimapDisplayed = !0,
                    this.container.alpha = 1,
                    this.mapInfo.css("bottom", this.mapInfoBottom),
                    this.spectatorCounterContainer.css({
                        bottom: e ? 0 : 218,
                        left: e ? 0 : 6
                    })
                }
            }
            displayAnnouncement(e) {
                e && (this.announcement.html(e),
                this.announcement.fadeIn(400, () => {
                    setTimeout( () => {
                        this.announcement.fadeOut(800)
                    }
                    , 3e3)
                }
                ))
            }
            displayGasAnnouncement(e, t) {
                let i = "";
                switch (e) {
                case dt.Waiting:
                    {
                        i = this.localization.translate("game-red-zone-advances");
                        const r = Math.floor(t / 60)
                            , a = t - r * 60;
                        i += r > 1 ? ` ${r} ${this.localization.translate("game-minutes")}` : "",
                        i += r == 1 ? ` ${r} ${this.localization.translate("game-minute")}` : "",
                        i += a > 0 ? ` ${Math.floor(a)} ${this.localization.translate("game-seconds")}` : "";
                        break
                    }
                case dt.Moving:
                    i = this.localization.translate("game-red-zone-advancing");
                    break
                }
                this.displayAnnouncement(i)
            }
            setWaitingForPlayers(e) {
                this.waitingForPlayers = e,
                this.waitingText.css("display", e ? "block" : "none")
            }
            _0x77(e, t, i, r, a, l) {
                const s = t.getCircle()
                    , m = this.getMapPosFromWorldPos(s.pos, r)
                    , d = this.getMapPosFromWorldPos(n.add(s.pos, n.create(s.rad, 0)), r)
                    , h = n.length(n.sub(d, m));
                this.gasRenderer.render(m, h, t.isActive());
                const p = t.circleNew
                    , w = this.getMapPosFromWorldPos(p.pos, r)
                    , f = this.getMapPosFromWorldPos(n.add(p.pos, n.create(p.rad, 0)), r)
                    , S = n.length(n.sub(f, w))
                    , x = this.getMapPosFromWorldPos(e, r)
                    , y = t.isActive()
                    , P = t.isActive() && !this.bigmapDisplayed;
                this.gasSafeZoneRenderer.render(w, S, x, y, P),
                a.renderAirstrikeZones(this, r, l)
            }
            updateHealthBar(e, t, i, r) {
                const a = e;
                let l = r.health * .01 * a;
                l = r.dead ? 0 : z.max(l, 1),
                t.css("width", l),
                l > 0 && i?.css("width", l);
                const s = r.health;
                let m = this.healthRed
                    , d = this.healthDarkpink;
                if (s > 25) {
                    if (r.downed)
                        t.css({
                            backgroundColor: "red"
                        });
                    else {
                        z.eqAbs(s, 100, .2) ? (m = this.healthGrey,
                        d = this.healthGrey) : z.eqAbs(s, 75, .2) || s >= 75 ? (m = this.healthWhite,
                        d = this.healthWhite) : (m = this.healthDarkpink,
                        d = this.healthLightpink);
                        const h = m.getColors()
                            , p = d.getColors()
                            , w = St(h.r, p.r, 45, s)
                            , f = St(h.g, p.g, 45, s)
                            , S = St(h.b, p.b, 45, s);
                        t.css({
                            backgroundColor: `rgba(${w},${f},${S},1)`
                        })
                    }
                    t.removeClass("ui-bar-danger")
                } else
                    t.addClass("ui-bar-danger")
            }
            updateTeam(e, t, i, r, a, l, s) {
                const m = this.teamSelectors[e].groupId
                    , d = this.teamSelectors[e].teamName
                    , h = this.teamSelectors[e].prevHealth
                    , p = this.teamSelectors[e].prevStatus
                    , w = r.dead != p.dead || r.disconnected != p.disconnected || r.downed != p.downed || r.role != p.role;
                if (this.teamSelectors[e].playerId != a || i != h || w) {
                    const f = this.teamSelectors[e].teamStatus
                        , S = this.teamSelectors[e].teamHealthInner;
                    this.teamSelectors[e].playerId = a,
                    this.teamSelectors[e].teamNameHtml = t,
                    d.html(t),
                    this.updateHealthBar(this.teamMemberHealthBarWidth, S, null, {
                        health: i,
                        dead: r.dead,
                        downed: r.downed
                    }),
                    w && (f.attr("class", "ui-team-member-status"),
                    r.disconnected ? f.addClass("ui-team-member-status-disconnected") : r.dead ? f.addClass("ui-team-member-status-dead") : r.downed && f.addClass("ui-team-member-status-downed").addClass("icon-pulse"),
                    d.css("opacity", r.disconnected || r.dead ? .3 : 1)),
                    m.css("display", "block"),
                    this.teamSelectors[e].prevStatus = r,
                    this.teamSelectors[e].prevHealth = i
                }
            }
            clearTeamUI() {
                c(".ui-team-member").css("display", "none"),
                c(".ui-team-indicator").css("display", "none"),
                c(".ui-team-member-name").removeAttr("style"),
                c(".ui-team-member-status").removeAttr("style"),
                c(".ui-team-member-status").removeClass("ui-team-member-status-downed ui-team-member-status-dead ui-team-member-status-disconnected icon-pulse"),
                this.teamSelectors = []
            }
            resize(e, t) {
                this.screenScaleFactor = _.uiLayout == _.UiLayout.Sm ? .5626 : z.min(1, z.clamp(t._0x66 / 1280, .75, 1) * z.clamp(t._0x67 / 1024, .75, 1)),
                this._0x58.resize(this.touch, this.screenScaleFactor),
                this.gasRenderer.resize(),
                this.mapSprite.texture = e.getMapTexture();
                const i = z.min(1, z.min(t._0x66 / 1200, t._0x67 / 900));
                this.roleMenuElem.css("transform", `translateX(-50%) translateY(-50%) scale(${i})`),
                this.redraw(t)
            }
            redraw(e) {
                const t = e._0x66
                    , i = e._0x67
                    , r = this.getMinimapMargin();
                let a = 0
                    , l = 0;
                _.model == "iphonex" && (_.isLandscape ? a += 28 : l += 32);
                const s = this.getMinimapSize()
                    , m = this.getMinimapBorderWidth()
                    , d = _.uiLayout == _.UiLayout.Sm;
                if (this.display.border.clear(),
                this.container.mask?.clear(),
                this.bigmapDisplayed) {
                    const h = z.min(t, i);
                    this.mapSprite.width = h,
                    this.mapSprite.height = h,
                    this.mapSprite.x = t / 2,
                    this.mapSprite.y = i / 2,
                    this.mapSprite.alpha = 1,
                    this.container.mask.beginFill(16777215, 1),
                    this.container.mask.drawRect(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y - this.mapSprite.height / 2, this.mapSprite.width, this.mapSprite.height),
                    this.container.mask.endFill(),
                    _.touch && this.bigmapCollision.css({
                        width: i,
                        height: t
                    })
                } else {
                    const h = this.screenScaleFactor * 1600 / 1.2
                        , p = s * this.screenScaleFactor;
                    this.mapSprite.width = h,
                    this.mapSprite.height = h,
                    this.mapSprite.alpha = .8;
                    let w = {
                        zoom: this.screenScaleFactor
                    };
                    document.body && ("WebkitTransform"in document.body.style ? w = {
                        "-webkit-transform": `scale(${this.screenScaleFactor})`
                    } : "transform"in document.body.style && (w = {
                        transform: `scale(${this.screenScaleFactor})`
                    })),
                    this.mapContainer.css(w),
                    this.mapContainer.css("bottom", this.mapContainerBottom * this.screenScaleFactor);
                    const f = d ? p / 2 + r : i - p / 2 - r;
                    this.minimapPos.x = r + p / 2 + a,
                    this.minimapPos.y = f + l,
                    this.display.border.lineStyle(m, 0),
                    this.display.border.beginFill(0, 0);
                    const S = d ? r + m / 2 : i - p - r + m / 2;
                    this.display.border.drawRect(r + m / 2 + a, S + l, p - m, p - m),
                    this.display.border.endFill();
                    const x = d ? r : i - p - r;
                    this.container.mask.beginFill(16777215, 1),
                    this.container.mask.drawRect(r + a, x - .5 + l, p, p),
                    this.container.mask.endFill()
                }
            }
            toggleEscMenu(e=!1) {
                this.displayingStats || (this.escMenuDisplayed || e ? (this.escMenuDisplayed = !1,
                this.escMenuElem.css("display", "none"),
                this.setCurrentGameTab("settings"),
                c("#ui-center").off("mouseenter mouseleave"),
                this.inputBinds.menuHovered = !1,
                this.roleMenuActive && this.displayRoleMenu()) : this.bigmapDisplayed ? this.displayMapLarge(!0) : (this.visibilityMode == 2 && this.cycleVisibilityMode(),
                this.escMenuDisplayed = !0,
                this.escMenuElem.css("display", "block"),
                c("#ui-center").hover( () => {
                    this.inputBinds.menuHovered = !0
                }
                , () => {
                    this.inputBinds.menuHovered = !1
                }
                ),
                this.inputBinds.menuHovered = !1,
                this.roleMenuActive && this.hideRoleMenu()))
            }
            setCurrentGameTab(e) {
                this.currentGameTab = e,
                this.gameTabs.css("display", "none"),
                this.gameTabBtns.removeClass("btn-game-menu-selected"),
                c(`#ui-game-tab-${this.currentGameTab}`).css("display", "block"),
                c(`#btn-game-${this.currentGameTab}`).addClass("btn-game-menu-selected"),
                this.currentGameTab == "keybinds" ? this.inputBindUi.refresh() : this.inputBindUi.cancelBind()
            }
            setRoleMenuActive(e) {
                this.roleMenuActive = e,
                this.roleMenuActive ? (this.roleMenuTicker = 20,
                this.displayRoleMenu()) : (this.roleMenuInst && (this.audioManager.stopSound(this.roleMenuInst),
                this.roleMenuInst = null),
                this.hideRoleMenu())
            }
            displayRoleMenu() {
                this.roleMenuElemWrapper.css("display", "block")
            }
            hideRoleMenu() {
                this.roleMenuElemWrapper.css("display", "none")
            }
            setRoleMenuOptions(e, t) {
                c("#ui-role-header").html("");
                for (let r = 0; r < t.length; r++) {
                    const a = t[r]
                        , l = B[a]
                        , s = c("<div/>", {
                        class: "ui-role-option",
                        "data-role": a
                    });
                    s.css({
                        "background-image": `url('${l.guiImg}')`
                    }),
                    c("#ui-role-header").append(s)
                }
                c(".ui-role-option").on("click", r => {
                    r.stopPropagation();
                    const a = c(r.currentTarget);
                    this.setRoleMenuInfo(a.data("role"))
                }
                );
                let i = t[0];
                t.includes(e) && (i = e),
                this.setRoleMenuInfo(i)
            }
            setRoleMenuInfo(e) {
                const t = B[e];
                c(".ui-role-option").css({
                    "background-size": 132,
                    opacity: .5
                }),
                c("#ui-role-header").find(`[data-role=${e}]`).css({
                    "background-size": 164,
                    opacity: 1
                });
                const i = c("<div/>", {
                    class: "ui-role-body-left"
                })
                    , r = c("<div/>", {
                    class: "ui-role-body-name"
                })
                    , a = c("<div/>", {
                    class: "ui-role-body-image"
                })
                    , l = this.localization.translate(`game-${e}`);
                r.html(l),
                a.css({
                    "background-image": `url('${t.guiImg}')`
                });
                const s = t.color ? X.colorToHexString(t.color) : "default";
                this.roleMenuElem.css("border-color", s),
                i.append(r).append(a);
                const m = c("<div/>", {
                    class: "ui-role-body-right"
                })
                    , d = t.perks;
                for (let h = 0; h < d.length; h++) {
                    const p = d[h]
                        , w = c("<div/>", {
                        class: "ui-role-body-perk"
                    })
                        , f = c("<div/>", {
                        class: "ui-role-body-perk-image-wrapper"
                    }).append(c("<div/>", {
                        class: "ui-role-body-perk-image-icon"
                    }))
                        , S = c("<div/>", {
                        class: "ui-role-body-perk-name"
                    })
                        , x = X.getSvgFromGameType(p instanceof Function ? p() : p);
                    f.find(".ui-role-body-perk-image-icon").css({
                        "background-image": `url('${x}')`
                    });
                    const y = this.localization.translate(`game-${p}`);
                    S.html(y),
                    w.append(f).append(S),
                    m.append(w)
                }
                c("#ui-role-body").html("").append(i).append(m),
                this.roleDisplayed = e
            }
        }
        const sr = 6
            , yi = .75 * 1e3
            , or = 3
            , vs = {
            [R.WeaponSlot.Primary]: A.EquipPrimary,
            [R.WeaponSlot.Secondary]: A.EquipSecondary,
            [R.WeaponSlot.Melee]: A.EquipMelee,
            [R.WeaponSlot.Throwable]: A.EquipThrowable
        };
        function K(u) {
            return document.getElementById(u)
        }
        function xi(u) {
            return u.button == 0
        }
        function zi(u) {
            return "which"in u ? u.which == 3 : u.button == 2
        }
        function Lt(u, e, t) {
            if (u instanceof Array)
                for (let i = 0; i < u.length; i++)
                    Lt(u[i], t !== void 0 ? e[t] : e, i);
            else if (u instanceof Object) {
                const i = Object.keys(u);
                for (let r = 0; r < i.length; r++) {
                    const a = i[r];
                    Lt(u[a], t !== void 0 ? e[t] : e, a)
                }
            } else
                e[t] = u
        }
        function At(u, e, t) {
            if (e instanceof Array) {
                const i = [];
                for (let r = 0; r < e.length; r++)
                    i[r] = At(u[r], e[r], t);
                return i
            }
            if (e instanceof Object) {
                const i = {}
                    , r = Object.keys(e);
                for (let a = 0; a < r.length; a++) {
                    const l = r[a];
                    i[l] = At(u[l], e[l], t)
                }
                return i
            }
            return u != e || t
        }
        function lr() {
            const u = Object.keys(B)
                , e = [];
            for (let t = 0; t < u.length; t++) {
                const i = u[t]
                    , r = B[i];
                !r.hideUi && (r.type == "heal" || r.type == "boost" || r.type == "ammo") && e.push(i)
            }
            return e
        }
        class bi {
            mobile = !1;
            touch = !1;
            rareLootMessage = {
                lootType: "",
                ticker: 0,
                duration: 0,
                opacity: 0
            };
            pickupMessage = {
                message: "",
                ticker: 0,
                duration: 0,
                opacity: 0
            };
            killMessage = {
                text: "",
                count: "",
                ticker: 0,
                duration: 0,
                opacity: 0
            };
            killFeed = Array.from({
                length: sr
            }, () => ({
                text: "",
                color: "#000000",
                offset: 0,
                opacity: 0,
                ticker: Number.MAX_VALUE
            }));
            ammo = {
                current: 0,
                remaining: 0,
                displayCurrent: !1,
                displayRemaining: !1
            };
            interaction = {
                type: 0,
                text: "",
                key: "",
                usable: !1
            };
            weapons = Array.from({
                length: R.WeaponSlot.Count
            }, (e, t) => ({
                slot: t,
                type: "",
                ammo: 0,
                equipped: !1,
                selectable: !1,
                opacity: 0,
                width: 0,
                ticker: 0,
                bind: vs[t],
                bindStr: ""
            }));
            scopes = _t.map(e => ({
                type: e,
                visible: !1,
                equipped: !1,
                selectable: !1
            }));
            loot = lr().map(e => ({
                type: e,
                count: 0,
                maximum: 0,
                selectable: !1,
                width: 0,
                ticker: 0
            }));
            perks = Array.from({
                length: or
            }, () => ({
                type: "",
                droppable: !1,
                width: 0,
                ticker: 0,
                pulse: !1
            }));
            gear = kt.map(e => ({
                type: e,
                item: "",
                selectable: !1,
                width: 0,
                ticker: 0,
                rot: 0
            }));
            health = R.player.health;
            boost = 0;
            downed = !1
        }
        class Is {
            constructor(e, t) {
                this.localization = e,
                this.inputBinds = t;
                const i = this;
                for (let s = 0; s < sr; s++) {
                    const m = `ui-killfeed-${s}`;
                    let d = K(m);
                    if (!d) {
                        d = document.createElement("div"),
                        d.id = m,
                        d.classList.add("killfeed-div");
                        const h = document.createElement("div");
                        h.classList.add("killfeed-text"),
                        d.appendChild(h),
                        this.dom.killFeed.div.appendChild(d)
                    }
                    this.dom.killFeed.lines.push({
                        line: d,
                        text: d.firstElementChild
                    })
                }
                for (let s = 0; s < R.WeaponSlot.Count; s++) {
                    const m = K(`ui-weapon-id-${s + 1}`)
                        , d = {
                        div: m,
                        type: m.getElementsByClassName("ui-weapon-name")[0],
                        number: m.getElementsByClassName("ui-weapon-number")[0],
                        image: m.getElementsByClassName("ui-weapon-image")[0],
                        ammo: m.getElementsByClassName("ui-weapon-ammo-counter")[0]
                    };
                    this.dom.weapons.push(d)
                }
                for (let s = 0; s < _t.length; s++) {
                    const m = _t[s]
                        , d = {
                        scopeType: m,
                        div: K(`ui-scope-${m}`)
                    };
                    this.dom.scopes.push(d)
                }
                for (let s = lr(), m = 0; m < s.length; m++) {
                    const d = s[m]
                        , h = K(`ui-loot-${d}`);
                    if (h) {
                        const p = {
                            lootType: d,
                            div: h,
                            count: h.getElementsByClassName("ui-loot-count")[0],
                            image: h.getElementsByClassName("ui-loot-image")[0],
                            overlay: h.getElementsByClassName("ui-loot-overlay")[0]
                        };
                        this.dom.loot.push(p)
                    }
                }
                for (let s = 0; s < kt.length; s++) {
                    const m = kt[s]
                        , d = K(`ui-armor-${m}`)
                        , h = {
                        gearType: m,
                        div: d,
                        level: d.getElementsByClassName("ui-armor-level")[0],
                        image: d.getElementsByClassName("ui-armor-image")[0]
                    };
                    this.dom.gear.push(h)
                }
                for (let s = 0; s < or; s++) {
                    const m = K(`ui-perk-${s}`)
                        , d = {
                        perkType: "",
                        div: m,
                        divTitle: m.getElementsByClassName("tooltip-title")[0],
                        divDesc: m.getElementsByClassName("tooltip-desc")[0],
                        image: m.getElementsByClassName("ui-armor-image")[0]
                    };
                    this.dom.perks.push(d)
                }
                const r = (s, m, d) => {
                    this.eventListeners.push({
                        event: s,
                        elem: m,
                        fn: d
                    }),
                    m.addEventListener(s, d)
                }
                    , a = (s, m, d, h) => {
                    this.itemActions.push({
                        action: s,
                        type: m,
                        data: d,
                        div: h,
                        actionQueued: !1,
                        actionTime: 0
                    })
                }
                ;
                for (let s = 0; s < this.dom.weapons.length; s++)
                    a("use", "weapon", s, this.dom.weapons[s].div),
                    a("drop", "weapon", s, this.dom.weapons[s].div);
                for (let s = 0; s < this.dom.scopes.length; s++) {
                    const m = this.dom.scopes[s];
                    a("use", "scope", m.scopeType, m.div),
                    m.scopeType != "1xscope" && a("drop", "loot", m.scopeType, m.div)
                }
                for (let s = 0; s < this.dom.loot.length; s++) {
                    const m = this.dom.loot[s]
                        , d = B[m.lootType];
                    (d.type == "heal" || d.type == "boost") && a("use", "loot", m.lootType, m.div),
                    a("drop", "loot", m.lootType, m.div)
                }
                for (let s = 0; s < this.dom.gear.length; s++) {
                    const m = this.dom.gear[s];
                    m.gearType != "backpack" && a("drop", "loot", m.gearType, m.div)
                }
                for (let s = 0; s < this.dom.perks.length; s++)
                    a("drop", "perk", s, this.dom.perks[s].div);
                for (let s = 0; s < this.itemActions.length; s++) {
                    const m = this.itemActions[s];
                    r("mousedown", m.div, d => {
                        (m.action == "use" && xi(d) || m.action == "drop" && zi(d)) && (d.stopPropagation(),
                        m.actionQueued = !0)
                    }
                    ),
                    r("mouseup", m.div, d => {
                        m.actionQueued && (m.action == "use" && xi(d) || m.action == "drop" && zi(d)) && (d.stopPropagation(),
                        this.pushAction(m),
                        m.actionQueued = !1)
                    }
                    ),
                    r("touchstart", m.div, d => {
                        d.changedTouches.length > 0 && (d.stopPropagation(),
                        m.actionQueued = !0,
                        m.actionTime = new Date().getTime(),
                        m.touchOsId = d.changedTouches[0].identifier)
                    }
                    ),
                    r("touchend", m.div, d => {
                        new Date().getTime() - m.actionTime < yi && m.actionQueued && m.action == "use" && this.pushAction(m),
                        m.actionQueued = !1
                    }
                    ),
                    r("touchcancel", m.div, d => {
                        m.actionQueued = !1
                    }
                    )
                }
                const l = document.getElementById("cvs");
                this.clearQueuedItemActions = () => {
                    for (let s = 0; s < this.itemActions.length; s++)
                        this.itemActions[s].actionQueued = !1;
                    _.touch && l.focus()
                }
                ,
                window.addEventListener("mouseup", this.clearQueuedItemActions),
                window.addEventListener("focus", this.clearQueuedItemActions),
                this.onKeyUp = s => {
                    const m = s.which || s.keyCode
                        , d = i.inputBinds.getBind(A.Fullscreen);
                    d && m == d.code && X.toggleFullScreen()
                }
                ,
                window.addEventListener("keyup", this.onKeyUp)
            }
            oldState = new bi;
            newState = new bi;
            frameCount = 0;
            dom = {
                debugButton: K("ui-debug-button"),
                emoteButton: K("ui-emote-button"),
                menu: {
                    touchStyles: K("btn-touch-styles"),
                    aimLine: K("btn-game-aim-line")
                },
                rareLootMessage: {
                    icon: K("ui-perk-message-image-icon"),
                    imageWrapper: K("ui-perk-message-image-wrapper"),
                    wrapper: K("ui-perk-message-wrapper"),
                    name: K("ui-perk-message-name"),
                    desc: K("ui-perk-message-acquired")
                },
                pickupMessage: K("ui-pickup-message"),
                killMessage: {
                    div: K("ui-kills"),
                    text: K("ui-kill-text"),
                    count: K("ui-kill-count")
                },
                killFeed: {
                    div: K("ui-killfeed-contents"),
                    lines: []
                },
                weapons: [],
                ammo: {
                    current: K("ui-current-clip"),
                    remaining: K("ui-remaining-ammo"),
                    reloadButton: K("ui-reload-button-container")
                },
                interaction: {
                    div: K("ui-interaction"),
                    key: K("ui-interaction-press"),
                    text: K("ui-interaction-description")
                },
                health: {
                    inner: K("ui-health-actual"),
                    depleted: K("ui-health-depleted")
                },
                boost: {
                    div: K("ui-boost-counter"),
                    bars: [K("ui-boost-counter-0").firstElementChild, K("ui-boost-counter-1").firstElementChild, K("ui-boost-counter-2").firstElementChild, K("ui-boost-counter-3").firstElementChild]
                },
                scopes: [],
                loot: [],
                gear: [],
                perks: []
            };
            rareLootMessageQueue = [];
            uiEvents = [];
            eventListeners = [];
            clearQueuedItemActions;
            onKeyUp;
            itemActions = [];
            _0x60() {
                for (let e = 0; e < this.eventListeners.length; e++) {
                    const t = this.eventListeners[e];
                    t.elem.removeEventListener(t.event, t.fn)
                }
                window.removeEventListener("focus", this.clearQueuedItemActions),
                window.removeEventListener("mouseup", this.clearQueuedItemActions),
                window.removeEventListener("keyup", this.onKeyUp)
            }
            pushAction(e) {
                this.uiEvents.push({
                    action: e.action,
                    type: e.type,
                    data: e.data
                })
            }
            flushInput() {
                this.uiEvents = []
            }
            _0x62(e, t, i, r, a, l, s) {
                const m = this.newState;
                if (m.mobile = _.mobile,
                m.touch = _.touch,
                m.touch)
                    for (let L = 0; L < this.itemActions.length; L++) {
                        const v = this.itemActions[L];
                        if (v.actionQueued && v.action == "drop") {
                            const T = new Date().getTime();
                            T - v.actionTime >= yi && (this.pushAction(v),
                            v.actionTime = T,
                            v.actionQueued = !1)
                        }
                    }
                if (m.rareLootMessage.ticker >= m.rareLootMessage.duration && this.rareLootMessageQueue.length > 0) {
                    const L = this.rareLootMessageQueue.shift();
                    m.rareLootMessage.lootType = L,
                    m.rareLootMessage.ticker = 0,
                    m.rareLootMessage.duration = this.rareLootMessageQueue.length > 0 ? 2 : 4,
                    m.rareLootMessage.opacity = 0
                }
                m.rareLootMessage.ticker += e;
                const d = m.rareLootMessage.ticker
                    , h = m.rareLootMessage.duration;
                m.rareLootMessage.opacity = 1 - z.smoothstep(d, h - .2, h),
                m.pickupMessage.ticker += e;
                const p = m.pickupMessage.ticker
                    , w = m.pickupMessage.duration;
                m.pickupMessage.opacity = z.smoothstep(p, 0, .2) * (1 - z.smoothstep(p, w, w + .2)) * (1 - m.rareLootMessage.opacity),
                m.killMessage.ticker += e;
                const f = m.killMessage.ticker
                    , S = m.killMessage.duration;
                m.killMessage.opacity = (1 - z.smoothstep(f, S - .2, S)) * (1 - m.rareLootMessage.opacity);
                let x = 0;
                for (let L = 0; L < m.killFeed.length; L++) {
                    const v = m.killFeed[L];
                    v.ticker += e;
                    const T = v.ticker;
                    v.offset = x,
                    v.opacity = z.smoothstep(T, 0, .25) * (1 - z.smoothstep(T, 6, 6.5)),
                    x += z.min(T / .25, 1),
                    _.mobile && (v.opacity = T < 6.5 ? 1 : 0)
                }
                m.health = t._0x73._0x85 ? 0 : z.max(t._0x71._0x86, 1),
                m.boost = t._0x71._0x87,
                m.downed = t._0x73._0x88;
                let y = 0
                    , P = null
                    , C = !0;
                if (t.canInteract(l)) {
                    let L = null
                        , v = 0;
                    const T = l._0x53._0x89();
                    for (let O = 0; O < T.length; O++) {
                        const G = T[O];
                        if (G.active && !G.dead && g.sameLayer(G.layer, t.layer)) {
                            const q = G.getInteraction();
                            if (q) {
                                const N = U.intersectCircle(G.collider, t._0x73._0x63, q.rad + t._0x90);
                                N && N.pen >= v && (L = G,
                                v = N.pen)
                            }
                        }
                    }
                    L && (y = 4,
                    P = L,
                    C = !0);
                    const V = a.getClosestLoot();
                    if (V && !t._0x73._0x88) {
                        const O = B[V.type]
                            , G = t._0x91(R.WeaponSlot.Primary)
                            , q = t._0x91(R.WeaponSlot.Secondary)
                            , N = G && q
                            , Z = O.type != "gun" || !N || t._0x92() == "gun";
                        let te = !1;
                        (m.touch && O.type == "helmet" && t._0x93() == O.level && V.type != t._0x73._0x75 || O.type == "chest" && t._0x94() == O.level && V.type != t._0x73._0x76) && (te = !0),
                        (Z || _.uiLayout == _.UiLayout.Sm) && (y = 2,
                        P = V),
                        C = Z && (!m.touch || O.type == "gun" || O.type == "melee" || O.type == "outfit" || O.type == "perk" || te)
                    }
                    const F = t._0x95("self_revive");
                    if (t._0x96.type == ie.None && (!t._0x73._0x88 || F)) {
                        const O = r.getPlayerInfo(t.__id).teamId
                            , G = r.playerPool._0x89();
                        for (let q = 0; q < G.length; q++) {
                            const N = G[q];
                            if (N.active) {
                                const Z = r.getPlayerInfo(N.__id).teamId;
                                (N.__id != t.__id || F) && O == Z && N._0x73._0x88 && !N._0x73._0x85 && N._0x96.type != ie.Revive && n.length(n.sub(N._0x73._0x63, t._0x73._0x63)) < R.player.reviveRange && g.sameLayer(N.layer, t.layer) && (y = 3,
                                P = N,
                                C = !0)
                            }
                        }
                    }
                    t._0x96.type == ie.Revive && t._0x73._0x88 && !F && (y = 0,
                    P = null,
                    C = !1),
                    (t._0x96.type == ie.UseItem || t._0x96.type == ie.Revive && (!t._0x73._0x88 || F)) && !i && (y = 1,
                    P = null,
                    C = !0)
                }
                m.interaction.type = y,
                m.interaction.text = this.getInteractionText(y, P, t),
                m.interaction.key = this.getInteractionKey(y),
                m.interaction.usable = C && !i;
                for (let L = 0; L < t._0x71._0x72.length; L++) {
                    const v = t._0x71._0x72[L]
                        , T = m.weapons[L];
                    T.type = v.type,
                    T.ammo = v.ammo,
                    L == R.WeaponSlot.Throwable && (T.ammo = t._0x71._0x97[v.type] || 0);
                    const V = T.equipped;
                    T.equipped = L == t._0x71._0x98,
                    T.selectable = (v.type != "" || L == 0 || L == 1) && !i;
                    const F = T.equipped ? 1 : .6
                        , O = F - T.opacity
                        , G = z.min(O, z.sign(O) * e / .15);
                    T.opacity = z.clamp(T.opacity + G, 0, 1),
                    _.mobile && (T.opacity = F),
                    T.type == "bugle" && T.ammo == 0 && (T.opacity = .25),
                    T.ticker += e,
                    (!T.equipped || !V) && (T.ticker = 0),
                    this.frameCount < 2 && (T.ticker = 1);
                    const q = z.min(T.ticker / .09, Math.PI)
                        , N = Math.sin(q);
                    T.width = N < .001 ? 0 : N,
                    _.mobile && (T.width = 0);
                    const Z = s.getBind(T.bind);
                    T.bindStr = Z ? Z.toString() : ""
                }
                const k = m.weapons[t._0x71._0x98]
                    , b = B[k.type]
                    , M = k.ammo
                    , E = b.type == "gun" ? b.ammoInfinite || t._0x95("endless_ammo") && !b.ignoreEndlessAmmo ? Number.MAX_VALUE : t._0x71._0x97[b.ammo] : 0;
                m.ammo.current = M,
                m.ammo.remaining = E,
                m.ammo.displayCurrent = b.type != "melee",
                m.ammo.displayRemaining = E > 0;
                for (let L = 0; L < m.scopes.length; L++) {
                    const v = m.scopes[L];
                    v.visible = t._0x71._0x97[v.type] > 0,
                    v.equipped = v.visible && t._0x71._0x99 == v.type,
                    v.selectable = v.visible && !i
                }
                for (let L = t._0x100(), v = 0; v < m.loot.length; v++) {
                    const T = m.loot[v]
                        , V = T.count;
                    T.count = t._0x71._0x97[T.type] || 0,
                    T.maximum = R.bagSizes[T.type][L],
                    T.selectable = T.count > 0 && !i,
                    T.count > V && (T.ticker = 0),
                    this.frameCount < 2 && (T.ticker = 1),
                    T.ticker += e;
                    const F = z.min(T.ticker / .05, Math.PI)
                        , O = Math.sin(F);
                    T.width = O < .001 ? 0 : O,
                    _.mobile && (T.width = 0)
                }
                for (let L = 0; L < m.gear.length; L++) {
                    const v = m.gear[L];
                    let T = "";
                    v.type == "chest" ? T = t._0x73._0x76 : v.type == "helmet" ? T = t._0x73._0x75 : v.type == "backpack" && (T = t._0x73._0x101) == "backpack00" && (T = "");
                    const V = v.item;
                    v.item = T,
                    v.selectable = T != "" && !i,
                    V != v.item && (v.ticker = 0),
                    this.frameCount < 2 && (v.ticker = 1),
                    v.ticker += e;
                    const F = z.min(v.ticker / .05, Math.PI)
                        , O = Math.sin(F);
                    v.width = O < .001 ? 0 : O,
                    _.mobile && (v.width = 0)
                }
                for (let L = 0; L < m.perks.length; L++) {
                    const v = m.perks[L];
                    if (t.perks.length > L) {
                        const T = t.perks[L];
                        v.type = T.type,
                        v.droppable = T.droppable,
                        T.isNew && (v.ticker = 0),
                        this.frameCount < 2 && (v.ticker = 1),
                        v.ticker += e;
                        const V = z.min(v.ticker / .05, Math.PI)
                            , F = Math.sin(V);
                        v.width = F < .001 ? 0 : F,
                        _.mobile && (v.width = 0),
                        v.pulse = !_.mobile && v.ticker < 4
                    } else
                        v.type = ""
                }
                const D = At(this.oldState, this.newState, this.frameCount++ == 0);
                this.render(D, this.newState),
                Lt(this.newState, this.oldState)
            }
            render(e, t) {
                const i = this.dom;
                if (e.touch && (i.interaction.key.style.backgroundImage = t.touch ? "url('img/gui/tap.svg')" : "none",
                t.touch && (i.interaction.key.innerHTML = ""),
                i.menu.touchStyles.style.display = t.touch ? "flex" : "none",
                i.menu.aimLine.style.display = t.touch ? "block" : "none",
                i.ammo.reloadButton.style.display = t.touch ? "block" : "none",
                i.emoteButton.style.display = t.touch ? "block" : "none",
                i.debugButton && (i.debugButton.style.display = t.touch ? "block" : "none")),
                e.rareLootMessage.lootType) {
                    const r = t.rareLootMessage.lootType
                        , a = B[r];
                    if (a && a.type == "xp") {
                        const d = this.localization.translate("game-xp-drop-desc");
                        i.rareLootMessage.desc.innerHTML = `+${a.xp} ${d}`
                    } else
                        i.rareLootMessage.desc.innerHTML = "";
                    const l = a?.lootImg?.border ? `url(img/loot/${a.lootImg.border.slice(0, -4)}.svg)` : "none";
                    i.rareLootMessage.imageWrapper.style.backgroundImage = l;
                    const s = X.getSvgFromGameType(r);
                    i.rareLootMessage.icon.style.backgroundImage = s ? `url('${s}')` : "none";
                    const m = this.localization.translate(`game-${r}`);
                    i.rareLootMessage.name.innerHTML = m
                }
                e.rareLootMessage.opacity && (i.rareLootMessage.wrapper.style.opacity = String(t.rareLootMessage.opacity)),
                e.pickupMessage.message && (i.pickupMessage.innerHTML = t.pickupMessage.message),
                e.pickupMessage.opacity && (i.pickupMessage.style.opacity = String(t.pickupMessage.opacity)),
                (e.killMessage.text || e.killMessage.count) && (i.killMessage.text.innerHTML = t.killMessage.text,
                i.killMessage.count.innerHTML = t.killMessage.count),
                e.killMessage.opacity && (i.killMessage.div.style.opacity = String(t.killMessage.opacity));
                for (let r = 0; r < e.killFeed.length; r++) {
                    const a = e.killFeed[r]
                        , l = i.killFeed.lines[r]
                        , s = t.killFeed[r];
                    if (a.text && (l.text.innerHTML = s.text),
                    a.offset) {
                        const m = _.uiLayout != _.UiLayout.Sm || _.tablet ? 35 : 15;
                        l.line.style.top = `${Math.floor(s.offset * m)}px`
                    }
                    a.color && (l.text.style.color = s.color),
                    a.opacity && (l.line.style.opacity = String(s.opacity))
                }
                if (e.health || e.downed) {
                    const r = [{
                        health: 100,
                        color: [179, 179, 179]
                    }, {
                        health: 100,
                        color: [255, 255, 255]
                    }, {
                        health: 75,
                        color: [255, 255, 255]
                    }, {
                        health: 75,
                        color: [255, 158, 158]
                    }, {
                        health: 25,
                        color: [255, 82, 82]
                    }, {
                        health: 25,
                        color: [255, 0, 0]
                    }, {
                        health: 0,
                        color: [255, 0, 0]
                    }];
                    let a = 0;
                    const l = Math.ceil(t.health);
                    for (; r[a].health > l && a < r.length - 1; )
                        a++;
                    const s = r[z.max(a - 1, 0)]
                        , m = r[a]
                        , d = z.delerp(t.health, s.health, m.health);
                    let h = [Math.floor(z.lerp(d, s.color[0], m.color[0])), Math.floor(z.lerp(d, s.color[1], m.color[1])), Math.floor(z.lerp(d, s.color[2], m.color[2]))];
                    t.downed && (h = [255, 0, 0]),
                    i.health.inner.style.backgroundColor = `rgba(${h[0]}, ${h[1]}, ${h[2]}, 1.0)`,
                    i.health.inner.style.width = `${t.health}%`,
                    i.health.depleted.style.width = `${t.health}%`,
                    i.health.depleted.style.display = t.health > 0 ? "block" : "none",
                    t.health > 25 ? i.health.inner.classList.remove("ui-bar-danger") : i.health.inner.classList.add("ui-bar-danger")
                }
                if (e.boost) {
                    const r = R.player.boostBreakpoints;
                    let a = 0;
                    for (let l = 0; l < r.length; l++)
                        a += r[l];
                    for (let l = t.boost / 100, s = 0; s < i.boost.bars.length; s++) {
                        const m = r[s] / a
                            , d = z.clamp(l / m, 0, 1);
                        l = z.max(l - m, 0),
                        i.boost.bars[s].style.width = `${d * 100}%`
                    }
                    i.boost.div.style.opacity = String(t.boost == 0 ? 0 : 1)
                }
                e.interaction.type && (i.interaction.div.style.display = t.interaction.type == 0 ? "none" : "flex"),
                e.interaction.text && (i.interaction.text.innerHTML = t.interaction.text),
                e.interaction.key && (i.interaction.key.innerHTML = t.touch ? "" : t.interaction.key,
                i.interaction.key.className = i.interaction.key.innerHTML.length > 1 ? "ui-interaction-small" : "ui-interaction-large"),
                e.interaction.usable && (i.interaction.key.style.display = t.interaction.usable ? "block" : "none");
                for (let r = 0; r < e.weapons.length; r++) {
                    const a = e.weapons[r]
                        , l = i.weapons[r]
                        , s = t.weapons[r];
                    if (a.type) {
                        let m = ""
                            , d = "";
                        const h = B[s.type];
                        h && (m = this.localization.translate(`game-hud-${s.type}`) || this.localization.translate(`game-${s.type}`),
                        d = X.getCssTransformFromGameType(s.type)),
                        l.type.innerHTML = m,
                        l.image.src = X.getSvgFromGameType(s.type),
                        l.image.style.display = h ? "inline" : "none",
                        l.image.style.transform = d
                    }
                    if (a.equipped && (l.div.style.backgroundColor = s.equipped ? "rgba(0, 0, 0, 0.4)" : "rgba(0, 0, 0, 0)"),
                    a.selectable && (l.div.style.pointerEvents = s.type != "" || s.selectable ? "auto" : "none"),
                    a.width) {
                        const m = z.lerp(s.width, 83.33, 100);
                        l.div.style.width = `${m}%`
                    }
                    a.opacity && (l.div.style.opacity = String(s.opacity)),
                    a.ammo && l.ammo && (l.ammo.innerHTML = String(s.ammo),
                    l.ammo.style.display = s.ammo > 0 ? "block" : "none"),
                    a.bindStr && (l.number.innerHTML = s.bindStr[0] || "")
                }
                if (e.ammo.current) {
                    const r = t.ammo.current;
                    i.ammo.current.innerHTML = String(r),
                    i.ammo.current.style.color = r > 0 ? "white" : "red"
                }
                if (e.ammo.remaining) {
                    const r = t.ammo.remaining;
                    i.ammo.remaining.innerHTML = String(r == Number.MAX_VALUE ? "&#8734;" : r),
                    i.ammo.remaining.style.color = r != 0 ? "white" : "red"
                }
                e.ammo.displayCurrent && (i.ammo.current.style.opacity = String(t.ammo.displayCurrent ? 1 : 0)),
                e.ammo.displayRemaining && (i.ammo.remaining.style.opacity = String(t.ammo.displayRemaining ? 1 : 0),
                i.ammo.reloadButton.style.opacity = String(t.ammo.displayRemaining ? 1 : 0));
                for (let r = 0; r < e.scopes.length; r++) {
                    const a = e.scopes[r]
                        , l = i.scopes[r]
                        , s = t.scopes[r];
                    a.visible && (s.visible ? l.div.classList.remove("ui-hidden") : l.div.classList.add("ui-hidden")),
                    a.equipped && (s.equipped ? (l.div.classList.add("ui-zoom-active"),
                    l.div.classList.remove("ui-zoom-inactive")) : (l.div.classList.remove("ui-zoom-active"),
                    l.div.classList.add("ui-zoom-inactive"))),
                    a.selectable && (l.div.style.pointerEvents = s.selectable ? "auto" : "none")
                }
                for (let r = 0; r < e.loot.length; r++) {
                    const a = e.loot[r]
                        , l = i.loot[r]
                        , s = t.loot[r];
                    if (a && l && s) {
                        if ((a.count || a.maximum) && (l.count.innerHTML = String(s.count),
                        l.div.style.opacity = String(B[l.lootType].special && s.count == 0 ? 0 : s.count > 0 ? 1 : .25),
                        l.div.style.color = s.count == s.maximum ? "#ff9900" : "#ffffff"),
                        a.width) {
                            const m = 1 + s.width * .33
                                , d = `scale(${m}, ${m})`;
                            l.image.style.transform = d,
                            l.overlay && (l.overlay.style.transform = d)
                        }
                        a.selectable && (l.div.style.pointerEvents = s.selectable ? "auto" : "none")
                    }
                }
                for (let r = 0; r < e.gear.length; r++) {
                    const a = e.gear[r]
                        , l = i.gear[r]
                        , s = t.gear[r];
                    if (a.item) {
                        const m = s.item ? B[s.item] : null
                            , d = m ? m.level : 0;
                        l.div.style.display = m ? "block" : "none",
                        l.level.innerHTML = this.localization.translate(`game-level-${d}`),
                        l.level.style.color = d >= 3 ? "#ff9900" : "#ffffff",
                        l.image.src = X.getSvgFromGameType(s.item)
                    }
                    if (a.selectable && (l.div.style.pointerEvents = s.selectable ? "auto" : "none"),
                    a.width) {
                        const m = 1 + s.width * .33;
                        let d = `scale(${m}, ${m})`;
                        const h = B[s.item];
                        h?.lootImg.rot !== void 0 && (d += ` rotate(${h.lootImg.rot}rad)`),
                        l.image.style.transform = d
                    }
                }
                for (let r = 0; r < e.perks.length; r++) {
                    const a = e.perks[r]
                        , l = i.perks[r]
                        , s = t.perks[r];
                    if (a.type && (l.perkType = s.type,
                    l.divTitle.innerHTML = this.localization.translate(`game-${s.type}`),
                    l.divDesc.innerHTML = this.localization.translate(`game-${s.type}-desc`),
                    l.div.style.display = s.type ? "block" : "none",
                    l.image.src = s.type ? X.getSvgFromGameType(s.type) : ""),
                    a.droppable && (s.droppable ? (l.div.classList.add("ui-outline-hover"),
                    l.div.classList.remove("ui-perk-no-drop")) : (l.div.classList.remove("ui-outline-hover"),
                    l.div.classList.add("ui-perk-no-drop"))),
                    a.pulse && (s.pulse ? l.div.classList.add("ui-perk-pulse") : l.div.classList.remove("ui-perk-pulse")),
                    a.width) {
                        const m = 1 + s.width * .33;
                        l.image.style.transform = `scale(${m}, ${m})`
                    }
                }
            }
            displayPickupMessage(e) {
                const t = this.newState.pickupMessage;
                t.message = this.getPickupMessageText(e),
                t.ticker = 0,
                t.duration = 3
            }
            displayKillMessage(e, t) {
                const i = this.newState.killMessage;
                i.text = e,
                i.count = t,
                i.ticker = 0,
                i.duration = 7
            }
            hideKillMessage() {
                this.newState.killMessage.ticker = z.max(this.newState.killMessage.ticker, this.newState.killMessage.duration - .2)
            }
            addRareLootMessage(e, t) {
                t && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration,
                this.rareLootMessageQueue = []),
                this.rareLootMessageQueue.push(e)
            }
            removeRareLootMessage(e) {
                const t = this.rareLootMessageQueue.indexOf(e);
                t >= 0 && this.rareLootMessageQueue.splice(t, 1),
                this.newState.rareLootMessage.lootType == e && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration)
            }
            getRareLootMessageText(e) {
                return B[e] ? `Acquired perk: ${this.localization.translate(`game-${e}`)}` : ""
            }
            addKillFeedMessage(e, t) {
                const i = this.newState.killFeed
                    , r = i[i.length - 1];
                r.text = e,
                r.color = t,
                r.ticker = 0,
                i.sort( (a, l) => a.ticker - l.ticker)
            }
            getKillFeedText(e, t, i, r, a) {
                switch (r) {
                case Be.Player:
                    return `${t} ${this.localization.translate(a ? "game-knocked-out" : "game-killed")} ${e} ${this.localization.translate("game-with")} ${this.localization.translate(`game-${i}`)}`;
                case Be.Bleeding:
                    {
                        const l = this.localization.translate(t ? "game-finally-killed" : "game-finally-bled-out");
                        return t ? `${t} ${l} ${e}` : `${e} ${l}`
                    }
                case Be.Gas:
                    {
                        let l, s;
                        return a ? (l = this.localization.translate("game-the-red-zone"),
                        s = this.localization.translate("game-knocked-out")) : s = this.localization.translate(t ? "game-finally-killed" : "game-died-outside"),
                        l ? `${l} ${s} ${e}` : `${e} ${s}`
                    }
                case Be.Airdrop:
                    {
                        const l = re[i]
                            , s = this.localization.translate("game-the-air-drop")
                            , m = a ? this.localization.translate("game-knocked-out") : l && !l.airdropCrate ? this.localization.translate("game-killed") : this.localization.translate("game-crushed");
                        return `${s} ${m} ${e}`
                    }
                case Be.Airstrike:
                    {
                        const l = this.localization.translate(a ? "game-knocked-out" : "game-killed");
                        return t ? `${t} ${l} ${e} ${this.localization.translate("game-with")} ${this.localization.translate("game-an-air-strike")}` : `${this.localization.translate("game-the-air-strike")} ${l} ${e}`
                    }
                default:
                    return ""
                }
            }
            getKillFeedColor(e, t, i, r) {
                return r ? "#efeeee" : e == t ? "#d1777c" : e == i ? "#00bfff" : "#efeeee"
            }
            getRoleKillFeedColor(e, t, i) {
                const r = B[e];
                return r?.killFeed?.color ? r.killFeed.color : X.colorToHexString(i.getTeamColor(t))
            }
            getRoleTranslation(e, t) {
                let i = `game-${e}`;
                return e == "leader" && (i = t == 1 ? "game-red-leader" : "game-blue-leader"),
                this.localization.translate(i)
            }
            getRoleAnnouncementText(e, t) {
                return `${this.localization.translate("game-youve-been-promoted-to")} ${this.getRoleTranslation(e, t)}!`
            }
            getRoleAssignedKillFeedText(e, t, i) {
                const r = this.getRoleTranslation(e, t);
                return `${i} ${this.localization.translate("game-promoted-to")} ${r}!`
            }
            getRoleKilledKillFeedText(e, t, i) {
                const r = this.getRoleTranslation(e, t);
                return i ? `${i} ${this.localization.translate("game-killed")} ${r}!` : `${r} ${this.localization.translate("game-is-dead")}!`
            }
            getKillText(e, t, i, r, a, l, s, m, d) {
                const h = r && !a
                    , p = d ? e : this.localization.translate("game-you").toUpperCase()
                    , w = h ? "game-knocked-out" : i ? "game-killed" : "game-finally-killed"
                    , f = this.localization.translate(w)
                    , S = l ? d ? this.localization.translate("game-themselves") : this.localization.translate("game-yourself").toUpperCase() : t
                    , x = this.localization.translate(m == R.DamageType.Airstrike ? "game-an-air-strike" : `game-${s}`)
                    , y = this.localization.translate("game-with");
                return x && (i || h) ? `${p} ${f} ${S} ${y} ${x}` : `${p} ${f} ${S}`
            }
            getKillCountText(e) {
                return `${e} ${this.localization.translate(e != 1 ? "game-kills" : "game-kill")}`
            }
            getDownedText(e, t, i, r, a) {
                const l = a ? t : this.localization.translate("game-you").toUpperCase();
                let s = e;
                s || (r == R.DamageType.Gas ? s = this.localization.translate("game-the-red-zone") : r == R.DamageType.Airdrop ? s = this.localization.translate("game-the-air-drop") : r == R.DamageType.Airstrike && (s = this.localization.translate("game-the-air-strike")));
                let m = this.localization.translate(`game-${i}`);
                e && r == R.DamageType.Airstrike && (m = this.localization.translate("game-an-air-strike"));
                const d = this.localization.translate("game-with");
                return m ? `${s} knocked ${l} out ${d} ${m}` : `${s} knocked ${l} out`
            }
            getPickupMessageText(e) {
                const t = {
                    [Me.Full]: "game-not-enough-space",
                    [Me.AlreadyOwned]: "game-item-already-owned",
                    [Me.AlreadyEquipped]: "game-item-already-equipped",
                    [Me.BetterItemEquipped]: "game-better-item-equipped",
                    [Me.GunCannotFire]: "game-gun-cannot-fire"
                }
                    , i = t[e] || t[Me.Full];
                return this.localization.translate(i)
            }
            getInteractionText(e, t, i) {
                switch (e) {
                case 0:
                    return "";
                case 1:
                    return this.localization.translate("game-cancel");
                case 3:
                    return t && i && t == i && i._0x95("self_revive") ? this.localization.translate("game-revive-self") : this.localization.translate("game-revive-teammate");
                case 4:
                    {
                        const r = t.getInteraction();
                        return `${this.localization.translate(r.action)} ${this.localization.translate(r.object)}`
                    }
                case 2:
                    {
                        const r = t;
                        let a = this.localization.translate(`game-${r.type}`) || r.type;
                        return r.count > 1 && (a += ` (${r.count})`),
                        a
                    }
                default:
                    return ""
                }
            }
            getInteractionKey(e) {
                let t = null;
                switch (e) {
                case 1:
                    t = this.inputBinds.getBind(A.Cancel);
                    break;
                case 2:
                    t = this.inputBinds.getBind(A.Loot) || this.inputBinds.getBind(A.Interact);
                    break;
                case 4:
                    t = this.inputBinds.getBind(A.Use) || this.inputBinds.getBind(A.Interact);
                    break;
                case 3:
                    t = this.inputBinds.getBind(A.Revive) || this.inputBinds.getBind(A.Interact);
                    break;
                case 0:
                default:
                    t = this.inputBinds.getBind(A.Use)
                }
                return t ? t.toString() : "<Unbound>"
            }
        }
        function Ms() {
            const u = {
                "ui-loot-bandage": "img/loot/loot-medical-bandage.svg",
                "ui-loot-healthkit": "img/loot/loot-medical-healthkit.svg",
                "ui-loot-soda": "img/loot/loot-medical-soda.svg",
                "ui-loot-painkiller": "img/loot/loot-medical-pill.svg",
                "ui-loot-9mm": "img/loot/loot-ammo-box.svg",
                "ui-loot-12gauge": "img/loot/loot-ammo-box.svg",
                "ui-loot-762mm": "img/loot/loot-ammo-box.svg",
                "ui-loot-556mm": "img/loot/loot-ammo-box.svg",
                "ui-loot-50AE": "img/loot/loot-ammo-box.svg",
                "ui-loot-308sub": "img/loot/loot-ammo-box.svg",
                "ui-loot-flare": "img/loot/loot-ammo-box.svg",
                "ui-loot-45acp": "img/loot/loot-ammo-box.svg"
            };
            for (const [e,t] of Object.entries(u))
                K(e).getElementsByClassName("ui-loot-image")[0].src = t;
            K("mag-glass-white").src = "img/gui/mag-glass.svg",
            K("ui-minimize-img").src = "img/gui/minimize.svg"
        }
        class Ts {
            constructor(e, t, i, r, a, l, s, m, d, h, p, w) {
                this._0x3 = e,
                this._0x4 = t,
                this._0x5 = i,
                this._0x6 = r,
                this._0x7 = a,
                this._0x8 = l,
                this._0x9 = s,
                this._0x10 = m,
                this._0x11 = d,
                this.respawns = h,
                this.onJoin = p,
                this.onQuit = w,
                this._0x3 = e,
                this._0x4 = t,
                this._0x10 = m,
                this._0x5 = i,
                this._0x6 = r,
                this._0x7 = a,
                this._0x8 = l,
                this._0x9 = s,
                this._0x11 = d
            }
            initialized = !1;
            teamMode = Se.Solo;
            victoryMusic = null;
            _0x12 = null;
            connecting = !1;
            connected = !1;
            _0x13;
            _0x14;
            _0x15;
            _0x16;
            _0x17;
            _0x18;
            _0x19;
            _0x20;
            _0x21;
            _0x22;
            _0x23;
            _0x24;
            _0x25;
            _0x26;
            _0x27;
            _0x28;
            _0x29;
            _0x30;
            _0x31;
            _0x32;
            _0x33;
            _0x34;
            _0x35;
            _0x36;
            _0x0;
            _0x1;
            _0x37;
            _0x2;
            _0x38;
            _0x39;
            _0x40;
            _0x41;
            _0x42;
            _0x43;
            _0x44;
            _0x45;
            _0x46;
            _0x47;
            _0x48;
            _0x49;
            _0x50;
            seq;
            seqInFlight;
            seqSendTime;
            pings;
            debugPingTime;
            lastUpdateTime;
            updateIntervals;
            tryJoinGame(e, t, i, r, a) {
                if (!this.connecting && !this.connected && !this.initialized) {
                    this._0x12 && (this._0x12.onerror = function() {}
                    ,
                    this._0x12.onopen = function() {}
                    ,
                    this._0x12.onmessage = function() {}
                    ,
                    this._0x12.onclose = function() {}
                    ,
                    this._0x12.close(),
                    this._0x12 = null),
                    this.connecting = !0,
                    this.connected = !1;
                    try {
                        this._0x12 = new WebSocket(e),
                        this._0x12.binaryType = "arraybuffer",
                        this._0x12.onerror = l => {
                            this._0x12?.close()
                        }
                        ,
                        this._0x12.onopen = () => {
                            this.connecting = !1,
                            this.connected = !0;
                            const l = this._0x6.get("playerName")
                                , s = new br;
                            s.protocol = R.protocolVersion,
                            s.matchPriv = t,
                            s.loadoutPriv = i,
                            s.questPriv = r,
                            s.name = l,
                            s.useTouch = _.touch,
                            s.isMobile = _.mobile || window.mobile,
                            s.bot = !1,
                            s.loadout = this._0x6.get("loadout"),
                            this._0x51(ne.Join, s, 8192)
                        }
                        ,
                        this._0x12.onmessage = l => {
                            const s = new Wt(l.data);
                            for (; ; ) {
                                const m = s.deserializeMsgType();
                                if (m == ne.None)
                                    break;
                                this._0x52(m, s.getStream())
                            }
                        }
                        ,
                        this._0x12.onclose = () => {
                            const l = this._0x30?.displayingStats
                                , s = this.connecting
                                , m = this.connected;
                            if (this.connecting = !1,
                            this.connected = !1,
                            s)
                                a();
                            else if (m && !this._0x38 && !l) {
                                const d = this._0x37 || "index-host-closed";
                                this.onQuit(d)
                            }
                        }
                    } catch (l) {
                        console.error(l),
                        this.connecting = !1,
                        this.connected = !1,
                        a()
                    }
                }
            }
            init() {
                this._0x36 = this._0x3.renderer.type == ot.CANVAS,
                this._0x13 = new gs(this._0x7,this._0x6),
                this._0x14 = new Ui,
                this._0x15 = new ar(this,this._0x36),
                this._0x16 = new Qi(this._0x15),
                this._0x17 = new Ki,
                this._0x18 = new Zi(this._0x17),
                this._0x19 = new ir,
                this._0x20 = new Na,
                this._0x21 = new Ha,
                this._0x22 = new os,
                this._0x23 = new Wa,
                this._0x24 = new is(this._0x4),
                this._0x25 = new Oa,
                this._0x26 = new rr,
                this._0x27 = new ja,
                this._0x28 = new Za,
                this._0x29 = new ka(this._0x36),
                this._0x30 = new ks(this,this._0x4,this._0x16,this._0x24,this._0x5,this._0x36,this._0x13,this._0x8,this._0x9),
                this._0x31 = new Is(this._0x5,this._0x8),
                this._0x32 = new ba(this._0x4,this._0x30,this._0x19,this._0x14,this._0x18),
                this._0x33 = new ls;
                const e = {
                    [ce.Player]: this._0x19.playerPool,
                    [ce.Obstacle]: this._0x18._0x53,
                    [ce.Loot]: this._0x28.lootPool,
                    [ce.DeadBody]: this._0x27.deadBodyPool,
                    [ce.Building]: this._0x18._0x54,
                    [ce.Structure]: this._0x18._0x55,
                    [ce.Decal]: this._0x17.decalPool,
                    [ce.Projectile]: this._0x22.projectilePool,
                    [ce.Smoke]: this._0x26._0x56,
                    [ce.Airdrop]: this._0x25.airdropPool
                };
                this._0x34 = new Xi;
                for (const i in e)
                    e.hasOwnProperty(i) && this._0x34._0x57(i, e[i]);
                this._0x35 = new pe;
                const t = [this._0x18.display.ground, this._0x15.layers[0], this._0x15.ground, this._0x15.layers[1], this._0x15.layers[2], this._0x15.layers[3], this._0x35, this._0x29.gasRenderer.display, this._0x13.container, this._0x32.container, this._0x30.container, this._0x30._0x58.container, this._0x32.indContainer];
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    r && (r.interactiveChildren = !1,
                    this._0x3.stage.addChild(r))
                }
                this._0x37 = "",
                this._0x2 = !1,
                this._0x38 = !1,
                this._0x39 = !1,
                this._0x40 = 0,
                this._0x41 = new Ht,
                this._0x42 = 0,
                this._0x43 = 0,
                this._0x0 = !1,
                this._0x1 = 0,
                this._0x44 = 0,
                this._0x45 = 0,
                this._0x46 = null,
                this._0x47 = !1,
                this._0x48 = 1,
                this._0x49 = 1,
                this._0x50 = !1,
                this.seq = 0,
                this.seqInFlight = !1,
                this.seqSendTime = 0,
                this.pings = [],
                this.updateIntervals = [],
                this.lastUpdateTime = 0,
                this.debugPingTime = 0,
                this._0x14._0x59(this._0x6.get("screenShake")),
                this._0x19.anonPlayerNames = this._0x6.get("anonPlayerNames"),
                this.initialized = !0
            }
            free() {
                if (this._0x12 && (this._0x12.onmessage = function() {}
                ,
                this._0x12.close(),
                this._0x12 = null),
                this.connecting = !1,
                this.connected = !1,
                this.initialized)
                    for (this.initialized = !1,
                    this._0x0 = !1,
                    this._0x1 = 0,
                    this._0x32._0x60(),
                    this._0x31._0x60(),
                    this._0x30._0x60(),
                    this._0x29._0x60(),
                    this._0x25._0x60(),
                    this._0x24._0x60(),
                    this._0x18._0x60(),
                    this._0x16._0x60(),
                    this._0x15._0x60(),
                    this._0x7._0x60(),
                    this._0x4.stopAll(); this._0x3.stage.children.length > 0; ) {
                        const e = this._0x3.stage.children[0];
                        this._0x3.stage.removeChild(e),
                        e.destroy({
                            children: !0
                        })
                    }
            }
            warnPageReload() {
                return this.initialized && this._0x2 && !this._0x39 && !this._0x30.displayingStats
            }
            update(e) {
                //global variables
                window.activeId = this._0x45;
                window.spectating = this._0x39;
                const t = this._0x26._0x61
                    , i = {};
                this._0x2 && (this._0x42 += e),
                this._0x19._0x62(e, this._0x45, this.teamMode, this._0x15, this._0x16, this._0x14, this._0x18, this._0x8, this._0x4, this._0x31, this._0x32.wheelKeyTriggered, this._0x30.displayingStats, this._0x39),
                this.updateAmbience(),
                this._0x14._0x63 = n.copy(this._0x46._0x63),
                this._0x14._0x64();
                const r = this._0x46._0x65()
                    , a = z.min(this._0x14._0x66, this._0x14._0x67)
                    , l = z.max(this._0x14._0x66, this._0x14._0x67)
                    , s = z.max(a * (16 / 9), l);
                this._0x14._0x48 = s * .5 / (r * this._0x14._0x68);
                const m = this._0x46.zoomFast ? 3 : 2
                    , d = this._0x46.zoomFast ? 3 : 1.4
                    , h = this._0x14._0x48 > this._0x14._0x69 ? m : d;
                this._0x14._0x69 = z.lerp(e * h, this._0x14._0x69, this._0x14._0x48),
                this._0x4.cameraPos = n.copy(this._0x14._0x63),
                this._0x7.keyPressed($.Escape) && this._0x30.toggleEscMenu(),
                (this._0x8.isBindPressed(A.ToggleMap) || this._0x7.keyPressed($.G) && !this._0x8.isKeyBound($.G)) && this._0x30.displayMapLarge(!1),
                this._0x8.isBindPressed(A.CycleUIMode) && this._0x30.cycleVisibilityMode(),
                (this._0x8.isBindPressed(A.HideUI) || this._0x7.keyPressed($.Escape) && !this._0x30.hudVisible) && this._0x30.cycleHud();
                const p = this._0x46._0x63
                    , w = this._0x14._0x70(this._0x7.mousePos)
                    , f = n.sub(w, p);
                let S = n.length(f)
                    , x = S > 1e-5 ? n.div(f, S) : n.create(1, 0);
                this._0x32.wheelDisplayed && (S = this._0x41.toMouseLen,
                x = this._0x41.toMouseDir);
                const y = new Ht;
                if (y.seq = this.seq,
                !this._0x39) {
                    if (_.touch) {
                        const v = this._0x13.getTouchMovement(this._0x14)
                            , T = this._0x13.getAimMovement(this._0x46, this._0x14);
                        let V = n.copy(T.aimMovement.toAimDir);
                        if (this._0x13.turnDirTicker -= e,
                        this._0x13.moveDetected && !T.touched) {
                            const G = n.normalizeSafe(v.toMoveDir, n.create(1, 0))
                                , q = this._0x13.turnDirTicker < 0 ? G : T.aimMovement.toAimDir;
                            this._0x13.setAimDir(q),
                            V = q
                        }
                        T.touched && (this._0x13.turnDirTicker = this._0x13.turnDirCooldown),
                        this._0x13.moveDetected ? (y.touchMoveDir = n.normalizeSafe(v.toMoveDir, n.create(1, 0)),
                        y.touchMoveLen = Math.round(z.clamp(v.toMoveLen, 0, 1) * 255)) : y.touchMoveLen = 0,
                        y.touchMoveActive = !0;
                        const F = T.aimMovement.toAimLen
                            , O = z.clamp(F / this._0x13.padPosRange, 0, 1) * R.player.throwableMaxMouseDist;
                        y.toMouseLen = O,
                        y.toMouseDir = V
                    } else
                        y.moveLeft = this._0x8.isBindDown(A.MoveLeft) || this._0x7.keyDown($.Left) && !this._0x8.isKeyBound($.Left),
                        y.moveRight = this._0x8.isBindDown(A.MoveRight) || this._0x7.keyDown($.Right) && !this._0x8.isKeyBound($.Right),
                        y.moveUp = this._0x8.isBindDown(A.MoveUp) || this._0x7.keyDown($.Up) && !this._0x8.isKeyBound($.Up),
                        y.moveDown = this._0x8.isBindDown(A.MoveDown) || this._0x7.keyDown($.Down) && !this._0x8.isKeyBound($.Down),
                        y.toMouseDir = n.copy(x),
                        y.toMouseLen = S;
                    y.touchMoveDir = n.normalizeSafe(y.touchMoveDir, n.create(1, 0)),
                    y.touchMoveLen = z.clamp(y.touchMoveLen, 0, 255),
                    y.toMouseDir = n.normalizeSafe(y.toMouseDir, n.create(1, 0)),
                    y.toMouseLen = z.clamp(y.toMouseLen, 0, We.MouseMaxDist),
                    y.shootStart = this._0x8.isBindPressed(A.Fire) || this._0x13.shotDetected,
                    y.shootHold = this._0x8.isBindDown(A.Fire) || this._0x13.shotDetected,
                    y.portrait = this._0x14._0x66 < this._0x14._0x67;
                    const D = [A.Reload, A.Revive, A.Use, A.Loot, A.Cancel, A.EquipPrimary, A.EquipSecondary, A.EquipThrowable, A.EquipMelee, A.EquipNextWeap, A.EquipPrevWeap, A.EquipLastWeap, A.EquipOtherGun, A.EquipPrevScope, A.EquipNextScope, A.StowWeapons];
                    for (let v = 0; v < D.length; v++) {
                        const T = D[v];
                        this._0x8.isBindPressed(T) && y.addInput(T)
                    }
                    if (this._0x8.isBindPressed(A.Interact)) {
                        const v = []
                            , T = [A.Revive, A.Use, A.Loot];
                        for (let V = 0; V < T.length; V++) {
                            const F = T[V];
                            this._0x8.getBind(F) || v.push(F)
                        }
                        if (v.length == T.length)
                            y.addInput(A.Interact);
                        else
                            for (let V = 0; V < v.length; V++)
                                y.addInput(v[V])
                    }
                    (this._0x8.isBindPressed(A.SwapWeapSlots) || this._0x30.swapWeapSlots) && (y.addInput(A.SwapWeapSlots),
                    this._0x46.gunSwitchCooldown = 0),
                    this._0x30.reloadTouched && y.addInput(A.Reload),
                    this._0x30.interactionTouched && (y.addInput(A.Interact),
                    y.addInput(A.Cancel));
                    for (let v = 0; v < this._0x31.uiEvents.length; v++) {
                        const T = this._0x31.uiEvents[v];
                        if (T.action == "use")
                            if (T.type == "weapon") {
                                const F = {
                                    [Ye.Primary]: A.EquipPrimary,
                                    [Ye.Secondary]: A.EquipSecondary,
                                    [Ye.Melee]: A.EquipMelee,
                                    [Ye.Throwable]: A.EquipThrowable
                                }[T.data];
                                F && y.addInput(F)
                            } else
                                y.useItem = T.data
                    }
                    this._0x8.isBindPressed(A.UseBandage) ? y.useItem = "bandage" : this._0x8.isBindPressed(A.UseHealthKit) ? y.useItem = "healthkit" : this._0x8.isBindPressed(A.UseSoda) ? y.useItem = "soda" : this._0x8.isBindPressed(A.UsePainkiller) && (y.useItem = "painkiller");
                    let L = !1;
                    for (let v = 0; v < this._0x31.uiEvents.length; v++) {
                        const T = this._0x31.uiEvents[v];
                        if (T.action == "drop") {
                            const V = new _r;
                            if (T.type == "weapon") {
                                const F = T.data
                                    , O = this._0x46._0x71._0x72;
                                V.item = O[F].type,
                                V.weapIdx = F
                            } else if (T.type == "perk") {
                                const F = T.data
                                    , O = this._0x46._0x73._0x74
                                    , G = O.length > F ? O[F] : null;
                                G?.droppable && (V.item = G.type)
                            } else {
                                const F = T.data == "helmet" ? this._0x46._0x73._0x75 : T.data == "chest" ? this._0x46._0x73._0x76 : T.data;
                                V.item = F
                            }
                            V.item != "" && (this._0x51(ne.DropItem, V, 128),
                            V.item != "fists" && (L = !0))
                        }
                    }
                    if (L && this._0x4.playSound("loot_drop_01", {
                        channel: "ui"
                    }),
                    this._0x30.roleSelected) {
                        const v = new kr;
                        v.role = this._0x30.roleSelected,
                        this._0x51(ne.PerkModeRoleSelect, v, 128),
                        this._0x6.set("perkModeRole", v.role)
                    }
                }
                const P = this._0x30.specBegin
                    , C = this._0x30.specNext || this._0x39 && this._0x7.keyPressed($.Right)
                    , k = this._0x30.specPrev || this._0x39 && this._0x7.keyPressed($.Left)
                    , b = this._0x7.keyPressed($.Right) || this._0x7.keyPressed($.Left);
                if (P || this._0x39 && C || k) {
                    const D = new vr;
                    D.specBegin = P,
                    D.specNext = C,
                    D.specPrev = k,
                    D.specForce = b,
                    this._0x51(ne.Spectate, D, 128)
                }
                this._0x30.specBegin = !1,
                this._0x30.specNext = !1,
                this._0x30.specPrev = !1,
                this._0x30.reloadTouched = !1,
                this._0x30.interactionTouched = !1,
                this._0x30.swapWeapSlots = !1,
                this._0x30.roleSelected = "";
                let M = !1;
                for (const D in y)
                    if (y.hasOwnProperty(D)) {
                        if (D == "inputs")
                            M = y[D].length > 0;
                        else if (D == "toMouseDir" || D == "touchMoveDir") {
                            const L = z.clamp(n.dot(y[D], this._0x41[D]), -1, 1);
                            M = z.rad2deg(Math.acos(L)) > .1
                        } else
                            D == "toMouseLen" ? M = Math.abs(this._0x41[D] - y[D]) > .5 : D == "shootStart" ? M = y[D] || y[D] != this._0x41[D] : this._0x41[D] != y[D] && (M = !0);
                        if (M)
                            break
                    }
                this._0x40 -= e,
                (M || this._0x40 < 0) && (this.seqInFlight || (this.seq = (this.seq + 1) % 256,
                this.seqSendTime = Date.now(),
                this.seqInFlight = !0,
                y.seq = this.seq),
                this._0x51(ne.Input, y, 128),
                this._0x40 = 1,
                this._0x41 = y),
                this._0x31.flushInput(),
                this._0x18._0x62(e, this._0x46, this._0x19, this._0x16, this._0x4, this._0x10, this._0x15, this._0x14, t, i),
                this._0x28._0x62(e, this._0x46, this._0x18, this._0x4, this._0x14, i),
                this._0x20._0x62(e, this._0x19, this._0x18, this._0x14, this._0x46, this._0x15, this._0x16, this._0x4),
                this._0x21._0x62(e, this._0x19, this._0x18, this._0x14, this._0x46, this._0x15, this._0x16, this._0x4),
                this._0x22._0x62(e, this._0x16, this._0x4, this._0x46, this._0x18, this._0x15, this._0x14),
                this._0x23._0x62(e, this._0x18, this._0x19, this._0x14, this._0x16, this._0x4, i),
                this._0x25._0x62(e, this._0x46, this._0x14, this._0x18, this._0x16, this._0x15, this._0x4),
                this._0x24._0x62(e, this._0x14, this._0x46, this._0x18, this._0x15),
                this._0x26._0x62(e, this._0x14, this._0x46, this._0x18, this._0x15),
                this._0x33._0x62(e, this._0x45, this._0x19, this._0x16, this._0x4),
                this._0x16._0x62(e, this._0x14, i),
                this._0x27._0x62(e, this._0x19, this._0x46, this._0x18, this._0x14, this._0x15),
                this._0x17._0x62(e, this._0x14, this._0x15, i),
                this._0x30._0x62(e, this._0x46, this._0x18, this._0x29, this._0x28, this._0x19, this._0x14, this.teamMode, this._0x18.factionMode),
                this._0x31._0x62(e, this._0x46, this._0x39, this._0x19, this._0x28, this._0x18, this._0x8),
                this._0x32._0x62(e, this._0x44, this._0x46, this.teamMode, this._0x27, this._0x18, this._0x15, this._0x7, this._0x8, this._0x39),
                this._0x13._0x62(e, this._0x46, this._0x18, this._0x14, this._0x15),
                this._0x15._0x62(e, this._0x14, this._0x18, i);
                for (let D = 0; D < this._0x32.newPings.length; D++) {
                    const L = this._0x32.newPings[D]
                        , v = new Xt;
                    v.type = L.type,
                    v.pos = L.pos,
                    v.isPing = !0,
                    this._0x51(ne.Emote, v, 128)
                }
                this._0x32.newPings = [];
                for (let D = 0; D < this._0x32.newEmotes.length; D++) {
                    const L = this._0x32.newEmotes[D]
                        , v = new Xt;
                    v.type = L.type,
                    v.pos = L.pos,
                    v.isPing = !1,
                    this._0x51(ne.Emote, v, 128)
                }
                this._0x32.newEmotes = [];
                const E = Date.now();
                if (E > this.debugPingTime) {
                    let D = function(F, O) {
                        return (" ".repeat(O) + F).slice(-7)
                    };
                    this.debugPingTime = E + 2e4;
                    const L = this.pings.sort( (F, O) => F - O)
                        , v = L.length;
                    if (v > 0) {
                        const F = L[Math.floor(v * .5)]
                            , O = L[Math.floor(v * .95)]
                            , G = L[v - 1];
                        console.log("Ping     min:", D(L[0].toFixed(2), 7), "med:", D(F.toFixed(2), 7), "p95:", D(O.toFixed(2), 7), "max:", D(G.toFixed(2), 7))
                    }
                    this.pings = [];
                    const T = this.updateIntervals.sort( (F, O) => F - O)
                        , V = T.length;
                    if (V > 0) {
                        const F = T[Math.floor(V * .5)]
                            , O = T[Math.floor(V * .95)]
                            , G = T[V - 1];
                        console.log("Interval min:", D(T[0].toFixed(2), 7), "med:", D(F.toFixed(2), 7), "p95:", D(O.toFixed(2), 7), "max:", D(G.toFixed(2), 7))
                    }
                    this.updateIntervals = []
                }
                this._0x77(e, i)
            }
            _0x77(e, t) {
                const i = this._0x18.mapLoaded ? this._0x18.getMapDef().biome.colors.grass : 8433481;
                this._0x3.renderer.background.color = i,
                this._0x19._0x77(this._0x14, t),
                this._0x20._0x77(this._0x14, t),
                this._0x21._0x77(this._0x14),
                this._0x17._0x77(this._0x14, t, this._0x46.layer),
                this._0x18._0x77(this._0x14),
                this._0x29._0x77(this._0x14),
                this._0x30._0x77(this._0x46._0x63, this._0x29, this._0x14, this._0x18, this._0x24, t),
                this._0x32._0x77(this._0x14),
                _.debug && he._0x77(this._0x14, this._0x35),
                he.flush()
            }
            updateAmbience() {
                const e = this._0x46._0x63;
                let t = 0
                    , i = 0
                    , r = 1;
                if (this._0x18.isInOcean(e))
                    t = 1,
                    i = 0,
                    r = 0;
                else {
                    const a = this._0x18.distanceToShore(e);
                    t = z.delerp(a, 50, 0),
                    i = 0;
                    for (let l = 0; l < this._0x18.terrain.rivers.length; l++) {
                        const s = this._0x18.terrain?.rivers[l]
                            , m = s.spline.getClosestTtoPoint(e)
                            , d = s.spline.getPos(m)
                            , h = n.length(n.sub(d, e))
                            , p = s.waterWidth + 2
                            , w = z.delerp(h, 30 + p, p)
                            , f = z.clamp(s.waterWidth / 8, .25, 1);
                        i = z.max(w * f, i)
                    }
                    this._0x46.layer == 1 && (i = 0),
                    r = 1
                }
                this._0x10.getTrack("wind").weight = r,
                this._0x10.getTrack("river").weight = i,
                this._0x10.getTrack("waves").weight = t
            }
            resize() {
                this._0x14._0x66 = _.screenWidth,
                this._0x14._0x67 = _.screenHeight,
                this._0x18.resize(this._0x3.renderer, this._0x36),
                this._0x29.resize(),
                this._0x30.resize(this._0x18, this._0x14),
                this._0x13.resize(),
                this._0x15.resize(this._0x18, this._0x14)
            }
            _0x78(e) {
                const t = {
                    audioManager: this._0x4,
                    renderer: this._0x15,
                    particleBarn: this._0x16,
                    map: this._0x18,
                    smokeBarn: this._0x26,
                    decalBarn: this._0x17
                };
                e.activePlayerIdDirty && (this._0x45 = e.activePlayerId);
                for (let a = 0; a < e.playerInfos.length; a++)
                    this._0x19.setPlayerInfo(e.playerInfos[a]);
                for (let a = 0; a < e.deletedPlayerIds.length; a++) {
                    const l = e.deletedPlayerIds[a];
                    this._0x19.deletePlayerInfo(l)
                }
                if ((e.playerInfos.length > 0 || e.deletedPlayerIds.length > 0) && this._0x19.recomputeTeamData(),
                e.playerStatusDirty) {
                    const a = this._0x19.getPlayerInfo(this._0x45).teamId;
                    this._0x19.updatePlayerStatus(a, e.playerStatus, this._0x18.factionMode)
                }
                if (e.groupStatusDirty) {
                    const a = this._0x19.getPlayerInfo(this._0x45).groupId;
                    this._0x19.updateGroupStatus(a, e.groupStatus)
                }
                for (let a = 0; a < e.delObjIds.length; a++)
                    this._0x34._0x79(e.delObjIds[a]);
                for (let a = 0; a < e.fullObjects.length; a++) {
                    const l = e.fullObjects[a];
                    this._0x34._0x80(l.__type, l.__id, l, t)
                }
                for (let a = 0; a < e.partObjects.length; a++) {
                    const l = e.partObjects[a];
                    this._0x34._0x81(l.__id, l, t)
                }
                this._0x39 = this._0x45 != this._0x44,
                this._0x46 = this._0x19.getPlayerById(this._0x45),
                this._0x46._0x82(e.activePlayerData, this._0x19),
                e.activePlayerData.weapsDirty && (this._0x30.weapsDirty = !0),
                this._0x39 && (this._0x30.setSpectateTarget(this._0x45, this._0x44, this.teamMode, this._0x19),
                this._0x13.hideAll()),
                this._0x46.layer = this._0x46._0x73._0x83,
                this._0x15.setActiveLayer(this._0x46.layer),
                this._0x4.activeLayer = this._0x46.layer;
                const i = this._0x46.isUnderground(this._0x18);
                this._0x15.setUnderground(i),
                this._0x4.underground = i,
                e.gasDirty && this._0x29.setFullState(e.gasT, e.gasData, this._0x18, this._0x30),
                e.gasTDirty && this._0x29.setProgress(e.gasT);
                for (let a = 0; a < e.bullets.length; a++) {
                    const l = e.bullets[a];
                    Ba(l, this._0x20, this._0x21, this._0x19, this._0x15),
                    l.shotFx && this._0x33.addShot(l)
                }
                for (let a = 0; a < e.explosions.length; a++) {
                    const l = e.explosions[a];
                    this._0x23.addExplosion(l.type, l.pos, l.layer)
                }
                for (let a = 0; a < e.emotes.length; a++) {
                    const l = e.emotes[a];
                    l.isPing ? this._0x32.addPing(l, this._0x18.factionMode) : this._0x32.addEmote(l)
                }
                this._0x24.updatePlanes(e.planes, this._0x18);
                for (let a = 0; a < e.airstrikeZones.length; a++)
                    this._0x24.createAirstrikeZone(e.airstrikeZones[a]);
                if (this._0x30.updateMapIndicators(e.mapIndicators),
                e.killLeaderDirty) {
                    const a = X.htmlEscape(this._0x19.getPlayerName(e.killLeaderId, this._0x45, !0));
                    this._0x30.updateKillLeader(e.killLeaderId, a, e.killLeaderKills, this._0x18.getMapDef().gameMode)
                }
                const r = Date.now();
                if (this._0x43++,
                e.ack == this.seq && this.seqInFlight) {
                    this.seqInFlight = !1;
                    const a = r - this.seqSendTime;
                    this.pings.push(a)
                }
                if (this.lastUpdateTime > 0) {
                    const a = r - this.lastUpdateTime;
                    this.updateIntervals.push(a)
                }
                this.lastUpdateTime = r
            }
            _0x52(e, t) {
                switch (e) {
                case ne.Joined:
                    {
                        const i = new Or;
                        i.deserialize(t),
                        this.onJoin(),
                        this.teamMode = i.teamMode,
                        this._0x44 = i.playerId,
                        this._0x47 = !0,
                        this._0x32.updateEmoteWheel(i.emotes),
                        i.started || this._0x30.setWaitingForPlayers(!0),
                        this._0x30.removeAds(),
                        this.victoryMusic && (this.victoryMusic.stop(),
                        this.victoryMusic = null),
                        document.hasFocus() || this._0x4.playSound("notification_start_01", {
                            channel: "ui"
                        }),
                        this._0x6.get("ENV") === "CrazyGames" ? window.CrazyGames.SDK.game.gameplayStart() : this._0x6.get("ENV") === "POKI" && window.PokiSDK.gameplayStart();
                        break
                    }
                case ne.Map:
                    {
                        const i = new Rr;
                        if (i.deserialize(t),
                        this._0x18.loadMap(i, this._0x14, this._0x36, this._0x16),
                        this._0x11.loadMapAssets(this._0x18.mapName),
                        this._0x18.renderMap(this._0x3.renderer, this._0x36),
                        this._0x19.onMapLoad(this._0x18),
                        this._0x20.onMapLoad(this._0x18),
                        this._0x16.onMapLoad(this._0x18),
                        this._0x30.onMapLoad(this._0x18, this._0x14),
                        this._0x18.perkMode) {
                            const r = this._0x6.get("perkModeRole");
                            this._0x30.setRoleMenuOptions(r, this._0x18.getMapDef().gameMode.perkModeRoles),
                            this._0x30.setRoleMenuActive(!0)
                        } else
                            this._0x30.setRoleMenuActive(!1);
                        break
                    }
                case ne.Update:
                    {
                        const i = new Er;
                        i.deserialize(t, this._0x34),
                        this._0x2 = !0,
                        this._0x78(i);
                        break
                    }
                case ne.Kill:
                    {
                        const i = new Ar;
                        i.deserialize(t);
                        const r = i.itemSourceType || i.mapSourceType
                            , a = this._0x19.getPlayerInfo(this._0x45).teamId
                            , l = i.downed && !i.killed || i.damageType == R.DamageType.Gas || i.damageType == R.DamageType.Bleeding || i.damageType == R.DamageType.Airdrop
                            , s = this._0x19.getPlayerInfo(i.targetId)
                            , m = this._0x19.getPlayerInfo(i.killCreditId)
                            , d = l ? m : this._0x19.getPlayerInfo(i.killerId);
                        let h = this._0x19.getPlayerName(s.playerId, this._0x45, !0)
                            , p = this._0x19.getPlayerName(m.playerId, this._0x45, !0)
                            , w = this._0x19.getPlayerName(d.playerId, this._0x45, !0);
                        if (h = X.htmlEscape(h),
                        p = X.htmlEscape(p),
                        w = X.htmlEscape(w),
                        i.killCreditId == this._0x45) {
                            const x = i.killerId == this._0x45
                                , y = i.killerId == i.targetId || i.killCreditId == i.targetId
                                , P = this._0x31.getKillText(p, h, x, i.downed, i.killed, y, r, i.damageType, this._0x39)
                                , C = i.killed && !y ? this._0x31.getKillCountText(i.killerKills) : "";
                            this._0x31.displayKillMessage(P, C)
                        } else if (i.targetId == this._0x45 && i.downed && !i.killed) {
                            const x = this._0x31.getDownedText(p, h, r, i.damageType, this._0x39);
                            this._0x31.displayKillMessage(x, "")
                        }
                        i.killCreditId == this._0x44 && i.killed && this._0x30.setLocalKills(i.killerKills);
                        const f = this._0x31.getKillFeedText(h, d.teamId ? w : "", r, i.damageType, i.downed && !i.killed)
                            , S = this._0x31.getKillFeedColor(a, s.teamId, m.teamId, this._0x18.factionMode);
                        this._0x31.addKillFeedMessage(f, S),
                        i.killed && this._0x19.addDeathEffect(i.targetId, i.killerId, r, this._0x4, this._0x16),
                        i.damageType == R.DamageType.Player && this._0x20.createBulletHit(this._0x19, i.targetId, this._0x4);
                        break
                    }
                case ne.RoleAnnouncement:
                    {
                        const i = new Lr;
                        i.deserialize(t);
                        const r = Oi[i.role];
                        if (!r)
                            break;
                        const a = this._0x19.getPlayerInfo(i.playerId)
                            , l = X.htmlEscape(this._0x19.getPlayerName(i.playerId, this._0x45, !0));
                        if (i.assigned) {
                            if (r.sound?.assign && (i.role == "kill_leader" && this._0x18.getMapDef().gameMode.spookyKillSounds ? this._0x4.playGroup("kill_leader_assigned", {
                                channel: "ui"
                            }) : (i.role == "kill_leader" || !this._0x18.perkMode || this._0x44 == i.playerId) && this._0x4.playSound(r.sound.assign, {
                                channel: "ui"
                            })),
                            this._0x18.perkMode && this._0x44 == i.playerId && this._0x30.setRoleMenuActive(!1),
                            r.killFeed?.assign) {
                                const s = this._0x31.getRoleAssignedKillFeedText(i.role, a.teamId, l)
                                    , m = this._0x31.getRoleKillFeedColor(i.role, a.teamId, this._0x19);
                                this._0x31.addKillFeedMessage(s, m)
                            }
                            if (r.announce && this._0x44 == i.playerId) {
                                const s = this._0x31.getRoleAnnouncementText(i.role, a.teamId);
                                this._0x30.displayAnnouncement(s.toUpperCase())
                            }
                        } else if (i.killed) {
                            if (r.killFeed?.dead) {
                                let s = X.htmlEscape(this._0x19.getPlayerName(i.killerId, this._0x45, !0));
                                i.playerId == i.killerId && (s = "");
                                const m = this._0x31.getRoleKilledKillFeedText(i.role, a.teamId, s)
                                    , d = this._0x31.getRoleKillFeedColor(i.role, a.teamId, this._0x19);
                                this._0x31.addKillFeedMessage(m, d)
                            }
                            r.sound?.dead && (this._0x18.getMapDef().gameMode.spookyKillSounds ? this._0x4.playGroup("kill_leader_dead", {
                                channel: "ui"
                            }) : this._0x4.playSound(r.sound.dead, {
                                channel: "ui"
                            }))
                        }
                        break
                    }
                case ne.PlayerStats:
                    {
                        const i = new Dr;
                        i.deserialize(t),
                        this._0x30.setLocalStats(i.playerStats),
                        this._0x30.showTeamAd(i.playerStats, this._0x31);
                        break
                    }
                case ne.Stats:
                    {
                        t.readString();
                        break
                    }
                case ne.GameOver:
                    {
                        const i = new Pr;
                        i.deserialize(t),
                        this._0x38 = i.gameOver;
                        const r = this._0x19.getPlayerInfo(this._0x44).teamId;
                        for (let a = 0; a < i.playerStats.length; a++) {
                            const l = i.playerStats[a];
                            if (l.playerId == this._0x44) {
                                this._0x30.setLocalStats(l);
                                break
                            }
                        }
                        this._0x30.showStats(i.playerStats, i.teamId, i.teamRank, i.winningTeamId, i.gameOver, r, this.teamMode, this._0x39, this._0x19, this._0x4, this._0x18, this._0x31),
                        r == i.winningTeamId && (this.victoryMusic = this._0x4.playSound("menu_music", {
                            channel: "music",
                            delay: 1300,
                            forceStart: !0
                        })),
                        this._0x13.hideAll();
                        break
                    }
                case ne.Pickup:
                    {
                        const i = new Cr;
                        if (i.deserialize(t),
                        i.type == Me.Success && i.item) {
                            this._0x46.playItemPickupSound(i.item, this._0x4);
                            const r = B[i.item];
                            r && r.type == "xp" && this._0x31.addRareLootMessage(i.item, !0)
                        } else
                            this._0x31.displayPickupMessage(i.type);
                        break
                    }
                case ne.UpdatePass:
                    {
                        new Tr().deserialize(t),
                        this._0x0 = !0,
                        this._0x1 = 0;
                        break
                    }
                case ne.AliveCounts:
                    {
                        const i = new Mr;
                        i.deserialize(t),
                        i.teamAliveCounts.length == 1 ? this._0x30.updatePlayersAlive(i.teamAliveCounts[0]) : i.teamAliveCounts.length >= 2 && (this._0x30.updatePlayersAliveRed(i.teamAliveCounts[0]),
                        this._0x30.updatePlayersAliveBlue(i.teamAliveCounts[1]));
                        break
                    }
                case ne.Disconnect:
                    {
                        const i = new Ir;
                        i.deserialize(t),
                        this._0x37 = i.reason
                    }
                }
            }
            _0x51(e, t, i) {
                const r = i || 128
                    , a = new Wt(new ArrayBuffer(r));
                a.serializeMsg(e, t),
                this._0x84(a)
            }
            _0x84(e) {
                if (this._0x12 && this._0x12.readyState == this._0x12.OPEN)
                    try {
                        this._0x12.send(e.getBuffer())
                    } catch (t) {
                        console.error("sendMessageException", t),
                        this._0x12.close()
                    }
            }
        }
        const Cs = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];
        function _i(u) {
            let e = 0;
            for (let t = 0; t < u.length; t++) {
                const i = u[t];
                e = (Cs[(e ^ i) & 255] ^ e >> 8) & 65535
            }
            return e
        }
        function Q(u, e) {
            return {
                name: u,
                defaultValue: e
            }
        }
        function oe(u) {
            return new Ze(ke.Key,u)
        }
        function ki(u) {
            return new Ze(ke.MouseButton,u)
        }
        function vi(u) {
            return new Ze(ke.MouseWheel,u)
        }
        const Ue = {
            [A.MoveLeft]: Q("Move Left", oe($.A)),
            [A.MoveRight]: Q("Move Right", oe($.D)),
            [A.MoveUp]: Q("Move Up", oe($.W)),
            [A.MoveDown]: Q("Move Down", oe($.S)),
            [A.Fire]: Q("Fire", ki(Tt.Left)),
            [A.Reload]: Q("Reload", oe($.R)),
            [A.Cancel]: Q("Cancel", oe($.X)),
            [A.Interact]: Q("Interact", oe($.F)),
            [A.Revive]: Q("Revive", null),
            [A.Use]: Q("Open/Use", null),
            [A.Loot]: Q("Loot", null),
            [A.EquipPrimary]: Q("Equip Primary", oe($.One)),
            [A.EquipSecondary]: Q("Equip Secondary", oe($.Two)),
            [A.EquipMelee]: Q("Equip Melee", oe($.Three)),
            [A.EquipThrowable]: Q("Equip Throwable", oe($.Four)),
            [A.EquipNextWeap]: Q("Equip Next Weapon", vi(Ct.Down)),
            [A.EquipPrevWeap]: Q("Equip Previous Weapon", vi(Ct.Up)),
            [A.EquipLastWeap]: Q("Equip Last Weapon", oe($.Q)),
            [A.StowWeapons]: Q("Stow Weapons", oe($.E)),
            [A.EquipPrevScope]: Q("Equip Previous Scope", null),
            [A.EquipNextScope]: Q("Equip Next Scope", null),
            [A.UseBandage]: Q("Use Bandage", oe($.Seven)),
            [A.UseHealthKit]: Q("Use Med Kit", oe($.Eight)),
            [A.UseSoda]: Q("Use Soda", oe($.Nine)),
            [A.UsePainkiller]: Q("Use Pills", oe($.Zero)),
            [A.SwapWeapSlots]: Q("Switch Gun Slots", oe($.T)),
            [A.ToggleMap]: Q("Toggle Map", oe($.M)),
            [A.CycleUIMode]: Q("Toggle Minimap", oe($.V)),
            [A.EmoteMenu]: Q("Emote Menu", ki(Tt.Right)),
            [A.TeamPingMenu]: Q("Team Ping Hold", oe($.C)),
            [A.EquipOtherGun]: Q("Equip Other Gun", null),
            [A.Fullscreen]: Q("Full Screen", oe($.L)),
            [A.HideUI]: Q("Hide UI", null),
            [A.TeamPingSingle]: Q("Team Ping Menu", null)
        };
        class Ps {
            constructor(e, t) {
                this.input = e,
                this.config = t,
                this.input = e,
                this.config = t,
                this.loadBinds()
            }
            binds = [];
            boundKeys = {};
            menuHovered = !1;
            toArray() {
                const e = new ArrayBuffer(this.binds.length * 2 + 1)
                    , t = new Gt.BitStream(e);
                t.writeUint8(1);
                for (let l = 0; l < this.binds.length; l++) {
                    const s = this.binds[l]
                        , m = s ? s.type : 0
                        , d = s ? s.code : 0;
                    t.writeBits(m & 3, 2),
                    t.writeUint8(d & 255)
                }
                const i = new Uint8Array(e,0,t.byteIndex)
                    , r = _i(i)
                    , a = new Uint8Array(i.length + 2);
                return a.set(i),
                a[a.length - 2] = r >> 8 & 255,
                a[a.length - 1] = r & 255,
                a
            }
            fromArray(e) {
                let t = new Uint8Array(e);
                if (!t || t.length < 3)
                    return !1;
                const i = t[t.length - 2] << 8 | t[t.length - 1];
                if (t = t.slice(0, t.length - 2),
                _i(t) != i)
                    return !1;
                const r = new ArrayBuffer(t.length)
                    , a = new Uint8Array(r);
                for (let m = 0; m < t.length; m++)
                    a[m] = t[m];
                const l = new Gt.BitStream(r)
                    , s = l.readUint8();
                this.clearAllBinds();
                for (let m = 0; l.length - l.index >= 10; ) {
                    const d = m++
                        , h = l.readBits(2)
                        , p = l.readUint8();
                    d >= 0 && d < A.Count && h != ke.None && this.setBind(d, h != 0 ? new Ze(h,p) : null)
                }
                return s < 1 && (this.upgradeBinds(s),
                this.saveBinds()),
                !0
            }
            toBase64() {
                return Ut.fromByteArray(this.toArray())
            }
            fromBase64(e) {
                let t = !1;
                try {
                    t = this.fromArray(Ut.toByteArray(e))
                } catch (i) {
                    console.error("Error", i)
                }
                return t
            }
            saveBinds() {
                this.config.set("binds", this.toBase64())
            }
            loadBinds() {
                this.fromBase64(this.config.get("binds") || "") || (this.loadDefaultBinds(),
                this.saveBinds())
            }
            upgradeBinds(e) {
                const t = [];
                for (let i = 0; i < t.length; i++) {
                    const r = t[i]
                        , a = Ue[r].defaultValue;
                    for (let l = 0; l < this.binds.length && !this.binds[l]?.equals(a); l++)
                        ;
                    this.setBind(r, a)
                }
            }
            clearAllBinds() {
                for (let e = 0; e < A.Count; e++)
                    this.binds[e] = null;
                this.boundKeys = {}
            }
            setBind(e, t) {
                if (t)
                    for (let r = 0; r < this.binds.length; r++)
                        this.binds[r]?.equals(t) && (this.binds[r] = null);
                const i = this.binds[e];
                i && i.type == ke.Key && (this.boundKeys[i.code] = null),
                this.binds[e] = t,
                t && t.type == ke.Key && (this.boundKeys[t.code] = !0)
            }
            getBind(e) {
                return this.binds[e]
            }
            preventMenuBind(e) {
                return e && this.menuHovered && (e.type == 2 || e.type == 3)
            }
            isKeyBound(e) {
                return this.boundKeys[e]
            }
            isBindPressed(e) {
                const t = this.binds[e];
                return !this.preventMenuBind(t) && t && this.input.isInputValuePressed(t)
            }
            isBindReleased(e) {
                const t = this.binds[e];
                return !this.preventMenuBind(t) && t && this.input.isInputValueReleased(t)
            }
            isBindDown(e) {
                const t = this.binds[e];
                return !this.preventMenuBind(t) && t && this.input.isInputValueDown(t)
            }
            loadDefaultBinds() {
                this.clearAllBinds();
                const e = Object.keys(Ue);
                for (let t = 0; t < e.length; t++) {
                    const i = e[t]
                        , r = Ue[i];
                    this.setBind(parseInt(i), r.defaultValue)
                }
            }
        }
        class Ds {
            constructor(e, t) {
                this.input = e,
                this.inputBinds = t,
                this.input = e,
                this.inputBinds = t,
                c(".js-btn-keybind-restore").on("click", () => {
                    this.inputBinds.loadDefaultBinds(),
                    this.inputBinds.saveBinds(),
                    this.refresh()
                }
                )
            }
            cancelBind() {
                this.input.captureNextInput(null)
            }
            refresh() {
                const e = Object.keys(Ue)
                    , t = this.inputBinds.binds
                    , i = c(".js-keybind-list");
                i.empty();
                for (let r = 0; r < e.length; r++) {
                    const a = e[r]
                        , l = Ue[a]
                        , s = t[a]
                        , m = c("<a/>", {
                        class: "btn-game-menu btn-darken btn-keybind-desc",
                        text: l.name
                    })
                        , d = c("<div/>", {
                        class: "btn-keybind-display",
                        text: s ? s.toString() : ""
                    });
                    m.on("click", h => {
                        const p = c(h.target);
                        p.addClass("btn-keybind-desc-selected"),
                        this.input.captureNextInput( (w, f) => {
                            w.preventDefault(),
                            w.stopPropagation();
                            const S = [$.Control, $.Shift, $.Alt, $.Windows, $.ContextMenu, $.F1, $.F2, $.F3, $.F4, $.F5, $.F6, $.F7, $.F8, $.F9, $.F10, $.F11, $.F12];
                            if (f.type == ke.Key && S.includes(f.code))
                                return !1;
                            if (p.removeClass("btn-keybind-desc-selected"),
                            !f.equals(oe($.Escape))) {
                                let x = f;
                                f.equals(oe($.Backspace)) && (x = null),
                                this.inputBinds.setBind(parseInt(a), x),
                                this.inputBinds.saveBinds(),
                                this.refresh()
                            }
                            return !0
                        }
                        )
                    }
                    ),
                    i.append(c("<div/>", {
                        class: "ui-keybind-container"
                    }).append(m).append(d))
                }
                c("#keybind-link").html(this.inputBinds.toBase64())
            }
        }
        var yt = [{
            region: "na",
            zone: "na",
            url: "usr.mathsiscoolfun.com:8001",
            https: !0
        }, {
            region: "eu",
            zone: "eu",
            url: "eur.mathsiscoolfun.com:8001",
            https: !0
        }, {
            region: "asia",
            zone: "asia",
            url: "asr.mathsiscoolfun.com:8001",
            https: !0
        }, {
            region: "sa",
            zone: "sa",
            url: "sa.mathsiscoolfun.com:8001",
            https: !0
        }];
        class Ls {
            ptcDataBuf = new ArrayBuffer(1);
            tests = yt.map(e => ({
                region: e.region,
                zone: e.zone,
                url: e.url,
                https: e.https,
                ping: 9999,
                active: !1,
                complete: !1,
                ws: null,
                sendDelay: 0,
                sendTime: 0,
                sendCount: 0,
                recvCount: 0,
                recvCountMax: 6,
                retryCount: 0,
                retryCountMax: 1
            }));
            testsStarted = 0;
            testsCompleted = 0;
            printSummary = !0;
            start(e) {
                if ("WebSocket"in window) {
                    let t = 0;
                    for (let i = 0; i < this.tests.length; i++) {
                        const r = this.tests[i];
                        !r.active && !r.complete && e.includes(r.region) && (r.active = !0,
                        this.testsStarted++,
                        t++)
                    }
                    t > 0 && (this.printSummary = !0)
                }
            }
            update(e) {
                const t = r => {
                    r.active = !1,
                    r.complete = !0,
                    this.testsCompleted++
                }
                    , i = function(r) {
                    r.ws && (r.ws.close(),
                    r.ws = null),
                    r.complete || r.retryCount++ >= r.retryCountMax && t(r)
                };
                for (let r = 0; r < this.tests.length; r++) {
                    const a = this.tests[r];
                    if (!a.active)
                        return "continue";
                    if (!a.ws) {
                        const l = new WebSocket(`ws${a.https ? "s" : ""}://${a.url}/ptc`);
                        l.binaryType = "arraybuffer",
                        l.onopen = function() {}
                        ,
                        l.onmessage = function(s) {
                            const m = (Date.now() - a.sendTime) / 1e3;
                            a.ping = Math.min(a.ping, m),
                            a.recvCount++,
                            a.sendDelay = .125
                        }
                        ,
                        l.onerror = function(s) {
                            i(a)
                        }
                        ,
                        l.onclose = function() {
                            i(a)
                        }
                        ,
                        a.ws = l,
                        a.sendDelay = 0,
                        a.sendCount = 0,
                        a.recvCount = 0
                    }
                    if (a.ws.readyState == a.ws.OPEN) {
                        if (a.sendDelay -= e,
                        a.sendCount == a.recvCount && a.sendDelay < 0) {
                            a.sendTime = Date.now(),
                            a.sendCount++;
                            try {
                                a.ws.send(this.ptcDataBuf)
                            } catch {
                                a.ws.close()
                            }
                        }
                        a.recvCount >= a.recvCountMax && (t(a),
                        a.ws.close())
                    }
                }
                if (this.printSummary && this.isComplete()) {
                    const r = this.tests.sort( (a, l) => a.ping - l.ping);
                    console.log("Ping test results"),
                    console.log("----------------------------------------");
                    for (let a = 0; a < r.length; a++) {
                        const l = r[a];
                        console.log("region", l.region, "zone  ", l.zone, "ping  ", l.ping)
                    }
                    this.printSummary = !1
                }
            }
            isComplete() {
                return this.testsCompleted == this.testsStarted && this.testsStarted > 0
            }
            getRegionList() {
                const e = [];
                for (let t = 0; t < yt.length; t++) {
                    const i = yt[t].region;
                    e.includes(i) || e.push(i)
                }
                return e
            }
            getRegion() {
                return this.tests.sort( (e, t) => e.ping - t.ping),
                this.tests[0].region
            }
            getZones(e) {
                const t = this.tests.sort( (r, a) => r.ping - a.ping)
                    , i = [];
                for (let r = 0; r < t.length; r++) {
                    const a = t[r];
                    a.region == e && i.push(a.zone)
                }
                return i
            }
        }
        const As = JSON.parse('[{"meta":{"image":"loadout-0-100-71653988.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"part-aura-circle-01.img":{"frame":{"x":508,"y":2,"w":284,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":284,"h":282},"sourceSize":{"w":288,"h":288}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":502,"h":502},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":502,"h":502},"sourceSize":{"w":512,"h":512}},"part-shell-05.img":{"frame":{"x":2,"y":508,"w":63,"h":260},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":260},"sourceSize":{"w":63,"h":260}},"emote-circle-outer.img":{"frame":{"x":69,"y":508,"w":252,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":252,"h":254},"sourceSize":{"w":256,"h":256}},"part-smoke-03.img":{"frame":{"x":325,"y":508,"w":255,"h":251},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":255,"h":251},"sourceSize":{"w":256,"h":256}},"part-smoke-02.img":{"frame":{"x":796,"y":2,"w":256,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":256,"h":250},"sourceSize":{"w":256,"h":256}},"gun-scarssr-01.img":{"frame":{"x":796,"y":256,"w":62,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":62,"h":250},"sourceSize":{"w":60,"h":248}},"gun-potato-cannon-01.img":{"frame":{"x":862,"y":256,"w":58,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":58,"h":250},"sourceSize":{"w":56,"h":248}},"gun-awc-02.img":{"frame":{"x":924,"y":256,"w":47,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":47,"h":228},"sourceSize":{"w":60,"h":236}},"gun-awc-01.img":{"frame":{"x":975,"y":256,"w":47,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":47,"h":228},"sourceSize":{"w":60,"h":236}},"gun-m249-top-01.img":{"frame":{"x":796,"y":510,"w":38,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":38,"h":216},"sourceSize":{"w":56,"h":232}},"gun-garand-01.img":{"frame":{"x":838,"y":510,"w":34,"h":214},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":19,"w":34,"h":214},"sourceSize":{"w":48,"h":232}},"gun-potato-smg-01.img":{"frame":{"x":876,"y":510,"w":101,"h":212},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":37,"w":101,"h":212},"sourceSize":{"w":176,"h":248}},"gun-usas-01.img":{"frame":{"x":981,"y":510,"w":43,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":23,"w":43,"h":210},"sourceSize":{"w":56,"h":232}},"gun-vss-01.img":{"frame":{"x":508,"y":288,"w":40,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":-1,"w":40,"h":210},"sourceSize":{"w":48,"h":208}},"pad.img":{"frame":{"x":552,"y":288,"w":208,"h":208},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":208},"sourceSize":{"w":208,"h":208}},"gun-scorpion-01.img":{"frame":{"x":584,"y":508,"w":41,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":41,"h":200},"sourceSize":{"w":48,"h":208}},"gun-pkp-top-01.img":{"frame":{"x":629,"y":508,"w":36,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":39,"w":36,"h":194},"sourceSize":{"w":56,"h":232}},"gun-grozas-01.img":{"frame":{"x":669,"y":508,"w":40,"h":191},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":18,"w":40,"h":191},"sourceSize":{"w":48,"h":208}},"part-shell-02.img":{"frame":{"x":713,"y":508,"w":63,"h":190},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":190},"sourceSize":{"w":63,"h":190}},"gun-m4a1-01.img":{"frame":{"x":2,"y":772,"w":44,"h":189},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":44,"h":189},"sourceSize":{"w":48,"h":196}},"gun-long-01.img":{"frame":{"x":50,"y":772,"w":31,"h":186},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":31,"h":186},"sourceSize":{"w":32,"h":188}},"part-shell-03.img":{"frame":{"x":85,"y":772,"w":63,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":180},"sourceSize":{"w":63,"h":180}},"player-helmet-forest.img":{"frame":{"x":152,"y":772,"w":150,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":150,"h":178},"sourceSize":{"w":176,"h":176}},"gun-saiga-01.img":{"frame":{"x":306,"y":772,"w":40,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":40,"h":174},"sourceSize":{"w":48,"h":196}},"player-wading-01.img":{"frame":{"x":350,"y":772,"w":170,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":170,"h":170},"sourceSize":{"w":172,"h":172}},"gun-famas-01.img":{"frame":{"x":524,"y":772,"w":38,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":41,"w":38,"h":168},"sourceSize":{"w":48,"h":208}},"part-shell-04.img":{"frame":{"x":566,"y":772,"w":55,"h":164},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":55,"h":164},"sourceSize":{"w":55,"h":164}},"loot-melee-machete-taiga.img":{"frame":{"x":625,"y":772,"w":44,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":3,"w":44,"h":164},"sourceSize":{"w":168,"h":168}},"part-airdrop-03.img":{"frame":{"x":673,"y":772,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"part-airdrop-02x.img":{"frame":{"x":837,"y":772,"w":38,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-02.img":{"frame":{"x":879,"y":772,"w":38,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"proj-bomb-iron-01.img":{"frame":{"x":921,"y":772,"w":66,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":2,"w":66,"h":157},"sourceSize":{"w":160,"h":160}},"proj-smoke-nopin.img":{"frame":{"x":1056,"y":2,"w":152,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":152,"h":155},"sourceSize":{"w":160,"h":160}},"proj-smoke-pin.img":{"frame":{"x":1056,"y":161,"w":152,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":152,"h":155},"sourceSize":{"w":160,"h":160}},"loot-melee-bonesaw-healer.img":{"frame":{"x":1056,"y":320,"w":60,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":10,"w":60,"h":155},"sourceSize":{"w":168,"h":168}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":1120,"y":320,"w":54,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":81,"y":22,"w":54,"h":155},"sourceSize":{"w":192,"h":192}},"loot-melee-kukri-sniper.img":{"frame":{"x":1056,"y":479,"w":40,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":3,"w":40,"h":155},"sourceSize":{"w":160,"h":160}},"loot-melee-kukri-trad.img":{"frame":{"x":1100,"y":479,"w":40,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":3,"w":40,"h":155},"sourceSize":{"w":160,"h":160}},"loot-melee-spade-assault.img":{"frame":{"x":1144,"y":479,"w":54,"h":150},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":53,"y":5,"w":54,"h":150},"sourceSize":{"w":160,"h":160}},"gun-groza-01.img":{"frame":{"x":1056,"y":638,"w":40,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":61,"w":40,"h":148},"sourceSize":{"w":48,"h":208}},"player-circle-base-01.img":{"frame":{"x":1056,"y":790,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":146,"h":146},"sourceSize":{"w":148,"h":148}},"player-circle-base-02.img":{"frame":{"x":2,"y":965,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":146,"h":146},"sourceSize":{"w":148,"h":148}},"player-armor-base-01.img":{"frame":{"x":152,"y":965,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":146,"h":146},"sourceSize":{"w":148,"h":148}},"player-helmet-moon.img":{"frame":{"x":302,"y":965,"w":120,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":15,"w":120,"h":146},"sourceSize":{"w":176,"h":176}},"proj-smoke-nopin-nolever.img":{"frame":{"x":1100,"y":638,"w":76,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":7,"w":76,"h":146},"sourceSize":{"w":160,"h":160}},"loot-circle-outer-05.img":{"frame":{"x":426,"y":965,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"ping-border.img":{"frame":{"x":574,"y":965,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"loot-circle-outer-02.img":{"frame":{"x":722,"y":965,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-01.img":{"frame":{"x":870,"y":965,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"proj-mirv-nopin.img":{"frame":{"x":1018,"y":965,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-pin.img":{"frame":{"x":1212,"y":2,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-nopin-nolever.img":{"frame":{"x":1212,"y":150,"w":76,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":76,"h":144},"sourceSize":{"w":128,"h":148}},"gun-bugle-01.img":{"frame":{"x":1212,"y":298,"w":64,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":89,"w":64,"h":143},"sourceSize":{"w":96,"h":232}},"player-star.img":{"frame":{"x":2,"y":1115,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"star.img":{"frame":{"x":154,"y":1115,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"player-ripple-01.img":{"frame":{"x":306,"y":1115,"w":142,"h":142},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":142,"h":142},"sourceSize":{"w":142,"h":142}},"part-plank-01.img":{"frame":{"x":452,"y":1115,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-panel-01.img":{"frame":{"x":598,"y":1115,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-woodchip-01.img":{"frame":{"x":744,"y":1115,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"player-the-hunted.img":{"frame":{"x":889,"y":1115,"w":140,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":140,"h":138},"sourceSize":{"w":144,"h":144}},"part-book-01.img":{"frame":{"x":1033,"y":1115,"w":104,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":3,"w":104,"h":138},"sourceSize":{"w":144,"h":144}},"loot-melee-crowbar-scout.img":{"frame":{"x":1212,"y":445,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-crowbar-recon.img":{"frame":{"x":1253,"y":445,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"player-helmet-last-man-01.img":{"frame":{"x":1141,"y":1115,"w":139,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":20,"w":139,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-02.img":{"frame":{"x":1318,"y":2,"w":139,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":20,"w":139,"h":136},"sourceSize":{"w":176,"h":176}},"player-base-02.img":{"frame":{"x":1318,"y":142,"w":136,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":136,"h":136},"sourceSize":{"w":140,"h":140}},"player-base-01.img":{"frame":{"x":1318,"y":282,"w":136,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":136,"h":136},"sourceSize":{"w":140,"h":140}},"part-pot-01.img":{"frame":{"x":1318,"y":422,"w":94,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":4,"w":94,"h":136},"sourceSize":{"w":144,"h":144}},"player-base-outfitParmaPrestige.img":{"frame":{"x":1318,"y":562,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":134,"h":134},"sourceSize":{"w":144,"h":144}},"player-base-outfitLumber.img":{"frame":{"x":1318,"y":700,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitWheat.img":{"frame":{"x":1318,"y":838,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitHeaven.img":{"frame":{"x":1318,"y":976,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitTurkey.img":{"frame":{"x":1318,"y":1114,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitDC.img":{"frame":{"x":2,"y":1261,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitSpetsnaz.img":{"frame":{"x":140,"y":1261,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"loot-circle-outer-04.img":{"frame":{"x":278,"y":1261,"w":140,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":140,"h":133},"sourceSize":{"w":146,"h":146}},"part-shell-01.img":{"frame":{"x":1212,"y":587,"w":56,"h":133},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":133},"sourceSize":{"w":56,"h":133}},"player-king-woods.img":{"frame":{"x":422,"y":1261,"w":140,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":140,"h":132},"sourceSize":{"w":148,"h":148}},"part-plate-01.img":{"frame":{"x":566,"y":1261,"w":138,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":138,"h":132},"sourceSize":{"w":144,"h":144}},"loot-melee-warhammer-tank.img":{"frame":{"x":708,"y":1261,"w":255,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":18,"w":255,"h":130},"sourceSize":{"w":264,"h":152}},"part-splat-02.img":{"frame":{"x":967,"y":1261,"w":123,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":8,"w":123,"h":130},"sourceSize":{"w":144,"h":144}},"gun-mp220-01.img":{"frame":{"x":1416,"y":422,"w":40,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":-1,"w":40,"h":130},"sourceSize":{"w":40,"h":128}},"flag-colombia.img":{"frame":{"x":1094,"y":1261,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-croatia.img":{"frame":{"x":1226,"y":1261,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-czech-republic.img":{"frame":{"x":1461,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-denmark.img":{"frame":{"x":1461,"y":134,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-dominican-republic.img":{"frame":{"x":1461,"y":266,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ecuador.img":{"frame":{"x":1461,"y":398,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-egypt.img":{"frame":{"x":1461,"y":530,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-estonia.img":{"frame":{"x":1461,"y":662,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-finland.img":{"frame":{"x":1461,"y":794,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-france.img":{"frame":{"x":1461,"y":926,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-georgia.img":{"frame":{"x":1461,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-germany.img":{"frame":{"x":1461,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-greece.img":{"frame":{"x":2,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-guatemala.img":{"frame":{"x":134,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-honduras.img":{"frame":{"x":266,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-00.img":{"frame":{"x":398,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hungary.img":{"frame":{"x":530,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-india.img":{"frame":{"x":662,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-indonesia.img":{"frame":{"x":794,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-israel.img":{"frame":{"x":926,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-italy.img":{"frame":{"x":1058,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-japan.img":{"frame":{"x":1190,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-kazakhstan.img":{"frame":{"x":1322,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-latvia.img":{"frame":{"x":1454,"y":1399,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-lithuania.img":{"frame":{"x":1593,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-malaysia.img":{"frame":{"x":1593,"y":134,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-mexico.img":{"frame":{"x":1593,"y":266,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-moldova.img":{"frame":{"x":1593,"y":398,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-morocco.img":{"frame":{"x":1593,"y":530,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-netherlands.img":{"frame":{"x":1593,"y":662,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-new-zealand.img":{"frame":{"x":1593,"y":794,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-norway.img":{"frame":{"x":1593,"y":926,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-peru.img":{"frame":{"x":1593,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-philippines.img":{"frame":{"x":1593,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-portugal.img":{"frame":{"x":1593,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-republic-of-poland.img":{"frame":{"x":2,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-romania.img":{"frame":{"x":134,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-russia.img":{"frame":{"x":266,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-serbia.img":{"frame":{"x":398,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-singapore.img":{"frame":{"x":530,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-slovakia.img":{"frame":{"x":662,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-south-korea.img":{"frame":{"x":794,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-spain.img":{"frame":{"x":926,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-sweden.img":{"frame":{"x":1058,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-switzerland.img":{"frame":{"x":1190,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-taiwan.img":{"frame":{"x":1322,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-thailand.img":{"frame":{"x":1454,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-trinidad-and-tobago.img":{"frame":{"x":1586,"y":1531,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-turkey.img":{"frame":{"x":1725,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ukraine.img":{"frame":{"x":1725,"y":134,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-arab-emirates.img":{"frame":{"x":1725,"y":266,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-kingdom.img":{"frame":{"x":1725,"y":398,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-states-of-america.img":{"frame":{"x":1725,"y":530,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-uruguay.img":{"frame":{"x":1725,"y":662,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-venezuela.img":{"frame":{"x":1725,"y":794,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-vietnam.img":{"frame":{"x":1725,"y":926,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-02.img":{"frame":{"x":1725,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hong-kong.img":{"frame":{"x":1725,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-01.img":{"frame":{"x":1725,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"face-angel-treat.img":{"frame":{"x":1725,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-03.img":{"frame":{"x":2,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loadout-crosshair.img":{"frame":{"x":134,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-ammo-box.img":{"frame":{"x":266,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-albania.img":{"frame":{"x":398,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-04.img":{"frame":{"x":530,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-algeria.img":{"frame":{"x":662,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-argentina.img":{"frame":{"x":794,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle-dual.img":{"frame":{"x":926,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-australia.img":{"frame":{"x":1058,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-austria.img":{"frame":{"x":1190,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-azerbaijan.img":{"frame":{"x":1322,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belarus.img":{"frame":{"x":1454,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r-dual.img":{"frame":{"x":1586,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belgium.img":{"frame":{"x":1718,"y":1663,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bolivia.img":{"frame":{"x":1857,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":1857,"y":134,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-brazil.img":{"frame":{"x":1857,"y":266,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-canada.img":{"frame":{"x":1857,"y":398,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-chile.img":{"frame":{"x":1857,"y":530,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-china.img":{"frame":{"x":1857,"y":662,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"ping-map-coming.img":{"frame":{"x":1857,"y":794,"w":112,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":128},"sourceSize":{"w":128,"h":256}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":1857,"y":926,"w":110,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":110,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r.img":{"frame":{"x":1857,"y":1058,"w":100,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":0,"w":100,"h":128},"sourceSize":{"w":128,"h":128}},"player-helmet-potato.img":{"frame":{"x":1857,"y":1190,"w":99,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":99,"h":128},"sourceSize":{"w":176,"h":176}},"player-helmet-medic.img":{"frame":{"x":1857,"y":1322,"w":97,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":97,"h":128},"sourceSize":{"w":176,"h":176}},"player-helmet-lieutenant.img":{"frame":{"x":1857,"y":1454,"w":97,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":97,"h":128},"sourceSize":{"w":176,"h":176}},"player-helmet-leader.img":{"frame":{"x":1857,"y":1586,"w":97,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":97,"h":128},"sourceSize":{"w":176,"h":176}},"indicator.img":{"frame":{"x":1212,"y":724,"w":90,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":0,"w":90,"h":128},"sourceSize":{"w":128,"h":128}},"part-airdrop-04.img":{"frame":{"x":1212,"y":856,"w":54,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"ping-map-danger.img":{"frame":{"x":1272,"y":587,"w":40,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":40,"h":128},"sourceSize":{"w":128,"h":128}},"loot-perk-aoe-heal.img":{"frame":{"x":2,"y":1795,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"loot-circle-outer-03.img":{"frame":{"x":133,"y":1795,"w":146,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":146,"h":126},"sourceSize":{"w":146,"h":146}},"ping-team-danger.img":{"frame":{"x":283,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"face-poo.img":{"frame":{"x":413,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-unlock.img":{"frame":{"x":543,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airdrop.img":{"frame":{"x":673,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-help.img":{"frame":{"x":803,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-coming.img":{"frame":{"x":933,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airstrike.img":{"frame":{"x":1063,"y":1795,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"face-imp-trick.img":{"frame":{"x":1193,"y":1795,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-thinking.img":{"frame":{"x":1321,"y":1795,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-grozas.img":{"frame":{"x":1449,"y":1795,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38-dual.img":{"frame":{"x":1575,"y":1795,"w":121,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":121,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45-dual.img":{"frame":{"x":1700,"y":1795,"w":120,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":120,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-mkg45.img":{"frame":{"x":1824,"y":1795,"w":116,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m4a1.img":{"frame":{"x":1989,"y":2,"w":116,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1014.img":{"frame":{"x":1989,"y":132,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-svd.img":{"frame":{"x":1989,"y":262,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-vss.img":{"frame":{"x":1989,"y":392,"w":108,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":108,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38-dual.img":{"frame":{"x":1989,"y":522,"w":105,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":1,"w":105,"h":126},"sourceSize":{"w":128,"h":128}},"player-helmet-grenadier.img":{"frame":{"x":1989,"y":652,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-bugler.img":{"frame":{"x":1989,"y":782,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-recon.img":{"frame":{"x":1989,"y":912,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-visor-scout.img":{"frame":{"x":1989,"y":1042,"w":77,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":76,"y":25,"w":77,"h":126},"sourceSize":{"w":176,"h":176}},"gun-deagle-01.img":{"frame":{"x":1989,"y":1172,"w":42,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":107,"w":42,"h":126},"sourceSize":{"w":56,"h":232}},"gun-med-01.img":{"frame":{"x":2070,"y":1042,"w":30,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":30,"h":126},"sourceSize":{"w":32,"h":128}},"proj-strobe-unarmed.img":{"frame":{"x":2,"y":1926,"w":147,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":25,"w":147,"h":125},"sourceSize":{"w":160,"h":160}},"star-red.img":{"frame":{"x":153,"y":1926,"w":132,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":132,"h":125},"sourceSize":{"w":148,"h":148}},"star-blue.img":{"frame":{"x":289,"y":1926,"w":132,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":132,"h":125},"sourceSize":{"w":148,"h":148}},"face-alien.img":{"frame":{"x":425,"y":1926,"w":124,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":125},"sourceSize":{"w":128,"h":128}},"snowflake.img":{"frame":{"x":1989,"y":1302,"w":114,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-dp28.img":{"frame":{"x":1989,"y":1431,"w":114,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":125},"sourceSize":{"w":128,"h":128}},"part-boost-naturalize.img":{"frame":{"x":1989,"y":1560,"w":94,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":2,"w":94,"h":125},"sourceSize":{"w":128,"h":128}},"face-imp.img":{"frame":{"x":553,"y":1926,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":126,"h":124},"sourceSize":{"w":128,"h":128}},"face-heart.img":{"frame":{"x":683,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sob.img":{"frame":{"x":811,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sad.img":{"frame":{"x":939,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-upsidedown.img":{"frame":{"x":1067,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-monocle.img":{"frame":{"x":1195,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-joy.img":{"frame":{"x":1323,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"part-log-01.img":{"frame":{"x":1451,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loadout-emote.img":{"frame":{"x":1579,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sunglass.img":{"frame":{"x":1707,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-happy.img":{"frame":{"x":1835,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-disappoint.img":{"frame":{"x":1963,"y":1926,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-targeting.img":{"frame":{"x":2109,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-bandaged.img":{"frame":{"x":2109,"y":130,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-angry.img":{"frame":{"x":2109,"y":258,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-picasso.img":{"frame":{"x":2109,"y":386,"w":122,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":122,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-splinter.img":{"frame":{"x":2109,"y":514,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"campfire.img":{"frame":{"x":2109,"y":642,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-an94.img":{"frame":{"x":2109,"y":770,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-pkp.img":{"frame":{"x":2109,"y":898,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1a1.img":{"frame":{"x":2109,"y":1026,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scorpion.img":{"frame":{"x":2109,"y":1154,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-smg.img":{"frame":{"x":2109,"y":1282,"w":111,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":111,"h":124},"sourceSize":{"w":128,"h":128}},"reload.img":{"frame":{"x":2109,"y":1410,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"trash.img":{"frame":{"x":2109,"y":1538,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"thumbs-up.img":{"frame":{"x":2109,"y":1666,"w":104,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":104,"h":124},"sourceSize":{"w":128,"h":128}},"bullets.img":{"frame":{"x":2109,"y":1794,"w":86,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":86,"h":124},"sourceSize":{"w":128,"h":128}},"part-splat-01.img":{"frame":{"x":2,"y":2055,"w":126,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":126,"h":123},"sourceSize":{"w":144,"h":144}},"loot-weapon-saiga.img":{"frame":{"x":2109,"y":1922,"w":112,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":112,"h":123},"sourceSize":{"w":128,"h":128}},"tombstone.img":{"frame":{"x":1989,"y":1689,"w":112,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":112,"h":123},"sourceSize":{"w":128,"h":128}},"loot-weapon-m39.img":{"frame":{"x":132,"y":2055,"w":108,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":123},"sourceSize":{"w":128,"h":128}},"police.img":{"frame":{"x":1212,"y":988,"w":100,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":2,"w":100,"h":123},"sourceSize":{"w":128,"h":128}},"loot-perk-gotw.img":{"frame":{"x":244,"y":2055,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-leadership.img":{"frame":{"x":376,"y":2055,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-firepower.img":{"frame":{"x":508,"y":2055,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-bar.img":{"frame":{"x":638,"y":2055,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-scarssr.img":{"frame":{"x":768,"y":2055,"w":125,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":125,"h":122},"sourceSize":{"w":128,"h":128}},"heart.img":{"frame":{"x":897,"y":2055,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"surviv.img":{"frame":{"x":1025,"y":2055,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-hunted.img":{"frame":{"x":1151,"y":2055,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"emote.img":{"frame":{"x":1277,"y":2055,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-cannon.img":{"frame":{"x":1403,"y":2055,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-mk12.img":{"frame":{"x":1529,"y":2055,"w":114,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":114,"h":122},"sourceSize":{"w":128,"h":128}},"cupcake.img":{"frame":{"x":1647,"y":2055,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"candy-corn.img":{"frame":{"x":1759,"y":2055,"w":104,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":122},"sourceSize":{"w":128,"h":128}},"part-heal-tomoe.img":{"frame":{"x":1867,"y":2055,"w":104,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":122},"sourceSize":{"w":128,"h":128}},"snowman.img":{"frame":{"x":1358,"y":1261,"w":96,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":3,"w":96,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-rare-potato.img":{"frame":{"x":1975,"y":2055,"w":90,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":3,"w":90,"h":122},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke.img":{"frame":{"x":1124,"y":965,"w":84,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":84,"h":122},"sourceSize":{"w":128,"h":128}},"ice-cream.img":{"frame":{"x":2035,"y":1172,"w":66,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":31,"y":3,"w":66,"h":122},"sourceSize":{"w":128,"h":128}},"gun-p30l-01.img":{"frame":{"x":2199,"y":1794,"w":33,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":111,"w":33,"h":122},"sourceSize":{"w":56,"h":232}},"loadout-melee.img":{"frame":{"x":2069,"y":2055,"w":123,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":123,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-awc.img":{"frame":{"x":2237,"y":2,"w":122,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":122,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-l86.img":{"frame":{"x":2237,"y":127,"w":118,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-m249.img":{"frame":{"x":2237,"y":252,"w":116,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":116,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-02.img":{"frame":{"x":2237,"y":377,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-01.img":{"frame":{"x":2237,"y":502,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-01.img":{"frame":{"x":2237,"y":627,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-02.img":{"frame":{"x":2237,"y":752,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":2237,"y":877,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":2237,"y":1002,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"chicken-dinner.img":{"frame":{"x":2,"y":2182,"w":128,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":128,"h":120},"sourceSize":{"w":128,"h":128}},"part-splat-03.img":{"frame":{"x":134,"y":2182,"w":123,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":6,"w":123,"h":120},"sourceSize":{"w":144,"h":144}},"loot-weapon-usas.img":{"frame":{"x":2237,"y":1127,"w":122,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":122,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-chambered.img":{"frame":{"x":2237,"y":1251,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"rainbow.img":{"frame":{"x":2237,"y":1375,"w":119,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":119,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-qbb97.img":{"frame":{"x":2237,"y":1499,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-ak.img":{"frame":{"x":2237,"y":1623,"w":102,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":4,"w":102,"h":120},"sourceSize":{"w":128,"h":128}},"egg.img":{"frame":{"x":2237,"y":1747,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45.img":{"frame":{"x":2237,"y":1871,"w":96,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":4,"w":96,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38.img":{"frame":{"x":2237,"y":1995,"w":81,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":4,"w":81,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-02.img":{"frame":{"x":261,"y":2182,"w":76,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":4,"w":76,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911-dual.img":{"frame":{"x":341,"y":2182,"w":128,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1100.img":{"frame":{"x":473,"y":2182,"w":119,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":119,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911.img":{"frame":{"x":596,"y":2182,"w":107,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":5,"w":107,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-hk416.img":{"frame":{"x":707,"y":2182,"w":105,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":4,"w":105,"h":119},"sourceSize":{"w":128,"h":128}},"part-potato-02.img":{"frame":{"x":816,"y":2182,"w":94,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":94,"h":119},"sourceSize":{"w":128,"h":128}},"loot-perk-windwalk.img":{"frame":{"x":914,"y":2182,"w":86,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":86,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-dual.img":{"frame":{"x":1004,"y":2182,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"salt.img":{"frame":{"x":1136,"y":2182,"w":124,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":124,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-sv98.img":{"frame":{"x":1264,"y":2182,"w":121,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":121,"h":118},"sourceSize":{"w":128,"h":128}},"skull.img":{"frame":{"x":1389,"y":2182,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"donut.img":{"frame":{"x":1513,"y":2182,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-kill-icon.img":{"frame":{"x":1637,"y":2182,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"part-feather-01.img":{"frame":{"x":1761,"y":2182,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-perk-fabricate.img":{"frame":{"x":1883,"y":2182,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-stump-01.img":{"frame":{"x":2005,"y":2182,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"part-feather-02.img":{"frame":{"x":2127,"y":2182,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"part-heal-basic.img":{"frame":{"x":2363,"y":2,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-chest-01.img":{"frame":{"x":2363,"y":124,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"mag-glass.img":{"frame":{"x":2363,"y":246,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"part-boost-basic.img":{"frame":{"x":2363,"y":368,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"part-heal-moon.img":{"frame":{"x":2363,"y":490,"w":114,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":114,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-ump9.img":{"frame":{"x":2363,"y":612,"w":114,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":114,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-famas.img":{"frame":{"x":2363,"y":734,"w":112,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":112,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector45.img":{"frame":{"x":2363,"y":856,"w":104,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":5,"w":104,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-04.img":{"frame":{"x":2363,"y":978,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-01.img":{"frame":{"x":2363,"y":1100,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-chest-03.img":{"frame":{"x":2363,"y":1222,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9.img":{"frame":{"x":2363,"y":1344,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-02.img":{"frame":{"x":2363,"y":1466,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-06.img":{"frame":{"x":2363,"y":1588,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-03.img":{"frame":{"x":2363,"y":1710,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-05.img":{"frame":{"x":2363,"y":1832,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-00.img":{"frame":{"x":2363,"y":1954,"w":90,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":5,"w":90,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-02.img":{"frame":{"x":2363,"y":2076,"w":88,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":5,"w":88,"h":118},"sourceSize":{"w":128,"h":128}},"ok.img":{"frame":{"x":2249,"y":2182,"w":84,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":5,"w":84,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-rugged.img":{"frame":{"x":2322,"y":1995,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"crosshair022.img":{"frame":{"x":3033,"y":92,"w":12,"h":8},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":28,"w":12,"h":8},"sourceSize":{"w":64,"h":64}},"proj-strobe-arming.img":{"frame":{"x":2,"y":2306,"w":134,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":27,"w":134,"h":117},"sourceSize":{"w":160,"h":160}},"proj-strobe-armed.img":{"frame":{"x":140,"y":2306,"w":134,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":27,"w":134,"h":117},"sourceSize":{"w":160,"h":160}},"loot-perk-steelskin.img":{"frame":{"x":278,"y":2306,"w":82,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":5,"w":82,"h":117},"sourceSize":{"w":128,"h":128}},"part-heal-heart.img":{"frame":{"x":364,"y":2306,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-mosin.img":{"frame":{"x":486,"y":2306,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-m870.img":{"frame":{"x":608,"y":2306,"w":117,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":117,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-06.img":{"frame":{"x":729,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-04.img":{"frame":{"x":849,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-05.img":{"frame":{"x":969,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-spark-01.img":{"frame":{"x":1089,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-spark-02.img":{"frame":{"x":1209,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"gas.img":{"frame":{"x":1329,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-heal.img":{"frame":{"x":1449,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-03.img":{"frame":{"x":1569,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"target.img":{"frame":{"x":1689,"y":2306,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-boost.img":{"frame":{"x":1809,"y":2306,"w":114,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":114,"h":116},"sourceSize":{"w":128,"h":128}},"flex.img":{"frame":{"x":1927,"y":2306,"w":109,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":109,"h":116},"sourceSize":{"w":128,"h":128}},"loot-medical-bandage.img":{"frame":{"x":2040,"y":2306,"w":106,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":6,"w":106,"h":116},"sourceSize":{"w":128,"h":128}},"acorn.img":{"frame":{"x":2150,"y":2306,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"ghost-base.img":{"frame":{"x":2258,"y":2306,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-scar.img":{"frame":{"x":2366,"y":2306,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"loot-pack-01.img":{"frame":{"x":2485,"y":2,"w":94,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":6,"w":94,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-red.img":{"frame":{"x":2485,"y":122,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-blue.img":{"frame":{"x":2485,"y":242,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun.img":{"frame":{"x":2485,"y":362,"w":82,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":82,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-vintage.img":{"frame":{"x":2485,"y":482,"w":42,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":6,"w":42,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-frontier.img":{"frame":{"x":2531,"y":482,"w":42,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":6,"w":42,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-burnished.img":{"frame":{"x":2485,"y":602,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-rugged.img":{"frame":{"x":2513,"y":602,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"sleepy.img":{"frame":{"x":2,"y":2427,"w":124,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":124,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-bugle.img":{"frame":{"x":130,"y":2427,"w":122,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":7,"w":122,"h":114},"sourceSize":{"w":128,"h":128}},"part-boost-star.img":{"frame":{"x":256,"y":2427,"w":120,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":120,"h":114},"sourceSize":{"w":128,"h":128}},"chick.img":{"frame":{"x":380,"y":2427,"w":114,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":114,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-garand.img":{"frame":{"x":498,"y":2427,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":112,"h":114},"sourceSize":{"w":128,"h":128}},"pumpkin.img":{"frame":{"x":614,"y":2427,"w":106,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":7,"w":106,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle.img":{"frame":{"x":724,"y":2427,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-pack-03.img":{"frame":{"x":832,"y":2427,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-spas12.img":{"frame":{"x":940,"y":2427,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp5.img":{"frame":{"x":1040,"y":2427,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"tap.img":{"frame":{"x":1140,"y":2427,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38.img":{"frame":{"x":2485,"y":722,"w":90,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":7,"w":90,"h":114},"sourceSize":{"w":128,"h":128}},"player-visor-tank.img":{"frame":{"x":2485,"y":840,"w":73,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":84,"y":31,"w":73,"h":114},"sourceSize":{"w":176,"h":176}},"part-boost-shuriken.img":{"frame":{"x":1240,"y":2427,"w":117,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":117,"h":113},"sourceSize":{"w":128,"h":128}},"part-blossom-04.img":{"frame":{"x":1361,"y":2427,"w":115,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":115,"h":113},"sourceSize":{"w":128,"h":128}},"loot-melee-pan-black-side.img":{"frame":{"x":2541,"y":602,"w":19,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":55,"y":7,"w":19,"h":113},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l-dual.img":{"frame":{"x":1480,"y":2427,"w":124,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":124,"h":112},"sourceSize":{"w":128,"h":128}},"cattle.img":{"frame":{"x":1608,"y":2427,"w":118,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":118,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitLumber.img":{"frame":{"x":1730,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":1850,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitHeaven.img":{"frame":{"x":1970,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDev.img":{"frame":{"x":2090,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":2210,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":2330,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":2450,"y":2427,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":2583,"y":2,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":2583,"y":118,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWheat.img":{"frame":{"x":2583,"y":234,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":2583,"y":350,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCamo.img":{"frame":{"x":2583,"y":466,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitBase.img":{"frame":{"x":2583,"y":582,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitTurkey.img":{"frame":{"x":2583,"y":698,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-01.img":{"frame":{"x":2583,"y":814,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRed.img":{"frame":{"x":2583,"y":930,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWoodland.img":{"frame":{"x":2583,"y":1046,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":2583,"y":1162,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-blr.img":{"frame":{"x":2583,"y":1278,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWhite.img":{"frame":{"x":2583,"y":1394,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":2583,"y":1510,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loadout-outfit.img":{"frame":{"x":2583,"y":1626,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParma.img":{"frame":{"x":2583,"y":1742,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitMod.img":{"frame":{"x":2583,"y":1858,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"part-blossom-03.img":{"frame":{"x":2583,"y":1974,"w":115,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":115,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-12gauge.img":{"frame":{"x":2583,"y":2090,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-50AE.img":{"frame":{"x":2583,"y":2206,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-556mm.img":{"frame":{"x":2583,"y":2322,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-308sub.img":{"frame":{"x":2,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-45acp.img":{"frame":{"x":119,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-762mm.img":{"frame":{"x":236,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-broken-arrow.img":{"frame":{"x":353,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-9mm.img":{"frame":{"x":470,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-box.img":{"frame":{"x":587,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-flare.img":{"frame":{"x":704,"y":2545,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector.img":{"frame":{"x":821,"y":2545,"w":109,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":109,"h":112},"sourceSize":{"w":128,"h":128}},"bugle-final-red.img":{"frame":{"x":934,"y":2545,"w":104,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":104,"h":112},"sourceSize":{"w":128,"h":128}},"bugle-final-blue.img":{"frame":{"x":1042,"y":2545,"w":104,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":104,"h":112},"sourceSize":{"w":128,"h":128}},"loot-xp-bone-01.img":{"frame":{"x":1150,"y":2545,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l.img":{"frame":{"x":1256,"y":2545,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-field-medic.img":{"frame":{"x":1362,"y":2545,"w":98,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":11,"w":98,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-mirv.img":{"frame":{"x":2485,"y":958,"w":82,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":8,"w":82,"h":112},"sourceSize":{"w":128,"h":128}},"pineapple.img":{"frame":{"x":2485,"y":1074,"w":68,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":68,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-small-arms.img":{"frame":{"x":1464,"y":2545,"w":107,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":107,"h":111},"sourceSize":{"w":128,"h":128}},"player-visor-sniper.img":{"frame":{"x":1575,"y":2545,"w":103,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":32,"w":103,"h":111},"sourceSize":{"w":176,"h":176}},"logo-surviv.img":{"frame":{"x":1682,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-storm.img":{"frame":{"x":1814,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-twins.img":{"frame":{"x":1946,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-meteor.img":{"frame":{"x":2078,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hydra.img":{"frame":{"x":2210,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hatchet.img":{"frame":{"x":2342,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-egg.img":{"frame":{"x":2474,"y":2545,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-crossing.img":{"frame":{"x":2703,"y":2,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-conch.img":{"frame":{"x":2703,"y":116,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-cloud.img":{"frame":{"x":2703,"y":230,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"link.img":{"frame":{"x":2703,"y":344,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-caduceus.img":{"frame":{"x":2703,"y":458,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-swine.img":{"frame":{"x":2703,"y":572,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-chrysanthemum.img":{"frame":{"x":2703,"y":686,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock-dual.img":{"frame":{"x":2703,"y":800,"w":122,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":122,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-scout.img":{"frame":{"x":2703,"y":914,"w":118,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":110},"sourceSize":{"w":128,"h":128}},"player-emote.img":{"frame":{"x":2703,"y":1028,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-gui.img":{"frame":{"x":2703,"y":1142,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"loadout-player-icon.img":{"frame":{"x":2703,"y":1256,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"proj-potato-02.img":{"frame":{"x":2703,"y":1370,"w":94,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":9,"w":94,"h":110},"sourceSize":{"w":128,"h":128}},"proj-potato-01.img":{"frame":{"x":2703,"y":1484,"w":94,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":9,"w":94,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock.img":{"frame":{"x":2703,"y":1598,"w":90,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":9,"w":90,"h":110},"sourceSize":{"w":128,"h":128}},"loot-medical-soda.img":{"frame":{"x":2703,"y":1712,"w":60,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":9,"w":60,"h":110},"sourceSize":{"w":128,"h":128}},"santa-hat.img":{"frame":{"x":2703,"y":1826,"w":113,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":113,"h":109},"sourceSize":{"w":128,"h":128}},"loot-weapon-model94.img":{"frame":{"x":2703,"y":1939,"w":118,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":118,"h":108},"sourceSize":{"w":128,"h":128}},"danger.img":{"frame":{"x":2703,"y":2051,"w":118,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":118,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-explosive.img":{"frame":{"x":2703,"y":2163,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"loot-xp-donut-01.img":{"frame":{"x":2703,"y":2275,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"part-leaf-02.img":{"frame":{"x":2703,"y":2387,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":108,"h":108},"sourceSize":{"w":128,"h":128}},"part-blossom-02.img":{"frame":{"x":2703,"y":2499,"w":105,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":105,"h":108},"sourceSize":{"w":128,"h":128}},"part-blossom-01.img":{"frame":{"x":2,"y":2661,"w":105,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":105,"h":108},"sourceSize":{"w":128,"h":128}},"hide.img":{"frame":{"x":111,"y":2661,"w":126,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":11,"w":126,"h":106},"sourceSize":{"w":128,"h":128}},"part-leaf-01.img":{"frame":{"x":241,"y":2661,"w":122,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":122,"h":106},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp220.img":{"frame":{"x":1989,"y":1816,"w":114,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":114,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-size.img":{"frame":{"x":367,"y":2661,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-nothing.img":{"frame":{"x":477,"y":2661,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-snowball-01.img":{"frame":{"x":587,"y":2661,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-takedown.img":{"frame":{"x":697,"y":2661,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"leek.img":{"frame":{"x":807,"y":2661,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-snowball-02.img":{"frame":{"x":917,"y":2661,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"player-visor-assault.img":{"frame":{"x":1027,"y":2661,"w":105,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":67,"y":35,"w":105,"h":106},"sourceSize":{"w":176,"h":176}},"ping-map-airdrop.img":{"frame":{"x":2485,"y":1190,"w":74,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":10,"w":74,"h":106},"sourceSize":{"w":128,"h":128}},"player-visor-healer.img":{"frame":{"x":2485,"y":1300,"w":65,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":94,"y":35,"w":65,"h":106},"sourceSize":{"w":176,"h":176}},"loot-perk-flak-jacket.img":{"frame":{"x":1136,"y":2661,"w":102,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":105},"sourceSize":{"w":128,"h":128}},"hamburger.img":{"frame":{"x":1242,"y":2661,"w":128,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":128,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-assault.img":{"frame":{"x":1374,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-m9.img":{"frame":{"x":1498,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-9mm.img":{"frame":{"x":1622,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-12g.img":{"frame":{"x":1746,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-45.img":{"frame":{"x":1870,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-762.img":{"frame":{"x":1994,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-556.img":{"frame":{"x":2118,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-9mm.img":{"frame":{"x":2242,"y":2661,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-healthkit.img":{"frame":{"x":2363,"y":2198,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-chatty.img":{"frame":{"x":2366,"y":2661,"w":110,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":10,"w":110,"h":104},"sourceSize":{"w":128,"h":128}},"loot-xp-glasses-01.img":{"frame":{"x":2480,"y":2661,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"loot-weapon-mac10.img":{"frame":{"x":2588,"y":2661,"w":102,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":102,"h":104},"sourceSize":{"w":128,"h":128}},"ribbon-red.img":{"frame":{"x":2694,"y":2661,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"ribbon-blue.img":{"frame":{"x":2835,"y":2,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"turkey-animal.img":{"frame":{"x":2,"y":2773,"w":120,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":103},"sourceSize":{"w":128,"h":128}},"movement.img":{"frame":{"x":2583,"y":2438,"w":104,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":103},"sourceSize":{"w":128,"h":128}},"ping-map-airstrike.img":{"frame":{"x":2835,"y":110,"w":44,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":13,"w":44,"h":103},"sourceSize":{"w":128,"h":128}},"loot-helmet-01.img":{"frame":{"x":126,"y":2773,"w":112,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":13,"w":112,"h":102},"sourceSize":{"w":128,"h":128}},"eggplant.img":{"frame":{"x":242,"y":2773,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"loot-perk-martyrdom.img":{"frame":{"x":352,"y":2773,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag.img":{"frame":{"x":462,"y":2773,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"ping-map-help.img":{"frame":{"x":566,"y":2773,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"loot-throwable-potato.img":{"frame":{"x":2835,"y":217,"w":92,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":13,"w":92,"h":102},"sourceSize":{"w":128,"h":128}},"question.img":{"frame":{"x":2835,"y":323,"w":68,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":13,"w":68,"h":102},"sourceSize":{"w":128,"h":128}},"gun-ots38-01.img":{"frame":{"x":2883,"y":110,"w":36,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":131,"w":36,"h":102},"sourceSize":{"w":56,"h":232}},"loot-perk-scavenger.img":{"frame":{"x":670,"y":2773,"w":108,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":14,"w":108,"h":100},"sourceSize":{"w":128,"h":128}},"trunk.img":{"frame":{"x":782,"y":2773,"w":106,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":14,"w":106,"h":100},"sourceSize":{"w":128,"h":128}},"loot-weapon-groza.img":{"frame":{"x":892,"y":2773,"w":104,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":14,"w":104,"h":100},"sourceSize":{"w":128,"h":128}},"crab.img":{"frame":{"x":1000,"y":2773,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":100,"h":100},"sourceSize":{"w":128,"h":128}},"player-visor-demo.img":{"frame":{"x":2835,"y":429,"w":66,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":38,"w":66,"h":100},"sourceSize":{"w":176,"h":176}},"face-dab.img":{"frame":{"x":1104,"y":2773,"w":144,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":144,"h":98},"sourceSize":{"w":144,"h":144}},"baguette.img":{"frame":{"x":2835,"y":533,"w":98,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":98,"h":98},"sourceSize":{"w":128,"h":128}},"gun-short-01.img":{"frame":{"x":2835,"y":635,"w":31,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":31,"h":98},"sourceSize":{"w":32,"h":100}},"crosshair.img":{"frame":{"x":2835,"y":737,"w":97,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"loot-perk-endless-ammo.img":{"frame":{"x":1252,"y":2773,"w":102,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":15,"w":102,"h":96},"sourceSize":{"w":128,"h":128}},"potato.img":{"frame":{"x":1358,"y":2773,"w":100,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":16,"w":100,"h":96},"sourceSize":{"w":128,"h":128}},"loot-xp-compass-01.img":{"frame":{"x":2835,"y":838,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":96,"h":96},"sourceSize":{"w":128,"h":128}},"part-airdrop-01.img":{"frame":{"x":2835,"y":938,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-01x.img":{"frame":{"x":2835,"y":1038,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"copy.img":{"frame":{"x":2835,"y":1138,"w":88,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":16,"w":88,"h":96},"sourceSize":{"w":128,"h":128}},"minimize.img":{"frame":{"x":2835,"y":1238,"w":95,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":95,"h":95},"sourceSize":{"w":128,"h":128}},"loot-perk-tree-climbing.img":{"frame":{"x":2835,"y":1337,"w":94,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":94,"h":95},"sourceSize":{"w":128,"h":128}},"skull-leader.img":{"frame":{"x":2835,"y":1436,"w":90,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":90,"h":95},"sourceSize":{"w":96,"h":96}},"whale.img":{"frame":{"x":1462,"y":2773,"w":118,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":118,"h":94},"sourceSize":{"w":128,"h":128}},"part-pumpkin-01.img":{"frame":{"x":1584,"y":2773,"w":106,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":106,"h":94},"sourceSize":{"w":128,"h":128}},"fish.img":{"frame":{"x":1694,"y":2773,"w":128,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":128,"h":92},"sourceSize":{"w":128,"h":128}},"teabag.img":{"frame":{"x":1826,"y":2773,"w":107,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":19,"w":107,"h":91},"sourceSize":{"w":128,"h":128}},"forest.img":{"frame":{"x":1937,"y":2773,"w":124,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":19,"w":124,"h":90},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-super.img":{"frame":{"x":2065,"y":2773,"w":124,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":19,"w":124,"h":90},"sourceSize":{"w":128,"h":128}},"loot-medical-pill.img":{"frame":{"x":2193,"y":2773,"w":118,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":19,"w":118,"h":90},"sourceSize":{"w":128,"h":128}},"coconut.img":{"frame":{"x":2315,"y":2773,"w":110,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":110,"h":90},"sourceSize":{"w":128,"h":128}},"loot-throwable-strobe.img":{"frame":{"x":2429,"y":2773,"w":103,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":23,"w":103,"h":89},"sourceSize":{"w":128,"h":128}},"face-headshot.img":{"frame":{"x":2536,"y":2773,"w":127,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":24,"w":127,"h":88},"sourceSize":{"w":128,"h":128}},"pilgrim-hat.img":{"frame":{"x":2667,"y":2773,"w":118,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":20,"w":118,"h":88},"sourceSize":{"w":128,"h":128}},"part-flare-01.img":{"frame":{"x":2835,"y":1535,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":88,"h":88},"sourceSize":{"w":100,"h":100}},"loot-melee-pan-black.img":{"frame":{"x":2789,"y":2773,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":21,"w":118,"h":86},"sourceSize":{"w":128,"h":128}},"loot-helmet-03.img":{"frame":{"x":2937,"y":2,"w":112,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":21,"w":112,"h":86},"sourceSize":{"w":128,"h":128}},"player-mash-01.img":{"frame":{"x":2,"y":2880,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-snow-01.img":{"frame":{"x":166,"y":2880,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"ping-map-woods-king.img":{"frame":{"x":2937,"y":92,"w":92,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":22,"w":92,"h":84},"sourceSize":{"w":128,"h":128}},"cog.img":{"frame":{"x":2937,"y":180,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"loot-throwable-snowball.img":{"frame":{"x":2937,"y":268,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"eye.img":{"frame":{"x":330,"y":2880,"w":126,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":23,"w":126,"h":82},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-drain.img":{"frame":{"x":460,"y":2880,"w":118,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":23,"w":118,"h":82},"sourceSize":{"w":128,"h":128}},"chicken.img":{"frame":{"x":2937,"y":356,"w":106,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":23,"w":106,"h":82},"sourceSize":{"w":128,"h":128}},"player-snow-02.img":{"frame":{"x":582,"y":2880,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-mash-02.img":{"frame":{"x":731,"y":2880,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"audio-on.img":{"frame":{"x":2937,"y":442,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"audio-off.img":{"frame":{"x":2937,"y":526,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"loot-melee-fireaxe.img":{"frame":{"x":880,"y":2880,"w":152,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":-1,"w":152,"h":78},"sourceSize":{"w":152,"h":76}},"loot-weapon-fists.img":{"frame":{"x":2937,"y":610,"w":74,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":25,"w":74,"h":78},"sourceSize":{"w":128,"h":128}},"ping-map-unlock.img":{"frame":{"x":2937,"y":692,"w":60,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":25,"w":60,"h":78},"sourceSize":{"w":128,"h":128}},"loot-melee-hook-silver.img":{"frame":{"x":3001,"y":692,"w":42,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":25,"w":42,"h":78},"sourceSize":{"w":128,"h":128}},"loot-helmet-02.img":{"frame":{"x":1036,"y":2880,"w":118,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":26,"w":118,"h":76},"sourceSize":{"w":128,"h":128}},"proj-mirv-mini-02.img":{"frame":{"x":2937,"y":774,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-mini-01.img":{"frame":{"x":2937,"y":854,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"player-mash-03.img":{"frame":{"x":1158,"y":2880,"w":149,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":149,"h":74},"sourceSize":{"w":160,"h":160}},"player-snow-03.img":{"frame":{"x":1311,"y":2880,"w":149,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":149,"h":74},"sourceSize":{"w":160,"h":160}},"loot-perk-scavenger_adv.img":{"frame":{"x":1464,"y":2880,"w":118,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":27,"w":118,"h":74},"sourceSize":{"w":128,"h":128}},"player-hands-01.img":{"frame":{"x":2937,"y":934,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":74,"h":74},"sourceSize":{"w":76,"h":76}},"player-hands-02.img":{"frame":{"x":2937,"y":1012,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":74,"h":74},"sourceSize":{"w":76,"h":76}},"gg.img":{"frame":{"x":1857,"y":1718,"w":114,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":28,"w":114,"h":72},"sourceSize":{"w":128,"h":128}},"gun-dp28-top-01.img":{"frame":{"x":2937,"y":1090,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":72,"h":72},"sourceSize":{"w":80,"h":80}},"player-map-inner.img":{"frame":{"x":2937,"y":1166,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"timer-background.img":{"frame":{"x":2937,"y":1242,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-map-outer.img":{"frame":{"x":2937,"y":1318,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"quit.img":{"frame":{"x":2937,"y":1394,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":28,"w":68,"h":72},"sourceSize":{"w":128,"h":128}},"player-patch-01.img":{"frame":{"x":1725,"y":1586,"w":116,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":71},"sourceSize":{"w":160,"h":160}},"player-patch-red.img":{"frame":{"x":1593,"y":1454,"w":116,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":45,"w":116,"h":70},"sourceSize":{"w":160,"h":160}},"part-cloth-01.img":{"frame":{"x":2937,"y":1470,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"ping-indicator.img":{"frame":{"x":2937,"y":1544,"w":88,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":60,"w":88,"h":68},"sourceSize":{"w":128,"h":128}},"part-smoke-01.img":{"frame":{"x":2937,"y":1616,"w":70,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":70,"h":68},"sourceSize":{"w":72,"h":72}},"close.img":{"frame":{"x":2937,"y":1688,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"part-snow-01.img":{"frame":{"x":2937,"y":1760,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"part-frag-burst-01.img":{"frame":{"x":2937,"y":1832,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-02.img":{"frame":{"x":2937,"y":1902,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-strobe-01.img":{"frame":{"x":2937,"y":1972,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-potato-01.img":{"frame":{"x":2937,"y":2042,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"submit.img":{"frame":{"x":2937,"y":2112,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-pulse-01.img":{"frame":{"x":2937,"y":2182,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"checked.img":{"frame":{"x":2937,"y":2252,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"resume.img":{"frame":{"x":2937,"y":2322,"w":64,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":31,"w":64,"h":66},"sourceSize":{"w":128,"h":128}},"loot-perk-self-revive.img":{"frame":{"x":1461,"y":1322,"w":126,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":32,"w":126,"h":64},"sourceSize":{"w":128,"h":128}},"gun-potato-smg-top-01.img":{"frame":{"x":2937,"y":2392,"w":66,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":66,"h":64},"sourceSize":{"w":80,"h":80}},"crosshair064.img":{"frame":{"x":2937,"y":2460,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"crosshair001.img":{"frame":{"x":2937,"y":2528,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"unlock.img":{"frame":{"x":2937,"y":2596,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"lock.img":{"frame":{"x":2989,"y":2596,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"keyboard.img":{"frame":{"x":2937,"y":2664,"w":104,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":33,"w":104,"h":62},"sourceSize":{"w":128,"h":128}},"player-map-downed.img":{"frame":{"x":2937,"y":2730,"w":72,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":72,"h":62},"sourceSize":{"w":72,"h":72}},"globe.img":{"frame":{"x":2937,"y":2796,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"crosshair086.img":{"frame":{"x":2870,"y":635,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"crosshair010.img":{"frame":{"x":2835,"y":1627,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"crosshair007.img":{"frame":{"x":2835,"y":1693,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"player-patch-02.img":{"frame":{"x":1586,"y":2880,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-blue.img":{"frame":{"x":1706,"y":2880,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":50,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"crosshair080.img":{"frame":{"x":2835,"y":1759,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"crosshair005.img":{"frame":{"x":2835,"y":1823,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"crosshair094.img":{"frame":{"x":2835,"y":1887,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"crosshair109.img":{"frame":{"x":2835,"y":1951,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"skull-outlined.img":{"frame":{"x":2835,"y":2015,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"loot-melee-stonehammer.img":{"frame":{"x":1826,"y":2880,"w":150,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":3,"w":150,"h":58},"sourceSize":{"w":148,"h":60}},"loot-melee-knuckles-heroic.img":{"frame":{"x":2835,"y":2079,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-knuckles-rusted.img":{"frame":{"x":2835,"y":2141,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"part-frag-pin-01.img":{"frame":{"x":2835,"y":2203,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-part.img":{"frame":{"x":2835,"y":2265,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":1980,"y":2880,"w":150,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":150,"h":56},"sourceSize":{"w":148,"h":54}},"loot-melee-woodaxe.img":{"frame":{"x":2134,"y":2880,"w":150,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":150,"h":56},"sourceSize":{"w":148,"h":54}},"crosshair027.img":{"frame":{"x":2835,"y":2327,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"crosshair124.img":{"frame":{"x":2835,"y":2387,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"skull-team.img":{"frame":{"x":2835,"y":2447,"w":48,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":56},"sourceSize":{"w":64,"h":64}},"player-bullet-trail-03.img":{"frame":{"x":3013,"y":1090,"w":35,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":35,"h":54},"sourceSize":{"w":36,"h":56}},"dc.img":{"frame":{"x":2835,"y":2507,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"down.img":{"frame":{"x":2835,"y":2563,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"ping-part-quarter.img":{"frame":{"x":2835,"y":2619,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-part-quarter-highlight.img":{"frame":{"x":2835,"y":2674,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"gun-pkp-bot-01.img":{"frame":{"x":2703,"y":2611,"w":78,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":78,"h":46},"sourceSize":{"w":76,"h":44}},"crosshair177.img":{"frame":{"x":2767,"y":1712,"w":56,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":46},"sourceSize":{"w":64,"h":64}},"crown.img":{"frame":{"x":2767,"y":1762,"w":54,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":54,"h":46},"sourceSize":{"w":64,"h":64}},"ping-part-eighth-highlight.img":{"frame":{"x":2485,"y":1410,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-eighth.img":{"frame":{"x":2485,"y":1457,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"pumpkin-play.img":{"frame":{"x":3009,"y":1394,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"loot-melee-karambit-rugged.img":{"frame":{"x":2237,"y":2119,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-prismatic.img":{"frame":{"x":584,"y":712,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-drowned.img":{"frame":{"x":688,"y":712,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"gun-m249-bot-01.img":{"frame":{"x":2485,"y":1504,"w":74,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":74,"h":42},"sourceSize":{"w":76,"h":44}},"crosshair158.img":{"frame":{"x":2835,"y":2729,"w":62,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":12,"w":62,"h":40},"sourceSize":{"w":64,"h":64}},"part-frag-lever-01.img":{"frame":{"x":2485,"y":1550,"w":48,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":44,"w":48,"h":40},"sourceSize":{"w":128,"h":128}},"crosshair101.img":{"frame":{"x":3007,"y":1832,"w":42,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":8,"w":42,"h":40},"sourceSize":{"w":64,"h":64}},"crosshair102.img":{"frame":{"x":3007,"y":1902,"w":42,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":8,"w":42,"h":40},"sourceSize":{"w":64,"h":64}},"loot-melee-katana-demo.img":{"frame":{"x":796,"y":730,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-rusted.img":{"frame":{"x":2288,"y":2880,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-orchid.img":{"frame":{"x":2518,"y":2880,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana.img":{"frame":{"x":2748,"y":2880,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"hatchet.img":{"frame":{"x":3005,"y":2322,"w":44,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":44,"h":38},"sourceSize":{"w":48,"h":48}},"crosshair045.img":{"frame":{"x":3011,"y":1470,"w":38,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":13,"w":38,"h":38},"sourceSize":{"w":64,"h":64}},"player-feet-01.img":{"frame":{"x":3015,"y":610,"w":26,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":26,"h":38},"sourceSize":{"w":38,"h":38}},"player-feet-02.img":{"frame":{"x":3015,"y":934,"w":26,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":26,"h":38},"sourceSize":{"w":38,"h":38}},"loot-melee-naginata.img":{"frame":{"x":2,"y":2969,"w":345,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":14,"w":345,"h":37},"sourceSize":{"w":350,"h":54}},"crosshair184.img":{"frame":{"x":3011,"y":1616,"w":37,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":14,"w":37,"h":36},"sourceSize":{"w":64,"h":64}},"crosshair040.img":{"frame":{"x":3009,"y":1688,"w":37,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":14,"w":37,"h":36},"sourceSize":{"w":64,"h":64}},"part-frag-burst-03.img":{"frame":{"x":3013,"y":1166,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-bullet-trail-02.img":{"frame":{"x":3013,"y":1242,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"crosshair038.img":{"frame":{"x":3015,"y":652,"w":33,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":16,"w":33,"h":32},"sourceSize":{"w":64,"h":64}},"crosshair000.img":{"frame":{"x":3015,"y":976,"w":33,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":16,"w":33,"h":32},"sourceSize":{"w":64,"h":64}},"dot.img":{"frame":{"x":3015,"y":1012,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":32,"h":32},"sourceSize":{"w":36,"h":36}},"crosshair173.img":{"frame":{"x":3015,"y":1048,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":32,"h":32},"sourceSize":{"w":64,"h":64}},"crosshair181.img":{"frame":{"x":3013,"y":1206,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":32,"h":32},"sourceSize":{"w":64,"h":64}},"gun-qbb97-bot-01.img":{"frame":{"x":2870,"y":701,"w":62,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":30},"sourceSize":{"w":64,"h":32}},"ping-part-circle-auto-highlight.img":{"frame":{"x":3013,"y":1282,"w":29,"h":29},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":29,"h":29},"sourceSize":{"w":29,"h":29}},"ping-part-circle-auto.img":{"frame":{"x":3013,"y":1318,"w":28,"h":28},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":28},"sourceSize":{"w":28,"h":28}},"ping-part-circle-highlight.img":{"frame":{"x":3013,"y":1350,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-circle.img":{"frame":{"x":3011,"y":1512,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-circle-auto-outer.img":{"frame":{"x":3011,"y":1656,"w":28,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":28,"h":26},"sourceSize":{"w":28,"h":28}},"crosshair125.img":{"frame":{"x":3025,"y":180,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":20,"w":24,"h":24},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-woodland.img":{"frame":{"x":1270,"y":856,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}}}}]')
            , Es = JSON.parse('[{"meta":{"image":"shared-0-100-8b417e22.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-police-floor-01.img":{"frame":{"x":1438,"y":2,"w":2112,"h":1568},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":2112,"h":1568},"sourceSize":{"w":2112,"h":1568}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":2,"y":2,"w":1432,"h":1592},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1432,"h":1592},"sourceSize":{"w":1432,"h":1592}},"map-building-mansion-floor-01b.img":{"frame":{"x":2,"y":1598,"w":1825,"h":1218},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1825,"h":1218},"sourceSize":{"w":1826,"h":1218}},"map-building-barn-floor-01.img":{"frame":{"x":1831,"y":1598,"w":1600,"h":1088},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1600,"h":1088},"sourceSize":{"w":1600,"h":1088}},"map-building-police-ceiling-02.img":{"frame":{"x":3554,"y":2,"w":530,"h":1080},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":530,"h":1080},"sourceSize":{"w":530,"h":1082}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":2820,"w":1216,"h":992},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1216,"h":992},"sourceSize":{"w":1216,"h":992}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":1222,"y":2820,"w":1304,"h":918},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1304,"h":918},"sourceSize":{"w":1304,"h":920}},"map-building-bank-ceiling-02.img":{"frame":{"x":2530,"y":2820,"w":556,"h":888},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":50,"w":556,"h":888},"sourceSize":{"w":556,"h":940}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":3090,"y":2820,"w":942,"h":880},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":0,"w":942,"h":880},"sourceSize":{"w":992,"h":880}},"map-building-hut-floor-02.img":{"frame":{"x":3554,"y":1086,"w":130,"h":767},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":130,"h":767},"sourceSize":{"w":136,"h":768}},"map-building-container-open-floor.img":{"frame":{"x":3688,"y":1086,"w":180,"h":684},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":180,"h":684},"sourceSize":{"w":180,"h":692}},"map-building-dock-floor-01b.img":{"frame":{"x":3872,"y":1086,"w":162,"h":662},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":162,"h":662},"sourceSize":{"w":162,"h":664}},"map-wall-18.img":{"frame":{"x":4038,"y":1086,"w":32,"h":576},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":576},"sourceSize":{"w":32,"h":576}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":3554,"y":1857,"w":488,"h":560},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":560},"sourceSize":{"w":488,"h":560}},"map-club-bar-01.img":{"frame":{"x":3435,"y":1598,"w":54,"h":480},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":480},"sourceSize":{"w":54,"h":480}},"map-wall-14.img":{"frame":{"x":4046,"y":1857,"w":32,"h":448},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-14-rounded.img":{"frame":{"x":3493,"y":1598,"w":32,"h":448},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-13-rounded.img":{"frame":{"x":3435,"y":2082,"w":32,"h":416},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-13.img":{"frame":{"x":3471,"y":2082,"w":32,"h":416},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-building-hut-ceiling-02.img":{"frame":{"x":3554,"y":2421,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-wall-glass-12-2.img":{"frame":{"x":3936,"y":2421,"w":64,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":384},"sourceSize":{"w":64,"h":384}},"map-wall-12.img":{"frame":{"x":4004,"y":2421,"w":32,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-glass-12.img":{"frame":{"x":4040,"y":2421,"w":32,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-12-rounded.img":{"frame":{"x":3507,"y":2082,"w":32,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-11-rounded.img":{"frame":{"x":4036,"y":2820,"w":32,"h":352},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-11.img":{"frame":{"x":4036,"y":3176,"w":32,"h":352},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-stone-03.img":{"frame":{"x":2,"y":3816,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-tree-03.img":{"frame":{"x":282,"y":3816,"w":256,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-07su.img":{"frame":{"x":542,"y":3816,"w":256,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-wall-08-rounded.img":{"frame":{"x":802,"y":3816,"w":32,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":256},"sourceSize":{"w":32,"h":256}},"map-bunker-conch-floor-01.img":{"frame":{"x":838,"y":3816,"w":580,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":580,"h":252},"sourceSize":{"w":600,"h":256}},"map-building-club-ceiling-01b.img":{"frame":{"x":1422,"y":3816,"w":177,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":242},"sourceSize":{"w":178,"h":242}},"map-wall-shack-right.img":{"frame":{"x":1603,"y":3816,"w":24,"h":241},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":24,"h":241},"sourceSize":{"w":24,"h":242}},"map-pipes-03.img":{"frame":{"x":1631,"y":3816,"w":684,"h":236},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":684,"h":236},"sourceSize":{"w":684,"h":236}},"map-hut-res-01.img":{"frame":{"x":2319,"y":3816,"w":236,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":130,"y":136,"w":236,"h":236},"sourceSize":{"w":512,"h":512}},"map-chute-01.img":{"frame":{"x":2559,"y":3816,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-building-mansion-cellar-01b.img":{"frame":{"x":2795,"y":3816,"w":225,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":230},"sourceSize":{"w":226,"h":230}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":3024,"y":3816,"w":192,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":192,"h":230},"sourceSize":{"w":320,"h":288}},"map-building-mansion-floor-01c.img":{"frame":{"x":3220,"y":3816,"w":225,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":228},"sourceSize":{"w":226,"h":228}},"map-building-club-floor-01a.img":{"frame":{"x":3449,"y":3816,"w":225,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":226},"sourceSize":{"w":226,"h":226}},"map-building-saferoom-floor.img":{"frame":{"x":3678,"y":3816,"w":352,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-wall-07.img":{"frame":{"x":4034,"y":3816,"w":32,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"part-wedge-01.img":{"frame":{"x":3435,"y":2502,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"proj-wedge-01.img":{"frame":{"x":3494,"y":2502,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"map-wall-04-cobalt.img":{"frame":{"x":4036,"y":3532,"w":40,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"pass-level-bg.img":{"frame":{"x":1831,"y":2690,"w":146,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":146,"h":126},"sourceSize":{"w":146,"h":146}},"pass.img":{"frame":{"x":1981,"y":2690,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"player-helmet-marksman.img":{"frame":{"x":2111,"y":2690,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"map-wall-outhouse-bot.img":{"frame":{"x":3348,"y":3712,"w":72,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":24}},"map-crate-05.img":{"frame":{"x":2338,"y":2690,"w":124,"h":124},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":124,"h":124},"sourceSize":{"w":124,"h":124}},"map-toilet-01.img":{"frame":{"x":2466,"y":2690,"w":97,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":2,"w":97,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-02.img":{"frame":{"x":2567,"y":2690,"w":97,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":2,"w":97,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-hotw.img":{"frame":{"x":2668,"y":2690,"w":106,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":106,"h":122},"sourceSize":{"w":128,"h":128}},"map-decal-oil-01.img":{"frame":{"x":2778,"y":2690,"w":86,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":86,"h":122},"sourceSize":{"w":128,"h":128}},"map-vat-res.img":{"frame":{"x":2868,"y":2690,"w":108,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":11,"w":108,"h":121},"sourceSize":{"w":144,"h":144}},"map-case-chrys-01.img":{"frame":{"x":2980,"y":2690,"w":156,"h":120},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-case-ring-01.img":{"frame":{"x":3140,"y":2690,"w":156,"h":120},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-decal-initiative.img":{"frame":{"x":3300,"y":2690,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-halloween-mystery.img":{"frame":{"x":3424,"y":2690,"w":106,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":106,"h":120},"sourceSize":{"w":128,"h":128}},"map-building-house-window-res-01.img":{"frame":{"x":4046,"y":2309,"w":32,"h":104},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-wall-02-5-rounded.img":{"frame":{"x":4038,"y":1666,"w":32,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":80},"sourceSize":{"w":32,"h":80}},"map-towelrack-01.img":{"frame":{"x":3688,"y":1774,"w":192,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":192,"h":76},"sourceSize":{"w":192,"h":96}},"map-deposit-box-02.img":{"frame":{"x":3884,"y":1774,"w":160,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-potato-res.img":{"frame":{"x":1222,"y":3742,"w":56,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":15,"w":56,"h":66},"sourceSize":{"w":96,"h":96}},"map-fire-ext-01.img":{"frame":{"x":1282,"y":3742,"w":83,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":83,"h":65},"sourceSize":{"w":84,"h":70}},"map-bookshelf-01.img":{"frame":{"x":1369,"y":3742,"w":224,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bookshelf-02.img":{"frame":{"x":1597,"y":3742,"w":224,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-building-porch-01.img":{"frame":{"x":1825,"y":3742,"w":128,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":64},"sourceSize":{"w":128,"h":64}},"map-column-01.img":{"frame":{"x":1957,"y":3742,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"crosshair160.img":{"frame":{"x":2025,"y":3742,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-wall-02.img":{"frame":{"x":4048,"y":1774,"w":32,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-02-rounded.img":{"frame":{"x":2093,"y":3742,"w":32,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"crosshair136.img":{"frame":{"x":2129,"y":3742,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-melee-sledgehammer.img":{"frame":{"x":2195,"y":3742,"w":150,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":150,"h":60},"sourceSize":{"w":148,"h":58}},"crosshair118.img":{"frame":{"x":2349,"y":3742,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"map-bush-res-02.img":{"frame":{"x":2413,"y":3742,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":45,"w":59,"h":60},"sourceSize":{"w":144,"h":144}},"map-bathhouse-pool-01.img":{"frame":{"x":2476,"y":3742,"w":36,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":60},"sourceSize":{"w":36,"h":60}},"map-screen-res-01.img":{"frame":{"x":2516,"y":3742,"w":116,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":116,"h":58},"sourceSize":{"w":124,"h":58}},"map-drawers-res.img":{"frame":{"x":2636,"y":3742,"w":93,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":93,"h":57},"sourceSize":{"w":96,"h":64}},"map-fire-ext-res.img":{"frame":{"x":2733,"y":3742,"w":46,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":8,"w":46,"h":56},"sourceSize":{"w":84,"h":70}},"map-decal-oil-05.img":{"frame":{"x":2783,"y":3742,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"map-gun-mount-04.img":{"frame":{"x":2821,"y":3742,"w":128,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":55},"sourceSize":{"w":128,"h":56}},"map-barrel-res-03.img":{"frame":{"x":2953,"y":3742,"w":76,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":86,"w":76,"h":52},"sourceSize":{"w":144,"h":144}},"map-woodpile-res-01.img":{"frame":{"x":3033,"y":3742,"w":72,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":22,"w":72,"h":52},"sourceSize":{"w":96,"h":96}},"map-candle-01.img":{"frame":{"x":3109,"y":3742,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":50,"h":50},"sourceSize":{"w":52,"h":52}},"map-locker-03.img":{"frame":{"x":3163,"y":3742,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-02.img":{"frame":{"x":3263,"y":3742,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-01.img":{"frame":{"x":3363,"y":3742,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-screen-01.img":{"frame":{"x":3463,"y":3742,"w":256,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":48},"sourceSize":{"w":256,"h":48}},"map-gun-mount-05.img":{"frame":{"x":3723,"y":3742,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-gun-mount-01.img":{"frame":{"x":3871,"y":3742,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-decal-oil-04.img":{"frame":{"x":4019,"y":3742,"w":54,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":54,"h":48},"sourceSize":{"w":64,"h":64}},"map-wall-shack-top.img":{"frame":{"x":2530,"y":3712,"w":360,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":24},"sourceSize":{"w":360,"h":24}},"map-wall-shack-bot.img":{"frame":{"x":2894,"y":3712,"w":242,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":242,"h":24},"sourceSize":{"w":242,"h":24}},"map-wall-outhouse-top.img":{"frame":{"x":3140,"y":3712,"w":204,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":204,"h":24},"sourceSize":{"w":204,"h":24}},"proj-martyrdom-01.img":{"frame":{"x":2210,"y":2690,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}}}},{"meta":{"image":"shared-1-100-b0df365a.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-house-floor-02.img":{"frame":{"x":1448,"y":2,"w":960,"h":864},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":2,"w":1442,"h":866},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1442,"h":866},"sourceSize":{"w":1442,"h":866}},"map-building-house-floor-01.img":{"frame":{"x":2,"y":872,"w":960,"h":864},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-bank-floor-01.img":{"frame":{"x":2,"y":1740,"w":1696,"h":802},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1696,"h":802},"sourceSize":{"w":1696,"h":802}},"map-building-mansion-cellar-01a.img":{"frame":{"x":966,"y":872,"w":865,"h":801},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":865,"h":801},"sourceSize":{"w":866,"h":802}},"map-building-warehouse-floor-01.img":{"frame":{"x":2412,"y":2,"w":1000,"h":800},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1000,"h":800},"sourceSize":{"w":1000,"h":800}},"map-building-mansion-ceiling.img":{"frame":{"x":2412,"y":806,"w":912,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":912,"h":800},"sourceSize":{"w":1024,"h":864}},"map-building-warehouse-floor-02.img":{"frame":{"x":2412,"y":1610,"w":880,"h":800},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":880,"h":800},"sourceSize":{"w":880,"h":800}},"map-building-shilo-floor-01.img":{"frame":{"x":2,"y":2546,"w":960,"h":768},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":768},"sourceSize":{"w":960,"h":768}},"map-building-shilo-ceiling-01.img":{"frame":{"x":966,"y":2546,"w":960,"h":768},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":768},"sourceSize":{"w":960,"h":768}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":1930,"y":2546,"w":1110,"h":727},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1110,"h":727},"sourceSize":{"w":1112,"h":729}},"map-building-bridge-lg-floor.img":{"frame":{"x":2,"y":3318,"w":1011,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1011,"h":704},"sourceSize":{"w":1012,"h":708}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":1017,"y":3318,"w":726,"h":698},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":726,"h":698},"sourceSize":{"w":738,"h":706}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":1747,"y":3318,"w":1268,"h":696},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":1268,"h":696},"sourceSize":{"w":1280,"h":704}},"map-building-police-floor-02.img":{"frame":{"x":1702,"y":1740,"w":609,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":65,"w":609,"h":640},"sourceSize":{"w":610,"h":1570}},"map-building-bank-ceiling-01.img":{"frame":{"x":1835,"y":872,"w":505,"h":552},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":48,"w":505,"h":552},"sourceSize":{"w":505,"h":600}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":3416,"y":2,"w":536,"h":536},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":536,"h":536},"sourceSize":{"w":536,"h":536}},"map-building-container-floor-01.img":{"frame":{"x":3416,"y":542,"w":180,"h":531},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":531},"sourceSize":{"w":180,"h":536}},"map-tree-08f.img":{"frame":{"x":3416,"y":1077,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08su.img":{"frame":{"x":3416,"y":1591,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-silo-01.img":{"frame":{"x":3416,"y":2105,"w":504,"h":502},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":504,"h":502},"sourceSize":{"w":512,"h":512}},"map-building-club-floor-01e.img":{"frame":{"x":3416,"y":2611,"w":353,"h":482},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":482},"sourceSize":{"w":354,"h":482}},"map-building-police-ceiling-03.img":{"frame":{"x":3416,"y":3097,"w":504,"h":480},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":480},"sourceSize":{"w":504,"h":480}},"map-building-barn-basement-floor-02.img":{"frame":{"x":3019,"y":3318,"w":374,"h":468},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":374,"h":468},"sourceSize":{"w":376,"h":472}},"map-building-club-ceiling-01c.img":{"frame":{"x":3416,"y":3581,"w":400,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":400,"h":433},"sourceSize":{"w":402,"h":434}},"map-building-barn-basement-stairs.img":{"frame":{"x":3600,"y":542,"w":288,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-panicroom-floor.img":{"frame":{"x":3044,"y":2546,"w":288,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-decal-club-02.img":{"frame":{"x":3773,"y":2611,"w":100,"h":358},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":100,"h":358},"sourceSize":{"w":104,"h":360}},"map-pipes-04.img":{"frame":{"x":3820,"y":3581,"w":88,"h":352},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":352},"sourceSize":{"w":88,"h":352}},"map-building-vault-ceiling.img":{"frame":{"x":3044,"y":2934,"w":321,"h":337},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":321,"h":337},"sourceSize":{"w":432,"h":337}},"map-saloon-bar-01.img":{"frame":{"x":3892,"y":542,"w":54,"h":324},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":324},"sourceSize":{"w":54,"h":324}},"map-wall-10-rounded.img":{"frame":{"x":3877,"y":2611,"w":32,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-10.img":{"frame":{"x":3913,"y":2611,"w":32,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-glass-10.img":{"frame":{"x":3912,"y":3581,"w":32,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-pipes-01.img":{"frame":{"x":3296,"y":1610,"w":90,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":288},"sourceSize":{"w":90,"h":288}},"map-wall-09-rounded.img":{"frame":{"x":3328,"y":806,"w":32,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-09.img":{"frame":{"x":3364,"y":806,"w":32,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-glass-9.img":{"frame":{"x":3328,"y":1098,"w":32,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-building-saferoom-ceiling.img":{"frame":{"x":1835,"y":1428,"w":352,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-outhouse-ceiling.img":{"frame":{"x":3019,"y":3790,"w":272,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":272,"h":224},"sourceSize":{"w":400,"h":316}},"map-door-02.img":{"frame":{"x":3296,"y":1902,"w":80,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":224},"sourceSize":{"w":80,"h":224}},"map-wall-07-rounded.img":{"frame":{"x":3364,"y":1098,"w":32,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wall-shack-left.img":{"frame":{"x":3924,"y":2105,"w":24,"h":222},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":222},"sourceSize":{"w":24,"h":222}},"map-bed-02.img":{"frame":{"x":2191,"y":1428,"w":176,"h":216},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":216},"sourceSize":{"w":176,"h":216}},"map-bed-01.img":{"frame":{"x":3296,"y":2130,"w":96,"h":216},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":216},"sourceSize":{"w":96,"h":216}},"map-wall-outhouse-side.img":{"frame":{"x":3924,"y":2331,"w":24,"h":198},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":198},"sourceSize":{"w":24,"h":198}},"map-pipes-05.img":{"frame":{"x":2315,"y":1740,"w":90,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":192}},"map-wall-06-rounded.img":{"frame":{"x":3328,"y":1390,"w":32,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-06.img":{"frame":{"x":3364,"y":1390,"w":32,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"role-assault.img":{"frame":{"x":3956,"y":2,"w":130,"h":166},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":166},"sourceSize":{"w":176,"h":176}},"role-healer.img":{"frame":{"x":3956,"y":172,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-tank.img":{"frame":{"x":3956,"y":338,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-sniper.img":{"frame":{"x":3956,"y":504,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-demo.img":{"frame":{"x":3956,"y":670,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-scout.img":{"frame":{"x":3956,"y":836,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"map-wall-04-stone.img":{"frame":{"x":3956,"y":1002,"w":40,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-05.img":{"frame":{"x":4000,"y":1002,"w":32,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-05-rounded.img":{"frame":{"x":4036,"y":1002,"w":32,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-bed-res-01.img":{"frame":{"x":3956,"y":1166,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-bed-res-02.img":{"frame":{"x":3956,"y":1328,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-wheel-01.img":{"frame":{"x":1702,"y":2384,"w":312,"h":156},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":156},"sourceSize":{"w":312,"h":156}},"map-crate-res-03.img":{"frame":{"x":2018,"y":2384,"w":216,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":216,"h":154},"sourceSize":{"w":216,"h":156}},"map-crate-11.img":{"frame":{"x":2238,"y":2384,"w":148,"h":148},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-sandbags-02.img":{"frame":{"x":3956,"y":1490,"w":114,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":114,"h":146},"sourceSize":{"w":148,"h":148}},"map-bush-07.img":{"frame":{"x":3600,"y":930,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-stone-01.img":{"frame":{"x":3739,"y":930,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-door-slot-02.img":{"frame":{"x":3956,"y":1640,"w":38,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":136},"sourceSize":{"w":38,"h":136}},"map-door-slot-01.img":{"frame":{"x":3998,"y":1640,"w":38,"h":134},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":134},"sourceSize":{"w":38,"h":134}},"map-switch-02.img":{"frame":{"x":1462,"y":1677,"w":30,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":32},"sourceSize":{"w":30,"h":34}},"map-bush-07x.img":{"frame":{"x":3956,"y":1914,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-stone-res-06.img":{"frame":{"x":2412,"y":2414,"w":288,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":128},"sourceSize":{"w":288,"h":128}},"map-stairs-broken-01.img":{"frame":{"x":2704,"y":2414,"w":160,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-01.img":{"frame":{"x":2868,"y":2414,"w":160,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-vat-01.img":{"frame":{"x":3956,"y":2048,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":128,"h":128},"sourceSize":{"w":144,"h":144}},"map-bathhouse-column-01.img":{"frame":{"x":3956,"y":2180,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"part-note-02.img":{"frame":{"x":3956,"y":2312,"w":90,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":0,"w":90,"h":128},"sourceSize":{"w":128,"h":128}},"part-note-01.img":{"frame":{"x":3956,"y":2444,"w":86,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":0,"w":86,"h":128},"sourceSize":{"w":128,"h":128}},"map-door-04.img":{"frame":{"x":3956,"y":2576,"w":54,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"map-wall-04-rounded.img":{"frame":{"x":4049,"y":1166,"w":32,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-04.img":{"frame":{"x":4049,"y":1328,"w":32,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-door-01.img":{"frame":{"x":4040,"y":1640,"w":24,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-door-05.img":{"frame":{"x":4050,"y":2312,"w":24,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-barrel-res-02.img":{"frame":{"x":3956,"y":2708,"w":130,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":130,"h":127},"sourceSize":{"w":144,"h":144}},"loot-weapon-m9-cursed.img":{"frame":{"x":3956,"y":2839,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"timer.img":{"frame":{"x":3956,"y":2963,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"map-chimney-01.img":{"frame":{"x":3956,"y":3085,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":120,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-01.img":{"frame":{"x":3956,"y":3207,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"player-medic.img":{"frame":{"x":3956,"y":3329,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":13,"w":118,"h":118},"sourceSize":{"w":144,"h":144}},"map-squash-01.img":{"frame":{"x":3956,"y":3451,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":124,"h":116},"sourceSize":{"w":144,"h":144}},"map-stone-res-04.img":{"frame":{"x":3956,"y":3571,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"map-case-flare-res-01.img":{"frame":{"x":3956,"y":3691,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-hatchet-res-01.img":{"frame":{"x":3956,"y":3810,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"loot-perk-inspiration.img":{"frame":{"x":3773,"y":2973,"w":114,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":114,"h":114},"sourceSize":{"w":128,"h":128}},"map-building-boarded-window-01.img":{"frame":{"x":4014,"y":2576,"w":44,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":44,"h":113},"sourceSize":{"w":48,"h":128}},"map-case-basement-01.img":{"frame":{"x":3032,"y":2414,"w":148,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":112},"sourceSize":{"w":148,"h":112}},"map-tree-09.img":{"frame":{"x":3184,"y":2414,"w":112,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-04.img":{"frame":{"x":3300,"y":2414,"w":112,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"loot-perk-final-bugle.img":{"frame":{"x":3295,"y":3790,"w":104,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":104,"h":112},"sourceSize":{"w":128,"h":128}},"map-door-03.img":{"frame":{"x":4046,"y":2444,"w":32,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":112},"sourceSize":{"w":32,"h":112}},"map-bollard-01.img":{"frame":{"x":3295,"y":3906,"w":112,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":112,"h":108},"sourceSize":{"w":144,"h":144}},"map-building-bank-window-01.img":{"frame":{"x":3885,"y":930,"w":56,"h":104},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":104},"sourceSize":{"w":56,"h":104}},"map-building-house-window-01.img":{"frame":{"x":3891,"y":2973,"w":32,"h":104},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-decal-oil-02.img":{"frame":{"x":2315,"y":1936,"w":90,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":90,"h":100},"sourceSize":{"w":128,"h":128}},"map-toilet-03.img":{"frame":{"x":2315,"y":2040,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-toilet-04.img":{"frame":{"x":2315,"y":2142,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-recorder-01.img":{"frame":{"x":2344,"y":872,"w":64,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-recorder-02.img":{"frame":{"x":2344,"y":972,"w":64,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-wall-03-rounded.img":{"frame":{"x":3380,"y":1902,"w":32,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-03.img":{"frame":{"x":3380,"y":2002,"w":32,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-toilet-res-02.img":{"frame":{"x":2315,"y":2244,"w":80,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":17,"w":80,"h":94},"sourceSize":{"w":128,"h":128}},"map-oven-01.img":{"frame":{"x":3956,"y":3929,"w":108,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":93},"sourceSize":{"w":108,"h":94}},"map-saloon-bar-02.img":{"frame":{"x":2344,"y":1072,"w":54,"h":92},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":92},"sourceSize":{"w":54,"h":92}},"map-recorder-03.img":{"frame":{"x":2344,"y":1168,"w":48,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-recorder-04.img":{"frame":{"x":2344,"y":1252,"w":48,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-power-box-01.img":{"frame":{"x":3820,"y":3937,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-res-01.img":{"frame":{"x":3892,"y":870,"w":52,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":48,"w":52,"h":48},"sourceSize":{"w":144,"h":144}},"crosshair098.img":{"frame":{"x":3896,"y":3937,"w":56,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":46},"sourceSize":{"w":64,"h":64}},"map-tree-res-01.img":{"frame":{"x":3364,"y":1326,"w":48,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":48,"h":46},"sourceSize":{"w":48,"h":48}},"map-bush-res-04.img":{"frame":{"x":3296,"y":2350,"w":47,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":47,"h":46},"sourceSize":{"w":54,"h":54}},"map-gun-mount-02.img":{"frame":{"x":966,"y":1677,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-03.img":{"frame":{"x":1098,"y":1677,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-decal-flyer-01.img":{"frame":{"x":3347,"y":2350,"w":36,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":36,"h":44},"sourceSize":{"w":48,"h":48}},"map-building-bank-window-res-01.img":{"frame":{"x":2344,"y":1336,"w":44,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":55,"w":44,"h":43},"sourceSize":{"w":144,"h":144}},"cobalt.img":{"frame":{"x":1230,"y":1677,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":42,"h":42},"sourceSize":{"w":48,"h":48}},"crosshair051.img":{"frame":{"x":2344,"y":1383,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":40,"h":40},"sourceSize":{"w":64,"h":64}},"map-barrel-04.img":{"frame":{"x":1276,"y":1677,"w":89,"h":35},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-03.img":{"frame":{"x":1369,"y":1677,"w":89,"h":35},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-bottle-04.img":{"frame":{"x":3885,"y":1038,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":34,"h":34},"sourceSize":{"w":32,"h":32}},"map-switch-03.img":{"frame":{"x":3877,"y":2935,"w":30,"h":34},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-switch-01.img":{"frame":{"x":3911,"y":2935,"w":30,"h":34},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"crosshair176.img":{"frame":{"x":2371,"y":1428,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":32,"h":32},"sourceSize":{"w":64,"h":64}},"map-bottle-01.img":{"frame":{"x":2371,"y":1464,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-02.img":{"frame":{"x":2371,"y":1500,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-wall-01-rounded.img":{"frame":{"x":2371,"y":1536,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-05.img":{"frame":{"x":2371,"y":1572,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-03.img":{"frame":{"x":2371,"y":1608,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bush-01f.img":{"frame":{"x":3956,"y":1780,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}}}},{"meta":{"image":"shared-2-100-55e4ae31.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-barn-ceiling-01.img":{"frame":{"x":726,"y":2,"w":1200,"h":624},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1200,"h":624},"sourceSize":{"w":1200,"h":624}},"map-building-house-ceiling.img":{"frame":{"x":2,"y":2,"w":720,"h":648},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":648},"sourceSize":{"w":720,"h":648}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":2,"y":654,"w":934,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":934,"h":608},"sourceSize":{"w":960,"h":640}},"map-building-club-ceiling-01a.img":{"frame":{"x":940,"y":654,"w":737,"h":593},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":737,"h":593},"sourceSize":{"w":738,"h":594}},"map-building-club-floor-01g.img":{"frame":{"x":2,"y":1266,"w":800,"h":578},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":800,"h":578},"sourceSize":{"w":802,"h":578}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":806,"y":1266,"w":912,"h":576},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":576},"sourceSize":{"w":912,"h":576}},"map-building-teahouse-floor-01.img":{"frame":{"x":1930,"y":2,"w":896,"h":576},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":576},"sourceSize":{"w":896,"h":576}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":2,"y":1848,"w":1088,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":1088,"h":544},"sourceSize":{"w":1088,"h":576}},"map-building-police-ceiling-01.img":{"frame":{"x":1094,"y":1848,"w":1008,"h":480},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1008,"h":480},"sourceSize":{"w":1008,"h":480}},"map-building-barn-basement-floor-01.img":{"frame":{"x":1930,"y":582,"w":662,"h":468},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":662,"h":468},"sourceSize":{"w":664,"h":472}},"map-building-bank-floor-02.img":{"frame":{"x":1930,"y":1054,"w":864,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":448},"sourceSize":{"w":1088,"h":448}},"map-building-hut-floor-01.img":{"frame":{"x":2106,"y":1848,"w":448,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":448,"h":448},"sourceSize":{"w":512,"h":512}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":2830,"y":2,"w":832,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":832,"h":432},"sourceSize":{"w":832,"h":432}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":2830,"y":438,"w":720,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":432},"sourceSize":{"w":720,"h":432}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":2830,"y":874,"w":400,"h":430},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":430},"sourceSize":{"w":400,"h":448}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":2,"y":2396,"w":1239,"h":408},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":28,"w":1239,"h":408},"sourceSize":{"w":1306,"h":464}},"map-building-shack-floor-03.img":{"frame":{"x":2830,"y":1308,"w":568,"h":408},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":568,"h":408},"sourceSize":{"w":576,"h":448}},"map-building-hut-ceiling-03.img":{"frame":{"x":3234,"y":874,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-01.img":{"frame":{"x":2830,"y":1720,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-panicroom-ceiling.img":{"frame":{"x":3212,"y":1720,"w":288,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":1245,"y":2396,"w":1393,"h":382},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":43,"w":1393,"h":382},"sourceSize":{"w":1520,"h":432}},"map-bunker-storm-floor-02.img":{"frame":{"x":2642,"y":2396,"w":320,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":380},"sourceSize":{"w":320,"h":384}},"map-building-container-open-ceiling-01.img":{"frame":{"x":3402,"y":1308,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":156,"w":180,"h":380},"sourceSize":{"w":180,"h":692}},"map-building-container-ceiling-01.img":{"frame":{"x":2596,"y":582,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-05.img":{"frame":{"x":1681,"y":654,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-03.img":{"frame":{"x":1722,"y":1266,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-02.img":{"frame":{"x":2558,"y":1848,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-bridge-md-floor.img":{"frame":{"x":2,"y":2808,"w":896,"h":368},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":368},"sourceSize":{"w":896,"h":368}},"map-building-bank-ceiling-03.img":{"frame":{"x":2966,"y":2396,"w":216,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":192,"w":216,"h":360},"sourceSize":{"w":216,"h":552}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":902,"y":2808,"w":566,"h":342},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":566,"h":342},"sourceSize":{"w":567,"h":343}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":1930,"y":1506,"w":512,"h":336},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":336},"sourceSize":{"w":512,"h":336}},"map-building-shack-floor-01.img":{"frame":{"x":3186,"y":2396,"w":381,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":20,"w":381,"h":320},"sourceSize":{"w":420,"h":340}},"map-building-shack-floor-02.img":{"frame":{"x":2446,"y":1506,"w":320,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-building-mansion-floor-01a.img":{"frame":{"x":1472,"y":2808,"w":802,"h":317},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":802,"h":317},"sourceSize":{"w":802,"h":322}},"map-building-outhouse-floor.img":{"frame":{"x":2278,"y":2808,"w":240,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":80,"y":4,"w":240,"h":308},"sourceSize":{"w":400,"h":316}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":2522,"y":2808,"w":592,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":112,"w":592,"h":304},"sourceSize":{"w":592,"h":416}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":3118,"y":2808,"w":320,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":144,"w":320,"h":304},"sourceSize":{"w":320,"h":448}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":2,"y":3180,"w":225,"h":290},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":290},"sourceSize":{"w":226,"h":290}},"map-building-club-floor-01h.img":{"frame":{"x":231,"y":3180,"w":321,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":321,"h":289},"sourceSize":{"w":322,"h":290}},"map-building-shack-ceiling-03.img":{"frame":{"x":556,"y":3180,"w":408,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":0,"w":408,"h":288},"sourceSize":{"w":432,"h":336}},"map-bunker-generic-floor-01.img":{"frame":{"x":968,"y":3180,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-02.img":{"frame":{"x":1267,"y":3180,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":2830,"y":2117,"w":256,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":224},"sourceSize":{"w":256,"h":224}},"map-building-teahouse-res-01.img":{"frame":{"x":3090,"y":2117,"w":282,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":115,"y":152,"w":282,"h":208},"sourceSize":{"w":512,"h":512}},"map-building-shack-ceiling-01.img":{"frame":{"x":1566,"y":3180,"w":315,"h":207},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":315,"h":207},"sourceSize":{"w":315,"h":255}},"map-vat-02.img":{"frame":{"x":3376,"y":2117,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-02.img":{"frame":{"x":1681,"y":1038,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-building-club-floor-01d.img":{"frame":{"x":1885,"y":3180,"w":322,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":322,"h":193},"sourceSize":{"w":322,"h":194}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":2211,"y":3180,"w":258,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":258,"h":193},"sourceSize":{"w":258,"h":194}},"map-building-club-floor-01b.img":{"frame":{"x":3442,"y":2808,"w":194,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":193},"sourceSize":{"w":194,"h":194}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":2473,"y":3180,"w":496,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":496,"h":192},"sourceSize":{"w":496,"h":192}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":2973,"y":3180,"w":304,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":304,"h":192},"sourceSize":{"w":304,"h":208}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":3281,"y":3180,"w":288,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":192},"sourceSize":{"w":288,"h":192}},"map-building-shack-ceiling-02.img":{"frame":{"x":3666,"y":2,"w":240,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":192},"sourceSize":{"w":240,"h":240}},"map-hedgehog-01.img":{"frame":{"x":3666,"y":198,"w":192,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":192},"sourceSize":{"w":192,"h":192}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":3666,"y":394,"w":164,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":164,"h":192},"sourceSize":{"w":164,"h":208}},"map-building-mansion-floor-01d.img":{"frame":{"x":2,"y":3474,"w":1090,"h":186},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1090,"h":186},"sourceSize":{"w":1090,"h":194}},"map-shack-res-01.img":{"frame":{"x":1096,"y":3474,"w":305,"h":181},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":49,"w":305,"h":181},"sourceSize":{"w":420,"h":340}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":1405,"y":3474,"w":380,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":380,"h":180},"sourceSize":{"w":380,"h":180}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":3666,"y":590,"w":192,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":179},"sourceSize":{"w":194,"h":180}},"map-smoke-res.img":{"frame":{"x":3666,"y":773,"w":170,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":39,"w":170,"h":178},"sourceSize":{"w":256,"h":256}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":3666,"y":955,"w":192,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":1789,"y":3474,"w":488,"h":176},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":176},"sourceSize":{"w":488,"h":176}},"map-shack-res-02.img":{"frame":{"x":3666,"y":1136,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-shack-res-03.img":{"frame":{"x":3666,"y":1316,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-building-club-vault-ceiling.img":{"frame":{"x":3666,"y":1496,"w":160,"h":176},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":176},"sourceSize":{"w":160,"h":176}},"map-pipes-02.img":{"frame":{"x":3666,"y":1676,"w":236,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":236,"h":172},"sourceSize":{"w":238,"h":172}},"map-snow-07.img":{"frame":{"x":2281,"y":3474,"w":496,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":12,"w":496,"h":168},"sourceSize":{"w":512,"h":192}},"map-crate-04.img":{"frame":{"x":3666,"y":1852,"w":164,"h":164},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":164},"sourceSize":{"w":164,"h":164}},"map-stove-01.img":{"frame":{"x":3666,"y":2020,"w":208,"h":161},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":208,"h":161},"sourceSize":{"w":224,"h":176}},"map-table-02.img":{"frame":{"x":2781,"y":3474,"w":288,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-airdrop-02.img":{"frame":{"x":3666,"y":2185,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-dock-floor-01a.img":{"frame":{"x":3666,"y":2349,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":160,"h":160},"sourceSize":{"w":160,"h":162}},"map-airdrop-01.img":{"frame":{"x":3666,"y":2513,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-03.img":{"frame":{"x":3666,"y":2677,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-wheel-03.img":{"frame":{"x":3073,"y":3474,"w":312,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":149},"sourceSize":{"w":312,"h":156}},"map-wheel-02.img":{"frame":{"x":3389,"y":3474,"w":297,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":297,"h":149},"sourceSize":{"w":312,"h":156}},"map-crate-10.img":{"frame":{"x":3666,"y":2841,"w":148,"h":148},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-sandbags-01.img":{"frame":{"x":2,"y":3664,"w":256,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":146},"sourceSize":{"w":256,"h":148}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":3504,"y":2016,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":74},"sourceSize":{"w":148,"h":76}},"map-crate-14a.img":{"frame":{"x":3666,"y":2993,"w":156,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-14.img":{"frame":{"x":3666,"y":3141,"w":156,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-09.img":{"frame":{"x":3666,"y":3289,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"loot-circle-outer-06.img":{"frame":{"x":3504,"y":1720,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"pass-unlock-type-bg.img":{"frame":{"x":3504,"y":1868,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"map-stone-05.img":{"frame":{"x":1722,"y":1650,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"pass-unlock-bg.img":{"frame":{"x":3690,"y":3474,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"map-stone-04.img":{"frame":{"x":682,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-08.img":{"frame":{"x":830,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-07.img":{"frame":{"x":978,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-01.img":{"frame":{"x":1126,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02.img":{"frame":{"x":1274,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02sv.img":{"frame":{"x":1422,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03.img":{"frame":{"x":1570,"y":3664,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-barrel-01.img":{"frame":{"x":1718,"y":3664,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-02.img":{"frame":{"x":1864,"y":3664,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-bunker-vent-02.img":{"frame":{"x":2010,"y":3664,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bunker-vent-03.img":{"frame":{"x":2146,"y":3664,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-outhouse-res.img":{"frame":{"x":2282,"y":3664,"w":150,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":125,"y":42,"w":150,"h":132},"sourceSize":{"w":400,"h":312}},"map-table-res.img":{"frame":{"x":2436,"y":3664,"w":131,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":131,"h":132},"sourceSize":{"w":144,"h":144}},"map-building-club-floor-01f.img":{"frame":{"x":2571,"y":3664,"w":194,"h":130},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":130},"sourceSize":{"w":194,"h":130}},"map-building-mansion-cellar-01c.img":{"frame":{"x":2769,"y":3664,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":354,"h":129},"sourceSize":{"w":354,"h":130}},"map-crate-res-01.img":{"frame":{"x":3127,"y":3664,"w":138,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":138,"h":129},"sourceSize":{"w":144,"h":144}},"map-control-panel-01.img":{"frame":{"x":3269,"y":3664,"w":144,"h":110},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-04.img":{"frame":{"x":3417,"y":3664,"w":144,"h":110},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-05.img":{"frame":{"x":3565,"y":3664,"w":144,"h":110},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-02.img":{"frame":{"x":3713,"y":3664,"w":144,"h":110},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-case-deagle-02.img":{"frame":{"x":3910,"y":2,"w":144,"h":108},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-deagle-01.img":{"frame":{"x":3910,"y":114,"w":144,"h":108},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"news.img":{"frame":{"x":3910,"y":226,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"map-crate-20.img":{"frame":{"x":3910,"y":338,"w":108,"h":108},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":108},"sourceSize":{"w":108,"h":108}},"loot-perk-turkey_shoot.img":{"frame":{"x":3910,"y":450,"w":102,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":102,"h":108},"sourceSize":{"w":128,"h":128}},"map-toilet-res-01.img":{"frame":{"x":3910,"y":562,"w":98,"h":107},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":98,"h":107},"sourceSize":{"w":128,"h":128}},"map-decal-club-01.img":{"frame":{"x":3910,"y":673,"w":100,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":116,"w":100,"h":105},"sourceSize":{"w":104,"h":360}},"map-stove-02.img":{"frame":{"x":3910,"y":782,"w":98,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":98,"h":105},"sourceSize":{"w":112,"h":112}},"emote-medical-healthkit.img":{"frame":{"x":3910,"y":891,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"part-leaf-01sv.img":{"frame":{"x":3910,"y":999,"w":108,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":12,"w":108,"h":104},"sourceSize":{"w":128,"h":128}},"map-case-flare-01.img":{"frame":{"x":3910,"y":1107,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-hatchet-01.img":{"frame":{"x":3910,"y":1213,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-01.img":{"frame":{"x":3910,"y":1319,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-02.img":{"frame":{"x":3910,"y":1425,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-03.img":{"frame":{"x":3910,"y":1531,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"part-takedown-01.img":{"frame":{"x":3910,"y":1637,"w":126,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":13,"w":126,"h":102},"sourceSize":{"w":128,"h":128}},"map-grill-01.img":{"frame":{"x":3910,"y":1743,"w":120,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":102},"sourceSize":{"w":128,"h":128}},"map-crate-06.img":{"frame":{"x":3442,"y":3005,"w":164,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":100},"sourceSize":{"w":164,"h":100}},"map-couch-01.img":{"frame":{"x":2,"y":3814,"w":288,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":96},"sourceSize":{"w":288,"h":96}},"map-couch-02.img":{"frame":{"x":294,"y":3814,"w":192,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-woodpile-01.img":{"frame":{"x":3910,"y":1849,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-bathrocks-01.img":{"frame":{"x":3910,"y":1949,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-couch-03.img":{"frame":{"x":3910,"y":2049,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-control-panel-06.img":{"frame":{"x":490,"y":3814,"w":192,"h":94},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":94},"sourceSize":{"w":192,"h":94}},"map-vending-soda-01.img":{"frame":{"x":3910,"y":2149,"w":108,"h":94},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-refrigerator-01.img":{"frame":{"x":3910,"y":2247,"w":108,"h":94},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-tree-res-02.img":{"frame":{"x":3910,"y":2345,"w":96,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":96,"h":94},"sourceSize":{"w":96,"h":96}},"map-control-panel-03.img":{"frame":{"x":3910,"y":2443,"w":96,"h":94},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":94},"sourceSize":{"w":96,"h":94}},"map-pot-03.img":{"frame":{"x":3910,"y":2541,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-04.img":{"frame":{"x":3910,"y":2639,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-02.img":{"frame":{"x":3910,"y":2737,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-05.img":{"frame":{"x":3910,"y":2835,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-01.img":{"frame":{"x":3910,"y":2933,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-decal-oil-03.img":{"frame":{"x":3910,"y":3031,"w":89,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":18,"w":89,"h":92},"sourceSize":{"w":128,"h":128}},"map-drawers-01.img":{"frame":{"x":686,"y":3814,"w":160,"h":90},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-drawers-02.img":{"frame":{"x":850,"y":3814,"w":160,"h":90},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-stand-01.img":{"frame":{"x":3910,"y":3127,"w":80,"h":90},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":90},"sourceSize":{"w":80,"h":90}},"map-crate-mil-04.img":{"frame":{"x":1014,"y":3814,"w":172,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-03.img":{"frame":{"x":1190,"y":3814,"w":172,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-02.img":{"frame":{"x":1366,"y":3814,"w":172,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-01.img":{"frame":{"x":1542,"y":3814,"w":172,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-05.img":{"frame":{"x":1718,"y":3814,"w":172,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-building-teahouse-floor-02.img":{"frame":{"x":3910,"y":3221,"w":128,"h":88},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":88},"sourceSize":{"w":128,"h":88}},"map-decal-oil-06.img":{"frame":{"x":3910,"y":3313,"w":94,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":21,"w":94,"h":86},"sourceSize":{"w":128,"h":128}},"map-couch-res-01.img":{"frame":{"x":3910,"y":3403,"w":79,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":79,"h":86},"sourceSize":{"w":96,"h":96}},"map-bunker-vent-01.img":{"frame":{"x":3910,"y":3493,"w":82,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":82,"h":84},"sourceSize":{"w":84,"h":84}},"map-vending-res.img":{"frame":{"x":3910,"y":3581,"w":93,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":93,"h":82},"sourceSize":{"w":108,"h":94}},"map-squash-res-01.img":{"frame":{"x":3910,"y":3667,"w":84,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":84,"h":81},"sourceSize":{"w":96,"h":96}},"map-pot-res-01.img":{"frame":{"x":3818,"y":2841,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":80,"h":80},"sourceSize":{"w":144,"h":144}},"map-piano-01.img":{"frame":{"x":1894,"y":3814,"w":240,"h":75},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":75},"sourceSize":{"w":240,"h":75}},"map-deposit-box-01.img":{"frame":{"x":2596,"y":966,"w":160,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-building-barn-ceiling-02.img":{"frame":{"x":262,"y":3664,"w":416,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":144},"sourceSize":{"w":416,"h":144}}}}]')
            , Rs = [{
            meta: {
                image: "halloween-0-100-cd0fab16.png",
                size: {
                    w: 2048,
                    h: 2048
                },
                scale: 1
            },
            frames: {
                "map-bunker-eye-compartment-floor-01.img": {
                    frame: {
                        x: 710,
                        y: 2,
                        w: 704,
                        h: 704
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 704,
                        h: 704
                    },
                    sourceSize: {
                        w: 704,
                        h: 704
                    }
                },
                "map-bunker-eye-chamber-floor-01a.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 704,
                        h: 1344
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 32,
                        w: 704,
                        h: 1344
                    },
                    sourceSize: {
                        w: 704,
                        h: 1376
                    }
                },
                "map-bunker-eye-chamber-ceiling-01.img": {
                    frame: {
                        x: 710,
                        y: 710,
                        w: 320,
                        h: 544
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 320,
                        h: 544
                    },
                    sourceSize: {
                        w: 320,
                        h: 544
                    }
                },
                "map-tree-08.img": {
                    frame: {
                        x: 1418,
                        y: 2,
                        w: 512,
                        h: 510
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 1,
                        w: 512,
                        h: 510
                    },
                    sourceSize: {
                        w: 512,
                        h: 512
                    }
                },
                "map-tree-08sp.img": {
                    frame: {
                        x: 1418,
                        y: 516,
                        w: 512,
                        h: 510
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 1,
                        w: 512,
                        h: 510
                    },
                    sourceSize: {
                        w: 512,
                        h: 512
                    }
                },
                "map-tree-05.img": {
                    frame: {
                        x: 2,
                        y: 1350,
                        w: 489,
                        h: 480
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 12,
                        y: 17,
                        w: 489,
                        h: 480
                    },
                    sourceSize: {
                        w: 512,
                        h: 512
                    }
                },
                "map-bunker-eye-compartment-ceiling-01.img": {
                    frame: {
                        x: 1034,
                        y: 710,
                        w: 320,
                        h: 320
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 320,
                        h: 320
                    },
                    sourceSize: {
                        w: 320,
                        h: 320
                    }
                },
                "map-tree-07.img": {
                    frame: {
                        x: 1418,
                        y: 1030,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-tree-07sp.img": {
                    frame: {
                        x: 495,
                        y: 1350,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-bunker-eye-chamber-floor-01b.img": {
                    frame: {
                        x: 1678,
                        y: 1030,
                        w: 192,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 192,
                        h: 256
                    },
                    sourceSize: {
                        w: 192,
                        h: 256
                    }
                },
                "map-bush-06.img": {
                    frame: {
                        x: 1034,
                        y: 1034,
                        w: 190,
                        h: 188
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 2,
                        w: 190,
                        h: 188
                    },
                    sourceSize: {
                        w: 192,
                        h: 192
                    }
                },
                "map-airdrop-01h.img": {
                    frame: {
                        x: 1228,
                        y: 1034,
                        w: 160,
                        h: 160
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 160
                    },
                    sourceSize: {
                        w: 160,
                        h: 160
                    }
                },
                "map-bush-res-06.img": {
                    frame: {
                        x: 1874,
                        y: 1030,
                        w: 50,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 47,
                        y: 48,
                        w: 50,
                        h: 48
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-web-01.img": {
                    frame: {
                        x: 919,
                        y: 1350,
                        w: 152,
                        h: 158
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 1,
                        w: 152,
                        h: 158
                    },
                    sourceSize: {
                        w: 152,
                        h: 160
                    }
                },
                "map-crate-11h.img": {
                    frame: {
                        x: 1075,
                        y: 1350,
                        w: 146,
                        h: 146
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 1,
                        w: 146,
                        h: 146
                    },
                    sourceSize: {
                        w: 148,
                        h: 148
                    }
                },
                "map-bush-07sp.img": {
                    frame: {
                        x: 1225,
                        y: 1350,
                        w: 135,
                        h: 143
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 6,
                        y: 0,
                        w: 135,
                        h: 143
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-pumpkin-02.img": {
                    frame: {
                        x: 1364,
                        y: 1350,
                        w: 140,
                        h: 140
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 140,
                        h: 140
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-pumpkin-01.img": {
                    frame: {
                        x: 1508,
                        y: 1350,
                        w: 140,
                        h: 140
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 140,
                        h: 140
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-pumpkin-res-01.img": {
                    frame: {
                        x: 1652,
                        y: 1350,
                        w: 135,
                        h: 132
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 8,
                        w: 135,
                        h: 132
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-tree-04h.img": {
                    frame: {
                        x: 1791,
                        y: 1350,
                        w: 112,
                        h: 112
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 112
                    },
                    sourceSize: {
                        w: 112,
                        h: 112
                    }
                },
                "map-pumpkin-03.img": {
                    frame: {
                        x: 495,
                        y: 1610,
                        w: 95,
                        h: 97
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 22,
                        y: 25,
                        w: 95,
                        h: 97
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "part-airdrop-01h.img": {
                    frame: {
                        x: 710,
                        y: 1258,
                        w: 88,
                        h: 88
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 4,
                        y: 4,
                        w: 88,
                        h: 88
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-pumpkin-res-03.img": {
                    frame: {
                        x: 802,
                        y: 1258,
                        w: 86,
                        h: 82
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 9,
                        w: 86,
                        h: 82
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "part-airdrop-02h.img": {
                    frame: {
                        x: 892,
                        y: 1258,
                        w: 80,
                        h: 80
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 80
                    },
                    sourceSize: {
                        w: 80,
                        h: 80
                    }
                },
                "map-airdrop-02h.img": {
                    frame: {
                        x: 755,
                        y: 1350,
                        w: 160,
                        h: 160
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 160
                    },
                    sourceSize: {
                        w: 160,
                        h: 160
                    }
                }
            }
        }]
            , Os = JSON.parse('[{"meta":{"image":"snow-0-100-23291c9e.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1701,"y":2,"w":767,"h":863},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":767,"h":863},"sourceSize":{"w":768,"h":864}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":2,"y":1454,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":710,"y":1454,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1514,"y":1454,"w":336,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":336,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2472,"y":2,"w":706,"h":738},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":2,"y":2256,"w":736,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":736,"h":656},"sourceSize":{"w":816,"h":720}},"map-building-greenhouse-floor-02.img":{"frame":{"x":742,"y":2256,"w":832,"h":642},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":642},"sourceSize":{"w":834,"h":642}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2472,"y":744,"w":704,"h":640},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":1578,"y":2256,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2,"y":2916,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":2472,"y":1388,"w":400,"h":624},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":624},"sourceSize":{"w":400,"h":624}},"map-bunker-hydra-floor-01.img":{"frame":{"x":936,"y":2916,"w":864,"h":608},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":2876,"y":1388,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-complex-warehouse-floor-02.img":{"frame":{"x":3108,"y":1388,"w":60,"h":528},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1701,"y":869,"w":703,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":703,"h":507},"sourceSize":{"w":704,"h":512}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1854,"y":1454,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1854,"y":1826,"w":320,"h":360},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":2212,"y":1454,"w":192,"h":350},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":2350,"y":2256,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":2674,"y":2256,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1804,"y":2916,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2350,"y":2604,"w":448,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2240,"y":2916,"w":400,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-stone-03x.img":{"frame":{"x":2178,"y":1826,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-planter-06.img":{"frame":{"x":3030,"y":2256,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":2802,"y":2604,"w":320,"h":270},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2644,"y":2916,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-tree-10.img":{"frame":{"x":1804,"y":3224,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":2062,"y":3224,"w":250,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":250,"h":248},"sourceSize":{"w":256,"h":256}},"map-chute-01x.img":{"frame":{"x":2472,"y":2016,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-bunker-generic-floor-03.img":{"frame":{"x":2708,"y":2016,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-snowball-res.img":{"frame":{"x":3622,"y":1008,"w":69,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":13,"w":69,"h":69},"sourceSize":{"w":96,"h":96}},"map-complex-warehouse-floor-03.img":{"frame":{"x":3036,"y":2016,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-01.img":{"frame":{"x":3100,"y":2016,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-snow-02.img":{"frame":{"x":2316,"y":3224,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":24,"w":208,"h":208},"sourceSize":{"w":256,"h":256}},"map-stone-res-02x.img":{"frame":{"x":2528,"y":3224,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-hydra-floor-04.img":{"frame":{"x":2732,"y":3224,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":2936,"y":3224,"w":193,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":193,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3000,"y":2916,"w":112,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":3182,"y":2,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-snow-03.img":{"frame":{"x":3182,"y":186,"w":312,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":8,"w":312,"h":176},"sourceSize":{"w":360,"h":192}},"map-snow-01.img":{"frame":{"x":3182,"y":366,"w":212,"h":173},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":41,"w":212,"h":173},"sourceSize":{"w":256,"h":256}},"map-table-02x.img":{"frame":{"x":3398,"y":366,"w":288,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-airdrop-01x.img":{"frame":{"x":3498,"y":186,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-03x.img":{"frame":{"x":3182,"y":543,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02x.img":{"frame":{"x":3346,"y":543,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-crate-01x.img":{"frame":{"x":3510,"y":543,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-stone-01x.img":{"frame":{"x":3182,"y":707,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":3337,"y":707,"w":160,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":160,"h":148},"sourceSize":{"w":228,"h":180}},"map-crate-03x.img":{"frame":{"x":3501,"y":707,"w":148,"h":148},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-02x.img":{"frame":{"x":3182,"y":860,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-planter-res-02.img":{"frame":{"x":3330,"y":860,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-bush-01x.img":{"frame":{"x":3410,"y":860,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-table-01x.img":{"frame":{"x":3182,"y":1008,"w":160,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-stone-res-01x.img":{"frame":{"x":3540,"y":860,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-snow-06.img":{"frame":{"x":3346,"y":1008,"w":178,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":178,"h":112},"sourceSize":{"w":192,"h":128}},"map-snow-05.img":{"frame":{"x":3528,"y":1008,"w":90,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":12,"w":90,"h":104},"sourceSize":{"w":128,"h":128}},"map-chest-03x.img":{"frame":{"x":3182,"y":1140,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-planter-07.img":{"frame":{"x":3326,"y":1140,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-snow-04.img":{"frame":{"x":3430,"y":1140,"w":100,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":100,"h":98},"sourceSize":{"w":128,"h":128}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":3182,"y":1246,"w":224,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":3410,"y":1246,"w":224,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-planter-res-03.img":{"frame":{"x":3534,"y":1140,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":2872,"y":2016,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}}}}]')
            , Bs = [{
            meta: {
                image: "faction-0-100-99af9e64.png",
                size: {
                    w: 4096,
                    h: 4096
                },
                scale: 1
            },
            frames: {
                "map-building-bridge-xlg-floor.img": {
                    frame: {
                        x: 1302,
                        y: 2,
                        w: 2464,
                        h: 960
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 2464,
                        h: 960
                    },
                    sourceSize: {
                        w: 2464,
                        h: 960
                    }
                },
                "map-complex-warehouse-floor-04.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 1296,
                        h: 2048
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 1296,
                        h: 2048
                    },
                    sourceSize: {
                        w: 1296,
                        h: 2048
                    }
                },
                "map-bunker-chrys-compartment-floor-03a.img": {
                    frame: {
                        x: 1302,
                        y: 966,
                        w: 767,
                        h: 863
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 1,
                        w: 767,
                        h: 863
                    },
                    sourceSize: {
                        w: 768,
                        h: 864
                    }
                },
                "map-bunker-chrys-compartment-floor-01b.img": {
                    frame: {
                        x: 2073,
                        y: 966,
                        w: 800,
                        h: 772
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 800,
                        h: 772
                    },
                    sourceSize: {
                        w: 804,
                        h: 804
                    }
                },
                "map-building-greenhouse-floor-01.img": {
                    frame: {
                        x: 2877,
                        y: 966,
                        w: 832,
                        h: 641
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 0,
                        w: 832,
                        h: 641
                    },
                    sourceSize: {
                        w: 834,
                        h: 642
                    }
                },
                "map-bunker-chrys-compartment-floor-02a.img": {
                    frame: {
                        x: 2,
                        y: 2054,
                        w: 768,
                        h: 628
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 768,
                        h: 628
                    },
                    sourceSize: {
                        w: 772,
                        h: 628
                    }
                },
                "map-bunker-chrys-chamber-floor-01b.img": {
                    frame: {
                        x: 774,
                        y: 2054,
                        w: 930,
                        h: 626
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 930,
                        h: 626
                    },
                    sourceSize: {
                        w: 932,
                        h: 628
                    }
                },
                "map-bunker-chrys-compartment-floor-01a.img": {
                    frame: {
                        x: 1708,
                        y: 2054,
                        w: 228,
                        h: 608
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 34,
                        w: 228,
                        h: 608
                    },
                    sourceSize: {
                        w: 228,
                        h: 644
                    }
                },
                "map-complex-warehouse-floor-02.img": {
                    frame: {
                        x: 1940,
                        y: 2054,
                        w: 60,
                        h: 528
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 528
                    },
                    sourceSize: {
                        w: 60,
                        h: 528
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01b.img": {
                    frame: {
                        x: 2004,
                        y: 2054,
                        w: 354,
                        h: 368
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 2,
                        w: 354,
                        h: 368
                    },
                    sourceSize: {
                        w: 356,
                        h: 372
                    }
                },
                "map-building-greenhouse-ceiling-01.img": {
                    frame: {
                        x: 2362,
                        y: 2054,
                        w: 400,
                        h: 314
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 400,
                        h: 314
                    },
                    sourceSize: {
                        w: 404,
                        h: 316
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03b.img": {
                    frame: {
                        x: 2766,
                        y: 2054,
                        w: 352,
                        h: 306
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 352,
                        h: 306
                    },
                    sourceSize: {
                        w: 356,
                        h: 308
                    }
                },
                "map-statue-01.img": {
                    frame: {
                        x: 3122,
                        y: 2054,
                        w: 282,
                        h: 282
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 67,
                        y: 67,
                        w: 282,
                        h: 282
                    },
                    sourceSize: {
                        w: 416,
                        h: 416
                    }
                },
                "map-bunker-chrys-chamber-ceiling-01.img": {
                    frame: {
                        x: 2,
                        y: 2686,
                        w: 448,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 448,
                        h: 272
                    },
                    sourceSize: {
                        w: 448,
                        h: 272
                    }
                },
                "map-stone-03f.img": {
                    frame: {
                        x: 3408,
                        y: 2054,
                        w: 276,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 6,
                        y: 8,
                        w: 276,
                        h: 272
                    },
                    sourceSize: {
                        w: 288,
                        h: 288
                    }
                },
                "map-planter-03.img": {
                    frame: {
                        x: 454,
                        y: 2686,
                        w: 144,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 272
                    },
                    sourceSize: {
                        w: 144,
                        h: 272
                    }
                },
                "map-planter-01.img": {
                    frame: {
                        x: 602,
                        y: 2686,
                        w: 144,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 272
                    },
                    sourceSize: {
                        w: 144,
                        h: 272
                    }
                },
                "map-planter-02.img": {
                    frame: {
                        x: 750,
                        y: 2686,
                        w: 144,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 272
                    },
                    sourceSize: {
                        w: 144,
                        h: 272
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02b.img": {
                    frame: {
                        x: 898,
                        y: 2686,
                        w: 352,
                        h: 258
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 352,
                        h: 258
                    },
                    sourceSize: {
                        w: 356,
                        h: 260
                    }
                },
                "map-airdrop-04.img": {
                    frame: {
                        x: 1254,
                        y: 2686,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03a.img": {
                    frame: {
                        x: 3457,
                        y: 1611,
                        w: 224,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 224,
                        h: 96
                    },
                    sourceSize: {
                        w: 224,
                        h: 96
                    }
                },
                "map-crate-13.img": {
                    frame: {
                        x: 1774,
                        y: 2686,
                        w: 240,
                        h: 240
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 240,
                        h: 240
                    },
                    sourceSize: {
                        w: 240,
                        h: 240
                    }
                },
                "map-crate-12.img": {
                    frame: {
                        x: 2018,
                        y: 2686,
                        w: 240,
                        h: 240
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 240,
                        h: 240
                    },
                    sourceSize: {
                        w: 240,
                        h: 240
                    }
                },
                "map-bunker-generic-ceiling-02.img": {
                    frame: {
                        x: 2262,
                        y: 2686,
                        w: 160,
                        h: 230
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 230
                    },
                    sourceSize: {
                        w: 160,
                        h: 230
                    }
                },
                "map-bunker-generic-floor-03.img": {
                    frame: {
                        x: 2426,
                        y: 2686,
                        w: 160,
                        h: 230
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 230
                    },
                    sourceSize: {
                        w: 160,
                        h: 230
                    }
                },
                "map-complex-warehouse-floor-03.img": {
                    frame: {
                        x: 3688,
                        y: 2054,
                        w: 60,
                        h: 224
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 224
                    },
                    sourceSize: {
                        w: 60,
                        h: 224
                    }
                },
                "map-complex-warehouse-floor-01.img": {
                    frame: {
                        x: 2590,
                        y: 2686,
                        w: 60,
                        h: 224
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 224
                    },
                    sourceSize: {
                        w: 60,
                        h: 224
                    }
                },
                "map-stone-res-02f.img": {
                    frame: {
                        x: 1302,
                        y: 1833,
                        w: 200,
                        h: 200
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 200,
                        h: 200
                    },
                    sourceSize: {
                        w: 200,
                        h: 200
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01a.img": {
                    frame: {
                        x: 1506,
                        y: 1833,
                        w: 112,
                        h: 192
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 192
                    },
                    sourceSize: {
                        w: 112,
                        h: 192
                    }
                },
                "map-bunker-chrys-compartment-floor-02b.img": {
                    frame: {
                        x: 1622,
                        y: 1833,
                        w: 512,
                        h: 180
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 18,
                        y: 0,
                        w: 512,
                        h: 180
                    },
                    sourceSize: {
                        w: 548,
                        h: 180
                    }
                },
                "map-bunker-chrys-chamber-floor-01a.img": {
                    frame: {
                        x: 2138,
                        y: 1833,
                        w: 160,
                        h: 148
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 34,
                        y: 32,
                        w: 160,
                        h: 148
                    },
                    sourceSize: {
                        w: 228,
                        h: 180
                    }
                },
                "map-crate-02f.img": {
                    frame: {
                        x: 2302,
                        y: 1833,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-crate-22.img": {
                    frame: {
                        x: 2450,
                        y: 1833,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-statue-top-02.img": {
                    frame: {
                        x: 2598,
                        y: 1833,
                        w: 279,
                        h: 142
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 131,
                        y: 133,
                        w: 279,
                        h: 142
                    },
                    sourceSize: {
                        w: 416,
                        h: 416
                    }
                },
                "map-statue-top-01.img": {
                    frame: {
                        x: 2881,
                        y: 1833,
                        w: 279,
                        h: 142
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 131,
                        y: 133,
                        w: 279,
                        h: 142
                    },
                    sourceSize: {
                        w: 416,
                        h: 416
                    }
                },
                "map-planter-res-01.img": {
                    frame: {
                        x: 3164,
                        y: 1833,
                        w: 76,
                        h: 134
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 1,
                        w: 76,
                        h: 134
                    },
                    sourceSize: {
                        w: 86,
                        h: 136
                    }
                },
                "map-chest-03f.img": {
                    frame: {
                        x: 2877,
                        y: 1611,
                        w: 140,
                        h: 102
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 140,
                        h: 102
                    },
                    sourceSize: {
                        w: 140,
                        h: 102
                    }
                },
                "map-planter-04.img": {
                    frame: {
                        x: 3021,
                        y: 1611,
                        w: 100,
                        h: 100
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 100,
                        h: 100
                    },
                    sourceSize: {
                        w: 100,
                        h: 100
                    }
                },
                "map-planter-05.img": {
                    frame: {
                        x: 3125,
                        y: 1611,
                        w: 100,
                        h: 100
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 100,
                        h: 100
                    },
                    sourceSize: {
                        w: 100,
                        h: 100
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02a.img": {
                    frame: {
                        x: 3229,
                        y: 1611,
                        w: 224,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 224,
                        h: 96
                    },
                    sourceSize: {
                        w: 224,
                        h: 96
                    }
                },
                "map-airdrop-03.img": {
                    frame: {
                        x: 1514,
                        y: 2686,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                }
            }
        }]
            , Ns = [{
            meta: {
                image: "desert-0-100-9f8523dd.png",
                size: {
                    w: 4096,
                    h: 4096
                },
                scale: 1
            },
            frames: {
                "map-complex-warehouse-floor-05.img": {
                    frame: {
                        x: 1318,
                        y: 2,
                        w: 522,
                        h: 932
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 1008,
                        w: 522,
                        h: 932
                    },
                    sourceSize: {
                        w: 1296,
                        h: 2048
                    }
                },
                "map-building-saloon-floor-01.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 1312,
                        h: 1312
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 1312,
                        h: 1312
                    },
                    sourceSize: {
                        w: 1312,
                        h: 1312
                    }
                },
                "map-bunker-chrys-compartment-floor-03a.img": {
                    frame: {
                        x: 1844,
                        y: 2,
                        w: 767,
                        h: 863
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 1,
                        w: 767,
                        h: 863
                    },
                    sourceSize: {
                        w: 768,
                        h: 864
                    }
                },
                "map-bunker-chrys-compartment-floor-01c.img": {
                    frame: {
                        x: 2,
                        y: 1318,
                        w: 800,
                        h: 772
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 800,
                        h: 772
                    },
                    sourceSize: {
                        w: 804,
                        h: 804
                    }
                },
                "map-building-saloon-cellar-01.img": {
                    frame: {
                        x: 806,
                        y: 1318,
                        w: 1056,
                        h: 672
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 1056,
                        h: 672
                    },
                    sourceSize: {
                        w: 1056,
                        h: 672
                    }
                },
                "map-building-greenhouse-floor-02.img": {
                    frame: {
                        x: 2615,
                        y: 2,
                        w: 832,
                        h: 642
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 0,
                        w: 832,
                        h: 642
                    },
                    sourceSize: {
                        w: 834,
                        h: 642
                    }
                },
                "map-bunker-chrys-compartment-floor-02a.img": {
                    frame: {
                        x: 2615,
                        y: 648,
                        w: 768,
                        h: 628
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 768,
                        h: 628
                    },
                    sourceSize: {
                        w: 772,
                        h: 628
                    }
                },
                "map-bunker-chrys-chamber-floor-01b.img": {
                    frame: {
                        x: 2,
                        y: 2094,
                        w: 930,
                        h: 626
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 930,
                        h: 626
                    },
                    sourceSize: {
                        w: 932,
                        h: 628
                    }
                },
                "map-building-saloon-ceiling-01.img": {
                    frame: {
                        x: 2615,
                        y: 1280,
                        w: 625,
                        h: 624
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 625,
                        h: 624
                    },
                    sourceSize: {
                        w: 656,
                        h: 656
                    }
                },
                "map-building-greenhouse-ceiling-02.img": {
                    frame: {
                        x: 1866,
                        y: 1318,
                        w: 400,
                        h: 624
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 400,
                        h: 624
                    },
                    sourceSize: {
                        w: 400,
                        h: 624
                    }
                },
                "map-bunker-chrys-compartment-floor-01a.img": {
                    frame: {
                        x: 2270,
                        y: 1318,
                        w: 228,
                        h: 608
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 34,
                        w: 228,
                        h: 608
                    },
                    sourceSize: {
                        w: 228,
                        h: 644
                    }
                },
                "map-bunker-statue-chamber-floor-01.img": {
                    frame: {
                        x: 936,
                        y: 2094,
                        w: 250,
                        h: 541
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 32,
                        w: 250,
                        h: 541
                    },
                    sourceSize: {
                        w: 256,
                        h: 576
                    }
                },
                "map-tree-05c.img": {
                    frame: {
                        x: 1190,
                        y: 2094,
                        w: 470,
                        h: 492
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 21,
                        y: 10,
                        w: 470,
                        h: 492
                    },
                    sourceSize: {
                        w: 512,
                        h: 512
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01b.img": {
                    frame: {
                        x: 1844,
                        y: 869,
                        w: 354,
                        h: 368
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 2,
                        w: 354,
                        h: 368
                    },
                    sourceSize: {
                        w: 356,
                        h: 372
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03b.img": {
                    frame: {
                        x: 2202,
                        y: 869,
                        w: 352,
                        h: 306
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 352,
                        h: 306
                    },
                    sourceSize: {
                        w: 356,
                        h: 308
                    }
                },
                "map-statue-03.img": {
                    frame: {
                        x: 1318,
                        y: 938,
                        w: 288,
                        h: 282
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 67,
                        y: 67,
                        w: 288,
                        h: 282
                    },
                    sourceSize: {
                        w: 416,
                        h: 416
                    }
                },
                "map-statue-04.img": {
                    frame: {
                        x: 1664,
                        y: 2094,
                        w: 288,
                        h: 282
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 67,
                        y: 67,
                        w: 288,
                        h: 282
                    },
                    sourceSize: {
                        w: 416,
                        h: 416
                    }
                },
                "map-bunker-chrys-chamber-ceiling-01.img": {
                    frame: {
                        x: 1956,
                        y: 2094,
                        w: 448,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 448,
                        h: 272
                    },
                    sourceSize: {
                        w: 448,
                        h: 272
                    }
                },
                "map-stone-03b.img": {
                    frame: {
                        x: 2408,
                        y: 2094,
                        w: 276,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 6,
                        y: 8,
                        w: 276,
                        h: 272
                    },
                    sourceSize: {
                        w: 288,
                        h: 288
                    }
                },
                "map-planter-06.img": {
                    frame: {
                        x: 3244,
                        y: 1280,
                        w: 144,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 272
                    },
                    sourceSize: {
                        w: 144,
                        h: 272
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02b.img": {
                    frame: {
                        x: 2688,
                        y: 2094,
                        w: 352,
                        h: 258
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 352,
                        h: 258
                    },
                    sourceSize: {
                        w: 356,
                        h: 260
                    }
                },
                "map-tree-06.img": {
                    frame: {
                        x: 3044,
                        y: 2094,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-bush-res-05.img": {
                    frame: {
                        x: 3387,
                        y: 648,
                        w: 56,
                        h: 50
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 44,
                        y: 47,
                        w: 56,
                        h: 50
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bunker-generic-floor-03.img": {
                    frame: {
                        x: 1610,
                        y: 938,
                        w: 160,
                        h: 230
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 230
                    },
                    sourceSize: {
                        w: 160,
                        h: 230
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01a.img": {
                    frame: {
                        x: 3304,
                        y: 2094,
                        w: 112,
                        h: 192
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 192
                    },
                    sourceSize: {
                        w: 112,
                        h: 192
                    }
                },
                "map-bunker-chrys-compartment-floor-02c.img": {
                    frame: {
                        x: 2615,
                        y: 1908,
                        w: 512,
                        h: 180
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 18,
                        y: 0,
                        w: 512,
                        h: 180
                    },
                    sourceSize: {
                        w: 548,
                        h: 180
                    }
                },
                "map-building-saloon-ceiling-02.img": {
                    frame: {
                        x: 3131,
                        y: 1908,
                        w: 192,
                        h: 160
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 192,
                        h: 160
                    },
                    sourceSize: {
                        w: 192,
                        h: 160
                    }
                },
                "map-bunker-chrys-chamber-floor-01a.img": {
                    frame: {
                        x: 1664,
                        y: 2380,
                        w: 160,
                        h: 148
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 34,
                        y: 32,
                        w: 160,
                        h: 148
                    },
                    sourceSize: {
                        w: 228,
                        h: 180
                    }
                },
                "map-crate-22.img": {
                    frame: {
                        x: 1828,
                        y: 2380,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-crate-02f.img": {
                    frame: {
                        x: 1976,
                        y: 2380,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-crate-18.img": {
                    frame: {
                        x: 2124,
                        y: 2380,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bush-05.img": {
                    frame: {
                        x: 2272,
                        y: 2380,
                        w: 140,
                        h: 139
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 140,
                        h: 139
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-planter-res-02.img": {
                    frame: {
                        x: 3327,
                        y: 1908,
                        w: 76,
                        h: 134
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 1,
                        w: 76,
                        h: 134
                    },
                    sourceSize: {
                        w: 86,
                        h: 136
                    }
                },
                "map-building-archway-ceiling-01.img": {
                    frame: {
                        x: 2416,
                        y: 2380,
                        w: 672,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 672,
                        h: 128
                    },
                    sourceSize: {
                        w: 672,
                        h: 128
                    }
                },
                "map-stone-06.img": {
                    frame: {
                        x: 3092,
                        y: 2380,
                        w: 288,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 288,
                        h: 128
                    },
                    sourceSize: {
                        w: 288,
                        h: 128
                    }
                },
                "map-stone-res-01b.img": {
                    frame: {
                        x: 2,
                        y: 2724,
                        w: 118,
                        h: 118
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 1,
                        w: 118,
                        h: 118
                    },
                    sourceSize: {
                        w: 120,
                        h: 120
                    }
                },
                "map-case-meteor-res-01.img": {
                    frame: {
                        x: 124,
                        y: 2724,
                        w: 128,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 13,
                        y: 10,
                        w: 128,
                        h: 115
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-chest-03d.img": {
                    frame: {
                        x: 3244,
                        y: 1790,
                        w: 140,
                        h: 102
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 140,
                        h: 102
                    },
                    sourceSize: {
                        w: 140,
                        h: 102
                    }
                },
                "map-case-meteor-01.img": {
                    frame: {
                        x: 256,
                        y: 2724,
                        w: 140,
                        h: 102
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 140,
                        h: 102
                    },
                    sourceSize: {
                        w: 140,
                        h: 102
                    }
                },
                "map-planter-07.img": {
                    frame: {
                        x: 2502,
                        y: 1318,
                        w: 100,
                        h: 100
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 100,
                        h: 100
                    },
                    sourceSize: {
                        w: 100,
                        h: 100
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02a.img": {
                    frame: {
                        x: 806,
                        y: 1994,
                        w: 224,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 224,
                        h: 96
                    },
                    sourceSize: {
                        w: 224,
                        h: 96
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03a.img": {
                    frame: {
                        x: 1034,
                        y: 1994,
                        w: 224,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 224,
                        h: 96
                    },
                    sourceSize: {
                        w: 224,
                        h: 96
                    }
                },
                "map-archway-res-01.img": {
                    frame: {
                        x: 1318,
                        y: 1224,
                        w: 359,
                        h: 90
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 2,
                        w: 359,
                        h: 90
                    },
                    sourceSize: {
                        w: 360,
                        h: 96
                    }
                },
                "map-planter-res-03.img": {
                    frame: {
                        x: 1681,
                        y: 1224,
                        w: 82,
                        h: 74
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 6,
                        w: 82,
                        h: 74
                    },
                    sourceSize: {
                        w: 86,
                        h: 86
                    }
                },
                "map-bunker-generic-ceiling-02.img": {
                    frame: {
                        x: 3244,
                        y: 1556,
                        w: 160,
                        h: 230
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 230
                    },
                    sourceSize: {
                        w: 160,
                        h: 230
                    }
                }
            }
        }]
            , Fs = [{
            meta: {
                image: "gradient-0-100-51ab76b6.png",
                size: {
                    w: 1024,
                    h: 1024
                },
                scale: 1
            },
            frames: {
                "map-barrel-res-01.img": {
                    frame: {
                        x: 238,
                        y: 2,
                        w: 226,
                        h: 216
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 15,
                        y: 21,
                        w: 226,
                        h: 216
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-building-club-gradient-01.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 232,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 34,
                        y: 10,
                        w: 232,
                        h: 256
                    },
                    sourceSize: {
                        w: 292,
                        h: 280
                    }
                },
                "map-building-mansion-gradient-01.img": {
                    frame: {
                        x: 2,
                        y: 262,
                        w: 232,
                        h: 202
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 8,
                        y: 9,
                        w: 232,
                        h: 202
                    },
                    sourceSize: {
                        w: 248,
                        h: 220
                    }
                },
                "map-plane-01.img": {
                    frame: {
                        x: 238,
                        y: 262,
                        w: 180,
                        h: 201
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 38,
                        y: 11,
                        w: 180,
                        h: 201
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-plane-02.img": {
                    frame: {
                        x: 468,
                        y: 2,
                        w: 84,
                        h: 169
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 86,
                        y: 2,
                        w: 84,
                        h: 169
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-bush-04cb.img": {
                    frame: {
                        x: 272,
                        y: 468,
                        w: 136,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 7,
                        y: 11,
                        w: 136,
                        h: 128
                    },
                    sourceSize: {
                        w: 150,
                        h: 150
                    }
                },
                "map-bush-01cb.img": {
                    frame: {
                        x: 556,
                        y: 158,
                        w: 142,
                        h: 142
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 1,
                        w: 142,
                        h: 142
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-light-01.img": {
                    frame: {
                        x: 556,
                        y: 304,
                        w: 140,
                        h: 140
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 140,
                        h: 140
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bush-04.img": {
                    frame: {
                        x: 2,
                        y: 468,
                        w: 136,
                        h: 130
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 7,
                        y: 9,
                        w: 136,
                        h: 130
                    },
                    sourceSize: {
                        w: 150,
                        h: 150
                    }
                },
                "map-bush-01.img": {
                    frame: {
                        x: 142,
                        y: 468,
                        w: 126,
                        h: 130
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 8,
                        y: 7,
                        w: 126,
                        h: 130
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bush-03.img": {
                    frame: {
                        x: 556,
                        y: 2,
                        w: 148,
                        h: 152
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 0,
                        w: 148,
                        h: 152
                    },
                    sourceSize: {
                        w: 152,
                        h: 152
                    }
                }
            }
        }]
            , qs = [{
            meta: {
                image: "savannah-0-100-35753cd3.png",
                size: {
                    w: 2048,
                    h: 2048
                },
                scale: 1
            },
            frames: {
                "map-tree-12.img": {
                    frame: {
                        x: 66,
                        y: 2,
                        w: 508,
                        h: 508
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 508,
                        h: 508
                    },
                    sourceSize: {
                        w: 512,
                        h: 512
                    }
                },
                "map-complex-warehouse-floor-02.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 60,
                        h: 528
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 528
                    },
                    sourceSize: {
                        w: 60,
                        h: 528
                    }
                },
                "map-stone-07.img": {
                    frame: {
                        x: 578,
                        y: 2,
                        w: 504,
                        h: 506
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 4,
                        y: 3,
                        w: 504,
                        h: 506
                    },
                    sourceSize: {
                        w: 512,
                        h: 512
                    }
                },
                "map-stone-res-07.img": {
                    frame: {
                        x: 2,
                        y: 534,
                        w: 410,
                        h: 412
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 4,
                        w: 410,
                        h: 412
                    },
                    sourceSize: {
                        w: 420,
                        h: 420
                    }
                },
                "map-building-perch-ceiling.img": {
                    frame: {
                        x: 416,
                        y: 534,
                        w: 363,
                        h: 345
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 14,
                        y: 23,
                        w: 363,
                        h: 345
                    },
                    sourceSize: {
                        w: 400,
                        h: 384
                    }
                },
                "map-building-perch-floor.img": {
                    frame: {
                        x: 1086,
                        y: 2,
                        w: 400,
                        h: 320
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 400,
                        h: 320
                    },
                    sourceSize: {
                        w: 400,
                        h: 320
                    }
                },
                "map-tree-03sv.img": {
                    frame: {
                        x: 1086,
                        y: 326,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-wall-08-grassy.img": {
                    frame: {
                        x: 1346,
                        y: 326,
                        w: 45,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 0,
                        w: 45,
                        h: 256
                    },
                    sourceSize: {
                        w: 64,
                        h: 256
                    }
                },
                "map-wall-08-grassy-res.img": {
                    frame: {
                        x: 1395,
                        y: 326,
                        w: 20,
                        h: 252
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 22,
                        y: 2,
                        w: 20,
                        h: 252
                    },
                    sourceSize: {
                        w: 64,
                        h: 256
                    }
                },
                "map-bunker-generic-ceiling-02.img": {
                    frame: {
                        x: 1086,
                        y: 586,
                        w: 160,
                        h: 230
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 230
                    },
                    sourceSize: {
                        w: 160,
                        h: 230
                    }
                },
                "map-bunker-generic-floor-03.img": {
                    frame: {
                        x: 1250,
                        y: 586,
                        w: 160,
                        h: 230
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 230
                    },
                    sourceSize: {
                        w: 160,
                        h: 230
                    }
                },
                "map-complex-warehouse-floor-01.img": {
                    frame: {
                        x: 1419,
                        y: 326,
                        w: 60,
                        h: 224
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 224
                    },
                    sourceSize: {
                        w: 60,
                        h: 224
                    }
                },
                "map-bush-res-01sv.img": {
                    frame: {
                        x: 1398,
                        y: 820,
                        w: 44,
                        h: 34
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 50,
                        y: 55,
                        w: 44,
                        h: 34
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-brush-01sv.img": {
                    frame: {
                        x: 783,
                        y: 534,
                        w: 186,
                        h: 184
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 4,
                        w: 186,
                        h: 184
                    },
                    sourceSize: {
                        w: 192,
                        h: 192
                    }
                },
                "map-brush-02sv.img": {
                    frame: {
                        x: 2,
                        y: 950,
                        w: 182,
                        h: 182
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 5,
                        w: 182,
                        h: 182
                    },
                    sourceSize: {
                        w: 192,
                        h: 192
                    }
                },
                "map-perch-res-01.img": {
                    frame: {
                        x: 783,
                        y: 722,
                        w: 176,
                        h: 156
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 40,
                        y: 50,
                        w: 176,
                        h: 156
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-crate-21.img": {
                    frame: {
                        x: 188,
                        y: 950,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bush-01sv.img": {
                    frame: {
                        x: 336,
                        y: 950,
                        w: 140,
                        h: 140
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 140,
                        h: 140
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-propane-01.img": {
                    frame: {
                        x: 1086,
                        y: 820,
                        w: 96,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 96,
                        h: 96
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-wall-03-grassy.img": {
                    frame: {
                        x: 1186,
                        y: 820,
                        w: 34,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 15,
                        y: 0,
                        w: 34,
                        h: 96
                    },
                    sourceSize: {
                        w: 64,
                        h: 96
                    }
                },
                "map-wall-03-grassy-res.img": {
                    frame: {
                        x: 1224,
                        y: 820,
                        w: 21,
                        h: 92
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 21,
                        y: 2,
                        w: 21,
                        h: 92
                    },
                    sourceSize: {
                        w: 64,
                        h: 96
                    }
                },
                "map-tree-res-12.img": {
                    frame: {
                        x: 1249,
                        y: 820,
                        w: 79,
                        h: 70
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 8,
                        y: 13,
                        w: 79,
                        h: 70
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-brush-res-02sv.img": {
                    frame: {
                        x: 1332,
                        y: 820,
                        w: 62,
                        h: 62
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 17,
                        y: 17,
                        w: 62,
                        h: 62
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-complex-warehouse-floor-03.img": {
                    frame: {
                        x: 1414,
                        y: 586,
                        w: 60,
                        h: 224
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 224
                    },
                    sourceSize: {
                        w: 60,
                        h: 224
                    }
                }
            }
        }]
            , js = JSON.parse('[{"meta":{"image":"main-0-100-075ad988.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1701,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2,"y":1454,"w":767,"h":863},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":767,"h":863},"sourceSize":{"w":768,"h":864}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":773,"y":1454,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":1481,"y":1454,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2285,"y":1454,"w":336,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":336,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2321,"w":706,"h":738},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":712,"y":2321,"w":736,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":736,"h":656},"sourceSize":{"w":816,"h":720}},"map-building-greenhouse-floor-01.img":{"frame":{"x":1452,"y":2321,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2288,"y":2321,"w":704,"h":640},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":3209,"y":2,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2,"y":3063,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-bunker-hydra-floor-01.img":{"frame":{"x":936,"y":3063,"w":864,"h":608},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":3209,"y":634,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3531,"y":634,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-complex-warehouse-floor-02.img":{"frame":{"x":3763,"y":634,"w":60,"h":528},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3209,"y":1246,"w":703,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":703,"h":507},"sourceSize":{"w":704,"h":512}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":3209,"y":1757,"w":720,"h":496},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":3209,"y":2257,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":3567,"y":2257,"w":320,"h":360},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":1804,"y":3063,"w":1828,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1828,"h":352},"sourceSize":{"w":1830,"h":354}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":3209,"y":2629,"w":192,"h":350},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":3405,"y":2629,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1701,"y":934,"w":320,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":2025,"y":934,"w":400,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":400,"h":314},"sourceSize":{"w":404,"h":316}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":2429,"y":934,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":2625,"y":1454,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":2609,"y":1258,"w":224,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2625,"y":1762,"w":448,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2785,"y":934,"w":400,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-planter-03.img":{"frame":{"x":3729,"y":2629,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":3061,"y":1454,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-01.img":{"frame":{"x":2996,"y":2321,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":3636,"y":3063,"w":320,"h":270},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2,"y":3693,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":358,"y":3693,"w":704,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":253},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1804,"y":3419,"w":704,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":323,"w":704,"h":250},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2512,"y":3419,"w":1136,"h":240},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":2996,"y":2597,"w":192,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":192,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":3652,"y":3419,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":3816,"y":3419,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-complex-warehouse-floor-01.img":{"frame":{"x":3916,"y":1246,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-03.img":{"frame":{"x":3916,"y":1474,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1066,"y":3693,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":1270,"y":3693,"w":574,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":574,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1848,"y":3693,"w":193,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":193,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":2045,"y":3693,"w":192,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":192,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3827,"y":942,"w":112,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":1701,"y":1258,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":2217,"y":1258,"w":160,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":160,"h":148},"sourceSize":{"w":228,"h":180}},"map-planter-res-01.img":{"frame":{"x":3891,"y":2257,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-04.img":{"frame":{"x":3877,"y":2629,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-05.img":{"frame":{"x":3877,"y":2733,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":2381,"y":1258,"w":224,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":3827,"y":634,"w":128,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}}}}]')
            , Vs = JSON.parse('[{"meta":{"image":"potato-0-100-9e6e65b1.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1701,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2,"y":1454,"w":767,"h":863},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":767,"h":863},"sourceSize":{"w":768,"h":864}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":773,"y":1454,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":1481,"y":1454,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2285,"y":1454,"w":336,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":336,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2321,"w":706,"h":738},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":712,"y":2321,"w":736,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":736,"h":656},"sourceSize":{"w":816,"h":720}},"map-building-greenhouse-floor-01.img":{"frame":{"x":1452,"y":2321,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2288,"y":2321,"w":704,"h":640},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":3209,"y":2,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2,"y":3063,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-bunker-hydra-floor-01.img":{"frame":{"x":936,"y":3063,"w":864,"h":608},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":3209,"y":634,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3531,"y":634,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-complex-warehouse-floor-02.img":{"frame":{"x":3763,"y":634,"w":60,"h":528},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3209,"y":1246,"w":703,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":703,"h":507},"sourceSize":{"w":704,"h":512}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":3209,"y":1757,"w":720,"h":496},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":3209,"y":2257,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":3567,"y":2257,"w":320,"h":360},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":1804,"y":3063,"w":1828,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1828,"h":352},"sourceSize":{"w":1830,"h":354}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":3209,"y":2629,"w":192,"h":350},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":3405,"y":2629,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1701,"y":934,"w":320,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":2025,"y":934,"w":400,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":400,"h":314},"sourceSize":{"w":404,"h":316}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":2429,"y":934,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":2625,"y":1454,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":3827,"y":634,"w":128,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2625,"y":1762,"w":448,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-potato-03.img":{"frame":{"x":3891,"y":2482,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}},"map-planter-03.img":{"frame":{"x":3729,"y":2629,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":3061,"y":1454,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-01.img":{"frame":{"x":2996,"y":2321,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":3636,"y":3063,"w":320,"h":270},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2,"y":3693,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":358,"y":3693,"w":704,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":253},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1804,"y":3419,"w":704,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":323,"w":704,"h":250},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2512,"y":3419,"w":1136,"h":240},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":2996,"y":2597,"w":192,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":192,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-03.img":{"frame":{"x":3652,"y":3419,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":3816,"y":3419,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-complex-warehouse-floor-01.img":{"frame":{"x":3916,"y":1246,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-03.img":{"frame":{"x":3916,"y":1474,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1066,"y":3693,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":1270,"y":3693,"w":574,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":574,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1848,"y":3693,"w":193,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":193,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":2045,"y":3693,"w":192,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":192,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3827,"y":942,"w":112,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":1701,"y":1258,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":2217,"y":1258,"w":160,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":160,"h":148},"sourceSize":{"w":228,"h":180}},"map-planter-res-01.img":{"frame":{"x":3891,"y":2257,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-05.img":{"frame":{"x":3877,"y":2629,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-04.img":{"frame":{"x":3877,"y":2733,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":2381,"y":1258,"w":224,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":2609,"y":1258,"w":224,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-potato-res-01.img":{"frame":{"x":3891,"y":2395,"w":85,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":29,"y":36,"w":85,"h":83},"sourceSize":{"w":144,"h":144}},"map-potato-01.img":{"frame":{"x":3763,"y":1166,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}},"map-potato-02.img":{"frame":{"x":3839,"y":1166,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2785,"y":934,"w":400,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}}}}]')
            , Gs = JSON.parse('[{"meta":{"image":"woods-0-100-49fced28.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":710,"y":2,"w":1184,"h":924},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1184,"h":924},"sourceSize":{"w":1184,"h":928}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":704,"h":1344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":1344},"sourceSize":{"w":704,"h":1376}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":1898,"y":2,"w":704,"h":704},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":704},"sourceSize":{"w":704,"h":704}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":1350,"w":728,"h":696},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":728,"h":696},"sourceSize":{"w":738,"h":706}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":734,"y":1350,"w":254,"h":654},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":254,"h":654},"sourceSize":{"w":258,"h":674}},"map-building-pavilion-ceiling-01.img":{"frame":{"x":1898,"y":710,"w":623,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":623,"h":608},"sourceSize":{"w":640,"h":640}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":992,"y":1350,"w":898,"h":590},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":898,"h":590},"sourceSize":{"w":898,"h":594}},"map-building-pavilion-floor-01.img":{"frame":{"x":1894,"y":1350,"w":576,"h":576},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":576,"h":576},"sourceSize":{"w":576,"h":576}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":2,"y":2050,"w":320,"h":544},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":544},"sourceSize":{"w":320,"h":544}},"map-tree-08.img":{"frame":{"x":326,"y":2050,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":842,"y":2050,"w":732,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":732,"h":508},"sourceSize":{"w":738,"h":514}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":1578,"y":2050,"w":380,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":22,"w":380,"h":508},"sourceSize":{"w":386,"h":530}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":1962,"y":2050,"w":512,"h":496},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":496},"sourceSize":{"w":512,"h":496}},"map-tree-05.img":{"frame":{"x":2606,"y":2,"w":489,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":17,"w":489,"h":480},"sourceSize":{"w":512,"h":512}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":710,"y":930,"w":512,"h":400},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":400},"sourceSize":{"w":512,"h":400}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":2606,"y":486,"w":226,"h":367},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":226,"h":367},"sourceSize":{"w":226,"h":385}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":2598,"w":670,"h":322},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":670,"h":322},"sourceSize":{"w":690,"h":322}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":2606,"y":857,"w":320,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":1226,"y":930,"w":608,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":304},"sourceSize":{"w":608,"h":304}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":2606,"y":1181,"w":416,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":304},"sourceSize":{"w":416,"h":304}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":2836,"y":486,"w":193,"h":278},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":22,"w":193,"h":278},"sourceSize":{"w":193,"h":306}},"map-stone-03x.img":{"frame":{"x":2606,"y":1489,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-planter-06.img":{"frame":{"x":2930,"y":857,"w":144,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-tree-07.img":{"frame":{"x":2606,"y":1765,"w":256,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":2886,"y":1489,"w":192,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":256},"sourceSize":{"w":192,"h":256}},"map-tree-10.img":{"frame":{"x":2606,"y":2025,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":2606,"y":2283,"w":250,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":250,"h":248},"sourceSize":{"w":256,"h":256}},"map-woodpile-res-02.img":{"frame":{"x":2864,"y":2217,"w":121,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":121,"h":56},"sourceSize":{"w":128,"h":64}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":1054,"y":2598,"w":378,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":378,"h":210},"sourceSize":{"w":401,"h":210}},"map-stone-res-02x.img":{"frame":{"x":2866,"y":1765,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-woodpile-02.img":{"frame":{"x":1436,"y":2598,"w":384,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":192},"sourceSize":{"w":384,"h":192}},"map-bush-06.img":{"frame":{"x":2864,"y":2025,"w":190,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":190,"h":188},"sourceSize":{"w":192,"h":192}},"map-building-pavilion-res-01.img":{"frame":{"x":2860,"y":2283,"w":178,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":167,"y":162,"w":178,"h":188},"sourceSize":{"w":512,"h":512}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1824,"y":2598,"w":192,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":176},"sourceSize":{"w":194,"h":177}},"map-table-02x.img":{"frame":{"x":2020,"y":2598,"w":288,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2312,"y":2598,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-crate-01x.img":{"frame":{"x":2476,"y":2598,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-stone-01x.img":{"frame":{"x":2632,"y":2598,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-crate-03x.img":{"frame":{"x":2787,"y":2598,"w":148,"h":148},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-19.img":{"frame":{"x":2939,"y":2598,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02x.img":{"frame":{"x":2,"y":2924,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-bush-07sp.img":{"frame":{"x":150,"y":2924,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-planter-res-02.img":{"frame":{"x":2525,"y":710,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-bush-01x.img":{"frame":{"x":2474,"y":1350,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-table-01x.img":{"frame":{"x":289,"y":2924,"w":160,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-stone-res-01x.img":{"frame":{"x":2474,"y":1484,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-tree-switch-03.img":{"frame":{"x":2474,"y":1606,"w":112,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-04.img":{"frame":{"x":2474,"y":1722,"w":112,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-01.img":{"frame":{"x":2478,"y":2050,"w":112,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-02.img":{"frame":{"x":2478,"y":2166,"w":112,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-chest-03x.img":{"frame":{"x":453,"y":2924,"w":140,"h":102},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-planter-07.img":{"frame":{"x":2478,"y":2282,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-03.img":{"frame":{"x":2836,"y":768,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snowball-res.img":{"frame":{"x":2922,"y":768,"w":69,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":13,"w":69,"h":69},"sourceSize":{"w":96,"h":96}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":676,"y":2598,"w":374,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":374,"h":226},"sourceSize":{"w":386,"h":226}}}}]')
            , Us = JSON.parse('[{"meta":{"image":"cobalt-0-100-c45e6f2b.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":1701,"y":2,"w":1472,"h":1152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":96,"y":128,"w":1472,"h":1152},"sourceSize":{"w":1664,"h":1408}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":2,"y":1454,"w":1504,"h":928},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1510,"y":1454,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2218,"y":1454,"w":336,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":336,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2386,"w":706,"h":738},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":712,"y":2386,"w":736,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":736,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1452,"y":2386,"w":704,"h":640},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-floor-01.img":{"frame":{"x":2160,"y":2386,"w":864,"h":608},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":2558,"y":1454,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-complex-warehouse-floor-02.img":{"frame":{"x":2880,"y":1454,"w":60,"h":528},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3177,"y":2,"w":703,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":703,"h":507},"sourceSize":{"w":704,"h":512}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":3128,"w":720,"h":496},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":3177,"y":513,"w":320,"h":360},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":726,"y":3128,"w":1828,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1828,"h":352},"sourceSize":{"w":1830,"h":354}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":3177,"y":877,"w":512,"h":352},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":352},"sourceSize":{"w":512,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":3501,"y":513,"w":192,"h":350},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":3177,"y":1233,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-crossing-floor-01.img":{"frame":{"x":3501,"y":1233,"w":320,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":3177,"y":1581,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":3697,"y":513,"w":128,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-stone-03cb.img":{"frame":{"x":3177,"y":1889,"w":278,"h":278},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":278,"h":278},"sourceSize":{"w":288,"h":288}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":3459,"y":1889,"w":400,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":3177,"y":2171,"w":320,"h":270},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":1701,"y":1158,"w":704,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":253},"sourceSize":{"w":736,"h":576}},"map-tree-03cb.img":{"frame":{"x":3613,"y":1581,"w":254,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":254,"h":252},"sourceSize":{"w":256,"h":256}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2409,"y":1158,"w":704,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":323,"w":704,"h":250},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2558,"y":3128,"w":1136,"h":240},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":3501,"y":2171,"w":192,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":192,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":3177,"y":2445,"w":192,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":192,"h":230},"sourceSize":{"w":320,"h":288}},"part-class-shell-03b.img":{"frame":{"x":3825,"y":1301,"w":52,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":3697,"y":2171,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-complex-warehouse-floor-03.img":{"frame":{"x":3373,"y":2445,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-01.img":{"frame":{"x":3437,"y":2445,"w":60,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-bunker-hydra-floor-04.img":{"frame":{"x":3501,"y":2445,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-02cb.img":{"frame":{"x":3177,"y":2679,"w":200,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":3177,"y":2883,"w":574,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":574,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":3381,"y":2679,"w":193,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":193,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":3578,"y":2679,"w":192,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":192,"h":193},"sourceSize":{"w":230,"h":194}},"map-class-shell-03b.img":{"frame":{"x":3705,"y":2445,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03a.img":{"frame":{"x":2944,"y":1454,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-01a.img":{"frame":{"x":2944,"y":1604,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-01b.img":{"frame":{"x":2944,"y":1754,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02a.img":{"frame":{"x":3698,"y":3128,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02b.img":{"frame":{"x":2,"y":3628,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-stone-01cb.img":{"frame":{"x":3028,"y":2386,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-class-crate-assault.img":{"frame":{"x":3028,"y":2534,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-scout.img":{"frame":{"x":3028,"y":2680,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-sniper.img":{"frame":{"x":3028,"y":2826,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-healer.img":{"frame":{"x":152,"y":3628,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-tank.img":{"frame":{"x":298,"y":3628,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-demo.img":{"frame":{"x":444,"y":3628,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-03.img":{"frame":{"x":726,"y":3484,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":134,"h":134},"sourceSize":{"w":148,"h":148}},"map-class-crate-res-01.img":{"frame":{"x":3755,"y":2883,"w":125,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":15,"w":125,"h":128},"sourceSize":{"w":148,"h":148}},"map-stone-res-01cb.img":{"frame":{"x":3693,"y":1111,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"part-class-shell-01a.img":{"frame":{"x":3774,"y":2679,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-02a.img":{"frame":{"x":3774,"y":2771,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-03a.img":{"frame":{"x":2558,"y":2066,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-01b.img":{"frame":{"x":3815,"y":1111,"w":52,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-02b.img":{"frame":{"x":3825,"y":1233,"w":52,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"map-bunker-generic-floor-03.img":{"frame":{"x":3693,"y":877,"w":160,"h":230},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}}}}]')
            , $s = {
            loadout: As,
            shared: Es,
            halloween: Rs,
            snow: Os,
            faction: Bs,
            desert: Ns,
            gradient: Fs,
            savannah: qs,
            main: js,
            potato: Vs,
            woods: Gs,
            cobalt: Us
        }
            , Ws = JSON.parse('[{"meta":{"image":"loadout-0-50-c16c5245.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"part-aura-circle-01.img":{"frame":{"x":260,"y":2,"w":144,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":254,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":253},"sourceSize":{"w":256,"h":256}},"part-shell-05.img":{"frame":{"x":2,"y":259,"w":32,"h":130},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":130},"sourceSize":{"w":32,"h":130}},"part-smoke-02.img":{"frame":{"x":38,"y":259,"w":130,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":0,"w":130,"h":129},"sourceSize":{"w":128,"h":128}},"part-smoke-03.img":{"frame":{"x":172,"y":259,"w":129,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":-1,"w":129,"h":129},"sourceSize":{"w":128,"h":128}},"emote-circle-outer.img":{"frame":{"x":408,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"gun-scarssr-01.img":{"frame":{"x":408,"y":134,"w":32,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":32,"h":126},"sourceSize":{"w":30,"h":124}},"gun-potato-cannon-01.img":{"frame":{"x":444,"y":134,"w":30,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":30,"h":126},"sourceSize":{"w":28,"h":124}},"gun-awc-02.img":{"frame":{"x":478,"y":134,"w":28,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":28,"h":117},"sourceSize":{"w":30,"h":118}},"gun-awc-01.img":{"frame":{"x":408,"y":264,"w":28,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":28,"h":117},"sourceSize":{"w":30,"h":118}},"gun-m249-top-01.img":{"frame":{"x":510,"y":134,"w":24,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":24,"h":111},"sourceSize":{"w":28,"h":116}},"gun-garand-01.img":{"frame":{"x":440,"y":264,"w":22,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":22,"h":110},"sourceSize":{"w":24,"h":116}},"gun-potato-smg-01.img":{"frame":{"x":466,"y":264,"w":55,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":16,"w":55,"h":109},"sourceSize":{"w":88,"h":124}},"gun-usas-01.img":{"frame":{"x":305,"y":259,"w":26,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":26,"h":108},"sourceSize":{"w":28,"h":116}},"gun-vss-01.img":{"frame":{"x":335,"y":259,"w":24,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":-1,"w":24,"h":106},"sourceSize":{"w":24,"h":104}},"pad.img":{"frame":{"x":260,"y":150,"w":104,"h":104},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":104,"h":104},"sourceSize":{"w":104,"h":104}},"gun-scorpion-01.img":{"frame":{"x":368,"y":150,"w":24,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":2,"w":24,"h":103},"sourceSize":{"w":24,"h":104}},"gun-pkp-top-01.img":{"frame":{"x":363,"y":259,"w":23,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":18,"w":23,"h":99},"sourceSize":{"w":28,"h":116}},"gun-grozas-01.img":{"frame":{"x":2,"y":393,"w":24,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":24,"h":98},"sourceSize":{"w":24,"h":104}},"gun-m4a1-01.img":{"frame":{"x":30,"y":393,"w":25,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":2,"w":25,"h":97},"sourceSize":{"w":24,"h":98}},"gun-long-01.img":{"frame":{"x":59,"y":393,"w":18,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":18,"h":96},"sourceSize":{"w":16,"h":94}},"part-shell-02.img":{"frame":{"x":81,"y":393,"w":32,"h":95},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":95},"sourceSize":{"w":32,"h":95}},"gun-saiga-01.img":{"frame":{"x":117,"y":393,"w":22,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":22,"h":91},"sourceSize":{"w":24,"h":98}},"player-helmet-forest.img":{"frame":{"x":143,"y":393,"w":78,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":78,"h":90},"sourceSize":{"w":88,"h":88}},"part-shell-03.img":{"frame":{"x":225,"y":393,"w":32,"h":90},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":90},"sourceSize":{"w":32,"h":90}},"player-wading-01.img":{"frame":{"x":261,"y":393,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":88,"h":88},"sourceSize":{"w":86,"h":86}},"gun-famas-01.img":{"frame":{"x":353,"y":393,"w":22,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":18,"w":22,"h":87},"sourceSize":{"w":24,"h":104}},"loot-melee-machete-taiga.img":{"frame":{"x":379,"y":393,"w":24,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":29,"y":0,"w":24,"h":84},"sourceSize":{"w":84,"h":84}},"part-shell-04.img":{"frame":{"x":407,"y":393,"w":28,"h":82},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":82},"sourceSize":{"w":28,"h":82}},"proj-smoke-nopin.img":{"frame":{"x":439,"y":393,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"part-airdrop-03.img":{"frame":{"x":540,"y":2,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"proj-smoke-pin.img":{"frame":{"x":540,"y":86,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"proj-bomb-iron-01.img":{"frame":{"x":540,"y":170,"w":36,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":36,"h":80},"sourceSize":{"w":80,"h":80}},"loot-melee-bonesaw-healer.img":{"frame":{"x":580,"y":170,"w":34,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":4,"w":34,"h":80},"sourceSize":{"w":84,"h":84}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":540,"y":254,"w":30,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":39,"y":10,"w":30,"h":80},"sourceSize":{"w":96,"h":96}},"loot-melee-kukri-sniper.img":{"frame":{"x":574,"y":254,"w":23,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":0,"w":23,"h":80},"sourceSize":{"w":80,"h":80}},"loot-melee-kukri-trad.img":{"frame":{"x":540,"y":338,"w":23,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":0,"w":23,"h":80},"sourceSize":{"w":80,"h":80}},"part-airdrop-02x.img":{"frame":{"x":601,"y":254,"w":19,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-02.img":{"frame":{"x":567,"y":338,"w":19,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"player-helmet-moon.img":{"frame":{"x":2,"y":495,"w":64,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":64,"h":78},"sourceSize":{"w":88,"h":88}},"loot-melee-spade-assault.img":{"frame":{"x":590,"y":338,"w":30,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":1,"w":30,"h":78},"sourceSize":{"w":80,"h":80}},"gun-groza-01.img":{"frame":{"x":70,"y":495,"w":24,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":28,"w":24,"h":77},"sourceSize":{"w":24,"h":104}},"player-armor-base-01.img":{"frame":{"x":98,"y":495,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":76},"sourceSize":{"w":74,"h":74}},"player-circle-base-01.img":{"frame":{"x":178,"y":495,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":76},"sourceSize":{"w":74,"h":74}},"player-circle-base-02.img":{"frame":{"x":258,"y":495,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":76},"sourceSize":{"w":74,"h":74}},"proj-smoke-nopin-nolever.img":{"frame":{"x":338,"y":495,"w":42,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":2,"w":42,"h":75},"sourceSize":{"w":80,"h":80}},"star.img":{"frame":{"x":384,"y":495,"w":74,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"player-star.img":{"frame":{"x":462,"y":495,"w":74,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"proj-mirv-nopin.img":{"frame":{"x":540,"y":495,"w":53,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":53,"h":74},"sourceSize":{"w":64,"h":74}},"proj-mirv-pin.img":{"frame":{"x":624,"y":2,"w":53,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":53,"h":74},"sourceSize":{"w":64,"h":74}},"proj-mirv-nopin-nolever.img":{"frame":{"x":624,"y":80,"w":42,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":42,"h":74},"sourceSize":{"w":64,"h":74}},"player-ripple-01.img":{"frame":{"x":2,"y":577,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":73,"h":73},"sourceSize":{"w":71,"h":71}},"loot-circle-outer-05.img":{"frame":{"x":79,"y":577,"w":73,"h":73},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":73},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-02.img":{"frame":{"x":156,"y":577,"w":73,"h":73},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":73},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-01.img":{"frame":{"x":233,"y":577,"w":73,"h":73},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":73},"sourceSize":{"w":73,"h":73}},"gun-bugle-01.img":{"frame":{"x":624,"y":158,"w":36,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":43,"w":36,"h":73},"sourceSize":{"w":48,"h":116}},"player-helmet-last-man-02.img":{"frame":{"x":310,"y":577,"w":73,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":73,"h":72},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-01.img":{"frame":{"x":387,"y":577,"w":73,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":73,"h":72},"sourceSize":{"w":88,"h":88}},"part-panel-01.img":{"frame":{"x":464,"y":577,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-the-hunted.img":{"frame":{"x":540,"y":577,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"part-woodchip-01.img":{"frame":{"x":681,"y":2,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"part-plank-01.img":{"frame":{"x":681,"y":78,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"ping-border.img":{"frame":{"x":681,"y":154,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-base-02.img":{"frame":{"x":681,"y":230,"w":70,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":-1,"w":70,"h":72},"sourceSize":{"w":70,"h":70}},"part-book-01.img":{"frame":{"x":681,"y":306,"w":56,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":56,"h":72},"sourceSize":{"w":72,"h":72}},"loot-melee-crowbar-recon.img":{"frame":{"x":681,"y":382,"w":22,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":2,"w":22,"h":72},"sourceSize":{"w":80,"h":80}},"loot-melee-crowbar-scout.img":{"frame":{"x":707,"y":382,"w":22,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":2,"w":22,"h":72},"sourceSize":{"w":80,"h":80}},"player-base-01.img":{"frame":{"x":681,"y":458,"w":70,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":71},"sourceSize":{"w":70,"h":70}},"part-pot-01.img":{"frame":{"x":681,"y":533,"w":50,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":50,"h":71},"sourceSize":{"w":72,"h":72}},"player-king-woods.img":{"frame":{"x":2,"y":654,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":72,"h":70},"sourceSize":{"w":74,"h":74}},"part-plate-01.img":{"frame":{"x":78,"y":654,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}},"player-base-outfitTurkey.img":{"frame":{"x":154,"y":654,"w":70,"h":70},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":70,"h":70}},"player-base-outfitSpetsnaz.img":{"frame":{"x":228,"y":654,"w":70,"h":70},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":70,"h":70}},"player-base-outfitHeaven.img":{"frame":{"x":302,"y":654,"w":69,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":69,"h":70},"sourceSize":{"w":70,"h":70}},"player-base-outfitDC.img":{"frame":{"x":375,"y":654,"w":69,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":69,"h":70},"sourceSize":{"w":70,"h":70}},"player-base-outfitParmaPrestige.img":{"frame":{"x":448,"y":654,"w":68,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":68,"h":70},"sourceSize":{"w":72,"h":72}},"player-base-outfitWheat.img":{"frame":{"x":540,"y":422,"w":70,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":70,"h":69},"sourceSize":{"w":70,"h":70}},"player-base-outfitLumber.img":{"frame":{"x":520,"y":654,"w":69,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":69,"h":69},"sourceSize":{"w":70,"h":70}},"loot-melee-warhammer-tank.img":{"frame":{"x":593,"y":654,"w":131,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":131,"h":68},"sourceSize":{"w":132,"h":76}},"loot-circle-outer-04.img":{"frame":{"x":757,"y":2,"w":73,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":68},"sourceSize":{"w":73,"h":73}},"part-splat-02.img":{"frame":{"x":757,"y":74,"w":64,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":64,"h":68},"sourceSize":{"w":72,"h":72}},"ping-map-coming.img":{"frame":{"x":757,"y":146,"w":60,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":68},"sourceSize":{"w":64,"h":128}},"player-helmet-potato.img":{"frame":{"x":757,"y":218,"w":53,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":53,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-leader.img":{"frame":{"x":757,"y":290,"w":51,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":51,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-medic.img":{"frame":{"x":757,"y":362,"w":51,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":51,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-lieutenant.img":{"frame":{"x":757,"y":434,"w":51,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":51,"h":68},"sourceSize":{"w":88,"h":88}},"player-visor-scout.img":{"frame":{"x":757,"y":506,"w":42,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":10,"w":42,"h":68},"sourceSize":{"w":88,"h":88}},"loot-circle-outer-03.img":{"frame":{"x":757,"y":578,"w":73,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":73,"h":67},"sourceSize":{"w":73,"h":73}},"part-shell-01.img":{"frame":{"x":757,"y":649,"w":28,"h":67},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":67},"sourceSize":{"w":28,"h":67}},"star-red.img":{"frame":{"x":2,"y":728,"w":70,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":70,"h":66},"sourceSize":{"w":74,"h":74}},"star-blue.img":{"frame":{"x":76,"y":728,"w":70,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":70,"h":66},"sourceSize":{"w":74,"h":74}},"part-heal-tomoe.img":{"frame":{"x":616,"y":577,"w":55,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":-1,"w":55,"h":66},"sourceSize":{"w":64,"h":64}},"part-boost-naturalize.img":{"frame":{"x":624,"y":235,"w":52,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":-1,"w":52,"h":66},"sourceSize":{"w":64,"h":64}},"player-helmet-grenadier.img":{"frame":{"x":624,"y":305,"w":49,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":49,"h":66},"sourceSize":{"w":88,"h":88}},"player-helmet-recon.img":{"frame":{"x":624,"y":375,"w":49,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":49,"h":66},"sourceSize":{"w":88,"h":88}},"player-helmet-bugler.img":{"frame":{"x":624,"y":445,"w":49,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":49,"h":66},"sourceSize":{"w":88,"h":88}},"gun-deagle-01.img":{"frame":{"x":803,"y":506,"w":26,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":51,"w":26,"h":66},"sourceSize":{"w":28,"h":116}},"gun-mp220-01.img":{"frame":{"x":789,"y":649,"w":22,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":22,"h":66},"sourceSize":{"w":20,"h":64}},"gun-med-01.img":{"frame":{"x":812,"y":290,"w":18,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":18,"h":66},"sourceSize":{"w":16,"h":64}},"proj-strobe-unarmed.img":{"frame":{"x":150,"y":728,"w":76,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":11,"w":76,"h":65},"sourceSize":{"w":80,"h":80}},"part-splat-01.img":{"frame":{"x":230,"y":728,"w":66,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":65},"sourceSize":{"w":72,"h":72}},"part-splat-03.img":{"frame":{"x":300,"y":728,"w":65,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":65,"h":64},"sourceSize":{"w":72,"h":72}},"flag-indonesia.img":{"frame":{"x":369,"y":728,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-israel.img":{"frame":{"x":437,"y":728,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-italy.img":{"frame":{"x":505,"y":728,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-japan.img":{"frame":{"x":573,"y":728,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-kazakhstan.img":{"frame":{"x":641,"y":728,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-latvia.img":{"frame":{"x":709,"y":728,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-lithuania.img":{"frame":{"x":834,"y":2,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-malaysia.img":{"frame":{"x":834,"y":70,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-mexico.img":{"frame":{"x":834,"y":138,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-moldova.img":{"frame":{"x":834,"y":206,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-morocco.img":{"frame":{"x":834,"y":274,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-netherlands.img":{"frame":{"x":834,"y":342,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-new-zealand.img":{"frame":{"x":834,"y":410,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-norway.img":{"frame":{"x":834,"y":478,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-peru.img":{"frame":{"x":834,"y":546,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-philippines.img":{"frame":{"x":834,"y":614,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-portugal.img":{"frame":{"x":834,"y":682,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-republic-of-poland.img":{"frame":{"x":2,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-romania.img":{"frame":{"x":70,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-russia.img":{"frame":{"x":138,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-serbia.img":{"frame":{"x":206,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-singapore.img":{"frame":{"x":274,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-slovakia.img":{"frame":{"x":342,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-south-korea.img":{"frame":{"x":410,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-spain.img":{"frame":{"x":478,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-sweden.img":{"frame":{"x":546,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-switzerland.img":{"frame":{"x":614,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-taiwan.img":{"frame":{"x":682,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-thailand.img":{"frame":{"x":750,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-trinidad-and-tobago.img":{"frame":{"x":818,"y":798,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-turkey.img":{"frame":{"x":902,"y":2,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ukraine.img":{"frame":{"x":902,"y":70,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-arab-emirates.img":{"frame":{"x":902,"y":138,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-kingdom.img":{"frame":{"x":902,"y":206,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-states-of-america.img":{"frame":{"x":902,"y":274,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-uruguay.img":{"frame":{"x":902,"y":342,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-venezuela.img":{"frame":{"x":902,"y":410,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-vietnam.img":{"frame":{"x":902,"y":478,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-ammo-box.img":{"frame":{"x":902,"y":546,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-imp-trick.img":{"frame":{"x":902,"y":614,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-imp.img":{"frame":{"x":902,"y":682,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-joy.img":{"frame":{"x":902,"y":750,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"heart.img":{"frame":{"x":2,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-monocle.img":{"frame":{"x":70,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-happy.img":{"frame":{"x":138,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"part-heal-basic.img":{"frame":{"x":206,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-poo.img":{"frame":{"x":274,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-sad.img":{"frame":{"x":342,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-sob.img":{"frame":{"x":410,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-sunglass.img":{"frame":{"x":478,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-thinking.img":{"frame":{"x":546,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-upsidedown.img":{"frame":{"x":614,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-disappoint.img":{"frame":{"x":682,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-heart.img":{"frame":{"x":750,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"part-log-01.img":{"frame":{"x":818,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-bandaged.img":{"frame":{"x":886,"y":866,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-angry.img":{"frame":{"x":970,"y":2,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-albania.img":{"frame":{"x":970,"y":70,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-algeria.img":{"frame":{"x":970,"y":138,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-argentina.img":{"frame":{"x":970,"y":206,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-angel-treat.img":{"frame":{"x":970,"y":274,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-australia.img":{"frame":{"x":970,"y":342,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-austria.img":{"frame":{"x":970,"y":410,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-azerbaijan.img":{"frame":{"x":970,"y":478,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belarus.img":{"frame":{"x":970,"y":546,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belgium.img":{"frame":{"x":970,"y":614,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bolivia.img":{"frame":{"x":970,"y":682,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":970,"y":750,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-brazil.img":{"frame":{"x":970,"y":818,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-canada.img":{"frame":{"x":2,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-chile.img":{"frame":{"x":70,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-china.img":{"frame":{"x":138,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"surviv.img":{"frame":{"x":206,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-alien.img":{"frame":{"x":274,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-colombia.img":{"frame":{"x":342,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-croatia.img":{"frame":{"x":410,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-czech-republic.img":{"frame":{"x":478,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-denmark.img":{"frame":{"x":546,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-dominican-republic.img":{"frame":{"x":614,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ecuador.img":{"frame":{"x":682,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-egypt.img":{"frame":{"x":750,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-estonia.img":{"frame":{"x":818,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"chicken-dinner.img":{"frame":{"x":886,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-finland.img":{"frame":{"x":954,"y":934,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-france.img":{"frame":{"x":1038,"y":2,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-aoe-heal.img":{"frame":{"x":1038,"y":70,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-georgia.img":{"frame":{"x":1038,"y":138,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-germany.img":{"frame":{"x":1038,"y":206,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-greece.img":{"frame":{"x":1038,"y":274,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-cannon.img":{"frame":{"x":1038,"y":342,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-firepower.img":{"frame":{"x":1038,"y":410,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-guatemala.img":{"frame":{"x":1038,"y":478,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"emote.img":{"frame":{"x":1038,"y":546,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-gotw.img":{"frame":{"x":1038,"y":614,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38-dual.img":{"frame":{"x":1038,"y":682,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-hunted.img":{"frame":{"x":1038,"y":750,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-leadership.img":{"frame":{"x":1038,"y":818,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-targeting.img":{"frame":{"x":1038,"y":886,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r-dual.img":{"frame":{"x":2,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-honduras.img":{"frame":{"x":70,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-00.img":{"frame":{"x":138,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-01.img":{"frame":{"x":206,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-02.img":{"frame":{"x":274,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loadout-crosshair.img":{"frame":{"x":342,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loadout-emote.img":{"frame":{"x":410,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-03.img":{"frame":{"x":478,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-04.img":{"frame":{"x":546,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loadout-melee.img":{"frame":{"x":614,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hong-kong.img":{"frame":{"x":682,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-team-unlock.img":{"frame":{"x":750,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-team-help.img":{"frame":{"x":818,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-team-danger.img":{"frame":{"x":886,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-team-coming.img":{"frame":{"x":954,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-team-airstrike.img":{"frame":{"x":1022,"y":1002,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-team-airdrop.img":{"frame":{"x":1106,"y":2,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hungary.img":{"frame":{"x":1106,"y":70,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-bar.img":{"frame":{"x":1106,"y":138,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45-dual.img":{"frame":{"x":1106,"y":206,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle-dual.img":{"frame":{"x":1106,"y":274,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-india.img":{"frame":{"x":1106,"y":342,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-grozas.img":{"frame":{"x":1106,"y":410,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-usas.img":{"frame":{"x":1106,"y":478,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-picasso.img":{"frame":{"x":1106,"y":546,"w":63,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":63,"h":64},"sourceSize":{"w":64,"h":64}},"rainbow.img":{"frame":{"x":1106,"y":614,"w":63,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":63,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m4a1.img":{"frame":{"x":1106,"y":682,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":64},"sourceSize":{"w":64,"h":64}},"campfire.img":{"frame":{"x":1106,"y":750,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-l86.img":{"frame":{"x":1106,"y":818,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-splinter.img":{"frame":{"x":1106,"y":886,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1a1.img":{"frame":{"x":1106,"y":954,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-dp28.img":{"frame":{"x":2,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-an94.img":{"frame":{"x":66,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-saiga.img":{"frame":{"x":130,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"snowflake.img":{"frame":{"x":194,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-pkp.img":{"frame":{"x":258,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-scorpion.img":{"frame":{"x":322,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m249.img":{"frame":{"x":386,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-mkg45.img":{"frame":{"x":450,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-mk12.img":{"frame":{"x":514,"y":1070,"w":60,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-smg.img":{"frame":{"x":578,"y":1070,"w":59,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":59,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1014.img":{"frame":{"x":641,"y":1070,"w":58,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":703,"y":1070,"w":58,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-svd.img":{"frame":{"x":765,"y":1070,"w":58,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":64},"sourceSize":{"w":64,"h":64}},"trash.img":{"frame":{"x":827,"y":1070,"w":58,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":64},"sourceSize":{"w":64,"h":64}},"cupcake.img":{"frame":{"x":889,"y":1070,"w":58,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":64},"sourceSize":{"w":64,"h":64}},"reload.img":{"frame":{"x":951,"y":1070,"w":57,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":64},"sourceSize":{"w":64,"h":64}},"thumbs-up.img":{"frame":{"x":1012,"y":1070,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-vss.img":{"frame":{"x":1072,"y":1070,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m39.img":{"frame":{"x":1174,"y":2,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38-dual.img":{"frame":{"x":1174,"y":70,"w":55,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":55,"h":64},"sourceSize":{"w":64,"h":64}},"candy-corn.img":{"frame":{"x":1174,"y":138,"w":55,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r.img":{"frame":{"x":1174,"y":206,"w":54,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ak.img":{"frame":{"x":1174,"y":274,"w":54,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":64},"sourceSize":{"w":64,"h":64}},"police.img":{"frame":{"x":1174,"y":342,"w":54,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":64},"sourceSize":{"w":64,"h":64}},"snowman.img":{"frame":{"x":1174,"y":410,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45.img":{"frame":{"x":1174,"y":478,"w":50,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":50,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-rare-potato.img":{"frame":{"x":1174,"y":546,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"indicator.img":{"frame":{"x":1174,"y":614,"w":47,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":47,"h":64},"sourceSize":{"w":64,"h":64}},"bullets.img":{"frame":{"x":1174,"y":682,"w":46,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":46,"h":64},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke.img":{"frame":{"x":1174,"y":750,"w":45,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":45,"h":64},"sourceSize":{"w":64,"h":64}},"loot-chest-02.img":{"frame":{"x":1174,"y":818,"w":42,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":42,"h":64},"sourceSize":{"w":64,"h":64}},"ice-cream.img":{"frame":{"x":1174,"y":886,"w":36,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":0,"w":36,"h":64},"sourceSize":{"w":64,"h":64}},"part-airdrop-04.img":{"frame":{"x":1174,"y":954,"w":27,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"ping-map-danger.img":{"frame":{"x":1205,"y":954,"w":22,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":0,"w":22,"h":64},"sourceSize":{"w":64,"h":64}},"gun-p30l-01.img":{"frame":{"x":1174,"y":1022,"w":21,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":53,"w":21,"h":64},"sourceSize":{"w":28,"h":116}},"loot-perk-chambered.img":{"frame":{"x":2,"y":1138,"w":64,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-scarssr.img":{"frame":{"x":70,"y":1138,"w":64,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911-dual.img":{"frame":{"x":138,"y":1138,"w":64,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-awc.img":{"frame":{"x":206,"y":1138,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-qbb97.img":{"frame":{"x":273,"y":1138,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"part-heal-moon.img":{"frame":{"x":339,"y":1138,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"tombstone.img":{"frame":{"x":405,"y":1138,"w":60,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":63},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-01.img":{"frame":{"x":469,"y":1138,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-02.img":{"frame":{"x":530,"y":1138,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911.img":{"frame":{"x":591,"y":1138,"w":56,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":63},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-02.img":{"frame":{"x":651,"y":1138,"w":56,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":56,"h":63},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-01.img":{"frame":{"x":711,"y":1138,"w":56,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":56,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-hk416.img":{"frame":{"x":771,"y":1138,"w":56,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":56,"h":63},"sourceSize":{"w":64,"h":64}},"egg.img":{"frame":{"x":777,"y":728,"w":52,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":63},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":831,"y":1138,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":63},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":883,"y":1138,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":63},"sourceSize":{"w":64,"h":64}},"loot-perk-windwalk.img":{"frame":{"x":935,"y":1138,"w":46,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":46,"h":63},"sourceSize":{"w":64,"h":64}},"part-heal-heart.img":{"frame":{"x":985,"y":1138,"w":64,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":62},"sourceSize":{"w":64,"h":64}},"salt.img":{"frame":{"x":1053,"y":1138,"w":64,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-dual.img":{"frame":{"x":1121,"y":1138,"w":64,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-sv98.img":{"frame":{"x":1234,"y":2,"w":64,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":62},"sourceSize":{"w":64,"h":64}},"part-boost-star.img":{"frame":{"x":1234,"y":68,"w":64,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":62},"sourceSize":{"w":64,"h":64}},"skull.img":{"frame":{"x":1234,"y":134,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-kill-icon.img":{"frame":{"x":1234,"y":200,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":62},"sourceSize":{"w":64,"h":64}},"part-feather-01.img":{"frame":{"x":1234,"y":266,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"part-feather-02.img":{"frame":{"x":1234,"y":332,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"donut.img":{"frame":{"x":1234,"y":398,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-xp-stump-01.img":{"frame":{"x":1234,"y":464,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"mag-glass.img":{"frame":{"x":1234,"y":530,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"target.img":{"frame":{"x":1234,"y":596,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-fabricate.img":{"frame":{"x":1234,"y":662,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m870.img":{"frame":{"x":1234,"y":728,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-heal.img":{"frame":{"x":1234,"y":794,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1100.img":{"frame":{"x":1234,"y":860,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-chest-01.img":{"frame":{"x":1234,"y":926,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"part-boost-basic.img":{"frame":{"x":1234,"y":992,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"part-leaf-04.img":{"frame":{"x":1234,"y":1058,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"part-leaf-03.img":{"frame":{"x":1234,"y":1124,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"part-leaf-06.img":{"frame":{"x":2,"y":1205,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"part-leaf-05.img":{"frame":{"x":67,"y":1205,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-ump9.img":{"frame":{"x":132,"y":1205,"w":60,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":60,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-famas.img":{"frame":{"x":196,"y":1205,"w":60,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":60,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector45.img":{"frame":{"x":260,"y":1205,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-medical-bandage.img":{"frame":{"x":320,"y":1205,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scar.img":{"frame":{"x":380,"y":1205,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-xp-book-04.img":{"frame":{"x":440,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"loot-xp-book-02.img":{"frame":{"x":496,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9.img":{"frame":{"x":552,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"crosshair022.img":{"frame":{"x":1589,"y":302,"w":10,"h":8},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":12,"w":10,"h":8},"sourceSize":{"w":32,"h":32}},"loot-xp-book-01.img":{"frame":{"x":664,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"loot-chest-03.img":{"frame":{"x":720,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"loot-xp-book-06.img":{"frame":{"x":776,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"loot-xp-book-03.img":{"frame":{"x":832,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"loot-pack-01.img":{"frame":{"x":888,"y":1205,"w":50,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":50,"h":62},"sourceSize":{"w":64,"h":64}},"part-potato-02.img":{"frame":{"x":942,"y":1205,"w":50,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":50,"h":62},"sourceSize":{"w":64,"h":64}},"loot-pack-00.img":{"frame":{"x":996,"y":1205,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"loot-pack-02.img":{"frame":{"x":1048,"y":1205,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-red.img":{"frame":{"x":1100,"y":1205,"w":47,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":1,"w":47,"h":62},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-blue.img":{"frame":{"x":1151,"y":1205,"w":47,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":1,"w":47,"h":62},"sourceSize":{"w":64,"h":64}},"ok.img":{"frame":{"x":1202,"y":1205,"w":46,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":46,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38.img":{"frame":{"x":1252,"y":1205,"w":44,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":44,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun.img":{"frame":{"x":1302,"y":2,"w":44,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":44,"h":62},"sourceSize":{"w":64,"h":64}},"player-visor-tank.img":{"frame":{"x":1302,"y":68,"w":41,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":13,"w":41,"h":62},"sourceSize":{"w":88,"h":88}},"loot-melee-bowie-vintage.img":{"frame":{"x":1302,"y":134,"w":24,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":24,"h":62},"sourceSize":{"w":64,"h":64}},"loot-melee-bowie-frontier.img":{"frame":{"x":1302,"y":200,"w":24,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":24,"h":62},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-woodland.img":{"frame":{"x":1302,"y":266,"w":22,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":1,"w":22,"h":62},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-rugged.img":{"frame":{"x":1302,"y":332,"w":22,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":1,"w":22,"h":62},"sourceSize":{"w":64,"h":64}},"proj-strobe-armed.img":{"frame":{"x":2,"y":1271,"w":70,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":70,"h":61},"sourceSize":{"w":80,"h":80}},"proj-strobe-arming.img":{"frame":{"x":76,"y":1271,"w":70,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":70,"h":61},"sourceSize":{"w":80,"h":80}},"loot-weapon-mosin.img":{"frame":{"x":150,"y":1271,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"flex.img":{"frame":{"x":216,"y":1271,"w":58,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":61},"sourceSize":{"w":64,"h":64}},"ghost-base.img":{"frame":{"x":278,"y":1271,"w":56,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":56,"h":61},"sourceSize":{"w":64,"h":64}},"acorn.img":{"frame":{"x":338,"y":1271,"w":56,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-steelskin.img":{"frame":{"x":1302,"y":398,"w":44,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":44,"h":61},"sourceSize":{"w":64,"h":64}},"sleepy.img":{"frame":{"x":398,"y":1271,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l-dual.img":{"frame":{"x":466,"y":1271,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-bugle.img":{"frame":{"x":534,"y":1271,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"part-boost-shuriken.img":{"frame":{"x":602,"y":1271,"w":62,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWhite.img":{"frame":{"x":668,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":733,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWoodland.img":{"frame":{"x":798,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRed.img":{"frame":{"x":863,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loadout-outfit.img":{"frame":{"x":928,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParma.img":{"frame":{"x":993,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitMod.img":{"frame":{"x":1058,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitLumber.img":{"frame":{"x":1123,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":1188,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitHeaven.img":{"frame":{"x":1253,"y":1271,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitTurkey.img":{"frame":{"x":1350,"y":2,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDev.img":{"frame":{"x":1350,"y":66,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":1350,"y":130,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":1350,"y":194,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":1350,"y":258,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":1350,"y":322,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":1350,"y":386,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCamo.img":{"frame":{"x":1350,"y":450,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitBase.img":{"frame":{"x":1350,"y":514,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWheat.img":{"frame":{"x":1350,"y":578,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-01.img":{"frame":{"x":1350,"y":642,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-blr.img":{"frame":{"x":1350,"y":706,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":1350,"y":770,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":1350,"y":834,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"gas.img":{"frame":{"x":1350,"y":898,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-spark-02.img":{"frame":{"x":1350,"y":962,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"part-spark-01.img":{"frame":{"x":1350,"y":1026,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"chick.img":{"frame":{"x":1350,"y":1090,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loadout-boost.img":{"frame":{"x":1350,"y":1154,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-garand.img":{"frame":{"x":1350,"y":1218,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector.img":{"frame":{"x":2,"y":1336,"w":58,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":60},"sourceSize":{"w":64,"h":64}},"loot-pack-03.img":{"frame":{"x":64,"y":1336,"w":56,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":60},"sourceSize":{"w":64,"h":64}},"pumpkin.img":{"frame":{"x":124,"y":1336,"w":56,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle.img":{"frame":{"x":184,"y":1336,"w":56,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":60},"sourceSize":{"w":64,"h":64}},"player-visor-sniper.img":{"frame":{"x":244,"y":1336,"w":56,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":14,"w":56,"h":60},"sourceSize":{"w":88,"h":88}},"loot-weapon-p30l.img":{"frame":{"x":304,"y":1336,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"bugle-final-red.img":{"frame":{"x":362,"y":1336,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-xp-bone-01.img":{"frame":{"x":420,"y":1336,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"bugle-final-blue.img":{"frame":{"x":478,"y":1336,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-spas12.img":{"frame":{"x":536,"y":1336,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp5.img":{"frame":{"x":592,"y":1336,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"tap.img":{"frame":{"x":648,"y":1336,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38.img":{"frame":{"x":704,"y":1336,"w":48,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":60},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-burnished.img":{"frame":{"x":1330,"y":134,"w":14,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":2,"w":14,"h":60},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-rugged.img":{"frame":{"x":1330,"y":200,"w":14,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":2,"w":14,"h":60},"sourceSize":{"w":64,"h":64}},"cattle.img":{"frame":{"x":756,"y":1336,"w":62,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":59},"sourceSize":{"w":64,"h":64}},"part-blossom-04.img":{"frame":{"x":822,"y":1336,"w":61,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":61,"h":59},"sourceSize":{"w":64,"h":64}},"part-blossom-03.img":{"frame":{"x":887,"y":1336,"w":61,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":61,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-broken-arrow.img":{"frame":{"x":952,"y":1336,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-small-arms.img":{"frame":{"x":1015,"y":1336,"w":57,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":57,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-field-medic.img":{"frame":{"x":1076,"y":1336,"w":52,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":52,"h":59},"sourceSize":{"w":64,"h":64}},"loot-throwable-mirv.img":{"frame":{"x":1302,"y":463,"w":43,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":43,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-pan-black-side.img":{"frame":{"x":1328,"y":266,"w":12,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":12,"h":59},"sourceSize":{"w":64,"h":64}},"logo-chrysanthemum.img":{"frame":{"x":1132,"y":1336,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-meteor.img":{"frame":{"x":1200,"y":1336,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-caduceus.img":{"frame":{"x":1268,"y":1336,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"link.img":{"frame":{"x":1336,"y":1336,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-hydra.img":{"frame":{"x":1415,"y":2,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-hatchet.img":{"frame":{"x":1415,"y":64,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-storm.img":{"frame":{"x":1415,"y":126,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-surviv.img":{"frame":{"x":1415,"y":188,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-swine.img":{"frame":{"x":1415,"y":250,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-egg.img":{"frame":{"x":1415,"y":312,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock-dual.img":{"frame":{"x":1415,"y":374,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-twins.img":{"frame":{"x":1415,"y":436,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-crossing.img":{"frame":{"x":1415,"y":498,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-conch.img":{"frame":{"x":1415,"y":560,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"logo-cloud.img":{"frame":{"x":1415,"y":622,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-scout.img":{"frame":{"x":1415,"y":684,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"danger.img":{"frame":{"x":1415,"y":746,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-model94.img":{"frame":{"x":1415,"y":808,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"player-gui.img":{"frame":{"x":1415,"y":870,"w":60,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":58},"sourceSize":{"w":64,"h":64}},"player-emote.img":{"frame":{"x":1415,"y":932,"w":60,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-50AE.img":{"frame":{"x":1415,"y":994,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-02.img":{"frame":{"x":1415,"y":1056,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-explosive.img":{"frame":{"x":1415,"y":1118,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-box.img":{"frame":{"x":1415,"y":1180,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-308sub.img":{"frame":{"x":1415,"y":1242,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-flare.img":{"frame":{"x":1415,"y":1304,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-45acp.img":{"frame":{"x":2,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"santa-hat.img":{"frame":{"x":64,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-9mm.img":{"frame":{"x":126,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-762mm.img":{"frame":{"x":188,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-556mm.img":{"frame":{"x":250,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-12gauge.img":{"frame":{"x":312,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loot-xp-donut-01.img":{"frame":{"x":374,"y":1400,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"player-visor-assault.img":{"frame":{"x":436,"y":1400,"w":57,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":31,"y":15,"w":57,"h":58},"sourceSize":{"w":88,"h":88}},"part-blossom-01.img":{"frame":{"x":497,"y":1400,"w":55,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":55,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock.img":{"frame":{"x":624,"y":515,"w":48,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":58},"sourceSize":{"w":64,"h":64}},"pineapple.img":{"frame":{"x":1302,"y":526,"w":38,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":0,"w":38,"h":58},"sourceSize":{"w":64,"h":64}},"loot-medical-soda.img":{"frame":{"x":1302,"y":588,"w":34,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":3,"w":34,"h":58},"sourceSize":{"w":64,"h":64}},"loadout-player-icon.img":{"frame":{"x":556,"y":1400,"w":60,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":60,"h":57},"sourceSize":{"w":64,"h":64}},"part-blossom-02.img":{"frame":{"x":620,"y":1400,"w":56,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":57},"sourceSize":{"w":64,"h":64}},"proj-potato-01.img":{"frame":{"x":680,"y":1400,"w":50,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":50,"h":57},"sourceSize":{"w":64,"h":64}},"proj-potato-02.img":{"frame":{"x":734,"y":1400,"w":50,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":50,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-9mm.img":{"frame":{"x":788,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-45.img":{"frame":{"x":856,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"part-leaf-01.img":{"frame":{"x":924,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-m9.img":{"frame":{"x":992,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-assault.img":{"frame":{"x":1060,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"hamburger.img":{"frame":{"x":1128,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-9mm.img":{"frame":{"x":1196,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-556.img":{"frame":{"x":1264,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-12g.img":{"frame":{"x":1332,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"hide.img":{"frame":{"x":1400,"y":1400,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-762.img":{"frame":{"x":1483,"y":2,"w":64,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp220.img":{"frame":{"x":1483,"y":62,"w":60,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":60,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-chatty.img":{"frame":{"x":1483,"y":122,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-xp-glasses-01.img":{"frame":{"x":1483,"y":182,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-takedown.img":{"frame":{"x":1483,"y":242,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"leek.img":{"frame":{"x":1483,"y":302,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-nothing.img":{"frame":{"x":1483,"y":362,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-size.img":{"frame":{"x":1483,"y":422,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"proj-snowball-01.img":{"frame":{"x":1483,"y":482,"w":55,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":56},"sourceSize":{"w":64,"h":64}},"proj-snowball-02.img":{"frame":{"x":1483,"y":542,"w":55,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-mac10.img":{"frame":{"x":1483,"y":602,"w":54,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":54,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-flak-jacket.img":{"frame":{"x":1483,"y":662,"w":54,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":56},"sourceSize":{"w":64,"h":64}},"ping-map-airdrop.img":{"frame":{"x":1483,"y":722,"w":40,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":40,"h":56},"sourceSize":{"w":64,"h":64}},"player-visor-healer.img":{"frame":{"x":1483,"y":782,"w":37,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":45,"y":16,"w":37,"h":56},"sourceSize":{"w":88,"h":88}},"turkey-animal.img":{"frame":{"x":1483,"y":842,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"ping-map-airstrike.img":{"frame":{"x":1483,"y":901,"w":26,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":5,"w":26,"h":55},"sourceSize":{"w":64,"h":64}},"loot-medical-healthkit.img":{"frame":{"x":1483,"y":960,"w":62,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":62,"h":54},"sourceSize":{"w":64,"h":64}},"loot-helmet-01.img":{"frame":{"x":1483,"y":1018,"w":60,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":60,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-martyrdom.img":{"frame":{"x":1483,"y":1076,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"trunk.img":{"frame":{"x":1483,"y":1134,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"loot-weapon-groza.img":{"frame":{"x":1483,"y":1192,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"eggplant.img":{"frame":{"x":1483,"y":1250,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"ping-map-help.img":{"frame":{"x":1483,"y":1308,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"crab.img":{"frame":{"x":1483,"y":1366,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"movement.img":{"frame":{"x":2,"y":1462,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"ribbon-red.img":{"frame":{"x":60,"y":1462,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":52,"h":54},"sourceSize":{"w":74,"h":74}},"ribbon-blue.img":{"frame":{"x":116,"y":1462,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":52,"h":54},"sourceSize":{"w":74,"h":74}},"question.img":{"frame":{"x":1302,"y":650,"w":38,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":5,"w":38,"h":54},"sourceSize":{"w":64,"h":64}},"player-visor-demo.img":{"frame":{"x":1302,"y":708,"w":38,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":17,"w":38,"h":54},"sourceSize":{"w":88,"h":88}},"gun-ots38-01.img":{"frame":{"x":1524,"y":782,"w":22,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":63,"w":22,"h":54},"sourceSize":{"w":28,"h":116}},"loot-throwable-frag.img":{"frame":{"x":172,"y":1462,"w":54,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":53},"sourceSize":{"w":64,"h":64}},"loot-throwable-potato.img":{"frame":{"x":230,"y":1462,"w":50,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger.img":{"frame":{"x":284,"y":1462,"w":58,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":58,"h":52},"sourceSize":{"w":64,"h":64}},"potato.img":{"frame":{"x":346,"y":1462,"w":54,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":54,"h":52},"sourceSize":{"w":64,"h":64}},"loot-xp-compass-01.img":{"frame":{"x":404,"y":1462,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"baguette.img":{"frame":{"x":460,"y":1462,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"copy.img":{"frame":{"x":516,"y":1462,"w":48,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":48,"h":52},"sourceSize":{"w":64,"h":64}},"gun-short-01.img":{"frame":{"x":1527,"y":722,"w":18,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":18,"h":52},"sourceSize":{"w":16,"h":50}},"face-dab.img":{"frame":{"x":568,"y":1462,"w":72,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":72,"h":51},"sourceSize":{"w":72,"h":72}},"loot-perk-endless-ammo.img":{"frame":{"x":644,"y":1462,"w":54,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":54,"h":51},"sourceSize":{"w":64,"h":64}},"minimize.img":{"frame":{"x":702,"y":1462,"w":51,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":51,"h":51},"sourceSize":{"w":64,"h":64}},"whale.img":{"frame":{"x":757,"y":1462,"w":62,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":62,"h":50},"sourceSize":{"w":64,"h":64}},"part-pumpkin-01.img":{"frame":{"x":1350,"y":1282,"w":56,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":56,"h":50},"sourceSize":{"w":64,"h":64}},"loot-perk-tree-climbing.img":{"frame":{"x":823,"y":1462,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":50},"sourceSize":{"w":64,"h":64}},"fish.img":{"frame":{"x":877,"y":1462,"w":64,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":64,"h":49},"sourceSize":{"w":64,"h":64}},"crosshair.img":{"frame":{"x":945,"y":1462,"w":49,"h":49},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":49,"h":49},"sourceSize":{"w":49,"h":49}},"face-headshot.img":{"frame":{"x":998,"y":1462,"w":64,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":64,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-super.img":{"frame":{"x":1066,"y":1462,"w":64,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":64,"h":48},"sourceSize":{"w":64,"h":64}},"forest.img":{"frame":{"x":1134,"y":1462,"w":64,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":64,"h":48},"sourceSize":{"w":64,"h":64}},"loot-medical-pill.img":{"frame":{"x":1202,"y":1462,"w":62,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":8,"w":62,"h":48},"sourceSize":{"w":64,"h":64}},"coconut.img":{"frame":{"x":1268,"y":1462,"w":58,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":8,"w":58,"h":48},"sourceSize":{"w":64,"h":64}},"teabag.img":{"frame":{"x":1330,"y":1462,"w":56,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":56,"h":48},"sourceSize":{"w":64,"h":64}},"loot-throwable-strobe.img":{"frame":{"x":1390,"y":1462,"w":55,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":55,"h":48},"sourceSize":{"w":64,"h":64}},"skull-leader.img":{"frame":{"x":1449,"y":1462,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-01x.img":{"frame":{"x":1551,"y":2,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-01.img":{"frame":{"x":1551,"y":54,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"loot-melee-pan-black.img":{"frame":{"x":2,"y":1520,"w":62,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":62,"h":46},"sourceSize":{"w":64,"h":64}},"pilgrim-hat.img":{"frame":{"x":68,"y":1520,"w":62,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":62,"h":46},"sourceSize":{"w":64,"h":64}},"loot-helmet-03.img":{"frame":{"x":134,"y":1520,"w":60,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":9,"w":60,"h":46},"sourceSize":{"w":64,"h":64}},"ping-map-woods-king.img":{"frame":{"x":198,"y":1520,"w":50,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":9,"w":50,"h":46},"sourceSize":{"w":64,"h":64}},"part-flare-01.img":{"frame":{"x":1551,"y":106,"w":46,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":46,"h":46},"sourceSize":{"w":50,"h":50}},"loot-throwable-snowball.img":{"frame":{"x":1551,"y":156,"w":45,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":45,"h":46},"sourceSize":{"w":64,"h":64}},"cog.img":{"frame":{"x":1551,"y":206,"w":44,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":44,"h":46},"sourceSize":{"w":64,"h":64}},"eye.img":{"frame":{"x":1106,"y":1022,"w":64,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":64,"h":44},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-drain.img":{"frame":{"x":1038,"y":954,"w":62,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":10,"w":62,"h":44},"sourceSize":{"w":64,"h":64}},"chicken.img":{"frame":{"x":1174,"y":1090,"w":56,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":56,"h":44},"sourceSize":{"w":64,"h":64}},"player-snow-01.img":{"frame":{"x":252,"y":1520,"w":80,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":43},"sourceSize":{"w":80,"h":80}},"player-mash-01.img":{"frame":{"x":336,"y":1520,"w":80,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":43},"sourceSize":{"w":80,"h":80}},"loot-helmet-02.img":{"frame":{"x":970,"y":886,"w":62,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":11,"w":62,"h":42},"sourceSize":{"w":64,"h":64}},"audio-off.img":{"frame":{"x":902,"y":818,"w":49,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":49,"h":42},"sourceSize":{"w":64,"h":64}},"audio-on.img":{"frame":{"x":834,"y":750,"w":49,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":49,"h":42},"sourceSize":{"w":64,"h":64}},"loot-weapon-fists.img":{"frame":{"x":1551,"y":256,"w":40,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":40,"h":42},"sourceSize":{"w":64,"h":64}},"ping-map-unlock.img":{"frame":{"x":1551,"y":302,"w":34,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":11,"w":34,"h":42},"sourceSize":{"w":64,"h":64}},"loot-melee-hook-silver.img":{"frame":{"x":1551,"y":348,"w":24,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":11,"w":24,"h":42},"sourceSize":{"w":64,"h":64}},"player-mash-02.img":{"frame":{"x":420,"y":1520,"w":74,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":74,"h":41},"sourceSize":{"w":80,"h":80}},"player-snow-02.img":{"frame":{"x":498,"y":1520,"w":74,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":74,"h":41},"sourceSize":{"w":80,"h":80}},"loot-melee-fireaxe.img":{"frame":{"x":576,"y":1520,"w":78,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":78,"h":40},"sourceSize":{"w":76,"h":38}},"loot-perk-scavenger_adv.img":{"frame":{"x":681,"y":608,"w":62,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":12,"w":62,"h":40},"sourceSize":{"w":64,"h":64}},"gg.img":{"frame":{"x":658,"y":1520,"w":60,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":12,"w":60,"h":40},"sourceSize":{"w":64,"h":64}},"proj-mirv-mini-02.img":{"frame":{"x":1551,"y":394,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":46,"h":40},"sourceSize":{"w":48,"h":48}},"proj-mirv-mini-01.img":{"frame":{"x":1551,"y":438,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":46,"h":40},"sourceSize":{"w":48,"h":48}},"gun-dp28-top-01.img":{"frame":{"x":1551,"y":482,"w":40,"h":40},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":40},"sourceSize":{"w":40,"h":40}},"player-hands-02.img":{"frame":{"x":1551,"y":526,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":40,"h":40},"sourceSize":{"w":38,"h":38}},"player-hands-01.img":{"frame":{"x":1551,"y":570,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":40,"h":40},"sourceSize":{"w":38,"h":38}},"quit.img":{"frame":{"x":1551,"y":614,"w":38,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":38,"h":39},"sourceSize":{"w":64,"h":64}},"player-mash-03.img":{"frame":{"x":722,"y":1520,"w":76,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":76,"h":38},"sourceSize":{"w":80,"h":80}},"player-snow-03.img":{"frame":{"x":802,"y":1520,"w":76,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":76,"h":38},"sourceSize":{"w":80,"h":80}},"player-patch-01.img":{"frame":{"x":882,"y":1520,"w":62,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":62,"h":38},"sourceSize":{"w":80,"h":80}},"part-smoke-01.img":{"frame":{"x":1551,"y":657,"w":38,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":38,"h":38},"sourceSize":{"w":36,"h":36}},"player-patch-red.img":{"frame":{"x":948,"y":1520,"w":60,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":21,"w":60,"h":37},"sourceSize":{"w":80,"h":80}},"loot-perk-self-revive.img":{"frame":{"x":1012,"y":1520,"w":64,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":64,"h":36},"sourceSize":{"w":64,"h":64}},"timer-background.img":{"frame":{"x":1551,"y":699,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"resume.img":{"frame":{"x":1551,"y":739,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":14,"w":36,"h":36},"sourceSize":{"w":64,"h":64}},"part-snow-01.img":{"frame":{"x":1551,"y":779,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"close.img":{"frame":{"x":1551,"y":819,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"checked.img":{"frame":{"x":1551,"y":859,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"part-cloth-01.img":{"frame":{"x":1551,"y":899,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"gun-potato-smg-top-01.img":{"frame":{"x":1551,"y":939,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":36,"h":36},"sourceSize":{"w":40,"h":40}},"player-map-outer.img":{"frame":{"x":1551,"y":979,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-map-inner.img":{"frame":{"x":1551,"y":1019,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"submit.img":{"frame":{"x":1551,"y":1059,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"ping-indicator.img":{"frame":{"x":1551,"y":1099,"w":46,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":29,"w":46,"h":35},"sourceSize":{"w":64,"h":64}},"keyboard.img":{"frame":{"x":1483,"y":1424,"w":56,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":15,"w":56,"h":34},"sourceSize":{"w":64,"h":64}},"part-pulse-01.img":{"frame":{"x":1551,"y":1138,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-frag-burst-02.img":{"frame":{"x":1551,"y":1176,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-potato-01.img":{"frame":{"x":1551,"y":1214,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-strobe-01.img":{"frame":{"x":1551,"y":1252,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-frag-burst-01.img":{"frame":{"x":1551,"y":1290,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"player-map-downed.img":{"frame":{"x":1551,"y":1328,"w":36,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":36,"h":33},"sourceSize":{"w":36,"h":36}},"loot-melee-stonehammer.img":{"frame":{"x":1080,"y":1520,"w":76,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":32},"sourceSize":{"w":74,"h":30}},"player-patch-02.img":{"frame":{"x":1160,"y":1520,"w":62,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":62,"h":32},"sourceSize":{"w":80,"h":80}},"player-patch-blue.img":{"frame":{"x":1226,"y":1520,"w":62,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":24,"w":62,"h":32},"sourceSize":{"w":80,"h":80}},"loot-melee-knuckles-heroic.img":{"frame":{"x":1551,"y":1365,"w":48,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":16,"w":48,"h":32},"sourceSize":{"w":64,"h":64}},"loot-melee-knuckles-rusted.img":{"frame":{"x":1551,"y":1401,"w":48,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":16,"w":48,"h":32},"sourceSize":{"w":64,"h":64}},"part-frag-pin-01.img":{"frame":{"x":1551,"y":1437,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":32,"h":32},"sourceSize":{"w":64,"h":64}},"crosshair001.img":{"frame":{"x":1551,"y":1473,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair027.img":{"frame":{"x":1513,"y":901,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair007.img":{"frame":{"x":1302,"y":766,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair010.img":{"frame":{"x":1302,"y":802,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"globe.img":{"frame":{"x":1302,"y":838,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair005.img":{"frame":{"x":1302,"y":874,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair064.img":{"frame":{"x":1302,"y":910,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair109.img":{"frame":{"x":1302,"y":946,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"proj-frag-pin-part.img":{"frame":{"x":1302,"y":982,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":32,"h":32},"sourceSize":{"w":64,"h":64}},"crosshair080.img":{"frame":{"x":1302,"y":1018,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair094.img":{"frame":{"x":1302,"y":1054,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair086.img":{"frame":{"x":1302,"y":1090,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair124.img":{"frame":{"x":1302,"y":1126,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"skull-outlined.img":{"frame":{"x":1302,"y":1162,"w":30,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":30,"h":32},"sourceSize":{"w":32,"h":32}},"unlock.img":{"frame":{"x":1302,"y":1198,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":26,"h":32},"sourceSize":{"w":32,"h":32}},"lock.img":{"frame":{"x":1302,"y":1234,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":26,"h":32},"sourceSize":{"w":32,"h":32}},"skull-team.img":{"frame":{"x":1199,"y":1022,"w":27,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":27,"h":31},"sourceSize":{"w":32,"h":32}},"dc.img":{"frame":{"x":1415,"y":1366,"w":30,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":30,"h":30},"sourceSize":{"w":32,"h":32}},"down.img":{"frame":{"x":1449,"y":1366,"w":30,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":30,"h":30},"sourceSize":{"w":32,"h":32}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":1292,"y":1520,"w":76,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":29},"sourceSize":{"w":74,"h":27}},"loot-melee-woodaxe.img":{"frame":{"x":1372,"y":1520,"w":76,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":29},"sourceSize":{"w":74,"h":27}},"ping-part-quarter-highlight.img":{"frame":{"x":1452,"y":1520,"w":48,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":28},"sourceSize":{"w":64,"h":64}},"ping-part-quarter.img":{"frame":{"x":1504,"y":1520,"w":47,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":47,"h":28},"sourceSize":{"w":64,"h":64}},"player-bullet-trail-03.img":{"frame":{"x":1579,"y":348,"w":18,"h":28},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":28},"sourceSize":{"w":18,"h":28}},"crosshair177.img":{"frame":{"x":1132,"y":1070,"w":32,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":26},"sourceSize":{"w":32,"h":32}},"crown.img":{"frame":{"x":1199,"y":1057,"w":30,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":30,"h":26},"sourceSize":{"w":32,"h":32}},"ping-part-eighth.img":{"frame":{"x":1132,"y":1100,"w":28,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":28,"h":25},"sourceSize":{"w":64,"h":64}},"ping-part-eighth-highlight.img":{"frame":{"x":1189,"y":1138,"w":28,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":28,"h":25},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-drowned.img":{"frame":{"x":2,"y":1570,"w":54,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":20,"w":54,"h":24},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-prismatic.img":{"frame":{"x":60,"y":1570,"w":54,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":20,"w":54,"h":24},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-rugged.img":{"frame":{"x":118,"y":1570,"w":54,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":20,"w":54,"h":24},"sourceSize":{"w":64,"h":64}},"gun-pkp-bot-01.img":{"frame":{"x":1189,"y":1167,"w":40,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":40,"h":24},"sourceSize":{"w":38,"h":22}},"gun-m249-bot-01.img":{"frame":{"x":1501,"y":1462,"w":40,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":40,"h":24},"sourceSize":{"w":38,"h":22}},"crosshair158.img":{"frame":{"x":1555,"y":1520,"w":32,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":32,"h":24},"sourceSize":{"w":32,"h":32}},"part-frag-lever-01.img":{"frame":{"x":1318,"y":1271,"w":28,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":20,"w":28,"h":24},"sourceSize":{"w":64,"h":64}},"crosshair101.img":{"frame":{"x":728,"y":654,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":24,"h":24},"sourceSize":{"w":32,"h":32}},"crosshair102.img":{"frame":{"x":728,"y":682,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":24,"h":24},"sourceSize":{"w":32,"h":32}},"pumpkin-play.img":{"frame":{"x":597,"y":495,"w":22,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":22,"h":24},"sourceSize":{"w":24,"h":24}},"loot-melee-naginata.img":{"frame":{"x":176,"y":1570,"w":175,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":175,"h":22},"sourceSize":{"w":175,"h":27}},"hatchet.img":{"frame":{"x":1318,"y":1299,"w":24,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":24,"h":22},"sourceSize":{"w":24,"h":24}},"crosshair184.img":{"frame":{"x":597,"y":523,"w":22,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":22},"sourceSize":{"w":32,"h":32}},"crosshair045.img":{"frame":{"x":355,"y":1570,"w":22,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":22},"sourceSize":{"w":32,"h":32}},"crosshair040.img":{"frame":{"x":381,"y":1570,"w":22,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":22},"sourceSize":{"w":32,"h":32}},"player-feet-02.img":{"frame":{"x":1328,"y":332,"w":17,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":-1,"w":17,"h":21},"sourceSize":{"w":19,"h":19}},"player-feet-01.img":{"frame":{"x":1328,"y":357,"w":17,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":-1,"w":17,"h":21},"sourceSize":{"w":19,"h":19}},"loot-melee-katana-rusted.img":{"frame":{"x":407,"y":1570,"w":115,"h":20},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":115,"h":20},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-orchid.img":{"frame":{"x":526,"y":1570,"w":115,"h":20},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":115,"h":20},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-demo.img":{"frame":{"x":645,"y":1570,"w":115,"h":20},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":115,"h":20},"sourceSize":{"w":115,"h":20}},"loot-melee-katana.img":{"frame":{"x":764,"y":1570,"w":115,"h":20},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":115,"h":20},"sourceSize":{"w":115,"h":20}},"crosshair181.img":{"frame":{"x":733,"y":382,"w":20,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":20,"h":20},"sourceSize":{"w":32,"h":32}},"crosshair173.img":{"frame":{"x":733,"y":406,"w":20,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":20,"h":20},"sourceSize":{"w":32,"h":32}},"crosshair038.img":{"frame":{"x":733,"y":430,"w":20,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":20,"h":20},"sourceSize":{"w":32,"h":32}},"crosshair000.img":{"frame":{"x":597,"y":549,"w":20,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":20,"h":20},"sourceSize":{"w":32,"h":32}},"gun-qbb97-bot-01.img":{"frame":{"x":1513,"y":937,"w":34,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":34,"h":18},"sourceSize":{"w":32,"h":16}},"ping-part-circle.img":{"frame":{"x":812,"y":362,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":23,"w":18,"h":18},"sourceSize":{"w":64,"h":64}},"part-frag-burst-03.img":{"frame":{"x":812,"y":384,"w":18,"h":18},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"ping-part-circle-highlight.img":{"frame":{"x":812,"y":406,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":23,"w":18,"h":18},"sourceSize":{"w":64,"h":64}},"player-bullet-trail-02.img":{"frame":{"x":812,"y":434,"w":18,"h":18},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"dot.img":{"frame":{"x":812,"y":456,"w":18,"h":18},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"crosshair125.img":{"frame":{"x":1214,"y":886,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":16,"h":16},"sourceSize":{"w":32,"h":32}},"ping-part-circle-auto-highlight.img":{"frame":{"x":1214,"y":906,"w":15,"h":15},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":15},"sourceSize":{"w":15,"h":15}},"ping-part-circle-auto.img":{"frame":{"x":1332,"y":1198,"w":14,"h":14},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto-outer.img":{"frame":{"x":1332,"y":1216,"w":14,"h":14},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"loot-xp-book-05.img":{"frame":{"x":608,"y":1205,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}}}}]')
            , Hs = JSON.parse('[{"meta":{"image":"shared-0-50-aa0212d5.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-police-floor-01.img":{"frame":{"x":722,"y":2,"w":1056,"h":784},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1056,"h":784},"sourceSize":{"w":1056,"h":784}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":2,"y":2,"w":716,"h":796},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":716,"h":796},"sourceSize":{"w":716,"h":796}},"map-building-mansion-floor-01b.img":{"frame":{"x":2,"y":802,"w":913,"h":609},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":913,"h":609},"sourceSize":{"w":913,"h":609}},"map-building-barn-floor-01.img":{"frame":{"x":919,"y":802,"w":800,"h":544},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":544},"sourceSize":{"w":800,"h":544}},"map-building-police-ceiling-02.img":{"frame":{"x":2,"y":1415,"w":265,"h":541},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":265,"h":541},"sourceSize":{"w":265,"h":541}},"map-building-cabin-floor.img":{"frame":{"x":271,"y":1415,"w":608,"h":496},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":496},"sourceSize":{"w":608,"h":496}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":883,"y":1415,"w":652,"h":460},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":652,"h":460},"sourceSize":{"w":652,"h":460}},"map-building-hut-floor-02.img":{"frame":{"x":1539,"y":1415,"w":68,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":68,"h":384},"sourceSize":{"w":68,"h":384}},"map-building-container-open-floor.img":{"frame":{"x":1611,"y":1415,"w":90,"h":345},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":345},"sourceSize":{"w":90,"h":346}},"map-building-dock-floor-01b.img":{"frame":{"x":1782,"y":2,"w":81,"h":332},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":81,"h":332},"sourceSize":{"w":81,"h":332}},"map-wall-18.img":{"frame":{"x":1782,"y":338,"w":16,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":288},"sourceSize":{"w":16,"h":288}},"map-building-container-floor-01.img":{"frame":{"x":1867,"y":2,"w":90,"h":267},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":267},"sourceSize":{"w":90,"h":268}},"map-club-bar-01.img":{"frame":{"x":1867,"y":273,"w":27,"h":240},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":240},"sourceSize":{"w":27,"h":240}},"map-wall-14-rounded.img":{"frame":{"x":1898,"y":273,"w":16,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-14.img":{"frame":{"x":1918,"y":273,"w":16,"h":224},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-13-rounded.img":{"frame":{"x":1938,"y":273,"w":16,"h":208},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-13.img":{"frame":{"x":1867,"y":517,"w":16,"h":208},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-building-container-open-ceiling-01.img":{"frame":{"x":1867,"y":729,"w":90,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":76,"w":90,"h":194},"sourceSize":{"w":90,"h":346}},"map-building-container-ceiling-03.img":{"frame":{"x":1867,"y":927,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-02.img":{"frame":{"x":1867,"y":1123,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-01.img":{"frame":{"x":1867,"y":1319,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":268}},"map-wall-glass-12-2.img":{"frame":{"x":1887,"y":517,"w":32,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-glass-12.img":{"frame":{"x":1923,"y":517,"w":16,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-12.img":{"frame":{"x":1867,"y":1515,"w":16,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-12-rounded.img":{"frame":{"x":1887,"y":1515,"w":16,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-building-container-ceiling-05.img":{"frame":{"x":1867,"y":1711,"w":90,"h":191},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":191},"sourceSize":{"w":90,"h":268}},"map-decal-club-02.img":{"frame":{"x":1802,"y":338,"w":52,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":180},"sourceSize":{"w":52,"h":180}},"map-pipes-04.img":{"frame":{"x":1907,"y":1515,"w":44,"h":176},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":176},"sourceSize":{"w":44,"h":176}},"map-wall-11.img":{"frame":{"x":1782,"y":630,"w":16,"h":176},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-11-rounded.img":{"frame":{"x":1802,"y":630,"w":16,"h":176},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-saloon-bar-01.img":{"frame":{"x":1822,"y":630,"w":27,"h":162},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":162},"sourceSize":{"w":27,"h":162}},"map-wall-glass-10.img":{"frame":{"x":1782,"y":810,"w":16,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-10-rounded.img":{"frame":{"x":1802,"y":810,"w":16,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-10.img":{"frame":{"x":1822,"y":810,"w":16,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-pipes-01.img":{"frame":{"x":1782,"y":974,"w":45,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":144},"sourceSize":{"w":45,"h":144}},"map-wall-09-rounded.img":{"frame":{"x":1842,"y":810,"w":16,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-glass-9.img":{"frame":{"x":1831,"y":974,"w":16,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-09.img":{"frame":{"x":1782,"y":1122,"w":16,"h":144},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-08-rounded.img":{"frame":{"x":1802,"y":1122,"w":16,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":128},"sourceSize":{"w":16,"h":128}},"map-wall-shack-right.img":{"frame":{"x":1943,"y":517,"w":12,"h":121},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":121},"sourceSize":{"w":12,"h":121}},"map-door-02.img":{"frame":{"x":1822,"y":1122,"w":40,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":112},"sourceSize":{"w":40,"h":112}},"map-wall-07.img":{"frame":{"x":1782,"y":1270,"w":16,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-07-rounded.img":{"frame":{"x":1802,"y":1270,"w":16,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-shack-left.img":{"frame":{"x":1851,"y":974,"w":12,"h":111},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":111},"sourceSize":{"w":12,"h":111}},"map-bed-01.img":{"frame":{"x":1782,"y":1386,"w":48,"h":108},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":108},"sourceSize":{"w":48,"h":108}},"map-wall-outhouse-side.img":{"frame":{"x":1802,"y":522,"w":12,"h":99},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":99},"sourceSize":{"w":12,"h":99}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1961,"y":2,"w":82,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":82,"h":97},"sourceSize":{"w":82,"h":104}},"map-pipes-05.img":{"frame":{"x":1961,"y":103,"w":45,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":96},"sourceSize":{"w":45,"h":96}},"map-wall-06-rounded.img":{"frame":{"x":2010,"y":103,"w":16,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-06.img":{"frame":{"x":1961,"y":203,"w":16,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"proj-wedge-01.img":{"frame":{"x":1981,"y":203,"w":31,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":89},"sourceSize":{"w":32,"h":90}},"part-wedge-01.img":{"frame":{"x":1961,"y":303,"w":31,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":89},"sourceSize":{"w":32,"h":90}},"map-building-club-vault-ceiling.img":{"frame":{"x":1961,"y":396,"w":80,"h":88},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":88},"sourceSize":{"w":80,"h":88}},"role-assault.img":{"frame":{"x":1961,"y":488,"w":68,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":68,"h":87},"sourceSize":{"w":88,"h":88}},"map-snow-07.img":{"frame":{"x":2,"y":1960,"w":250,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":250,"h":86},"sourceSize":{"w":256,"h":96}},"map-pipes-02.img":{"frame":{"x":256,"y":1960,"w":119,"h":86},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":119,"h":86},"sourceSize":{"w":119,"h":86}},"role-tank.img":{"frame":{"x":1961,"y":579,"w":68,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":68,"h":85},"sourceSize":{"w":88,"h":88}},"role-demo.img":{"frame":{"x":1961,"y":668,"w":68,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":68,"h":85},"sourceSize":{"w":88,"h":88}},"role-sniper.img":{"frame":{"x":1961,"y":757,"w":68,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":68,"h":85},"sourceSize":{"w":88,"h":88}},"role-healer.img":{"frame":{"x":1961,"y":846,"w":68,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":68,"h":85},"sourceSize":{"w":88,"h":88}},"role-scout.img":{"frame":{"x":1961,"y":935,"w":68,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":68,"h":85},"sourceSize":{"w":88,"h":88}},"map-stove-01.img":{"frame":{"x":379,"y":1960,"w":108,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":108,"h":84},"sourceSize":{"w":112,"h":88}},"map-bed-res-02.img":{"frame":{"x":1996,"y":303,"w":47,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":47,"h":83},"sourceSize":{"w":48,"h":96}},"map-bed-res-01.img":{"frame":{"x":1961,"y":1024,"w":47,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":47,"h":83},"sourceSize":{"w":48,"h":96}},"map-crate-04.img":{"frame":{"x":1961,"y":1111,"w":82,"h":82},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":82},"sourceSize":{"w":82,"h":82}},"map-building-dock-floor-01a.img":{"frame":{"x":1961,"y":1197,"w":80,"h":81},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":81},"sourceSize":{"w":80,"h":81}},"map-table-02.img":{"frame":{"x":491,"y":1960,"w":144,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03.img":{"frame":{"x":1961,"y":1282,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-01.img":{"frame":{"x":1961,"y":1366,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02.img":{"frame":{"x":1961,"y":1450,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-wall-04-stone.img":{"frame":{"x":2016,"y":203,"w":20,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-04-cobalt.img":{"frame":{"x":2012,"y":1024,"w":20,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-05-rounded.img":{"frame":{"x":1961,"y":1534,"w":16,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-05.img":{"frame":{"x":1981,"y":1534,"w":16,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wheel-01.img":{"frame":{"x":639,"y":1960,"w":156,"h":78},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":78},"sourceSize":{"w":156,"h":78}},"map-crate-res-03.img":{"frame":{"x":799,"y":1960,"w":108,"h":78},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":78},"sourceSize":{"w":108,"h":78}},"map-wheel-03.img":{"frame":{"x":911,"y":1960,"w":156,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":76},"sourceSize":{"w":156,"h":78}},"map-wheel-02.img":{"frame":{"x":1071,"y":1960,"w":151,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":151,"h":76},"sourceSize":{"w":156,"h":78}},"map-sandbags-01.img":{"frame":{"x":1226,"y":1960,"w":128,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":74},"sourceSize":{"w":128,"h":74}},"map-crate-11.img":{"frame":{"x":1961,"y":1618,"w":74,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-10.img":{"frame":{"x":1961,"y":1696,"w":74,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-sandbags-02.img":{"frame":{"x":1961,"y":1774,"w":60,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":60,"h":74},"sourceSize":{"w":74,"h":74}},"pass-unlock-type-bg.img":{"frame":{"x":1961,"y":1852,"w":73,"h":73},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":73},"sourceSize":{"w":73,"h":73}},"pass-unlock-bg.img":{"frame":{"x":1782,"y":1498,"w":73,"h":73},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":73},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-06.img":{"frame":{"x":1782,"y":1575,"w":73,"h":73},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":73,"h":73},"sourceSize":{"w":73,"h":73}},"map-building-barn-ceiling-02.img":{"frame":{"x":1539,"y":1803,"w":208,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":72},"sourceSize":{"w":208,"h":72}},"map-crate-14.img":{"frame":{"x":1782,"y":1652,"w":78,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-14a.img":{"frame":{"x":1782,"y":1728,"w":78,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-stone-05.img":{"frame":{"x":1782,"y":1804,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-09.img":{"frame":{"x":1782,"y":1880,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02sv.img":{"frame":{"x":1705,"y":1415,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-08.img":{"frame":{"x":1705,"y":1491,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-barrel-02.img":{"frame":{"x":1705,"y":1567,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-07.img":{"frame":{"x":1705,"y":1643,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-barrel-01.img":{"frame":{"x":1358,"y":1960,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-01.img":{"frame":{"x":1434,"y":1960,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02.img":{"frame":{"x":1510,"y":1960,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-01.img":{"frame":{"x":1586,"y":1960,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-wall-outhouse-bot.img":{"frame":{"x":1898,"y":501,"w":36,"h":12},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":12},"sourceSize":{"w":36,"h":12}},"map-stone-04.img":{"frame":{"x":1738,"y":1960,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-07.img":{"frame":{"x":1814,"y":1960,"w":71,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":71,"h":72},"sourceSize":{"w":72,"h":72}},"map-outhouse-res.img":{"frame":{"x":1889,"y":1960,"w":78,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":61,"y":19,"w":78,"h":70},"sourceSize":{"w":200,"h":156}},"map-table-res.img":{"frame":{"x":1971,"y":1960,"w":69,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":69,"h":69},"sourceSize":{"w":72,"h":72}},"map-door-slot-02.img":{"frame":{"x":2001,"y":1534,"w":19,"h":68},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":68},"sourceSize":{"w":19,"h":68}},"map-door-slot-01.img":{"frame":{"x":2024,"y":1534,"w":19,"h":67},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":67},"sourceSize":{"w":19,"h":67}},"player-helmet-marksman.img":{"frame":{"x":1723,"y":802,"w":49,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":49,"h":66},"sourceSize":{"w":88,"h":88}},"part-note-02.img":{"frame":{"x":1723,"y":872,"w":49,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":-1,"w":49,"h":66},"sourceSize":{"w":64,"h":64}},"part-note-01.img":{"frame":{"x":1723,"y":942,"w":48,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":-1,"w":48,"h":66},"sourceSize":{"w":64,"h":64}},"map-toilet-02.img":{"frame":{"x":1723,"y":1012,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":64},"sourceSize":{"w":64,"h":64}},"map-toilet-01.img":{"frame":{"x":1723,"y":1080,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":64},"sourceSize":{"w":64,"h":64}},"map-decal-oil-01.img":{"frame":{"x":1723,"y":1148,"w":46,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":46,"h":64},"sourceSize":{"w":64,"h":64}},"map-door-04.img":{"frame":{"x":1818,"y":522,"w":27,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"map-wall-04.img":{"frame":{"x":2025,"y":1774,"w":16,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wall-04-rounded.img":{"frame":{"x":1822,"y":1270,"w":16,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-door-01.img":{"frame":{"x":2030,"y":103,"w":12,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-05.img":{"frame":{"x":1943,"y":642,"w":12,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"loot-weapon-m9-cursed.img":{"frame":{"x":1723,"y":1216,"w":52,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":63},"sourceSize":{"w":64,"h":64}},"map-squash-01.img":{"frame":{"x":919,"y":1350,"w":65,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":65,"h":61},"sourceSize":{"w":72,"h":72}},"map-case-ring-01.img":{"frame":{"x":988,"y":1350,"w":78,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-case-chrys-01.img":{"frame":{"x":1070,"y":1350,"w":78,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-case-hatchet-res-01.img":{"frame":{"x":1152,"y":1350,"w":67,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":67,"h":60},"sourceSize":{"w":72,"h":72}},"map-case-flare-res-01.img":{"frame":{"x":1223,"y":1350,"w":67,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":67,"h":60},"sourceSize":{"w":72,"h":72}},"loot-perk-inspiration.img":{"frame":{"x":1294,"y":1350,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"map-stone-res-01.img":{"frame":{"x":1358,"y":1350,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"map-chimney-01.img":{"frame":{"x":1422,"y":1350,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"map-stone-res-04.img":{"frame":{"x":1486,"y":1350,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"loot-perk-final-bugle.img":{"frame":{"x":1723,"y":1283,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"map-building-boarded-window-01.img":{"frame":{"x":1834,"y":1386,"w":24,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":24,"h":59},"sourceSize":{"w":24,"h":64}},"news.img":{"frame":{"x":1550,"y":1350,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"map-bollard-01.img":{"frame":{"x":1612,"y":1350,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":58,"h":58},"sourceSize":{"w":72,"h":72}},"loot-perk-turkey_shoot.img":{"frame":{"x":1674,"y":1350,"w":54,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":54,"h":58},"sourceSize":{"w":64,"h":64}},"map-door-03.img":{"frame":{"x":1842,"y":1270,"w":16,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":56},"sourceSize":{"w":16,"h":56}},"map-building-bank-window-01.img":{"frame":{"x":1732,"y":1350,"w":28,"h":52},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":52},"sourceSize":{"w":28,"h":52}},"map-building-house-window-res-01.img":{"frame":{"x":1751,"y":1803,"w":16,"h":52},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-crate-06.img":{"frame":{"x":1867,"y":1906,"w":82,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":50},"sourceSize":{"w":82,"h":50}},"map-towelrack-01.img":{"frame":{"x":271,"y":1915,"w":96,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":96,"h":40},"sourceSize":{"w":96,"h":48}},"map-recorder-04.img":{"frame":{"x":1822,"y":1338,"w":24,"h":40},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-recorder-03.img":{"frame":{"x":1834,"y":1449,"w":24,"h":40},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-wall-02-5-rounded.img":{"frame":{"x":1705,"y":1719,"w":16,"h":40},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":40},"sourceSize":{"w":16,"h":40}},"map-piano-01.img":{"frame":{"x":371,"y":1915,"w":120,"h":38},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":38},"sourceSize":{"w":120,"h":38}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":495,"y":1915,"w":74,"h":38},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":38},"sourceSize":{"w":74,"h":38}},"map-deposit-box-02.img":{"frame":{"x":573,"y":1915,"w":80,"h":37},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-deposit-box-01.img":{"frame":{"x":657,"y":1915,"w":80,"h":37},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-power-box-01.img":{"frame":{"x":1725,"y":1719,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-fire-ext-01.img":{"frame":{"x":1611,"y":1764,"w":42,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":42,"h":34},"sourceSize":{"w":42,"h":35}},"map-potato-res.img":{"frame":{"x":1657,"y":1764,"w":29,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":29,"h":34},"sourceSize":{"w":48,"h":48}},"map-bush-res-02.img":{"frame":{"x":1690,"y":1764,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":21,"w":33,"h":33},"sourceSize":{"w":72,"h":72}},"map-bookshelf-02.img":{"frame":{"x":883,"y":1879,"w":112,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bookshelf-01.img":{"frame":{"x":999,"y":1879,"w":112,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-building-porch-01.img":{"frame":{"x":1115,"y":1879,"w":64,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":32},"sourceSize":{"w":64,"h":32}},"crosshair160.img":{"frame":{"x":1727,"y":1764,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-column-01.img":{"frame":{"x":1183,"y":1879,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair136.img":{"frame":{"x":1219,"y":1879,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"crosshair118.img":{"frame":{"x":1255,"y":1879,"w":32,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-fire-ext-res.img":{"frame":{"x":1291,"y":1879,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":26,"h":32},"sourceSize":{"w":42,"h":35}},"map-decal-oil-05.img":{"frame":{"x":1321,"y":1879,"w":19,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":19,"h":32},"sourceSize":{"w":32,"h":32}},"map-wall-02-rounded.img":{"frame":{"x":1344,"y":1879,"w":16,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-02.img":{"frame":{"x":1364,"y":1879,"w":16,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"loot-melee-sledgehammer.img":{"frame":{"x":1384,"y":1879,"w":76,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":76,"h":31},"sourceSize":{"w":74,"h":29}},"map-drawers-res.img":{"frame":{"x":1464,"y":1879,"w":48,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":48,"h":31},"sourceSize":{"w":48,"h":32}},"map-woodpile-res-01.img":{"frame":{"x":1818,"y":590,"w":40,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":9,"w":40,"h":30},"sourceSize":{"w":48,"h":48}},"map-bathhouse-pool-01.img":{"frame":{"x":1516,"y":1879,"w":18,"h":30},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":30},"sourceSize":{"w":18,"h":30}},"map-screen-res-01.img":{"frame":{"x":1538,"y":1879,"w":60,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":60,"h":29},"sourceSize":{"w":62,"h":29}},"map-barrel-res-03.img":{"frame":{"x":1602,"y":1879,"w":40,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":42,"w":40,"h":29},"sourceSize":{"w":72,"h":72}},"map-gun-mount-04.img":{"frame":{"x":1646,"y":1879,"w":64,"h":28},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":28},"sourceSize":{"w":64,"h":28}},"map-decal-oil-04.img":{"frame":{"x":1714,"y":1879,"w":30,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":30,"h":28},"sourceSize":{"w":32,"h":32}},"map-bush-res-04.img":{"frame":{"x":1961,"y":1929,"w":27,"h":27},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":27},"sourceSize":{"w":27,"h":27}},"map-gun-mount-05.img":{"frame":{"x":741,"y":1915,"w":72,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":26},"sourceSize":{"w":72,"h":28}},"map-gun-mount-01.img":{"frame":{"x":817,"y":1915,"w":72,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":26},"sourceSize":{"w":72,"h":28}},"crosshair098.img":{"frame":{"x":1992,"y":1929,"w":32,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":26},"sourceSize":{"w":32,"h":32}},"map-bush-res-01.img":{"frame":{"x":1748,"y":1879,"w":30,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":23,"w":30,"h":26},"sourceSize":{"w":72,"h":72}},"map-candle-01.img":{"frame":{"x":893,"y":1915,"w":26,"h":26},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":26},"sourceSize":{"w":26,"h":26}},"map-locker-03.img":{"frame":{"x":923,"y":1915,"w":48,"h":25},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":25},"sourceSize":{"w":48,"h":25}},"map-locker-02.img":{"frame":{"x":975,"y":1915,"w":48,"h":25},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":25},"sourceSize":{"w":48,"h":25}},"map-locker-01.img":{"frame":{"x":1027,"y":1915,"w":48,"h":25},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":25},"sourceSize":{"w":48,"h":25}},"map-building-bank-window-res-01.img":{"frame":{"x":1079,"y":1915,"w":26,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":26,"w":26,"h":25},"sourceSize":{"w":72,"h":72}},"map-screen-01.img":{"frame":{"x":1109,"y":1915,"w":128,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":24},"sourceSize":{"w":128,"h":24}},"map-gun-mount-03.img":{"frame":{"x":1241,"y":1915,"w":64,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":24},"sourceSize":{"w":64,"h":28}},"map-gun-mount-02.img":{"frame":{"x":1309,"y":1915,"w":64,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":24},"sourceSize":{"w":64,"h":28}},"cobalt.img":{"frame":{"x":1377,"y":1915,"w":24,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":24},"sourceSize":{"w":24,"h":24}},"map-tree-res-01.img":{"frame":{"x":1405,"y":1915,"w":24,"h":24},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":24},"sourceSize":{"w":24,"h":24}},"crosshair051.img":{"frame":{"x":1433,"y":1915,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":24,"h":24},"sourceSize":{"w":32,"h":32}},"map-decal-flyer-01.img":{"frame":{"x":1461,"y":1915,"w":21,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":21,"h":24},"sourceSize":{"w":24,"h":24}},"crosshair176.img":{"frame":{"x":1486,"y":1915,"w":20,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":20,"h":19},"sourceSize":{"w":32,"h":32}},"map-barrel-04.img":{"frame":{"x":1510,"y":1915,"w":45,"h":18},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":18},"sourceSize":{"w":45,"h":18}},"map-barrel-03.img":{"frame":{"x":1559,"y":1915,"w":45,"h":18},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":18},"sourceSize":{"w":45,"h":18}},"map-bottle-04.img":{"frame":{"x":1608,"y":1915,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":-1,"y":-1,"w":18,"h":18},"sourceSize":{"w":16,"h":16}},"map-switch-01.img":{"frame":{"x":2028,"y":1929,"w":15,"h":17},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-switch-02.img":{"frame":{"x":1763,"y":1764,"w":15,"h":17},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-switch-03.img":{"frame":{"x":1630,"y":1915,"w":15,"h":17},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-bottle-03.img":{"frame":{"x":1751,"y":1859,"w":16,"h":16},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-05.img":{"frame":{"x":1649,"y":1915,"w":16,"h":16},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-wall-01-rounded.img":{"frame":{"x":1669,"y":1915,"w":16,"h":16},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-01.img":{"frame":{"x":1689,"y":1915,"w":16,"h":16},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-02.img":{"frame":{"x":1709,"y":1915,"w":16,"h":16},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-crate-03.img":{"frame":{"x":1662,"y":1960,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}}}},{"meta":{"image":"shared-1-50-e92848bd.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":284,"y":2,"w":472,"h":440},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":0,"w":472,"h":440},"sourceSize":{"w":496,"h":440}},"map-building-bank-ceiling-02.img":{"frame":{"x":2,"y":2,"w":278,"h":446},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":24,"w":278,"h":446},"sourceSize":{"w":278,"h":470}},"map-building-club-floor-01c.img":{"frame":{"x":760,"y":2,"w":721,"h":433},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":721,"h":433},"sourceSize":{"w":721,"h":433}},"map-building-house-floor-01.img":{"frame":{"x":2,"y":452,"w":480,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-house-floor-02.img":{"frame":{"x":486,"y":452,"w":480,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-mansion-ceiling.img":{"frame":{"x":970,"y":452,"w":458,"h":404},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":458,"h":404},"sourceSize":{"w":512,"h":432}},"map-building-bank-floor-01.img":{"frame":{"x":2,"y":888,"w":848,"h":401},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":848,"h":401},"sourceSize":{"w":848,"h":401}},"map-building-mansion-cellar-01a.img":{"frame":{"x":854,"y":888,"w":433,"h":401},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":433,"h":401},"sourceSize":{"w":433,"h":401}},"map-building-warehouse-floor-01.img":{"frame":{"x":1485,"y":2,"w":500,"h":400},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":500,"h":400},"sourceSize":{"w":500,"h":400}},"map-building-warehouse-floor-02.img":{"frame":{"x":1485,"y":406,"w":440,"h":400},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":440,"h":400},"sourceSize":{"w":440,"h":400}},"map-building-shilo-floor-01.img":{"frame":{"x":1485,"y":810,"w":480,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":384},"sourceSize":{"w":480,"h":384}},"map-building-shilo-ceiling-01.img":{"frame":{"x":2,"y":1293,"w":480,"h":384},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":384},"sourceSize":{"w":480,"h":384}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":486,"y":1293,"w":556,"h":365},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":556,"h":365},"sourceSize":{"w":556,"h":365}},"map-building-bridge-lg-floor.img":{"frame":{"x":1046,"y":1293,"w":506,"h":354},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":506,"h":354},"sourceSize":{"w":506,"h":354}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":1556,"y":1293,"w":364,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":364,"h":350},"sourceSize":{"w":369,"h":353}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":1681,"w":636,"h":349},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":636,"h":349},"sourceSize":{"w":640,"h":352}},"map-building-house-ceiling.img":{"frame":{"x":642,"y":1681,"w":360,"h":324},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":324},"sourceSize":{"w":360,"h":324}},"map-building-police-floor-02.img":{"frame":{"x":1006,"y":1681,"w":305,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":305,"h":321},"sourceSize":{"w":305,"h":785}},"map-building-barn-ceiling-01.img":{"frame":{"x":1315,"y":1681,"w":600,"h":312},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":600,"h":312},"sourceSize":{"w":600,"h":312}},"map-building-club-floor-01e.img":{"frame":{"x":1291,"y":888,"w":177,"h":241},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":241},"sourceSize":{"w":177,"h":241}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":1291,"y":1133,"w":160,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":71,"w":160,"h":153},"sourceSize":{"w":160,"h":224}},"map-shack-res-03.img":{"frame":{"x":1485,"y":1198,"w":114,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":33,"w":114,"h":91},"sourceSize":{"w":210,"h":170}},"map-shack-res-02.img":{"frame":{"x":1603,"y":1198,"w":114,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":33,"w":114,"h":91},"sourceSize":{"w":210,"h":170}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":1721,"y":1198,"w":190,"h":90},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":190,"h":90},"sourceSize":{"w":190,"h":90}},"map-bunker-vent-03.img":{"frame":{"x":1915,"y":1198,"w":68,"h":68},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":68,"h":68},"sourceSize":{"w":68,"h":68}},"map-bush-07x.img":{"frame":{"x":1919,"y":1681,"w":66,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":66,"h":68},"sourceSize":{"w":72,"h":72}},"map-bush-01f.img":{"frame":{"x":1919,"y":1753,"w":66,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":66,"h":68},"sourceSize":{"w":72,"h":72}},"map-decal-initiative.img":{"frame":{"x":1919,"y":1825,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"pass.img":{"frame":{"x":1919,"y":1893,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-vat-res.img":{"frame":{"x":1924,"y":1293,"w":57,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":57,"h":64},"sourceSize":{"w":72,"h":72}},"loot-perk-hotw.img":{"frame":{"x":1929,"y":406,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-halloween-mystery.img":{"frame":{"x":1929,"y":474,"w":56,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":63},"sourceSize":{"w":64,"h":64}},"map-toilet-res-01.img":{"frame":{"x":1929,"y":541,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"part-leaf-01sv.img":{"frame":{"x":1924,"y":1361,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"map-wall-outhouse-top.img":{"frame":{"x":1279,"y":860,"w":102,"h":12},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":102,"h":12},"sourceSize":{"w":102,"h":12}},"map-tree-09.img":{"frame":{"x":1929,"y":662,"w":56,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-decal-club-01.img":{"frame":{"x":1929,"y":722,"w":52,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":56,"w":52,"h":56},"sourceSize":{"w":52,"h":180}},"map-crate-20.img":{"frame":{"x":1924,"y":1421,"w":54,"h":54},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":54},"sourceSize":{"w":54,"h":54}},"map-stove-02.img":{"frame":{"x":1924,"y":1479,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":52,"h":54},"sourceSize":{"w":56,"h":56}},"map-decal-oil-02.img":{"frame":{"x":1432,"y":452,"w":48,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":48,"h":53},"sourceSize":{"w":64,"h":64}},"map-building-house-window-01.img":{"frame":{"x":1969,"y":810,"w":16,"h":52},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-decal-oil-03.img":{"frame":{"x":1432,"y":509,"w":48,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":48,"h":50},"sourceSize":{"w":64,"h":64}},"map-toilet-res-02.img":{"frame":{"x":1432,"y":563,"w":43,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":43,"h":50},"sourceSize":{"w":64,"h":64}},"map-toilet-04.img":{"frame":{"x":1432,"y":617,"w":36,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":36,"h":50},"sourceSize":{"w":50,"h":50}},"map-toilet-03.img":{"frame":{"x":1432,"y":671,"w":36,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":36,"h":50},"sourceSize":{"w":50,"h":50}},"map-couch-03.img":{"frame":{"x":1432,"y":725,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-pot-04.img":{"frame":{"x":1432,"y":777,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-woodpile-01.img":{"frame":{"x":1924,"y":1537,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-pot-01.img":{"frame":{"x":1924,"y":1589,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-bathrocks-01.img":{"frame":{"x":1989,"y":2,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-pot-05.img":{"frame":{"x":1989,"y":54,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-pot-03.img":{"frame":{"x":1989,"y":106,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-tree-res-02.img":{"frame":{"x":1989,"y":158,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-pot-02.img":{"frame":{"x":1989,"y":210,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-recorder-01.img":{"frame":{"x":1989,"y":262,"w":32,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-02.img":{"frame":{"x":1989,"y":314,"w":32,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-wall-03-rounded.img":{"frame":{"x":1989,"y":366,"w":16,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-03.img":{"frame":{"x":2009,"y":366,"w":16,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-control-panel-03.img":{"frame":{"x":1989,"y":418,"w":48,"h":47},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":47},"sourceSize":{"w":48,"h":47}},"map-couch-res-01.img":{"frame":{"x":1989,"y":469,"w":43,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":43,"h":46},"sourceSize":{"w":48,"h":48}},"map-saloon-bar-02.img":{"frame":{"x":1989,"y":519,"w":27,"h":46},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":46},"sourceSize":{"w":27,"h":46}},"map-stand-01.img":{"frame":{"x":1989,"y":569,"w":40,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":45},"sourceSize":{"w":40,"h":45}},"map-squash-res-01.img":{"frame":{"x":1989,"y":618,"w":45,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":45,"h":44},"sourceSize":{"w":48,"h":48}},"map-pot-res-01.img":{"frame":{"x":1989,"y":666,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":44,"h":44},"sourceSize":{"w":72,"h":72}},"map-bunker-vent-01.img":{"frame":{"x":1989,"y":714,"w":42,"h":42},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":42,"h":42},"sourceSize":{"w":42,"h":42}},"map-wall-shack-top.img":{"frame":{"x":970,"y":860,"w":180,"h":12},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":12},"sourceSize":{"w":180,"h":12}},"map-wall-shack-bot.img":{"frame":{"x":1154,"y":860,"w":121,"h":12},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":121,"h":12},"sourceSize":{"w":121,"h":12}},"map-tree-04.img":{"frame":{"x":1929,"y":602,"w":56,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}}}},{"meta":{"image":"shared-2-50-fcf3c569.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-club-ceiling-01a.img":{"frame":{"x":476,"y":2,"w":369,"h":297},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":369,"h":297},"sourceSize":{"w":369,"h":297}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":2,"y":2,"w":470,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":470,"h":308},"sourceSize":{"w":480,"h":320}},"map-building-club-floor-01g.img":{"frame":{"x":2,"y":314,"w":401,"h":289},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":401,"h":289},"sourceSize":{"w":401,"h":289}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":849,"y":2,"w":456,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":456,"h":288},"sourceSize":{"w":456,"h":288}},"map-building-teahouse-floor-01.img":{"frame":{"x":849,"y":294,"w":448,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":288},"sourceSize":{"w":448,"h":288}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":407,"y":314,"w":244,"h":280},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":280},"sourceSize":{"w":244,"h":280}},"map-building-bank-ceiling-01.img":{"frame":{"x":2,"y":607,"w":253,"h":277},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":253,"h":277},"sourceSize":{"w":253,"h":300}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":259,"y":607,"w":544,"h":274},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":544,"h":274},"sourceSize":{"w":544,"h":288}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":807,"y":607,"w":268,"h":268},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":268,"h":268},"sourceSize":{"w":268,"h":268}},"map-tree-08f.img":{"frame":{"x":2,"y":888,"w":256,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08su.img":{"frame":{"x":262,"y":888,"w":256,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-silo-01.img":{"frame":{"x":522,"y":888,"w":252,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":252,"h":254},"sourceSize":{"w":256,"h":256}},"map-building-police-ceiling-01.img":{"frame":{"x":778,"y":888,"w":504,"h":240},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":240},"sourceSize":{"w":504,"h":240}},"map-building-police-ceiling-03.img":{"frame":{"x":1309,"y":2,"w":252,"h":240},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":252,"h":240},"sourceSize":{"w":252,"h":240}},"map-building-barn-basement-floor-01.img":{"frame":{"x":2,"y":1148,"w":332,"h":236},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":332,"h":236},"sourceSize":{"w":332,"h":236}},"map-building-barn-basement-floor-02.img":{"frame":{"x":1309,"y":246,"w":188,"h":236},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":188,"h":236},"sourceSize":{"w":188,"h":236}},"map-building-hut-floor-01.img":{"frame":{"x":1309,"y":486,"w":228,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":228,"h":228},"sourceSize":{"w":256,"h":256}},"map-building-bank-floor-02.img":{"frame":{"x":338,"y":1148,"w":434,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":434,"h":224},"sourceSize":{"w":544,"h":224}},"map-building-club-ceiling-01c.img":{"frame":{"x":1309,"y":718,"w":201,"h":217},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":201,"h":217},"sourceSize":{"w":201,"h":217}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":776,"y":1148,"w":416,"h":216},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":216},"sourceSize":{"w":416,"h":216}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":1196,"y":1148,"w":360,"h":216},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":216},"sourceSize":{"w":360,"h":216}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":1079,"y":607,"w":200,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":216},"sourceSize":{"w":200,"h":224}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":2,"y":1388,"w":621,"h":206},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":13,"w":621,"h":206},"sourceSize":{"w":653,"h":232}},"map-building-shack-floor-03.img":{"frame":{"x":627,"y":1388,"w":286,"h":206},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":286,"h":206},"sourceSize":{"w":288,"h":224}},"map-building-hut-ceiling-01.img":{"frame":{"x":1309,"y":939,"w":192,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":192,"h":198},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-03.img":{"frame":{"x":917,"y":1388,"w":192,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":192,"h":198},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-02.img":{"frame":{"x":1113,"y":1388,"w":192,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":192,"h":198},"sourceSize":{"w":204,"h":204}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":1598,"w":699,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":21,"w":699,"h":192},"sourceSize":{"w":760,"h":216}},"map-bunker-storm-floor-02.img":{"frame":{"x":655,"y":314,"w":160,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":192},"sourceSize":{"w":160,"h":192}},"map-building-panicroom-floor.img":{"frame":{"x":1309,"y":1388,"w":144,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-panicroom-ceiling.img":{"frame":{"x":705,"y":1598,"w":144,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-barn-basement-stairs.img":{"frame":{"x":853,"y":1598,"w":144,"h":192},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-bridge-md-floor.img":{"frame":{"x":1001,"y":1598,"w":448,"h":184},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":184},"sourceSize":{"w":448,"h":184}},"map-building-bank-ceiling-03.img":{"frame":{"x":1453,"y":1598,"w":108,"h":181},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":95,"w":108,"h":181},"sourceSize":{"w":108,"h":276}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":1565,"y":2,"w":284,"h":172},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":284,"h":172},"sourceSize":{"w":284,"h":172}},"map-building-vault-ceiling.img":{"frame":{"x":1565,"y":178,"w":162,"h":169},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":162,"h":169},"sourceSize":{"w":216,"h":169}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":1565,"y":351,"w":256,"h":168},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":168},"sourceSize":{"w":256,"h":168}},"map-building-shack-floor-01.img":{"frame":{"x":1565,"y":523,"w":194,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":194,"h":162},"sourceSize":{"w":210,"h":170}},"map-building-mansion-floor-01a.img":{"frame":{"x":2,"y":1794,"w":401,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":401,"h":160},"sourceSize":{"w":401,"h":161}},"map-building-shack-floor-02.img":{"frame":{"x":1565,"y":689,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-outhouse-floor.img":{"frame":{"x":1565,"y":853,"w":124,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":38,"y":0,"w":124,"h":157},"sourceSize":{"w":200,"h":158}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":407,"y":1794,"w":296,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":54,"w":296,"h":154},"sourceSize":{"w":296,"h":208}},"map-building-shack-ceiling-03.img":{"frame":{"x":1565,"y":1014,"w":206,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":206,"h":146},"sourceSize":{"w":216,"h":168}},"map-building-club-floor-01h.img":{"frame":{"x":1565,"y":1164,"w":161,"h":145},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":145},"sourceSize":{"w":161,"h":145}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":1731,"y":178,"w":113,"h":145},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":113,"h":145},"sourceSize":{"w":113,"h":145}},"map-bunker-generic-floor-01.img":{"frame":{"x":1693,"y":853,"w":150,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":150,"h":142},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-02.img":{"frame":{"x":1565,"y":1313,"w":150,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":150,"h":142},"sourceSize":{"w":160,"h":144}},"map-stone-03.img":{"frame":{"x":1565,"y":1459,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"map-bunker-conch-floor-01.img":{"frame":{"x":707,"y":1794,"w":294,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":294,"h":128},"sourceSize":{"w":300,"h":128}},"map-tree-03.img":{"frame":{"x":1719,"y":1313,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-07su.img":{"frame":{"x":1710,"y":1459,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-hut-res-01.img":{"frame":{"x":1565,"y":1603,"w":121,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":63,"y":67,"w":121,"h":121},"sourceSize":{"w":256,"h":256}},"map-building-club-ceiling-01b.img":{"frame":{"x":1729,"y":689,"w":89,"h":121},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":121},"sourceSize":{"w":89,"h":121}},"map-chute-01.img":{"frame":{"x":1690,"y":1603,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"map-pipes-03.img":{"frame":{"x":1005,"y":1794,"w":342,"h":118},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":342,"h":118},"sourceSize":{"w":342,"h":118}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":1730,"y":1164,"w":100,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":0,"w":100,"h":117},"sourceSize":{"w":160,"h":144}},"map-building-mansion-cellar-01b.img":{"frame":{"x":1351,"y":1794,"w":113,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":113,"h":115},"sourceSize":{"w":113,"h":115}},"map-building-outhouse-ceiling.img":{"frame":{"x":1468,"y":1794,"w":140,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":0,"w":140,"h":114},"sourceSize":{"w":200,"h":158}},"map-building-mansion-floor-01c.img":{"frame":{"x":1612,"y":1794,"w":113,"h":114},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":113,"h":114},"sourceSize":{"w":113,"h":114}},"map-building-club-floor-01a.img":{"frame":{"x":1729,"y":1794,"w":113,"h":113},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":113,"h":113},"sourceSize":{"w":113,"h":113}},"map-building-saferoom-floor.img":{"frame":{"x":1853,"y":2,"w":176,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-saferoom-ceiling.img":{"frame":{"x":1853,"y":118,"w":176,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":1853,"y":234,"w":128,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":112},"sourceSize":{"w":128,"h":112}},"map-vending-res.img":{"frame":{"x":1977,"y":1245,"w":50,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":50,"h":44},"sourceSize":{"w":54,"h":47}},"map-bed-02.img":{"frame":{"x":1853,"y":462,"w":88,"h":108},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":108},"sourceSize":{"w":88,"h":108}},"map-building-shack-ceiling-01.img":{"frame":{"x":1853,"y":574,"w":158,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":158,"h":105},"sourceSize":{"w":158,"h":128}},"map-vat-02.img":{"frame":{"x":1853,"y":683,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-02.img":{"frame":{"x":1853,"y":787,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":1853,"y":891,"w":152,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":152,"h":98},"sourceSize":{"w":152,"h":104}},"map-building-club-floor-01d.img":{"frame":{"x":1853,"y":993,"w":161,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":97},"sourceSize":{"w":161,"h":97}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":1853,"y":1094,"w":129,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":129,"h":97},"sourceSize":{"w":129,"h":97}},"map-building-shack-ceiling-02.img":{"frame":{"x":1853,"y":1195,"w":120,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":97},"sourceSize":{"w":120,"h":120}},"map-building-club-floor-01b.img":{"frame":{"x":1853,"y":1296,"w":97,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1853,"y":1397,"w":144,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":96},"sourceSize":{"w":144,"h":96}},"map-hedgehog-01.img":{"frame":{"x":1853,"y":1497,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-shack-res-01.img":{"frame":{"x":1853,"y":1597,"w":156,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":23,"w":156,"h":94},"sourceSize":{"w":210,"h":170}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":1853,"y":1695,"w":97,"h":90},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":90},"sourceSize":{"w":97,"h":90}},"map-smoke-res.img":{"frame":{"x":1853,"y":1789,"w":86,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":19,"w":86,"h":90},"sourceSize":{"w":128,"h":128}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":1457,"y":1388,"w":97,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":89},"sourceSize":{"w":97,"h":89}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":2,"y":1958,"w":244,"h":88},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":88},"sourceSize":{"w":244,"h":88}},"map-crate-res-01.img":{"frame":{"x":1945,"y":462,"w":72,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":72,"h":68},"sourceSize":{"w":72,"h":72}},"map-bunker-vent-02.img":{"frame":{"x":1957,"y":683,"w":68,"h":68},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":68,"h":68},"sourceSize":{"w":68,"h":68}},"pass-level-bg.img":{"frame":{"x":1954,"y":1296,"w":73,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":73,"h":67},"sourceSize":{"w":73,"h":73}},"map-vat-01.img":{"frame":{"x":1957,"y":787,"w":68,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":67},"sourceSize":{"w":72,"h":72}},"map-barrel-res-02.img":{"frame":{"x":1953,"y":1497,"w":68,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":66},"sourceSize":{"w":72,"h":72}},"map-building-mansion-cellar-01c.img":{"frame":{"x":655,"y":510,"w":177,"h":65},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":65},"sourceSize":{"w":177,"h":65}},"map-building-club-floor-01f.img":{"frame":{"x":1853,"y":1883,"w":97,"h":65},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":65},"sourceSize":{"w":97,"h":65}},"map-stone-res-06.img":{"frame":{"x":250,"y":1958,"w":144,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":64},"sourceSize":{"w":144,"h":64}},"map-stairs-broken-01.img":{"frame":{"x":1943,"y":1789,"w":80,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-01.img":{"frame":{"x":1763,"y":523,"w":80,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-bathhouse-column-01.img":{"frame":{"x":1954,"y":1695,"w":64,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"proj-martyrdom-01.img":{"frame":{"x":1954,"y":1883,"w":64,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":63},"sourceSize":{"w":64,"h":64}},"timer.img":{"frame":{"x":1763,"y":591,"w":64,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":62},"sourceSize":{"w":64,"h":64}},"map-crate-05.img":{"frame":{"x":1775,"y":1014,"w":62,"h":62},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":62,"h":62},"sourceSize":{"w":62,"h":62}},"player-medic.img":{"frame":{"x":1775,"y":1080,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":62,"h":62},"sourceSize":{"w":72,"h":72}},"map-case-basement-01.img":{"frame":{"x":1565,"y":1728,"w":74,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":56},"sourceSize":{"w":74,"h":56}},"map-control-panel-05.img":{"frame":{"x":1643,"y":1728,"w":72,"h":55},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-02.img":{"frame":{"x":1719,"y":1728,"w":72,"h":55},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-01.img":{"frame":{"x":1457,"y":1481,"w":72,"h":55},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-04.img":{"frame":{"x":398,"y":1958,"w":72,"h":55},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-case-deagle-01.img":{"frame":{"x":474,"y":1958,"w":72,"h":54},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-deagle-02.img":{"frame":{"x":550,"y":1958,"w":72,"h":54},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"emote-medical-healthkit.img":{"frame":{"x":626,"y":1958,"w":62,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":62,"h":54},"sourceSize":{"w":64,"h":64}},"part-takedown-01.img":{"frame":{"x":692,"y":1958,"w":64,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":64,"h":53},"sourceSize":{"w":64,"h":64}},"map-grill-01.img":{"frame":{"x":760,"y":1958,"w":64,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":53},"sourceSize":{"w":64,"h":64}},"map-chest-02.img":{"frame":{"x":828,"y":1958,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-03.img":{"frame":{"x":902,"y":1958,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-flare-01.img":{"frame":{"x":976,"y":1958,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-hatchet-01.img":{"frame":{"x":1050,"y":1958,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-01.img":{"frame":{"x":1124,"y":1958,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-couch-01.img":{"frame":{"x":1079,"y":827,"w":144,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":48}},"map-couch-02.img":{"frame":{"x":1198,"y":1958,"w":96,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":48},"sourceSize":{"w":96,"h":48}},"map-control-panel-06.img":{"frame":{"x":1298,"y":1958,"w":96,"h":47},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":47},"sourceSize":{"w":96,"h":47}},"map-oven-01.img":{"frame":{"x":1795,"y":1728,"w":54,"h":47},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-refrigerator-01.img":{"frame":{"x":1501,"y":246,"w":54,"h":47},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-vending-soda-01.img":{"frame":{"x":1501,"y":297,"w":54,"h":47},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-decal-oil-06.img":{"frame":{"x":1977,"y":1195,"w":50,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":9,"w":50,"h":46},"sourceSize":{"w":64,"h":64}},"map-crate-mil-05.img":{"frame":{"x":1398,"y":1958,"w":86,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-01.img":{"frame":{"x":1488,"y":1958,"w":86,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-04.img":{"frame":{"x":1578,"y":1958,"w":86,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-02.img":{"frame":{"x":1668,"y":1958,"w":86,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-03.img":{"frame":{"x":1758,"y":1958,"w":86,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-drawers-02.img":{"frame":{"x":1848,"y":1958,"w":80,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-drawers-01.img":{"frame":{"x":1932,"y":1958,"w":80,"h":45},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-building-teahouse-floor-02.img":{"frame":{"x":1227,"y":827,"w":64,"h":44},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":44},"sourceSize":{"w":64,"h":44}},"map-building-teahouse-res-01.img":{"frame":{"x":1853,"y":350,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":56,"y":74,"w":144,"h":108},"sourceSize":{"w":256,"h":256}}}},{"meta":{"image":"shared-3-50-b073dcf4.png","size":{"w":1024,"h":128},"scale":0.5},"frames":{"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":2,"y":2,"w":248,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":248,"h":96},"sourceSize":{"w":248,"h":96}},"map-building-mansion-floor-01d.img":{"frame":{"x":254,"y":2,"w":545,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":545,"h":95},"sourceSize":{"w":545,"h":97}}}}]')
            , Xs = [{
            meta: {
                image: "halloween-0-50-f68b39c5.png",
                size: {
                    w: 1024,
                    h: 1024
                },
                scale: .5
            },
            frames: {
                "map-bunker-eye-compartment-floor-01.img": {
                    frame: {
                        x: 358,
                        y: 2,
                        w: 352,
                        h: 352
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 352,
                        h: 352
                    },
                    sourceSize: {
                        w: 352,
                        h: 352
                    }
                },
                "map-bunker-eye-chamber-floor-01a.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 352,
                        h: 674
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 14,
                        w: 352,
                        h: 674
                    },
                    sourceSize: {
                        w: 352,
                        h: 688
                    }
                },
                "map-bunker-eye-chamber-ceiling-01.img": {
                    frame: {
                        x: 358,
                        y: 358,
                        w: 160,
                        h: 272
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 272
                    },
                    sourceSize: {
                        w: 160,
                        h: 272
                    }
                },
                "map-tree-08.img": {
                    frame: {
                        x: 714,
                        y: 2,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-tree-08sp.img": {
                    frame: {
                        x: 714,
                        y: 262,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-tree-05.img": {
                    frame: {
                        x: 2,
                        y: 680,
                        w: 248,
                        h: 243
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 4,
                        y: 7,
                        w: 248,
                        h: 243
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-bunker-eye-compartment-ceiling-01.img": {
                    frame: {
                        x: 522,
                        y: 358,
                        w: 160,
                        h: 160
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 160,
                        h: 160
                    },
                    sourceSize: {
                        w: 160,
                        h: 160
                    }
                },
                "map-tree-07sp.img": {
                    frame: {
                        x: 714,
                        y: 522,
                        w: 128,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 128,
                        h: 128
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-tree-07.img": {
                    frame: {
                        x: 254,
                        y: 680,
                        w: 128,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 128,
                        h: 128
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-bunker-eye-chamber-floor-01b.img": {
                    frame: {
                        x: 846,
                        y: 522,
                        w: 96,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 96,
                        h: 128
                    },
                    sourceSize: {
                        w: 96,
                        h: 128
                    }
                },
                "map-bush-06.img": {
                    frame: {
                        x: 522,
                        y: 522,
                        w: 96,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 96,
                        h: 96
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-airdrop-01h.img": {
                    frame: {
                        x: 622,
                        y: 522,
                        w: 80,
                        h: 80
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 80
                    },
                    sourceSize: {
                        w: 80,
                        h: 80
                    }
                },
                "map-bush-res-06.img": {
                    frame: {
                        x: 402,
                        y: 634,
                        w: 28,
                        h: 27
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 22,
                        y: 23,
                        w: 28,
                        h: 27
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-web-01.img": {
                    frame: {
                        x: 470,
                        y: 680,
                        w: 76,
                        h: 80
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 76,
                        h: 80
                    },
                    sourceSize: {
                        w: 76,
                        h: 80
                    }
                },
                "map-crate-11h.img": {
                    frame: {
                        x: 550,
                        y: 680,
                        w: 74,
                        h: 74
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 74,
                        h: 74
                    },
                    sourceSize: {
                        w: 74,
                        h: 74
                    }
                },
                "map-pumpkin-01.img": {
                    frame: {
                        x: 628,
                        y: 680,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-pumpkin-02.img": {
                    frame: {
                        x: 704,
                        y: 680,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-bush-07sp.img": {
                    frame: {
                        x: 780,
                        y: 680,
                        w: 71,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 0,
                        w: 71,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-pumpkin-res-01.img": {
                    frame: {
                        x: 855,
                        y: 680,
                        w: 71,
                        h: 69
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 3,
                        w: 71,
                        h: 69
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-tree-04h.img": {
                    frame: {
                        x: 254,
                        y: 812,
                        w: 56,
                        h: 56
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 56,
                        h: 56
                    },
                    sourceSize: {
                        w: 56,
                        h: 56
                    }
                },
                "map-pumpkin-03.img": {
                    frame: {
                        x: 314,
                        y: 812,
                        w: 51,
                        h: 52
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 9,
                        y: 11,
                        w: 51,
                        h: 52
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "part-airdrop-01h.img": {
                    frame: {
                        x: 369,
                        y: 812,
                        w: 48,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 48,
                        h: 48
                    },
                    sourceSize: {
                        w: 48,
                        h: 48
                    }
                },
                "map-pumpkin-res-03.img": {
                    frame: {
                        x: 386,
                        y: 764,
                        w: 46,
                        h: 44
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 3,
                        w: 46,
                        h: 44
                    },
                    sourceSize: {
                        w: 48,
                        h: 48
                    }
                },
                "part-airdrop-02h.img": {
                    frame: {
                        x: 358,
                        y: 634,
                        w: 40,
                        h: 40
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 40,
                        h: 40
                    },
                    sourceSize: {
                        w: 40,
                        h: 40
                    }
                },
                "map-airdrop-02h.img": {
                    frame: {
                        x: 386,
                        y: 680,
                        w: 80,
                        h: 80
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 80
                    },
                    sourceSize: {
                        w: 80,
                        h: 80
                    }
                }
            }
        }]
            , Zs = JSON.parse('[{"meta":{"image":"snow-0-50-351b3383.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":854,"y":2,"w":384,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":2,"y":730,"w":352,"h":402},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":352,"h":402},"sourceSize":{"w":352,"h":416}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":358,"y":730,"w":401,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":401,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":763,"y":730,"w":170,"h":372},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":0,"w":170,"h":372},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":1242,"y":2,"w":353,"h":369},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":2,"y":1136,"w":370,"h":330},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":370,"h":330},"sourceSize":{"w":408,"h":360}},"map-building-greenhouse-floor-02.img":{"frame":{"x":376,"y":1136,"w":417,"h":321},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":417,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1242,"y":375,"w":352,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":797,"y":1136,"w":466,"h":314},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":466,"h":314},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":1599,"y":2,"w":386,"h":314},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":386,"h":314},"sourceSize":{"w":386,"h":314}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":1599,"y":320,"w":200,"h":312},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":312},"sourceSize":{"w":200,"h":312}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1803,"y":320,"w":114,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":306},"sourceSize":{"w":114,"h":322}},"map-bunker-hydra-floor-01.img":{"frame":{"x":2,"y":1470,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1921,"y":320,"w":30,"h":264},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1599,"y":636,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1599,"y":894,"w":178,"h":186},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":186},"sourceSize":{"w":178,"h":186}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1781,"y":894,"w":160,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1599,"y":1084,"w":96,"h":175},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1699,"y":1084,"w":162,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":162,"h":174},"sourceSize":{"w":216,"h":176}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1599,"y":1263,"w":178,"h":154},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":154},"sourceSize":{"w":178,"h":154}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1242,"y":699,"w":216,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-stone-03x.img":{"frame":{"x":1781,"y":1263,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":1242,"y":855,"w":224,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1242,"y":995,"w":200,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-planter-06.img":{"frame":{"x":1865,"y":1084,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":854,"y":438,"w":160,"h":135},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1018,"y":438,"w":178,"h":130},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":130},"sourceSize":{"w":178,"h":130}},"map-tree-11.img":{"frame":{"x":1462,"y":699,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-10.img":{"frame":{"x":1446,"y":995,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-chute-01x.img":{"frame":{"x":1470,"y":855,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"map-bunker-generic-floor-03.img":{"frame":{"x":854,"y":577,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-snowball-res.img":{"frame":{"x":1921,"y":588,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1955,"y":320,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1955,"y":436,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-snow-02.img":{"frame":{"x":1022,"y":577,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"map-stone-res-02x.img":{"frame":{"x":1132,"y":577,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-hydra-floor-04.img":{"frame":{"x":937,"y":730,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1041,"y":730,"w":97,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1926,"y":1263,"w":56,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":937,"y":834,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-snow-03.img":{"frame":{"x":937,"y":928,"w":158,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":158,"h":90},"sourceSize":{"w":180,"h":96}},"map-snow-01.img":{"frame":{"x":1099,"y":928,"w":108,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":20,"w":108,"h":88},"sourceSize":{"w":128,"h":128}},"map-table-02x.img":{"frame":{"x":937,"y":1022,"w":144,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-airdrop-01x.img":{"frame":{"x":1142,"y":730,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-table-03x.img":{"frame":{"x":1085,"y":1022,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02x.img":{"frame":{"x":1267,"y":1136,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-crate-01x.img":{"frame":{"x":1351,"y":1136,"w":78,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":78},"sourceSize":{"w":80,"h":80}},"map-stone-01x.img":{"frame":{"x":1433,"y":1136,"w":76,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":77},"sourceSize":{"w":80,"h":80}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1267,"y":1220,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":84,"h":76},"sourceSize":{"w":114,"h":90}},"map-crate-03x.img":{"frame":{"x":1513,"y":1136,"w":74,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-02x.img":{"frame":{"x":1355,"y":1220,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-01x.img":{"frame":{"x":1169,"y":1022,"w":66,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":66,"h":68},"sourceSize":{"w":72,"h":72}},"map-planter-res-02.img":{"frame":{"x":1941,"y":1084,"w":41,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":41,"h":68},"sourceSize":{"w":43,"h":68}},"map-table-01x.img":{"frame":{"x":1431,"y":1220,"w":80,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-stone-res-01x.img":{"frame":{"x":1515,"y":1220,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"map-snow-06.img":{"frame":{"x":1267,"y":1300,"w":90,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":90,"h":58},"sourceSize":{"w":96,"h":64}},"map-snow-05.img":{"frame":{"x":1361,"y":1300,"w":46,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":5,"w":46,"h":54},"sourceSize":{"w":64,"h":64}},"map-chest-03x.img":{"frame":{"x":1411,"y":1300,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-snow-04.img":{"frame":{"x":1485,"y":1300,"w":51,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":51,"h":50},"sourceSize":{"w":64,"h":64}},"map-planter-07.img":{"frame":{"x":1540,"y":1300,"w":50,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1267,"y":1362,"w":112,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1383,"y":1362,"w":112,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-planter-res-03.img":{"frame":{"x":1941,"y":1156,"w":43,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":43,"h":40},"sourceSize":{"w":43,"h":43}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":938,"y":577,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}}}}]')
            , Ks = [{
            meta: {
                image: "faction-0-50-b6447309.png",
                size: {
                    w: 2048,
                    h: 2048
                },
                scale: .5
            },
            frames: {
                "map-building-bridge-xlg-floor.img": {
                    frame: {
                        x: 654,
                        y: 2,
                        w: 1232,
                        h: 480
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 1232,
                        h: 480
                    },
                    sourceSize: {
                        w: 1232,
                        h: 480
                    }
                },
                "map-complex-warehouse-floor-04.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 648,
                        h: 1024
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 648,
                        h: 1024
                    },
                    sourceSize: {
                        w: 648,
                        h: 1024
                    }
                },
                "map-bunker-chrys-compartment-floor-03a.img": {
                    frame: {
                        x: 654,
                        y: 486,
                        w: 384,
                        h: 432
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 384,
                        h: 432
                    },
                    sourceSize: {
                        w: 384,
                        h: 432
                    }
                },
                "map-bunker-chrys-compartment-floor-01b.img": {
                    frame: {
                        x: 1042,
                        y: 486,
                        w: 401,
                        h: 387
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 401,
                        h: 387
                    },
                    sourceSize: {
                        w: 402,
                        h: 402
                    }
                },
                "map-building-greenhouse-floor-01.img": {
                    frame: {
                        x: 1447,
                        y: 486,
                        w: 417,
                        h: 321
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 417,
                        h: 321
                    },
                    sourceSize: {
                        w: 417,
                        h: 321
                    }
                },
                "map-bunker-chrys-chamber-floor-01b.img": {
                    frame: {
                        x: 2,
                        y: 1030,
                        w: 466,
                        h: 314
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 466,
                        h: 314
                    },
                    sourceSize: {
                        w: 466,
                        h: 314
                    }
                },
                "map-bunker-chrys-compartment-floor-02a.img": {
                    frame: {
                        x: 472,
                        y: 1030,
                        w: 386,
                        h: 314
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 386,
                        h: 314
                    },
                    sourceSize: {
                        w: 386,
                        h: 314
                    }
                },
                "map-bunker-chrys-compartment-floor-01a.img": {
                    frame: {
                        x: 862,
                        y: 1030,
                        w: 114,
                        h: 306
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 16,
                        w: 114,
                        h: 306
                    },
                    sourceSize: {
                        w: 114,
                        h: 322
                    }
                },
                "map-complex-warehouse-floor-02.img": {
                    frame: {
                        x: 980,
                        y: 1030,
                        w: 30,
                        h: 264
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 30,
                        h: 264
                    },
                    sourceSize: {
                        w: 30,
                        h: 264
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01b.img": {
                    frame: {
                        x: 1014,
                        y: 1030,
                        w: 178,
                        h: 186
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 178,
                        h: 186
                    },
                    sourceSize: {
                        w: 178,
                        h: 186
                    }
                },
                "map-building-greenhouse-ceiling-01.img": {
                    frame: {
                        x: 1196,
                        y: 1030,
                        w: 202,
                        h: 158
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 202,
                        h: 158
                    },
                    sourceSize: {
                        w: 202,
                        h: 158
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03b.img": {
                    frame: {
                        x: 1402,
                        y: 1030,
                        w: 178,
                        h: 154
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 178,
                        h: 154
                    },
                    sourceSize: {
                        w: 178,
                        h: 154
                    }
                },
                "map-statue-01.img": {
                    frame: {
                        x: 1584,
                        y: 1030,
                        w: 144,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 32,
                        y: 32,
                        w: 144,
                        h: 144
                    },
                    sourceSize: {
                        w: 208,
                        h: 208
                    }
                },
                "map-stone-03f.img": {
                    frame: {
                        x: 1732,
                        y: 1030,
                        w: 141,
                        h: 140
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 2,
                        w: 141,
                        h: 140
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bunker-chrys-chamber-ceiling-01.img": {
                    frame: {
                        x: 2,
                        y: 1348,
                        w: 224,
                        h: 136
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 224,
                        h: 136
                    },
                    sourceSize: {
                        w: 224,
                        h: 136
                    }
                },
                "map-planter-03.img": {
                    frame: {
                        x: 230,
                        y: 1348,
                        w: 72,
                        h: 136
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 136
                    },
                    sourceSize: {
                        w: 72,
                        h: 136
                    }
                },
                "map-planter-01.img": {
                    frame: {
                        x: 306,
                        y: 1348,
                        w: 72,
                        h: 136
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 136
                    },
                    sourceSize: {
                        w: 72,
                        h: 136
                    }
                },
                "map-planter-02.img": {
                    frame: {
                        x: 382,
                        y: 1348,
                        w: 72,
                        h: 136
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 136
                    },
                    sourceSize: {
                        w: 72,
                        h: 136
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02b.img": {
                    frame: {
                        x: 458,
                        y: 1348,
                        w: 178,
                        h: 130
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 178,
                        h: 130
                    },
                    sourceSize: {
                        w: 178,
                        h: 130
                    }
                },
                "map-airdrop-04.img": {
                    frame: {
                        x: 640,
                        y: 1348,
                        w: 128,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 128,
                        h: 128
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03a.img": {
                    frame: {
                        x: 1745,
                        y: 811,
                        w: 112,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 48
                    },
                    sourceSize: {
                        w: 112,
                        h: 48
                    }
                },
                "map-crate-13.img": {
                    frame: {
                        x: 904,
                        y: 1348,
                        w: 120,
                        h: 120
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 120,
                        h: 120
                    },
                    sourceSize: {
                        w: 120,
                        h: 120
                    }
                },
                "map-crate-12.img": {
                    frame: {
                        x: 1028,
                        y: 1348,
                        w: 120,
                        h: 120
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 120,
                        h: 120
                    },
                    sourceSize: {
                        w: 120,
                        h: 120
                    }
                },
                "map-bunker-generic-ceiling-02.img": {
                    frame: {
                        x: 1152,
                        y: 1348,
                        w: 80,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 115
                    },
                    sourceSize: {
                        w: 80,
                        h: 115
                    }
                },
                "map-bunker-generic-floor-03.img": {
                    frame: {
                        x: 1236,
                        y: 1348,
                        w: 80,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 115
                    },
                    sourceSize: {
                        w: 80,
                        h: 115
                    }
                },
                "map-complex-warehouse-floor-03.img": {
                    frame: {
                        x: 1320,
                        y: 1348,
                        w: 30,
                        h: 112
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 30,
                        h: 112
                    },
                    sourceSize: {
                        w: 30,
                        h: 112
                    }
                },
                "map-complex-warehouse-floor-01.img": {
                    frame: {
                        x: 1354,
                        y: 1348,
                        w: 30,
                        h: 112
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 30,
                        h: 112
                    },
                    sourceSize: {
                        w: 30,
                        h: 112
                    }
                },
                "map-stone-res-02f.img": {
                    frame: {
                        x: 654,
                        y: 922,
                        w: 100,
                        h: 100
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 100,
                        h: 100
                    },
                    sourceSize: {
                        w: 100,
                        h: 100
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01a.img": {
                    frame: {
                        x: 758,
                        y: 922,
                        w: 56,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 56,
                        h: 96
                    },
                    sourceSize: {
                        w: 56,
                        h: 96
                    }
                },
                "map-bunker-chrys-compartment-floor-02b.img": {
                    frame: {
                        x: 818,
                        y: 922,
                        w: 258,
                        h: 90
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 8,
                        y: 0,
                        w: 258,
                        h: 90
                    },
                    sourceSize: {
                        w: 274,
                        h: 90
                    }
                },
                "map-bunker-chrys-chamber-floor-01a.img": {
                    frame: {
                        x: 1080,
                        y: 922,
                        w: 84,
                        h: 76
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 15,
                        y: 14,
                        w: 84,
                        h: 76
                    },
                    sourceSize: {
                        w: 114,
                        h: 90
                    }
                },
                "map-statue-top-02.img": {
                    frame: {
                        x: 1168,
                        y: 922,
                        w: 143,
                        h: 74
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 64,
                        y: 65,
                        w: 143,
                        h: 74
                    },
                    sourceSize: {
                        w: 208,
                        h: 208
                    }
                },
                "map-statue-top-01.img": {
                    frame: {
                        x: 1315,
                        y: 922,
                        w: 143,
                        h: 74
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 64,
                        y: 65,
                        w: 143,
                        h: 74
                    },
                    sourceSize: {
                        w: 208,
                        h: 208
                    }
                },
                "map-crate-02f.img": {
                    frame: {
                        x: 1462,
                        y: 922,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-crate-22.img": {
                    frame: {
                        x: 1538,
                        y: 922,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-planter-res-01.img": {
                    frame: {
                        x: 1614,
                        y: 922,
                        w: 41,
                        h: 68
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 0,
                        w: 41,
                        h: 68
                    },
                    sourceSize: {
                        w: 43,
                        h: 68
                    }
                },
                "map-chest-03f.img": {
                    frame: {
                        x: 1447,
                        y: 811,
                        w: 70,
                        h: 51
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 70,
                        h: 51
                    },
                    sourceSize: {
                        w: 70,
                        h: 51
                    }
                },
                "map-planter-04.img": {
                    frame: {
                        x: 1521,
                        y: 811,
                        w: 50,
                        h: 50
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 50,
                        h: 50
                    },
                    sourceSize: {
                        w: 50,
                        h: 50
                    }
                },
                "map-planter-05.img": {
                    frame: {
                        x: 1575,
                        y: 811,
                        w: 50,
                        h: 50
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 50,
                        h: 50
                    },
                    sourceSize: {
                        w: 50,
                        h: 50
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02a.img": {
                    frame: {
                        x: 1629,
                        y: 811,
                        w: 112,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 48
                    },
                    sourceSize: {
                        w: 112,
                        h: 48
                    }
                },
                "map-airdrop-03.img": {
                    frame: {
                        x: 772,
                        y: 1348,
                        w: 128,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 128,
                        h: 128
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                }
            }
        }]
            , Qs = [{
            meta: {
                image: "desert-0-50-978893d6.png",
                size: {
                    w: 2048,
                    h: 2048
                },
                scale: .5
            },
            frames: {
                "map-complex-warehouse-floor-05.img": {
                    frame: {
                        x: 662,
                        y: 2,
                        w: 262,
                        h: 470
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 502,
                        w: 262,
                        h: 470
                    },
                    sourceSize: {
                        w: 648,
                        h: 1024
                    }
                },
                "map-building-saloon-floor-01.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 656,
                        h: 656
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 656,
                        h: 656
                    },
                    sourceSize: {
                        w: 656,
                        h: 656
                    }
                },
                "map-bunker-chrys-compartment-floor-03a.img": {
                    frame: {
                        x: 928,
                        y: 2,
                        w: 384,
                        h: 432
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 384,
                        h: 432
                    },
                    sourceSize: {
                        w: 384,
                        h: 432
                    }
                },
                "map-bunker-chrys-compartment-floor-01c.img": {
                    frame: {
                        x: 2,
                        y: 662,
                        w: 401,
                        h: 387
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 401,
                        h: 387
                    },
                    sourceSize: {
                        w: 402,
                        h: 402
                    }
                },
                "map-building-saloon-cellar-01.img": {
                    frame: {
                        x: 407,
                        y: 662,
                        w: 528,
                        h: 336
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 528,
                        h: 336
                    },
                    sourceSize: {
                        w: 528,
                        h: 336
                    }
                },
                "map-building-greenhouse-floor-02.img": {
                    frame: {
                        x: 1316,
                        y: 2,
                        w: 417,
                        h: 321
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 417,
                        h: 321
                    },
                    sourceSize: {
                        w: 417,
                        h: 321
                    }
                },
                "map-bunker-chrys-chamber-floor-01b.img": {
                    frame: {
                        x: 2,
                        y: 1053,
                        w: 466,
                        h: 314
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 466,
                        h: 314
                    },
                    sourceSize: {
                        w: 466,
                        h: 314
                    }
                },
                "map-bunker-chrys-compartment-floor-02a.img": {
                    frame: {
                        x: 1316,
                        y: 327,
                        w: 386,
                        h: 314
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 386,
                        h: 314
                    },
                    sourceSize: {
                        w: 386,
                        h: 314
                    }
                },
                "map-building-saloon-ceiling-01.img": {
                    frame: {
                        x: 1316,
                        y: 645,
                        w: 314,
                        h: 313
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 314,
                        h: 313
                    },
                    sourceSize: {
                        w: 328,
                        h: 328
                    }
                },
                "map-building-greenhouse-ceiling-02.img": {
                    frame: {
                        x: 939,
                        y: 662,
                        w: 200,
                        h: 312
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 200,
                        h: 312
                    },
                    sourceSize: {
                        w: 200,
                        h: 312
                    }
                },
                "map-bunker-chrys-compartment-floor-01a.img": {
                    frame: {
                        x: 1143,
                        y: 662,
                        w: 114,
                        h: 306
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 16,
                        w: 114,
                        h: 306
                    },
                    sourceSize: {
                        w: 114,
                        h: 322
                    }
                },
                "map-bunker-statue-chamber-floor-01.img": {
                    frame: {
                        x: 472,
                        y: 1053,
                        w: 126,
                        h: 273
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 14,
                        w: 126,
                        h: 273
                    },
                    sourceSize: {
                        w: 128,
                        h: 288
                    }
                },
                "map-tree-05c.img": {
                    frame: {
                        x: 602,
                        y: 1053,
                        w: 238,
                        h: 250
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 9,
                        y: 3,
                        w: 238,
                        h: 250
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01b.img": {
                    frame: {
                        x: 928,
                        y: 438,
                        w: 178,
                        h: 186
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 178,
                        h: 186
                    },
                    sourceSize: {
                        w: 178,
                        h: 186
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03b.img": {
                    frame: {
                        x: 1110,
                        y: 438,
                        w: 178,
                        h: 154
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 178,
                        h: 154
                    },
                    sourceSize: {
                        w: 178,
                        h: 154
                    }
                },
                "map-statue-03.img": {
                    frame: {
                        x: 662,
                        y: 476,
                        w: 147,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 32,
                        y: 32,
                        w: 147,
                        h: 144
                    },
                    sourceSize: {
                        w: 208,
                        h: 208
                    }
                },
                "map-statue-04.img": {
                    frame: {
                        x: 844,
                        y: 1053,
                        w: 147,
                        h: 144
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 32,
                        y: 32,
                        w: 147,
                        h: 144
                    },
                    sourceSize: {
                        w: 208,
                        h: 208
                    }
                },
                "map-stone-03b.img": {
                    frame: {
                        x: 995,
                        y: 1053,
                        w: 141,
                        h: 140
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 2,
                        w: 141,
                        h: 140
                    },
                    sourceSize: {
                        w: 144,
                        h: 144
                    }
                },
                "map-bunker-chrys-chamber-ceiling-01.img": {
                    frame: {
                        x: 1140,
                        y: 1053,
                        w: 224,
                        h: 136
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 224,
                        h: 136
                    },
                    sourceSize: {
                        w: 224,
                        h: 136
                    }
                },
                "map-planter-06.img": {
                    frame: {
                        x: 1634,
                        y: 645,
                        w: 72,
                        h: 136
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 136
                    },
                    sourceSize: {
                        w: 72,
                        h: 136
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02b.img": {
                    frame: {
                        x: 1368,
                        y: 1053,
                        w: 178,
                        h: 130
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 178,
                        h: 130
                    },
                    sourceSize: {
                        w: 178,
                        h: 130
                    }
                },
                "map-tree-06.img": {
                    frame: {
                        x: 1550,
                        y: 1053,
                        w: 128,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 128,
                        h: 128
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-bush-res-05.img": {
                    frame: {
                        x: 1110,
                        y: 596,
                        w: 32,
                        h: 28
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 20,
                        y: 22,
                        w: 32,
                        h: 28
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-bunker-generic-floor-03.img": {
                    frame: {
                        x: 813,
                        y: 476,
                        w: 80,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 115
                    },
                    sourceSize: {
                        w: 80,
                        h: 115
                    }
                },
                "map-bunker-chrys-compartment-ceiling-01a.img": {
                    frame: {
                        x: 844,
                        y: 1201,
                        w: 56,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 56,
                        h: 96
                    },
                    sourceSize: {
                        w: 56,
                        h: 96
                    }
                },
                "map-bunker-chrys-compartment-floor-02c.img": {
                    frame: {
                        x: 904,
                        y: 1201,
                        w: 258,
                        h: 90
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 8,
                        y: 0,
                        w: 258,
                        h: 90
                    },
                    sourceSize: {
                        w: 274,
                        h: 90
                    }
                },
                "map-building-saloon-ceiling-02.img": {
                    frame: {
                        x: 1316,
                        y: 962,
                        w: 96,
                        h: 80
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 96,
                        h: 80
                    },
                    sourceSize: {
                        w: 96,
                        h: 80
                    }
                },
                "map-bunker-chrys-chamber-floor-01a.img": {
                    frame: {
                        x: 1416,
                        y: 962,
                        w: 84,
                        h: 76
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 15,
                        y: 14,
                        w: 84,
                        h: 76
                    },
                    sourceSize: {
                        w: 114,
                        h: 90
                    }
                },
                "map-crate-22.img": {
                    frame: {
                        x: 1504,
                        y: 962,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-bush-05.img": {
                    frame: {
                        x: 1580,
                        y: 962,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-crate-02f.img": {
                    frame: {
                        x: 1656,
                        y: 962,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-crate-18.img": {
                    frame: {
                        x: 1166,
                        y: 1201,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-planter-res-02.img": {
                    frame: {
                        x: 1261,
                        y: 662,
                        w: 41,
                        h: 68
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 0,
                        w: 41,
                        h: 68
                    },
                    sourceSize: {
                        w: 43,
                        h: 68
                    }
                },
                "map-building-archway-ceiling-01.img": {
                    frame: {
                        x: 1242,
                        y: 1201,
                        w: 336,
                        h: 64
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 336,
                        h: 64
                    },
                    sourceSize: {
                        w: 336,
                        h: 64
                    }
                },
                "map-stone-06.img": {
                    frame: {
                        x: 1582,
                        y: 1201,
                        w: 144,
                        h: 64
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 144,
                        h: 64
                    },
                    sourceSize: {
                        w: 144,
                        h: 64
                    }
                },
                "map-case-meteor-res-01.img": {
                    frame: {
                        x: 2,
                        y: 1371,
                        w: 67,
                        h: 60
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 4,
                        w: 67,
                        h: 60
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-stone-res-01b.img": {
                    frame: {
                        x: 73,
                        y: 1371,
                        w: 60,
                        h: 60
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 60,
                        h: 60
                    },
                    sourceSize: {
                        w: 60,
                        h: 60
                    }
                },
                "map-chest-03d.img": {
                    frame: {
                        x: 1634,
                        y: 904,
                        w: 70,
                        h: 51
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 70,
                        h: 51
                    },
                    sourceSize: {
                        w: 70,
                        h: 51
                    }
                },
                "map-case-meteor-01.img": {
                    frame: {
                        x: 137,
                        y: 1371,
                        w: 70,
                        h: 51
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 70,
                        h: 51
                    },
                    sourceSize: {
                        w: 70,
                        h: 51
                    }
                },
                "map-planter-07.img": {
                    frame: {
                        x: 1261,
                        y: 734,
                        w: 50,
                        h: 50
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 50,
                        h: 50
                    },
                    sourceSize: {
                        w: 50,
                        h: 50
                    }
                },
                "map-archway-res-01.img": {
                    frame: {
                        x: 211,
                        y: 1371,
                        w: 180,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 180,
                        h: 48
                    },
                    sourceSize: {
                        w: 180,
                        h: 48
                    }
                },
                "map-bunker-chrys-compartment-ceiling-02a.img": {
                    frame: {
                        x: 395,
                        y: 1371,
                        w: 112,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 48
                    },
                    sourceSize: {
                        w: 112,
                        h: 48
                    }
                },
                "map-bunker-chrys-compartment-ceiling-03a.img": {
                    frame: {
                        x: 511,
                        y: 1371,
                        w: 112,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 112,
                        h: 48
                    },
                    sourceSize: {
                        w: 112,
                        h: 48
                    }
                },
                "map-planter-res-03.img": {
                    frame: {
                        x: 1261,
                        y: 788,
                        w: 43,
                        h: 40
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 2,
                        w: 43,
                        h: 40
                    },
                    sourceSize: {
                        w: 43,
                        h: 43
                    }
                },
                "map-bunker-generic-ceiling-02.img": {
                    frame: {
                        x: 1634,
                        y: 785,
                        w: 80,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 115
                    },
                    sourceSize: {
                        w: 80,
                        h: 115
                    }
                }
            }
        }]
            , Ys = [{
            meta: {
                image: "gradient-0-50-6480bd5e.png",
                size: {
                    w: 512,
                    h: 512
                },
                scale: .5
            },
            frames: {
                "map-barrel-res-01.img": {
                    frame: {
                        x: 124,
                        y: 2,
                        w: 114,
                        h: 109
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 7,
                        y: 10,
                        w: 114,
                        h: 109
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-building-club-gradient-01.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 118,
                        h: 130
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 16,
                        y: 4,
                        w: 118,
                        h: 130
                    },
                    sourceSize: {
                        w: 146,
                        h: 140
                    }
                },
                "map-building-mansion-gradient-01.img": {
                    frame: {
                        x: 2,
                        y: 136,
                        w: 118,
                        h: 102
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 4,
                        w: 118,
                        h: 102
                    },
                    sourceSize: {
                        w: 124,
                        h: 110
                    }
                },
                "map-plane-01.img": {
                    frame: {
                        x: 124,
                        y: 136,
                        w: 92,
                        h: 102
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 18,
                        y: 5,
                        w: 92,
                        h: 102
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-plane-02.img": {
                    frame: {
                        x: 242,
                        y: 2,
                        w: 42,
                        h: 85
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 43,
                        y: 1,
                        w: 42,
                        h: 85
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-bush-04cb.img": {
                    frame: {
                        x: 147,
                        y: 242,
                        w: 71,
                        h: 67
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 4,
                        w: 71,
                        h: 67
                    },
                    sourceSize: {
                        w: 75,
                        h: 75
                    }
                },
                "map-bush-01cb.img": {
                    frame: {
                        x: 288,
                        y: 82,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-light-01.img": {
                    frame: {
                        x: 288,
                        y: 158,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-bush-04.img": {
                    frame: {
                        x: 2,
                        y: 242,
                        w: 71,
                        h: 68
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 3,
                        w: 71,
                        h: 68
                    },
                    sourceSize: {
                        w: 75,
                        h: 75
                    }
                },
                "map-bush-01.img": {
                    frame: {
                        x: 77,
                        y: 242,
                        w: 66,
                        h: 68
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 2,
                        w: 66,
                        h: 68
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-bush-03.img": {
                    frame: {
                        x: 288,
                        y: 2,
                        w: 76,
                        h: 76
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 76,
                        h: 76
                    },
                    sourceSize: {
                        w: 76,
                        h: 76
                    }
                }
            }
        }]
            , Js = [{
            meta: {
                image: "savannah-0-50-d5ec1868.png",
                size: {
                    w: 1024,
                    h: 1024
                },
                scale: .5
            },
            frames: {
                "map-tree-12.img": {
                    frame: {
                        x: 36,
                        y: 2,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-complex-warehouse-floor-02.img": {
                    frame: {
                        x: 2,
                        y: 2,
                        w: 30,
                        h: 264
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 30,
                        h: 264
                    },
                    sourceSize: {
                        w: 30,
                        h: 264
                    }
                },
                "map-stone-07.img": {
                    frame: {
                        x: 296,
                        y: 2,
                        w: 256,
                        h: 256
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 256,
                        h: 256
                    },
                    sourceSize: {
                        w: 256,
                        h: 256
                    }
                },
                "map-stone-res-07.img": {
                    frame: {
                        x: 2,
                        y: 270,
                        w: 206,
                        h: 206
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 2,
                        y: 2,
                        w: 206,
                        h: 206
                    },
                    sourceSize: {
                        w: 210,
                        h: 210
                    }
                },
                "map-building-perch-ceiling.img": {
                    frame: {
                        x: 212,
                        y: 270,
                        w: 185,
                        h: 176
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 5,
                        y: 10,
                        w: 185,
                        h: 176
                    },
                    sourceSize: {
                        w: 200,
                        h: 192
                    }
                },
                "map-building-perch-floor.img": {
                    frame: {
                        x: 556,
                        y: 2,
                        w: 200,
                        h: 160
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 200,
                        h: 160
                    },
                    sourceSize: {
                        w: 200,
                        h: 160
                    }
                },
                "map-tree-03sv.img": {
                    frame: {
                        x: 556,
                        y: 166,
                        w: 128,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 128,
                        h: 128
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-wall-08-grassy.img": {
                    frame: {
                        x: 688,
                        y: 166,
                        w: 26,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 26,
                        h: 128
                    },
                    sourceSize: {
                        w: 32,
                        h: 128
                    }
                },
                "map-wall-08-grassy-res.img": {
                    frame: {
                        x: 718,
                        y: 166,
                        w: 14,
                        h: 128
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 9,
                        y: 0,
                        w: 14,
                        h: 128
                    },
                    sourceSize: {
                        w: 32,
                        h: 128
                    }
                },
                "map-bunker-generic-ceiling-02.img": {
                    frame: {
                        x: 556,
                        y: 298,
                        w: 80,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 115
                    },
                    sourceSize: {
                        w: 80,
                        h: 115
                    }
                },
                "map-bunker-generic-floor-03.img": {
                    frame: {
                        x: 640,
                        y: 298,
                        w: 80,
                        h: 115
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 80,
                        h: 115
                    },
                    sourceSize: {
                        w: 80,
                        h: 115
                    }
                },
                "map-complex-warehouse-floor-01.img": {
                    frame: {
                        x: 724,
                        y: 298,
                        w: 30,
                        h: 112
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 30,
                        h: 112
                    },
                    sourceSize: {
                        w: 30,
                        h: 112
                    }
                },
                "map-bush-res-01sv.img": {
                    frame: {
                        x: 690,
                        y: 417,
                        w: 26,
                        h: 20
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 23,
                        y: 26,
                        w: 26,
                        h: 20
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-brush-01sv.img": {
                    frame: {
                        x: 435,
                        y: 270,
                        w: 96,
                        h: 96
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 96,
                        h: 96
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-brush-02sv.img": {
                    frame: {
                        x: 2,
                        y: 480,
                        w: 94,
                        h: 94
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 1,
                        y: 1,
                        w: 94,
                        h: 94
                    },
                    sourceSize: {
                        w: 96,
                        h: 96
                    }
                },
                "map-perch-res-01.img": {
                    frame: {
                        x: 100,
                        y: 480,
                        w: 92,
                        h: 82
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 18,
                        y: 23,
                        w: 92,
                        h: 82
                    },
                    sourceSize: {
                        w: 128,
                        h: 128
                    }
                },
                "map-bush-01sv.img": {
                    frame: {
                        x: 196,
                        y: 480,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-crate-21.img": {
                    frame: {
                        x: 272,
                        y: 480,
                        w: 72,
                        h: 72
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 72,
                        h: 72
                    },
                    sourceSize: {
                        w: 72,
                        h: 72
                    }
                },
                "map-propane-01.img": {
                    frame: {
                        x: 556,
                        y: 417,
                        w: 48,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 48,
                        h: 48
                    },
                    sourceSize: {
                        w: 48,
                        h: 48
                    }
                },
                "map-wall-03-grassy.img": {
                    frame: {
                        x: 736,
                        y: 166,
                        w: 20,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 6,
                        y: 0,
                        w: 20,
                        h: 48
                    },
                    sourceSize: {
                        w: 32,
                        h: 48
                    }
                },
                "map-wall-03-grassy-res.img": {
                    frame: {
                        x: 736,
                        y: 218,
                        w: 14,
                        h: 48
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 9,
                        y: 0,
                        w: 14,
                        h: 48
                    },
                    sourceSize: {
                        w: 32,
                        h: 48
                    }
                },
                "map-tree-res-12.img": {
                    frame: {
                        x: 608,
                        y: 417,
                        w: 42,
                        h: 38
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 3,
                        y: 5,
                        w: 42,
                        h: 38
                    },
                    sourceSize: {
                        w: 48,
                        h: 48
                    }
                },
                "map-brush-res-02sv.img": {
                    frame: {
                        x: 654,
                        y: 417,
                        w: 32,
                        h: 33
                    },
                    rotated: !1,
                    trimmed: !0,
                    spriteSourceSize: {
                        x: 8,
                        y: 7,
                        w: 32,
                        h: 33
                    },
                    sourceSize: {
                        w: 48,
                        h: 48
                    }
                },
                "map-complex-warehouse-floor-03.img": {
                    frame: {
                        x: 401,
                        y: 270,
                        w: 30,
                        h: 112
                    },
                    rotated: !1,
                    trimmed: !1,
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 30,
                        h: 112
                    },
                    sourceSize: {
                        w: 30,
                        h: 112
                    }
                }
            }
        }]
            , eo = JSON.parse('[{"meta":{"image":"main-0-50-ce7d0d26.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":854,"y":2,"w":752,"h":464},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2,"y":730,"w":384,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":390,"y":730,"w":352,"h":402},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":352,"h":402},"sourceSize":{"w":352,"h":416}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":746,"y":730,"w":401,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":401,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1151,"y":730,"w":170,"h":372},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":0,"w":170,"h":372},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":1166,"w":353,"h":369},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":359,"y":1166,"w":370,"h":330},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":370,"h":330},"sourceSize":{"w":408,"h":360}},"map-building-greenhouse-floor-01.img":{"frame":{"x":733,"y":1166,"w":417,"h":321},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":417,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1154,"y":1166,"w":352,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2,"y":1539,"w":466,"h":314},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":466,"h":314},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":472,"y":1539,"w":386,"h":314},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":386,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1325,"y":730,"w":114,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":306},"sourceSize":{"w":114,"h":322}},"map-bunker-hydra-floor-01.img":{"frame":{"x":862,"y":1539,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1443,"y":730,"w":160,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":304},"sourceSize":{"w":160,"h":304}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1510,"y":1166,"w":30,"h":264},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":854,"y":470,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":1210,"y":470,"w":360,"h":248},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1298,"y":1539,"w":178,"h":186},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":186},"sourceSize":{"w":178,"h":186}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1610,"y":2,"w":160,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":1857,"w":915,"h":177},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":915,"h":177},"sourceSize":{"w":915,"h":177}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1610,"y":186,"w":96,"h":175},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":921,"y":1857,"w":162,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":162,"h":174},"sourceSize":{"w":216,"h":176}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1610,"y":365,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":1087,"y":1857,"w":202,"h":158},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":202,"h":158},"sourceSize":{"w":202,"h":158}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1774,"y":1190,"w":112,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1475,"y":1857,"w":216,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1610,"y":529,"w":64,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":1774,"y":2,"w":224,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1774,"y":142,"w":200,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-planter-03.img":{"frame":{"x":1774,"y":282,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":1850,"y":282,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-01.img":{"frame":{"x":1926,"y":282,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1774,"y":422,"w":160,"h":135},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1774,"y":561,"w":178,"h":130},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":130},"sourceSize":{"w":178,"h":130}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1774,"y":695,"w":100,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":0,"w":100,"h":117},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1878,"y":695,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1774,"y":816,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1938,"y":422,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1956,"y":561,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1858,"y":816,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":1298,"y":1729,"w":289,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":289,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1774,"y":935,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":97,"h":97},"sourceSize":{"w":115,"h":97}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1875,"y":935,"w":97,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1774,"y":1036,"w":56,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1834,"y":1036,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":84,"h":76},"sourceSize":{"w":114,"h":90}},"map-planter-res-01.img":{"frame":{"x":1922,"y":1036,"w":41,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":41,"h":68},"sourceSize":{"w":43,"h":68}},"map-planter-04.img":{"frame":{"x":1774,"y":1136,"w":50,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-05.img":{"frame":{"x":1828,"y":1136,"w":50,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1882,"y":1136,"w":112,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1293,"y":1857,"w":178,"h":154},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":154},"sourceSize":{"w":178,"h":154}}}},{"meta":{"image":"main-1-50-8d63890d.png","size":{"w":1024,"h":512},"scale":0.5},"frames":{"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":2,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":158,"w":354,"h":129},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":135,"w":354,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":161,"w":354,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":360,"y":2,"w":568,"h":120},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":360,"y":126,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}}}}]')
            , to = JSON.parse('[{"meta":{"image":"potato-0-50-85f694d4.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":854,"y":2,"w":752,"h":464},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2,"y":730,"w":384,"h":432},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":390,"y":730,"w":352,"h":402},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":352,"h":402},"sourceSize":{"w":352,"h":416}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":746,"y":730,"w":401,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":401,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1151,"y":730,"w":170,"h":372},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":0,"w":170,"h":372},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":1166,"w":353,"h":369},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":359,"y":1166,"w":370,"h":330},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":370,"h":330},"sourceSize":{"w":408,"h":360}},"map-building-greenhouse-floor-01.img":{"frame":{"x":733,"y":1166,"w":417,"h":321},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":417,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1154,"y":1166,"w":352,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2,"y":1539,"w":466,"h":314},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":466,"h":314},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":472,"y":1539,"w":386,"h":314},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":386,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1325,"y":730,"w":114,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":306},"sourceSize":{"w":114,"h":322}},"map-bunker-hydra-floor-01.img":{"frame":{"x":862,"y":1539,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1443,"y":730,"w":160,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":304},"sourceSize":{"w":160,"h":304}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1510,"y":1166,"w":30,"h":264},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":854,"y":470,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":1210,"y":470,"w":360,"h":248},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1298,"y":1539,"w":178,"h":186},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":186},"sourceSize":{"w":178,"h":186}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1610,"y":2,"w":160,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":1857,"w":915,"h":177},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":915,"h":177},"sourceSize":{"w":915,"h":177}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1610,"y":186,"w":96,"h":175},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":921,"y":1857,"w":162,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":162,"h":174},"sourceSize":{"w":216,"h":176}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1610,"y":365,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":1087,"y":1857,"w":202,"h":158},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":202,"h":158},"sourceSize":{"w":202,"h":158}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1293,"y":1857,"w":178,"h":154},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":154},"sourceSize":{"w":178,"h":154}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1475,"y":1857,"w":216,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-potato-03.img":{"frame":{"x":1962,"y":816,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":1774,"y":2,"w":224,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1774,"y":142,"w":200,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-planter-03.img":{"frame":{"x":1774,"y":282,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":1850,"y":282,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-01.img":{"frame":{"x":1926,"y":282,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1774,"y":422,"w":160,"h":135},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1774,"y":561,"w":178,"h":130},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":178,"h":130},"sourceSize":{"w":178,"h":130}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1774,"y":695,"w":100,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":0,"w":100,"h":117},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-03.img":{"frame":{"x":1878,"y":695,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1774,"y":816,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1938,"y":422,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1956,"y":561,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1858,"y":816,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":1298,"y":1729,"w":289,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":289,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1774,"y":935,"w":97,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1875,"y":935,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":97,"h":97},"sourceSize":{"w":115,"h":97}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1774,"y":1036,"w":56,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1834,"y":1036,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":84,"h":76},"sourceSize":{"w":114,"h":90}},"map-planter-res-01.img":{"frame":{"x":1922,"y":1036,"w":41,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":41,"h":68},"sourceSize":{"w":43,"h":68}},"map-planter-05.img":{"frame":{"x":1774,"y":1136,"w":50,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-04.img":{"frame":{"x":1828,"y":1136,"w":50,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1882,"y":1136,"w":112,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1774,"y":1190,"w":112,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-potato-res-01.img":{"frame":{"x":1890,"y":1190,"w":46,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":16,"w":46,"h":45},"sourceSize":{"w":72,"h":72}},"map-potato-01.img":{"frame":{"x":1962,"y":695,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-potato-02.img":{"frame":{"x":1962,"y":735,"w":36,"h":36},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1610,"y":529,"w":64,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}}}},{"meta":{"image":"potato-1-50-8d63890d.png","size":{"w":1024,"h":512},"scale":0.5},"frames":{"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":2,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":158,"w":354,"h":129},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":135,"w":354,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":161,"w":354,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":360,"y":2,"w":568,"h":120},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":360,"y":126,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}}}}]')
            , io = JSON.parse('[{"meta":{"image":"woods-0-50-8fe970b8.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":358,"y":2,"w":592,"h":463},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":592,"h":463},"sourceSize":{"w":592,"h":464}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":352,"h":674},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":352,"h":674},"sourceSize":{"w":352,"h":688}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":954,"y":2,"w":352,"h":352},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":352},"sourceSize":{"w":352,"h":352}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":680,"w":365,"h":349},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":365,"h":349},"sourceSize":{"w":369,"h":353}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":371,"y":680,"w":128,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":128,"h":328},"sourceSize":{"w":129,"h":337}},"map-building-pavilion-ceiling-01.img":{"frame":{"x":954,"y":358,"w":315,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":315,"h":308},"sourceSize":{"w":320,"h":320}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":503,"y":680,"w":449,"h":296},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":449,"h":296},"sourceSize":{"w":449,"h":297}},"map-building-pavilion-floor-01.img":{"frame":{"x":956,"y":680,"w":288,"h":288},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":288},"sourceSize":{"w":288,"h":288}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":2,"y":1033,"w":160,"h":272},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":272},"sourceSize":{"w":160,"h":272}},"map-tree-08.img":{"frame":{"x":166,"y":1033,"w":256,"h":256},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":426,"y":1033,"w":367,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":367,"h":255},"sourceSize":{"w":369,"h":257}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":797,"y":1033,"w":191,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":191,"h":255},"sourceSize":{"w":193,"h":265}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":992,"y":1033,"w":256,"h":248},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":248},"sourceSize":{"w":256,"h":248}},"map-tree-05.img":{"frame":{"x":1310,"y":2,"w":248,"h":243},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":248,"h":243},"sourceSize":{"w":256,"h":256}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":358,"y":469,"w":256,"h":200},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":200},"sourceSize":{"w":256,"h":200}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":1310,"y":249,"w":113,"h":185},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":113,"h":185},"sourceSize":{"w":113,"h":193}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":1309,"w":336,"h":161},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":336,"h":161},"sourceSize":{"w":345,"h":161}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":1310,"y":438,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":618,"y":469,"w":304,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":304,"h":152},"sourceSize":{"w":304,"h":152}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":1310,"y":602,"w":208,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":152},"sourceSize":{"w":208,"h":152}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":1427,"y":249,"w":97,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":97,"h":141},"sourceSize":{"w":97,"h":153}},"map-stone-03x.img":{"frame":{"x":1310,"y":758,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"map-planter-06.img":{"frame":{"x":1474,"y":438,"w":72,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-tree-07.img":{"frame":{"x":1310,"y":902,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-10.img":{"frame":{"x":1310,"y":1034,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1310,"y":1166,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":1455,"y":758,"w":96,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":128},"sourceSize":{"w":96,"h":128}},"map-woodpile-res-02.img":{"frame":{"x":618,"y":625,"w":64,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":31},"sourceSize":{"w":64,"h":32}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":535,"y":1309,"w":191,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":191,"h":105},"sourceSize":{"w":201,"h":105}},"map-stone-res-02x.img":{"frame":{"x":1442,"y":902,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-building-pavilion-res-01.img":{"frame":{"x":1442,"y":1034,"w":92,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":82,"y":79,"w":92,"h":98},"sourceSize":{"w":256,"h":256}},"map-woodpile-02.img":{"frame":{"x":730,"y":1309,"w":192,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-bush-06.img":{"frame":{"x":1442,"y":1166,"w":96,"h":96},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":926,"y":1309,"w":97,"h":89},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":89},"sourceSize":{"w":97,"h":89}},"map-table-02x.img":{"frame":{"x":1027,"y":1309,"w":144,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":1175,"y":1309,"w":80,"h":80},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-crate-01x.img":{"frame":{"x":1259,"y":1309,"w":78,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":78},"sourceSize":{"w":80,"h":80}},"map-stone-01x.img":{"frame":{"x":1341,"y":1309,"w":76,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":77},"sourceSize":{"w":80,"h":80}},"map-crate-03x.img":{"frame":{"x":1421,"y":1309,"w":74,"h":74},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-19.img":{"frame":{"x":2,"y":1474,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02x.img":{"frame":{"x":78,"y":1474,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-07sp.img":{"frame":{"x":154,"y":1474,"w":71,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":71,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-01x.img":{"frame":{"x":229,"y":1474,"w":66,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":66,"h":68},"sourceSize":{"w":72,"h":72}},"map-planter-res-02.img":{"frame":{"x":1248,"y":680,"w":41,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":41,"h":68},"sourceSize":{"w":43,"h":68}},"map-table-01x.img":{"frame":{"x":299,"y":1474,"w":80,"h":64},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-stone-res-01x.img":{"frame":{"x":383,"y":1474,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"map-tree-switch-03.img":{"frame":{"x":1248,"y":752,"w":56,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-04.img":{"frame":{"x":1248,"y":812,"w":56,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-01.img":{"frame":{"x":1248,"y":872,"w":56,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-02.img":{"frame":{"x":1499,"y":1309,"w":56,"h":56},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-chest-03x.img":{"frame":{"x":447,"y":1474,"w":70,"h":51},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-planter-07.img":{"frame":{"x":1252,"y":1033,"w":50,"h":50},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-03.img":{"frame":{"x":1427,"y":394,"w":43,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":43,"h":40},"sourceSize":{"w":43,"h":43}},"map-snowball-res.img":{"frame":{"x":1474,"y":394,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":342,"y":1309,"w":189,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":189,"h":113},"sourceSize":{"w":193,"h":113}}}}]')
            , ro = JSON.parse('[{"meta":{"image":"cobalt-0-50-1bced975.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":854,"y":2,"w":740,"h":580},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":62,"w":740,"h":580},"sourceSize":{"w":832,"h":704}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":2,"y":730,"w":752,"h":464},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":758,"y":730,"w":352,"h":402},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":352,"h":402},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1114,"y":730,"w":170,"h":372},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":0,"w":170,"h":372},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":1198,"w":353,"h":369},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":359,"y":1198,"w":370,"h":330},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":370,"h":330},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":733,"y":1198,"w":352,"h":320},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1089,"y":1198,"w":432,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1288,"y":730,"w":160,"h":304},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":304},"sourceSize":{"w":160,"h":304}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1452,"y":730,"w":30,"h":264},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1598,"y":2,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1571,"w":360,"h":248},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1598,"y":260,"w":160,"h":180},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":366,"y":1571,"w":915,"h":177},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":915,"h":177},"sourceSize":{"w":915,"h":177}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":1598,"y":444,"w":256,"h":176},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":176},"sourceSize":{"w":256,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1762,"y":260,"w":96,"h":175},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1598,"y":624,"w":162,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":162,"h":174},"sourceSize":{"w":216,"h":176}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1764,"y":624,"w":160,"h":160},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1598,"y":802,"w":216,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1862,"y":260,"w":64,"h":152},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-stone-03cb.img":{"frame":{"x":1598,"y":958,"w":142,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":142,"h":141},"sourceSize":{"w":144,"h":144}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1744,"y":958,"w":200,"h":136},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1598,"y":1103,"w":160,"h":135},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":854,"y":586,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":158,"w":354,"h":129},"sourceSize":{"w":368,"h":288}},"map-tree-03cb.img":{"frame":{"x":1818,"y":802,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1212,"y":586,"w":354,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":161,"w":354,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":1285,"y":1571,"w":568,"h":120},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1762,"y":1103,"w":100,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":0,"w":100,"h":117},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1598,"y":1242,"w":100,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":0,"w":100,"h":117},"sourceSize":{"w":160,"h":144}},"part-class-shell-03b.img":{"frame":{"x":1904,"y":1399,"w":26,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1866,"y":1103,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1702,"y":1242,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1736,"y":1242,"w":30,"h":112},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1770,"y":1242,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-02cb.img":{"frame":{"x":1598,"y":1363,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":1598,"y":1467,"w":289,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":289,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1702,"y":1363,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":97,"h":97},"sourceSize":{"w":115,"h":97}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1803,"y":1363,"w":97,"h":97},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-class-shell-03b.img":{"frame":{"x":1874,"y":1242,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-class-shell-03a.img":{"frame":{"x":1486,"y":730,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-class-shell-01a.img":{"frame":{"x":1486,"y":810,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-class-shell-01b.img":{"frame":{"x":1486,"y":890,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-class-shell-02a.img":{"frame":{"x":1857,"y":1571,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-class-shell-02b.img":{"frame":{"x":2,"y":1823,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-class-crate-assault.img":{"frame":{"x":82,"y":1823,"w":74,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":73},"sourceSize":{"w":74,"h":74}},"map-class-crate-tank.img":{"frame":{"x":160,"y":1823,"w":74,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":73},"sourceSize":{"w":74,"h":74}},"map-class-crate-scout.img":{"frame":{"x":238,"y":1823,"w":74,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":73},"sourceSize":{"w":74,"h":74}},"map-class-crate-sniper.img":{"frame":{"x":316,"y":1823,"w":74,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":73},"sourceSize":{"w":74,"h":74}},"map-class-crate-healer.img":{"frame":{"x":394,"y":1823,"w":74,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":73},"sourceSize":{"w":74,"h":74}},"map-class-crate-demo.img":{"frame":{"x":472,"y":1823,"w":74,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":73},"sourceSize":{"w":74,"h":74}},"map-stone-01cb.img":{"frame":{"x":550,"y":1823,"w":72,"h":72},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-class-crate-03.img":{"frame":{"x":626,"y":1823,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":70,"h":70},"sourceSize":{"w":74,"h":74}},"map-class-crate-res-01.img":{"frame":{"x":1525,"y":1198,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":66,"h":67},"sourceSize":{"w":74,"h":74}},"map-stone-res-01cb.img":{"frame":{"x":1288,"y":1038,"w":60,"h":60},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":60},"sourceSize":{"w":60,"h":60}},"part-class-shell-01a.img":{"frame":{"x":1858,"y":563,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-class-shell-02a.img":{"frame":{"x":1891,"y":1467,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-class-shell-03a.img":{"frame":{"x":1352,"y":1038,"w":48,"h":48},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-class-shell-01b.img":{"frame":{"x":1910,"y":563,"w":26,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-02b.img":{"frame":{"x":1904,"y":1363,"w":26,"h":32},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"map-bunker-generic-floor-03.img":{"frame":{"x":1858,"y":444,"w":80,"h":115},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}}}}]')
            , ao = {
            loadout: Ws,
            shared: Hs,
            halloween: Xs,
            snow: Zs,
            faction: Ks,
            desert: Qs,
            gradient: Ys,
            savannah: Js,
            main: eo,
            potato: to,
            woods: io,
            cobalt: ro
        }
            , xt = {
            low: ao,
            high: $s
        };
        function so(u, e) {
            const i = H.from(e).baseTexture;
            let r = 0;
            return i.valid || (i.on("loaded", a => {
                console.log("Loaded texture", e),
                u.prepare.upload(a)
            }
            ),
            i.on("error", a => {
                console.log("BaseTex load error, retrying", e),
                r++ <= 3 && setTimeout( () => {
                    a.source && (a.updateSourceImage(""),
                    a.updateSourceImage(e.substring(5, e.length)))
                }
                , (r - 1) * 1e3)
            }
            )),
            i
        }
        function oo(u, e) {
            const t = so(u, `assets/${e.meta.image}`)
                , i = new fr(t,e);
            return i.resolution = t.resolution,
            i.parse(),
            i
        }
        function lo(u, e) {
            let t = Math.min(window.screen.width, window.screen.height)
                , i = Math.max(window.screen.width, window.screen.height);
            t *= window.devicePixelRatio,
            i *= window.devicePixelRatio;
            const r = i < 1366 && t < 768;
            let a = e.get("highResTex") ? "high" : "low";
            if ((r || _.mobile && !_.tablet || u.type == ot.CANVAS) && (a = "low"),
            u.type == ot.WEBGL) {
                const l = u.gl;
                l.getParameter(l.MAX_TEXTURE_SIZE) < 4096 && (a = "low")
            }
            return console.log("TextureRes", a, "screenDims", window.screen.width, window.screen.height),
            a
        }
        class mo {
            constructor(e, t, i) {
                this.renderer = e,
                this.audioManager = t,
                this.config = i,
                this.textureRes = lo(this.renderer, this.config),
                e.prepare.limiter.maxItemsPerFrame = 1
            }
            atlases = {};
            loadTicker = 0;
            loaded = !1;
            textureRes;
            mapName;
            preloadMap;
            isAtlasLoaded(e) {
                return this.atlases[e]?.loaded
            }
            atlasTexturesLoaded(e) {
                if (!this.isAtlasLoaded(e))
                    return !1;
                const t = this.atlases[e];
                for (let i = 0; i < t.spritesheets.length; i++)
                    if (!t.spritesheets[i].baseTexture.valid)
                        return !1;
                return !0
            }
            loadAtlas(e) {
                if (this.isAtlasLoaded(e))
                    return;
                console.log("Load atlas", e),
                this.atlases[e] = this.atlases[e] || {
                    loaded: !1,
                    spritesheets: []
                };
                let t = xt[this.textureRes] || xt.low;
                He.main.assets.atlases.includes(e) || (t = xt.high);
                const i = t[e];
                for (let r = 0; r < i.length; r++) {
                    const a = oo(this.renderer, i[r]);
                    this.atlases[e].spritesheets.push(a)
                }
                this.atlases[e].loaded = !0
            }
            unloadAtlas(e) {
                if (!this.isAtlasLoaded(e))
                    return;
                console.log("Unload atlas", e);
                const t = this.atlases[e];
                for (let i = 0; i < t.spritesheets.length; i++)
                    t.spritesheets[i].destroy(!0);
                t.loaded = !1,
                t.spritesheets = []
            }
            loadMapAssets(e) {
                console.log("Load map", e);
                const t = He[e];
                if (!t)
                    throw new Error(`Failed loading mapDef ${this.mapName}`);
                const i = t.assets.atlases
                    , r = Object.keys(this.atlases);
                for (let a = 0; a < r.length; a++) {
                    const l = r[a];
                    i.includes(l) || this.unloadAtlas(l)
                }
                for (let a = 0; a < i.length; a++) {
                    const l = i[a];
                    this.isAtlasLoaded(l) || this.loadAtlas(l)
                }
                setTimeout( () => {
                    this.audioManager.preloadSounds();
                    const a = t.assets.audio;
                    for (let l = 0; l < a.length; l++) {
                        const s = a[l];
                        let m = fe.Sounds[s.channel];
                        if (!m) {
                            const p = fe.Channels[s.channel];
                            m = fe.Sounds[p.list]
                        }
                        const d = m[s.name]
                            , h = {
                            canCoalesce: d.canCoalesce,
                            channels: d.maxInstances,
                            volume: d.volume
                        };
                        this.audioManager.loadSound({
                            name: s.name,
                            channel: s.channel,
                            path: d.path,
                            options: h
                        })
                    }
                }
                , 0)
            }
            update(e) {
                if (!this.loaded) {
                    this.loadTicker += e;
                    let t = !this.preloadMap;
                    const i = Object.keys(this.atlases);
                    for (let r = 0; r < i.length; r++) {
                        const a = i[r];
                        this.atlasTexturesLoaded(a) || (t = !1)
                    }
                    this.audioManager.allLoaded() || (t = !1),
                    t && (console.log("Resource load complete", this.loadTicker.toFixed(2)),
                    this.loaded = !0)
                }
            }
        }
        var Ii = {
            na: {
                https: !0,
                address: "usr.mathsiscoolfun.com:8001",
                l10n: "index-north-america"
            },
            eu: {
                https: !0,
                address: "eur.mathsiscoolfun.com:8001",
                l10n: "index-europe"
            },
            asia: {
                https: !0,
                address: "asr.mathsiscoolfun.com:8001",
                l10n: "index-asia"
            },
            sa: {
                https: !0,
                address: "sa.mathsiscoolfun.com:8001",
                l10n: "index-south-america"
            }
        };
        class no {
            constructor(e, t) {
                this.config = e,
                this.localization = t,
                this.config = e,
                this.localization = t
            }
            info = {};
            loaded = !1;
            load() {
                const e = this.localization.getLocale()
                    , t = Xe.resolveUrl(`/api/site_info?language=${e}`)
                    , i = c("#server-opts")
                    , r = c("#team-server-opts");
                for (const a in Ii) {
                    const l = Ii[a]
                        , s = this.localization.translate(l.l10n)
                        , m = `<option value='${a}' data-l10n='${l.l10n}' data-label='${s}'>${s}</option>`;
                    i.append(m),
                    r.append(m)
                }
                c.ajax(t).done( (a, l) => {
                    this.info = a || {},
                    this.loaded = !0,
                    this.updatePageFromInfo()
                }
                )
            }
            getGameModeStyles() {
                const e = {
                    [Se.Solo]: "solo",
                    [Se.Duo]: "duo",
                    [Se.Squad]: "squad"
                }
                    , t = []
                    , i = this.info.modes || [];
                for (let r = 0; r < i.length; r++) {
                    const a = i[r]
                        , l = (He[a.mapName] || He.main).desc
                        , s = l.buttonText ? l.buttonText : e[a.teamMode];
                    t.push({
                        icon: l.icon,
                        buttonCss: l.buttonCss,
                        buttonText: s,
                        enabled: a.enabled
                    })
                }
                return t
            }
            updatePageFromInfo() {
                if (this.loaded) {
                    const e = this.getGameModeStyles();
                    for (let m = 0; m < e.length; m++) {
                        const d = e[m]
                            , h = `index-play-${d.buttonText}`
                            , p = c(`#btn-start-mode-${m}`);
                        p.data("l10n", h),
                        p.html(this.localization.translate(h)),
                        (d.icon || d.buttonCss) && (m == 0 ? p.addClass("btn-custom-mode-no-indent") : p.addClass("btn-custom-mode-main"),
                        p.addClass(d.buttonCss),
                        p.css({
                            "background-image": `url(${d.icon})`
                        }));
                        const w = c(`#btn-team-queue-mode-${m}`);
                        if (w.length) {
                            const f = `index-${d.buttonText}`;
                            w.data("l10n", f),
                            w.html(this.localization.translate(f)),
                            d.icon && (w.addClass("btn-custom-mode-select"),
                            w.css({
                                "background-image": `url(${d.icon})`
                            }))
                        }
                        d.enabled || p.addClass("btn-disabled-main")
                    }
                    const t = this.info.pops;
                    if (t) {
                        const m = Object.keys(t);
                        for (let d = 0; d < m.length; d++) {
                            const h = m[d]
                                , p = t[h]
                                , w = c("#server-opts").children(`option[value="${h}"]`)
                                , f = this.localization.translate("index-players");
                            w.text(`${w.data("label")} [${p.playerCount} ${f}]`)
                        }
                    }
                    let i = !1;
                    const r = c("#featured-streamers")
                        , a = c(".streamer-list");
                    if (!_.mobile && this.info.twitch) {
                        a.empty();
                        for (let m = 0; m < this.info.twitch.length; m++) {
                            const d = this.info.twitch[m]
                                , h = c("#featured-streamer-template").clone();
                            h.attr("class", "featured-streamer streamer-tooltip").attr("id", "");
                            const p = h.find("a")
                                , w = this.localization.translate(d.viewers == 1 ? "index-viewer" : "index-viewers");
                            p.html(`${d.name} <span>${d.viewers} ${w}</span>`),
                            p.css("background-image", `url(${d.img})`),
                            p.attr("href", d.url),
                            a.append(h),
                            i = !0
                        }
                    }
                    r.css("visibility", i ? "visible" : "hidden");
                    const l = c("#featured-youtuber")
                        , s = this.info.youtube;
                    s && c(".btn-youtuber").attr("href", this.info.youtube.link).html(this.info.youtube.name),
                    l.css("display", s ? "block" : "none")
                }
            }
        }
        function mr(u) {
            const e = {
                width: 64,
                height: 64
            };
            return {
                width: Math.round(e.width * Number(u.size) / 4) * 4,
                height: Math.round(e.height * Number(u.size) / 4) * 4
            }
        }
        function nr(u) {
            const e = vt[u.type]
                , t = mr(u)
                , i = g.rgbToHex(g.intToRgb(u.color))
                , r = u.stroke;
            let a = e.code.replace(/white/g, i);
            return a = a.replace(/stroke-width=".5"/g, `stroke-width="${r}"`),
            a = a.replace(/width="64"/g, `width="${t.width}"`),
            a = a.replace(/height="64"/g, `height="${t.height}"`),
            `url('data:image/svg+xml;utf8,${a = a.replace(/#/g, "%23")}')`
        }
        function ho(u) {
            const e = mr(u);
            return `${nr(u)} ${e.width / 2} ${e.height / 2}, crosshair`
        }
        const Ve = {
            getCursorURL: function(u) {
                return nr(u)
            },
            setElemCrosshair: function(u, e) {
                let t = "crosshair";
                const i = vt[e.type];
                i && (t = i.cursor ? i.cursor : ho(e)),
                u.css({
                    cursor: t
                })
            },
            setGameCrosshair: function(u) {
                Ve.setElemCrosshair(c("#game-area-wrapper"), u);
                const e = vt[u.type]
                    , t = !e || e.cursor ? "pointer" : "inherit";
                c(".ui-zoom, .ui-medical, .ui-settings-button, .ui-weapon-switch").css({
                    cursor: t
                })
            }
        };
        class de {
            constructor(e) {
                this.selector = e,
                e.find(".close").click(t => {
                    this.hide()
                }
                ),
                this.modalCloseListener = t => {
                    c(t.target).closest(".modal-close").length == 0 && (c(t.target).is(this.selector) || !this.checkSelector) && (t.stopPropagation(),
                    this.hide())
                }
            }
            checkSelector = !0;
            skipFade = !1;
            visible = !1;
            onShowFn = function() {}
            ;
            onHideFn = function() {}
            ;
            modalCloseListener;
            onShow(e) {
                this.onShowFn = e
            }
            onHide(e) {
                this.onHideFn = e
            }
            isVisible() {
                return this.visible
            }
            show(e) {
                this.visible || (this.visible = !0,
                this.selector.finish(),
                this.selector.css("display", "block"),
                this.onShowFn(),
                e || c(document).on("click touchend", this.modalCloseListener))
            }
            hide() {
                this.visible && (this.visible = !1,
                this.skipFade ? this.selector.css("display", "none") : this.selector.fadeOut(200),
                this.onHideFn(),
                c(document).off("click touchend", this.modalCloseListener))
            }
        }
        function Mi(u) {
            const e = {
                [ue.Top]: "customize-emote-top",
                [ue.Right]: "customize-emote-right",
                [ue.Bottom]: "customize-emote-bottom",
                [ue.Left]: "customize-emote-left",
                [ue.Win]: "customize-emote-win",
                [ue.Death]: "customize-emote-death"
            }
                , t = e[u] || e[ue.Top];
            return c(`#${t}`)
        }
        function tt(u) {
            return function(e, t) {
                const i = B[e.type].rarity || 0
                    , r = B[t.type].rarity || 0;
                return i == 0 && r == 0 ? ht(e, t) : i == 0 ? -1 : r == 0 ? 1 : u(e, t)
            }
        }
        function co(u, e) {
            return e.timeAcquired == u.timeAcquired ? hr(u, e) : e.timeAcquired - u.timeAcquired
        }
        function ht(u, e) {
            const t = B[u.type]
                , i = B[e.type];
            return t.name < i.name ? -1 : t.name > i.name ? 1 : 0
        }
        function uo(u, e) {
            const t = B[u.type].rarity || 0
                , i = B[e.type].rarity || 0;
            return t == i ? ht(u, e) : i - t
        }
        function hr(u, e) {
            const t = B[u.type]
                , i = B[e.type];
            return !t.category || !i.category || t.category == i.category ? ht(u, e) : t.category - i.category
        }
        const Ti = {
            newest: tt(co),
            alpha: tt(ht),
            rarity: tt(uo),
            subcat: tt(hr)
        };
        class po {
            constructor(e, t) {
                this.account = e,
                this.localization = t,
                _.touch || this.categories.push({
                    loadoutType: "crosshair",
                    gameType: "crosshair",
                    categoryImage: "img/gui/loadout-crosshair.svg"
                }),
                this.categories.push({
                    loadoutType: "player_icon",
                    gameType: "emote",
                    categoryImage: "img/gui/loadout-emote.svg"
                }),
                this.modalCustomize = c("#modal-customize"),
                this.modalCustomizeList = c("#modal-customize-list"),
                this.modalCustomizeItemRarity = c("#modal-customize-item-rarity"),
                this.modalCustomizeItemName = c("#modal-customize-item-name"),
                this.modalCustomizeItemLore = c("#modal-customize-item-lore"),
                this.modalCustomizeItemSource = c("#modal-customize-item-source"),
                this.modal = new de(this.modalCustomize),
                this.modal.onShow( () => {
                    this.onShow()
                }
                ),
                this.modal.onHide( () => {
                    this.onHide()
                }
                );
                const i = function() {
                    c("#modal-screen-block").fadeIn(200)
                }
                    , r = () => {
                    this.confirmNextItem()
                }
                ;
                this.confirmItemModal = new de(c("#modal-item-confirm")),
                this.confirmItemModal.onShow(i),
                this.confirmItemModal.onHide(r),
                e.addEventListener("request", this.onRequest.bind(this)),
                e.addEventListener("loadout", this.onLoadout.bind(this)),
                e.addEventListener("items", this.onItems.bind(this)),
                e.addEventListener("pass", this.onPass.bind(this))
            }
            initialized = !1;
            active = !1;
            items = [];
            loadoutDisplay = null;
            loadout = le.defaultLoadout();
            localPendingConfirm = [];
            localConfirmed = [];
            confirmingItems = !1;
            localAckItems = [];
            categories = [{
                loadoutType: "outfit",
                gameType: "outfit",
                categoryImage: "img/gui/loadout-outfit.svg"
            }, {
                loadoutType: "melee",
                gameType: "melee",
                categoryImage: "img/gui/loadout-melee.svg"
            }, {
                loadoutType: "emote",
                gameType: "emote",
                categoryImage: "img/gui/loadout-emote.svg"
            }, {
                loadoutType: "heal",
                gameType: "heal_effect",
                categoryImage: "img/gui/loadout-heal.svg"
            }, {
                loadoutType: "boost",
                gameType: "boost_effect",
                categoryImage: "img/gui/loadout-boost.svg"
            }];
            selectedItem = {
                prevSlot: null,
                img: "",
                type: ""
            };
            emotesLoaded = !1;
            selectedCatIdx = 0;
            selectedCatItems = [];
            equippedItems = [];
            modalCustomize;
            modalCustomizeList;
            modalCustomizeItemRarity;
            modalCustomizeItemName;
            modalCustomizeItemLore;
            modalCustomizeItemSource;
            picker;
            modal;
            confirmItemModal;
            itemSort;
            selectableCats;
            selectableCatConnects;
            selectableCatImages;
            selectableSlots;
            droppableSlots;
            highlightedSlots;
            itemSelected;
            highlightOpacityMin;
            init() {
                if (!this.initialized) {
                    for (let r = 0; r < this.categories.length; r++) {
                        const a = c("<div/>", {
                            class: "modal-customize-cat",
                            "data-idx": r
                        });
                        r == this.categories.length - 1 && a.attr("id", "modal-customize-cat-standalone"),
                        a.append(c("<div/>", {
                            class: "modal-customize-cat-image",
                            css: {
                                "background-image": `url(${this.categories[r].categoryImage})`
                            }
                        })),
                        a.append(c("<div/>", {
                            class: "modal-customize-cat-connect"
                        })),
                        a.append(c("<div/>", {
                            class: "account-alert account-alert-cat"
                        })),
                        c("#modal-customize-header").append(a)
                    }
                    this.selectableCats = c(".modal-customize-cat"),
                    this.selectableCatConnects = c(".modal-customize-cat-connect"),
                    this.selectableCatImages = c(".modal-customize-cat-image"),
                    this.selectableCats.on("mouseup", r => {
                        const l = c(r.currentTarget).data("idx");
                        this.selectedCatIdx != l && this.selectCat(l)
                    }
                    ),
                    this.itemSort = c("#modal-customize-sort"),
                    this.itemSort.on("change", r => {
                        this.sortItems(r.target.value)
                    }
                    ),
                    this.modalCustomizeItemName.on("click", () => {
                        const r = document.getElementsByClassName("customize-list-item-selected");
                        r.length > 0 && r[0].scrollIntoView({
                            behavior: "smooth",
                            block: "start",
                            inline: "nearest"
                        })
                    }
                    ),
                    c("#crosshair-size").on("input", () => {
                        this.updateLoadoutFromDOM()
                    }
                    ),
                    c("#crosshair-stroke").on("input", () => {
                        this.updateLoadoutFromDOM()
                    }
                    );
                    const e = document.getElementById("color-picker");
                    this.picker = new window.CP(e,!1,e),
                    this.picker.self.classList.add("static"),
                    this.picker.on("change", r => {
                        c("#color-picker-hex").val(r),
                        this.loadout?.crosshair && this.updateLoadoutFromDOM()
                    }
                    );
                    const t = document.querySelector("#color-picker-hex")
                        , i = () => {
                        const r = t.value;
                        if (r.length)
                            if (r.length == 6)
                                this.picker.set(`#${r}`),
                                this.picker.fire("change", [r]);
                            else if (r.length == 7 && r[0] == "#")
                                this.picker.set(r),
                                this.picker.fire("change", [r.slice(1)]);
                            else
                                return
                    }
                    ;
                    t.oncut = i,
                    t.onpaste = i,
                    t.onkeyup = i,
                    t.oninput = i,
                    this.initialized = !0
                }
            }
            show() {
                this.init(),
                this.modal.show()
            }
            hide() {
                this.modal.hide()
            }
            onShow() {
                this.active = !0,
                this.localAckItems = [];
                for (let e = 0; e < this.items.length; e++) {
                    const t = this.items[e];
                    t.status < le.ItemStatus.Ackd && this.localAckItems.push(t)
                }
                this.selectCat(0),
                this.tryBeginConfirmingItems(),
                c("#start-bottom-right, #start-main").fadeOut(200),
                c("#background").hide()
            }
            onHide() {
                this.active = !1,
                le.modified(this.loadout, this.account.loadout) && this.account.setLoadout(this.loadout),
                this.clearConfirmItemModal(),
                this.modalCustomize.css({
                    cursor: "initial"
                }),
                c("#start-bottom-right, #start-main").fadeIn(200),
                c("#background").show()
            }
            onResize() {
                _.mobile && (this.categories[this.selectedCatIdx].loadoutType == "emote" ? c("#modal-customize-list").attr("style", "") : c("#modal-customize-list").attr("style", _.isLandscape ? "" : "height: 380px"))
            }
            onRequest() {
                c("#modal-customize-loading").css("opacity", this.account.requestsInFlight > 0 ? 1 : 0)
            }
            onLoadout(e) {
                this.loadout = le.validate(e),
                Ve.setGameCrosshair(e.crosshair),
                this.active && this.selectCat(this.selectedCatIdx)
            }
            onItems(e) {
                this.items = le.getUserAvailableItems(e);
                for (let t = 0; t < this.items.length; t++) {
                    const i = this.items[t];
                    i.status < le.ItemStatus.Confirmed && !this.localPendingConfirm.find(r => r.type == i.type) && !this.localConfirmed.find(r => r.type == i.type) && this.localPendingConfirm.push(i),
                    i.status < le.ItemStatus.Ackd && !this.localAckItems.find(r => r.type == i.type) && this.localAckItems.push(i)
                }
                this.active && (this.tryBeginConfirmingItems(),
                this.selectCat(this.selectedCatIdx)),
                this.account.loggedIn && (this.items.find(t => t.type == "unlock_new_account") || this.account.unlock("unlock_new_account"))
            }
            onPass(e) {
                const t = ["facebook", "instagram", "youtube", "twitter"];
                for (let i = 0; i < t.length; i++) {
                    const r = t[i]
                        , a = !!e.unlocks[r]
                        , l = c(`.customize-social-unlock[data-lock-reason='${r}']`);
                    l.css({
                        display: a ? "none" : "inline-block"
                    }),
                    l.off("click").on("click", () => {
                        this.account.setPassUnlock(r)
                    }
                    )
                }
            }
            getCategory(e) {
                for (let t = 0; t < this.categories.length; t++) {
                    const i = this.categories[t];
                    if (i.gameType == e)
                        return i
                }
                return null
            }
            clearConfirmItemModal() {
                this.localPendingConfirm = [],
                this.localConfirmed = [],
                this.confirmingItems = !1,
                this.confirmItemModal.hide()
            }
            setItemsConfirmed() {
                const e = [];
                for (let t = 0; t < this.items.length; t++) {
                    const i = this.items[t];
                    i.status < le.ItemStatus.Confirmed && e.push(i.type)
                }
                e.length > 0 && this.account.setItemStatus(le.ItemStatus.Confirmed, e)
            }
            setItemsAckd(e) {
                const t = this.categories[e]
                    , i = [];
                for (let r = 0; r < this.items.length; r++) {
                    const a = this.items[r]
                        , l = B[a.type];
                    l && l.type == t.gameType && a?.status < le.ItemStatus.Ackd && i.push(a.type)
                }
                i.length > 0 && this.account.setItemStatus(le.ItemStatus.Ackd, i)
            }
            tryBeginConfirmingItems() {
                this.active && !this.confirmingItems && (this.confirmingItems = !0,
                this.confirmNextItem())
            }
            confirmNextItem() {
                this.setItemsConfirmed();
                const e = this.localPendingConfirm.shift();
                if (e) {
                    this.localConfirmed.push(e);
                    const t = B[e.type]
                        , i = {
                        type: e.type,
                        rarity: t.rarity || 0,
                        displayName: t.name,
                        category: t.type
                    }
                        , a = `url(${X.getSvgFromGameType(e.type)})`
                        , l = X.getCssTransformFromGameType(e.type);
                    setTimeout( () => {
                        c("#modal-item-confirm-name").html(i.displayName),
                        c("#modal-item-confirm-image-inner").css({
                            "background-image": a,
                            transform: l
                        }),
                        this.confirmItemModal.show()
                    }
                    , 200)
                } else
                    this.confirmingItems = !1,
                    c("#modal-screen-block").fadeOut(300)
            }
            sortItems(e) {
                this.selectedCatItems.sort(Ti[e]);
                const t = this.categories[this.selectedCatIdx]
                    , i = c("<div/>");
                for (let r = 0; r < this.selectedCatItems.length; r++) {
                    const a = this.selectedCatItems[r];
                    a.outerDiv?.data("idx", r),
                    i.append(a.outerDiv)
                }
                this.modalCustomizeList.html(""),
                this.modalCustomizeList.append(i),
                this.selectableSlots.off("mouseup"),
                this.setItemListeners(t.loadoutType)
            }
            setItemListeners(e) {
                if (this.selectableSlots.on("mouseup", t => {
                    const i = t.currentTarget;
                    if (!c(i).hasClass("customize-list-item-locked")) {
                        if (this.itemSelected && !c(i).hasClass("customize-list-item")) {
                            this.itemSelected = !1;
                            return
                        }
                        this.selectItem(c(i)),
                        this.updateLoadoutFromDOM()
                    }
                }
                ),
                e == "emote")
                    this.setEmoteDraggable(this.selectableSlots, this),
                    this.emotesLoaded || (this.setEmoteDraggable(this.droppableSlots, this),
                    this.droppableSlots.on("mouseup", t => {
                        const i = t.currentTarget;
                        if (!c(i).hasClass("customize-list-item-locked")) {
                            if (this.itemSelected && !c(i).hasClass("customize-list-item")) {
                                this.deselectItem();
                                return
                            }
                            this.selectItem(c(i)),
                            this.updateLoadoutFromDOM()
                        }
                    }
                    ),
                    this.droppableSlots.on("drop", t => {
                        t.originalEvent?.preventDefault();
                        const i = t.currentTarget
                            , r = c(i).parent();
                        this.updateSlot(r, this.selectedItem.img, this.selectedItem.type),
                        this.updateLoadoutFromDOM(),
                        this.deselectItem()
                    }
                    ),
                    this.droppableSlots.on("mousedown", t => {
                        if (this.itemSelected) {
                            t.stopPropagation();
                            const i = c(t.currentTarget).parent();
                            this.updateSlot(i, this.selectedItem.img, this.selectedItem.type),
                            this.updateLoadoutFromDOM()
                        }
                    }
                    ),
                    this.droppableSlots.on("dragover", function(t) {
                        t.originalEvent?.preventDefault(),
                        c(this).parent().find(".ui-emote-hl").css("opacity", 1)
                    }),
                    this.droppableSlots.on("dragleave", t => {
                        t.originalEvent?.preventDefault(),
                        c(t.currentTarget).parent().find(".ui-emote-hl").css("opacity", this.highlightOpacityMin)
                    }
                    ),
                    this.droppableSlots.on("dragend", t => {
                        t.originalEvent?.preventDefault(),
                        this.deselectItem()
                    }
                    ),
                    c(".ui-emote-auto-trash").click(t => {
                        const i = c(t.currentTarget).parent();
                        this.updateSlot(i, "", ""),
                        this.updateLoadoutFromDOM()
                    }
                    ),
                    this.emotesLoaded = !0);
                else if (e == "crosshair") {
                    const t = g.intToHex(this.loadout.crosshair.color)
                        , i = [t.slice(1)];
                    this.picker.set(t),
                    c("#color-picker-hex").val(i),
                    c("#crosshair-size").val(this.loadout.crosshair.size),
                    c("#crosshair-stroke").val(this.loadout.crosshair.stroke)
                }
            }
            updateLoadoutFromDOM() {
                const e = this.categories[this.selectedCatIdx].loadoutType;
                if (e == "emote")
                    for (let t = 0; t < ue.Count; t++) {
                        const r = Mi(t).data("idx")
                            , a = this.equippedItems[r];
                        a?.type ? this.loadout.emotes[t] = a.type : this.loadout.emotes[t] = ""
                    }
                else if (e == "crosshair") {
                    const t = parseFloat(c("#crosshair-size").val())
                        , i = c("#color-picker-hex").val()
                        , r = parseFloat(c("#crosshair-stroke").val());
                    this.loadout.crosshair = {
                        type: this.selectedItem.type,
                        color: g.hexToInt(i),
                        size: Number(t.toFixed(2)),
                        stroke: Number(r.toFixed(2))
                    }
                } else
                    this.loadout[e] = this.selectedItem.type;
                this.loadout = le.validate(this.loadout),
                this.loadoutDisplay?.initialized && this.loadoutDisplay.setLoadout(this.loadout),
                this.selectedItem.loadoutType == "crosshair" && this.setSelectedCrosshair()
            }
            selectItem(e, t=!0) {
                const i = e.hasClass("customize-list-item")
                    , r = i ? e : e.parent()
                    , a = r.find(".customize-item-image")
                    , l = r.data("idx")
                    , s = r.data("slot") ? this.equippedItems[l] : this.selectedCatItems[l];
                if (!s) {
                    this.itemSelected = !1,
                    this.selectedItem = {
                        prevSlot: null,
                        img: "",
                        type: ""
                    };
                    return
                }
                if (s.type == this.selectedItem.type && s.loadoutType == "emote" && this.selectedItem.loadoutType == "emote" && t) {
                    this.deselectItem();
                    return
                }
                this.itemSelected = !0,
                this.selectedItem = {
                    prevSlot: i ? null : r,
                    img: a.data("img"),
                    type: s.type,
                    rarity: s.rarity,
                    displayName: s.displayName || "",
                    displaySource: s.displaySource || "Unknown",
                    displayLore: s.displayLore || "",
                    loadoutType: s.loadoutType,
                    subcat: s.subcat
                },
                this.modalCustomizeItemName.html(this.selectedItem.displayName);
                const m = this.localization.translate(`loadout-${s.displaySource}`) || this.localization.translate(`${s.displaySource}`) || this.selectedItem.displaySource
                    , d = `${this.localization.translate("loadout-acquired")}: ${m}`;
                this.modalCustomizeItemSource.html(d);
                const h = {
                    [_e.Locked]: "Locked",
                    [_e.Faces]: "Faces",
                    [_e.Food]: "Food",
                    [_e.Animals]: "Animals",
                    [_e.Logos]: "Logos",
                    [_e.Other]: "Other",
                    [_e.Flags]: "Flags",
                    [_e.Default]: "Default"
                }
                    , p = s.loadoutType == "emote" ? `${this.localization.translate("loadout-category")}: ${h[s.subcat]}` : this.selectedItem.displayLore;
                this.modalCustomizeItemLore.html(p);
                const w = ["stock", "common", "uncommon", "rare", "epic", "mythic"]
                    , f = ["#c5c5c5", "#c5c5c5", "#12ff00", "#00deff", "#f600ff", "#d96100"]
                    , S = this.localization.translate(`loadout-${w[this.selectedItem.rarity]}`);
                if (this.modalCustomizeItemRarity.html(S),
                this.modalCustomizeItemRarity.css({
                    color: f[this.selectedItem.rarity]
                }),
                this.selectedItem.loadoutType == "emote" && this.highlightedSlots.css({
                    display: "block",
                    opacity: this.highlightOpacityMin
                }),
                this.selectableSlots.removeClass("customize-list-item-selected"),
                i ? e.addClass("customize-list-item-selected") : r.find(".ui-emote-hl").css("opacity", 1),
                this.selectedItem.loadoutType == "crosshair") {
                    const y = B[this.selectedItem.type];
                    y && y.type == "crosshair" && y.cursor ? c("#modal-content-right-crosshair").css("display", "none") : (c("#modal-content-right-crosshair").css("display", "block"),
                    this.picker.exit(),
                    this.picker.enter())
                }
                const x = this.localAckItems.findIndex(y => y.type == this.selectedItem.type);
                x !== -1 && (e.find(".account-alert").removeClass("account-alert account-alert-cat"),
                this.localAckItems.splice(x, 1),
                this.setCategoryAlerts())
            }
            updateSlot(e, t, i) {
                const r = this.selectedItem.prevSlot;
                if (this.selectedItem = {},
                r) {
                    const a = e.find(".customize-item-image")
                        , l = e.data("idx")
                        , s = this.equippedItems[l];
                    let m = "";
                    s.type && (m = s.type),
                    this.updateSlot(r, a.data("img"), m)
                }
                this.updateSlotData(e, t, i)
            }
            deselectItem() {
                this.itemSelected = !1,
                this.selectedItem = {},
                this.selectableSlots.removeClass("customize-list-item-selected"),
                this.highlightedSlots.css({
                    display: "none",
                    opacity: 0
                }),
                this.modalCustomizeItemName.html(""),
                this.modalCustomizeItemSource.html(""),
                this.modalCustomizeItemLore.html(""),
                this.modalCustomizeItemRarity.html("")
            }
            updateSlotData(e, t, i) {
                const r = e.find(".customize-emote-slot");
                r.css("background-image", t || "none"),
                r.data("img", t || "none");
                const a = B[i]
                    , l = e.data("idx");
                if (a) {
                    const s = {
                        loadoutType: "emote",
                        type: i,
                        rarity: a.rarity || 0,
                        displayName: a.name,
                        displayLore: a.lore,
                        subcat: a.category
                    };
                    this.equippedItems[l] = s
                } else
                    this.equippedItems[l] = {}
            }
            selectCat(e) {
                const t = this.selectedCatIdx;
                if (this.selectedCatIdx = e,
                this.setItemsAckd(this.selectedCatIdx),
                t != this.selectedCatIdx) {
                    const x = this.categories[t];
                    for (let y = this.localAckItems.length - 1; y >= 0; y--) {
                        const P = this.localAckItems[y];
                        B[P.type].type == x.gameType && this.localAckItems.splice(y, 1)
                    }
                }
                const i = this.categories[this.selectedCatIdx]
                    , r = this.items.filter(x => {
                    const y = B[x.type];
                    return y && y.type == i.gameType
                }
                )
                    , a = i.loadoutType == "emote" || i.loadoutType == "player_icon";
                c("#customize-sort-subcat").css("display", a ? "block" : "none");
                let l = this.itemSort.val();
                !a && l == "subcat" && (l = "newest",
                this.itemSort.val(l)),
                r.sort(Ti[l]);
                const s = i.loadoutType == "emote"
                    , m = i.loadoutType == "crosshair"
                    , d = i.loadoutType == "emote";
                this.loadoutDisplay?.setView(i.loadoutType);
                const h = c(`.modal-customize-cat[data-idx='${this.selectedCatIdx}']`);
                this.selectableCats.removeClass("modal-customize-cat-selected"),
                this.selectableCatConnects.removeClass("modal-customize-cat-connect-selected"),
                this.selectableCatImages.removeClass("modal-customize-cat-image-selected"),
                h.addClass("modal-customize-cat-selected"),
                h.find(".modal-customize-cat-connect").addClass("modal-customize-cat-connect-selected"),
                h.find(".modal-customize-cat-image").addClass("modal-customize-cat-image-selected");
                const p = this.localization.translate(`loadout-title-${i.loadoutType}`).toUpperCase();
                c("#modal-customize-cat-title").html(p),
                c("#modal-content-right-crosshair").css("display", i.loadoutType == "crosshair" ? "block" : "none"),
                c("#modal-content-right-emote").css("display", i.loadoutType == "emote" ? "block" : "none"),
                c("#customize-emote-parent").css("display", s ? "block" : "none"),
                c("#customize-crosshair-parent").css("display", m ? "block" : "none"),
                this.modalCustomizeItemName.html(""),
                this.modalCustomizeItemSource.html(""),
                this.modalCustomizeItemLore.html(""),
                this.modalCustomizeItemRarity.html("");
                const w = function(x) {
                    const y = B[x];
                    return y?.name ? y.name : x
                };
                this.selectedCatItems = [];
                let f = "";
                const S = c("<div/>");
                for (let x = 0; x < r.length; x++) {
                    const y = r[x]
                        , P = B[y.type]
                        , C = {
                        loadoutType: i.loadoutType,
                        type: y.type,
                        rarity: P.rarity || 0,
                        displayName: P.name,
                        displaySource: w(y.source),
                        displayLore: P.lore,
                        timeAcquired: y.timeAcquired,
                        idx: x,
                        subcat: P.category,
                        outerDiv: null
                    }
                        , k = c("<div/>", {
                        class: "customize-list-item customize-list-item-unlocked",
                        "data-idx": x
                    })
                        , b = X.getSvgFromGameType(y.type)
                        , M = X.getCssTransformFromGameType(y.type)
                        , E = c("<div/>", {
                        class: "customize-item-image",
                        css: {
                            "background-image": `url(${b})`,
                            transform: M
                        },
                        "data-img": `url(${b})`,
                        draggable: d
                    });
                    if (k.append(E),
                    this.localAckItems.findIndex(D => D.type == y.type) !== -1) {
                        const D = c("<div/>", {
                            class: "account-alert account-alert-cat",
                            css: {
                                display: "block"
                            }
                        });
                        k.append(D)
                    }
                    if (i.gameType == "crosshair") {
                        const D = {
                            type: C.type,
                            color: 16777215,
                            size: 1,
                            stroke: 0
                        };
                        Ve.setElemCrosshair(k, D)
                    }
                    S.append(k),
                    C.outerDiv = k,
                    this.selectedCatItems.push(C),
                    f || (i.loadoutType == "crosshair" && C.type == this.loadout.crosshair.type || i.loadoutType != "emote" && C.type == this.loadout[i.loadoutType]) && (f = C.outerDiv)
                }
                if (this.modalCustomizeList.html(""),
                this.modalCustomizeList.append(S),
                this.modalCustomizeList.scrollTop(0),
                i.loadoutType == "emote") {
                    this.equippedItems = [];
                    for (let x = 0; x < this.loadout.emotes.length; x++) {
                        this.equippedItems.push({});
                        const y = this.loadout.emotes[x];
                        if (B[y]) {
                            const C = `url(${X.getSvgFromGameType(y)})`
                                , k = Mi(x);
                            this.updateSlotData(k, C, y)
                        }
                    }
                }
                if (this.selectableSlots = c(".customize-list-item"),
                this.droppableSlots = c(".customize-col"),
                this.highlightedSlots = this.droppableSlots.siblings(".ui-emote-hl"),
                this.highlightOpacityMin = .4,
                this.itemSelected = !1,
                this.setItemListeners(i.loadoutType),
                this.setCategoryAlerts(),
                this.deselectItem(),
                f != "" && (this.selectItem(f),
                i.loadoutType == "crosshair" && this.setSelectedCrosshair(),
                this.modalCustomizeItemName.click()),
                _.browser == "edge")
                    if (i.loadoutType == "crosshair") {
                        const x = function(y, P) {
                            const C = y.height() + parseInt(y.css("padding-top")) + parseInt(y.css("padding-bottom"));
                            P.css("height", C)
                        };
                        x(c("#modal-customize-body"), c("#modal-content-left").find(".modal-disabled")),
                        x(c("#modal-content-right-crosshair"), c("#modal-content-right-crosshair").find(".modal-disabled")),
                        c(".modal-disabled").css("display", "block")
                    } else
                        c(".modal-disabled").css("display", "none");
                this.onResize()
            }
            setCategoryAlerts() {
                for (let e = 0; e < this.categories.length; e++) {
                    const t = this.categories[e]
                        , i = this.localAckItems.filter(r => {
                        const a = B[r.type];
                        return a && a.type == t.gameType
                    }
                    );
                    c(`.modal-customize-cat[data-idx='${e}']`).find(".account-alert-cat").css("display", i.length > 0 ? "block" : "none")
                }
            }
            setEmoteDraggable(e, t) {
                e.on("dragstart", function(i) {
                    if (!c(this).hasClass("customize-list-item-locked") && (t.selectItem(c(this), !1),
                    _.browser != "edge")) {
                        const r = document.createElement("img");
                        r.src = t.selectedItem.img ? t.selectedItem.img.replace("url(", "").replace(")", "").replace(/\'/gi, "") : "",
                        i.originalEvent?.dataTransfer?.setDragImage(r, 64, 64)
                    }
                })
            }
            setSelectedCrosshair() {
                const e = this.loadout.crosshair;
                c("#customize-crosshair-selected").find(".customize-item-image").css({
                    "background-image": Ve.getCursorURL(e)
                }),
                Ve.setElemCrosshair(c("#customize-crosshair-selected"), e)
            }
        }
        const fo = "Survivr Pass 1"
            , wo = "Top 10 in solos"
            , go = "Top 8 in duos"
            , So = "Top 5 in squads"
            , yo = "Kill enemies"
            , xo = "Kill enemies"
            , zo = "Damage enemies"
            , bo = "Damage enemies"
            , _o = "Survived time"
            , ko = "9mm damage"
            , vo = "7.62mm damage"
            , Io = "5.56mm damage"
            , Mo = "12 gauge damage"
            , To = "Grenade damage"
            , Co = "Melee damage"
            , Po = "Use healing items"
            , Do = "Use adrenaline items"
            , Lo = "Unlock air drops"
            , Ao = "Destroy crates"
            , Eo = "Destroy toilets"
            , Ro = "Destroy furniture"
            , Oo = "Destroy barrels"
            , Bo = "Destroy lockers"
            , No = "Destroy pots"
            , Fo = "Destroy soda machines"
            , qo = "Kill enemies at: club"
            , jo = {
            "word-order": "svo",
            "index-create-account": "Create Account",
            "index-create-account-prompt-1": "Log in to access this feature!",
            "index-set-account-name": "Set your account name",
            "index-enter-name": "Enter name",
            "index-finish": "Finish",
            "index-reset-stats": "Reset Stats",
            "index-reset-stats-desc": 'Enter "RESET STATS" to reset your stats:',
            "index-reset-stats-desc-2": "(This does not reset pass progress.)",
            "index-delete-account": "Delete Account",
            "index-delete-account-desc": 'Enter "DELETE" to delete your account:',
            "index-confirm": "Confirm",
            "index-customize-avatar": "Customize Avatar",
            "index-done": "Done",
            "index-account": "Account",
            "index-log-in-with": "Log in with",
            "index-google": "Google",
            "index-twitch": "Twitch",
            "index-discord": "Discord",
            "index-my-stats": "My Stats",
            "index-link-account": "Link Account",
            "index-log-out": "Log Out",
            "index-change-avatar": "Change Avatar",
            "index-change-account-name": "Change Account Name",
            "index-back": "Back",
            "index-link-account-to": "Link account to",
            "index-log-in-desc": "Log In / Create Account",
            "index-logging-in": "Logging in",
            "index-leaderboards": "Leaderboards",
            "index-slogan": "2d Battle Royale",
            "index-region": "Region",
            "index-local": "Local",
            "index-north-america": "North America",
            "index-europe": "Europe",
            "index-asia": "Asia",
            "index-south-america": "South America",
            "index-korea": "South Korea",
            "index-players": "players",
            "index-play-solo": "Play Solo",
            "index-play-duo": "Play Duo",
            "index-play-squad": "Play Squad",
            "index-join-team": "Join Team",
            "index-create-team": "Create Team",
            "index-leave-team": "Leave Team",
            "index-joining-team": "Joining Team",
            "index-creating-team": "Creating Team",
            "index-invite-link": "Invite link",
            "index-invite-code": "Invite code",
            "index-join-team-help": "Got a team link or code? Paste it here:",
            "index-solo": "Solo",
            "index-duo": "Duo",
            "index-squad": "Squad",
            "index-auto-fill": "Auto Fill",
            "index-no-fill": "No Fill",
            "index-waiting-for-leader": "Waiting for leader to start game",
            "index-joining-game": "Joining game",
            "index-game-in-progress": "Game in progress",
            "index-play": "Play",
            "index-customize-loadout": "Customize Emotes",
            "index-twitter-follow": "Twitter Follow",
            "index-youtube-subscribe": "YouTube Subscribe",
            "index-facebook-like": "Facebook Like",
            "index-featured-youtuber": "Featured YouTuber",
            "index-streaming-live": "Streaming Live!",
            "index-viewer": "viewer",
            "index-viewers": "viewers",
            "index-settings": "Settings",
            "index-high-resolution": "High resolution (check to increase visual quality)",
            "index-screen-shake": "Screen shake",
            "index-anon-player-names": "Anonymize player names",
            "index-master-volume": "Master Volume",
            "index-sfx-volume": "SFX Volume",
            "index-music-volume": "Music Volume",
            "index-mobile-announce": "Now available on mobile!",
            "index-mobile-tooltip": "Visit <span>survev.io</span> on your mobile device to play on the go!",
            "index-version": "ver",
            "index-privacy": "privacy",
            "index-attributions": "attributions",
            "index-team-is-full": "Team is full!",
            "index-team-kicked": "You were kicked from the team!",
            "index-failed-joining-team": "Failed joining team.",
            "index-failed-creating-team": "Failed creating team.",
            "index-failed-finding-game": "Failed finding game.",
            "index-failed-joining-game": "Failed joining game.",
            "index-lost-connection": "Lost connection to team.",
            "index-host-closed": "Host closed the connection.",
            "index-invalid-protocol": "Old client version.",
            "index-view-more": "View More",
            "index-back-to-main": "Back to Main Menu",
            "index-most-kills": "Most kills",
            "index-total-kills": "Total kills",
            "index-total-wins": "Total wins",
            "index-top-5-percent": "Top 5 percent",
            "index-kill-death-ratio": "Kill-death ratio",
            "index-mode": "Mode",
            "index-for": "For",
            "index-today": "Today",
            "index-this-week": "This week",
            "index-all-time": "All time",
            "index-top-100": "TOP 100",
            "index-rank": "Rank",
            "index-player": "Player",
            "index-total-games": "Total Games",
            "index-controls": "Controls",
            "index-movement": "Movement",
            "index-movement-ctrl": "W, A, S, D",
            "index-aim": "Aim",
            "index-aim-ctrl": "Mouse",
            "index-punch": "Melee",
            "index-shoot": "Shoot",
            "index-shoot-ctrl": "Left-Click",
            "index-change-weapons": "Change Weapons",
            "index-change-weapons-ctrl": "1 through 4 or Scroll Wheel",
            "index-stow-weapons": "Stow Weapons (Melee Mode)",
            "index-stow-weapons-ctrl": "3 or E",
            "index-swap-weapons": "Swap to Previous Weapon",
            "index-swap-weapons-ctrl": "Q",
            "index-swap-weapon-slots": "Switch Gun Slots",
            "index-swap-weapon-slots-ctrl": "T or drag gun to other slot",
            "index-reload": "Reload",
            "index-reload-ctrl": "R",
            "index-scope-zoom": "Scope Zoom",
            "index-scope-zoom-ctrl": "Left-Click on Zoom",
            "index-pickup": "Pickup",
            "index-loot": "Loot",
            "index-revive": "Revive",
            "index-pickup-ctrl": "F",
            "index-use-medical": "Use Medical Item",
            "index-use-medical-ctrl": "Left-Click on Item or 7 through 0",
            "index-drop-item": "Drop Item",
            "index-drop-item-ctrl": "Right-Click on Item",
            "index-cancel-action": "Cancel Action",
            "index-cancel-action-ctrl": "X",
            "index-view-map": "View Map",
            "index-view-map-ctrl": "M or G",
            "index-toggle-minimap": "Toggle Minimap",
            "index-toggle-minimap-ctrl": "V",
            "index-use-ping": "Use Team Ping Wheel",
            "index-use-ping-ctrl": "Hold C, then hold Right-Click and drag mouse, then release Right-Click",
            "index-use-emote": "Use Emote Wheel",
            "index-use-emote-ctrl": "Hold Right-Click and drag mouse, then release Right-Click",
            "index-how-to-play": "How to Play",
            "index-tips-1-desc": "The goal of survev.io is to be the last player standing. You only live once per game - there is no respawn!",
            "index-tips-2": "2D PUBG",
            "index-tips-2-desc": "If you've played other battle royale games like PUBG, Fortnite or Apex Legends, then you're already halfway there! Think of survev.io as 2D PUBG (with slightly less desync and more chicken).",
            "index-tips-3": "Loot and Kill",
            "index-tips-3-desc": "You'll begin the game with no items other than a simple backpack. Move around the map to find loot: weapons, ammo, scopes, and medical items. Eliminate other players and you can take their loot!",
            "index-tips-4": "Red = Bad!",
            "index-tips-4-desc": "Players aren't the only thing that can hurt you. The deadly red zone will move in from the sides of the map and deal increasingly greater damage if you stand in it. Keep an eye on the map and stay safe.",
            "index-movement-ctrl-touch": "Left stick",
            "index-aim-ctrl-touch": "Right stick",
            "index-shoot-ctrl-touch": "Drag right stick outside stick border",
            "index-change-weapons-ctrl-touch": "Tap weapon slot",
            "index-reload-ctrl-touch": "Tap equipped ammo counter",
            "index-scope-zoom-ctrl-touch": "Tap zoom item",
            "index-pickup-ctrl-touch": "Tap interaction button or loot name",
            "index-use-medical-ctrl-touch": "Tap medical item",
            "index-drop-item-ctrl-touch": "Touch and hold item",
            "index-cancel-action-ctrl-touch": "Tap interaction button",
            "index-view-map-ctrl-touch": "Tap minimap",
            "index-use-ping-ctrl-touch": "View map and tap anywhere on map",
            "index-use-emote-ctrl-touch": "Tap surviv icon",
            "index-loadout": "Loadout",
            "loadout-title-outfit": "Outfit Skin",
            "loadout-title-melee": "Melee Skin",
            "loadout-title-emote": "Emotes",
            "loadout-title-heal": "Heal Particles",
            "loadout-title-boost": "Boost Particles",
            "loadout-title-crosshair": "Crosshair",
            "loadout-title-player_icon": "Player Icon",
            "loadout-newest": "Newest",
            "loadout-alpha": "Alpha",
            "loadout-rarity": "Rarity",
            "loadout-size": "Size",
            "loadout-stroked": "Stroked",
            "loadout-stock": "Stock",
            "loadout-common": "Common",
            "loadout-uncommon": "Uncommon",
            "loadout-rare": "Rare",
            "loadout-epic": "Epic",
            "loadout-mythic": "Mythic",
            "loadout-acquired": "Acquired",
            "loadout-category": "Category",
            "loadout-standard-issue": "Standard Issue",
            "loadout-new-account": "Account Created",
            "quest-login-prompt": "Log in to get quests!",
            "quest-refresh-prompt": "Get a new quest?",
            pass_survivr1: fo,
            quest_top_solo: wo,
            quest_top_duo: go,
            quest_top_squad: So,
            quest_kills: yo,
            quest_kills_hard: xo,
            quest_damage: zo,
            quest_damage_hard: bo,
            quest_survived: _o,
            quest_damage_9mm: ko,
            quest_damage_762mm: vo,
            quest_damage_556mm: Io,
            quest_damage_12gauge: Mo,
            quest_damage_grenade: To,
            quest_damage_melee: Co,
            quest_heal: Po,
            quest_boost: Do,
            quest_airdrop: Lo,
            quest_crates: Ao,
            quest_toilets: Eo,
            quest_furniture: Ro,
            quest_barrels: Oo,
            quest_lockers: Bo,
            quest_pots: No,
            quest_vending: Fo,
            quest_club_kills: qo,
            "game-alive": "Alive",
            "game-reloading": "Reloading",
            "game-use": "Use",
            "game-using": "Using",
            "game-reviving": "Reviving",
            "game-revive-teammate": "Revive Teammate",
            "game-revive-self": "Revive Self",
            "game-equip": "Equip",
            "game-cancel": "Cancel",
            "game-open-door": "Open Door",
            "game-close-door": "Close Door",
            "game-unlock": "Unlock",
            "game-You": "You",
            "game-you": "you",
            "game-themselves": "themselves",
            "game-yourself": "yourself",
            "game-you-died": "died",
            "game-player-died": "died",
            "game-with": "with",
            "game-knocked-out": "knocked out",
            "game-killed": "killed",
            "game-finally-killed": "finally killed",
            "game-finally-bled-out": "finally bled out",
            "game-died-outside": "died outside the safe zone",
            "game-the-red-zone": "The red zone",
            "game-crushed": "crushed",
            "game-the-air-drop": "The air drop",
            "game-the-air-strike": "The air strike",
            "game-an-air-strike": "an air strike",
            "game-waiting-for-players": "Waiting for players",
            "game-spectating": "Spectating",
            "game-red-zone-advances": "Red zone advances in",
            "game-red-zone-advancing": "Red zone advancing! Move to the safe zone",
            "game-seconds": "seconds",
            "game-minutes": "minutes",
            "game-minute": "minute",
            "game-m": "m",
            "game-s": "s",
            "game-not-enough-space": "Not enough space!",
            "game-item-already-owned": "Item already owned!",
            "game-item-already-equipped": "Item already equipped!",
            "game-better-item-equipped": "Better item equipped!",
            "game-gun-cannot-fire": "Gun cannot be fired here!",
            "game-waiting-for-new-leader": "Waiting for new leader",
            "game-waiting-for-hunted": "Searching for the Hunted",
            "game-play-new-game": "Play New Game",
            "game-spectate": "Spectate",
            "game-full-screen": "Full Screen",
            "game-aim-line": "Aim Line",
            "game-sound": "Sound",
            "game-quit-game": "Quit Game",
            "game-return-to-game": "Return to Game",
            "game-hide-match-stats": "Hide Match Stats",
            "game-view-match-stats": "View Match Stats",
            "game-previous-teammate": "Previous Teammate",
            "game-next-teammate": "Next Teammate",
            "game-spectate-previous": "Previous Player",
            "game-spectate-next": "Next Player",
            "game-leave-game": "Leave Game",
            "game-your-results": "Your Results",
            "game-chicken": "Winner winner chicken dinner!",
            "game-turkey": "Winner winner turkey dinner!",
            "game-won-the-game": "won the game.",
            "game-team-eliminated": "Your team was eliminated.",
            "game-solo-rank": "Solo Rank",
            "game-duo-rank": "Duo Rank",
            "game-squad-rank": "Squad Rank",
            "game-rank": "Rank",
            "game-team-rank": "Team Rank",
            "game-team-kills": "Team Kills",
            "game-kill": "Kill",
            "game-kills": "Kills",
            "game-damage-dealt": "Damage Dealt",
            "game-damage-taken": "Damage Taken",
            "game-survived": "Survived",
            "game-backpack00": "Pouch",
            "game-backpack01": "Small Pack",
            "game-backpack02": "Regular Pack",
            "game-backpack03": "Military Pack",
            "game-bandage": "Bandage",
            "game-bandage-tooltip": "Left-click to restore 15 health.",
            "game-healing-tooltip": "Cannot heal past 75 health.",
            "game-healthkit": "Med Kit",
            "game-healthkit-tooltip": "Left-click to restore 100 health.",
            "game-soda": "Soda",
            "game-soda-tooltip": "Left-click to boost adrenaline by 25.",
            "game-adrenaline-tooltip": "Adrenaline restores health over time.",
            "game-painkiller": "Pills",
            "game-painkiller-tooltip": "Left-click to boost adrenaline by 50.",
            "game-9mm": "9mm",
            "game-9mm-tooltip": "Ammo for M9, G18C, M93R, P30L, MP5, MAC-10, UMP9, CZ-3A1 and Vector.",
            "game-12gauge": "12 gauge",
            "game-12gauge-tooltip": "Ammo for M870, M1100, SPAS-12, Saiga-12, USAS-12, Super 90 and MP220.",
            "game-762mm": "7.62mm",
            "game-762mm-tooltip": "Ammo for AK-47, SCAR-H, M39, Mosin, SV-98, M1, BAR, AN-94, PKP, Groza, OT-38 and DP-28.",
            "game-556mm": "5.56mm",
            "game-556mm-tooltip": "Ammo for FAMAS, M416, M4A1-S, QBB-97, Mk 12, Scout Elite, and M249.",
            "game-50AE": ".50 AE",
            "game-50AE-tooltip": "Ammo for DEagle 50.",
            "game-308sub": ".308 Subsonic",
            "game-308sub-tooltip": "Ammo for AWM-S.",
            "game-flare": "Flare",
            "game-flare-tooltip": "Ammo for Flare Gun.",
            "game-45acp": ".45 ACP",
            "game-45acp-tooltip": "Ammo for M1911, M1A1, Model 94, Vector and Peacemaker.",
            "game-chest01": "Level 1 Vest",
            "game-chest02": "Level 2 Vest",
            "game-chest03": "Level 3 Vest",
            "game-chest04": "Level 4 Vest",
            "game-helmet01": "Level 1 Helmet",
            "game-helmet02": "Level 2 Helmet",
            "game-helmet03": "Level 3 Helmet",
            "game-helmet03_leader": "Commander Helmet",
            "game-helmet03_forest": "Shishigami no Kabuto",
            "game-helmet03_moon": "Tsukuyomi no Kabuto",
            "game-helmet03_lt": "Lieutenant Helmet",
            "game-helmet03_lt_aged": "Lieutenant Helmet",
            "game-helmet03_potato": "K-pot-ato",
            "game-helmet03_marksman": "Marksman Helmet",
            "game-helmet04_lone_survivr": "Lone Survivr Helmet",
            "game-helmet04_leader": "Commander Helmet",
            "game-1xscope": "1x Scope",
            "game-2xscope": "2x Scope",
            "game-4xscope": "4x Scope",
            "game-8xscope": "8x Scope",
            "game-15xscope": "15x Scope",
            "game-level-1": "Lvl. 1",
            "game-level-2": "Lvl. 2",
            "game-level-3": "Lvl. 3",
            "game-level-4": "Lvl. 4",
            "game-outfitBase": "Basic Outfit",
            "game-outfitRoyalFortune": "Royal Fortune",
            "game-outfitKeyLime": "Key Lime",
            "game-outfitCobaltShell": "Cobalt Shell",
            "game-outfitCarbonFiber": "Carbon Fiber",
            "game-outfitDarkGloves": "The Professional",
            "game-outfitDarkShirt": "The Semi-Pro",
            "game-outfitGhillie": "Ghillie Suit",
            "game-outfitCamo": "Forest Camo",
            "game-outfitRed": "Target Practice",
            "game-outfitWhite": "Arctic Avenger",
            "game-outfitWoodland": "Woodland Combat",
            "game-outfitJester": "Jester's Folly",
            "game-outfitPrisoner": "The New Black",
            "game-outfitCasanova": "Casanova Silks",
            "game-outfitKhaki": "The Initiative",
            "game-outfitCoral": "Coral Guise",
            "game-outfitAqua": "Aquatic Avenger",
            "game-outfitIslander": "Island Time",
            "game-outfitMeteor": "Falling Star",
            "game-outfitHeaven": "Celestial Garb",
            "game-outfitWaterElem": "Water Elemental",
            "game-outfitVerde": "Poncho Verde",
            "game-outfitLumber": "Woodcutter's Wrap",
            "game-outfitImperial": "Imperial Seal",
            "game-outfitPineapple": "Valiant Pineapple",
            "game-outfitTarkhany": "Tarkhany Regal",
            "game-outfitDesertCamo": "Desert Camo",
            "game-outfitDesertGhillie": "Desert Ghillie",
            "game-outfitElf": "Tallow's Little Helper",
            "game-outfitSpetsnaz": "Siberian Assault",
            "game-outfitDarkGhillie": "Incursion Ghillie",
            "game-outfitRedLeaderAged": "Red Victorious",
            "game-outfitBlueLeaderAged": "Stifled Blue",
            "game-outfitWoodsCloak": "Greencloak",
            "game-outfitSpringGhillie": "Vernal Ghillie",
            "game-outfitNoir": "Neo Noir",
            "game-outfitSummerGhillie": "Verdant Ghillie",
            "game-outfitWheat": "Splintered Wheat",
            "game-outfitDev": "Developer Swag",
            "game-outfitMod": "Discord Moderatr",
            "game-outfitParma": "PARMA Jumpsuit",
            "game-outfitParmaPrestige": "The Core Jumpsuit",
            "game-outfitTurkey": "Fowl Facade",
            "game-outfitBarrel": "Fish in a Barrel",
            "game-outfitWoodBarrel": "Fish in a Wood Barrel",
            "game-outfitStone": "Stoneskin",
            "game-outfitTree": "Barkskin",
            "game-outfitTreeSpooky": "Spoopy Barkskin",
            "game-outfitStump": "Dead Wood",
            "game-outfitBush": "Bush Wookie",
            "game-outfitLeafPile": "Sneaky Leaf",
            "game-outfitCrate": "Guy in a Box",
            "game-outfitTable": "Yard Sale",
            "game-outfitSoviet": "Comrade in a Box",
            "game-outfitAirdrop": "Hot Drop",
            "game-outfitOven": "Half-baked",
            "game-outfitRefrigerator": "Cold Fusion",
            "game-outfitVending": "OKAMI Cola Machine",
            "game-outfitPumpkin": "Pumpkin Head",
            "game-outfitWoodpile": "Deader Wood",
            "game-outfitToilet": "Size Two",
            "game-outfitBushRiver": "Lilyveil",
            "game-outfitCrab": "Crabby Camo",
            "game-outfitStumpAxe": "Axe-querade",
            "game-fists": "Fists",
            "game-knuckles_rusted": "Knuckles Rusted",
            "game-hud-knuckles_rusted": "Knuckles",
            "game-knuckles_heroic": "Knuckles Heroic",
            "game-hud-knuckles_heroic": "Knuckles",
            "game-karambit_rugged": "Karambit Rugged",
            "game-hud-karambit_rugged": "Karambit",
            "game-karambit_prismatic": "Karambit Prismatic",
            "game-hud-karambit_prismatic": "Karambit",
            "game-karambit_drowned": "Karambit Drowned",
            "game-hud-karambit_drowned": "Karambit",
            "game-bayonet_rugged": "Bayonet Rugged",
            "game-hud-bayonet_rugged": "Bayonet",
            "game-bayonet_woodland": "Bayonet Woodland",
            "game-hud-bayonet_woodland": "Bayonet",
            "game-huntsman_rugged": "Huntsman Rugged",
            "game-hud-huntsman_rugged": "Huntsman",
            "game-huntsman_burnished": "Huntsman Burnished",
            "game-hud-huntsman_burnished": "Huntsman",
            "game-bowie_vintage": "Bowie Vintage",
            "game-hud-bowie_vintage": "Bowie",
            "game-bowie_frontier": "Bowie Frontier",
            "game-hud-bowie_frontier": "Bowie",
            "game-woodaxe": "Wood Axe",
            "game-woodaxe_bloody": "Wood Axe Bloodstained",
            "game-hud-woodaxe_bloody": "Wood Axe",
            "game-fireaxe": "Fire Axe",
            "game-katana": "Katana",
            "game-katana_rusted": "Katana Rusted",
            "game-hud-katana_rusted": "Katana",
            "game-katana_orchid": "Katana Orchid",
            "game-hud-katana_orchid": "Katana",
            "game-naginata": "Naginata",
            "game-hud-naginata": "Naginata",
            "game-machete_taiga": "Machete Taiga",
            "game-hud-machete_taiga": "Machete",
            "game-kukri_trad": "Tallow's Kukri",
            "game-hud-kukri_trad": "Kukri",
            "game-bonesaw_rusted": "Bonesaw Rusted",
            "game-hud-bonesaw_rusted": "Bonesaw",
            "game-crowbar_recon": "Crowbar Carbon",
            "game-hud-crowbar_recon": "Crowbar",
            "game-stonehammer": "Stone Hammer",
            "game-sledgehammer": "Sledgehammer",
            "game-hook": "Hook",
            "game-pan": "Pan",
            "game-crowbar_scout": "Scouting Crowbar",
            "game-hud-crowbar_scout": "Crowbar",
            "game-bonesaw_healer": "The Separator",
            "game-hud-bonesaw_healer": "Bonesaw",
            "game-kukri_sniper": "Marksman's Recurve",
            "game-hud-kukri_sniper": "Kukri",
            "game-katana_demo": "Hakai no Katana",
            "game-hud-katana_demo": "Katana",
            "game-spade_assault": "Trench Spade",
            "game-hud-spade_assault": "Spade",
            "game-warhammer_tank": "Panzerhammer",
            "game-hud-warhammer_tank": "War Hammer",
            "game-ak47": "AK-47",
            "game-scar": "SCAR-H",
            "game-an94": "AN-94",
            "game-groza": "Groza",
            "game-grozas": "Groza-S",
            "game-dp28": "DP-28",
            "game-mosin": "Mosin-Nagant",
            "game-sv98": "SV-98",
            "game-m39": "M39 EMR",
            "game-garand": "M1 Garand",
            "game-svd": "SVD-63",
            "game-blr": "BLR 81",
            "game-mp5": "MP5",
            "game-mac10": "MAC-10",
            "game-ump9": "UMP9",
            "game-vector": "Vector",
            "game-vector45": "Vector",
            "game-scorpion": "CZ-3A1",
            "game-vss": "VSS",
            "game-m870": "M870",
            "game-m1100": "M1100",
            "game-m1014": "Super 90",
            "game-mp220": "MP220",
            "game-usas": "USAS-12",
            "game-saiga": "Saiga-12",
            "game-spas12": "SPAS-12",
            "game-m9": "M9",
            "game-m9_dual": "Dual M9",
            "game-hud-m9_dual": "M9",
            "game-m9_cursed": "M9 Cursed",
            "game-m93r": "M93R",
            "game-m93r_dual": "Dual M93R",
            "game-hud-m93r_dual": "M93R",
            "game-glock": "G18C",
            "game-glock_dual": "Dual G18C",
            "game-hud-glock_dual": "G18C",
            "game-p30l": "P30L",
            "game-p30l_dual": "Dual P30L",
            "game-ot38": "OT-38",
            "game-ot38_dual": "Dual OT-38",
            "game-hud-ot38_dual": "OT-38",
            "game-ots38": "OTs-38",
            "game-ots38_dual": "Dual OTs-38",
            "game-hud-ots38_dual": "OTs-38",
            "game-deagle": "DEagle 50",
            "game-deagle_dual": "Dual DEagle 50",
            "game-hud-deagle_dual": "DEagle 50",
            "game-flare_gun": "Flare Gun",
            "game-flare_gun_dual": "Dual Flare Gun",
            "game-hud-flare_gun_dual": "Flare Gun",
            "game-famas": "FAMAS",
            "game-hk416": "M416",
            "game-m4a1": "M4A1-S",
            "game-mk12": "Mk 12 SPR",
            "game-m249": "M249",
            "game-qbb97": "QBB-97",
            "game-scout_elite": "Scout Elite",
            "game-l86": "L86A2",
            "game-awc": "AWM-S",
            "game-scarssr": "Mk 20 SSR",
            "game-model94": "Model 94",
            "game-colt45": "Peacemaker",
            "game-colt45_dual": "Dual Peacemaker",
            "game-hud-colt45_dual": "Peacemaker",
            "game-mkg45": "Mk45G",
            "game-m1911": "M1911",
            "game-m1911_dual": "Dual M1911",
            "game-hud-m1911_dual": "M1911",
            "game-m1a1": "M1A1",
            "game-bar": "BAR M1918",
            "game-pkp": "PKP Pecheneg",
            "game-frag": "Frag Grenade",
            "game-hud-frag": "Frag",
            "game-smoke": "Smoke Grenade",
            "game-hud-smoke": "Smoke",
            "game-mirv": "MIRV Grenade",
            "game-hud-mirv": "MIRV",
            "game-mirv_mini": "MIRV Grenade",
            "game-martyr_nade": "Martyrdom",
            "game-strobe": "Strobe",
            "game-hud-strobe": "Strobe",
            "game-snowball": "Snowball",
            "game-hud-snowball": "Snowball",
            "game-snowball_heavy": "Snowball",
            "game-potato": "Potato",
            "game-hud-potato": "Potato",
            "game-potato_heavy": "Potato",
            "game-potato_cannon": "Potato Cannon",
            "game-potato_cannonball": "Potato Cannon",
            "game-potato_smg": "Spud Gun",
            "game-potato_smgshot": "Spud Gun",
            "game-bugle": "Bugle",
            "game-barrel_01": "a barrel",
            "game-barrel_01b": "a barrel",
            "game-silo_01": "a silo",
            "game-oven_01": "an oven",
            "game-control_panel_01": "Control Panel",
            "game-control_panel_02": "Control Panel",
            "game-control_panel_03": "a computer terminal",
            "game-control_panel_04": "a computer terminal",
            "game-control_panel_06": "a computer terminal",
            "game-power_box_01": "a power box",
            "game-airdrop_crate_01": "Air Drop",
            "game-airdrop_crate_02": "Air Drop",
            "game-stove_01": "a stove",
            "game-grill_01": "a grill",
            "game-propane_01": "a propane tank",
            "index-play-50v50": "Play 50v50",
            "index-50v50": "50v50",
            "game-red-team": "Red Team",
            "game-blue-team": "Blue Team",
            "game-red-leader": "Red Commander",
            "game-blue-leader": "Blue Commander",
            "game-is-down": "is down",
            "game-is-dead": "is dead",
            "game-promoted-to": "promoted to",
            "game-youve-been-promoted-to": "You've been promoted to",
            "game-leader": "Commander",
            "game-lieutenant": "Lieutenant",
            "game-medic": "Medic",
            "game-marksman": "Marksman",
            "game-recon": "Recon",
            "game-grenadier": "Grenadier",
            "game-bugler": "Bugler",
            "game-kill_leader": "Kill Leader",
            "game-the_hunted": "The Hunted",
            "game-last_man": "Lone Survivr",
            "game-woods_king": "The Woods King",
            "game-healer": "Medic",
            "game-demo": "Demo",
            "game-tank": "Tank",
            "game-scout": "Scout",
            "game-sniper": "Sniper",
            "game-assault": "Assault",
            "game-select-class": "SELECT A CLASS",
            "game-enter-game": "ENTER GAME",
            "game-leadership": "Leadership",
            "game-leadership-desc": "Max adrenaline.</br>Increased size.",
            "game-firepower": "Firepower",
            "game-firepower-desc": "High-capacity magazines.",
            "game-gotw": "Gift of the Woods",
            "game-gotw-desc": "Restore health over time.</br>Increased size.",
            "game-windwalk": "Windwalk",
            "game-windwalk-desc": "When taking fire, gain a short burst of speed.",
            "game-rare_potato": "Rare Potato",
            "game-rare_potato-desc": "Always rotate to a high quality weapon.",
            "game-aoe_heal": "Mass Medicate",
            "game-aoe_heal-desc": "Reviving and using medical items affects all nearby players.",
            "game-endless_ammo": "Endless Ammo",
            "game-endless_ammo-desc": "Guns always reload to full.",
            "game-steelskin": "Cast Ironskin",
            "game-steelskin-desc": "Take reduced damage and reflect enemy bullets.</br>Increased size.",
            "game-splinter": "Splinter Rounds",
            "game-splinter-desc": "Rounds fragment into three less powerful bullets.",
            "game-small_arms": "Small Arms",
            "game-small_arms-desc": "Move faster with weapons deployed.</br>Decreased size.",
            "game-takedown": "Takedown",
            "game-takedown-desc": "Kills grant health, boost and a short burst of speed.",
            "game-field_medic": "Combat Medic",
            "game-field_medic-desc": "Move quickly while healing.",
            "game-tree_climbing": "One With Nature",
            "game-tree_climbing-desc": "Move through trees. Move faster in water.",
            "game-scavenger": "Scavenger",
            "game-scavenger-desc": "Obstacles drop additional items when destroyed.",
            "game-scavenger_adv": "Master Scavenger",
            "game-scavenger_adv-desc": "Obstacles drop additional high-quality items when destroyed.",
            "game-hunted": "The Hunted",
            "game-hunted-desc": "Your location is revealed to all enemies.",
            "game-chambered": "One In The Chamber",
            "game-chambered-desc": "First and last round in each magazine deal bonus damage.</br>Does not apply to shotguns.",
            "game-martyrdom": "Martyrdom",
            "game-martyrdom-desc": "Release several live grenades upon death.",
            "game-targeting": "High-Value Targets",
            "game-targeting-desc": "Bullets deal bonus damage to players with perks.",
            "game-bonus_45": ".45 In The Chamber",
            "game-bonus_45-desc": ".45 ACP bullets deal bonus damage.",
            "game-broken_arrow": "Broken Arrow",
            "game-broken_arrow-desc": "Air strikes call in two additional fighters.",
            "game-fabricate": "Fabricate",
            "game-fabricate-desc": "Periodically fill your pack with frag grenades.",
            "game-self_revive": "Revivify",
            "game-self_revive-desc": "You can revive yourself when downed.",
            "game-bonus_9mm": "9mm Overpressure",
            "game-bonus_9mm-desc": "9mm bullets have increased speed, range, damage and spread.",
            "game-flak_jacket": "Flak Jacket",
            "game-flak_jacket-desc": "Greatly reduces damage from explosions and shrapnel.",
            "game-explosive": "Explosive Rounds",
            "game-explosive-desc": "Bullets explode on impact.",
            "game-bonus_assault": "Hollow-points",
            "game-bonus_assault-desc": "All your bullets deal bonus damage.",
            "game-inspiration": "Inspiration",
            "game-inspiration-desc": "Your bugle call grants nearby allies a short burst of speed.",
            "game-final_bugle": "Last Breath",
            "game-final_bugle-desc": "When you die, nearby allies are bloodlusted for a short period of time.",
            "game-halloween_mystery": "Trick or Treat?",
            "game-halloween_mystery-desc": "Could be either.",
            "game-trick_nothing": "One With Nothing",
            "game-trick_nothing-desc": "Tricked! This perk does absolutely nothing!",
            "game-trick_size": "Feedership",
            "game-trick_size-desc": "Tricked! You ate too much chicken and grew in size!",
            "game-trick_m9": "Dev Troll Special",
            "game-trick_m9-desc": "Tricked! You've been cursed with a developer 'treat'!",
            "game-trick_chatty": "Gabby Ghost",
            "game-trick_chatty-desc": "Tricked! You're emoting randomly!",
            "game-trick_drain": "That Sucks",
            "game-trick_drain-desc": "Tricked! You're bleeding very, very, VERY slowly!",
            "game-treat_9mm": "Candy Corn",
            "game-treat_9mm-desc": "Treat! 9mm bullets are darker and deadlier.",
            "game-treat_12g": "Red Jelly Beans",
            "game-treat_12g-desc": "Treat! 12 gauge pellets are darker and deadlier.",
            "game-treat_556": "Sour Apple Belt",
            "game-treat_556-desc": "Treat! 5.56mm bullets are darker and deadlier.",
            "game-treat_762": "Blueberry Taffy",
            "game-treat_762-desc": "Treat! 7.62mm bullets are darker and deadlier.",
            "game-treat_super": "Full Size OKAMI Bar",
            "game-treat_super-desc": "Super Treat! ALL your bullets are darker and deadlier.",
            "game-turkey_shoot": "Perky Shoot",
            "game-turkey_shoot-desc": "Gobble, gobble!",
            "game-xp-drop-desc": "Pass XP",
            "game-xp_book_tallow": "Tallow's Journal",
            "game-xp_book_greene": "Greene's Infinite Wisdom",
            "game-xp_book_parma": "The PARMA Papers",
            "game-xp_book_nevelskoy": "The Nevelskoy Report",
            "game-xp_book_rinzo": "Rinzō's Log",
            "game-xp_book_kuga": "Memoirs of Kuga Kairyū",
            "game-xp_glasses": "Lenz's Spectacles",
            "game-xp_compass": "Amélie's True Compass",
            "game-xp_stump": "Ravenstone's Bloody Stump",
            "game-xp_bone": "Bone of Gordon",
            "game-xp_donut": "Cake Donut"
        };
        function Vo(u, e) {
            const t = {
                url: u,
                type: "GET"
            };
            c.ajax(t).done(i => {
                e(null, i)
            }
            ).fail(i => {
                e(i)
            }
            )
        }
        const Ci = {
            da: "Dansk",
            de: "Deutsch",
            en: "English",
            es: "Español",
            fr: "Français",
            it: "Italiano",
            nl: "Nederlands",
            pl: "Polski",
            pt: "Português",
            ru: "Русский",
            sv: "Svenska",
            vn: "Tiếng Việt",
            tr: "Türkçe",
            jp: "日本語",
            ko: "한국어",
            th: "ภาษาไทย",
            "zh-cn": "中文简体",
            "zh-tw": "中文繁體"
        };
        class Go {
            acceptedLocales = Object.keys(Ci);
            translations = {
                en: jo
            };
            locale = "en";
            constructor() {
                this.locale = "en"
            }
            detectLocale() {
                let e = (navigator.language || navigator.userLanguage).toLowerCase();
                const t = ["pt", "de", "es", "fr", "ko", "ru", "en"];
                for (let i = 0; i < t.length; i++)
                    if (e.includes(t[i])) {
                        e = t[i];
                        break
                    }
                for (let i = 0; i < this.acceptedLocales.length; i++)
                    if (e.includes(this.acceptedLocales[i]))
                        return this.acceptedLocales[i];
                return "en"
            }
            setLocale(e) {
                const t = this.acceptedLocales.includes(e) ? e : "en";
                t != this.locale && (this.translations[e] === void 0 ? Vo(`/l10n/${e}.json`, (i, r) => {
                    if (i) {
                        console.error(`Failed loading translation data for locale ${e}`);
                        return
                    }
                    this.translations[e] = r,
                    this.setLocale(e)
                }
                ) : (this.locale = t,
                this.localizeIndex()))
            }
            getLocale() {
                return this.locale
            }
            translate(e) {
                return this.translations[this.locale][e] || this.translations.en[e] || ""
            }
            localizeIndex() {
                c("*[data-l10n]").each( (t, i) => {
                    const r = c(i);
                    let a = r.attr("data-l10n");
                    r.hasClass("help-control") && _.touch && (a += "-touch");
                    const l = this.translate(a);
                    l && (r.attr("label") ? r.attr("label", l) : (r.html(l),
                    r.attr("data-label") && r.attr("data-label", l)))
                }
                )
            }
            populateLanguageSelect() {
                const e = c(".language-select");
                e.empty();
                for (let t = 0; t < this.acceptedLocales.length; t++) {
                    const i = this.acceptedLocales[t]
                        , r = Ci[i];
                    e.append(c("<option>", {
                        value: i,
                        text: r
                    }))
                }
            }
        }
        function Pi(u, e, t, i) {
            const r = c("<div/>", {
                class: "copy-toast",
                html: u
            });
            e.append(r),
            r.css({
                left: i.pageX - parseInt(r.css("width")) / 2,
                top: t.offset().top
            }),
            r.animate({
                top: "-=25",
                opacity: 1
            }, {
                queue: !1,
                duration: 300,
                complete: function() {
                    c(this).fadeOut(250, function() {
                        c(this).remove()
                    })
                }
            })
        }
        function Uo(u, e) {
            const t = c("#start-menu");
            c("#btn-help").click( () => {
                const x = c("#start-help");
                t.addClass("display-help");
                const y = t.css("height");
                return x.css("display", "block"),
                t.animate({
                    scrollTop: y
                }, 1e3),
                !1
            }
            );
            const i = c("#team-mobile-link")
                , r = c("#team-mobile-link-desc")
                , a = c("#team-mobile-link-warning")
                , l = c("#team-link-input")
                , s = c("#social-share-block")
                , m = c("#news-block");
            c("#btn-join-team").click( () => (c("#server-warning").css("display", "none"),
            l.val(""),
            i.css("display", "block"),
            r.css("display", "block"),
            a.css("display", "none"),
            t.css("display", "none"),
            m.css("display", "none"),
            s.css("display", "none"),
            c("#right-column").css("display", "none"),
            !1)),
            c("#btn-team-mobile-link-leave").click( () => (i.css("display", "none"),
            l.val(""),
            t.css("display", "block"),
            m.css("display", "block"),
            s.css("display", "block"),
            c("#right-column").css("display", "block"),
            !1)),
            c("#team-link-input").on("keypress", function(x) {
                (x.which || x.keyCode) === 13 && (c("#btn-team-mobile-link-join").trigger("click"),
                c(this).blur())
            }),
            c("#player-name-input-solo").on("keypress", function(x) {
                (x.which || x.keyCode) === 13 && c(this).blur()
            }),
            _.mobile && _.os != "ios" && (c("#player-name-input-solo").on("focus", function() {
                if (_.isLandscape) {
                    const y = _.screenHeight <= 282 ? 18 : 36;
                    document.body.scrollTop = c(this).offset().top - y
                }
            }),
            c("#player-name-input-solo").on("blur", () => {
                document.body.scrollTop = 0
            }
            ));
            const d = c("#start-bottom-right")
                , h = c("#start-top-left")
                , p = c("#start-top-right")
                , w = new de(c("#ui-modal-keybind"));
            w.onShow( () => {
                d.fadeOut(200),
                p.fadeOut(200),
                c("#ui-modal-keybind-share").css("display", "none"),
                c("#keybind-warning").css("display", "none"),
                c("#ui-modal-keybind-list").css("height", "420px"),
                c("#keybind-code-input").html(""),
                e.refresh()
            }
            ),
            w.onHide( () => {
                d.fadeIn(200),
                p.fadeIn(200),
                e.cancelBind()
            }
            ),
            c(".btn-keybind").click( () => (w.show(),
            !1)),
            c(".js-btn-keybind-share").click( () => {
                c("#ui-modal-keybind-share").css("display") == "block" ? (c("#ui-modal-keybind-share").css("display", "none"),
                c("#ui-modal-keybind-list").css("height", "420px")) : (c("#ui-modal-keybind-share").css("display", "block"),
                c("#ui-modal-keybind-list").css("height", "275px"))
            }
            ),
            c("#keybind-link, #keybind-copy").click(x => {
                Pi("Copied!", w.selector, c("#keybind-link"), x);
                const y = c("#keybind-link").html();
                X.copyTextToClipboard(y)
            }
            ),
            c("#btn-keybind-code-load").on("click", x => {
                const y = c("#keybind-code-input").val();
                c("#keybind-code-input").val("");
                const P = u.fromBase64(String(y));
                c("#keybind-warning").css("display", P ? "none" : "block"),
                P && (Pi("Loaded!", w.selector, c("#btn-keybind-code-load"), x),
                u.saveBinds()),
                e.refresh()
            }
            );
            const f = new de(c("#modal-settings"));
            f.onShow( () => {
                d.fadeOut(200),
                p.fadeOut(200)
            }
            ),
            f.onHide( () => {
                d.fadeIn(200),
                p.fadeIn(200)
            }
            ),
            c(".btn-settings").click( () => (f.show(),
            !1)),
            c(".modal-settings-text").click(function(x) {
                const y = c(this).siblings("input:checkbox");
                y.prop("checked", !y.is(":checked")),
                y.trigger("change")
            });
            const S = new de(c("#modal-hamburger"));
            S.onShow( () => {
                h.fadeOut(200)
            }
            ),
            S.onHide( () => {
                h.fadeIn(200)
            }
            ),
            c("#btn-hamburger").click( () => (S.show(),
            !1)),
            c(".modal-body-text").click(function() {
                const x = c(this).siblings("input:checkbox");
                x.prop("checked", !x.is(":checked")),
                x.trigger("change")
            }),
            c("#force-refresh").click( () => {
                window.location.href = `/?t=${Date.now()}`
            }
            )
        }
        function $o() {
            _.os == "ios" && (_.model == "iphonex" ? _.isLandscape ? c(".main-volume-slider").css("width", "90%") : c(".main-volume-slider").css("width", "") : window.navigator.standalone || (_.isLandscape ? (c("#start-main-center").attr("style", ""),
            c("#modal-customize .modal-content").attr("style", "")) : c("#modal-customize .modal-content").css({
                transform: "translate(-50%, -50%) scale(0.45)",
                top: "38%"
            }))),
            _.tablet && (c("#featured-youtuber").remove(),
            c(".btn-youtube").remove()),
            _.touch ? c(".btn-start-fullscreen").css("display", "none") : c(".btn-start-fullscreen").css("display", "block"),
            c(".btn-keybind").css("display", _.mobile ? "none" : "inline-block")
        }
        function Wo(u) {
            c("#team-hide-url").css("display", "none"),
            u && c("#start-bottom-middle").addClass("start-bottom-middle-tablet")
        }
        const zt = {
            setupModals: Uo,
            onResize: $o,
            applyMobileBrowserStyling: Wo
        };
        class Ho {
            constructor(e, t, i, r, a) {
                this.pixi = e,
                this.audioManager = t,
                this.config = i,
                this.inputBinds = r,
                this.account = a
            }
            active = !1;
            initialized = !1;
            canvasMode;
            camera;
            renderer;
            particleBarn;
            decalBarn;
            map;
            playerBarn;
            smokeBarn;
            objectCreator;
            debugDisplay;
            loadout;
            view;
            viewOld;
            cameraOffset = n.create(0, 0);
            q = 1;
            debugZoom = 1;
            useDebugZoom = !1;
            outfitOld;
            animIdleTicker;
            animSeq;
            actionSeq;
            activeId = 98;
            activePlayer;
            init() {
                this.canvasMode = this.pixi.renderer.type == ot.CANVAS,
                this.camera = new Ui,
                this.renderer = new ar(this,this.canvasMode),
                this.particleBarn = new Qi(this.renderer),
                this.decalBarn = new Ki,
                this.map = new Zi(this.decalBarn),
                this.playerBarn = new ir,
                this.smokeBarn = new rr;
                const e = {
                    [ce.Player]: this.playerBarn.playerPool,
                    [ce.Obstacle]: this.map._0x53,
                    [ce.Building]: this.map._0x54,
                    [ce.Structure]: this.map._0x55,
                    [ce.Decal]: this.decalBarn.decalPool,
                    [ce.Smoke]: this.smokeBarn._0x56
                };
                this.objectCreator = new Xi;
                for (const i in e)
                    e.hasOwnProperty(i) && this.objectCreator._0x57(i, e[i]);
                this.debugDisplay = new pe;
                const t = [this.map.display.ground, this.renderer.layers[0], this.renderer.ground, this.renderer.layers[1], this.renderer.layers[2], this.renderer.layers[3], this.debugDisplay];
                for (let i = 0; i < t.length; i++) {
                    const r = t[i];
                    r && (r.interactiveChildren = !1,
                    this.pixi.stage.addChild(r))
                }
                this.loadout = le.defaultLoadout(),
                this.setLoadout(this.loadout),
                this.view = "outfit",
                this.viewOld = this.view,
                this.outfitOld = this.loadout.outfit,
                this.map.loadMap({
                    grassInset: 18,
                    groundPatches: [],
                    height: 720,
                    mapName: "main",
                    objects: [],
                    places: [],
                    rivers: [],
                    seed: 218051654,
                    shoreInset: 48,
                    width: 720
                }, this.camera, this.canvasMode, this.particleBarn),
                this.activePlayer = this.playerBarn.getPlayerById(this.activeId),
                this.activePlayer._0x82({
                    boost: 100,
                    boostDirty: !0,
                    hasAction: !1,
                    health: 100,
                    inventoryDirty: !1,
                    scopedIn: !1,
                    spectatorCountDirty: !1,
                    weapsDirty: !0,
                    curWeapIdx: 2,
                    weapons: [{
                        name: "",
                        ammo: 0
                    }, {
                        name: "",
                        ammo: 0
                    }, {
                        name: "bayonet_rugged",
                        ammo: 0
                    }, {
                        name: "",
                        ammo: 0
                    }]
                }, this.playerBarn),
                this.activePlayer.layer = this.activePlayer._0x73._0x83,
                this.activePlayer.isLoadoutAvatar = !0,
                this.renderer.setActiveLayer(this.activePlayer.layer),
                this.audioManager.activeLayer = this.activePlayer.layer,
                this.animIdleTicker = 3,
                this.animSeq = 0,
                this.actionSeq = 0,
                this.hide(),
                this.account.addEventListener("loadout", i => {
                    this.setLoadout(i, !0)
                }
                ),
                this.setLoadout(this.account.loadout, !0),
                this.initialized = !0,
                this.resize()
            }
            free() {
                if (this.initialized)
                    for (this.map._0x60(),
                    this.particleBarn._0x60(),
                    this.renderer._0x60(); this.pixi.stage.children.length > 0; ) {
                        const e = this.pixi.stage.children[0];
                        this.pixi.stage.removeChild(e),
                        e.destroy({
                            children: !0
                        })
                    }
                this.initialized = !1
            }
            setLoadout(e, t) {
                this.loadout = le.validate(e),
                this.updateCharDisplay(),
                t && (this.outfitOld = this.loadout.outfit),
                this.activePlayer && (this.activePlayer.playActionStartSfx = !0),
                this.animIdleTicker = 0
            }
            setView(e) {
                this.viewOld = this.view,
                this.view = e
            }
            updateCharDisplay(e={}) {
                const t = {
                    audioManager: this.audioManager,
                    renderer: this.renderer,
                    particleBarn: this.particleBarn,
                    map: this.map,
                    smokeBarn: this.smokeBarn,
                    decalBarn: this.decalBarn
                };
                this.activePlayer?.useItemEmitter && (this.activePlayer.useItemEmitter.stop(),
                this.activePlayer.useItemEmitter = null,
                this.animIdleTicker = 0);
                const i = {
                    outfit: this.loadout.outfit,
                    backpack: "backpack02",
                    helmet: "helmet01",
                    chest: "chest03",
                    activeWeapon: this.loadout.melee,
                    layer: 0,
                    dead: !1,
                    downed: !1,
                    animType: e.animType || 0,
                    animSeq: e.animSeq || 0,
                    actionSeq: e.actionSeq || 0,
                    actionType: e.actionType || 0,
                    actionItem: e.actionItem || "",
                    wearingPan: !1,
                    healEffect: !1,
                    frozen: !1,
                    frozenOri: 0,
                    hasteType: 0,
                    hasteSeq: 0,
                    scale: 1,
                    role: "",
                    perks: [],
                    $r: !1,
                    pos: n.create(50, 50),
                    dir: n.create(0, -1)
                };
                this.objectCreator._0x80(ce.Player, 98, i, t),
                this.playerBarn.setPlayerInfo({
                    playerId: 98,
                    teamId: 0,
                    groupId: 0,
                    name: "",
                    loadout: {
                        heal: this.loadout.heal,
                        boost: this.loadout.boost
                    }
                })
            }
            getCameraTargetZoom() {
                return document.getElementById("modal-content-left").getBoundingClientRect().height / this.camera._0x67 * .2 * this.camera._0x67 * .5 / this.camera._0x68
            }
            getCameraLoadoutOffset() {
                const e = this.camera._0x69
                    , t = this.getCameraTargetZoom();
                this.camera._0x69 = t;
                const r = document.getElementById("modal-content-left").getBoundingClientRect()
                    , a = U.createAabb(this.camera._0x70(n.create(r.left, r.top + r.height)), this.camera._0x70(n.create(r.left + r.width, r.top)))
                    , l = n.mul(n.sub(a.max, a.min), .5)
                    , s = n.add(a.min, l)
                    , m = U.createAabb(this.camera._0x70(n.create(0, this.camera._0x67)), this.camera._0x70(n.create(this.camera._0x66, 0)))
                    , d = n.mul(n.sub(m.max, m.min), .5)
                    , h = n.add(m.min, d)
                    , p = n.sub(s, h)
                    , w = d.x - p.x - l.x
                    , f = z.clamp(w * .5, 2.5, 6)
                    , x = n.create(p.x + l.x + f, p.y + .33);
                return this.camera._0x69 = e,
                x
            }
            show() {
                this.active || (this.active = !0,
                this.resize())
            }
            hide() {
                this.active && (this.active = !1,
                this.camera._0x69 = 2)
            }
            update(e, t) {
                const i = {};
                if (this.camera._0x63 = n.sub(this.activePlayer._0x63, this.cameraOffset),
                this.camera._0x69 = z.lerp(e * 5, this.camera._0x69, this.camera._0x48),
                this.audioManager.cameraPos = n.copy(this.camera._0x63),
                t && (this.view == this.viewOld || this.view != "heal" && this.view != "boost" || (this.animIdleTicker = 0),
                this.viewOld = this.view,
                this.animIdleTicker -= e,
                this.animIdleTicker < 0)) {
                    if (this.view == "heal") {
                        this.actionSeq = (this.actionSeq + 1) % 8;
                        const a = {
                            actionType: R.Action.UseItem,
                            actionItem: "bandage",
                            actionSeq: this.actionSeq
                        };
                        this.updateCharDisplay(a),
                        this.animIdleTicker = 2 + Math.random()
                    } else if (this.view == "boost") {
                        this.actionSeq = (this.actionSeq + 1) % 8;
                        const a = {
                            actionType: R.Action.UseItem,
                            actionItem: "soda",
                            actionSeq: this.actionSeq
                        };
                        this.updateCharDisplay(a),
                        this.animIdleTicker = 2 + Math.random()
                    } else if (this.view != "emote" && this.view != "crosshair") {
                        this.animSeq = (this.animSeq + 1) % 8;
                        const a = {
                            animType: R.Anim.Melee,
                            animSeq: this.animSeq
                        };
                        this.updateCharDisplay(a),
                        this.animIdleTicker = 1.5 + Math.random()
                    }
                }
                const r = this.loadout.outfit != this.outfitOld;
                if (this.outfitOld = this.loadout.outfit,
                t && r) {
                    const a = B[this.loadout.outfit];
                    a && this.audioManager.playSound(a.sound.pickup, {
                        channel: "ui"
                    })
                }
                this.playerBarn._0x62(e, this.activeId, this.teamMode, this.renderer, this.particleBarn, this.camera, this.map, this.inputBinds, this.audioManager, !1, !1, !1),
                this.smokeBarn._0x62(e, this.camera, this.activePlayer, this.map, this.renderer),
                this.particleBarn._0x62(e, this.camera, i),
                this.decalBarn._0x62(e, this.camera, this.renderer, i),
                this.renderer._0x62(e, this.camera, this.map, i),
                this.activePlayer.playActionStartSfx = !1,
                this.render(e, i)
            }
            render(e, t) {
                const i = this.map.mapLoaded ? this.map.getMapDef().biome.colors.grass : 8433481;
                this.pixi.renderer.background.color = i,
                this.playerBarn._0x77(this.camera, t),
                this.map._0x77(this.camera),
                he._0x77(this.camera, this.debugDisplay),
                he.flush()
            }
            resize() {
                this.initialized && (this.camera._0x66 = _.screenWidth,
                this.camera._0x67 = _.screenHeight,
                this.map.resize(this.pixi.renderer, this.canvasMode),
                this.renderer.resize(this.map, this.camera),
                this.camera._0x48 = this.getCameraTargetZoom(),
                this.cameraOffset = this.getCameraLoadoutOffset())
            }
        }
        const Di = 99
            , Ae = {
            getPassMaxLevel: function() {
                return Di
            },
            getPassLevelXp: function(u, e) {
                const t = Rt[u]
                    , i = e - 1;
                return i < t.xp.length ? t.xp[i] : t.xp[t.xp.length - 1]
            },
            getPassLevelAndXp: function(u, e) {
                let t = e
                    , i = 1;
                for (; i < Di; ) {
                    const r = Ae.getPassLevelXp(u, i);
                    if (t < r)
                        break;
                    t -= r,
                    i++
                }
                return {
                    level: i,
                    xp: t,
                    nextLevelXp: Ae.getPassLevelXp(u, i)
                }
            },
            timeUntilQuestRefresh: function(u) {
                return Math.floor((u - 252e5 + 864e5 - 1) / 864e5) * 864e5 + 252e5 - Date.now()
            }
        };
        function Li(u, e) {
            for (let t = Rt[u], i = 0; i < t.items.length; i++)
                if (t.items[i].level == e + 1)
                    return t.items[i].item;
            return ""
        }
        function bt(u, e=!1) {
            const t = Math.floor(Math.ceil(u / 60) / 60)
                , i = e ? Math.floor(u / 60) % 60 : Math.ceil(u / 60) % 60;
            let r = "";
            return t > 0 && (r += `${t}h `),
            r += `${i}m`
        }
        class Xo {
            constructor(e, t, i) {
                this.account = e,
                this.loadoutMenu = t,
                this.localization = i,
                this.account = e,
                this.loadoutMenu = t,
                this.localization = i,
                this.account.addEventListener("request", this.onRequest.bind(this)),
                this.account.addEventListener("pass", this.onPass.bind(this)),
                this.loadPlaceholders(),
                c("#pass-progress-unlock-wrapper").hover( () => {
                    c("#pass-unlock-tooltip").fadeIn(50)
                }
                , () => {
                    c("#pass-unlock-tooltip").fadeOut(50)
                }
                )
            }
            pass = {
                data: {
                    type: "pass_survivr1"
                },
                currentXp: 0,
                currentLevel: 1,
                levelXp: 0,
                ticker: 0,
                animSteps: [],
                elems: {}
            };
            quests = [];
            loaded = !1;
            lockDisplayed = !1;
            updatePass = !1;
            updatePassTicker = 0;
            onPass(e, t, i) {
                const a = [];
                let l = 0;
                for (let f = 0; f < t.length; f++)
                    (S => {
                        const x = t[S]
                            , y = {
                            data: x,
                            start: 0,
                            current: 0,
                            ticker: 0,
                            delay: l * .5,
                            playCompleteAnim: !1,
                            progressAnimFinished: !1,
                            completeAnimFinished: !1,
                            shouldRequestRefresh: i,
                            refreshTime: Date.now() + x.timeToRefresh + 5e3,
                            refreshSet: !1,
                            refreshEnabled: !1,
                            timer: {
                                enabled: !1,
                                str: ""
                            }
                        }
                            , P = this.quests.find(D => D.data.idx == y.data.idx && D.data.type == y.data.type);
                        P && (y.start = P.current,
                        y.current = P.current,
                        !P.data.complete && y.data.complete && (y.playCompleteAnim = !0)),
                        y.data.progress = z.min(y.data.progress, y.data.target),
                        y.data.progress > y.current && l++;
                        const C = c(`#pass-quest-${y.data.idx}`);
                        y.elems = {
                            main: C,
                            xp: C.find(".pass-quest-xp"),
                            info: C.find(".pass-quest-info"),
                            desc: C.find(".pass-quest-desc"),
                            cur: C.find(".pass-quest-counter-current"),
                            target: C.find(".pass-quest-counter-target"),
                            refresh: C.find(".pass-quest-refresh"),
                            refreshPrompt: C.find(".pass-quest-refresh-prompt"),
                            refreshConfirm: C.find(".pass-quest-refresh-confirm"),
                            refreshCancel: C.find(".pass-quest-refresh-cancel"),
                            counter: C.find(".pass-quest-counter"),
                            barFill: C.find(".pass-quest-bar-fill"),
                            timer: C.find(".pass-quest-timer"),
                            loading: C.find(".pass-quest-spinner")
                        },
                        y.elems.barFill.clearQueue(),
                        y.elems.main.removeClass("pass-bg-pulse"),
                        y.elems.main.stop().css({
                            opacity: 1
                        }),
                        y.elems.xp.removeClass("pass-text-pulse"),
                        y.elems.refresh.stop().css({
                            opacity: 1
                        }),
                        y.elems.counter.stop().css({
                            opacity: 1
                        });
                        const k = Zt[y.data.type]
                            , b = this.localization.translate(`${y.data.type}`) || y.data.type
                            , M = y.current / y.data.target * 100;
                        y.elems.main.css("display", "block"),
                        y.elems.desc.html(b),
                        y.elems.cur.html(Math.round(y.current)),
                        y.elems.xp.html(`${k.xp} XP`),
                        y.elems.barFill.css({
                            width: `${M}%`
                        }),
                        y.elems.loading.css("display", "none");
                        let E = y.data.target;
                        k.timed && (E = bt(E)),
                        y.elems.target.html(E),
                        k.icon ? (y.elems.desc.addClass("pass-quest-desc-icon"),
                        y.elems.desc.css({
                            "background-image": `url(${k.icon})`
                        })) : (y.elems.desc.removeClass("pass-quest-desc-icon"),
                        y.elems.desc.attr("style", "")),
                        this.setQuestRefreshEnabled(y),
                        a.push(y)
                    }
                    )(f);
                if (this.quests = a,
                this.pass.data = e,
                this.pass.animSteps = [],
                this.pass.currentXp = Math.round(this.pass.currentXp),
                this.pass.levelXp = Ae.getPassLevelXp(e.type, this.pass.currentLevel),
                !this.loaded) {
                    const f = Ae.getPassLevelXp(e.type, e.level);
                    this.pass.currentXp = 0,
                    this.pass.currentLevel = e.level,
                    this.pass.levelXp = f,
                    this.pass.ticker = 0
                }
                let s = this.pass.currentLevel
                    , m = this.pass.currentXp;
                if (this.loaded) {
                    for (; s < e.level; ) {
                        const S = Ae.getPassLevelXp(e.type, s);
                        this.pass.animSteps.push({
                            startXp: m,
                            targetXp: S,
                            levelXp: S,
                            targetLevel: s + 1
                        }),
                        s++,
                        m = 0
                    }
                    const f = l > 0 ? 2 : 0;
                    this.pass.ticker = -f
                }
                const d = Ae.getPassLevelXp(e.type, s);
                this.pass.animSteps.push({
                    startXp: m,
                    targetXp: e.xp,
                    levelXp: d,
                    targetLevel: s
                }),
                c("#pass-block").css("z-index", "1"),
                c("#pass-locked").css("display", "none"),
                c("#pass-loading").css("display", "none");
                const h = Li(this.pass.data.type, this.pass.currentLevel);
                this.setPassUnlockImage(h);
                const p = this.localization.translate(e.type).toUpperCase();
                c("#pass-name-text").html(p),
                c("#pass-progress-level").html(this.pass.currentLevel),
                c("#pass-progress-xp-current").html(this.pass.currentXp),
                c("#pass-progress-xp-target").html(this.pass.levelXp);
                const w = this.pass.currentXp / this.pass.levelXp * 100;
                c("#pass-progress-bar-fill").css({
                    width: `${w}%`
                }),
                this.loaded = !0
            }
            onRequest(e) {
                c("#pass-loading").css("display", e.loggingIn ? "block" : "none")
            }
            scheduleUpdatePass(e) {
                this.updatePass = !0,
                this.updatePassTicker = e
            }
            setQuestRefreshEnabled(e) {
                const t = !e.data.rerolled && !e.data.complete || e.refreshTime - Date.now() < 0;
                (t != e.refreshEnabled || !e.refreshSet) && (e.refreshEnabled = t,
                e.refreshSet = !0,
                e.elems.refresh.off("click"),
                e.elems.refreshConfirm.off("click"),
                e.elems.refreshCancel.off("click"),
                e.refreshEnabled ? (e.elems.refreshConfirm.on("click", () => {
                    e.elems.loading.css("display", "block"),
                    e.elems.refreshPrompt.css("display", "none"),
                    this.account.refreshQuest(e.data.idx)
                }
                ),
                e.elems.refreshCancel.on("click", () => {
                    e.elems.refreshPrompt.css("display", "none"),
                    e.elems.info.css("display", "block")
                }
                ),
                e.elems.refresh.on("click", () => {
                    e.elems.refreshPrompt.css("display", "block"),
                    e.elems.info.css("display", "none")
                }
                ),
                e.elems.refresh.removeClass("pass-quest-refresh-disabled")) : e.elems.refresh.addClass("pass-quest-refresh-disabled"))
            }
            setPassUnlockImage(e) {
                const t = B[e]
                    , r = `url(${t ? X.getSvgFromGameType(e) : "img/emotes/surviv.svg"})`
                    , a = X.getCssTransformFromGameType(e);
                c("#pass-progress-unlock").css({
                    opacity: t ? 1 : .15,
                    transform: `translate(-50%, -50%) ${a}`
                }),
                c("#pass-progress-unlock-image").css({
                    "background-image": r
                });
                const l = t ? this.localization.translate(`loadout-title-${this.loadoutMenu.getCategory(t.type).loadoutType}`).toUpperCase() : ""
                    , s = c("#pass-unlock-tooltip");
                s.css("opacity", t ? 1 : 0),
                s.find(".tooltip-pass-title").html(l),
                s.find(".tooltip-pass-desc").html(t ? t.name : "");
                const m = t ? `url(${this.loadoutMenu.getCategory(t.type).categoryImage})` : "";
                c("#pass-progress-unlock-type-image").css({
                    "background-image": m
                }),
                c("#pass-progress-unlock-type-wrapper").css({
                    display: t ? "block" : "none"
                })
            }
            animatePassLevelUp() {
                const e = c("#pass-progress-bar-fill")
                    , t = c("#pass-progress-level")
                    , i = c("#pass-progress-unlock-wrapper")
                    , r = c("#pass-progress-unlock-image")
                    , a = c("#pass-progress-unlock-type-image");
                t.html(this.pass.currentLevel),
                e.queue(l => {
                    i.addClass("pass-unlock-pulse"),
                    c(l).dequeue()
                }
                ).delay(750).queue(l => {
                    r.animate({
                        opacity: 0
                    }, 250),
                    a.animate({
                        opacity: 0
                    }, 250),
                    c(l).dequeue()
                }
                ).delay(250).queue(l => {
                    const s = Li(this.pass.data.type, this.pass.currentLevel);
                    this.setPassUnlockImage(s),
                    i.removeClass("pass-unlock-pulse"),
                    r.animate({
                        opacity: 1
                    }, 250),
                    a.animate({
                        opacity: 1
                    }, 250),
                    c(l).dequeue()
                }
                )
            }
            animateQuestComplete(e) {
                e.elems.barFill.queue(t => {
                    e.elems.main.addClass("pass-bg-pulse"),
                    e.elems.xp.addClass("pass-text-pulse"),
                    e.elems.refresh.animate({
                        opacity: .25
                    }, 250),
                    e.elems.refresh.removeClass("pass-quest-refresh-disabled"),
                    e.elems.refresh.animate({
                        opacity: 0
                    }, 250),
                    e.elems.counter.animate({
                        opacity: 0
                    }, 250),
                    e.elems.desc.html("QUEST COMPLETE!"),
                    c(t).dequeue()
                }
                ).delay(1e3).queue(t => {
                    e.elems.main.animate({
                        opacity: 0
                    }, 750),
                    c(t).dequeue()
                }
                )
            }
            update(e) {
                this.updatePassTicker -= e,
                this.updatePass && this.updatePassTicker < 0 && (this.updatePass = !1,
                this.account.getPass(!1));
                for (let t = 0; t < this.quests.length; t++) {
                    const i = this.quests[t];
                    if (this.setQuestRefreshEnabled(i),
                    i.ticker += e,
                    !i.progressAnimFinished) {
                        const l = z.clamp((i.ticker - i.delay) / 1, 0, 1);
                        i.current = z.lerp(z.easeOutExpo(l), i.start, i.data.progress);
                        const s = i.current / i.data.target * 100
                            , m = Zt[i.data.type];
                        let d = Math.round(i.current);
                        m.timed && (d = bt(d, !0)),
                        i.elems.cur.html(d),
                        i.elems.barFill.css({
                            width: `${s}%`
                        }),
                        l >= 1 && (i.progressAnimFinished = !0)
                    }
                    i.playCompleteAnim && !i.completeAnimFinished && i.ticker - i.delay > 1.25 && (this.animateQuestComplete(i),
                    i.completeAnimFinished = !0);
                    const r = !i.playCompleteAnim || i.completeAnimFinished && i.ticker - i.delay > 4.25;
                    i.data.complete && r && i.refreshEnabled && i.shouldRequestRefresh && (i.shouldRequestRefresh = !1,
                    this.account.refreshQuest(i.data.idx));
                    const a = i.data.complete && r;
                    if (a != i.timer.displayed) {
                        i.timer.displayed = a,
                        i.elems.main.removeClass("pass-bg-pulse"),
                        i.elems.main.stop().animate({
                            opacity: 1
                        }, 250);
                        const l = i.elems.refreshPrompt.css("display") == "block";
                        i.elems.info.css("display", a || l ? "none" : "block"),
                        i.elems.timer.css("display", a ? "block" : "none")
                    }
                    if (a) {
                        const l = Math.max(i.refreshTime - Date.now(), 0)
                            , s = bt(l / 1e3);
                        s != i.timer.str && (i.timer.str = s,
                        i.elems.timer.html(s))
                    }
                }
                if (this.pass.ticker += e,
                this.pass.animSteps.length > 0 && this.pass.ticker >= 0) {
                    const t = this.pass.animSteps[0]
                        , i = z.clamp(this.pass.ticker / 1.5, 0, 1);
                    this.pass.currentXp = z.lerp(z.easeOutExpo(i), t.startXp, t.targetXp),
                    this.pass.levelXp = t.levelXp;
                    const r = this.pass.currentXp / t.levelXp * 100;
                    c("#pass-progress-xp-current").html(Math.round(this.pass.currentXp)),
                    c("#pass-progress-xp-target").html(this.pass.levelXp),
                    c("#pass-progress-bar-fill").css({
                        width: `${r}%`
                    }),
                    i >= 1 && (t.targetLevel > this.pass.currentLevel && (this.pass.currentLevel = t.targetLevel,
                    this.animatePassLevelUp()),
                    this.pass.animSteps.shift(),
                    this.pass.ticker -= 3)
                }
                !this.account.loggingIn && !this.account.loggedIn && !this.lockDisplayed && (c("#pass-block").css("z-index", "1"),
                c("#pass-loading").css("display", "none"),
                c("#pass-locked").css("display", "block"),
                this.lockDisplayed = !0)
            }
            onResize() {}
            loadPlaceholders() {
                const e = Rt.pass_survivr1
                    , t = this.localization.translate("pass_survivr1").toUpperCase();
                c("#pass-name-text").html(t),
                c("#pass-progress-level").html(1),
                c("#pass-progress-xp-current").html(0),
                c("#pass-progress-xp-target").html(e.xp[0]),
                this.setPassUnlockImage(e.items[0].item)
            }
        }
        function Zo(u, e, t, i) {
            const r = u.find(".login-options-content");
            r.empty(),
            e && r.append(c("<div/>", {
                class: "account-login-desc"
            }).append(c("<p/>", {
                html: i.translate("index-link-account-to")
            })));
            const a = c("<div/>", {
                class: "account-buttons"
            });
            r.append(a);
            const l = function(s, m, d) {
                const h = c("<div/>", {
                    class: `menu-option btn-darken btn-standard btn-login-${s}`
                });
                h.append(c("<span/>", {
                    class: "login-button-name"
                }).append(c("<span/>", {
                    html: i.translate(`index-${s}`)
                })).append(c("<div/>", {
                    class: "icon"
                }))),
                e && m ? (h.addClass("btn-login-linked"),
                h.find("span.login-button-name").html('<div class="icon"></div>')) : h.click(p => {
                    d()
                }
                ),
                a.append(h)
            };
            l("twitch", t.profile.linkedTwitch, () => {
                window.location.href = "/api/user/auth/twitch"
            }
            ),
            l("discord", t.profile.linkedDiscord, () => {
                window.location.href = "/api/user/auth/discord"
            }
            )
        }
        class Ko {
            constructor(e, t, i, r) {
                this.account = e,
                this.localization = t,
                this.loadoutMenu = i,
                this.errorModal = r,
                this.account = e,
                this.localization = t,
                this.loadoutMenu = i,
                this.errorModal = r,
                e.addEventListener("error", this.onError.bind(this)),
                e.addEventListener("login", this.onLogin.bind(this)),
                e.addEventListener("loadout", this.onLoadoutUpdated.bind(this)),
                e.addEventListener("items", this.onItemsUpdated.bind(this)),
                e.addEventListener("request", this.render.bind(this)),
                this.initUi(),
                this.render()
            }
            setNameModal = null;
            resetStatsModal = null;
            deleteAccountModal = null;
            userSettingsModal = null;
            loginOptionsModal = null;
            createAccountModal = null;
            loginOptionsModalMobile;
            modalMobileAccount;
            initUi() {
                const e = function() {
                    c("#modal-body-warning").css("display", "none"),
                    c("#modal-account-name-input").val("")
                };
                this.setNameModal = new de(c("#modal-account-name-change")),
                this.setNameModal.onShow(e),
                this.setNameModal.onHide(e),
                c("#modal-account-name-finish").click(t => {
                    t.stopPropagation();
                    const i = c("#modal-account-name-input").val();
                    this.account.setUsername(i, r => {
                        if (r) {
                            const a = {
                                failed: "Failed setting username.",
                                invalid: "Invalid username.",
                                taken: "Name already taken!",
                                change_time_not_expired: "Username has already been set recently."
                            }
                                , l = a[r] || a.failed;
                            c("#modal-body-warning").hide(),
                            c("#modal-body-warning").html(l),
                            c("#modal-body-warning").fadeIn()
                        } else
                            this.setNameModal.hide()
                    }
                    )
                }
                ),
                c("#modal-account-name-input").on("keypress", t => {
                    (t.which || t.keyCode) === 13 && c("#modal-account-name-finish").trigger("click")
                }
                ),
                this.resetStatsModal = new de(c("#modal-account-reset-stats")),
                this.resetStatsModal.onShow( () => {
                    c("#modal-account-reset-stats-input").val(""),
                    this.modalMobileAccount.hide()
                }
                ),
                c("#modal-account-reset-stats-finish").click(t => {
                    t.stopPropagation(),
                    c("#modal-account-reset-stats-input").val() == "RESET STATS" && (this.account.resetStats(),
                    this.resetStatsModal.hide())
                }
                ),
                c("#modal-account-reset-stats-input").on("keypress", t => {
                    (t.which || t.keyCode) === 13 && c("#modal-account-reset-stats-finish").trigger("click")
                }
                ),
                this.deleteAccountModal = new de(c("#modal-account-delete")),
                this.deleteAccountModal.onShow( () => {
                    c("#modal-account-delete-input").val(""),
                    this.modalMobileAccount.hide()
                }
                ),
                c("#modal-account-delete-finish").click(t => {
                    t.stopPropagation(),
                    c("#modal-account-delete-input").val() == "DELETE" && (this.account.deleteAccount(),
                    this.deleteAccountModal.hide())
                }
                ),
                c("#modal-account-delete-input").on("keypress", t => {
                    (t.which || t.keyCode) === 13 && c("#modal-account-delete-finish").trigger("click")
                }
                ),
                this.userSettingsModal = new de(c(".account-buttons-settings")),
                this.userSettingsModal.checkSelector = !1,
                this.userSettingsModal.skipFade = !0,
                this.userSettingsModal.onShow( () => {
                    c(".account-details-top").css("display", "none")
                }
                ),
                this.userSettingsModal.onHide( () => {
                    c(".account-details-top").css("display", "block")
                }
                ),
                this.loginOptionsModal = new de(c("#account-login-options")),
                this.loginOptionsModal.checkSelector = !1,
                this.loginOptionsModal.skipFade = !0,
                this.loginOptionsModal.onShow( () => {
                    c(".account-details-top").css("display", "none")
                }
                ),
                this.loginOptionsModal.onHide( () => {
                    c(".account-details-top").css("display", "block")
                }
                ),
                this.loginOptionsModalMobile = new de(c("#account-login-options-mobile")),
                this.loginOptionsModalMobile.checkSelector = !1,
                this.loginOptionsModalMobile.skipFade = !0,
                this.loginOptionsModalMobile.onShow( () => {
                    c(".account-details-top").css("display", "none")
                }
                ),
                this.loginOptionsModalMobile.onHide( () => {
                    c(".account-details-top").css("display", "block")
                }
                ),
                this.createAccountModal = new de(c("#modal-create-account-INVALID_ID")),
                this.createAccountModal.onHide( () => {
                    this.loadoutMenu.hide()
                }
                ),
                this.modalMobileAccount = new de(c("#modal-mobile-account")),
                this.modalMobileAccount.onShow( () => {
                    c("#start-top-right").css("display", "none"),
                    c(".account-details-top").css("display", "none")
                }
                ),
                this.modalMobileAccount.onHide( () => {
                    c("#start-top-right").css("display", "block"),
                    c(".account-details-top").css("display", "block"),
                    this.userSettingsModal.hide()
                }
                ),
                c(".account-leaderboard-link").click(t => (window.open(Xe.resolveUrl("/stats"), "_blank"),
                !1)),
                c(".account-stats-link").click( () => (this.waitOnLogin( () => {
                    if (this.account.loggedIn)
                        if (this.account.profile.usernameSet) {
                            const t = this.account.profile.slug || "";
                            window.open(`/stats/${t}`, "_blank")
                        } else
                            this.setNameModal.show(!0);
                    else
                        this.showLoginMenu({
                            modal: !0
                        })
                }
                ),
                !1)),
                c(".account-loadout-link, #btn-customize").click( () => (this.loadoutMenu.show(),
                this.waitOnLogin( () => {
                    this.account.loggedIn || this.showLoginMenu({
                        modal: !0
                    })
                }
                ),
                !1)),
                c(".account-details-user").click( () => (this.userSettingsModal.isVisible() || this.loginOptionsModal.isVisible() ? (this.userSettingsModal.hide(),
                this.loginOptionsModal.hide()) : this.waitOnLogin( () => {
                    _.mobile && this.modalMobileAccount.show(),
                    this.account.loggedIn ? (this.loginOptionsModal.hide(),
                    this.userSettingsModal.show()) : this.showLoginMenu({
                        modal: !1
                    })
                }
                ),
                !1)),
                c(".btn-account-link").click( () => (this.userSettingsModal.hide(),
                this.showLoginMenu({
                    modal: !1,
                    link: !0
                }),
                !1)),
                c(".btn-account-change-name").click( () => (this.account.profile.usernameChangeTime <= 0 && (this.userSettingsModal.hide(),
                this.modalMobileAccount.hide(),
                c("#modal-account-name-title").html(this.localization.translate("index-change-account-name")),
                this.setNameModal.show()),
                !1)),
                c(".btn-account-reset-stats").click( () => (this.userSettingsModal.hide(),
                this.resetStatsModal.show(),
                !1)),
                c(".btn-account-delete").click( () => (this.userSettingsModal.hide(),
                this.deleteAccountModal.show(),
                !1)),
                c(".btn-account-logout").click( () => (this.account.logout(),
                !1)),
                c("#btn-pass-locked").click( () => (this.showLoginMenu({
                    modal: !0
                }),
                !1))
            }
            onError(e, t) {
                const r = {
                    server_error: "Operation failed, please try again later.",
                    facebook_account_in_use: "Failed linking Facebook account.<br/>Account already in use!",
                    google_account_in_use: "Failed linking Google account.<br/>Account already in use!",
                    twitch_account_in_use: "Failed linking Twitch account.<br/>Account already in use!",
                    discord_account_in_use: "Failed linking Discord account.<br/>Account already in use!",
                    account_banned: `Account banned: ${t}`,
                    login_failed: "Login failed."
                }[e];
                r && (this.errorModal.selector.find(".modal-body-text").html(r),
                this.errorModal.show())
            }
            onLogin() {
                this.createAccountModal.hide(),
                this.loginOptionsModalMobile.hide(),
                this.loginOptionsModal.hide(),
                this.account.profile.usernameSet || this.setNameModal.show(!0)
            }
            onLoadoutUpdated(e) {
                this.updateUserIcon()
            }
            onItemsUpdated(e) {
                let t = 0
                    , i = 0;
                for (let a = 0; a < e.length; a++) {
                    const l = e[a];
                    l.status < le.ItemStatus.Confirmed && t++,
                    l.status < le.ItemStatus.Ackd && i++
                }
                e.filter(a => a.status < le.ItemStatus.Confirmed),
                e.filter(a => a.status < le.ItemStatus.Ackd);
                const r = t > 0 || i > 0;
                c("#loadout-alert-main").css({
                    display: r ? "block" : "none"
                })
            }
            waitOnLogin(e) {
                if (this.account.loggingIn && !this.account.loggedIn) {
                    const t = () => {
                        e(),
                        this.account.removeEventListener("requestsComplete", t)
                    }
                    ;
                    this.account.addEventListener("requestsComplete", t)
                } else
                    e()
            }
            showLoginMenu(e) {
                e = Object.assign({
                    modal: !1,
                    link: !1
                }, e);
                const t = e.modal ? this.createAccountModal : _.mobile ? this.loginOptionsModalMobile : this.loginOptionsModal;
                Zo(t.selector, e.link, this.account, this.localization),
                t.show()
            }
            updateUserIcon() {
                const e = X.getSvgFromGameType(this.account.loadout.player_icon) || "img/gui/player-gui.svg";
                c(".account-details-user .account-avatar").css("background-image", `url(${e})`)
            }
            render() {
                const e = this.account.requestsInFlight > 0;
                c(".account-loading").css("opacity", e ? 1 : 0);
                let t = X.htmlEscape(this.account.profile.username || "");
                this.account.loggedIn || (t = this.account.loggingIn ? `${this.localization.translate("index-logging-in")}...` : this.localization.translate("index-log-in-desc")),
                c("#account-player-name").html(t),
                c("#account-player-name").css("display", this.account.loggedIn ? "block" : "none"),
                c("#account-login").css("display", this.account.loggedIn ? "none" : "block"),
                this.updateUserIcon(),
                this.account.profile.usernameChangeTime <= 0 ? c(".btn-account-change-name").removeClass("btn-account-disabled") : c(".btn-account-change-name").addClass("btn-account-disabled")
            }
        }
        function Ai(u, e) {
            const t = {
                join_full: e.translate("index-team-is-full"),
                join_not_found: e.translate("index-failed-joining-team"),
                create_failed: e.translate("index-failed-creating-team"),
                join_failed: e.translate("index-failed-joining-team"),
                join_game_failed: e.translate("index-failed-joining-game"),
                lost_conn: e.translate("index-lost-connection"),
                find_game_error: e.translate("index-failed-finding-game"),
                find_game_full: e.translate("index-failed-finding-game"),
                find_game_invalid_protocol: e.translate("index-invalid-protocol"),
                kicked: e.translate("index-team-kicked")
            };
            return t[u] || t.lost_conn
        }
        class Qo {
            constructor(e, t, i, r, a, l, s) {
                this.config = e,
                this.pingTest = t,
                this.siteInfo = i,
                this.localization = r,
                this.audioManager = a,
                this.joinGameCb = l,
                this.leaveCb = s,
                this.serverSelect.change( () => {
                    const m = this.serverSelect.find(":selected").val();
                    this.pingTest.start([m]),
                    this.setRoomProperty("region", m)
                }
                ),
                this.queueMode1.click( () => {
                    this.setRoomProperty("gameModeIdx", 1)
                }
                ),
                this.queueMode2.click( () => {
                    this.setRoomProperty("gameModeIdx", 2)
                }
                ),
                this.fillAuto.click( () => {
                    this.setRoomProperty("autoFill", !0)
                }
                ),
                this.fillNone.click( () => {
                    this.setRoomProperty("autoFill", !1)
                }
                ),
                this.playBtn.on("click", () => {
                    this.config.get("ENV") === "CrazyGames" ? rt( () => {
                        this.tryStartGame()
                    }
                    ) : this.config.get("ENV") === "POKI" ? st( () => {
                        this.tryStartGame()
                    }
                    ) : this.config.get("ENV") === "GameMonetize" ? at( () => {
                        this.tryStartGame()
                    }
                    ) : this.tryStartGame()
                }
                ),
                c("#team-copy-url, #team-desc-text").click(m => {
                    const d = c("<div/>", {
                        class: "copy-toast",
                        html: "Copied!"
                    });
                    c("#start-menu-wrapper").append(d),
                    d.css({
                        left: m.pageX - parseInt(d.css("width")) / 2,
                        top: c("#team-copy-url").offset().top
                    }),
                    d.animate({
                        top: "-=20",
                        opacity: 1
                    }, {
                        queue: !1,
                        duration: 300,
                        complete: function() {
                            c(this).fadeOut(250, function() {
                                c(this).remove()
                            })
                        }
                    });
                    let h = c("#team-url").html();
                    window !== window.top && (h = this.roomData.roomUrl.substring(1)),
                    X.copyTextToClipboard(h)
                }
                ),
                window !== window.top && c("#team-desc-text").hide(),
                _.mobile || (this.hideUrl = !1,
                c("#team-hide-url").click(m => {
                    const d = m.currentTarget;
                    this.hideUrl = !this.hideUrl,
                    c("#team-desc-text, #team-code-text").css({
                        opacity: this.hideUrl ? 0 : 1
                    }),
                    c(d).css({
                        "background-image": this.hideUrl ? "url(../img/gui/hide.svg)" : "url(../img/gui/eye.svg)"
                    })
                }
                ))
            }
            playBtn = c("#btn-start-team");
            serverWarning = c("#server-warning");
            teamOptions = c("#btn-team-queue-mode-1, #btn-team-queue-mode-2, #btn-team-fill-auto, #btn-team-fill-none");
            serverSelect = c("#team-server-select");
            queueMode1 = c("#btn-team-queue-mode-1");
            queueMode2 = c("#btn-team-queue-mode-2");
            fillAuto = c("#btn-team-fill-auto");
            fillNone = c("#btn-team-fill-none");
            active = !1;
            joined = !1;
            create = !1;
            joiningGame = !1;
            ws = null;
            keepAliveTimeout = 0;
            playerData = {};
            roomData = {};
            players = [];
            prevPlayerCount = 0;
            localPlayerId = 0;
            isLeader = !0;
            editingName = !1;
            displayedInvalidProtocolModal = !1;
            hideUrl;
            getPlayerById(e) {
                return this.players.find(t => t.playerId == e)
            }
            update(e) {
                this.joined && (this.keepAliveTimeout -= e,
                this.keepAliveTimeout < 0 && (this.keepAliveTimeout = 45,
                this.sendMessage("keepAlive", {})))
            }
            connect(e, t) {
                if (!this.active || t !== this.roomData.roomUrl) {
                    const i = Xe.resolveRoomHost()
                        , r = `w${window.location.protocol === "https:" ? "ss" : "s"}://${i}/team_v2`;
                    this.active = !0,
                    this.joined = !1,
                    this.create = e,
                    this.joiningGame = !1,
                    this.editingName = !1,
                    this.playerData = {
                        name: this.config.get("playerName")
                    },
                    this.roomData = {
                        roomUrl: t,
                        region: this.config.get("region"),
                        gameModeIdx: this.config.get("gameModeIdx"),
                        autoFill: this.config.get("teamAutoFill"),
                        findingGame: !1,
                        lastError: ""
                    },
                    this.displayedInvalidProtocolModal = !1,
                    this.refreshUi(),
                    this.ws && (this.ws.onclose = function() {}
                    ,
                    this.ws.close(),
                    this.ws = null);
                    try {
                        this.ws = new WebSocket(r),
                        this.ws.onerror = a => {
                            this.ws?.close()
                        }
                        ,
                        this.ws.onclose = () => {
                            let a = "";
                            this.joiningGame || (a = this.joined ? "lost_conn" : this.create ? "create_failed" : "join_failed"),
                            this.leave(a)
                        }
                        ,
                        this.ws.onopen = () => {
                            this.create ? this.siteInfo.info.captchaEnabled ? window.turnstile.render("#start-turnstile-container", {
                                sitekey: "0x4AAAAAAAxkDXmFwymMPT0B",
                                appearance: "interaction-only",
                                callback: a => {
                                    this.sendMessage("create", {
                                        roomData: this.roomData,
                                        playerData: this.playerData,
                                        token: a
                                    }),
                                    window.turnstile.remove("#start-turnstile-container")
                                }
                            }) : this.sendMessage("create", {
                                roomData: this.roomData,
                                playerData: this.playerData
                            }) : this.sendMessage("join", {
                                roomUrl: this.roomData.roomUrl,
                                playerData: this.playerData
                            })
                        }
                        ,
                        this.ws.onmessage = a => {
                            if (this.active) {
                                const l = JSON.parse(a.data);
                                this.onMessage(l.type, l.data)
                            }
                        }
                    } catch {
                        this.leave(this.create ? "create_failed" : "join_failed")
                    }
                }
            }
            leave(e="") {
                if (this.active) {
                    this.ws?.close(),
                    this.ws = null,
                    this.active = !1,
                    this.joined = !1,
                    this.joiningGame = !1,
                    this.refreshUi(),
                    this.config.set("gameModeIdx", this.roomData.gameModeIdx),
                    this.config.set("teamAutoFill", this.roomData.autoFill),
                    this.isLeader && this.config.set("region", this.roomData.region);
                    let t = "";
                    e && e != "" && (t = Ai(e, this.localization)),
                    this.leaveCb(t),
                    this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.game.hideInviteButton()
                }
            }
            onGameComplete() {
                this.active && (this.joiningGame = !1,
                this.sendMessage("gameComplete"))
            }
            onMessage(e, t) {
                switch (e) {
                case "state":
                    {
                        let i = t;
                        this.joined = !0;
                        const r = this.roomData;
                        this.roomData = i.room,
                        this.players = i.players,
                        this.localPlayerId = i.localPlayerId,
                        this.isLeader = this.getPlayerById(this.localPlayerId).isLeader,
                        this.isLeader && (this.roomData.region = r.region,
                        this.roomData.autoFill = r.autoFill),
                        this.refreshUi(),
                        this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.game.showInviteButton({
                            roomID: i.room.roomUrl.replace("#", "")
                        });
                        break
                    }
                case "joinGame":
                    this.joiningGame = !0,
                    this.joinGameCb(t);
                    break;
                case "keepAlive":
                    break;
                case "kicked":
                    this.leave("kicked");
                    break;
                case "error":
                    this.leave(t.type)
                }
            }
            sendMessage(e, t) {
                if (this.ws)
                    if (this.ws.readyState === this.ws.OPEN) {
                        const i = JSON.stringify({
                            type: e,
                            data: t
                        });
                        this.ws.send(i)
                    } else
                        this.ws.close()
            }
            setRoomProperty(e, t) {
                this.isLeader && this.roomData[e] != t && (this.roomData[e] = t,
                this.sendMessage("setRoomProps", this.roomData))
            }
            tryStartGame() {
                if (this.isLeader && !this.roomData.findingGame) {
                    const e = R.protocolVersion;
                    let t = this.roomData.region;
                    const i = X.getParameterByName("region");
                    i !== void 0 && i.length > 0 && (t = i);
                    let r = this.pingTest.getZones(t);
                    const a = X.getParameterByName("zone");
                    a !== void 0 && a.length > 0 && (r = [a]);
                    const l = {
                        version: e,
                        region: t,
                        zones: r
                    };
                    this.sendMessage("playGame", l),
                    this.roomData.findingGame = !0,
                    this.refreshUi()
                }
            }
            refreshUi() {
                const e = function(r, a, l) {
                    r.removeClass("btn-darken btn-disabled btn-opaque btn-hollow-selected"),
                    l ? r.addClass("btn-darken") : (r.addClass("btn-disabled"),
                    a || r.addClass("btn-opaque")),
                    a && r.addClass("btn-hollow-selected"),
                    r.prop("disabled", !l)
                };
                c("#team-menu").css("display", this.active ? "block" : "none"),
                c("#start-menu").css("display", this.active ? "none" : "block"),
                c("#right-column").css("display", this.active ? "none" : "block"),
                c("#social-share-block").css("display", this.active ? "none" : "block");
                const t = this.roomData.lastError != ""
                    , i = Ai(this.roomData.lastError, this.localization);
                if (this.serverWarning.css("opacity", t ? 1 : 0),
                this.serverWarning.html(i),
                this.roomData.lastError == "find_game_invalid_protocol" && !this.displayedInvalidProtocolModal && (c("#modal-refresh").fadeIn(200),
                this.displayedInvalidProtocolModal = !0),
                this.active && (c("#team-menu-joining-text").css("display", this.create ? "none" : "block"),
                c("#team-menu-creating-text").css("display", this.create ? "block" : "none"),
                c("#team-menu-connecting").css("display", this.joined ? "none" : "block"),
                c("#team-menu-contents").css("display", this.joined ? "block" : "none"),
                c("#btn-team-leave").css("display", this.joined ? "block" : "none")),
                this.joined) {
                    const r = this.siteInfo.info.pops || {}
                        , a = Object.keys(r);
                    for (let f = 0; f < a.length; f++) {
                        const S = a[f]
                            , x = r[S].playerCount
                            , y = this.localization.translate("index-players")
                            , P = c("#team-server-opts").children(`option[value="${S}"]`);
                        P.html(`${P.attr("data-label")} [${x} ${y}]`)
                    }
                    if (this.serverSelect.find("option").each( (f, S) => {
                        S.selected = S.value == this.roomData.region
                    }
                    ),
                    e(this.queueMode1, this.roomData.gameModeIdx == 1, this.isLeader && this.roomData.enabledGameModeIdxs.includes(1)),
                    e(this.queueMode2, this.roomData.gameModeIdx == 2, this.isLeader && this.roomData.enabledGameModeIdxs.includes(2)),
                    e(this.fillAuto, this.roomData.autoFill, this.isLeader),
                    e(this.fillNone, !this.roomData.autoFill, this.isLeader),
                    this.serverSelect.prop("disabled", !this.isLeader),
                    this.roomData.roomUrl) {
                        const f = this.roomData.roomUrl.substring(1);
                        if (this.config.get("ENV") === "CrazyGames") {
                            const S = window.CrazyGames.SDK.game.inviteLink({
                                roomID: f
                            });
                            c("#team-url").html(S)
                        } else {
                            const S = `${window.location.href.replace(window.location.hash, "")}${this.roomData.roomUrl}`;
                            c("#team-url").html(S),
                            window.history && window.history.replaceState("", "", this.roomData.roomUrl)
                        }
                        c("#team-code").html(f)
                    }
                    this.playBtn.html(this.roomData.findingGame || this.joiningGame ? '<div class="ui-spinner"></div>' : this.playBtn.attr("data-label"));
                    const l = this.siteInfo.getGameModeStyles();
                    for (let f = 0; f < l.length; f++)
                        this.playBtn.removeClass(l[f].buttonCss);
                    const s = l[this.roomData.gameModeIdx];
                    s ? (this.playBtn.addClass("btn-custom-mode-no-indent"),
                    this.playBtn.addClass(s.buttonCss),
                    this.playBtn.css({
                        "background-image": `url(${s.icon})`
                    })) : this.playBtn.css({
                        "background-image": ""
                    });
                    let m = !1;
                    for (let f = 0; f < this.players.length; f++)
                        m = m || this.players[f].inGame;
                    const d = c("#msg-wait-reason");
                    if (this.isLeader) {
                        d.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`);
                        const f = m && !this.joiningGame;
                        d.css("display", f ? "block" : "none"),
                        this.playBtn.css("display", f ? "none" : "block")
                    } else
                        this.roomData.findingGame || this.joiningGame ? d.html(`<div class="ui-spinner" style="margin-right:16px"></div>${this.localization.translate("index-joining-game")}<span> ...</span>`) : m ? d.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`) : d.html(`${this.localization.translate("index-waiting-for-leader")}<span> ...</span>`),
                        d.css("display", "block"),
                        this.playBtn.css("display", "none");
                    const h = c("#team-menu-member-list");
                    h.empty();
                    for (let f = 0; f < this.roomData.maxPlayers; f++) {
                        let S = {
                            name: "",
                            playerId: 0,
                            isLeader: !1,
                            inGame: !1,
                            self: !1
                        };
                        if (f < this.players.length) {
                            const k = this.players[f];
                            S = {
                                name: k.name,
                                playerId: k.playerId,
                                isLeader: k.isLeader,
                                inGame: k.inGame,
                                self: k.playerId == this.localPlayerId
                            }
                        }
                        const x = c("<div/>", {
                            class: "team-menu-member"
                        });
                        let y = "";
                        S.isLeader ? y = " icon-leader" : this.isLeader && S.playerId != 0 && (y = " icon-kick"),
                        x.append(c("<div/>", {
                            class: `icon${y}`,
                            "data-playerid": S.playerId
                        }));
                        let P = null
                            , C = null;
                        if (this.editingName && S.self) {
                            P = c("<input/>", {
                                type: "text",
                                tabindex: 0,
                                class: "name menu-option name-text name-self-input",
                                maxLength: We.PlayerNameMaxLen
                            }),
                            P.val(S.name);
                            const k = () => {
                                const M = X.sanitizeNameInput(P?.val());
                                S.name = M,
                                this.config.set("playerName", M),
                                this.sendMessage("changeName", {
                                    name: M
                                }),
                                this.editingName = !1,
                                this.refreshUi()
                            }
                                , b = () => {
                                this.editingName = !1,
                                this.refreshUi()
                            }
                            ;
                            P.keypress(M => {
                                if (M.which === 13)
                                    return k(),
                                    !1
                            }
                            ),
                            P.on("blur", b),
                            x.append(P),
                            C = c("<div/>", {
                                class: "icon icon-submit-name-change"
                            }),
                            C.on("click", k),
                            C.on("mousedown", M => {
                                M.preventDefault(),
                                M.stopPropagation()
                            }
                            )
                        } else {
                            let k = "name-text";
                            S.self && (k += " name-self"),
                            S.inGame && (k += " name-in-game");
                            const b = c("<div/>", {
                                class: `name menu-option ${k}`,
                                html: X.htmlEscape(S.name)
                            });
                            S.self && b.on("click", () => {
                                this.editingName = !0,
                                this.refreshUi()
                            }
                            ),
                            x.append(b)
                        }
                        C ? x.append(C) : x.append(c("<div/>", {
                            class: `icon ${S.inGame ? "icon-in-game" : ""}`
                        })),
                        h.append(x),
                        P?.focus()
                    }
                    c(".icon-kick", h).click(f => {
                        const S = Number(c(f.currentTarget).attr("data-playerid"));
                        this.sendMessage("kick", {
                            playerId: S
                        })
                    }
                    );
                    const p = this.players.find(f => f.playerId == this.localPlayerId)
                        , w = p && !p.inGame;
                    !document.hasFocus() && this.prevPlayerCount < this.players.length && this.players.length > 1 && w && this.audioManager.playSound("notification_join_01", {
                        channel: "ui"
                    }),
                    this.prevPlayerCount = this.players.length
                }
            }
        }
        class Yo {
            nameInput = c("#player-name-input-solo");
            serverSelect = c("#server-select-main");
            playMode0Btn = c("#btn-start-mode-0");
            playMode1Btn = c("#btn-start-mode-1");
            playMode2Btn = c("#btn-start-mode-2");
            muteBtns = c(".btn-sound-toggle");
            aimLineBtn = c("#btn-game-aim-line");
            masterSliders = c(".sl-master-volume");
            soundSliders = c(".sl-sound-volume");
            musicSliders = c(".sl-music-volume");
            serverWarning = c("#server-warning");
            languageSelect = c(".language-select");
            startMenuWrapper = c("#start-menu-wrapper");
            gameAreaWrapper = c("#game-area-wrapper");
            playButtons = c(".play-button-container");
            playLoading = c(".play-loading-outer");
            errorModal = new de(c("#modal-notification"));
            refreshModal = new de(c("#modal-refresh"));
            config = new oa;
            localization = new Go;
            account;
            loadoutMenu;
            pass;
            profileUi;
            pingTest = new Ls;
            audioManager = new aa;
            ambience = new Kr;
            siteInfo;
            teamMenu;
            pixi = null;
            resourceManager = null;
            input = null;
            inputBinds = null;
            inputBindUi = null;
            game = null;
            loadoutDisplay = null;
            domContentLoaded = !1;
            configLoaded = !1;
            initialized = !1;
            active = !1;
            sessionId = X.random64();
            contextListener = function(e) {
                e.preventDefault()
            }
            ;
            errorMessage = "";
            quickPlayPendingModeIdx = -1;
            findGameAttempts = 0;
            findGameTime = 0;
            pauseTime = 0;
            wasPlayingVideo = !1;
            checkedPingTest = !1;
            hasFocus = !0;
            newsDisplayed = !0;
            respawns = [];
            constructor() {
                this.account = new Zr(this.config),
                this.loadoutMenu = new po(this.account,this.localization),
                this.pass = new Xo(this.account,this.loadoutMenu,this.localization),
                this.profileUi = new Ko(this.account,this.localization,this.loadoutMenu,this.errorModal),
                this.siteInfo = new no(this.config,this.localization),
                this.teamMenu = new Qo(this.config,this.pingTest,this.siteInfo,this.localization,this.audioManager,this.onTeamMenuJoinGame.bind(this),this.onTeamMenuLeave.bind(this));
                const e = () => {
                    this.config.load( () => {
                        this.configLoaded = !0,
                        this.tryLoad()
                    }
                    )
                }
                ;
                this.loadBrowserDeps(e)
            }
            loadBrowserDeps(e) {
                e()
            }
            tryLoad() {
                if (this.domContentLoaded && this.configLoaded && !this.initialized) {
                    this.initialized = !0,
                    _.mobile && zt.applyMobileBrowserStyling(_.tablet);
                    const e = this.config.get("language") || this.localization.detectLocale();
                    this.config.set("language", e),
                    this.localization.setLocale(e),
                    this.localization.populateLanguageSelect(),
                    this.startPingTest(),
                    this.siteInfo.load(),
                    this.localization.localizeIndex(),
                    this.account.init(),
                    this.nameInput.maxLength = We.PlayerNameMaxLen,
                    this.playMode0Btn.on("click", () => {
                        this.config.get("ENV") === "CrazyGames" ? rt( () => {
                            this.tryQuickStartGame(0)
                        }
                        ) : this.config.get("ENV") === "POKI" && this.respawns.length > 0 ? st( () => {
                            this.tryQuickStartGame(0)
                        }
                        ) : this.config.get("ENV") === "GameMonetize" ? at( () => {
                            this.tryQuickStartGame(0)
                        }
                        ) : this.tryQuickStartGame(0)
                    }
                    ),
                    this.playMode1Btn.on("click", () => {
                        this.config.get("ENV") === "CrazyGames" ? rt( () => {
                            this.tryQuickStartGame(1)
                        }
                        ) : this.config.get("ENV") === "POKI" && this.respawns.length > 0 ? st( () => {
                            this.tryQuickStartGame(1)
                        }
                        ) : this.config.get("ENV") === "GameMonetize" ? at( () => {
                            this.tryQuickStartGame(1)
                        }
                        ) : this.tryQuickStartGame(1)
                    }
                    ),
                    this.playMode2Btn.on("click", () => {
                        this.config.get("ENV") === "CrazyGames" ? rt( () => {
                            this.tryQuickStartGame(2)
                        }
                        ) : this.config.get("ENV") === "POKI" && this.respawns.length > 0 ? st( () => {
                            this.tryQuickStartGame(2)
                        }
                        ) : this.config.get("ENV") === "GameMonetize" && this.respawns.length > 0 ? at( () => {
                            this.tryQuickStartGame(2)
                        }
                        ) : this.tryQuickStartGame(2)
                    }
                    ),
                    this.serverSelect.change( () => {
                        const p = this.serverSelect.find(":selected").val();
                        this.config.set("region", p)
                    }
                    ),
                    this.nameInput.on("blur", p => {
                        this.setConfigFromDOM()
                    }
                    ),
                    this.muteBtns.on("click", p => {
                        this.config.set("muteAudio", !this.config.get("muteAudio"))
                    }
                    ),
                    this.muteBtns.on("mousedown", p => {
                        p.stopPropagation()
                    }
                    ),
                    c(this.masterSliders).on("mousedown", p => {
                        p.stopPropagation()
                    }
                    ),
                    c(this.soundSliders).on("mousedown", p => {
                        p.stopPropagation()
                    }
                    ),
                    c(this.musicSliders).on("mousedown", p => {
                        p.stopPropagation()
                    }
                    ),
                    this.masterSliders.on("input", p => {
                        const w = Number(c(p.target).val()) / 100;
                        this.audioManager.setMasterVolume(w),
                        this.config.set("masterVolume", w)
                    }
                    ),
                    this.soundSliders.on("input", p => {
                        const w = Number(c(p.target).val()) / 100;
                        this.audioManager.setSoundVolume(w),
                        this.config.set("soundVolume", w)
                    }
                    ),
                    this.musicSliders.on("input", p => {
                        const w = Number(c(p.target).val()) / 100;
                        this.audioManager.setMusicVolume(w),
                        this.config.set("musicVolume", w)
                    }
                    ),
                    c(".modal-settings-item").children("input").each( (p, w) => {
                        const f = c(w);
                        f.prop("checked", this.config.get(f.prop("id")))
                    }
                    ),
                    c(".modal-settings-item > input:checkbox").change(p => {
                        const w = c(p.target);
                        this.config.set(w.prop("id"), w.is(":checked"))
                    }
                    ),
                    c(".btn-fullscreen-toggle").on("click", () => {
                        X.toggleFullScreen()
                    }
                    ),
                    this.languageSelect.on("change", p => {
                        const w = p.target.value;
                        w && this.config.set("language", w)
                    }
                    ),
                    c("#btn-create-team").on("click", () => {
                        this.tryJoinTeam(!0)
                    }
                    ),
                    c("#btn-team-mobile-link-join").on("click", () => {
                        let p = c("#team-link-input").val()?.trim();
                        const w = p.indexOf("#");
                        w >= 0 && (p = p.slice(w + 1)),
                        p.length > 0 ? (c("#team-mobile-link").css("display", "none"),
                        this.tryJoinTeam(!1, p)) : (c("#team-mobile-link-desc").css("display", "none"),
                        c("#team-mobile-link-warning").css("display", "none").fadeIn(100))
                    }
                    ),
                    c("#btn-team-leave").on("click", () => {
                        window.history && window.history.replaceState("", "", "/"),
                        c("#news-block").css("display", "block"),
                        this.game?.free(),
                        this.teamMenu.leave()
                    }
                    );
                    const t = c("#news-current").data("date")
                        , i = new Date(t).getTime();
                    c(".right-column-toggle").on("click", () => {
                        this.newsDisplayed ? (c("#news-wrapper").fadeOut(250),
                        c("#pass-wrapper").fadeIn(250)) : (this.config.set("lastNewsTimestamp", i),
                        c(".news-toggle").find(".account-alert").css("display", "none"),
                        c("#news-wrapper").fadeIn(250),
                        c("#pass-wrapper").fadeOut(250)),
                        this.newsDisplayed = !this.newsDisplayed
                    }
                    );
                    const r = this.config.get("lastNewsTimestamp");
                    i > r && c(".news-toggle").find(".account-alert").css("display", "block"),
                    this.setDOMFromConfig(),
                    this.setAppActive(!0);
                    const a = document.querySelector("#cvs")
                        , l = window.devicePixelRatio > 1 ? 2 : 1;
                    _.os == "ios" && (gr.PRECISION_FRAGMENT = wr.HIGH);
                    const s = p => new Sr({
                        width: window.innerWidth,
                        height: window.innerHeight,
                        view: a,
                        antialias: !1,
                        resolution: l,
                        hello: !0,
                        forceCanvas: p
                    });
                    let m = null;
                    try {
                        m = s(!1)
                    } catch {
                        m = s(!0)
                    }
                    this.pixi = m,
                    this.pixi.renderer.events.destroy(),
                    this.pixi.ticker.add(this.update, this),
                    this.pixi.renderer.background.color = 7378501,
                    this.resourceManager = new mo(this.pixi.renderer,this.audioManager,this.config),
                    this.resourceManager.loadMapAssets("main"),
                    this.input = new Ia(document.getElementById("game-touch-area")),
                    this.inputBinds = new Ps(this.input,this.config),
                    this.inputBindUi = new Ds(this.input,this.inputBinds);
                    const d = () => {
                        this.loadoutDisplay.free(),
                        this.game.init(),
                        this.onResize(),
                        this.findGameAttempts = 0,
                        this.ambience.onGameStart()
                    }
                        , h = p => {
                        this.game._0x0 && this.pass.scheduleUpdatePass(this.game._0x1),
                        this.game.free(),
                        this.errorMessage = this.localization.translate(p || ""),
                        this.teamMenu.onGameComplete(),
                        this.ambience.onGameComplete(this.audioManager),
                        this.setAppActive(!0),
                        this.setPlayLockout(!1),
                        p == "index-invalid-protocol" && this.showInvalidProtocolModal(),
                        this.config.get("ENV") === "CrazyGames" ? window.CrazyGames.SDK.game.gameplayStop() : this.config.get("ENV") === "POKI" && window.PokiSDK.gameplayStop()
                    }
                    ;
                    this.game = new Ts(this.pixi,this.audioManager,this.localization,this.config,this.input,this.inputBinds,this.inputBindUi,this.ambience,this.resourceManager,this.respawns,d,h),
                    this.loadoutDisplay = new Ho(this.pixi,this.audioManager,this.config,this.inputBinds,this.account),
                    this.loadoutMenu.loadoutDisplay = this.loadoutDisplay,
                    this.onResize(),
                    this.tryJoinTeam(this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.game.isInstantJoin),
                    zt.setupModals(this.inputBinds, this.inputBindUi),
                    this.onConfigModified(),
                    this.config.addModifiedListener(this.onConfigModified.bind(this)),
                    Ms()
                }
            }
            onUnload() {
                this.teamMenu.leave()
            }
            onResize() {
                _.onResize(),
                zt.onResize(),
                this.loadoutMenu.onResize(),
                this.pixi?.renderer.resize(_.screenWidth, _.screenHeight),
                this.game?.initialized && this.game.resize(),
                this.loadoutDisplay?.initialized && this.loadoutDisplay.resize(),
                this.refreshUi()
            }
            startPingTest() {
                const e = this.config.get("regionSelected") ? [this.config.get("region")] : this.pingTest.getRegionList();
                this.pingTest.start(e)
            }
            setAppActive(e) {
                this.active = e,
                this.quickPlayPendingModeIdx = -1,
                this.refreshUi(),
                e && this.errorModal.hide()
            }
            setPlayLockout(e) {
                const t = e ? 0 : 1e3;
                this.playButtons.stop().delay(t).animate({
                    opacity: e ? .5 : 1
                }, 250),
                this.playLoading.stop().delay(t).animate({
                    opacity: e ? 1 : 0
                }, {
                    duration: 250,
                    start: () => {
                        this.playLoading.css({
                            "pointer-events": e ? "initial" : "none"
                        })
                    }
                })
            }
            onTeamMenuJoinGame(e) {
                this.waitOnAccount( () => {
                    this.joinGame(e)
                }
                )
            }
            onTeamMenuLeave(e="") {
                e && e != "" && window.history && window.history.replaceState("", "", "/"),
                this.errorMessage = e,
                this.setDOMFromConfig(),
                this.refreshUi()
            }
            setConfigFromDOM() {
                const e = X.sanitizeNameInput(this.nameInput.val());
                this.config.set("playerName", e);
                const t = this.serverSelect.find(":selected").val();
                this.config.set("region", t)
            }
            async setDOMFromConfig() {
                if (!this.config.get("playerName") && this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.user.isUserAccountAvailable) {
                    const e = await window.CrazyGames.SDK.user.getUser();
                    if (e) {
                        const t = e.username;
                        this.config.set("playerName", t)
                    }
                }
                this.nameInput.val(this.config.get("playerName")),
                this.serverSelect.find("option").each( (e, t) => {
                    t.selected = t.value == this.config.get("region")
                }
                ),
                this.languageSelect.val(this.config.get("language"))
            }
            onConfigModified(e) {
                const t = this.config.get("muteAudio");
                t != this.audioManager.mute && (this.muteBtns.removeClass(t ? "audio-on-icon" : "audio-off-icon"),
                this.muteBtns.addClass(t ? "audio-off-icon" : "audio-on-icon"),
                this.audioManager.setMute(t));
                const i = this.config.get("masterVolume");
                this.masterSliders.val(i * 100),
                this.audioManager.setMasterVolume(i);
                const r = this.config.get("soundVolume");
                this.soundSliders.val(r * 100),
                this.audioManager.setSoundVolume(r);
                const a = this.config.get("musicVolume");
                if (this.musicSliders.val(a * 100),
                this.audioManager.setMusicVolume(a),
                e == "language") {
                    const l = this.config.get("language");
                    this.localization.setLocale(l)
                }
                e == "region" && (this.config.set("regionSelected", !0),
                this.startPingTest()),
                e == "highResTex" && location.reload()
            }
            refreshUi() {
                this.startMenuWrapper.css("display", this.active ? "flex" : "none"),
                this.gameAreaWrapper.css({
                    display: this.active ? "none" : "block",
                    opacity: this.active ? 0 : 1
                }),
                this.active ? (c("body").removeClass("user-select-none"),
                document.removeEventListener("contextmenu", this.contextListener)) : (c("body").addClass("user-select-none"),
                c("#start-main").stop(!0),
                document.addEventListener("contextmenu", this.contextListener)),
                c("#ad-block-left").css("display", !_.isLandscape && this.teamMenu.active ? "none" : "block");
                const e = this.active && this.errorMessage != "";
                this.serverWarning.css({
                    display: "block",
                    opacity: e ? 1 : 0
                }),
                this.serverWarning.html(this.errorMessage);
                const t = (i, r) => {
                    i.html(this.quickPlayPendingModeIdx === r ? '<div class="ui-spinner"></div>' : this.localization.translate(i.data("l10n")))
                }
                ;
                t(this.playMode0Btn, 0),
                t(this.playMode1Btn, 1),
                t(this.playMode2Btn, 2)
            }
            waitOnAccount(e) {
                if (this.account.requestsInFlight == 0)
                    e();
                else {
                    const t = setTimeout( () => {
                        i()
                    }
                    , 2500)
                        , i = () => {
                        e(),
                        clearTimeout(t),
                        this.account.removeEventListener("requestsComplete", i)
                    }
                    ;
                    this.account.addEventListener("requestsComplete", i)
                }
            }
            tryJoinTeam(e, t) {
                if (this.active && this.quickPlayPendingModeIdx === -1) {
                    let i = t || window.location.hash.slice(1);
                    if (this.config.get("ENV") === "CrazyGames") {
                        const r = window.CrazyGames.SDK.game.getInviteParam("roomID");
                        r && (i = r,
                        e = !1)
                    }
                    if (e || i != "")
                        return this.setConfigFromDOM(),
                        this.teamMenu.connect(e, i),
                        this.refreshUi(),
                        !0
                }
                return !1
            }
            tryQuickStartGame(e) {
                if (this.quickPlayPendingModeIdx === -1) {
                    this.errorMessage = "",
                    this.quickPlayPendingModeIdx = e,
                    this.setConfigFromDOM(),
                    this.refreshUi();
                    let t = 0;
                    this.findGameAttempts > 0 && Date.now() - this.findGameTime < 3e4 ? t = Math.min(this.findGameAttempts * 2.5 * 1e3, 7500) : this.findGameAttempts = 0,
                    this.findGameTime = Date.now(),
                    this.findGameAttempts++;
                    const i = R.protocolVersion;
                    let r = this.config.get("region");
                    const a = X.getParameterByName("region");
                    a !== void 0 && a.length > 0 && (r = a);
                    let l = this.pingTest.getZones(r);
                    const s = X.getParameterByName("zone");
                    s !== void 0 && s.length > 0 && (l = [s]);
                    const m = {
                        version: i,
                        region: r,
                        zones: l,
                        playerCount: 1,
                        autoFill: !0,
                        gameModeIdx: e
                    }
                        , d = () => {
                        this.waitOnAccount( () => {
                            this.findGame(m, (h, p) => {
                                if (h) {
                                    this.onJoinGameError(h);
                                    return
                                }
                                this.joinGame(p)
                            }
                            )
                        }
                        )
                    }
                    ;
                    t == 0 ? d() : setTimeout( () => {
                        d()
                    }
                    , t)
                }
            }
            findGame(e, t) {
                const i = (r, a) => {
                    if (r >= a) {
                        t("full");
                        return
                    }
                    const l = function() {
                        setTimeout( () => {
                            i(r + 1, a)
                        }
                        , 500)
                    };
                    function s(m) {
                        c.ajax({
                            type: "POST",
                            url: Xe.resolveUrl("/api/find_game"),
                            data: JSON.stringify({
                                ...e,
                                token: m
                            }),
                            contentType: "application/json; charset=utf-8",
                            timeout: 1e4,
                            success: function(d) {
                                if (d?.err && d.err != "full") {
                                    t(d.err);
                                    return
                                }
                                const h = d?.res ? d.res[0] : null;
                                h?.hosts && h.addrs ? t(null, h) : l()
                            },
                            error: function(d) {
                                l()
                            }
                        })
                    }
                    this.siteInfo.info.captchaEnabled ? window.turnstile.render("#start-turnstile-container", {
                        sitekey: "0x4AAAAAAAxkDXmFwymMPT0B",
                        appearance: "interaction-only",
                        callback: m => {
                            s(m),
                            window.turnstile.remove("#start-turnstile-container")
                        }
                    }) : s("")
                }
                ;
                i(0, 2)
            }
            joinGame(e) {
                if (!this.game) {
                    setTimeout( () => {
                        this.joinGame(e)
                    }
                    , 250);
                    return
                }
                const t = e.hosts || []
                    , i = [];
                for (let a = 0; a < t.length; a++)
                    i.push(`ws${e.useHttps ? "s" : ""}://${t[a]}/play?gameId=${e.gameId}`);
                const r = (a, l) => {
                    const s = a.shift();
                    if (!s) {
                        this.onJoinGameError("join_game_failed");
                        return
                    }
                    const m = function() {
                        r(a, l)
                    };
                    this.game.tryJoinGame(s, l.data, this.account.loadoutPriv, this.account.questPriv, m)
                }
                ;
                r(i, e)
            }
            onJoinGameError(e) {
                const t = {
                    full: this.localization.translate("index-failed-finding-game"),
                    invalid_protocol: this.localization.translate("index-invalid-protocol"),
                    join_game_failed: this.localization.translate("index-failed-joining-game")
                };
                e == "invalid_protocol" && this.showInvalidProtocolModal(),
                this.errorMessage = t[e] || t.full,
                this.quickPlayPendingModeIdx = -1,
                this.teamMenu.leave("join_game_failed"),
                this.refreshUi()
            }
            showInvalidProtocolModal() {
                this.refreshModal.show(!0)
            }
            update() {
                const e = z.clamp(this.pixi.ticker.elapsedMS / 1e3, .001, .125);
                if (this.pingTest.update(e),
                !this.checkedPingTest && this.pingTest.isComplete()) {
                    if (!this.config.get("regionSelected")) {
                        const t = this.pingTest.getRegion();
                        t && (this.config.set("region", t),
                        this.setDOMFromConfig())
                    }
                    this.checkedPingTest = !0
                }
                this.resourceManager.update(e),
                this.audioManager.update(e),
                this.ambience.update(e, this.audioManager, !this.active),
                this.teamMenu.update(e),
                this.game?.initialized && this.game._0x2 && (this.active && (this.setAppActive(!1),
                this.setPlayLockout(!0)),
                this.game.update(e)),
                this.active && this.loadoutDisplay && this.game && !this.game.initialized && (this.loadoutMenu.active ? (this.loadoutDisplay.initialized || this.loadoutDisplay.init(),
                this.loadoutDisplay.show(),
                this.loadoutDisplay.update(e, this.hasFocus)) : this.loadoutDisplay.hide()),
                !this.active && this.loadoutMenu.active && this.loadoutMenu.hide(),
                this.active && this.pass?.update(e),
                this.input.flush()
            }
        }
        const ze = new Yo;
        function cr() {
            ze.domContentLoaded = !0,
            ze.tryLoad()
        }
        document.addEventListener("DOMContentLoaded", cr);
        window.addEventListener("load", cr);
        window.addEventListener("unload", u => {
            ze.onUnload()
        }
        );
        window.location.hash == "#_=_" && (window.location.hash = "",
        history.pushState("", document.title, window.location.pathname));
        window.addEventListener("resize", () => {
            ze.onResize()
        }
        );
        window.addEventListener("orientationchange", () => {
            ze.onResize()
        }
        );
        window.addEventListener("hashchange", () => {
            ze.tryJoinTeam(!1)
        }
        );
        window.addEventListener("beforeunload", u => {
            if (ze.game?.warnPageReload()) {
                const e = "Do you want to reload the game?";
                return u.returnValue = e,
                e
            }
        }
        );
        window.addEventListener("onfocus", () => {
            ze.hasFocus = !0
        }
        );
        window.addEventListener("onblur", () => {
            ze.hasFocus = !1
        }
        );
        const Ei = [];
        window.onerror = function(u, e, t, i, r) {
            u = u || "undefined_error_msg";
            const a = r ? r.stack : ""
                , l = {
                msg: u,
                id: ze.sessionId,
                url: e,
                line: t,
                column: i,
                stacktrace: a,
                browser: navigator.userAgent,
                protocol: R.protocolVersion,
                clientGitVersion: "1c7ac974e00c50b060fbccdd976b89970e04921d",
                serverGitVersion: ze.siteInfo.info.gitRevision
            }
                , s = JSON.stringify(l);
            Ei.includes(s) || (Ei.push(s),
            console.error("windowOnError", s))
        }
        ;
        navigator.serviceWorker?.getRegistrations().then(u => {
            for (const e of u)
                e.unregister()
        }
        );
        class GameMod {
            constructor() {
                const settings = JSON.parse(localStorage.getItem("gameSettings") || '{}');
                this.lastFrameTime = performance.now();
                this.frameCount = 0;
                this.fps = 0;
                this.kills = 0;
                this.setAnimationFrameCallback();
                this.isStartMapHide = settings["hide-mini-map"] !== undefined ? settings["hide-mini-map"] : false;
                this.isFpsVisible = true;
                this.isPingVisible = true;
                this.isKillsVisible = true;
                this.isMenuVisible = true;
                this.isClean = false;
                this.isLocalRotation = settings["local-rotation"] !== undefined ? settings["local-rotation"] : true;
                this.isFpsUncapped = settings["fps-uncap"] !== undefined ? settings["fps-uncap"] : true;
                this.isInterpolation = settings["movement-interpolation"] !== undefined ? settings["movement-interpolation"] : true;
                this.pingTests = [];
                this.pingInterval = null;
                this.init();
        
                window.isLocalRotation = this.isLocalRotation;
                window.isInterpolation = this.isInterpolation;
                window.isFpsUncapped = this.isFpsUncapped;
                window.isStartMapHide = this.isStartMapHide;
        
        
                this.initCounter("fpsCounter", "isFpsVisible", this.updateFpsVisibility.bind(this));
                this.initCounter("pingCounter", "isPingVisible", this.updatePingVisibility.bind(this));
                this.initCounter("killsCounter", "isKillsVisible", this.updateKillsVisibility.bind(this));
        
                this.initMenu();
                this.loadBackgroundFromLocalStorage();
                this.loadLocalStorage();
                this.startUpdateLoop();
                this.setupWeaponBorderHandler();
                this.setupKeyListeners();
            }
        
            init() {
                this.startUpdateLoop();
                this.pingShow();
                this.customUiElements();
              }
        
            initCounter(id, visibilityKey, updateVisibilityFn) {
                this[id] = document.createElement("div");
                this[id].id = id;
                Object.assign(this[id].style, {
                    color: "white",
                    backgroundColor: "rgba(0, 0, 0, 0.2)",
                    padding: "5px 10px",
                    marginTop: "10px",
                    borderRadius: "5px",
                    fontFamily: "Arial, sans-serif",
                    fontSize: "14px",
                    zIndex: "10000",
                    pointerEvents: "none",
                });
        
                const uiTopLeft = document.getElementById("ui-top-left");
                if (uiTopLeft) {
                    uiTopLeft.appendChild(this[id]);
                }
        
                updateVisibilityFn();
            }
        
            updateFpsVisibility() {
                this.updateVisibility("fpsCounter", this.isFpsVisible);
            }
        
            updateFpsToggle() {
                if (this.isFpsUncapped) { 
                    this.animationFrameCallback = (callback) => setTimeout(callback, 1);
                } else {
                    this.animationFrameCallback = (callback) => requestAnimationFrame(callback);
                }
            }
            
        
            updatePingVisibility() {
                this.updateVisibility("pingCounter", this.isPingVisible);
            }
        
            updateKillsVisibility() {
                this.updateVisibility("killsCounter", this.isKillsVisible);
            }
        
        
            updateVisibility(id, isVisible) {
                if (this[id]) {
                    this[id].style.display = isVisible ? "block" : "none";
                    this[id].style.backgroundColor = isVisible
                        ? "rgba(0, 0, 0, 0.2)"
                        : "transparent";
                }
            }
        
            toggleFpsDisplay() {
              this.isFpsVisible = !this.isFpsVisible;
              this.updateFpsVisibility();
            }
            
            setAnimationFrameCallback() {
                this.animationFrameCallback = (callback) => setTimeout(callback, 1);
            }
        
        
            togglePingDisplay() {
              this.isPingVisible = !this.isPingVisible;
              this.updatePingVisibility();
            }
        
            toggleKillsDisplay() {
              this.isKillsVisible = !this.isKillsVisible;
              this.updateKillsVisibility();
            }
        
            getKills() {
              const killElement = document.querySelector(
                ".ui-player-kills.js-ui-player-kills",
              );
              if (killElement) {
                const kills = parseInt(killElement.textContent, 10);
                return isNaN(kills) ? 0 : kills;
              }
              return 0;
            }
        
            getRegionFromLocalStorage() {
              let config = localStorage.getItem("surviv_config");
              if (config) {
                let configObject = JSON.parse(config);
                return configObject.region;
              }
              return null;
            }
        
            startPingTest() {
              const currentUrl = window.location.href;
              const isSpecialUrl = /\/#\w+/.test(currentUrl);
        
              const teamSelectElement = document.getElementById("team-server-select");
              const mainSelectElement = document.getElementById("server-select-main");
        
              const region =
                isSpecialUrl && teamSelectElement
                  ? teamSelectElement.value
                  : mainSelectElement
                    ? mainSelectElement.value
                    : null;
        
              if (region && region !== this.currentServer) {
                this.currentServer = region;
                this.resetPing();
        
                const servers = [
                  { region: "NA", url: "usr.mathsiscoolfun.com:8001" },
                  { region: "EU", url: "eur.mathsiscoolfun.com:8001" },
                  { region: "Asia", url: "asr.mathsiscoolfun.com:8001" },
                  { region: "SA", url: "sa.mathsiscoolfun.com:8001" },
                ];
        
                const selectedServer = servers.find(
                  (server) => region.toUpperCase() === server.region.toUpperCase(),
                );
        
                if (selectedServer) {
                  this.pingTest = new PingTest(selectedServer);
                  this.pingTest.startPingTest();
                } else {
                  this.resetPing();
                }
              }
            }
        
            resetPing() {
              if (this.pingTest && this.pingTest.test.ws) {
                this.pingTest.test.ws.close();
                this.pingTest.test.ws = null;
              }
              this.pingTest = null;
            }
        
        
            saveBackgroundToLocalStorage(url) {
              localStorage.setItem("lastBackgroundUrl", url);
            }
        
            saveBackgroundToLocalStorage(image) {
              if (typeof image === "string") {
                localStorage.setItem("lastBackgroundType", "url");
                localStorage.setItem("lastBackgroundValue", image);
              } else {
                localStorage.setItem("lastBackgroundType", "local");
                const reader = new FileReader();
                reader.onload = () => {
                  localStorage.setItem("lastBackgroundValue", reader.result);
                };
                reader.readAsDataURL(image);
              }
            }
        
            loadBackgroundFromLocalStorage() {
              const backgroundType = localStorage.getItem("lastBackgroundType");
              const backgroundValue = localStorage.getItem("lastBackgroundValue");
        
              const backgroundElement = document.getElementById("background");
              if (backgroundElement && backgroundType && backgroundValue) {
                if (backgroundType === "url") {
                  backgroundElement.style.backgroundImage = `url(${backgroundValue})`;
                } else if (backgroundType === "local") {
                  backgroundElement.style.backgroundImage = `url(${backgroundValue})`;
                }
              }
            }
            loadLocalStorage() {
                const savedSettings = JSON.parse(localStorage.getItem("userSettings"));
                if (savedSettings) {
                    this.isFpsVisible = savedSettings.isFpsVisible ?? this.isFpsVisible;
                    this.isPingVisible = savedSettings.isPingVisible ?? this.isPingVisible;
                    this.isKillsVisible = savedSettings.isKillsVisible ?? this.isKillsVisible;
                    this.isClean = savedSettings.isClean ?? this.isClean;
                }
        
                this.updateKillsVisibility();
                this.updateFpsVisibility();
                this.updatePingVisibility();
            }
        
            updateHealthBars() {
              const healthBars = document.querySelectorAll("#ui-health-container");
              healthBars.forEach((container) => {
                const bar = container.querySelector("#ui-health-actual");
                if (bar) {
                  const width = Math.round(parseFloat(bar.style.width));
                  let percentageText = container.querySelector(".health-text");
        
                  if (!percentageText) {
                    percentageText = document.createElement("span");
                    percentageText.classList.add("health-text");
                    Object.assign(percentageText.style, {
                      width: "100%",
                      textAlign: "center",
                      marginTop: "5px",
                      color: "#333",
                      fontSize: "20px",
                      fontWeight: "bold",
                      position: "absolute",
                      zIndex: "10",
                    });
                    container.appendChild(percentageText);
                  }
        
                  percentageText.textContent = `${width}%`;
                }
              });
            }
        
            updateBoostBars() {
              const boostCounter = document.querySelector("#ui-boost-counter");
              if (boostCounter) {
                const boostBars = boostCounter.querySelectorAll(
                  ".ui-boost-base .ui-bar-inner",
                );
        
                let totalBoost = 0;
                const weights = [25, 25, 40, 10];
        
                boostBars.forEach((bar, index) => {
                  const width = parseFloat(bar.style.width);
                  if (!isNaN(width)) {
                    totalBoost += width * (weights[index] / 100);
                  }
                });
        
                const averageBoost = Math.round(totalBoost);
                let boostDisplay = boostCounter.querySelector(".boost-display");
        
                if (!boostDisplay) {
                  boostDisplay = document.createElement("div");
                  boostDisplay.classList.add("boost-display");
                  Object.assign(boostDisplay.style, {
                    position: "absolute",
                    bottom: "75px",
                    right: "335px",
                    color: "#FF901A",
                    backgroundColor: "rgba(0, 0, 0, 0.4)",
                    padding: "5px 10px",
                    borderRadius: "5px",
                    fontFamily: "Arial, sans-serif",
                    fontSize: "14px",
                    zIndex: "10",
                    textAlign: "center",
                  });
        
                  boostCounter.appendChild(boostDisplay);
                }
        
                boostDisplay.textContent = `AD: ${averageBoost}%`;
              }
            }
        
            setupWeaponBorderHandler() {
                const weaponContainers = Array.from(
                  document.getElementsByClassName("ui-weapon-switch"),
                );
                weaponContainers.forEach((container) => {
                  if (container.id === "ui-weapon-id-4") {
                    container.style.border = "3px solid #2f4032";
                  } else {
                    container.style.border = "3px solid #FFFFFF";
                  }
                });
          
                const weaponNames = Array.from(
                  document.getElementsByClassName("ui-weapon-name"),
                );
                weaponNames.forEach((weaponNameElement) => {
                  const weaponContainer = weaponNameElement.closest(".ui-weapon-switch");
                  const observer = new MutationObserver(() => {
                    const weaponName = weaponNameElement.textContent.trim();
                    let border = "#FFFFFF";
          
                    switch (weaponName.toUpperCase()) { 
                      //yellow
                      case "CZ-3A1": case "G18C": case "M9": case "M93R": case "MAC-10": case "MP5": case "P30L": case "DUAL P30L": case "UMP9": case "VECTOR": case "VSS": case "FLAMETHROWER": border = "#FFAE00"; break;
                      //blue 
                      case "AK-47": case "OT-38": case "OTS-38": case "M39 EMR": case "DP-28": case "MOSIN-NAGANT": case "SCAR-H": case "SV-98": case "M1 GARAND": case "PKP PECHENEG": case "AN-94": case "BAR M1918": case "BLR 81": case "SVD-63": case "M134": case "GROZA": case "GROZA-S": border = "#007FFF"; break;
                      //green
                      case "FAMAS": case "M416": case "M249": case "QBB-97": case "MK 12 SPR": case "M4A1-S": case "SCOUT ELITE": case "L86A2": border = "#0f690d"; break;
                      //red 
                      case "M870": case "MP220": case "SAIGA-12": case "SPAS-12": case "USAS-12": case "SUPER 90": case "LASR GUN": case "M1100": border = "#FF0000"; break;
                      //purple
                      case "MODEL 94": case "PEACEMAKER": case "vector": case "mk45g":case "M1911": case "M1A1": border = "#800080"; break;
                      //black
                      case "DEAGLE 50": case "RAINBOW BLASTER": border = "#000000"; break;
                      //olive
                      case "AWM-S": case "MK 20 SSR": border = "#808000"; break; 
                      //brown
                      case "POTATO CANNON": case "SPUD GUN": border = "#A52A2A"; break;
                      //other Guns
                      case "FLARE GUN": border = "#FF4500"; break; case "M79": border = "#008080"; break; case "HEART CANNON": border = "#FFC0CB"; break; 
                      default: border = "#FFFFFF"; break; }
          
                    if (weaponContainer.id !== "ui-weapon-id-4") {
                      weaponContainer.style.border = `3px solid ${border}`;
                    }
                  });
          
                  observer.observe(weaponNameElement, {
                    childList: true,
                    characterData: true,
                    subtree: true,
                  });
                });
              }
        
            updateUiElements() {
              const currentUrl = window.location.href;
        
              const isSpecialUrl = /\/#\w+/.test(currentUrl);
        
              const playerOptions = document.getElementById("player-options");
              const teamMenuContents = document.getElementById("team-menu-contents");
              const startMenuContainer = document.querySelector(
                "#start-menu .play-button-container",
              );
        
              if (!playerOptions) return;
        
              if (
                isSpecialUrl &&
                teamMenuContents &&
                playerOptions.parentNode !== teamMenuContents
              ) {
                teamMenuContents.appendChild(playerOptions);
              } else if (
                !isSpecialUrl &&
                startMenuContainer &&
                playerOptions.parentNode !== startMenuContainer
              ) {
                const firstChild = startMenuContainer.firstChild;
                startMenuContainer.insertBefore(playerOptions, firstChild);
              }
              const teamMenu = document.getElementById("team-menu");
              if (teamMenu) {
                teamMenu.style.height = "355px";
              }
              const menuBlocks = document.querySelectorAll(".menu-block");
              menuBlocks.forEach((block) => {
                block.style.maxHeight = "355px";
              });
              const leftColumn = document.getElementById("left-column");
              const newsBlock = document.getElementById("news-block");
            }
        
            updateCleanMode() {
                const leftColumn = document.getElementById("left-column");
                const newsBlock = document.getElementById("news-block");
        
                if (this.isClean) {
                    if (leftColumn) leftColumn.style.display = "none";
                    if (newsBlock) newsBlock.style.display = "none";
                } else {
                    if (leftColumn) leftColumn.style.display = "block";
                    if (newsBlock) newsBlock.style.display = "block";
                }
            }
        
            updateMenuButtonText() {
              const hideButton = document.getElementById("hideMenuButton");
              hideButton.textContent = this.isMenuVisible
                ? "Hide Menu [P]"
                : "Show Menu [P]";
            }
        
            setupKeyListeners() {
              document.addEventListener("keydown", (event) => {
                if (event.key.toLowerCase() === "p") {
                  this.toggleMenuVisibility();
                }
              });
            }
            //menu
            initMenu() {
                const menu = document.createElement("div");
                menu.id = "soyAlguienMenu";
                Object.assign(menu.style, {
                    backgroundColor: "rgba(0, 0, 0, 0.5)",
                    padding: "15px",
                    marginLeft: "15px",
                    borderRadius: "10px",
                    boxShadow: "0 4px 10px rgba(0, 0, 0, 0.3)",
                    zIndex: "10001",
                    width: "250px",
                    fontFamily: "Arial, sans-serif",
                    color: "#fff",
                    maxHeight: "400px",
                    overflowY: "auto",
                    zIndex: "1",
                });
            
                const title = document.createElement("h2");
                title.textContent = "SoyAlguien Client";
                Object.assign(title.style, {
                    margin: "0 0 10px",
                    textAlign: "center",
                    fontSize: "18px",
                    color: "#FFAE00",
                });
                menu.appendChild(title);
            
                const updateLocalStorage = () => {
                    localStorage.setItem(
                        "userSettings",
                        JSON.stringify({
                            isFpsVisible: this.isFpsVisible,
                            isPingVisible: this.isPingVisible,
                            isKillsVisible: this.isKillsVisible,
                            isClean: this.isClean
                        })
                    );
                };
            
                this.loadLocalStorage();
            
                const createToggleButton = (text, stateKey, onClick) => {
                    const button = document.createElement("button");
                    button.textContent = `${text} ${this[stateKey] ? "✅" : "❌"}`;
                    Object.assign(button.style, {
                        backgroundColor: this[stateKey] ? "#4CAF50" : "#FF0000",
                        border: "none",
                        color: "#fff",
                        padding: "10px",
                        borderRadius: "5px",
                        width: "100%",
                        marginBottom: "10px",
                        fontSize: "14px",
                        cursor: "pointer",
                    });
                    button.onclick = () => {
                        this[stateKey] = !this[stateKey];
                        onClick();
                        button.textContent = `${text} ${this[stateKey] ? "✅" : "❌"}`;
                        button.style.backgroundColor = this[stateKey] ? "#4CAF50" : "#FF0000";
                        updateLocalStorage();
                    };
                    return button;
                };
            
                menu.appendChild(createToggleButton("Show FPS", "isFpsVisible", this.updateFpsVisibility.bind(this)));
                menu.appendChild(createToggleButton("Show Ping", "isPingVisible", this.updatePingVisibility.bind(this)));
                menu.appendChild(createToggleButton("Show Kills", "isKillsVisible", this.updateKillsVisibility.bind(this)));
                menu.appendChild(createToggleButton("Clean Menu", "isClean", this.updateCleanMode.bind(this)));
            
                const hideShowToggle = document.createElement("button");
                hideShowToggle.textContent = `👀 Hide/Show Menu [P]`;
                Object.assign(hideShowToggle.style, {
                    backgroundColor: "#6F42C1",
                    border: "none",
                    color: "#fff",
                    padding: "10px",
                    borderRadius: "5px",
                    width: "100%",
                    marginBottom: "10px",
                    fontSize: "14px",
                    cursor: "pointer",
                });
                hideShowToggle.onclick = () => this.toggleMenuVisibility();
                menu.appendChild(hideShowToggle);
            
                const backgroundToggle = document.createElement("button");
                backgroundToggle.textContent = `🎨 Change Background`;
                Object.assign(backgroundToggle.style, {
                    backgroundColor: "#007BFF",
                    border: "none",
                    color: "#fff",
                    padding: "10px",
                    borderRadius: "5px",
                    width: "100%",
                    marginBottom: "10px",
                    fontSize: "14px",
                    cursor: "pointer",
                });
                backgroundToggle.onclick = () => {
                    const backgroundElement = document.getElementById("background");
                    if (!backgroundElement) {
                        alert("Element with id 'background' not found.");
                        return;
                    }
                    const choice = prompt(
                        "Enter '1' to provide a URL or '2' to upload a local image:"
                    );
            
                    if (choice === "1") {
                        const newBackgroundUrl = prompt("Enter the URL of the new background image:");
                        if (newBackgroundUrl) {
                            backgroundElement.style.backgroundImage = `url(${newBackgroundUrl})`;
                            this.saveBackgroundToLocalStorage(newBackgroundUrl);
                            alert("Background updated successfully!");
                        }
                    } else if (choice === "2") {
                        const fileInput = document.createElement("input");
                        fileInput.type = "file";
                        fileInput.accept = "image/*";
                        fileInput.onchange = (event) => {
                            const file = event.target.files[0];
                            if (file) {
                                const reader = new FileReader();
                                reader.onload = () => {
                                    backgroundElement.style.backgroundImage = `url(${reader.result})`;
                                    this.saveBackgroundToLocalStorage(file);
                                    alert("Background updated successfully!");
                                };
                                reader.readAsDataURL(file);
                            }
                        };
                        fileInput.click();
                    }
                };
                menu.appendChild(backgroundToggle);
            
                const moreSettingsButton = document.createElement("button");
                moreSettingsButton.textContent = "⚙️ More Settings";
                Object.assign(moreSettingsButton.style, {
                    backgroundColor: "#1D1616",
                    border: "none",
                    color: "#fff",
                    padding: "10px",
                    borderRadius: "5px",
                    width: "100%",
                    fontSize: "14px",
                    cursor: "pointer",
                });
                moreSettingsButton.onclick = () => this.openSubMenu();
                menu.appendChild(moreSettingsButton);
            
                window.onload = () => {
                    const savedBackground = localStorage.getItem("backgroundImage");
                    if (savedBackground) {
                        const backgroundElement = document.getElementById("background");
                        if (backgroundElement) {
                            backgroundElement.style.backgroundImage = `url(${savedBackground})`;
                        }
                    }
                };
            
                const startRowTop = document.getElementById("start-row-top");
                if (startRowTop) {
                    startRowTop.appendChild(menu);
                }
            
                this.menu = menu;
            }
            
            openSubMenu() {
                const overlay = document.createElement("div");
                const savedOpacity = localStorage.getItem('opacity') ?? 1;
                const savedScale = localStorage.getItem('scale') ?? 0.8;
            
                Object.assign(overlay.style, {
                    position: "fixed",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    backgroundColor: "rgba(0, 0, 0, 0.7)",
                    zIndex: "10002",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                });
            
                const subMenu = document.createElement("div");
                Object.assign(subMenu.style, {
                    backgroundColor: "#333",
                    padding: "20px",
                    borderRadius: "15px",
                    width: "400px",
                    color: "#fff",
                    textAlign: "left",
                    zIndex: "10003",
                    boxShadow: "0 4px 15px rgba(0, 0, 0, 0.5)",
                });
            
                const createSectionHeader = (text) => {
                    const header = document.createElement("h3");
                    header.textContent = text;
                    Object.assign(header.style, {
                        fontSize: "18px",
                        fontWeight: "bold",
                        color: "#FFD700",
                        marginBottom: "10px",
                    });
                    return header;
                };
            
                const createSettingItem = (id, label, checked) => {
                    const wrapper = document.createElement("div");
                    Object.assign(wrapper.style, {
                        display: "flex",
                        alignItems: "center",
                        padding: "10px",
                        marginBottom: "10px",
                        borderRadius: "8px",
                        backgroundColor: "#444",
                    });
            
                    const checkbox = document.createElement("input");
                    checkbox.id = id;
                    checkbox.type = "checkbox";
                    checkbox.checked = checked;
                    Object.assign(checkbox.style, {
                        marginRight: "10px",
                        cursor: "pointer",
                    });
            
                    const labelText = document.createElement("p");
                    labelText.textContent = label;
                    Object.assign(labelText.style, {
                        margin: "0",
                        fontSize: "16px",
                        color: "#fff",
                    });
            
                    wrapper.appendChild(checkbox);
                    wrapper.appendChild(labelText);
                    return wrapper;
                };
            
                const createCustomSlider = (id, min, max, step, value, onChange) => {
                    const wrapper = document.createElement("div");
                    Object.assign(wrapper.style, {
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "space-between",
                        marginBottom: "10px",
                    });
            
                    const slider = document.createElement("input");
                    slider.type = "range";
                    slider.id = id;
                    slider.min = min;
                    slider.max = max;
                    slider.step = step;
                    slider.value = value;
                    Object.assign(slider.style, {
                        flex: "1",
                        marginRight: "10px",
                    });
            
                    const valueLabel = document.createElement("span");
                    valueLabel.textContent = value;
                    Object.assign(valueLabel.style, {
                        minWidth: "30px",
                        textAlign: "right",
                        color: "#fff",
                    });
            
                    slider.oninput = () => {
                        valueLabel.textContent = slider.value;
                        onChange(slider.value);
                    };
            
                    wrapper.appendChild(slider);
                    wrapper.appendChild(valueLabel);
                    return wrapper;
                };
            
                const titleClient = document.createElement("h2");
                titleClient.textContent = "Client Settings";
                Object.assign(titleClient.style, {
                    margin: "0 0 20px",
                    fontSize: "24px",
                    fontWeight: "bold",
                    color: "#FFAE00",
                    textAlign: "center",
                });
                subMenu.appendChild(titleClient);
            
                subMenu.appendChild(createSectionHeader("Local Rotation"));
                subMenu.appendChild(createSettingItem(
                    "local-rotation",
                    "Enable/disable local rotation",
                    this.isLocalRotation
                ));
            
                subMenu.appendChild(createSectionHeader("FPS Uncap"));
                subMenu.appendChild(createSettingItem(
                    "fps-uncap",
                    "Enable/disable FPS uncap",
                    this.isFpsUncapped
                ));
            
                subMenu.appendChild(createSectionHeader("Movement Interpolation"));
                subMenu.appendChild(createSettingItem(
                    "movement-interpolation",
                    "Enable/disable smooth movement",
                    this.isInterpolation
                ));
        
                subMenu.appendChild(createSectionHeader("Hide Mini Map"));
                subMenu.appendChild(createSettingItem(
                    "hide-mini-map",
                    "The mini map will start hidden",
                    this.isStartMapHide
                ));
            
                const titleUI = document.createElement("h2");
                titleUI.textContent = "UI Settings";
                Object.assign(titleUI.style, {
                    margin: "20px 0 20px",
                    fontSize: "24px",
                    fontWeight: "bold",
                    color: "#FFAE00",
                    textAlign: "center",
                });
                subMenu.appendChild(titleUI);
            
                subMenu.appendChild(createSectionHeader("Opacity"));
                subMenu.appendChild(createCustomSlider(
                    "opacity-slider",
                    0, 1, 0.01,
                    savedOpacity,
                    (value) => localStorage.setItem('opacity', value)
                ));
            
                subMenu.appendChild(createSectionHeader("Scale"));
                subMenu.appendChild(createCustomSlider(
                    "scale-slider",
                    0.5, 1, 0.01,
                    savedScale,
                    (value) => localStorage.setItem('scale', value)
                ));
            
        
                const closeButton = document.createElement("button");
                closeButton.textContent = "Close";
                Object.assign(closeButton.style, {
                    backgroundColor: "#FF4D4D",
                    border: "none",
                    color: "#fff",
                    padding: "10px 20px",
                    borderRadius: "8px",
                    marginTop: "20px",
                    cursor: "pointer",
                    fontSize: "16px",
                    fontWeight: "bold",
                    transition: "background-color 0.3s ease",
                    width: "100%",
                });
                closeButton.onmouseenter = () => {
                    closeButton.style.backgroundColor = "#FF3333";
                };
                closeButton.onmouseleave = () => {
                    closeButton.style.backgroundColor = "#FF4D4D";
                };
                closeButton.onclick = () => {
                    document.body.removeChild(overlay);
                };
                subMenu.appendChild(closeButton);
            
                overlay.appendChild(subMenu);
                document.body.appendChild(overlay);
            
                this.attachSettingsEvents();
            }
            
            
            customUiElements(){
                let scale = parseFloat(localStorage.getItem('scale')) || 0.8;
                let opacity = parseFloat(localStorage.getItem('opacity')) || 1;
                
                const healthBoost = document.getElementById('ui-bottom-center-0');
                healthBoost.style.transform = `translateX(-50%) scale(${scale})`;
                healthBoost.style.opacity = opacity;
                healthBoost.style.bottom = window.innerWidth > 1200 ? `-${((1-scale) * 20)+2}px` : '';
        
                const weapon = document.getElementById('ui-weapon-container');
                weapon.style.scale = scale;
                weapon.style.opacity = opacity;
                weapon.style.transformOrigin = "right";
        
                const inventory = document.getElementById('ui-right-center');
                inventory.style.scale = scale*1.1;
                inventory.style.opacity = opacity;
                inventory.style.marginTop = `-${(1 - scale) * 100}px`;
        
                const info = document.getElementById('ui-top-left');
                info.style.transformOrigin = 'top left';
                info.style.scale = scale*1.1;
                info.style.opacity = opacity;
        
                const players = document.getElementById('ui-leaderboard-wrapper');
                players.style.scale = scale;
                players.style.opacity = opacity;
                players.style.transformOrigin = 'top right';
        
                const killfeed = document.getElementById('ui-killfeed-wrapper');
                killfeed.style.scale = scale;
                killfeed.style.opacity = opacity;
                killfeed.style.transformOrigin = "right";
        
                const ammo = document.getElementById('ui-equipped-ammo-wrapper');
                ammo.style.opacity = opacity;
                ammo.style.transform = `translateX(-50%) scale(${scale})`;
                ammo.style.bottom = 62-((1-scale)*20);
        
                const gears = document.getElementById('ui-bottom-center-right');
                gears.style.opacity = opacity;
                gears.style.scale = scale; 
        
                const scopes = document.getElementById('ui-top-center-scopes');
                scopes.style.opacity = opacity;
                scopes.style.scale = scale; 
            }
            
            attachSettingsEvents() {
                const localRotationCheckbox = document.querySelector("#local-rotation");
                if (localRotationCheckbox) {
                    localRotationCheckbox.addEventListener("change", (event) => {
                        this.isLocalRotation = event.target.checked;
                        window.isLocalRotation = this.isLocalRotation;
                        this.saveSettings();
                    });
                }
            
                const fpsUncapCheckbox = document.querySelector("#fps-uncap");
                if (fpsUncapCheckbox) {
                    fpsUncapCheckbox.addEventListener("change", (event) => {
                        this.isFpsUncapped = event.target.checked;
                        this.saveSettings();
                    });
                }
            
                const interpolationCheckbox = document.querySelector("#movement-interpolation");
                if (interpolationCheckbox) {
                    interpolationCheckbox.addEventListener("change", (event) => {
                        this.isInterpolation = event.target.checked;
                        window.isInterpolation = this.isInterpolation;
                        this.saveSettings();
                    });
                }
        
                const MiniMapCheckbox = document.querySelector("#hide-mini-map");
                if (MiniMapCheckbox) {
                    MiniMapCheckbox.addEventListener("change", (event) => {
                        this.isStartMapHide = event.target.checked;
                        window.isStartMapHide = this.isStartMapHide;
                        this.saveSettings();
                    });
                }
            
                const opacitySlider = document.querySelector("#opacity-slider");
                if (opacitySlider) {
                    opacitySlider.addEventListener("input", (event) => {
                        localStorage.setItem("opacity", event.target.value);
                        this.customUiElements();
                    });
                }
            
                const scaleSlider = document.querySelector("#scale-slider");
                if (scaleSlider) {
                    scaleSlider.addEventListener("input", (event) => {
                        localStorage.setItem("scale", event.target.value);
                        this.customUiElements();
                    });
                }
            }
            
            saveSettings() {
                const settings = {
                    "local-rotation": this.isLocalRotation,
                    "fps-uncap": this.isFpsUncapped,
                    "movement-interpolation": this.isInterpolation,
                    "hide-mini-map": this.isStartMapHide,
                };
                localStorage.setItem("gameSettings", JSON.stringify(settings));
            }
            
        
            toggleMenuVisibility() {
              const isVisible = this.menu.style.display !== "none";
              this.menu.style.display = isVisible ? "none" : "block";
            }
        
            startUpdateLoop() {
              const now = performance.now();
              const delta = now - this.lastFrameTime;
        
              this.frameCount++;
        
              if (delta >= 1000) {
                this.fps = Math.round((this.frameCount * 1000) / delta);
                this.frameCount = 0;
                this.lastFrameTime = now;
        
                this.kills = this.getKills();
        
                if (this.isFpsVisible && this.fpsCounter) {
                    //temporal fix fps counter
                  this.fpsCounter.textContent = `FPS: ${Math.round(this.fps/2)}`;
                }
        
                if (this.isKillsVisible && this.killsCounter) {
                  this.killsCounter.textContent = `Kills: ${this.kills}`;
                }
        
                if (this.isPingVisible && this.pingCounter && this.pingTest) {
                  const result = this.pingTest.getPingResult();
                  this.pingCounter.textContent = `PING: ${result.ping} ms`;
                }
              }
        
              this.startPingTest();
              this.updateFpsToggle()
              this.animationFrameCallback(() => this.startUpdateLoop());
              this.updateUiElements();
              this.updateCleanMode();
              this.updateBoostBars();
              this.updateHealthBars();
            }
        
            pingShow() {
                const serverSelect = document.getElementById("server-select-main");
              
                if (!serverSelect) return;
              
                const updateOptionWithPing = (optionElement, ping) => {
                    const pingText = ` (${ping} ms)`;
                    
                    const originalText = optionElement.textContent.replace(/\(\d+ ms\)/g, "").trim();
                    optionElement.textContent = `${originalText}${pingText}`;
                  
                    if (ping > 300) {
                      optionElement.style.color = "red";
                    } else if (ping > 200) {
                      optionElement.style.color = "orange";
                    } else if (ping > 100) {
                      optionElement.style.color = "yellow";
                    } else {
                      optionElement.style.color = "green";
                    }
                  };
                  
                  
              
                const servers = [
                  { region: "NA", url: "usr.mathsiscoolfun.com:8001" },
                  { region: "EU", url: "eur.mathsiscoolfun.com:8001" },
                  { region: "Asia", url: "asr.mathsiscoolfun.com:8001" },
                  { region: "SA", url: "sa.mathsiscoolfun.com:8001" },
                ];
              
                servers.forEach((server) => {
                  const pingTest = new PingTest(server);
                  pingTest.startPingTest();
              
                  const interval = setInterval(() => {
                    const pingResult = pingTest.getPingResult();
                    if (pingResult.ping !== 9999 && pingResult.ping !== "Error") {
                      const optionElement = serverSelect.querySelector(`option[value="${server.region.toLowerCase()}"]`);
                      if (optionElement) {
                        updateOptionWithPing(optionElement, pingResult.ping);
                      }
                      clearInterval(interval);
                    }
                  }, 2000);
                });
              }
            
          }
        
          class PingTest {
            constructor(selectedServer) {
              this.ptcDataBuf = new ArrayBuffer(1);
              this.test = {
                region: selectedServer.region,
                url: `wss://${selectedServer.url}/ptc`,
                ping: 9999,
                ws: null,
                sendTime: 0,
                retryCount: 0,
              };
            }
        
            startPingTest() {
              if (!this.test.ws) {
                const ws = new WebSocket(this.test.url);
                ws.binaryType = "arraybuffer";
        
                ws.onopen = () => {
                  this.sendPing();
                  this.test.retryCount = 0;
                };
        
                ws.onmessage = () => {
                  const elapsed = (Date.now() - this.test.sendTime) / 1e3;
                  this.test.ping = Math.round(elapsed * 1000);
                  this.test.retryCount = 0;
                  setTimeout(() => this.sendPing(), 200);
                };
        
                ws.onerror = () => {
                  this.test.ping = "Error";
                  this.test.retryCount++;
                  if (this.test.retryCount < 5) {
                    setTimeout(() => this.startPingTest(), 2000);
                  } else {
                    this.test.ws.close();
                    this.test.ws = null;
                  }
                };
        
                ws.onclose = () => {
                  this.test.ws = null;
                };
        
                this.test.ws = ws;
              }
            }
        
            sendPing() {
                if (this.test.ws && this.test.ws.readyState === WebSocket.OPEN) {
                  this.test.sendTime = Date.now();
                  this.test.ws.send(this.ptcDataBuf);
                }
              }
              
        
            getPingResult() {
              return {
                region: this.test.region,
                ping: this.test.ping,
              };
            }
          }
        
          const gameMod = new GameMod();
    })();
