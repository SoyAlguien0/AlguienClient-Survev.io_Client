(async () => {
    
    const links = Array.from(document.querySelectorAll('link[rel="modulepreload"][href]'));
    
    const vendorLink = links.find(link => link.href.includes('vendor-'));
    
    const vendorModule = await import(vendorLink.href);
    
    const { 
        i: dt, $: d, C: ue, T: K, S: he, G: Re, a: qo, b: Nt, R: Fo, c: jo, P: ua, 
        d: cr, B: Sa, e: ka, f: Uo, g: Wo, s: No, A: Go 
    } = vendorModule;
    (function() {
        const t = document.createElement("link").relList;
        if (t && t.supports && t.supports("modulepreload"))
            return;
        for (const o of document.querySelectorAll('link[rel="modulepreload"]'))
            i(o);
        new MutationObserver(o => {
            for (const s of o)
                if (s.type === "childList")
                    for (const l of s.addedNodes)
                        l.tagName === "LINK" && l.rel === "modulepreload" && i(l)
        }
        ).observe(document, {
            childList: !0,
            subtree: !0
        });
        function a(o) {
            const s = {};
            return o.integrity && (s.integrity = o.integrity),
            o.referrerPolicy && (s.referrerPolicy = o.referrerPolicy),
            o.crossOrigin === "use-credentials" ? s.credentials = "include" : o.crossOrigin === "anonymous" ? s.credentials = "omit" : s.credentials = "same-origin",
            s
        }
        function i(o) {
            if (o.ep)
                return;
            o.ep = !0;
            const s = a(o);
            fetch(o.href, s)
        }
    }
    )();
    var We = (r => (r[r.Solo = 1] = "Solo",
    r[r.Duo = 2] = "Duo",
    r[r.Squad = 4] = "Squad",
    r))(We || {})
      , Te = (r => (r[r.Top = 0] = "Top",
    r[r.Right = 1] = "Right",
    r[r.Bottom = 2] = "Bottom",
    r[r.Left = 3] = "Left",
    r[r.Win = 4] = "Win",
    r[r.Death = 5] = "Death",
    r[r.Count = 6] = "Count",
    r))(Te || {})
      , st = (r => (r[r.Player = 0] = "Player",
    r[r.Bleeding = 1] = "Bleeding",
    r[r.Gas = 2] = "Gas",
    r[r.Airdrop = 3] = "Airdrop",
    r[r.Airstrike = 4] = "Airstrike",
    r))(st || {})
      , ge = (r => (r[r.None = 0] = "None",
    r[r.Reload = 1] = "Reload",
    r[r.ReloadAlt = 2] = "ReloadAlt",
    r[r.UseItem = 3] = "UseItem",
    r[r.Revive = 4] = "Revive",
    r))(ge || {})
      , St = (r => (r[r.Primary = 0] = "Primary",
    r[r.Secondary = 1] = "Secondary",
    r[r.Melee = 2] = "Melee",
    r[r.Throwable = 3] = "Throwable",
    r[r.Count = 4] = "Count",
    r))(St || {})
      , jt = (r => (r[r.Inactive = 0] = "Inactive",
    r[r.Waiting = 1] = "Waiting",
    r[r.Moving = 2] = "Moving",
    r))(jt || {})
      , Se = (r => (r[r.None = 0] = "None",
    r[r.Melee = 1] = "Melee",
    r[r.Cook = 2] = "Cook",
    r[r.Throw = 3] = "Throw",
    r[r.CrawlForward = 4] = "CrawlForward",
    r[r.CrawlBackward = 5] = "CrawlBackward",
    r[r.Revive = 6] = "Revive",
    r))(Se || {})
      , $i = (r => (r[r.Airdrop = 0] = "Airdrop",
    r[r.Airstrike = 1] = "Airstrike",
    r))($i || {})
      , tt = (r => (r[r.None = 0] = "None",
    r[r.Windwalk = 1] = "Windwalk",
    r[r.Takedown = 2] = "Takedown",
    r[r.Inspire = 3] = "Inspire",
    r))(tt || {})
      , j = (r => (r[r.MoveLeft = 0] = "MoveLeft",
    r[r.MoveRight = 1] = "MoveRight",
    r[r.MoveUp = 2] = "MoveUp",
    r[r.MoveDown = 3] = "MoveDown",
    r[r.Fire = 4] = "Fire",
    r[r.Reload = 5] = "Reload",
    r[r.Cancel = 6] = "Cancel",
    r[r.Interact = 7] = "Interact",
    r[r.Revive = 8] = "Revive",
    r[r.Use = 9] = "Use",
    r[r.Loot = 10] = "Loot",
    r[r.EquipPrimary = 11] = "EquipPrimary",
    r[r.EquipSecondary = 12] = "EquipSecondary",
    r[r.EquipMelee = 13] = "EquipMelee",
    r[r.EquipThrowable = 14] = "EquipThrowable",
    r[r.EquipFragGrenade = 15] = "EquipFragGrenade",
    r[r.EquipSmokeGrenade = 16] = "EquipSmokeGrenade",
    r[r.EquipNextWeap = 17] = "EquipNextWeap",
    r[r.EquipPrevWeap = 18] = "EquipPrevWeap",
    r[r.EquipLastWeap = 19] = "EquipLastWeap",
    r[r.EquipOtherGun = 20] = "EquipOtherGun",
    r[r.EquipPrevScope = 21] = "EquipPrevScope",
    r[r.EquipNextScope = 22] = "EquipNextScope",
    r[r.UseBandage = 23] = "UseBandage",
    r[r.UseHealthKit = 24] = "UseHealthKit",
    r[r.UseSoda = 25] = "UseSoda",
    r[r.UsePainkiller = 26] = "UsePainkiller",
    r[r.StowWeapons = 27] = "StowWeapons",
    r[r.SwapWeapSlots = 28] = "SwapWeapSlots",
    r[r.ToggleMap = 29] = "ToggleMap",
    r[r.CycleUIMode = 30] = "CycleUIMode",
    r[r.EmoteMenu = 31] = "EmoteMenu",
    r[r.TeamPingMenu = 32] = "TeamPingMenu",
    r[r.Fullscreen = 33] = "Fullscreen",
    r[r.HideUI = 34] = "HideUI",
    r[r.TeamPingSingle = 35] = "TeamPingSingle",
    r[r.Count = 36] = "Count",
    r))(j || {});
    const F = {
        protocolVersion: 1e3,
        Input: j,
        EmoteSlot: Te,
        WeaponSlot: St,
        WeaponType: ["gun", "gun", "melee", "throwable"],
        DamageType: st,
        Action: ge,
        Anim: Se,
        GasMode: jt,
        Plane: $i,
        HasteType: tt,
        gas: {
            damageTickRate: 2
        },
        map: {
            gridSize: 16,
            shoreVariation: 3,
            grassVariation: 2
        },
        player: {
            radius: 1,
            maxVisualRadius: 3.75,
            maxInteractionRad: 3.5,
            health: 100,
            reviveHealth: 24,
            minActiveTime: 10,
            boostDecay: .33,
            boostMoveSpeed: 1.85,
            boostHealAmount: .33,
            boostBreakpoints: [1, 1, 1.5, .5],
            scopeDelay: .25,
            baseSwitchDelay: .25,
            freeSwitchCooldown: 1,
            headshotChance: .15,
            moveSpeed: 12,
            waterSpeedPenalty: 3,
            cookSpeedPenalty: 3,
            frozenSpeedPenalty: 3,
            hasteSpeedBonus: 4.8,
            bleedTickRate: 1,
            downedMoveSpeed: 4,
            downedRezMoveSpeed: 2,
            downedDamageBuffer: .1,
            keepZoomWhileDowned: !1,
            reviveDuration: 8,
            reviveRange: 5,
            crawlTime: .75,
            teammateSpawnRadius: 5,
            emoteSoftCooldown: 2,
            emoteHardCooldown: 6,
            emoteThreshold: 6,
            throwableMaxMouseDist: 18,
            cookTime: .1,
            throwTime: .3,
            meleeHeight: .25,
            touchLootRadMult: 1.4,
            medicHealRange: 8,
            medicReviveRange: 6,
            spectateDeadTimeout: 2,
            killLeaderMinKills: 3,
            minSpawnRad: 25
        },
        defaultEmoteLoadout: ["emote_happyface", "emote_thumbsup", "emote_surviv", "emote_sadface", "", ""],
        airdrop: {
            actionOffset: 0,
            fallTime: 8,
            crushDamage: 100,
            planeVel: 48,
            planeRad: 150,
            soundRangeMult: 2.5,
            soundRangeDelta: .25,
            soundRangeMax: 92,
            fallOff: 0
        },
        airstrike: {
            actionOffset: 0,
            bombJitter: 4,
            bombOffset: 2,
            bombVel: 3,
            bombCount: 20,
            planeVel: 350,
            planeRad: 120,
            soundRangeMult: 18,
            soundRangeDelta: 18,
            soundRangeMax: 48,
            fallOff: 1.25
        },
        groupColors: [16776960, 16711935, 65535, 16733184],
        teamColors: [13369344, 32511],
        bullet: {
            maxReflect: 3,
            reflectDistDecay: 1.5,
            height: .25,
            falloff: !0
        },
        projectile: {
            maxHeight: 5
        },
        structureLayerCount: 2,
        tracerColors: {
            "9mm": {
                regular: 16704198,
                saturated: 16767411,
                chambered: 16744192,
                alphaRate: .92,
                alphaMin: .14
            },
            "9mm_suppressed_bonus": {
                regular: 16704198,
                saturated: 16767411,
                chambered: 16744192,
                alphaRate: .96,
                alphaMin: .28
            },
            "9mm_cursed": {
                regular: 1247488,
                saturated: 1247488,
                chambered: 1247488,
                alphaRate: .92,
                alphaMin: .14
            },
            "762mm": {
                regular: 12965630,
                saturated: 11257087,
                chambered: 19711,
                alphaRate: .94,
                alphaMin: .2
            },
            "12gauge": {
                regular: 16702684,
                saturated: 16702684,
                chambered: 16711680
            },
            "556mm": {
                regular: 11141010,
                saturated: 11141010,
                chambered: 3604224,
                alphaRate: .92,
                alphaMin: .14
            },
            "50AE": {
                regular: 16773256,
                saturated: 16773256,
                chambered: 16768768
            },
            "308sub": {
                regular: 2435840,
                saturated: 4608e3,
                chambered: 1250816,
                alphaRate: .92,
                alphaMin: .07
            },
            flare: {
                regular: 14869218,
                saturated: 14869218,
                chambered: 12895428
            },
            "45acp": {
                regular: 15515391,
                saturated: 15183103,
                chambered: 11862271
            },
            shrapnel: {
                regular: 3355443,
                saturated: 3355443
            },
            frag: {
                regular: 13303808,
                saturated: 13303808
            },
            invis: {
                regular: 0,
                saturated: 0,
                chambered: 0
            }
        },
        scopeZoomRadius: {
            desktop: {
                "1xscope": 28,
                "2xscope": 36,
                "4xscope": 48,
                "8xscope": 68,
                "15xscope": 104
            },
            mobile: {
                "1xscope": 32,
                "2xscope": 40,
                "4xscope": 48,
                "8xscope": 64,
                "15xscope": 88
            }
        },
        bagSizes: {
            "9mm": [120, 240, 330, 420],
            "762mm": [90, 180, 240, 300],
            "556mm": [90, 180, 240, 300],
            "12gauge": [15, 30, 60, 90],
            "50AE": [49, 98, 147, 196],
            "308sub": [10, 20, 40, 80],
            flare: [2, 4, 6, 8],
            "45acp": [90, 180, 240, 300],
            frag: [3, 6, 9, 12],
            smoke: [3, 6, 9, 12],
            strobe: [2, 3, 4, 5],
            mirv: [2, 4, 6, 8],
            snowball: [10, 20, 30, 40],
            potato: [10, 20, 30, 40],
            bandage: [5, 10, 15, 30],
            healthkit: [1, 2, 3, 4],
            soda: [2, 5, 10, 15],
            painkiller: [1, 2, 3, 4],
            "1xscope": [1, 1, 1, 1],
            "2xscope": [1, 1, 1, 1],
            "4xscope": [1, 1, 1, 1],
            "8xscope": [1, 1, 1, 1],
            "15xscope": [1, 1, 1, 1]
        },
        lootRadius: {
            outfit: 1,
            melee: 1.25,
            gun: 1.25,
            throwable: 1,
            ammo: 1.2,
            heal: 1,
            boost: 1,
            backpack: 1,
            helmet: 1,
            chest: 1,
            scope: 1,
            perk: 1.25,
            xp: 1
        }
    };
    function ha(r, t, a) {
        a = a || 2;
        const i = t?.length
          , o = i ? t[0] * a : r.length;
        let s = Xi(r, 0, o, a, !0);
        const l = [];
        if (!s)
            return l;
        let c, m, h, u, g, w, y;
        if (i && (s = Qo(r, t, s, a)),
        r.length > 80 * a) {
            c = h = r[0],
            m = u = r[1];
            for (let _ = a; _ < o; _ += a)
                g = r[_],
                w = r[_ + 1],
                g < c && (c = g),
                w < m && (m = w),
                g > h && (h = g),
                w > u && (u = w);
            y = Math.max(h - c, u - m),
            y = y !== 0 ? 1 / y : 0
        }
        return Vt(s, l, a, c, m, y),
        l
    }
    function Xi(r, t, a, i, o) {
        let s, l;
        if (o === Yr(r, t, a, i) > 0)
            for (s = t; s < a; s += i)
                l = za(s, r[s], r[s + 1], l);
        else
            for (s = a - i; s >= t; s -= i)
                l = za(s, r[s], r[s + 1], l);
        return l && ht(l, l.next) && ($t(l),
        l = l.next),
        l
    }
    function Gt(r, t) {
        if (!r)
            return r;
        t || (t = r);
        let a = r, i;
        do
            if (i = !1,
            !a.steiner && (ht(a, a.next) || Ae(a.prev, a, a.next) === 0)) {
                if ($t(a),
                a = t = a.prev,
                a === a.next)
                    break;
                i = !0
            } else
                a = a.next;
        while (i || a !== t);
        return t
    }
    function Vt(r, t, a, i, o, s, l) {
        if (!r)
            return;
        !l && s && Ko(r, i, o, s);
        let c = r, m, h;
        for (; r.prev !== r.next; ) {
            if (m = r.prev,
            h = r.next,
            s ? Ho(r, i, o, s) : Vo(r)) {
                t.push(m.i / a),
                t.push(r.i / a),
                t.push(h.i / a),
                $t(r),
                r = h.next,
                c = h.next;
                continue
            }
            if (r = h,
            r === c) {
                l ? l === 1 ? (r = $o(r, t, a),
                Vt(r, t, a, i, o, s, 2)) : l === 2 && Xo(r, t, a, i, o, s) : Vt(Gt(r), t, a, i, o, s, 1);
                break
            }
        }
    }
    function Vo(r) {
        const t = r.prev
          , a = r
          , i = r.next;
        if (Ae(t, a, i) >= 0)
            return !1;
        let o = r.next.next;
        for (; o !== r.prev; ) {
            if (kt(t.x, t.y, a.x, a.y, i.x, i.y, o.x, o.y) && Ae(o.prev, o, o.next) >= 0)
                return !1;
            o = o.next
        }
        return !0
    }
    function Ho(r, t, a, i) {
        const o = r.prev
          , s = r
          , l = r.next;
        if (Ae(o, s, l) >= 0)
            return !1;
        const c = o.x < s.x ? o.x < l.x ? o.x : l.x : s.x < l.x ? s.x : l.x
          , m = o.y < s.y ? o.y < l.y ? o.y : l.y : s.y < l.y ? s.y : l.y
          , h = o.x > s.x ? o.x > l.x ? o.x : l.x : s.x > l.x ? s.x : l.x
          , u = o.y > s.y ? o.y > l.y ? o.y : l.y : s.y > l.y ? s.y : l.y
          , g = Zr(c, m, t, a, i)
          , w = Zr(h, u, t, a, i);
        let y = r.prevZ
          , _ = r.nextZ;
        for (; y && y.z >= g && _ && _.z <= w; ) {
            if (y !== r.prev && y !== r.next && kt(o.x, o.y, s.x, s.y, l.x, l.y, y.x, y.y) && Ae(y.prev, y, y.next) >= 0 || (y = y.prevZ,
            _ !== r.prev && _ !== r.next && kt(o.x, o.y, s.x, s.y, l.x, l.y, _.x, _.y) && Ae(_.prev, _, _.next) >= 0))
                return !1;
            _ = _.nextZ
        }
        for (; y && y.z >= g; ) {
            if (y !== r.prev && y !== r.next && kt(o.x, o.y, s.x, s.y, l.x, l.y, y.x, y.y) && Ae(y.prev, y, y.next) >= 0)
                return !1;
            y = y.prevZ
        }
        for (; _ && _.z <= w; ) {
            if (_ !== r.prev && _ !== r.next && kt(o.x, o.y, s.x, s.y, l.x, l.y, _.x, _.y) && Ae(_.prev, _, _.next) >= 0)
                return !1;
            _ = _.nextZ
        }
        return !0
    }
    function $o(r, t, a) {
        let i = r;
        do {
            const o = i.prev
              , s = i.next.next;
            !ht(o, s) && Qi(o, i, i.next, s) && Ht(o, s) && Ht(s, o) && (t.push(o.i / a),
            t.push(i.i / a),
            t.push(s.i / a),
            $t(i),
            $t(i.next),
            i = r = s),
            i = i.next
        } while (i !== r);
        return i
    }
    function Xo(r, t, a, i, o, s) {
        let l = r;
        do {
            let c = l.next.next;
            for (; c !== l.prev; ) {
                if (l.i !== c.i && rs(l, c)) {
                    let m = Zi(l, c);
                    l = Gt(l, l.next),
                    m = Gt(m, m.next),
                    Vt(l, t, a, i, o, s),
                    Vt(m, t, a, i, o, s);
                    return
                }
                c = c.next
            }
            l = l.next
        } while (l !== r)
    }
    function Qo(r, t, a, i) {
        const o = [];
        let s, l, c, m, h;
        for (s = 0,
        l = t.length; s < l; s++)
            c = t[s] * i,
            m = s < l - 1 ? t[s + 1] * i : r.length,
            h = Xi(r, c, m, i, !1),
            h === h.next && (h.steiner = !0),
            o.push(ts(h));
        for (o.sort(Zo),
        s = 0; s < o.length; s++)
            Jo(o[s], a),
            a = Gt(a, a.next);
        return a
    }
    function Zo(r, t) {
        return r.x - t.x
    }
    function Jo(r, t) {
        if (t = Yo(r, t),
        t) {
            const a = Zi(t, r);
            Gt(a, a.next)
        }
    }
    function Yo(r, t) {
        let a = t;
        const i = r.x
          , o = r.y;
        let s = -1 / 0, l;
        do {
            if (o <= a.y && o >= a.next.y && a.next.y !== a.y) {
                const w = a.x + (o - a.y) * (a.next.x - a.x) / (a.next.y - a.y);
                if (w <= i && w > s) {
                    if (s = w,
                    w === i) {
                        if (o === a.y)
                            return a;
                        if (o === a.next.y)
                            return a.next
                    }
                    l = a.x < a.next.x ? a : a.next
                }
            }
            a = a.next
        } while (a !== t);
        if (!l)
            return null;
        if (i === s)
            return l.prev;
        const c = l
          , m = l.x
          , h = l.y;
        let u = 1 / 0, g;
        for (a = l.next; a !== c; )
            i >= a.x && a.x >= m && i !== a.x && kt(o < h ? i : s, o, m, h, o < h ? s : i, o, a.x, a.y) && (g = Math.abs(o - a.y) / (i - a.x),
            (g < u || g === u && a.x > l.x) && Ht(a, r) && (l = a,
            u = g)),
            a = a.next;
        return l
    }
    function Ko(r, t, a, i) {
        let o = r;
        do
            o.z === null && (o.z = Zr(o.x, o.y, t, a, i)),
            o.prevZ = o.prev,
            o.nextZ = o.next,
            o = o.next;
        while (o !== r);
        o.prevZ.nextZ = null,
        o.prevZ = null,
        es(o)
    }
    function es(r) {
        let t, a, i, o, s, l, c, m, h = 1;
        do {
            for (a = r,
            r = null,
            s = null,
            l = 0; a; ) {
                for (l++,
                i = a,
                c = 0,
                t = 0; t < h && (c++,
                i = i.nextZ,
                !!i); t++)
                    ;
                for (m = h; c > 0 || m > 0 && i; )
                    c !== 0 && (m === 0 || !i || a.z <= i.z) ? (o = a,
                    a = a.nextZ,
                    c--) : (o = i,
                    i = i.nextZ,
                    m--),
                    s ? s.nextZ = o : r = o,
                    o.prevZ = s,
                    s = o;
                a = i
            }
            s.nextZ = null,
            h *= 2
        } while (l > 1);
        return r
    }
    function Zr(r, t, a, i, o) {
        return r = 32767 * (r - a) * o,
        t = 32767 * (t - i) * o,
        r = (r | r << 8) & 16711935,
        r = (r | r << 4) & 252645135,
        r = (r | r << 2) & 858993459,
        r = (r | r << 1) & 1431655765,
        t = (t | t << 8) & 16711935,
        t = (t | t << 4) & 252645135,
        t = (t | t << 2) & 858993459,
        t = (t | t << 1) & 1431655765,
        r | t << 1
    }
    function ts(r) {
        let t = r
          , a = r;
        do
            t.x < a.x && (a = t),
            t = t.next;
        while (t !== r);
        return a
    }
    function kt(r, t, a, i, o, s, l, c) {
        return (o - l) * (t - c) - (r - l) * (s - c) >= 0 && (r - l) * (i - c) - (a - l) * (t - c) >= 0 && (a - l) * (s - c) - (o - l) * (i - c) >= 0
    }
    function rs(r, t) {
        return r.next.i !== t.i && r.prev.i !== t.i && !as(r, t) && Ht(r, t) && Ht(t, r) && is(r, t)
    }
    function Ae(r, t, a) {
        return (t.y - r.y) * (a.x - t.x) - (t.x - r.x) * (a.y - t.y)
    }
    function ht(r, t) {
        return r.x === t.x && r.y === t.y
    }
    function Qi(r, t, a, i) {
        return ht(r, t) && ht(a, i) || ht(r, i) && ht(a, t) ? !0 : Ae(r, t, a) > 0 != Ae(r, t, i) > 0 && Ae(a, i, r) > 0 != Ae(a, i, t) > 0
    }
    function as(r, t) {
        let a = r;
        do {
            if (a.i !== r.i && a.next.i !== r.i && a.i !== t.i && a.next.i !== t.i && Qi(a, a.next, r, t))
                return !0;
            a = a.next
        } while (a !== r);
        return !1
    }
    function Ht(r, t) {
        return Ae(r.prev, r, r.next) < 0 ? Ae(r, t, r.next) >= 0 && Ae(r, r.prev, t) >= 0 : Ae(r, t, r.prev) < 0 || Ae(r, r.next, t) < 0
    }
    function is(r, t) {
        let a = r
          , i = !1;
        const o = (r.x + t.x) / 2
          , s = (r.y + t.y) / 2;
        do
            a.y > s != a.next.y > s && a.next.y !== a.y && o < (a.next.x - a.x) * (s - a.y) / (a.next.y - a.y) + a.x && (i = !i),
            a = a.next;
        while (a !== r);
        return i
    }
    function Zi(r, t) {
        const a = new Jr(r.i,r.x,r.y)
          , i = new Jr(t.i,t.x,t.y)
          , o = r.next
          , s = t.prev;
        return r.next = t,
        t.prev = r,
        a.next = o,
        o.prev = a,
        i.next = a,
        a.prev = i,
        s.next = i,
        i.prev = s,
        i
    }
    function za(r, t, a, i) {
        const o = new Jr(r,t,a);
        return i ? (o.next = i.next,
        o.prev = i,
        i.next.prev = o,
        i.next = o) : (o.prev = o,
        o.next = o),
        o
    }
    function $t(r) {
        r.next.prev = r.prev,
        r.prev.next = r.next,
        r.prevZ && (r.prevZ.nextZ = r.nextZ),
        r.nextZ && (r.nextZ.prevZ = r.prevZ)
    }
    function Jr(r, t, a) {
        this.i = r,
        this.x = t,
        this.y = a,
        this.prev = null,
        this.next = null,
        this.z = null,
        this.prevZ = null,
        this.nextZ = null,
        this.steiner = !1
    }
    ha.deviation = function(r, t, a, i) {
        const o = t?.length
          , s = o ? t[0] * a : r.length;
        let l = Math.abs(Yr(r, 0, s, a));
        if (o)
            for (let m = 0, h = t.length; m < h; m++) {
                const u = t[m] * a
                  , g = m < h - 1 ? t[m + 1] * a : r.length;
                l -= Math.abs(Yr(r, u, g, a))
            }
        let c = 0;
        for (let m = 0; m < i.length; m += 3) {
            const h = i[m] * a
              , u = i[m + 1] * a
              , g = i[m + 2] * a;
            c += Math.abs((r[h] - r[g]) * (r[u + 1] - r[h + 1]) - (r[h] - r[u]) * (r[g + 1] - r[h + 1]))
        }
        return l === 0 && c === 0 ? 0 : Math.abs((c - l) / l)
    }
    ;
    function Yr(r, t, a, i) {
        let o = 0;
        for (let s = t, l = a - i; s < a; s += i)
            o += (r[l] - r[s]) * (r[s + 1] + r[l + 1]),
            l = s;
        return o
    }
    ha.flatten = function(r) {
        const t = r[0][0].length
          , a = {
            vertices: [],
            holes: [],
            dimensions: t
        };
        let i = 0;
        for (let o = 0; o < r.length; o++) {
            for (let s = 0; s < r[o].length; s++)
                for (let l = 0; l < t; l++)
                    a.vertices.push(r[o][s][l]);
            o > 0 && (i += r[o - 1].length,
            a.holes.push(i))
        }
        return a
    }
    ;
    function va(r, t) {
        return r < t ? r : t
    }
    function Ia(r, t) {
        return r > t ? r : t
    }
    const e = {
        create(r, t) {
            return {
                x: r,
                y: t ?? r
            }
        },
        copy(r) {
            return {
                x: r.x,
                y: r.y
            }
        },
        set(r, t) {
            r.x = t.x,
            r.y = t.y
        },
        add(r, t) {
            return {
                x: r.x + t.x,
                y: r.y + t.y
            }
        },
        sub(r, t) {
            return {
                x: r.x - t.x,
                y: r.y - t.y
            }
        },
        mul(r, t) {
            return {
                x: r.x * t,
                y: r.y * t
            }
        },
        div(r, t) {
            return {
                x: r.x / t,
                y: r.y / t
            }
        },
        neg(r) {
            return {
                x: -r.x,
                y: -r.y
            }
        },
        lengthSqr(r) {
            return r.x * r.x + r.y * r.y
        },
        length(r) {
            return Math.sqrt(e.lengthSqr(r))
        },
        normalize(r) {
            const a = e.length(r);
            return {
                x: a > 1e-6 ? r.x / a : r.x,
                y: a > 1e-6 ? r.y / a : r.y
            }
        },
        distance(r, t) {
            const a = e.sub(r, t);
            return e.length(a)
        },
        manhattanDistance(r, t) {
            return Math.abs(r.x - t.x) + Math.abs(r.y - t.y)
        },
        midpoint(r, t) {
            return e.create((r.x + t.x) / 2, (r.y + t.y) / 2)
        },
        directionNormalized(r, t) {
            const a = e.sub(t, r);
            return e.normalize(a)
        },
        normalizeSafe(r, t={
            x: 1,
            y: 0
        }) {
            const i = e.length(r);
            return {
                x: i > 1e-6 ? r.x / i : t.x,
                y: i > 1e-6 ? r.y / i : t.y
            }
        },
        dot(r, t) {
            return r.x * t.x + r.y * t.y
        },
        perp(r) {
            return {
                x: -r.y,
                y: r.x
            }
        },
        proj(r, t) {
            return e.mul(t, e.dot(r, t) / e.dot(t, t))
        },
        rotate(r, t) {
            const a = Math.cos(t)
              , i = Math.sin(t);
            return {
                x: r.x * a - r.y * i,
                y: r.x * i + r.y * a
            }
        },
        mulElems(r, t) {
            return {
                x: r.x * t.x,
                y: r.y * t.y
            }
        },
        divElems(r, t) {
            return {
                x: r.x / t.x,
                y: r.y / t.y
            }
        },
        minElems(r, t) {
            return {
                x: va(r.x, t.x),
                y: va(r.y, t.y)
            }
        },
        maxElems(r, t) {
            return {
                x: Ia(r.x, t.x),
                y: Ia(r.y, t.y)
            }
        },
        randomUnit() {
            return e.normalizeSafe(e.create(Math.random() - .5, Math.random() - .5), e.create(1, 0))
        },
        lerp(r, t, a) {
            return e.add(e.mul(t, 1 - r), e.mul(a, r))
        },
        eq(r, t, a=1e-4) {
            return Math.abs(r.x - t.x) <= a && Math.abs(r.y - t.y) <= a
        }
    }
      , br = 1e-6
      , k = {
        clamp(r, t, a) {
            return r < a ? r > t ? r : t : a
        },
        v2Clamp(r, t, a) {
            let i, o, s, l;
            t.x > a.x ? (i = a.x,
            s = t.x) : (i = t.x,
            s = a.x),
            t.y > a.y ? (o = a.y,
            l = t.y) : (o = t.y,
            l = a.y);
            const c = r.x < s ? r.x > i ? r.x : i : s
              , m = r.y < l ? r.y > o ? r.y : o : l;
            return e.create(c, m)
        },
        min(r, t) {
            return r < t ? r : t
        },
        max(r, t) {
            return r > t ? r : t
        },
        lerp(r, t, a) {
            return t * (1 - r) + a * r
        },
        delerp(r, t, a) {
            return k.clamp((r - t) / (a - t), 0, 1)
        },
        v2lerp(r, t, a) {
            return e.create(k.lerp(r, t.x, a.x), k.lerp(r, t.y, a.y))
        },
        smoothstep(r, t, a) {
            const i = k.clamp((r - t) / (a - t), 0, 1);
            return i * i * (3 - 2 * i)
        },
        easeOutElastic(r, t=.3) {
            return Math.pow(2, r * -10) * Math.sin((r - t / 4) * (Math.PI * 2) / t) + 1
        },
        easeOutExpo(r) {
            return r === 1 ? 1 : 1 - Math.pow(2, r * -10)
        },
        easeInExpo(r) {
            return r === 0 ? 0 : Math.pow(2, (r - 1) * 10)
        },
        easeOutQuart(r) {
            return 1 - Math.pow(1 - r, 4)
        },
        remap(r, t, a, i, o) {
            const s = k.clamp((r - t) / (a - t), 0, 1);
            return k.lerp(s, i, o)
        },
        eqAbs(r, t, a=br) {
            return Math.abs(r - t) < a
        },
        eqRel(r, t, a=br) {
            return Math.abs(r - t) <= a * Math.max(Math.max(1, Math.abs(r)), Math.abs(t))
        },
        deg2rad(r) {
            return r * Math.PI / 180
        },
        deg2vec2(r) {
            return r *= Math.PI / 180,
            e.create(Math.cos(r), Math.sin(r))
        },
        rad2deg(r) {
            return r * 180 / Math.PI
        },
        rad2Direction(r) {
            return e.create(Math.cos(r), Math.sin(r))
        },
        rad2degFromDirection(r, t) {
            let i = Math.atan2(r, t) * 180 / Math.PI;
            return i < 0 && (i += 360),
            i
        },
        fract(r) {
            return r - Math.floor(r)
        },
        sign(r) {
            return r < 0 ? -1 : 1
        },
        mod(r, t) {
            return (r % t + t) % t
        },
        fmod(r, t) {
            return r - Math.floor(r / t) * t
        },
        angleDiff(r, t) {
            const a = k.fmod(t - r + Math.PI, Math.PI * 2) - Math.PI;
            return a < -Math.PI ? a + Math.PI * 2 : a
        },
        oriToRad(r) {
            return r % 4 * .5 * Math.PI
        },
        oriToAngle(r) {
            return r * (180 / Math.PI)
        },
        radToOri(r) {
            return Math.floor(k.fmod(r + Math.PI * .25, Math.PI * 2) / (Math.PI * .5))
        },
        quantize(r, t, a, i) {
            Oe(r >= t && r <= a);
            const o = (1 << i) - 1
              , c = (k.clamp(r, t, a) - t) / (a - t) * o + .5
              , m = c < 0 ? Math.ceil(c) : Math.floor(c);
            return t + m / o * (a - t)
        },
        v2Quantize(r, t, a, i, o, s) {
            return e.create(k.quantize(r.x, t, i, s), k.quantize(r.y, a, o, s))
        },
        rayLineIntersect(r, t, a, i) {
            const o = e.sub(i, a)
              , s = e.create(o.y, -o.x)
              , l = e.dot(t, s);
            if (Math.abs(l) <= br)
                return;
            const c = e.sub(a, r)
              , m = e.dot(s, c) / l
              , h = e.dot(e.create(t.y, -t.x), c) / l;
            return m >= 0 && h >= 0 && h <= 1 ? m : void 0
        },
        rayPolygonIntersect(r, t, a) {
            let i = Number.MAX_VALUE
              , o = !1;
            for (let s = 0, l = a.length - 1; s < a.length; l = s++) {
                const c = this.rayLineIntersect(r, t, a[l], a[s]);
                c !== void 0 && c < i && (o = !0,
                i = c)
            }
            return o ? i : void 0
        },
        pointInsidePolygon(r, t) {
            const {x: a} = r
              , {y: i} = r;
            let o = !1;
            const s = t.length;
            for (let l = 0, c = s - 1; l < s; c = l++) {
                const m = t[l].x
                  , h = t[l].y
                  , u = t[c].x
                  , g = t[c].y;
                h > i != g > i && a < (u - m) * (i - h) / (g - h) + m && (o = !o)
            }
            return o
        },
        distToSegmentSq(r, t, a) {
            const i = e.sub(a, t)
              , o = e.dot(e.sub(r, t), i) / e.dot(i, i)
              , s = e.add(t, e.mul(i, k.clamp(o, 0, 1)))
              , l = e.sub(s, r);
            return e.dot(l, l)
        },
        distToPolygon(r, t) {
            let a = Number.MAX_VALUE;
            for (let i = 0; i < t.length; i++) {
                const o = t[i]
                  , s = i === t.length - 1 ? t[0] : t[i + 1]
                  , l = k.distToSegmentSq(r, o, s);
                l < a && (a = l)
            }
            return Math.sqrt(a)
        },
        polygonArea(r) {
            const t = [];
            for (let o = 0; o < r.length; o++)
                t.push(r[o].x),
                t.push(r[o].y);
            const a = ha(t);
            let i = 0;
            for (let o = 0; o < a.length; o += 3) {
                const s = a[o + 0]
                  , l = a[o + 1]
                  , c = a[o + 2]
                  , m = t[s * 2 + 0]
                  , h = t[s * 2 + 1]
                  , u = t[l * 2 + 0]
                  , g = t[l * 2 + 1]
                  , w = t[c * 2 + 0]
                  , y = t[c * 2 + 1];
                i += Math.abs((m * g + u * y + w * h - u * h - w * g - m * y) * .5)
            }
            return i
        },
        lineIntersects(r, t, a, i, o, s, l, c) {
            if (r === a && t === i || o === l && s === c)
                return !1;
            const m = (c - s) * (a - r) - (l - o) * (i - t);
            if (m === 0)
                return !1;
            const h = ((l - o) * (t - s) - (c - s) * (r - o)) / m
              , u = ((a - r) * (t - s) - (i - t) * (r - o)) / m;
            if (h < 0 || h > 1 || u < 0 || u > 1)
                return !1;
            const g = r + h * (a - r)
              , w = t + h * (i - t);
            return {
                x: g,
                y: w
            }
        },
        addAdjust(r, t, a) {
            if (a === 0)
                return e.add(r, t);
            let i, o;
            switch (a) {
            case 1:
                i = -t.y,
                o = t.x;
                break;
            case 2:
                i = -t.x,
                o = -t.y;
                break;
            case 3:
                i = t.y,
                o = -t.x;
                break
            }
            return e.add(r, e.create(i, o))
        }
    };
    function Oe(r, t) {
        if (!r)
            throw t instanceof Error ? t : new Error(t ?? "Assertation failed")
    }
    function dr(r, t, a) {
        return f.mergeDeep({}, r[t], {
            baseType: t
        }, a)
    }
    const f = {
        sameLayer(r, t) {
            return (r & 1) === (t & 1) || r & 2 && t & 2
        },
        sameAudioLayer(r, t) {
            return r === t || r & 2 || t & 2
        },
        toGroundLayer(r) {
            return r & 1
        },
        toStairsLayer(r) {
            return r & 1
        },
        random(r, t) {
            return k.lerp(Math.random(), r, t)
        },
        randomInt(r, t) {
            return r = Math.ceil(r),
            t = Math.floor(t),
            Math.floor(Math.random() * (t - r + 1)) + r
        },
        randomPointInCircle(r, t=Math.random) {
            let a = t()
              , i = t();
            if (i < a) {
                const s = a;
                a = i,
                i = s
            }
            return e.create(i * r * Math.cos(2 * Math.PI * a / i), i * r * Math.sin(2 * Math.PI * a / i))
        },
        randomPointInAabb(r) {
            return e.create(f.random(r.min.x, r.max.x), f.random(r.min.y, r.max.y))
        },
        seededRand(r) {
            let t = r;
            return function(a=0, i=1) {
                t = t * 16807 % 2147483647;
                const o = t / 2147483647;
                return k.lerp(o, a, i)
            }
        },
        rgbToHsv(r, t, a) {
            r /= 255,
            t /= 255,
            a /= 255;
            const i = Math.max(r, t, a)
              , o = Math.min(r, t, a);
            let s = 0
              , l = 0;
            const c = i
              , m = i - o;
            if (l = i == 0 ? 0 : m / i,
            i == o)
                s = 0;
            else {
                switch (i) {
                case r:
                    s = (t - a) / m + (t < a ? 6 : 0);
                    break;
                case t:
                    s = (a - r) / m + 2;
                    break;
                case a:
                    s = (r - t) / m + 4;
                    break
                }
                s /= 6
            }
            return {
                h: s,
                s: l,
                v: c
            }
        },
        hsvToRgb(r, t, a) {
            let i = 0
              , o = 0
              , s = 0
              , l = 0
              , c = 0
              , m = 0
              , h = 0
              , u = 0;
            switch (l = Math.floor(r * 6),
            c = r * 6 - l,
            m = a * (1 - t),
            h = a * (1 - c * t),
            u = a * (1 - (1 - c) * t),
            l % 6) {
            case 0:
                i = a,
                o = u,
                s = m;
                break;
            case 1:
                i = h,
                o = a,
                s = m;
                break;
            case 2:
                i = m,
                o = a,
                s = u;
                break;
            case 3:
                i = m,
                o = h,
                s = a;
                break;
            case 4:
                i = u,
                o = m,
                s = a;
                break;
            case 5:
                i = a,
                o = m,
                s = h;
                break
            }
            return {
                r: Math.round(i * 255),
                g: Math.round(o * 255),
                b: Math.round(s * 255)
            }
        },
        adjustValue(r, t) {
            let a = r >> 16 & 255
              , i = r >> 8 & 255
              , o = r & 255;
            return a = Math.round(a * t),
            i = Math.round(i * t),
            o = Math.round(o * t),
            (a << 16) + (i << 8) + o
        },
        lerpColor(r, t, a) {
            const i = function(m) {
                return {
                    r: m.r ** 2.2,
                    g: m.g ** 2.2,
                    b: m.b ** 2.2
                }
            }
              , o = function(m) {
                return {
                    r: m.r ** .45454545454545453,
                    g: m.g ** .45454545454545453,
                    b: m.b ** .45454545454545453
                }
            }
              , s = i(f.intToRgb(t))
              , l = i(f.intToRgb(a));
            return f.rgbToInt(o({
                r: k.lerp(r, s.r, l.r),
                g: k.lerp(r, s.g, l.g),
                b: k.lerp(r, s.b, l.b)
            }))
        },
        rgbToInt(r) {
            return (r.r << 16) + (r.g << 8) + r.b
        },
        intToRgb(r) {
            return {
                r: r >> 16 & 255,
                g: r >> 8 & 255,
                b: r & 255
            }
        },
        rgbToHex(r) {
            return `#${(16777216 + f.rgbToInt(r)).toString(16).slice(-6)}`
        },
        hexToRgb(r) {
            const t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r);
            return t ? {
                r: parseInt(t[1], 16),
                g: parseInt(t[2], 16),
                b: parseInt(t[3], 16)
            } : null
        },
        intToHex(r) {
            return `#${(16777216 + r).toString(16).slice(-6)}`
        },
        hexToInt(r) {
            return parseInt(r.slice(-6), 16)
        },
        updateColor(r, t) {
            r /= 100;
            const a = f.hexToRgb(t)
              , i = 0;
            return a.r = Math.round(a.r * r + i * (1 - r)),
            a.g = Math.round(a.g * r + i * (1 - r)),
            a.b = Math.round(a.b * r + i * (1 - r)),
            f.rgbToInt(a)
        },
        isObject(r) {
            return r && (typeof r > "u" ? "undefined" : typeof r) == "object" && !Array.isArray(r)
        },
        mergeDeep(r, ...t) {
            if (!t.length)
                return r;
            const a = t.shift();
            if (this.isObject(r) && this.isObject(a))
                for (const i in a)
                    this.isObject(a[i]) ? (r[i] || Object.assign(r, {
                        [i]: {}
                    }),
                    this.mergeDeep(r[i], a[i])) : Object.assign(r, {
                        [i]: a[i]
                    });
            return this.mergeDeep(r, ...t)
        },
        cloneDeep(r) {
            return f.mergeDeep({}, r)
        },
        shuffleArray(r) {
            for (let t = r.length - 1; t >= 0; t--) {
                const a = Math.floor(Math.random() * (t + 1))
                  , i = r[t];
                r[t] = r[a],
                r[a] = i
            }
        },
        wrappedArrayIndex(r, t) {
            return r.at(t % r.length)
        },
        weightedRandom(r, t=Math.random) {
            let a = 0;
            for (let s = 0; s < r.length; s++)
                a += r[s].weight;
            let i = t() * a
              , o = 0;
            for (; i > r[o].weight; )
                i -= r[o].weight,
                o++;
            return r[o]
        }
    };
    function Ye(r, t) {
        return dr(Ji, r, t)
    }
    const Ji = {
        bullet_mp5: {
            type: "bullet",
            damage: 11,
            obstacleDamage: 1,
            falloff: .8,
            distance: 100,
            speed: 85,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_ak47: {
            type: "bullet",
            damage: 13.5,
            obstacleDamage: 1,
            falloff: .9,
            distance: 200,
            speed: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_scar: {
            type: "bullet",
            damage: 15,
            obstacleDamage: 1,
            falloff: .85,
            distance: 175,
            speed: 108,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_an94: {
            type: "bullet",
            damage: 17.5,
            obstacleDamage: 1,
            falloff: .94,
            distance: 300,
            speed: 110,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_groza: {
            type: "bullet",
            damage: 12.5,
            obstacleDamage: 1,
            falloff: .85,
            distance: 175,
            speed: 104,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_grozas: {
            type: "bullet",
            damage: 13,
            obstacleDamage: 1,
            falloff: .87,
            distance: 185,
            speed: 106,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_model94: {
            type: "bullet",
            damage: 44,
            obstacleDamage: 1,
            falloff: .75,
            distance: 175,
            speed: 156,
            variance: 0,
            shrapnel: !1,
            tracerColor: "45acp",
            tracerWidth: .12,
            tracerLength: 1
        },
        bullet_blr: {
            type: "bullet",
            damage: 56,
            obstacleDamage: 1,
            falloff: .9,
            distance: 400,
            speed: 160,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .14,
            tracerLength: 1
        },
        bullet_mosin: {
            type: "bullet",
            damage: 72,
            obstacleDamage: 1.5,
            falloff: .95,
            distance: 500,
            speed: 178,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .16,
            tracerLength: 1
        },
        bullet_sv98: {
            type: "bullet",
            damage: 80,
            obstacleDamage: 1.5,
            falloff: .96,
            distance: 520,
            speed: 182,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .2,
            tracerLength: 1
        },
        bullet_awc: {
            type: "bullet",
            damage: 180,
            obstacleDamage: 1.5,
            falloff: .94,
            distance: 300,
            speed: 136,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "308sub",
            tracerWidth: .2,
            tracerLength: 1
        },
        bullet_scarssr: {
            type: "bullet",
            damage: 81,
            obstacleDamage: 1.5,
            falloff: .85,
            distance: 200,
            speed: 108,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "308sub",
            tracerWidth: .14,
            tracerLength: 1
        },
        bullet_m39: {
            type: "bullet",
            damage: 27,
            obstacleDamage: 1,
            falloff: .9,
            distance: 400,
            speed: 125,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_svd: {
            type: "bullet",
            damage: 36,
            obstacleDamage: 1,
            falloff: .9,
            distance: 425,
            speed: 127,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_garand: {
            type: "bullet",
            damage: 35,
            obstacleDamage: 1,
            falloff: .9,
            distance: 400,
            speed: 130,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .12,
            tracerLength: .9
        },
        bullet_buckshot: {
            type: "bullet",
            damage: 12.5,
            obstacleDamage: 1,
            falloff: .3,
            speed: 66,
            distance: 27,
            variance: 0,
            shrapnel: !1,
            tracerColor: "12gauge",
            tracerWidth: .1,
            tracerLength: .8
        },
        bullet_flechette: {
            type: "bullet",
            damage: 8.75,
            obstacleDamage: 1,
            falloff: .85,
            speed: 88,
            distance: 45,
            variance: 0,
            shrapnel: !1,
            tracerColor: "12gauge",
            tracerWidth: .075,
            tracerLength: .5
        },
        bullet_frag: {
            type: "bullet",
            damage: 12,
            obstacleDamage: 1,
            falloff: .3,
            speed: 72,
            distance: 24,
            variance: 0,
            shrapnel: !1,
            tracerColor: "frag",
            tracerWidth: .1,
            tracerLength: .5,
            onHit: "explosion_usas"
        },
        bullet_slug: {
            type: "bullet",
            damage: 77,
            obstacleDamage: 1,
            falloff: .85,
            speed: 118,
            distance: 60,
            variance: 0,
            shrapnel: !1,
            tracerColor: "12gauge",
            tracerWidth: .2,
            tracerLength: .4
        },
        bullet_birdshot: {
            type: "bullet",
            damage: 4,
            obstacleDamage: 1,
            falloff: .25,
            speed: 66,
            distance: 25,
            variance: 0,
            shrapnel: !1,
            tracerColor: "12gauge",
            tracerWidth: .1,
            tracerLength: .1
        },
        bullet_m9: {
            type: "bullet",
            damage: 14,
            obstacleDamage: 1,
            falloff: .7,
            speed: 85,
            distance: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_m9_cursed: {
            type: "bullet",
            damage: 14,
            obstacleDamage: 1,
            falloff: .7,
            speed: 85,
            distance: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm_cursed",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_m93r: {
            type: "bullet",
            damage: 12,
            obstacleDamage: 1,
            falloff: .7,
            speed: 85,
            distance: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_p30l: {
            type: "bullet",
            damage: 21,
            obstacleDamage: 1,
            falloff: .75,
            speed: 94,
            distance: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .12,
            tracerLength: .8
        },
        bullet_ot38: {
            type: "bullet",
            damage: 26,
            obstacleDamage: 1,
            falloff: .75,
            speed: 112,
            distance: 125,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .09,
            tracerLength: .8
        },
        bullet_ots38: {
            type: "bullet",
            damage: 32,
            obstacleDamage: 1,
            falloff: .77,
            speed: 115,
            distance: 135,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .8
        },
        bullet_colt45: {
            type: "bullet",
            damage: 29,
            obstacleDamage: 1,
            falloff: .7,
            speed: 106,
            distance: 110,
            variance: 0,
            shrapnel: !1,
            tracerColor: "45acp",
            tracerWidth: .09,
            tracerLength: .8
        },
        bullet_m1911: {
            type: "bullet",
            damage: 16,
            obstacleDamage: 1,
            falloff: .7,
            speed: 80,
            distance: 88,
            variance: 0,
            shrapnel: !1,
            tracerColor: "45acp",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_m1a1: {
            type: "bullet",
            damage: 13,
            obstacleDamage: 1,
            falloff: .8,
            distance: 88,
            speed: 80,
            variance: 0,
            shrapnel: !1,
            tracerColor: "45acp",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_mkg45: {
            type: "bullet",
            damage: 28,
            obstacleDamage: 1,
            falloff: .75,
            distance: 145,
            speed: 126,
            variance: 0,
            shrapnel: !1,
            tracerColor: "45acp",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_deagle: {
            type: "bullet",
            damage: 35,
            obstacleDamage: 1,
            falloff: .75,
            speed: 115,
            distance: 120,
            variance: 0,
            shrapnel: !1,
            tracerColor: "50AE",
            tracerWidth: .12,
            tracerLength: .8
        },
        bullet_mac10: {
            type: "bullet",
            damage: 9.25,
            obstacleDamage: 1,
            falloff: .6,
            distance: 50,
            speed: 75,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_ump9: {
            type: "bullet",
            damage: 15,
            obstacleDamage: 1,
            falloff: .75,
            distance: 100,
            speed: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_vector: {
            type: "bullet",
            damage: 7.5,
            obstacleDamage: 1,
            falloff: .6,
            distance: 46,
            speed: 88,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_vector45: {
            type: "bullet",
            damage: 9.5,
            obstacleDamage: 1,
            falloff: .6,
            distance: 45,
            speed: 82,
            variance: 0,
            shrapnel: !1,
            tracerColor: "45acp",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_scorpion: {
            type: "bullet",
            damage: 10.75,
            obstacleDamage: 1,
            falloff: .77,
            distance: 120,
            speed: 90,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_vss: {
            type: "bullet",
            damage: 22,
            obstacleDamage: 1,
            falloff: .8,
            distance: 125,
            speed: 95,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .8
        },
        bullet_dp28: {
            type: "bullet",
            damage: 14,
            obstacleDamage: 1.5,
            falloff: .9,
            distance: 225,
            speed: 110,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_bar: {
            type: "bullet",
            damage: 17.5,
            obstacleDamage: 1.75,
            falloff: .9,
            distance: 275,
            speed: 114,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_pkp: {
            type: "bullet",
            damage: 18,
            obstacleDamage: 2,
            falloff: .9,
            distance: 200,
            speed: 120,
            variance: 0,
            shrapnel: !1,
            tracerColor: "762mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_glock: {
            type: "bullet",
            damage: 9,
            obstacleDamage: 1,
            falloff: .5,
            speed: 70,
            distance: 44,
            variance: 0,
            shrapnel: !1,
            tracerColor: "9mm",
            tracerWidth: .1,
            tracerLength: .7
        },
        bullet_famas: {
            type: "bullet",
            damage: 17,
            obstacleDamage: 1,
            falloff: .8,
            distance: 150,
            speed: 110,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_hk416: {
            type: "bullet",
            damage: 11,
            obstacleDamage: 1,
            falloff: .85,
            distance: 175,
            speed: 105,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_m4a1: {
            type: "bullet",
            damage: 14,
            obstacleDamage: 1,
            falloff: .82,
            distance: 165,
            speed: 98,
            variance: 0,
            shrapnel: !1,
            suppressed: !0,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_mk12: {
            type: "bullet",
            damage: 22.5,
            obstacleDamage: 1,
            falloff: .9,
            distance: 400,
            speed: 132,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_l86: {
            type: "bullet",
            damage: 26.5,
            obstacleDamage: 1,
            falloff: .9,
            distance: 425,
            speed: 134,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_m249: {
            type: "bullet",
            damage: 14,
            obstacleDamage: 1.75,
            falloff: .9,
            distance: 220,
            speed: 125,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_qbb97: {
            type: "bullet",
            damage: 14,
            obstacleDamage: 1.5,
            falloff: .9,
            distance: 200,
            speed: 118,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .1,
            tracerLength: .9
        },
        bullet_scout: {
            type: "bullet",
            damage: 56,
            obstacleDamage: 1,
            falloff: .92,
            distance: 450,
            speed: 164,
            variance: 0,
            shrapnel: !1,
            tracerColor: "556mm",
            tracerWidth: .14,
            tracerLength: .95
        },
        bullet_flare: {
            type: "bullet",
            damage: 0,
            obstacleDamage: 1,
            falloff: 10,
            distance: 16,
            speed: 4,
            variance: 0,
            shrapnel: !1,
            tracerColor: "flare",
            tracerWidth: .3,
            tracerLength: 1.2,
            flareColor: 16733184,
            addFlare: !0,
            maxFlareScale: 2,
            skipCollision: !0
        },
        bullet_potato: {
            type: "bullet",
            damage: 0,
            obstacleDamage: 1,
            falloff: 1,
            distance: 1,
            speed: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "invis",
            tracerWidth: 0,
            tracerLength: 1.2,
            skipCollision: !0
        },
        bullet_bugle: {
            type: "bullet",
            damage: 0,
            obstacleDamage: 1,
            falloff: 1,
            distance: 1,
            speed: 100,
            variance: 0,
            shrapnel: !1,
            tracerColor: "invis",
            tracerWidth: 0,
            tracerLength: 1.2,
            skipCollision: !0
        },
        shrapnel_barrel: {
            type: "bullet",
            damage: 2,
            obstacleDamage: 1,
            falloff: 1,
            speed: 20,
            distance: 8,
            variance: 1.5,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .125,
            tracerLength: .6
        },
        shrapnel_stove: {
            type: "bullet",
            damage: 5,
            obstacleDamage: 2.5,
            falloff: 1,
            speed: 30,
            distance: 24,
            variance: 1.5,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .125,
            tracerLength: .6
        },
        shrapnel_frag: {
            type: "bullet",
            damage: 20,
            obstacleDamage: 1,
            falloff: 1,
            speed: 20,
            distance: 8,
            variance: 1.5,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .125,
            tracerLength: .6
        },
        shrapnel_strobe: {
            type: "bullet",
            damage: 3,
            obstacleDamage: 1,
            falloff: 1,
            speed: 20,
            distance: 3,
            variance: 1.5,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .1,
            tracerLength: .3
        },
        shrapnel_usas: {
            type: "bullet",
            damage: 5,
            obstacleDamage: 1,
            falloff: 1,
            speed: 20,
            distance: 5,
            variance: 1.2,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .1,
            tracerLength: .5
        },
        shrapnel_mirv_mini: {
            type: "bullet",
            damage: 6,
            obstacleDamage: 1,
            falloff: 1,
            speed: 20,
            distance: 5,
            variance: 1.3,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .1,
            tracerLength: .5
        },
        shrapnel_bomb_iron: {
            type: "bullet",
            damage: 10,
            obstacleDamage: 1,
            falloff: 1,
            speed: 24,
            distance: 12,
            variance: 1.5,
            shrapnel: !0,
            tracerColor: "shrapnel",
            tracerWidth: .125,
            tracerLength: .6
        }
    }
      , os = {
        bullet_mp5_bonus: Ye("bullet_mp5", {
            speed: 106.25,
            distance: 125
        }),
        bullet_m9_bonus: Ye("bullet_m9", {
            speed: 106.25,
            distance: 125
        }),
        bullet_mac10_bonus: Ye("bullet_mac10", {
            speed: 93.75,
            distance: 62.5
        }),
        bullet_ump9_bonus: Ye("bullet_ump9", {
            speed: 125,
            distance: 125
        }),
        bullet_vector_bonus: Ye("bullet_vector", {
            speed: 110,
            distance: 57.5
        }),
        bullet_glock_bonus: Ye("bullet_glock", {
            speed: 87.5,
            distance: 55
        }),
        bullet_m93r_bonus: Ye("bullet_m93r", {
            speed: 106.25,
            distance: 125
        }),
        bullet_scorpion_bonus: Ye("bullet_scorpion", {
            speed: 112.5,
            distance: 150,
            tracerColor: "9mm_suppressed_bonus"
        }),
        bullet_vss_bonus: Ye("bullet_vss", {
            speed: 118.75,
            distance: 156.25,
            tracerColor: "9mm_suppressed_bonus"
        }),
        bullet_p30l_bonus: Ye("bullet_p30l", {
            speed: 117.5,
            distance: 125
        })
    }
      , Xt = {
        ...Ji,
        ...os
    }
      , nr = {
        crosshair_default: {
            type: "crosshair",
            name: "Default",
            rarity: 0,
            cursor: "crosshair",
            texture: "crosshair000.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path fill="white" paint-order="fill markers stroke" d="M7.938 4.233h1.058V12.7H7.938z"/><path fill="white" paint-order="fill markers stroke" d="M12.7 7.937v1.058H4.233V7.937z"/></svg>'
        },
        crosshair_001: {
            type: "crosshair",
            name: "Style 001",
            rarity: 1,
            texture: "crosshair001.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M7.693.215v1.471A6.829 6.829 0 0 0 1.69 7.693H.215V9.24h1.471a6.829 6.829 0 0 0 6.007 6.003v1.475H9.24v-1.47a6.829 6.829 0 0 0 6.003-6.008h1.475V7.693h-1.47A6.829 6.829 0 0 0 9.24 1.69V.215zm0 2.745v1.897H9.24V2.96a5.567 5.567 0 0 1 4.734 4.733h-1.897V9.24h1.896a5.567 5.567 0 0 1-4.733 4.734v-1.897H7.693v1.896A5.567 5.567 0 0 1 2.96 9.24h1.897V7.693H2.96A5.567 5.567 0 0 1 7.693 2.96z" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_005: {
            type: "crosshair",
            name: "Style 005",
            rarity: 1,
            texture: "crosshair005.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M.53 3.704L3.703.53l4.763 4.763L13.229.529l3.175 3.175-4.762 4.763 4.762 4.762-3.175 3.175-4.762-4.762-4.763 4.762L.53 13.23l4.763-4.762L.529 3.704" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_007: {
            type: "crosshair",
            name: "Style 007",
            rarity: 1,
            texture: "crosshair007.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M9.091.345v4.998H7.842V.345h1.25m2.498 7.497h4.998v1.25H11.59v-1.25M9.091 11.59v4.998H7.842V11.59h1.25M.344 7.842h4.998v1.25H.345v-1.25" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_010: {
            type: "crosshair",
            name: "Style 010",
            rarity: 1,
            texture: "crosshair010.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.98.265v4.1H7.953v-4.1h1.025m0 12.303v4.1H7.954v-4.1h1.025M.265 7.954h4.1v1.025h-4.1V7.954m12.303 0h4.1v1.025h-4.1V7.954M8.98 8.467q0 .218-.154.359-.141.153-.36.153-.217 0-.371-.153-.141-.141-.141-.36 0-.217.141-.371.154-.141.372-.141t.359.141q.153.154.153.372" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_022: {
            type: "crosshair",
            name: "Style 022",
            rarity: 1,
            texture: "crosshair022.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.467 7.408l1.587 1.588-.529.529-1.058-1.058-1.059 1.058-.529-.53 1.588-1.587" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_027: {
            type: "crosshair",
            name: "Style 027",
            rarity: 1,
            texture: "crosshair027.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M2.117 1.058H6.35v1.059H2.117V6.35H1.058V2.117q0-.437.305-.741.317-.318.754-.318m0 14.817q-.437 0-.754-.318-.305-.304-.305-.74v-4.234h1.059v4.234H6.35v1.058H2.117m12.7-14.817q.436 0 .754.318.304.304.304.74V6.35h-1.058V2.117h-4.234V1.058h4.234m1.058 13.759q0 .436-.304.74-.318.318-.754.318h-4.234v-1.058h4.234v-4.234h1.058v4.234M8.996 6.88v1.057h1.058v1.059H8.996v1.058H7.937V8.996H6.88V7.937h1.058V6.88h1.059" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_038: {
            type: "crosshair",
            name: "Style 038",
            rarity: 1,
            texture: "crosshair038.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M4.233 6.88V5.82l1.588-1.587h1.058v1.059H6.35L5.292 6.35v.53H4.233m4.763 1.587q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.146-.145-.146-.37t.146-.384q.159-.146.384-.146t.37.146q.159.159.159.384M12.7 6.879h-1.058V6.35l-1.059-1.058h-.529V4.233h1.059L12.7 5.821v1.058m0 3.175v1.059L11.113 12.7h-1.059v-1.058h.53l1.058-1.059v-.529H12.7m-8.467 0h1.059v.53l1.058 1.058h.53V12.7H5.82l-1.587-1.587v-1.059" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_040: {
            type: "crosshair",
            name: "Style 040",
            rarity: 1,
            texture: "crosshair040.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M11.642 4.233q.436 0 .754.318.304.304.304.74v2.117h-1.058V5.292H9.525V4.233h2.117m-.53 3.704h2.117v1.059h-2.116V7.937m.529 4.763H9.525v-1.058h2.117V9.525H12.7v2.117q0 .436-.304.74-.318.318-.754.318M7.937 5.82V3.705h1.059v2.117H7.937M5.292 4.233h2.116v1.059H5.292v2.116H4.233V5.292q0-.437.305-.741.317-.318.754-.318M3.704 7.937h2.117v1.059H3.704V7.937M5.292 12.7q-.437 0-.754-.318-.305-.304-.305-.74V9.525h1.059v2.117h2.116V12.7H5.292m2.645-1.587h1.059v2.116H7.937v-2.116" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_045: {
            type: "crosshair",
            name: "Style 045",
            rarity: 1,
            texture: "crosshair045.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M9.79 3.44l3.704 3.704-.384.383-3.704-3.704.384-.383M8.73 5.292v1.587h-.529V5.292h.53M3.44 7.144L7.144 3.44l.37.37L3.81 7.514l-.37-.37m5.556 1.323q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.146-.145-.146-.37t.146-.384q.159-.146.384-.146t.37.146q.159.159.159.384m-3.704-.265h1.587v.53H5.292v-.53m4.762 0h1.588v.53h-1.588v-.53m-1.323 1.852v1.588h-.529v-1.588h.53m4.762-.264L9.79 13.494l-.37-.37 3.703-3.705.37.37m-6.35 3.705L3.44 9.79l.37-.37 3.704 3.703-.37.37" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_051: {
            type: "crosshair",
            name: "Style 051",
            rarity: 1,
            texture: "crosshair051.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M13.758 3.704L11.113 6.35h-.53v-.53l2.646-2.645.53.53m-10.584 0l.53-.53L6.35 5.821v.529h-.53L3.176 3.704m5.82 4.763l.53.529v.529h-.53l-.528-.53-.53.53h-.529v-.53l.53-.528-.53-.53v-.529h.53l.529.53.529-.53h.529v.53l-.53.529m4.763 4.762l-.529.53-2.646-2.646v-.53h.53l2.645 2.646m-10.583 0l2.646-2.646h.529v.53l-2.646 2.645-.529-.529" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_064: {
            type: "crosshair",
            name: "Style 064",
            rarity: 1,
            texture: "crosshair064.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M7.937 0v.546c-1.969.116-3.667.88-5.093 2.298C1.426 4.27.662 5.968.546 7.937H0v1.059h.546c.116 1.968.88 3.662 2.298 5.08 1.426 1.426 3.124 2.195 5.093 2.31v.547h1.059v-.546c1.968-.117 3.662-.886 5.08-2.311 1.425-1.418 2.194-3.112 2.31-5.08h.547V7.937h-.546c-.116-1.969-.885-3.667-2.311-5.093C12.658 1.427 10.964.662 8.996.546V0H7.937zm0 1.607v2.125c-1.087.11-2.031.562-2.83 1.361l-.014.014c-.799.799-1.251 1.743-1.36 2.83H1.606c.114-1.677.777-3.124 1.991-4.339 1.215-1.214 2.662-1.877 4.34-1.99zm1.059 0c1.678.114 3.125.777 4.34 1.991 1.214 1.215 1.876 2.662 1.99 4.34h-2.125c-.11-1.09-.568-2.038-1.374-2.845-.8-.799-1.743-1.251-2.831-1.36V1.606zM7.937 4.801V6.35h1.059V4.8a3.547 3.547 0 0 1 2.09 1.047c.595.595.941 1.293 1.047 2.09h-1.55v1.059h1.55c-.107.79-.453 1.483-1.047 2.077l-.013.013c-.594.594-1.287.94-2.077 1.046v-1.549H7.937v1.55a3.547 3.547 0 0 1-2.09-1.047 3.547 3.547 0 0 1-1.046-2.09H6.35V7.937H4.8a3.547 3.547 0 0 1 1.047-2.09 3.547 3.547 0 0 1 2.09-1.046zm-6.33 4.195h2.125c.11 1.088.562 2.032 1.361 2.83.807.807 1.756 1.265 2.844 1.375v2.125c-1.677-.114-3.124-.776-4.339-1.99-1.214-1.215-1.877-2.662-1.99-4.34zm11.594 0h2.125c-.114 1.678-.776 3.125-1.99 4.34-1.215 1.214-2.662 1.876-4.34 1.99v-2.125c1.08-.112 2.025-.569 2.83-1.374.806-.806 1.263-1.75 1.375-2.831z" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_080: {
            type: "crosshair",
            name: "Style 080",
            rarity: 1,
            texture: "crosshair080.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M3.598 3.598q-1.627 1.628-1.931 3.81H.595q.318-2.619 2.25-4.564Q4.788.913 7.407.595v1.072q-2.182.304-3.81 1.931m9.737 9.737q1.627-1.627 1.945-3.81h1.058q-.317 2.62-2.262 4.55-1.932 1.946-4.551 2.263V15.28q2.183-.318 3.81-1.945m0-9.737q-1.627-1.627-3.81-1.931V.595q2.62.318 4.55 2.25 1.946 1.944 2.263 4.563H15.28q-.318-2.182-1.945-3.81M6.879 6.88h1.058v1.058H6.88V6.88m2.117 0h1.058v1.058H8.996V6.88m0 2.117h1.058v1.058H8.996V8.996m-2.117 0h1.058v1.058H6.88V8.996M3.6 13.335q1.627 1.627 3.81 1.945v1.058q-2.62-.317-4.565-2.262Q.913 12.144.595 9.525h1.072q.304 2.183 1.931 3.81" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_086: {
            type: "crosshair",
            name: "Style 086",
            rarity: 1,
            texture: "crosshair086.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M16.528 1.413L11.49 6.451h-1.008V5.444L15.52.406l1.008 1.007m-16.122 0L1.413.406l5.038 5.038V6.45H5.444L.406 1.413m0 14.107l5.038-5.038H6.45v1.008l-5.038 5.038L.406 15.52m16.122 0l-1.008 1.008-5.038-5.038v-1.008h1.008l5.038 5.038" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_094: {
            type: "crosshair",
            name: "Style 094",
            rarity: 1,
            texture: "crosshair094.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.467 1.587q-2.077 0-3.705 1.059l-.754-.754Q5.953.529 8.467.529q2.513 0 4.471 1.363l-.767.754q-1.627-1.059-3.704-1.059m6.879 6.88q0-2.077-1.059-3.705l.768-.754q1.35 1.945 1.35 4.459 0 2.513-1.35 4.471l-.768-.767q1.059-1.627 1.059-3.704m1.058-6.88L13.23 4.762h-1.058V3.704L15.346.53l1.058 1.058M1.587.53l3.175 3.175v1.058H3.704L.53 1.587 1.587.53m0 7.938q0 2.077 1.059 3.704l-.754.767Q.529 10.98.529 8.467q0-2.514 1.363-4.459l.754.754Q1.587 6.39 1.587 8.467m6.35 0l.53-.53.529.53-.53.529-.529-.53m.53 6.88q2.077 0 3.704-1.059l.767.768q-1.958 1.35-4.471 1.35-2.514 0-4.459-1.35l.754-.768q1.628 1.059 3.705 1.059m-6.88 1.058L.53 15.346l3.175-3.175h1.058v1.058l-3.175 3.175m13.759 0L12.17 13.23v-1.058h1.058l3.175 3.175-1.058 1.058" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_098: {
            type: "crosshair",
            name: "Style 098",
            rarity: 1,
            texture: "crosshair098.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.996 8.467q0 .172-.093.304l-.066.066q-.145.159-.37.159t-.384-.159l-.053-.066q-.093-.132-.093-.304 0-.225.146-.384.159-.146.384-.146t.37.146q.159.159.159.384m-5.821 3.175h10.583L8.467 2.646l-5.292 8.996M8.467.529L15.875 12.7H1.058L8.467.53" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_101: {
            type: "crosshair",
            name: "Style 101",
            rarity: 1,
            texture: "crosshair101.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M6.588 6.588l-.013.013q-.754.78-.754 1.866v.013q0 .542.185 1.005.198.463.582.86l.066.066q.754.702 1.813.702 1.058 0 1.812-.715l.053-.053.013-.013q.384-.384.582-.86.186-.463.186-1.005 0-1.098-.768-1.879-.582-.582-1.35-.714L8.48 5.82h-.013l-.53.053q-.754.132-1.336.7l-.013.014m1.35-4.471h1.058v2.685q1.204.146 2.09 1.032 1.085 1.085 1.085 2.633 0 .926-.397 1.693l2.222 1.773-.767.767-2.116-1.64-.027.026q-1.085 1.085-2.62 1.085-1.547 0-2.632-1.085l-.026-.026-2.104 1.64-.767-.767 2.222-1.773q-.396-.767-.396-1.693 0-1.535 1.071-2.62l.013-.013q.887-.886 2.09-1.032V2.117m1.059 6.35q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.145-.145-.145-.37t.145-.384q.159-.146.384-.146t.37.146q.159.159.159.384" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_102: {
            type: "crosshair",
            name: "Style 102",
            rarity: 1,
            texture: "crosshair102.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M2.937 11.933l2.222-1.773q.238.476.649.9L3.704 12.7l-.767-.767m5.53-7.17l-.53.04V2.116h1.059v2.685l-.53-.04m.53 3.705q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.146-.145-.146-.37t.146-.384q.159-.145.384-.145t.37.145q.159.159.159.384m4.233 4.233l-2.116-1.64q.41-.424.661-.9l2.222 1.773-.767.767" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_109: {
            type: "crosshair",
            name: "Style 109",
            rarity: 1,
            texture: "crosshair109.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.467 15.346q1.918 0 3.452-.9l.53.913q-1.773 1.045-3.982 1.045-2.196 0-3.97-1.032l.53-.926q1.535.9 3.44.9m-6.88-6.88q0 1.932.913 3.467l-.913.529Q.53 10.689.53 8.467q0-2.21 1.045-3.97l.913.53q-.9 1.535-.9 3.44m13.759 0q0-1.919-.9-3.44l.913-.53q1.045 1.76 1.045 3.97 0 2.222-1.058 3.995l-.913-.53q.913-1.547.913-3.465m-6.88-6.88q-1.918 0-3.452.913l-.53-.926Q6.258.53 8.468.53q2.209 0 3.982 1.045l-.53.926q-1.534-.913-3.452-.913M6.588 6.588l-.013.013q-.754.78-.754 1.866v.013q0 1.085.767 1.865.78.768 1.879.768 1.098 0 1.865-.768l.013-.013q.768-.767.768-1.865 0-1.098-.768-1.879-.78-.767-1.865-.767h-.013q-1.085 0-1.866.754l-.013.013m2.408 1.879q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.146-.145-.146-.37t.146-.384q.159-.145.384-.145t.37.145q.159.159.159.384m2.09-2.633q1.085 1.085 1.085 2.633 0 1.534-1.085 2.619-1.085 1.085-2.62 1.085-1.547 0-2.632-1.085-1.072-1.085-1.072-2.62 0-1.534 1.072-2.619l.013-.013q1.085-1.072 2.62-1.072 1.534 0 2.619 1.072" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_118: {
            type: "crosshair",
            name: "Style 118",
            rarity: 1,
            texture: "crosshair118.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M13.335 3.598q-2.01-2.01-4.868-2.01-2.858 0-4.869 2.01-2.01 2.011-2.01 4.869 0 2.857 2.01 4.868 2.011 2.01 4.869 2.01 2.857 0 4.868-2.01 2.01-2.01 2.01-4.868 0-2.858-2.01-4.869m3.07 4.869q0 3.294-2.33 5.609-2.314 2.328-5.608 2.328-3.294 0-5.623-2.328Q.53 11.76.53 8.466q0-3.293 2.315-5.622Q5.173.53 8.467.53t5.609 2.315q2.328 2.329 2.328 5.623" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/><path d="M8.996 8.467q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.146-.145-.146-.37t.146-.384q.159-.146.384-.146t.37.146q.159.159.159.384" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_124: {
            type: "crosshair",
            name: "Style 124",
            rarity: 1,
            texture: "crosshair124.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.467 5.292L4.762 1.588l.53-.53 3.175 3.175 3.175-3.175.529.53-3.704 3.704M5.292 8.467L1.587 12.17l-.529-.53 3.175-3.174-3.175-3.175.53-.53 3.704 3.705m6.35 0l3.704-3.704.529.529L12.7 8.467l3.175 3.175-.53.529-3.703-3.704m-3.175 3.175l3.704 3.704-.53.529L8.468 12.7l-3.175 3.175-.53-.53 3.705-3.703M6.88 7.514l.634-.635.953.953.952-.953.635.635-.952.953.952.952-.635.635-.952-.952-.953.952-.635-.635.953-.952-.953-.953" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_125: {
            type: "crosshair",
            name: "Style 125",
            rarity: 1,
            texture: "crosshair125.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M9.525 8.467l1.587-1.588.53.53-1.059 1.058 1.059 1.058-.53.53-1.587-1.588M8.467 9.525l1.587 1.587-.529.53-1.058-1.059-1.059 1.059-.529-.53 1.588-1.587m0-2.117L6.879 5.821l.53-.53L8.466 6.35l1.058-1.058.53.529-1.588 1.587M7.408 8.467l-1.587 1.587-.53-.529L6.35 8.467 5.292 7.408l.529-.529 1.587 1.588" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_136: {
            type: "crosshair",
            name: "Style 136",
            rarity: 1,
            texture: "crosshair136.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.466.354A8.112 8.112 0 0 0 .354 8.466a8.112 8.112 0 0 0 8.112 8.113 8.112 8.112 0 0 0 8.113-8.113A8.112 8.112 0 0 0 8.466.354zm-.1 1.497v6.514H1.852a6.619 6.619 0 0 1 6.512-6.514zm.202.002a6.619 6.619 0 0 1 6.514 6.512H8.568V1.853zM1.85 8.568h6.514v6.512a6.619 6.619 0 0 1-6.514-6.512zm6.717 0h6.512a6.619 6.619 0 0 1-6.512 6.514V8.568z" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_158: {
            type: "crosshair",
            name: "Style 158",
            rarity: 1,
            texture: "crosshair158.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M8.98 8.46q0 .218-.141.372-.154.142-.372.142t-.36-.142q-.154-.154-.154-.372t.154-.359q.142-.154.36-.154t.372.154q.14.141.14.36m-7.698 0q0 1.808.834 3.271l.706-.706.988.988-1.604 1.579q-.475-.526-.834-1.104Q.255 10.706.255 8.46q0-2.976 1.95-5.132L3.848 4.97 2.82 5.997l-.744-.744Q1.28 6.69 1.28 8.46m14.371 0q0-1.77-.783-3.195l-.641.63L13.2 4.867l1.527-1.54q.513.564.886 1.18 1.064 1.758 1.064 3.952 0 2.207-1.077 3.965l-.886 1.168-1.63-1.63 1.027-1.026.744.744q.796-1.45.796-3.22" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_160: {
            type: "crosshair",
            name: "Style 160",
            rarity: 1,
            texture: "crosshair160.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M16.933.564L9.878 7.62l-.565-.564L16.37 0l.564.564M9.031 8.467q0 .24-.17.395-.154.17-.394.17-.24 0-.41-.17-.155-.155-.155-.395 0-.24.155-.41.17-.155.41-.155.24 0 .395.155.17.17.17.41m7.337 8.466L9.313 9.878l.565-.565 7.055 7.056-.564.564M0 .564L.564 0 7.62 7.056l-.564.564L0 .564m.564 16.37L0 16.368l7.056-7.056.564.565-7.056 7.055" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_173: {
            type: "crosshair",
            name: "Style 173",
            rarity: 1,
            texture: "crosshair173.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M11.642 8.467q0-.926-.45-1.654l-.609.595L9.525 6.35l.609-.595q-.741-.463-1.667-.463t-1.654.463l.595.595L6.35 7.408l-.595-.595q-.463.728-.463 1.654 0 .926.463 1.667l.595-.609 1.058 1.058-.595.609q.728.45 1.654.45.926 0 1.667-.45l-.609-.609 1.058-1.058.609.609q.45-.741.45-1.667m1.058 0q0 1.362-.754 2.42l.754.755-1.058 1.058-.754-.754-.305.198q-.939.556-2.116.556-1.363 0-2.421-.754l-.754.754-1.059-1.058.754-.754q-.754-1.059-.754-2.421 0-1.376.754-2.421l-.754-.754 1.059-1.059.754.754q1.045-.754 2.42-.754 1.178 0 2.117.556l.305.198.754-.754L12.7 5.292l-.754.754q.754 1.058.754 2.42" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_176: {
            type: "crosshair",
            name: "Style 176",
            rarity: 1,
            texture: "crosshair176.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M12.7 8.467q0 1.137-.53 2.063v1.112h-.912Q10.081 12.7 8.467 12.7q-1.628 0-2.805-1.058h-.9v-1.098q-.529-.926-.529-2.077 0-1.151.53-2.077V5.292h.886q1.19-1.059 2.818-1.059 1.614 0 2.804 1.059h.9V6.39q.529.926.529 2.077m-1.984-2.25q-.913-.899-2.17-.925h-.159q-1.27.026-2.17.926-.925.926-.925 2.249 0 1.31.926 2.249.9.9 2.17.926h.158q1.257-.027 2.17-.926.926-.94.926-2.25 0-1.322-.926-2.248m-1.72 2.249q0 .225-.159.37-.145.159-.37.159t-.384-.159q-.145-.145-.145-.37t.145-.384q.159-.146.384-.146t.37.146q.159.159.159.384" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_177: {
            type: "crosshair",
            name: "Style 177",
            rarity: 1,
            texture: "crosshair177.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M1.058 12.726l1.879-2.91.913.542-.675 1.31h1.588v1.058H1.058M8.467.556l1.733 2.91-.913.542-.82-1.362-.807 1.362-.913-.542 1.72-2.91m.529 7.937q0 .172-.093.304l-.066.067q-.145.158-.37.158t-.384-.158l-.053-.067q-.092-.132-.092-.304 0-.225.145-.384.159-.145.384-.145t.37.145q.159.16.159.384m6.879 4.233h-3.704v-1.058h1.587l-.661-1.31.913-.542 1.865 2.91" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_181: {
            type: "crosshair",
            name: "Style 181",
            rarity: 1,
            texture: "crosshair181.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M12.7 8.467q0 1.746-1.244 2.99-1.243 1.243-2.99 1.243-1.759 0-3.002-1.244-1.23-1.243-1.23-2.99 0-1.759 1.23-3.002 1.243-1.23 3.003-1.23 1.746 0 2.99 1.23Q12.7 6.707 12.7 8.467m-1.984-2.25q-.94-.925-2.25-.925-1.322 0-2.248.926-.926.926-.926 2.249 0 1.31.926 2.249.926.926 2.249.926 1.31 0 2.249-.926.926-.94.926-2.25 0-1.322-.926-2.248m-.133 2.249q0 .873-.621 1.495-.622.621-1.495.621-.873 0-1.495-.621-.622-.622-.622-1.495 0-.873.622-1.495.622-.622 1.495-.622.873 0 1.495.622.621.622.621 1.495m-.992-1.125q-.463-.463-1.124-.463-.662 0-1.125.463-.463.463-.463 1.125 0 .661.463 1.124.463.463 1.125.463.661 0 1.124-.463.463-.463.463-1.124 0-.662-.463-1.125" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        },
        crosshair_184: {
            type: "crosshair",
            name: "Style 184",
            rarity: 1,
            texture: "crosshair184.img",
            code: '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 16.933 16.933"><path d="M7.937 3.704h1.059V6.88H7.937V3.704M6.88 7.937v1.059H3.704V7.937H6.88m4.207-2.103q.688.688.953 1.574H10.9q-.185-.45-.556-.82-.37-.37-.82-.556V4.908q.873.251 1.561.926m-5.252.013l.013-.013q.688-.675 1.561-.926v1.124q-.436.186-.807.543l-.013.013-.013.013q-.357.37-.542.807H4.908q.251-.873.926-1.56m0 5.238q-.675-.688-.926-1.561h1.125q.185.45.555.82.37.37.82.556v1.138q-.886-.265-1.574-.953m3.162-2.62q0 .226-.159.371-.145.159-.37.159t-.384-.159q-.146-.145-.146-.37t.146-.384q.159-.146.384-.146t.37.146q.159.159.159.384m1.058.529V7.937h3.175v1.059h-3.175m1.032 2.09q-.688.688-1.561.94V10.9q.437-.185.807-.556l.013-.013q.37-.37.556-.807h1.124q-.251.873-.939 1.561m-3.149-1.032h1.059v3.175H7.937v-3.175" fill="white" stroke="black" stroke-width=".5" stroke-linecap="square"/></svg>'
        }
    };
    var et = (r => (r[r.Locked = 0] = "Locked",
    r[r.Faces = 1] = "Faces",
    r[r.Food = 2] = "Food",
    r[r.Animals = 3] = "Animals",
    r[r.Logos = 4] = "Logos",
    r[r.Other = 5] = "Other",
    r[r.Flags = 6] = "Flags",
    r[r.Default = 7] = "Default",
    r))(et || {});
    const bt = {
        emote_medical: {
            type: "emote",
            texture: "emote-medical-healthkit.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo: {
            type: "emote",
            texture: "ammo-box.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo9mm: {
            type: "emote",
            texture: "ammo-9mm.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo12gauge: {
            type: "emote",
            texture: "ammo-12gauge.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo762mm: {
            type: "emote",
            texture: "ammo-762mm.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo556mm: {
            type: "emote",
            texture: "ammo-556mm.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo50ae: {
            type: "emote",
            texture: "ammo-50AE.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo308sub: {
            type: "emote",
            texture: "ammo-308sub.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammoflare: {
            type: "emote",
            texture: "ammo-flare.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_ammo45acp: {
            type: "emote",
            texture: "ammo-45acp.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !0,
            noCustom: !0,
            category: 0
        },
        emote_loot: {
            type: "emote",
            texture: "",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            noCustom: !0,
            category: 0
        },
        emote_trick_nothing: {
            type: "emote",
            texture: "face-imp-trick.img",
            sound: "trick_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_trick_size: {
            type: "emote",
            texture: "face-imp-trick.img",
            sound: "trick_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_trick_m9: {
            type: "emote",
            texture: "face-imp-trick.img",
            sound: "trick_03",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_trick_chatty: {
            type: "emote",
            texture: "face-imp-trick.img",
            sound: "trick_02",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_trick_drain: {
            type: "emote",
            texture: "face-imp-trick.img",
            sound: "trick_02",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_treat_9mm: {
            type: "emote",
            texture: "face-angel-treat.img",
            sound: "treat_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_treat_12g: {
            type: "emote",
            texture: "face-angel-treat.img",
            sound: "treat_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_treat_556: {
            type: "emote",
            texture: "face-angel-treat.img",
            sound: "treat_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_treat_762: {
            type: "emote",
            texture: "face-angel-treat.img",
            sound: "treat_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_treat_super: {
            type: "emote",
            texture: "face-angel-treat.img",
            sound: "treat_01",
            channel: "ui",
            noCustom: !0,
            category: 0
        },
        emote_bugle_inspiration_red: {
            type: "emote",
            texture: "bugle-inspiration-red.img",
            sound: "emote_01",
            channel: "ui",
            noCustom: !0,
            category: 5
        },
        emote_bugle_final_red: {
            type: "emote",
            texture: "bugle-final-red.img",
            sound: "emote_01",
            channel: "ui",
            noCustom: !0,
            category: 5
        },
        emote_bugle_inspiration_blue: {
            type: "emote",
            texture: "bugle-inspiration-blue.img",
            sound: "emote_01",
            channel: "ui",
            noCustom: !0,
            category: 5
        },
        emote_bugle_final_blue: {
            type: "emote",
            texture: "bugle-final-blue.img",
            sound: "emote_01",
            channel: "ui",
            noCustom: !0,
            category: 5
        },
        emote_thumbsup: {
            type: "emote",
            name: "Thumbs Up",
            rarity: 1,
            texture: "thumbs-up.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_sadface: {
            type: "emote",
            name: "Sad Face",
            rarity: 1,
            texture: "face-sad.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_happyface: {
            type: "emote",
            name: "Happy Face",
            rarity: 1,
            texture: "face-happy.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_surviv: {
            type: "emote",
            name: "Surviv Logo",
            rarity: 1,
            texture: "surviv.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_gg: {
            type: "emote",
            name: "GG",
            rarity: 1,
            texture: "gg.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_question: {
            type: "emote",
            name: "Question Mark",
            rarity: 1,
            texture: "question.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_tombstone: {
            type: "emote",
            name: "Tombstone",
            rarity: 1,
            texture: "tombstone.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_joyface: {
            type: "emote",
            name: "Joyful Face",
            rarity: 1,
            texture: "face-joy.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_sobface: {
            type: "emote",
            name: "Sobbing Face",
            rarity: 1,
            texture: "face-sob.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_thinkingface: {
            type: "emote",
            name: "Thonk",
            rarity: 1,
            texture: "face-thinking.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_flagus: {
            type: "emote",
            name: "Flag United States",
            rarity: 1,
            texture: "flag-united-states-of-america.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagthailand: {
            type: "emote",
            name: "Flag Thailand",
            rarity: 1,
            texture: "flag-thailand.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaggermany: {
            type: "emote",
            name: "Flag Germany",
            rarity: 1,
            texture: "flag-germany.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagfrance: {
            type: "emote",
            name: "Flag France",
            rarity: 1,
            texture: "flag-france.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagsouthkorea: {
            type: "emote",
            name: "Flag South Korea",
            rarity: 1,
            texture: "flag-south-korea.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagbrazil: {
            type: "emote",
            name: "Flag Brazil",
            rarity: 1,
            texture: "flag-brazil.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagcanada: {
            type: "emote",
            name: "Flag Canada",
            rarity: 1,
            texture: "flag-canada.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagspain: {
            type: "emote",
            name: "Flag Spain",
            rarity: 1,
            texture: "flag-spain.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagrussia: {
            type: "emote",
            name: "Flag Russia",
            rarity: 1,
            texture: "flag-russia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagmexico: {
            type: "emote",
            name: "Flag Mexico",
            rarity: 1,
            texture: "flag-mexico.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagpoland: {
            type: "emote",
            name: "Flag Poland",
            rarity: 1,
            texture: "flag-republic-of-poland.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaguk: {
            type: "emote",
            name: "Flag United Kingdom",
            rarity: 1,
            texture: "flag-united-kingdom.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagcolombia: {
            type: "emote",
            name: "Flag Colombia",
            rarity: 1,
            texture: "flag-colombia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagukraine: {
            type: "emote",
            name: "Flag Ukraine",
            rarity: 1,
            texture: "flag-ukraine.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagturkey: {
            type: "emote",
            name: "Flag Turkey",
            rarity: 1,
            texture: "flag-turkey.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagphilippines: {
            type: "emote",
            name: "Flag Philippines",
            rarity: 1,
            texture: "flag-philippines.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagczechia: {
            type: "emote",
            name: "Flag Czechia",
            rarity: 1,
            texture: "flag-czech-republic.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagperu: {
            type: "emote",
            name: "Flag Peru",
            rarity: 1,
            texture: "flag-peru.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagaustria: {
            type: "emote",
            name: "Flag Austria",
            rarity: 1,
            texture: "flag-austria.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagargentina: {
            type: "emote",
            name: "Flag Argentina",
            rarity: 1,
            texture: "flag-argentina.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagjapan: {
            type: "emote",
            name: "Flag Japan",
            rarity: 1,
            texture: "flag-japan.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagvenezuela: {
            type: "emote",
            name: "Flag Venezuela",
            rarity: 1,
            texture: "flag-venezuela.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagvietnam: {
            type: "emote",
            name: "Flag Vietnam",
            rarity: 1,
            texture: "flag-vietnam.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagswitzerland: {
            type: "emote",
            name: "Flag Switzerland",
            rarity: 1,
            texture: "flag-switzerland.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagnetherlands: {
            type: "emote",
            name: "Flag Netherlands",
            rarity: 1,
            texture: "flag-netherlands.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagchina: {
            type: "emote",
            name: "Flag China",
            rarity: 1,
            texture: "flag-china.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagtaiwan: {
            type: "emote",
            name: "Flag Taiwan",
            rarity: 1,
            texture: "flag-taiwan.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagchile: {
            type: "emote",
            name: "Flag Chile",
            rarity: 1,
            texture: "flag-chile.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagaustralia: {
            type: "emote",
            name: "Flag Australia",
            rarity: 1,
            texture: "flag-australia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagdenmark: {
            type: "emote",
            name: "Flag Denmark",
            rarity: 1,
            texture: "flag-denmark.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagitaly: {
            type: "emote",
            name: "Flag Italy",
            rarity: 1,
            texture: "flag-italy.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagsweden: {
            type: "emote",
            name: "Flag Sweden",
            rarity: 1,
            texture: "flag-sweden.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagecuador: {
            type: "emote",
            name: "Flag Ecuador",
            rarity: 1,
            texture: "flag-ecuador.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagslovakia: {
            type: "emote",
            name: "Flag Slovakia",
            rarity: 1,
            texture: "flag-slovakia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaghungary: {
            type: "emote",
            name: "Flag Hungary",
            rarity: 1,
            texture: "flag-hungary.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagromania: {
            type: "emote",
            name: "Flag Romania",
            rarity: 1,
            texture: "flag-romania.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaghongkong: {
            type: "emote",
            name: "Flag Hong Kong",
            rarity: 1,
            texture: "flag-hong-kong.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagindonesia: {
            type: "emote",
            name: "Flag Indonesia",
            rarity: 1,
            texture: "flag-indonesia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagfinland: {
            type: "emote",
            name: "Flag Finland",
            rarity: 1,
            texture: "flag-finland.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagnorway: {
            type: "emote",
            name: "Flag Norway",
            rarity: 1,
            texture: "flag-norway.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_heart: {
            type: "emote",
            name: "Heart",
            rarity: 1,
            texture: "heart.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_sleepy: {
            type: "emote",
            name: "Zzz",
            rarity: 1,
            texture: "sleepy.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_flex: {
            type: "emote",
            name: "Flex",
            rarity: 1,
            texture: "flex.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_angryface: {
            type: "emote",
            name: "Angry Face",
            rarity: 1,
            texture: "face-angry.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_upsidedownface: {
            type: "emote",
            name: "Upside Down Face",
            rarity: 1,
            texture: "face-upsidedown.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_teabag: {
            type: "emote",
            name: "Teabag",
            rarity: 1,
            texture: "teabag.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_alienface: {
            type: "emote",
            name: "Alien Face",
            rarity: 1,
            texture: "face-alien.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_flagbelarus: {
            type: "emote",
            name: "Flag Belarus",
            rarity: 1,
            texture: "flag-belarus.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagbelgium: {
            type: "emote",
            name: "Flag Belgium",
            rarity: 1,
            texture: "flag-belgium.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagkazakhstan: {
            type: "emote",
            name: "Flag Kazakhstan",
            rarity: 1,
            texture: "flag-kazakhstan.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_egg: {
            type: "emote",
            name: "Egg",
            rarity: 1,
            texture: "egg.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_police: {
            type: "emote",
            name: "Police Insignia",
            rarity: 1,
            texture: "police.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_dabface: {
            type: "emote",
            name: "Dab Face",
            rarity: 1,
            texture: "face-dab.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_flagmalaysia: {
            type: "emote",
            name: "Flag Malaysia",
            rarity: 1,
            texture: "flag-malaysia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagnewzealand: {
            type: "emote",
            name: "Flag New Zealand",
            rarity: 1,
            texture: "flag-new-zealand.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_logosurviv: {
            type: "emote",
            name: "PARMA",
            rarity: 1,
            texture: "logo-surviv.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_logoegg: {
            type: "emote",
            name: "The Egg",
            rarity: 1,
            texture: "logo-egg.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_logoswine: {
            type: "emote",
            name: "The Swine",
            rarity: 1,
            texture: "logo-swine.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_logohydra: {
            type: "emote",
            name: "The Hydra",
            rarity: 1,
            texture: "logo-hydra.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_logostorm: {
            type: "emote",
            name: "The Storm",
            rarity: 1,
            texture: "logo-storm.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_flaghonduras: {
            type: "emote",
            name: "Flag Honduras",
            rarity: 1,
            texture: "flag-honduras.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_logocaduceus: {
            type: "emote",
            name: "The Caduceus",
            rarity: 1,
            texture: "logo-caduceus.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_impface: {
            type: "emote",
            name: "Imp Face",
            rarity: 1,
            texture: "face-imp.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_monocleface: {
            type: "emote",
            name: "Monocole Face",
            rarity: 1,
            texture: "face-monocle.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_sunglassface: {
            type: "emote",
            name: "Sunglasses Face",
            rarity: 1,
            texture: "face-sunglass.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_headshotface: {
            type: "emote",
            name: "Headshot!",
            rarity: 1,
            texture: "face-headshot.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_potato: {
            type: "emote",
            name: "Potato",
            rarity: 1,
            texture: "potato.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_leek: {
            type: "emote",
            name: "Leek",
            rarity: 1,
            texture: "leek.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_eggplant: {
            type: "emote",
            name: "Eggplant",
            rarity: 1,
            texture: "eggplant.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_baguette: {
            type: "emote",
            name: "Baguette",
            rarity: 1,
            texture: "baguette.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_chick: {
            type: "emote",
            name: "Chick",
            rarity: 1,
            texture: "chick.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_flagbolivia: {
            type: "emote",
            name: "Flag Bolivia",
            rarity: 1,
            texture: "flag-bolivia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagcroatia: {
            type: "emote",
            name: "Flag Croatia",
            rarity: 1,
            texture: "flag-croatia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagindia: {
            type: "emote",
            name: "Flag India",
            rarity: 1,
            texture: "flag-india.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagisrael: {
            type: "emote",
            name: "Flag Israel",
            rarity: 1,
            texture: "flag-israel.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaggeorgia: {
            type: "emote",
            name: "Flag Georgia",
            rarity: 1,
            texture: "flag-georgia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaggreece: {
            type: "emote",
            name: "Flag Greece",
            rarity: 1,
            texture: "flag-greece.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagguatemala: {
            type: "emote",
            name: "Flag Gautemala",
            rarity: 1,
            texture: "flag-guatemala.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagportugal: {
            type: "emote",
            name: "Flag Portugal",
            rarity: 1,
            texture: "flag-portugal.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagserbia: {
            type: "emote",
            name: "Flag Serbia",
            rarity: 1,
            texture: "flag-serbia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagsingapore: {
            type: "emote",
            name: "Flag Singapore",
            rarity: 1,
            texture: "flag-singapore.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagtrinidad: {
            type: "emote",
            name: "Flag Trinidad and Tobago",
            rarity: 1,
            texture: "flag-trinidad-and-tobago.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaguruguay: {
            type: "emote",
            name: "Flag Uruguay",
            rarity: 1,
            texture: "flag-uruguay.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_logoconch: {
            type: "emote",
            name: "The Conch",
            rarity: 1,
            texture: "logo-conch.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_pineapple: {
            type: "emote",
            name: "Pineapple",
            rarity: 1,
            texture: "pineapple.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_coconut: {
            type: "emote",
            name: "Coconut",
            rarity: 1,
            texture: "coconut.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_crab: {
            type: "emote",
            name: "Crab",
            rarity: 1,
            texture: "crab.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 3
        },
        emote_whale: {
            type: "emote",
            name: "Whale",
            rarity: 1,
            texture: "whale.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 3
        },
        emote_logometeor: {
            type: "emote",
            name: "The Meteor",
            rarity: 1,
            texture: "logo-meteor.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_salt: {
            type: "emote",
            name: "Salt Shaker",
            rarity: 1,
            texture: "salt.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_disappointface: {
            type: "emote",
            name: "Disappointed Face",
            rarity: 1,
            texture: "face-disappoint.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_logocrossing: {
            type: "emote",
            name: "The Crossing",
            rarity: 1,
            texture: "logo-crossing.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_fish: {
            type: "emote",
            name: "Fish",
            rarity: 1,
            texture: "fish.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 3
        },
        emote_campfire: {
            type: "emote",
            name: "Campfire",
            rarity: 1,
            texture: "campfire.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_chickendinner: {
            type: "emote",
            name: "Chicken Dinner",
            rarity: 1,
            texture: "chicken-dinner.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_cattle: {
            type: "emote",
            name: "Cattle Skull",
            rarity: 1,
            texture: "cattle.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 3
        },
        emote_icecream: {
            type: "emote",
            name: "Ice Cream",
            rarity: 1,
            texture: "ice-cream.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_cupcake: {
            type: "emote",
            name: "Cupcake",
            rarity: 1,
            texture: "cupcake.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_donut: {
            type: "emote",
            name: "Donut",
            rarity: 1,
            texture: "donut.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_logohatchet: {
            type: "emote",
            name: "The Hatchet",
            rarity: 1,
            texture: "logo-hatchet.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_acorn: {
            type: "emote",
            name: "Acorn",
            rarity: 1,
            texture: "acorn.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_trunk: {
            type: "emote",
            name: "Tree Trunk",
            rarity: 1,
            texture: "trunk.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_forest: {
            type: "emote",
            name: "Forest",
            rarity: 1,
            texture: "forest.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_pumpkin: {
            type: "emote",
            name: "Pumpkin",
            rarity: 1,
            texture: "pumpkin.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_candycorn: {
            type: "emote",
            name: "Candy Corn",
            rarity: 1,
            texture: "candy-corn.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 2
        },
        emote_pilgrimhat: {
            type: "emote",
            name: "Pilgrim",
            rarity: 1,
            texture: "pilgrim-hat.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_turkeyanimal: {
            type: "emote",
            name: "Turkey",
            rarity: 1,
            texture: "turkey-animal.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 3
        },
        emote_heartface: {
            type: "emote",
            name: "Heart Face",
            rarity: 1,
            texture: "face-heart.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_logochrysanthemum: {
            type: "emote",
            name: "The Chrysanthemum",
            rarity: 1,
            texture: "logo-chrysanthemum.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_santahat: {
            type: "emote",
            name: "Santa Hat",
            rarity: 1,
            texture: "santa-hat.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_snowman: {
            type: "emote",
            name: "Snowman",
            rarity: 1,
            texture: "snowman.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_snowflake: {
            type: "emote",
            name: "Snowflake",
            rarity: 1,
            texture: "snowflake.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_flagmorocco: {
            type: "emote",
            name: "Flag Morocco",
            rarity: 1,
            texture: "flag-morocco.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagestonia: {
            type: "emote",
            name: "Flag Estonia",
            rarity: 1,
            texture: "flag-estonia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagalgeria: {
            type: "emote",
            name: "Flag Algeria",
            rarity: 1,
            texture: "flag-algeria.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagegypt: {
            type: "emote",
            name: "Flag Egypt",
            rarity: 1,
            texture: "flag-egypt.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagazerbaijan: {
            type: "emote",
            name: "Flag Azerbaijan",
            rarity: 1,
            texture: "flag-azerbaijan.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagalbania: {
            type: "emote",
            name: "Flag Albania",
            rarity: 1,
            texture: "flag-albania.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaglithuania: {
            type: "emote",
            name: "Flag Lithuania",
            rarity: 1,
            texture: "flag-lithuania.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaglatvia: {
            type: "emote",
            name: "Flag Latvia",
            rarity: 1,
            texture: "flag-latvia.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flaguae: {
            type: "emote",
            name: "Flag United Arab Emirates",
            rarity: 1,
            texture: "flag-united-arab-emirates.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_flagdominicanrepublic: {
            type: "emote",
            name: "Flag Dominican Republic",
            rarity: 1,
            texture: "flag-dominican-republic.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 6
        },
        emote_logocloud: {
            type: "emote",
            name: "The Cloud",
            rarity: 1,
            texture: "logo-cloud.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        },
        emote_ghost_base: {
            type: "emote",
            name: "Ghost",
            rarity: 2,
            texture: "ghost-base.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_bandagedface: {
            type: "emote",
            name: "Bandaged Face",
            rarity: 2,
            texture: "face-bandaged.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_picassoface: {
            type: "emote",
            name: "Picasso Face",
            rarity: 2,
            texture: "face-picasso.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_pooface: {
            type: "emote",
            name: "Poo Face",
            rarity: 3,
            texture: "face-poo.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 1
        },
        emote_ok: {
            type: "emote",
            name: "Ok",
            rarity: 2,
            texture: "ok.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_rainbow: {
            type: "emote",
            name: "Rainbow",
            rarity: 3,
            texture: "rainbow.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 5
        },
        emote_logotwins: {
            type: "emote",
            name: "The Twins",
            rarity: 1,
            texture: "logo-twins.img",
            sound: "emote_01",
            channel: "ui",
            teamOnly: !1,
            category: 4
        }
    }
      , Kr = {
        explosion_frag: {
            type: "explosion",
            damage: 125,
            obstacleDamage: 1.1,
            rad: {
                min: 5,
                max: 12
            },
            shrapnelCount: 12,
            shrapnelType: "shrapnel_frag",
            explosionEffectType: "frag",
            decalType: "decal_frag_explosion"
        },
        explosion_smoke: {
            type: "explosion",
            damage: 0,
            obstacleDamage: 1,
            rad: {
                min: 5,
                max: 12
            },
            shrapnelCount: 0,
            shrapnelType: "shrapnel_frag",
            explosionEffectType: "smoke",
            decalType: "decal_smoke_explosion"
        },
        explosion_strobe: {
            type: "explosion",
            damage: 1,
            obstacleDamage: 5,
            rad: {
                min: 1.5,
                max: 2.5
            },
            shrapnelCount: 3,
            shrapnelType: "shrapnel_strobe",
            explosionEffectType: "strobe",
            decalType: "decal_smoke_explosion"
        },
        explosion_barrel: {
            type: "explosion",
            damage: 125,
            obstacleDamage: 1,
            rad: {
                min: 5,
                max: 12
            },
            shrapnelCount: 12,
            shrapnelType: "shrapnel_barrel",
            explosionEffectType: "barrel",
            decalType: "decal_barrel_explosion"
        },
        explosion_stove: {
            type: "explosion",
            damage: 125,
            obstacleDamage: 2,
            rad: {
                min: 5,
                max: 12
            },
            shrapnelCount: 16,
            shrapnelType: "shrapnel_stove",
            explosionEffectType: "barrel",
            decalType: "decal_barrel_explosion"
        },
        explosion_usas: {
            type: "explosion",
            damage: 42,
            obstacleDamage: 4,
            rad: {
                min: 3.5,
                max: 6.5
            },
            shrapnelCount: 9,
            shrapnelType: "shrapnel_usas",
            explosionEffectType: "usas",
            decalType: "decal_frag_small_explosion"
        },
        explosion_rounds: {
            type: "explosion",
            damage: 3,
            obstacleDamage: 15,
            rad: {
                min: .75,
                max: 1
            },
            shrapnelCount: 0,
            shrapnelType: "shrapnel_usas",
            explosionEffectType: "rounds",
            decalType: "decal_rounds_explosion"
        },
        explosion_rounds_sg: {
            type: "explosion",
            damage: 3,
            obstacleDamage: 15,
            rad: {
                min: .75,
                max: 1
            },
            shrapnelCount: 0,
            shrapnelType: "shrapnel_usas",
            explosionEffectType: "rounds_sg",
            decalType: "decal_rounds_explosion"
        },
        explosion_mirv: {
            type: "explosion",
            damage: 125,
            obstacleDamage: 1.1,
            rad: {
                min: 5,
                max: 12
            },
            shrapnelCount: 12,
            shrapnelType: "shrapnel_frag",
            explosionEffectType: "mirv",
            decalType: "decal_frag_explosion"
        },
        explosion_mirv_mini: {
            type: "explosion",
            damage: 75,
            obstacleDamage: 1.1,
            rad: {
                min: 4,
                max: 8
            },
            shrapnelCount: 7,
            shrapnelType: "shrapnel_mirv_mini",
            explosionEffectType: "mirv_mini",
            decalType: "decal_frag_small_explosion"
        },
        explosion_martyr_nade: {
            type: "explosion",
            damage: 80,
            obstacleDamage: 1.1,
            rad: {
                min: 4.5,
                max: 9
            },
            shrapnelCount: 8,
            shrapnelType: "shrapnel_mirv_mini",
            explosionEffectType: "martyr_nade",
            decalType: "decal_frag_small_explosion"
        },
        explosion_snowball: {
            type: "explosion",
            damage: 2,
            obstacleDamage: 1,
            rad: {
                min: 1.24,
                max: 1.25
            },
            shrapnelCount: 0,
            shrapnelType: "",
            explosionEffectType: "snowball",
            decalType: "decal_snowball_explosion",
            freezeAmount: 3,
            freezeDuration: .5
        },
        explosion_snowball_heavy: {
            type: "explosion",
            damage: 5,
            obstacleDamage: 1,
            rad: {
                min: 1.24,
                max: 1.25
            },
            shrapnelCount: 0,
            shrapnelType: "",
            explosionEffectType: "snowball_heavy",
            decalType: "decal_snowball_explosion",
            freezeAmount: 3,
            freezeDuration: 1
        },
        explosion_potato: {
            type: "explosion",
            damage: 2,
            obstacleDamage: 1,
            teamDamage: !1,
            rad: {
                min: 1.24,
                max: 1.25
            },
            shrapnelCount: 0,
            shrapnelType: "",
            explosionEffectType: "potato",
            decalType: "decal_potato_explosion",
            freezeAmount: 3,
            freezeDuration: .5
        },
        explosion_potato_heavy: {
            type: "explosion",
            damage: 5,
            obstacleDamage: 1,
            teamDamage: !1,
            rad: {
                min: 1.24,
                max: 1.25
            },
            shrapnelCount: 0,
            shrapnelType: "",
            explosionEffectType: "potato_heavy",
            decalType: "decal_potato_explosion",
            freezeAmount: 3,
            freezeDuration: 1
        },
        explosion_potato_cannonball: {
            type: "explosion",
            damage: 95,
            obstacleDamage: 1.3,
            teamDamage: !1,
            rad: {
                min: 3.5,
                max: 6.5
            },
            shrapnelCount: 0,
            shrapnelType: "",
            explosionEffectType: "potato_cannonball",
            decalType: "decal_frag_small_explosion"
        },
        explosion_potato_smgshot: {
            type: "explosion",
            damage: 13,
            obstacleDamage: 1.25,
            teamDamage: !1,
            rad: {
                min: 1.25,
                max: 1.75
            },
            shrapnelCount: 0,
            shrapnelType: "",
            explosionEffectType: "potato_smgshot",
            decalType: ""
        },
        explosion_bomb_iron: {
            type: "explosion",
            damage: 40,
            obstacleDamage: 2,
            rad: {
                min: 5,
                max: 14
            },
            shrapnelCount: 2,
            shrapnelType: "shrapnel_bomb_iron",
            explosionEffectType: "bomb_iron",
            decalType: "decal_bomb_iron_explosion"
        }
    };
    function Le(r, t) {
        return f.mergeDeep({}, Yi[r], {
            baseType: r
        }, t)
    }
    const ss = {
        chest01: {
            name: "Level 1 Vest",
            type: "chest",
            level: 1,
            damageReduction: .25,
            skinImg: {
                baseTint: 11842740,
                baseSprite: "player-armor-base-01.img"
            },
            lootImg: {
                sprite: "loot-chest-01.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "chest_pickup_01"
            }
        },
        chest02: {
            name: "Level 2 Vest",
            type: "chest",
            level: 2,
            damageReduction: .38,
            skinImg: {
                baseTint: 4934475,
                baseSprite: "player-armor-base-01.img"
            },
            lootImg: {
                sprite: "loot-chest-02.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "chest_pickup_01"
            }
        },
        chest03: {
            name: "Level 3 Vest",
            type: "chest",
            level: 3,
            damageReduction: .45,
            skinImg: {
                baseTint: 0,
                baseSprite: "player-armor-base-01.img"
            },
            lootImg: {
                sprite: "loot-chest-03.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "chest_pickup_01"
            }
        },
        chest04: {
            name: "Level 4 Vest",
            type: "chest",
            noDrop: !0,
            level: 4,
            damageReduction: .6,
            skinImg: {
                baseTint: 1846790,
                baseSprite: "player-armor-base-01.img"
            },
            lootImg: {
                sprite: "loot-chest-03.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "chest_pickup_01"
            }
        }
    }
      , ls = {
        helmet01: {
            name: "Level 1 Helmet",
            type: "helmet",
            level: 1,
            damageReduction: .25,
            skinImg: {
                baseTint: 3244031,
                baseTintRed: 10972011,
                baseTintBlue: 6459582,
                baseSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-helmet-01.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "helmet_pickup_01"
            }
        },
        helmet02: {
            name: "Level 2 Helmet",
            type: "helmet",
            level: 2,
            damageReduction: .4,
            skinImg: {
                baseTint: 13027014,
                baseTintRed: 10027008,
                baseTintBlue: 20642,
                baseSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-helmet-02.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "helmet_pickup_01"
            }
        },
        helmet03: {
            name: "Level 3 Helmet",
            type: "helmet",
            level: 3,
            damageReduction: .55,
            skinImg: {
                baseTint: 2434341,
                baseTintRed: 2491396,
                baseTintBlue: 334125,
                baseSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-helmet-03.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "helmet_pickup_01"
            }
        },
        helmet04: {
            name: "Level 4 Helmet",
            type: "helmet",
            level: 4,
            damageReduction: .7,
            skinImg: {
                baseTint: 2434341,
                baseTintRed: 2491396,
                baseTintBlue: 334125,
                baseSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-helmet-03.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "helmet_pickup_01"
            }
        }
    }
      , cs = {
        backpack00: {
            name: "Pouch",
            type: "backpack",
            level: 0,
            playerRad: .55,
            tint: 16777215,
            lootImg: {
                sprite: "loot-pack-00.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "pack_pickup_01"
            }
        },
        backpack01: {
            name: "Small Pack",
            type: "backpack",
            level: 1,
            playerRad: .65,
            tint: 6697728,
            lootImg: {
                sprite: "loot-pack-01.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "pack_pickup_01"
            }
        },
        backpack02: {
            name: "Regular Pack",
            type: "backpack",
            level: 2,
            tint: 26112,
            playerRad: .85,
            lootImg: {
                sprite: "loot-pack-02.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "pack_pickup_01"
            }
        },
        backpack03: {
            name: "Military Pack",
            type: "backpack",
            level: 3,
            tint: 6710835,
            playerRad: 1,
            lootImg: {
                sprite: "loot-pack-03.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "pack_pickup_01"
            }
        }
    }
      , ns = {
        soda: {
            name: "Soda",
            type: "boost",
            useTime: 3,
            boost: 25,
            lootImg: {
                sprite: "loot-medical-soda.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "soda_pickup_01",
                use: "soda_use_01"
            },
            emitter: "boost",
            aura: {
                sprite: "part-aura-circle-01.img",
                tint: 1676544
            }
        },
        painkiller: {
            name: "Pills",
            type: "boost",
            useTime: 5,
            boost: 50,
            lootImg: {
                sprite: "loot-medical-pill.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "pills_pickup_01",
                use: "pills_use_01"
            },
            emitter: "boost",
            aura: {
                sprite: "part-aura-circle-01.img",
                tint: 1676544
            }
        }
    }
      , ms = {
        bandage: {
            name: "Bandage",
            type: "heal",
            useTime: 3,
            heal: 15,
            maxHeal: 100,
            lootImg: {
                sprite: "loot-medical-bandage.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "bandage_pickup_01",
                use: "bandage_use_01"
            },
            emitter: "heal",
            aura: {
                sprite: "part-aura-circle-01.img",
                tint: 16711680
            }
        },
        healthkit: {
            name: "Med Kit",
            type: "heal",
            useTime: 6,
            heal: 100,
            maxHeal: 100,
            lootImg: {
                sprite: "loot-medical-healthkit.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "healthkit_pickup_01",
                use: "healthkit_use_01"
            },
            emitter: "heal",
            aura: {
                sprite: "part-aura-circle-01.img",
                tint: 16711680
            }
        }
    }
      , ps = {
        "9mm": {
            name: "9mm",
            type: "ammo",
            minStackSize: 15,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 16756224,
                tintDark: 12550912
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        "762mm": {
            name: "7.62mm",
            type: "ammo",
            minStackSize: 10,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 26367,
                tintDark: 19903
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        "556mm": {
            name: "5.56mm",
            type: "ammo",
            minStackSize: 10,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 237056,
                tintDark: 161536
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        "12gauge": {
            name: "12 gauge",
            type: "ammo",
            minStackSize: 5,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 16711680,
                tintDark: 12517376
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        "50AE": {
            name: ".50 AE",
            type: "ammo",
            special: !0,
            minStackSize: 10,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 2697513,
                tintDark: 2039583
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        "308sub": {
            name: ".308 Subsonic",
            type: "ammo",
            special: !0,
            minStackSize: 10,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 3225600,
                tintDark: 2435840
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        flare: {
            name: "Flare",
            type: "ammo",
            special: !0,
            minStackSize: 1,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 13911552,
                tintDark: 13911552
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        "45acp": {
            name: ".45 ACP",
            type: "ammo",
            special: !0,
            minStackSize: 10,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 7930111,
                tintDark: 5963967
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        },
        potato_ammo: {
            name: "Potato Ammo",
            type: "ammo",
            special: !0,
            hideUi: !0,
            minStackSize: 10,
            lootImg: {
                sprite: "loot-ammo-box.img",
                scale: .2,
                tint: 7618334,
                tintDark: 7618334
            },
            sound: {
                pickup: "ammo_pickup_01"
            }
        }
    }
      , Yi = {
        ...ps,
        ...ms,
        ...ns,
        ...cs,
        ...ls,
        ...ss
    }
      , Ki = {
        "1xscope": {
            name: "1x Scope",
            type: "scope",
            level: 1,
            lootImg: {
                sprite: "loot-scope-00.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "scope_pickup_01"
            }
        },
        "2xscope": {
            name: "2x Scope",
            type: "scope",
            level: 2,
            lootImg: {
                sprite: "loot-scope-01.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "scope_pickup_01"
            }
        },
        "4xscope": {
            name: "4x Scope",
            type: "scope",
            level: 4,
            lootImg: {
                sprite: "loot-scope-02.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "scope_pickup_01"
            }
        },
        "8xscope": {
            name: "8x Scope",
            type: "scope",
            level: 8,
            lootImg: {
                sprite: "loot-scope-03.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "scope_pickup_01"
            }
        },
        "15xscope": {
            name: "15x Scope",
            type: "scope",
            level: 15,
            lootImg: {
                sprite: "loot-scope-04.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "scope_pickup_01"
            }
        }
    }
      , us = {
        helmet03_leader: Le("helmet03", {
            name: "Leader Helmet",
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-leader.img"
            }
        }),
        helmet03_forest: Le("helmet03", {
            name: "Shishigami no Kabuto",
            role: "woods_king",
            mapIndicator: {
                sprite: "player-king-woods.img",
                tint: 65280,
                pulse: !0,
                pulseTint: 65280
            },
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-forest.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-forest.img",
                border: "loot-circle-outer-01.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet03_moon: Le("helmet03", {
            name: "Tsukuyomi no Kabuto",
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-moon.img",
                spriteScale: .3
            }
        }),
        helmet03_lt: Le("helmet03", {
            name: "Lieutenant Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-lieutenant.img",
                spriteScale: .3
            }
        }),
        helmet03_lt_aged: Le("helmet03", {
            name: "Lieutenant Helmet",
            perk: "firepower",
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-lieutenant.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-lieutenant.img",
                rot: .5 * Math.PI
            }
        }),
        helmet03_potato: Le("helmet03", {
            name: "K-pot-ato",
            perk: "rare_potato",
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-potato.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-potato.img",
                rot: .5 * Math.PI
            }
        }),
        helmet03_marksman: Le("helmet03", {
            name: "Marksman Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-marksman.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-marksman.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet03_recon: Le("helmet03", {
            name: "Recon Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-recon.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-recon.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet03_grenadier: Le("helmet03", {
            name: "Grenadier Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-grenadier.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-grenadier.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet03_bugler: Le("helmet03", {
            name: "Bugler Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-bugler.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-bugler.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet04_medic: Le("helmet04", {
            name: "Medic Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-medic.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-medic.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet04_last_man_red: Le("helmet04", {
            name: "Lone Survivr Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-last-man-01.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-last-man-01.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet04_last_man_blue: Le("helmet04", {
            name: "Lone Survivr Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-last-man-02.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-last-man-02.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        }),
        helmet04_leader: Le("helmet04", {
            name: "Leader Helmet",
            noDrop: !0,
            skinImg: {
                baseTint: 16777215,
                baseTintRed: 16777215,
                baseTintBlue: 16777215,
                baseSprite: "player-helmet-leader.img",
                spriteScale: .3
            },
            lootImg: {
                sprite: "player-helmet-leader.img",
                scale: .3,
                rot: .5 * Math.PI
            }
        })
    }
      , ea = ["chest", "helmet", "backpack"]
      , ta = Object.keys(Ki)
      , hs = {
        ...Yi,
        ...Ki,
        ...us
    }
      , ds = {
        mp5: {
            name: "MP5",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2,
            fireDelay: .09,
            switchDelay: .75,
            barrelLength: 2.625,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: 3,
            bulletCount: 1,
            bulletType: "bullet_mp5",
            bulletTypeBonus: "bullet_mp5_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-mp5.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .49
                },
                tint: 1184274,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .375
            },
            sound: {
                shoot: "mp5_01",
                reload: "mp5_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "mp5_switch_01"
            }
        },
        mac10: {
            name: "MAC-10",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 96,
            maxClip: 32,
            maxReload: 32,
            extendedClip: 50,
            extendedReload: 50,
            reloadTime: 1.8,
            fireDelay: .045,
            switchDelay: .75,
            barrelLength: 2.45,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 11,
            shotSpread: 10,
            bulletCount: 1,
            bulletType: "bullet_mac10",
            bulletTypeBonus: "bullet_mac10_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-mac10.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .44
                },
                tint: 3684408,
                leftHandOffset: {
                    x: 1.4,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .35
            },
            sound: {
                shoot: "mac10_01",
                reload: "mac10_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "mac10_switch_01"
            }
        },
        ump9: {
            name: "UMP9",
            type: "gun",
            quality: 0,
            fireMode: "burst",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 1.9,
            fireDelay: .35,
            burstDelay: .07,
            switchDelay: .75,
            barrelLength: 2.7,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1.5,
            bulletCount: 1,
            burstCount: 3,
            bulletType: "bullet_ump9",
            bulletTypeBonus: "bullet_ump9_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-ump9.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .515
                },
                tint: 1184274,
                leftHandOffset: {
                    x: 5.6,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .4
            },
            sound: {
                shoot: "ump9_01",
                reload: "ump9_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "ump9_switch_01"
            }
        },
        vector: {
            name: "Vector",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 99,
            maxClip: 33,
            maxReload: 33,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 1.6,
            fireDelay: .038,
            switchDelay: .75,
            barrelLength: 2.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4.5,
            shotSpread: 2.5,
            bulletCount: 1,
            bulletType: "bullet_vector",
            bulletTypeBonus: "bullet_vector_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-vector.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 9009504,
                leftHandOffset: {
                    x: 7,
                    y: 0
                },
                recoil: .89
            },
            particle: {
                shellScale: 1,
                shellOffset: .4
            },
            sound: {
                shoot: "vector_01",
                reload: "vector_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "vector_switch_01"
            }
        },
        vector45: {
            name: "Vector",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "45acp",
            ammoSpawnCount: 75,
            maxClip: 25,
            maxReload: 25,
            extendedClip: 32,
            extendedReload: 32,
            reloadTime: 1.6,
            fireDelay: .044,
            switchDelay: .75,
            barrelLength: 2.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 6.5,
            shotSpread: 4.5,
            bulletCount: 1,
            bulletType: "bullet_vector45",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-vector45.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 9009504,
                leftHandOffset: {
                    x: 7,
                    y: 0
                },
                recoil: .89
            },
            particle: {
                shellScale: 1.2,
                shellOffset: .4
            },
            sound: {
                shoot: "vector_02",
                reload: "vector_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "vector_switch_01"
            }
        },
        scorpion: {
            name: "CZ-3A1",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.2,
            fireDelay: .055,
            switchDelay: .75,
            barrelLength: 3.6,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 5,
            shotSpread: 4,
            bulletCount: 1,
            bulletType: "bullet_scorpion",
            bulletTypeBonus: "bullet_scorpion_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-scorpion.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-scorpion-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 8,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .375
            },
            sound: {
                shoot: "scorpion_01",
                reload: "scorpion_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "scorpion_switch_01"
            }
        },
        vss: {
            name: "VSS",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 60,
            maxClip: 20,
            maxReload: 20,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 2.3,
            fireDelay: .16,
            switchDelay: .75,
            barrelLength: 3.7,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_vss",
            bulletTypeBonus: "bullet_vss_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-vss.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-vss-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 9,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .375
            },
            sound: {
                shoot: "vss_01",
                reload: "vss_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "vss_switch_01"
            }
        },
        famas: {
            name: "FAMAS",
            type: "gun",
            quality: 0,
            fireMode: "burst",
            caseTiming: "shoot",
            isBullpup: !0,
            ammo: "556mm",
            ammoSpawnCount: 75,
            maxClip: 25,
            maxReload: 25,
            extendedClip: 35,
            extendedReload: 35,
            reloadTime: 2.3,
            fireDelay: .35,
            burstDelay: .07,
            switchDelay: .75,
            barrelLength: 3.1,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 1.1,
            bulletCount: 1,
            burstCount: 3,
            bulletType: "bullet_famas",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-famas.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-famas-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 12,
                    y: 0
                },
                gunOffset: {
                    x: -8,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .425
            },
            sound: {
                shoot: "famas_01",
                reload: "famas_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "famas_switch_01"
            }
        },
        hk416: {
            name: "M416",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "556mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.3,
            fireDelay: .075,
            switchDelay: .75,
            barrelLength: 2.7,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 8,
            shotSpread: 4,
            bulletCount: 1,
            bulletType: "bullet_hk416",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-hk416.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .52
                },
                tint: 14402714,
                leftHandOffset: {
                    x: 4.2,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .4
            },
            sound: {
                shoot: "hk416_01",
                reload: "hk416_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "hk416_switch_01"
            }
        },
        m4a1: {
            name: "M4A1-S",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "556mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 3.1,
            fireDelay: .082,
            switchDelay: .75,
            barrelLength: 3.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_m4a1",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m4a1.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-m4a1-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 7.9,
                    y: 0
                },
                recoil: 1.3
            },
            particle: {
                shellScale: 1,
                shellOffset: .4
            },
            sound: {
                shoot: "m4a1_01",
                reload: "m4a1_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m4a1_switch_01",
                fallOff: 3
            }
        },
        mk12: {
            name: "Mk 12 SPR",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "556mm",
            ammoSpawnCount: 60,
            maxClip: 20,
            maxReload: 20,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 2.4,
            fireDelay: .18,
            switchDelay: .75,
            barrelLength: 3.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_mk12",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-mk12.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .485
                },
                tint: 10984586,
                leftHandOffset: {
                    x: 4.2,
                    y: 0
                },
                recoil: 1.66
            },
            particle: {
                shellScale: 1.3,
                shellOffset: .55
            },
            sound: {
                shoot: "mk12_01",
                reload: "mk12_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "mk12_switch_01"
            }
        },
        l86: {
            name: "L86A2",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "556mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.9,
            fireDelay: .19,
            switchDelay: .75,
            barrelLength: 3.25,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3.5,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_l86",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-l86.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .46
                },
                tint: 14469287,
                leftHandOffset: {
                    x: -3,
                    y: 0
                },
                recoil: 1.66
            },
            particle: {
                shellScale: 1.3,
                shellOffset: .55
            },
            sound: {
                shoot: "l86_01",
                reload: "l86_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "l86_switch_01"
            }
        },
        m249: {
            name: "M249",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "556mm",
            ammoSpawnCount: 200,
            maxClip: 100,
            maxReload: 100,
            extendedClip: 150,
            extendedReload: 150,
            reloadTime: 6.7,
            fireDelay: .08,
            switchDelay: .75,
            barrelLength: 3.75,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 6,
            shotSpread: 1.5,
            bulletCount: 1,
            bulletType: "bullet_m249",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: -4
            },
            lootImg: {
                sprite: "loot-weapon-m249.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-m249-top-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 13.2,
                    y: 0
                },
                recoil: 1.33,
                magImg: {
                    sprite: "gun-m249-bot-01.img",
                    pos: {
                        x: 0,
                        y: -20.5
                    }
                }
            },
            particle: {
                shellScale: 1,
                shellOffset: .5875
            },
            sound: {
                shoot: "m249_01",
                reload: "m249_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "m249_switch_01"
            }
        },
        qbb97: {
            name: "QBB-97",
            type: "gun",
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "556mm",
            ammoSpawnCount: 150,
            maxClip: 75,
            maxReload: 75,
            extendedClip: 95,
            extendedReload: 95,
            reloadTime: 3.9,
            fireDelay: .1,
            switchDelay: .75,
            barrelLength: 3.1,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: .5,
            shotSpread: 4,
            bulletCount: 1,
            bulletType: "bullet_qbb97",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: -2
            },
            lootImg: {
                sprite: "loot-weapon-qbb97.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .425
                },
                tint: 1973790,
                leftHandOffset: {
                    x: 8.4,
                    y: 0
                },
                recoil: 1.33,
                magImg: {
                    sprite: "gun-qbb97-bot-01.img",
                    pos: {
                        x: -1.5,
                        y: -14.25
                    }
                }
            },
            particle: {
                shellScale: 1,
                shellOffset: .5875
            },
            sound: {
                shoot: "qbb97_01",
                reload: "qbb97_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "qbb97_switch_01"
            }
        },
        scout_elite: {
            name: "Scout Elite",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "556mm",
            aimDelay: !0,
            ammoSpawnCount: 20,
            maxClip: 5,
            maxReload: 5,
            extendedClip: 10,
            extendedReload: 10,
            reloadTime: 2.6,
            fireDelay: 1,
            switchDelay: 1,
            pullDelay: 1,
            barrelLength: 3.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 1,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_scout",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 5
            },
            lootImg: {
                sprite: "loot-weapon-scout.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .52
                },
                tint: 3290683,
                leftHandOffset: {
                    x: 2.8,
                    y: 0
                },
                recoil: 2.33
            },
            particle: {
                shellScale: 1.6,
                shellOffset: .6
            },
            sound: {
                shoot: "scout_01",
                reload: "scout_reload_01",
                cycle: "scout_cycle_01",
                pull: "scout_pull_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "scout_cycle_01"
            }
        },
        ak47: {
            name: "AK-47",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.5,
            fireDelay: .1,
            switchDelay: .75,
            barrelLength: 3.15,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 7.5,
            shotSpread: 2.5,
            bulletCount: 1,
            bulletType: "bullet_ak47",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-ak.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .435
                },
                tint: 6433298,
                leftHandOffset: {
                    x: 2.8,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "ak47_01",
                reload: "ak47_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "ak47_switch_01"
            }
        },
        scar: {
            name: "SCAR-H",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 80,
            maxClip: 20,
            maxReload: 20,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 2.7,
            fireDelay: .09,
            switchDelay: .75,
            barrelLength: 3.15,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 5,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_scar",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-scar.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .435
                },
                tint: 10189640,
                leftHandOffset: {
                    x: 2.8,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "scar_01",
                reload: "scar_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "scar_switch_01"
            }
        },
        scarssr: {
            name: "SCAR-SSR",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "308sub",
            ammoSpawnCount: 40,
            maxClip: 10,
            maxReload: 10,
            extendedClip: 20,
            extendedReload: 20,
            reloadTime: 2.7,
            fireDelay: .3,
            switchDelay: .75,
            barrelLength: 3.9,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 5.5,
            shotSpread: 1.5,
            bulletCount: 1,
            bulletType: "bullet_scarssr",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-scarssr.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-scarssr-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 6,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "scarssr_01",
                reload: "scar_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "scar_switch_01"
            }
        },
        an94: {
            name: "AN-94",
            type: "gun",
            quality: 1,
            fireMode: "burst",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 90,
            maxClip: 45,
            maxReload: 45,
            extendedClip: 60,
            extendedReload: 60,
            reloadTime: 2.35,
            fireDelay: .24,
            burstDelay: .025,
            switchDelay: .75,
            barrelLength: 3.25,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: 1.5,
            bulletCount: 1,
            burstCount: 2,
            burstSounds: 1,
            bulletType: "bullet_an94",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-an94.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .46
                },
                tint: 2960685,
                leftHandOffset: {
                    x: 2.85,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "an94_01",
                reload: "an94_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "an94_switch_01"
            }
        },
        groza: {
            name: "Groza",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            isBullpup: !0,
            ammo: "762mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.8,
            fireDelay: .078,
            switchDelay: .75,
            barrelLength: 2.6,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 9,
            shotSpread: 5,
            bulletCount: 1,
            bulletType: "bullet_groza",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-groza.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-groza-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 12,
                    y: 0
                },
                gunOffset: {
                    x: -8,
                    y: 0
                },
                recoil: 1.4
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "groza_01",
                reload: "groza_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "groza_switch_01"
            }
        },
        grozas: {
            name: "Groza-S",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            isBullpup: !0,
            ammo: "762mm",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.8,
            fireDelay: .078,
            switchDelay: .75,
            barrelLength: 3.3,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 7.5,
            shotSpread: 3.5,
            bulletCount: 1,
            bulletType: "bullet_grozas",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-grozas.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-grozas-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 12,
                    y: 0
                },
                gunOffset: {
                    x: -8,
                    y: 0
                },
                recoil: 1.4
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "grozas_01",
                reload: "groza_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "groza_switch_01"
            }
        },
        dp28: {
            name: "DP-28",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 120,
            maxClip: 60,
            maxReload: 60,
            extendedClip: 80,
            extendedReload: 80,
            reloadTime: 3.3,
            fireDelay: .115,
            switchDelay: .75,
            barrelLength: 3.75,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 9,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_dp28",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: -2
            },
            lootImg: {
                sprite: "loot-weapon-dp28.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .53
                },
                tint: 1710618,
                leftHandOffset: {
                    x: 8.4,
                    y: 0
                },
                recoil: 1.33,
                magImg: {
                    sprite: "gun-dp28-top-01.img",
                    pos: {
                        x: 0,
                        y: -22.5
                    },
                    top: !0
                }
            },
            particle: {
                shellScale: 1,
                shellOffset: .6
            },
            sound: {
                shoot: "dp28_01",
                reload: "dp28_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "dp28_switch_01"
            }
        },
        bar: {
            name: "BAR M1918",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 80,
            maxClip: 20,
            maxReload: 20,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2.7,
            fireDelay: .12,
            switchDelay: .75,
            barrelLength: 3.7,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 8,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_bar",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: -1.5
            },
            lootImg: {
                sprite: "loot-weapon-bar.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .52
                },
                tint: 5065810,
                leftHandOffset: {
                    x: 6.8,
                    y: 0
                },
                recoil: 1.4
            },
            particle: {
                shellScale: 1,
                shellOffset: .6
            },
            sound: {
                shoot: "bar_01",
                reload: "bar_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "bar_switch_01"
            }
        },
        pkp: {
            name: "PKP Pecheneg",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 200,
            maxClip: 200,
            maxReload: 200,
            extendedClip: 250,
            extendedReload: 250,
            reloadTime: 5,
            fireDelay: .1,
            switchDelay: .75,
            barrelLength: 3.6,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 7.5,
            shotSpread: 2.5,
            bulletCount: 1,
            bulletType: "bullet_pkp",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: -5
            },
            lootImg: {
                sprite: "loot-weapon-pkp.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-pkp-top-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 12.5,
                    y: 0
                },
                recoil: 1.33,
                magImg: {
                    sprite: "gun-pkp-bot-01.img",
                    pos: {
                        x: 0,
                        y: -17.5
                    }
                }
            },
            particle: {
                shellScale: 1,
                shellOffset: .5875,
                shellReverse: !0
            },
            sound: {
                shoot: "pkp_01",
                reload: "pkp_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "pkp_switch_01"
            }
        },
        model94: {
            name: "Model 94",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "45acp",
            ammoSpawnCount: 64,
            maxClip: 8,
            maxReload: 1,
            extendedClip: 8,
            extendedReload: 1,
            reloadTime: .5,
            fireDelay: .7,
            switchDelay: 1,
            pullDelay: 1,
            barrelLength: 3.7,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1.5,
            bulletCount: 1,
            bulletType: "bullet_model94",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-model94.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .5175
                },
                tint: 10510624,
                leftHandOffset: {
                    x: 3.2,
                    y: 0
                },
                recoil: 2.33
            },
            particle: {
                shellScale: 1.4,
                shellOffset: .6
            },
            sound: {
                shoot: "model94_01",
                reload: "model94_reload_01",
                cycle: "model94_cycle_01",
                pull: "model94_cycle_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "model94_cycle_01"
            }
        },
        mkg45: {
            name: "Mk45G",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "45acp",
            ammoSpawnCount: 52,
            maxClip: 13,
            maxReload: 13,
            extendedClip: 26,
            extendedReload: 26,
            reloadTime: 2.1,
            fireDelay: .17,
            switchDelay: .75,
            barrelLength: 3.3,
            barrelOffset: 0,
            recoilTime: .2,
            moveSpread: 7.5,
            shotSpread: 3.5,
            bulletCount: 1,
            bulletType: "bullet_mkg45",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-mkg45.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .47
                },
                tint: 3487029,
                leftHandOffset: {
                    x: 4.2,
                    y: 0
                },
                recoil: 1.66
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "mkg45_01",
                reload: "mkg45_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "mkg45_switch_01"
            }
        },
        blr: {
            name: "BLR 81",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 30,
            maxClip: 3,
            maxReload: 3,
            extendedClip: 5,
            extendedReload: 5,
            reloadTime: 1.7,
            fireDelay: .8,
            switchDelay: 1,
            pullDelay: 1,
            barrelLength: 3.8,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1.5,
            bulletCount: 1,
            bulletType: "bullet_blr",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-blr.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .53
                },
                tint: 4663046,
                leftHandOffset: {
                    x: 6.4,
                    y: 0
                },
                recoil: 2.75
            },
            particle: {
                shellScale: 1.4,
                shellOffset: .6
            },
            sound: {
                shoot: "blr_01",
                reload: "blr_reload_01",
                cycle: "blr_cycle_01",
                pull: "blr_cycle_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "blr_cycle_01"
            }
        },
        mosin: {
            name: "Mosin-Nagant",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "762mm",
            aimDelay: !0,
            ammoSpawnCount: 20,
            maxClip: 5,
            maxReload: 1,
            maxReloadAlt: 5,
            extendedClip: 5,
            extendedReload: 1,
            extendedReloadAlt: 5,
            reloadTime: .9,
            reloadTimeAlt: 3,
            fireDelay: 1.75,
            switchDelay: 1,
            pullDelay: 1,
            barrelLength: 3.75,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_mosin",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-mosin.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .52
                },
                tint: 3348992,
                leftHandOffset: {
                    x: 2.8,
                    y: 0
                },
                recoil: 2.33
            },
            particle: {
                shellScale: 1.6,
                shellOffset: .6
            },
            sound: {
                shoot: "mosin_01",
                reload: "mosin_reload_01",
                reloadAlt: "mosin_reload_02",
                cycle: "mosin_cycle_01",
                pull: "mosin_pull_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "mosin_cycle_01"
            }
        },
        sv98: {
            name: "SV-98",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "762mm",
            aimDelay: !0,
            ammoSpawnCount: 30,
            maxClip: 10,
            maxReload: 10,
            extendedClip: 15,
            extendedReload: 15,
            reloadTime: 2.7,
            fireDelay: 1.5,
            switchDelay: 1,
            pullDelay: .8,
            barrelLength: 3.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2.5,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_sv98",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-sv98.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .4925
                },
                tint: 6654279,
                leftHandOffset: {
                    x: 2.8,
                    y: 0
                },
                recoil: 2.33
            },
            particle: {
                shellScale: 1.6,
                shellOffset: .6
            },
            sound: {
                shoot: "sv98_01",
                reload: "sv98_reload_01",
                cycle: "sv98_cycle_01",
                pull: "sv98_pull_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "sv98_cycle_01"
            }
        },
        awc: {
            name: "AWM-S",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "308sub",
            aimDelay: !0,
            ammoSpawnCount: 20,
            maxClip: 5,
            maxReload: 5,
            extendedClip: 7,
            extendedReload: 7,
            reloadTime: 3.6,
            fireDelay: 1.5,
            switchDelay: 1,
            pullDelay: 1.4,
            barrelLength: 3.8,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: .5,
            bulletCount: 1,
            bulletType: "bullet_awc",
            headshotMult: 1,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-awc.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-awc-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 11,
                    y: 0
                },
                recoil: 2.66
            },
            particle: {
                shellScale: 1.5,
                shellOffset: .6
            },
            sound: {
                shoot: "awc_01",
                reload: "awc_reload_01",
                cycle: "awc_cycle_01",
                pull: "awc_pull_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "awc_cycle_01",
                fallOff: 3
            }
        },
        m39: {
            name: "M39 EMR",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 60,
            maxClip: 20,
            maxReload: 20,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 2.5,
            fireDelay: .23,
            switchDelay: .75,
            barrelLength: 3.5,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4.25,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_m39",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m39.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .4925
                },
                tint: 3355443,
                leftHandOffset: {
                    x: 2.8,
                    y: 0
                },
                recoil: 1.66
            },
            particle: {
                shellScale: 1.3,
                shellOffset: .575
            },
            sound: {
                shoot: "m39_01",
                reload: "m39_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "m39_switch_01"
            }
        },
        svd: {
            name: "SVD-63",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 60,
            maxClip: 10,
            maxReload: 10,
            extendedClip: 20,
            extendedReload: 20,
            reloadTime: 2.5,
            fireDelay: .25,
            switchDelay: .75,
            barrelLength: 4,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4.5,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_svd",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-svd.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .56
                },
                tint: 1842204,
                leftHandOffset: {
                    x: 8,
                    y: 0
                },
                recoil: 2
            },
            particle: {
                shellScale: 1.3,
                shellOffset: .575
            },
            sound: {
                shoot: "svd_01",
                reload: "svd_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "svd_switch_01"
            }
        },
        garand: {
            name: "M1 Garand",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "762mm",
            ammoSpawnCount: 40,
            maxClip: 8,
            maxReload: 8,
            extendedClip: 8,
            extendedReload: 8,
            reloadTime: 2.1,
            fireDelay: .23,
            switchDelay: .75,
            barrelLength: 3.6,
            barrelOffset: 0,
            recoilTime: .36,
            moveSpread: 4,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_garand",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-garand.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-garand-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 8,
                    y: 0
                },
                recoil: 1.66
            },
            particle: {
                shellScale: 1.3,
                shellOffset: .575
            },
            sound: {
                shoot: "garand_01",
                shootLast: "garand_02",
                reload: "garand_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "garand_switch_01"
            }
        },
        m870: {
            name: "M870",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "12gauge",
            deployGroup: 1,
            ammoSpawnCount: 10,
            maxClip: 5,
            maxReload: 1,
            extendedClip: 10,
            extendedReload: 1,
            reloadTime: .75,
            fireDelay: .9,
            switchDelay: .9,
            pullDelay: .9,
            barrelLength: 3.15,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 10,
            bulletCount: 9,
            jitter: 1,
            bulletType: "bullet_buckshot",
            headshotMult: 1.5,
            lootImg: {
                sprite: "loot-weapon-m870.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            speed: {
                equip: 0,
                attack: 0
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .435
                },
                tint: 3348992,
                leftHandOffset: {
                    x: 7,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "m870_01",
                reload: "m870_reload_01",
                cycle: "m870_cycle_01",
                pull: "m870_pull_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m870_cycle_01"
            }
        },
        m1100: {
            name: "M1100",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "12gauge",
            ammoSpawnCount: 12,
            maxClip: 4,
            maxReload: 1,
            extendedClip: 8,
            extendedReload: 1,
            reloadTime: .7,
            fireDelay: .3,
            switchDelay: .9,
            barrelLength: 3.15,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 25,
            bulletCount: 18,
            jitter: 1,
            bulletType: "bullet_birdshot",
            headshotMult: 1.5,
            lootImg: {
                sprite: "loot-weapon-m1100.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            speed: {
                equip: 0,
                attack: 0
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .435
                },
                tint: 3032110,
                leftHandOffset: {
                    x: 7,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "m1100_01",
                reload: "m1100_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m1100_deploy_01"
            }
        },
        mp220: {
            name: "MP220",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "reload",
            ammo: "12gauge",
            ammoSpawnCount: 10,
            maxClip: 2,
            maxReload: 2,
            extendedClip: 2,
            extendedReload: 2,
            reloadTime: 2.7,
            fireDelay: .2,
            switchDelay: .3,
            barrelLength: 2.7,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 10,
            bulletCount: 9,
            jitter: 1,
            bulletType: "bullet_buckshot",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-mp220.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-mp220-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .35
            },
            sound: {
                shoot: "mp220_01",
                reload: "mp220_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "mp220_deploy_01"
            }
        },
        saiga: {
            name: "Saiga-12",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "12gauge",
            ammoSpawnCount: 20,
            maxClip: 5,
            maxReload: 5,
            extendedClip: 8,
            extendedReload: 8,
            reloadTime: 2.5,
            fireDelay: .4,
            switchDelay: .75,
            barrelLength: 3.75,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 10,
            bulletCount: 9,
            jitter: 1,
            bulletType: "bullet_buckshot",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-saiga.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-saiga-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 8,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "saiga_01",
                reload: "saiga_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "saiga_switch_01"
            }
        },
        spas12: {
            name: "SPAS-12",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "12gauge",
            deployGroup: 1,
            ammoSpawnCount: 18,
            maxClip: 9,
            maxReload: 1,
            extendedClip: 12,
            extendedReload: 1,
            reloadTime: .55,
            fireDelay: .75,
            switchDelay: .75,
            pullDelay: .75,
            barrelLength: 2.8,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 4,
            bulletCount: 9,
            jitter: .2,
            bulletType: "bullet_flechette",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-spas12.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .4
                },
                tint: 2966097,
                leftHandOffset: {
                    x: 4.9,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "spas12_01",
                reload: "spas12_reload_01",
                cycle: "spas12_cycle_01",
                pull: "spas12_pull_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "spas12_cycle_01"
            }
        },
        m1014: {
            name: "M1014",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "12gauge",
            ammoSpawnCount: 16,
            maxClip: 8,
            maxReload: 1,
            extendedClip: 10,
            extendedReload: 1,
            reloadTime: .52,
            fireDelay: .4,
            switchDelay: .75,
            barrelLength: 3.2,
            barrelOffset: 0,
            recoilTime: .5,
            moveSpread: 4,
            shotSpread: 4,
            bulletCount: 1,
            jitter: .2,
            bulletType: "bullet_slug",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m1014.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-long-01.img",
                scale: {
                    x: .5,
                    y: .44
                },
                tint: 5656632,
                leftHandOffset: {
                    x: 4.8,
                    y: 0
                },
                recoil: 1.33
            },
            particle: {
                shellScale: 1,
                shellOffset: .45
            },
            sound: {
                shoot: "m1014_01",
                reload: "m1014_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m1014_deploy_01"
            }
        },
        usas: {
            name: "USAS-12",
            type: "gun",
            quality: 1,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "12gauge",
            toMouseHit: !0,
            ammoSpawnCount: 30,
            maxClip: 10,
            maxReload: 10,
            extendedClip: 20,
            extendedReload: 20,
            reloadTime: 2.9,
            fireDelay: .5,
            switchDelay: .75,
            barrelLength: 3.65,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 6,
            shotSpread: 7,
            bulletCount: 1,
            jitter: 1,
            bulletType: "bullet_frag",
            noSplinter: !0,
            headshotMult: 1,
            speed: {
                equip: 0,
                attack: -1
            },
            lootImg: {
                sprite: "loot-weapon-usas.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-usas-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 16,
                    y: 0
                },
                recoil: 1.5
            },
            particle: {
                shellScale: 1,
                shellOffset: .35
            },
            sound: {
                shoot: "usas_01",
                reload: "usas_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_02",
                deploy: "usas_switch_01"
            }
        },
        m9: {
            name: "M9",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 45,
            dualWieldType: "m9_dual",
            pistol: !0,
            maxClip: 15,
            maxReload: 15,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 1.6,
            fireDelay: .12,
            switchDelay: .25,
            barrelLength: 2.2,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 3,
            bulletCount: 1,
            bulletType: "bullet_m9",
            bulletTypeBonus: "bullet_m9_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m9.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .505
                },
                tint: 1973790,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "m9_01",
                reload: "m9_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m9_switch_01"
            }
        },
        m9_dual: {
            name: "Dual M9",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            isDual: !0,
            pistol: !0,
            ammo: "9mm",
            ammoSpawnCount: 45,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 60,
            extendedReload: 60,
            reloadTime: 3.1,
            fireDelay: .08,
            switchDelay: .25,
            barrelLength: 2.2,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 3.5,
            shotSpread: 4,
            bulletCount: 1,
            bulletType: "bullet_m9",
            bulletTypeBonus: "bullet_m9_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m9-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .505
                },
                tint: 1973790,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "m9_01",
                reload: "m9_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m9_switch_01"
            }
        },
        m9_cursed: {
            name: "M9 Cursed",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "9mm_cursed",
            ammoSpawnCount: 0,
            ammoInfinite: !0,
            noPotatoSwap: !0,
            pistol: !0,
            noDrop: !0,
            maxClip: 15,
            maxReload: 15,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 1.6,
            fireDelay: .12,
            switchDelay: .25,
            barrelLength: 2.2,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 3,
            bulletCount: 1,
            bulletType: "bullet_m9_cursed",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m9-cursed.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .505
                },
                tint: 1973790,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "m9_01",
                reload: "m9_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m9_switch_01"
            }
        },
        m93r: {
            name: "M93R",
            type: "gun",
            quality: 0,
            fireMode: "burst",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 60,
            dualWieldType: "m93r_dual",
            pistol: !1,
            maxClip: 20,
            maxReload: 20,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 1.8,
            fireDelay: .28,
            burstDelay: .04,
            switchDelay: .25,
            barrelLength: 2.3,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: 4,
            bulletCount: 1,
            burstCount: 3,
            bulletType: "bullet_m93r",
            bulletTypeBonus: "bullet_m93r_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m93r.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .51
                },
                tint: 2766875,
                leftHandOffset: {
                    x: .8,
                    y: 0
                },
                recoil: .5
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "m93r_01",
                reload: "m93r_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m93r_switch_01"
            }
        },
        m93r_dual: {
            name: "Dual M93R",
            type: "gun",
            quality: 0,
            fireMode: "burst",
            caseTiming: "shoot",
            isDual: !0,
            pistol: !0,
            ammo: "9mm",
            ammoSpawnCount: 60,
            maxClip: 40,
            maxReload: 40,
            extendedClip: 60,
            extendedReload: 60,
            reloadTime: 3.3,
            fireDelay: .18,
            burstDelay: .04,
            switchDelay: .25,
            barrelLength: 2.2,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 6,
            shotSpread: 7,
            bulletCount: 1,
            burstCount: 3,
            bulletType: "bullet_m93r",
            bulletTypeBonus: "bullet_m93r_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m93r-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .51
                },
                tint: 2766875,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "m93r_01",
                reload: "m93r_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m93r_switch_01"
            }
        },
        glock: {
            name: "G18C",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 51,
            dualWieldType: "glock_dual",
            pistol: !0,
            maxClip: 17,
            maxReload: 17,
            extendedClip: 31,
            extendedReload: 31,
            reloadTime: 1.95,
            fireDelay: .06,
            switchDelay: .25,
            barrelLength: 2.2,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 10,
            shotSpread: 12,
            bulletCount: 1,
            bulletType: "bullet_glock",
            bulletTypeBonus: "bullet_glock_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-glock.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .49
                },
                tint: 1973790,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "glock_01",
                reload: "glock_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "glock_switch_01"
            }
        },
        glock_dual: {
            name: "Dual G18C",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 51,
            isDual: !0,
            pistol: !0,
            maxClip: 34,
            maxReload: 34,
            extendedClip: 62,
            extendedReload: 62,
            reloadTime: 3.8,
            fireDelay: .03,
            switchDelay: .25,
            barrelLength: 2.2,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 16,
            shotSpread: 18,
            bulletCount: 1,
            bulletType: "bullet_glock",
            bulletTypeBonus: "bullet_glock_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-glock-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .49
                },
                tint: 1973790,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "glock_01",
                reload: "glock_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "glock_switch_01"
            }
        },
        p30l: {
            name: "P30L",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 45,
            dualWieldType: "p30l_dual",
            pistol: !0,
            maxClip: 15,
            maxReload: 15,
            extendedClip: 30,
            extendedReload: 30,
            reloadTime: 1.2,
            fireDelay: .14,
            switchDelay: .25,
            barrelLength: 2.3,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 1,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_p30l",
            bulletTypeBonus: "bullet_p30l_bonus",
            headshotMult: 2,
            speed: {
                equip: 1,
                attack: 1
            },
            lootImg: {
                sprite: "loot-weapon-p30l.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-p30l-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "p30l_01",
                reload: "p30l_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "p30l_switch_01"
            }
        },
        p30l_dual: {
            name: "Dual P30L",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "9mm",
            ammoSpawnCount: 90,
            isDual: !0,
            pistol: !0,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 60,
            extendedReload: 60,
            reloadTime: 2.65,
            fireDelay: .09,
            switchDelay: .3,
            barrelLength: 2.3,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 3,
            bulletCount: 1,
            bulletType: "bullet_p30l",
            bulletTypeBonus: "bullet_p30l_bonus",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-p30l-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-p30l-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .25
            },
            sound: {
                shoot: "p30l_01",
                reload: "p30l_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "p30l_switch_01"
            }
        },
        ot38: {
            name: "OT-38",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "reload",
            ammo: "762mm",
            ammoSpawnCount: 20,
            dualWieldType: "ot38_dual",
            pistol: !0,
            maxClip: 5,
            maxReload: 5,
            extendedClip: 5,
            extendedReload: 5,
            reloadTime: 2,
            fireDelay: .4,
            switchDelay: .3,
            barrelLength: 2.05,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1.25,
            bulletCount: 1,
            bulletType: "bullet_ot38",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-ot38.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .4625
                },
                tint: 7368816,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .225
            },
            sound: {
                shoot: "ot38_01",
                reload: "ot38_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "ot38_switch_01"
            }
        },
        ot38_dual: {
            name: "Dual OT-38",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "reload",
            ammo: "762mm",
            ammoSpawnCount: 20,
            isDual: !0,
            pistol: !0,
            maxClip: 10,
            maxReload: 10,
            extendedClip: 10,
            extendedReload: 10,
            reloadTime: 3.8,
            fireDelay: .2,
            switchDelay: .3,
            barrelLength: 2,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: 1.75,
            bulletCount: 1,
            bulletType: "bullet_ot38",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-ot38-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .4625
                },
                tint: 7368816,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .225
            },
            sound: {
                shoot: "ot38_01",
                reload: "ot38_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "ot38_switch_01"
            }
        },
        ots38: {
            name: "OTs-38",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "reload",
            ammo: "762mm",
            ammoSpawnCount: 20,
            dualWieldType: "ots38_dual",
            pistol: !0,
            maxClip: 5,
            maxReload: 5,
            extendedClip: 5,
            extendedReload: 5,
            reloadTime: 2,
            fireDelay: .36,
            switchDelay: .3,
            barrelLength: 2.05,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 2.4,
            shotSpread: 1.2,
            bulletCount: 1,
            bulletType: "bullet_ots38",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-ots38.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-ots38-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .225
            },
            sound: {
                shoot: "ots38_01",
                reload: "ot38_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "ot38_switch_01"
            }
        },
        ots38_dual: {
            name: "Dual OTs-38",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "reload",
            ammo: "762mm",
            ammoSpawnCount: 40,
            isDual: !0,
            pistol: !0,
            maxClip: 10,
            maxReload: 10,
            extendedClip: 10,
            extendedReload: 10,
            reloadTime: 3.8,
            fireDelay: .18,
            switchDelay: .3,
            barrelLength: 2,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 2.8,
            shotSpread: 1.4,
            bulletCount: 1,
            bulletType: "bullet_ots38",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-ots38-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-ots38-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .225
            },
            sound: {
                shoot: "ots38_01",
                reload: "ot38_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "ot38_switch_01"
            }
        },
        colt45: {
            name: "Peacemaker",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "reload",
            ammo: "45acp",
            ammoSpawnCount: 48,
            dualWieldType: "colt45_dual",
            pistol: !0,
            maxClip: 6,
            maxReload: 6,
            extendedClip: 6,
            extendedReload: 6,
            reloadTime: 3,
            fireDelay: .12,
            switchDelay: .3,
            barrelLength: 2.26,
            barrelOffset: 0,
            recoilTime: .35,
            moveSpread: 3,
            shotSpread: 16,
            bulletCount: 1,
            bulletType: "bullet_colt45",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-colt45.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .52
                },
                tint: 12895428,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1.2,
                shellOffset: .225
            },
            sound: {
                shoot: "colt45_01",
                reload: "colt45_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "colt45_switch_01"
            }
        },
        colt45_dual: {
            name: "Dual Peacemaker",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "reload",
            ammo: "45acp",
            ammoSpawnCount: 48,
            isDual: !0,
            pistol: !0,
            maxClip: 12,
            maxReload: 12,
            extendedClip: 12,
            extendedReload: 12,
            reloadTime: 5.1,
            fireDelay: .13,
            switchDelay: .3,
            barrelLength: 2.26,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: .35,
            moveSpread: 3,
            shotSpread: 16,
            bulletCount: 1,
            bulletType: "bullet_colt45",
            headshotMult: 1.5,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-colt45-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .52
                },
                tint: 12895428,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1.2,
                shellOffset: .225
            },
            sound: {
                shoot: "colt45_01",
                reload: "colt45_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "colt45_switch_01"
            }
        },
        m1911: {
            name: "M1911",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "45acp",
            ammoSpawnCount: 28,
            dualWieldType: "m1911_dual",
            pistol: !0,
            maxClip: 7,
            maxReload: 7,
            extendedClip: 12,
            extendedReload: 12,
            reloadTime: 2.1,
            fireDelay: .13,
            switchDelay: .25,
            barrelLength: 2.1,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 2,
            bulletCount: 1,
            bulletType: "bullet_m1911",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m1911.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 9605778,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1.2,
                shellOffset: .25
            },
            sound: {
                shoot: "m1911_01",
                reload: "m1911_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m1911_switch_01"
            }
        },
        m1911_dual: {
            name: "Dual M1911",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            isDual: !0,
            pistol: !0,
            ammo: "45acp",
            ammoSpawnCount: 28,
            maxClip: 14,
            maxReload: 14,
            extendedClip: 24,
            extendedReload: 24,
            reloadTime: 3.6,
            fireDelay: .085,
            switchDelay: .25,
            barrelLength: 2.1,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 3.5,
            shotSpread: 4,
            bulletCount: 1,
            bulletType: "bullet_m1911",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m1911-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 9605778,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1.2,
                shellOffset: .25
            },
            sound: {
                shoot: "m1911_01",
                reload: "m1911_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m1911_switch_01"
            }
        },
        m1a1: {
            name: "M1A1",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            ammo: "45acp",
            ammoSpawnCount: 90,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 50,
            extendedReload: 50,
            reloadTime: 2.8,
            fireDelay: .095,
            switchDelay: .75,
            barrelLength: 2.8,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 6,
            shotSpread: 6,
            bulletCount: 1,
            bulletType: "bullet_m1a1",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-m1a1.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-med-01.img",
                scale: {
                    x: .5,
                    y: .53
                },
                tint: 3674112,
                leftHandOffset: {
                    x: 5.8,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1.2,
                shellOffset: .375
            },
            sound: {
                shoot: "m1a1_01",
                reload: "m1a1_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "m1a1_switch_01"
            }
        },
        deagle: {
            name: "DEagle 50",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "50AE",
            ammoSpawnCount: 56,
            dualWieldType: "deagle_dual",
            pistol: !0,
            maxClip: 7,
            maxReload: 7,
            extendedClip: 9,
            extendedReload: 9,
            reloadTime: 2.3,
            fireDelay: .16,
            switchDelay: .3,
            barrelLength: 1.855,
            barrelOffset: 0,
            recoilTime: .5,
            moveSpread: 6,
            shotSpread: 2.5,
            bulletCount: 1,
            bulletType: "bullet_deagle",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-deagle.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-deagle-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1.4,
                shellOffset: .265
            },
            sound: {
                shoot: "deagle_01",
                reload: "deagle_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "deagle_switch_01"
            }
        },
        deagle_dual: {
            name: "Dual DEagle 50",
            type: "gun",
            quality: 1,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "50AE",
            ammoSpawnCount: 98,
            isDual: !0,
            pistol: !0,
            maxClip: 14,
            maxReload: 14,
            extendedClip: 18,
            extendedReload: 18,
            reloadTime: 4,
            fireDelay: .12,
            switchDelay: .3,
            barrelLength: 2.4,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: .5,
            moveSpread: 7.5,
            shotSpread: 3.5,
            bulletCount: 1,
            bulletType: "bullet_deagle",
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-deagle-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-deagle-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .265
            },
            sound: {
                shoot: "deagle_01",
                reload: "deagle_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "deagle_switch_01"
            }
        },
        flare_gun: {
            name: "Flare Gun",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "flare",
            dualWieldType: "flare_gun_dual",
            pistol: !0,
            outsideOnly: !0,
            ammoSpawnCount: 1,
            ignoreEndlessAmmo: !0,
            maxClip: 1,
            maxReload: 1,
            extendedClip: 1,
            extendedReload: 1,
            reloadTime: 2,
            fireDelay: .4,
            switchDelay: .3,
            barrelLength: 2,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1.25,
            bulletCount: 1,
            bulletType: "bullet_flare",
            noSplinter: !0,
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-flare-gun.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .4625
                },
                tint: 16733184,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .225
            },
            sound: {
                shoot: "flare_gun_01",
                reload: "flare_gun_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "gun_switch_01"
            }
        },
        flare_gun_dual: {
            name: "Dual Flare Gun",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            ammo: "flare",
            isDual: !0,
            pistol: !0,
            outsideOnly: !0,
            ammoSpawnCount: 2,
            ignoreEndlessAmmo: !0,
            maxClip: 2,
            maxReload: 2,
            extendedClip: 2,
            extendedReload: 2,
            reloadTime: 3.5,
            fireDelay: .3,
            switchDelay: .3,
            barrelLength: 2,
            barrelOffset: 0,
            dualOffset: .6,
            recoilTime: 1e10,
            moveSpread: 3,
            shotSpread: 1.25,
            bulletCount: 1,
            bulletType: "bullet_flare",
            noSplinter: !0,
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-flare-gun-dual.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-short-01.img",
                scale: {
                    x: .5,
                    y: .4625
                },
                tint: 16733184,
                leftHandOffset: {
                    x: 0,
                    y: 0
                },
                recoil: 1
            },
            particle: {
                shellScale: 1,
                shellOffset: .225
            },
            sound: {
                shoot: "flare_gun_01",
                reload: "flare_gun_reload_02",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "gun_switch_01"
            }
        },
        potato_cannon: {
            name: "Potato Cannon",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            isLauncher: !0,
            noPotatoSwap: !0,
            deployGroup: 3,
            ammo: "potato_ammo",
            ammoSpawnCount: 0,
            ammoInfinite: !0,
            maxClip: 4,
            maxReload: 1,
            extendedClip: 4,
            extendedReload: 1,
            reloadTime: 1,
            fireDelay: 1.2,
            switchDelay: .9,
            barrelLength: 3,
            barrelOffset: -1,
            recoilTime: 1e10,
            moveSpread: 2,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_potato",
            projType: "potato_cannonball",
            noSplinter: !0,
            headshotMult: 1,
            speed: {
                equip: -3,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-potato-cannon.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-potato-cannon-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 7,
                    y: 2
                },
                gunOffset: {
                    x: -10,
                    y: -4
                },
                recoil: 8,
                handsBelow: !0
            },
            particle: {
                shellScale: 1,
                shellOffset: -1,
                shellOffsetY: 1
            },
            sound: {
                shoot: "potato_cannon_01",
                reload: "potato_cannon_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "potato_cannon_switch_01"
            }
        },
        potato_smg: {
            name: "Spud Gun",
            type: "gun",
            quality: 0,
            fireMode: "auto",
            caseTiming: "shoot",
            noPotatoSwap: !0,
            ammo: "potato_ammo",
            ammoSpawnCount: 0,
            ammoInfinite: !0,
            maxClip: 30,
            maxReload: 30,
            extendedClip: 40,
            extendedReload: 40,
            reloadTime: 2,
            fireDelay: .09,
            switchDelay: .75,
            barrelLength: 3.25,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 4,
            shotSpread: 3,
            bulletCount: 1,
            bulletType: "bullet_potato",
            projType: "potato_smgshot",
            noSplinter: !0,
            headshotMult: 2,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-potato-smg.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-potato-smg-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                recoil: 2,
                magImg: {
                    sprite: "gun-potato-smg-top-01.img",
                    pos: {
                        x: 0,
                        y: -15
                    },
                    top: !0
                }
            },
            particle: {
                shellScale: 1,
                shellOffset: .1,
                shellReverse: !0,
                shellOffsetY: -1.1
            },
            sound: {
                shoot: "potato_smg_01",
                reload: "potato_smg_reload_01",
                pickup: "gun_pickup_01",
                empty: "empty_fire_01",
                deploy: "potato_smg_switch_01"
            }
        },
        bugle: {
            name: "Bugle",
            type: "gun",
            quality: 0,
            fireMode: "single",
            caseTiming: "shoot",
            noDrop: !0,
            noPotatoSwap: !0,
            pistol: !0,
            ignoreDetune: !0,
            ammo: "bugle_ammo",
            ammoSpawnCount: 0,
            maxClip: 1,
            maxReload: 1,
            extendedClip: 4,
            extendedReload: 1,
            reloadTime: .01,
            fireDelay: 1,
            switchDelay: .3,
            barrelLength: 3,
            barrelOffset: 0,
            recoilTime: 1e10,
            moveSpread: 1,
            shotSpread: 1,
            bulletCount: 1,
            bulletType: "bullet_bugle",
            noSplinter: !0,
            headshotMult: 1,
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-weapon-bugle.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .3
            },
            worldImg: {
                sprite: "gun-bugle-01.img",
                scale: {
                    x: .5,
                    y: .5
                },
                tint: 16777215,
                leftHandOffset: {
                    x: 12,
                    y: 0
                },
                recoil: 4
            },
            particle: {
                shellScale: 4,
                shellOffset: 2,
                shellForward: 1
            },
            sound: {
                shoot: "bugle_01",
                shootTeam: {
                    1: "bugle_01",
                    2: "bugle_02"
                },
                shootAlt: "bugle_03",
                reload: "",
                pickup: "stow_weapon_01",
                empty: "empty_fire_01",
                deploy: "stow_weapon_01"
            }
        }
    }
      , gs = {
        heal_basic: {
            type: "heal_effect",
            name: "Basic Healing",
            rarity: 0,
            texture: "part-heal-basic.img",
            emitter: "heal_basic"
        },
        heal_heart: {
            type: "heal_effect",
            name: "Healing Hearts",
            rarity: 1,
            texture: "part-heal-heart.img",
            emitter: "heal_heart"
        },
        heal_moon: {
            type: "heal_effect",
            name: "Blood Moon",
            rarity: 2,
            texture: "part-heal-moon.img",
            emitter: "heal_moon"
        },
        heal_tomoe: {
            type: "heal_effect",
            name: "Tomoe",
            rarity: 3,
            texture: "part-heal-tomoe.img",
            emitter: "heal_tomoe"
        },
        boost_basic: {
            type: "boost_effect",
            name: "Basic Boost",
            rarity: 0,
            texture: "part-boost-basic.img",
            emitter: "boost_basic"
        },
        boost_star: {
            type: "boost_effect",
            name: "Starboost",
            rarity: 1,
            texture: "part-boost-star.img",
            emitter: "boost_star"
        },
        boost_naturalize: {
            type: "boost_effect",
            name: "Naturalize",
            rarity: 2,
            texture: "part-boost-naturalize.img",
            emitter: "boost_naturalize"
        },
        boost_shuriken: {
            type: "boost_effect",
            name: "Shuriken",
            rarity: 3,
            texture: "part-boost-shuriken.img",
            emitter: "boost_shuriken"
        }
    };
    function ye(r, t) {
        return dr(eo, r, t)
    }
    const eo = {
        fists: {
            name: "Fists",
            type: "melee",
            quality: 0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 24,
            obstacleDamage: 1,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: .9,
                damageTimes: [.1],
                cooldownTime: .25
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["fists"]
            },
            sound: {
                swing: "punch_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "punch_hit_01"
            },
            lootImg: {
                sprite: "loot-weapon-fists.img",
                scale: .3,
                rad: 25,
                tint: 65280
            }
        },
        knuckles: {
            name: "Knuckles",
            type: "melee",
            quality: 0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 24,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            noDropOnDeath: !0,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: .9,
                damageTimes: [.1],
                cooldownTime: .25
            },
            speed: {
                equip: 1,
                attack: 0
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["fists", "fists"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "punch_swing_01",
                deploy: "knuckles_deploy_01",
                playerHit: "punch_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-knuckles-rusted.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rad: 25,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-knuckles-rusted.img",
                pos: {
                    x: 0,
                    y: -27
                },
                rot: .5 * Math.PI,
                scale: {
                    x: .2,
                    y: .2
                },
                tint: 16777215
            }
        },
        karambit: {
            name: "Karambit",
            type: "melee",
            quality: 0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 24,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            noDropOnDeath: !0,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: .9,
                damageTimes: [.1],
                cooldownTime: .25
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "slash",
                attackAnims: ["slash", "fists"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "knife_deploy_01",
                playerHit: "knife_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-karambit-rugged.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                mirror: !0,
                rot: 2.35619
            },
            worldImg: {
                sprite: "loot-melee-karambit-rugged.img",
                pos: {
                    x: 15.5,
                    y: -5
                },
                rot: .5 * Math.PI,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        bayonet: {
            name: "Bayonet",
            type: "melee",
            quality: 0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 24,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            noDropOnDeath: !0,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: .9,
                damageTimes: [.1],
                cooldownTime: .25
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["cut", "thrust"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "knife_deploy_01",
                playerHit: "knife_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-bayonet-rugged.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-bayonet-rugged.img",
                pos: {
                    x: -.5,
                    y: -32.5
                },
                rot: .785,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        huntsman: {
            name: "Huntsman",
            type: "melee",
            quality: 0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 24,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            noDropOnDeath: !0,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: .9,
                damageTimes: [.1],
                cooldownTime: .25
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["cut", "thrust"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "knife_deploy_01",
                playerHit: "knife_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-huntsman-rugged.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-huntsman-rugged.img",
                pos: {
                    x: 2.5,
                    y: -35.5
                },
                rot: .82,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        bowie: {
            name: "Bowie",
            type: "melee",
            quality: 0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 24,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            noDropOnDeath: !0,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: .9,
                damageTimes: [.1],
                cooldownTime: .25
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["cut", "thrust"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "knife_deploy_01",
                playerHit: "knife_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-bowie-vintage.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-bowie-vintage.img",
                pos: {
                    x: -.5,
                    y: -32.5
                },
                rot: .785,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        machete: {
            name: "Machete",
            type: "melee",
            quality: 1,
            cleave: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 33,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            attack: {
                offset: {
                    x: 1.5,
                    y: 0
                },
                rad: 1.75,
                damageTimes: [.12],
                cooldownTime: .3
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "machete",
                attackAnims: ["cutReverse"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "knife_deploy_01",
                playerHit: "knife_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-machete-taiga.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-machete-taiga.img",
                pos: {
                    x: -2.5,
                    y: -48.5
                },
                rot: 1.885,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        saw: {
            name: "Saw",
            type: "melee",
            quality: 1,
            cleave: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 44,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            attack: {
                offset: {
                    x: 2,
                    y: 0
                },
                rad: 1.75,
                damageTimes: [.1, .5],
                cooldownTime: .7
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "machete",
                attackAnims: ["sawSwing"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "knife_deploy_01",
                playerHit: "knife_hit_01",
                playerHit2: "saw_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-bonesaw-rusted.img",
                mirror: !0,
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-bonesaw-rusted.img",
                pos: {
                    x: -2.5,
                    y: -48.5
                },
                rot: 1.885,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        woodaxe: {
            name: "Wood Axe",
            type: "melee",
            quality: 0,
            armorPiercing: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 36,
            obstacleDamage: 1.92,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: 1,
                damageTimes: [.18],
                cooldownTime: .36
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "meleeTwoHanded",
                attackAnims: ["axeSwing"]
            },
            sound: {
                pickup: "heavy_pickup_01",
                swing: "heavy_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "axe_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-woodaxe.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                mirror: !0,
                rot: 2.35619
            },
            worldImg: {
                sprite: "loot-melee-woodaxe.img",
                pos: {
                    x: -12.5,
                    y: -16
                },
                rot: 1.2,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215,
                leftHandOntop: !0
            }
        },
        fireaxe: {
            name: "Fire Axe",
            type: "melee",
            quality: 1,
            armorPiercing: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 44,
            obstacleDamage: 2.4,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: 1,
                damageTimes: [.21],
                cooldownTime: .42
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "meleeTwoHanded",
                attackAnims: ["axeSwing"]
            },
            sound: {
                pickup: "heavy_pickup_01",
                swing: "heavy_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "axe_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-fireaxe.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                mirror: !0,
                rot: 2.35619
            },
            worldImg: {
                sprite: "loot-melee-fireaxe.img",
                pos: {
                    x: -12.5,
                    y: -4
                },
                rot: 1.2,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215,
                leftHandOntop: !0
            }
        },
        katana: {
            name: "Katana",
            type: "melee",
            quality: 0,
            armorPiercing: !0,
            cleave: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 40,
            obstacleDamage: 1.5,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 1.75,
                    y: 0
                },
                rad: 2,
                damageTimes: [.2],
                cooldownTime: .4
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "meleeKatana",
                attackAnims: ["katanaSwing"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "medium_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "knife_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-katana.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                mirror: !0,
                rot: 2.35619
            },
            worldImg: {
                sprite: "loot-melee-katana.img",
                pos: {
                    x: 52.5,
                    y: -2
                },
                rot: 3,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215,
                leftHandOntop: !0
            }
        },
        naginata: {
            name: "Naginata",
            type: "melee",
            quality: 1,
            armorPiercing: !0,
            cleave: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 56,
            obstacleDamage: 1.92,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 3.5,
                    y: 0
                },
                rad: 2,
                damageTimes: [.27],
                cooldownTime: .54
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "meleeNaginata",
                attackAnims: ["naginataSwing"]
            },
            sound: {
                pickup: "heavy_pickup_01",
                swing: "heavy_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "axe_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-naginata.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                mirror: !0,
                rot: 2.35619
            },
            worldImg: {
                sprite: "loot-melee-naginata.img",
                pos: {
                    x: 42.5,
                    y: -3
                },
                rot: 1.9,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215,
                leftHandOntop: !0
            }
        },
        stonehammer: {
            name: "Stone Hammer",
            type: "melee",
            quality: 1,
            armorPiercing: !0,
            stonePiercing: !0,
            autoAttack: !1,
            switchDelay: .25,
            damage: 60,
            obstacleDamage: 1.92,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 1.35,
                    y: 0
                },
                rad: 1.25,
                damageTimes: [.25],
                cooldownTime: .5
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "meleeTwoHanded",
                attackAnims: ["hammerSwing"]
            },
            sound: {
                pickup: "heavy_pickup_01",
                swing: "heavy_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "hammer_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-stonehammer.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                mirror: !0,
                rot: 2.35619
            },
            worldImg: {
                sprite: "loot-melee-stonehammer.img",
                pos: {
                    x: -12.5,
                    y: -4
                },
                rot: 1.2,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215,
                leftHandOntop: !0
            }
        },
        hook: {
            name: "Hook",
            type: "melee",
            quality: 1,
            autoAttack: !0,
            switchDelay: .25,
            damage: 18,
            obstacleDamage: 1,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 1.5,
                    y: 0
                },
                rad: 1,
                damageTimes: [.075],
                cooldownTime: .175
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["hook"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "hook_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-hook-silver.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-hook-silver.img",
                pos: {
                    x: 0,
                    y: -27
                },
                rot: .5 * Math.PI,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215,
                renderOnHand: !0
            }
        },
        pan: {
            name: "Pan",
            type: "melee",
            quality: 1,
            autoAttack: !1,
            switchDelay: .25,
            damage: 60,
            obstacleDamage: .8,
            headshotMult: 1,
            attack: {
                offset: {
                    x: 2,
                    y: 0
                },
                rad: 1.5,
                damageTimes: [.15],
                cooldownTime: .5
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["pan"]
            },
            sound: {
                pickup: "pan_pickup_01",
                swing: "heavy_swing_01",
                deploy: "pan_pickup_01",
                playerHit: "pan_hit_01",
                bullet: "pan_bullet"
            },
            lootImg: {
                sprite: "loot-melee-pan-black.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: -.785
            },
            worldImg: {
                sprite: "loot-melee-pan-black-side.img",
                pos: {
                    x: 0,
                    y: -40
                },
                rot: 1.125,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            },
            hipImg: {
                sprite: "loot-melee-pan-black-side.img",
                pos: {
                    x: -17.25,
                    y: 7.5
                },
                rot: .78 * Math.PI,
                scale: {
                    x: .3,
                    y: .3
                },
                tint: 16777215
            },
            reflectSurface: {
                equipped: {
                    p0: {
                        x: 2.65,
                        y: -.125
                    },
                    p1: {
                        x: 1.35,
                        y: -.74
                    }
                },
                unequipped: {
                    p0: {
                        x: -.625,
                        y: -1.2
                    },
                    p1: {
                        x: -1.4,
                        y: -.25
                    }
                }
            }
        },
        spade: {
            name: "Spade",
            type: "melee",
            quality: 1,
            cleave: !1,
            autoAttack: !1,
            switchDelay: .25,
            damage: 40,
            obstacleDamage: 1,
            headshotMult: 1,
            noPotatoSwap: !0,
            attack: {
                offset: {
                    x: 1.75,
                    y: 0
                },
                rad: 1.5,
                damageTimes: [.12],
                cooldownTime: .35
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["cut", "thrust"]
            },
            sound: {
                pickup: "heavy_pickup_01",
                swing: "knife_swing_01",
                deploy: "stow_weapon_01",
                playerHit: "spade_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-spade-assault.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-spade-assault.img",
                pos: {
                    x: -.5,
                    y: -41.5
                },
                rot: 1,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        },
        crowbar: {
            name: "Crowbar",
            type: "melee",
            quality: 1,
            cleave: !1,
            autoAttack: !1,
            switchDelay: .25,
            damage: 33,
            obstacleDamage: 1.4,
            headshotMult: 1,
            noPotatoSwap: !0,
            attack: {
                offset: {
                    x: 1.25,
                    y: 0
                },
                rad: 1.25,
                damageTimes: [.12],
                cooldownTime: .3
            },
            speed: {
                equip: 1
            },
            anim: {
                idlePose: "fists",
                attackAnims: ["cut", "cutReverseShort"]
            },
            sound: {
                pickup: "frag_pickup_01",
                swing: "knife_swing_01",
                deploy: "frag_pickup_01",
                playerHit: "crowbar_hit_01"
            },
            lootImg: {
                sprite: "loot-melee-crowbar-recon.img",
                tint: 16777215,
                border: "loot-circle-outer-02.img",
                borderTint: 16777215,
                scale: .3,
                rot: .785
            },
            worldImg: {
                sprite: "loot-melee-crowbar-recon.img",
                pos: {
                    x: -1,
                    y: -10
                },
                rot: 1,
                scale: {
                    x: .35,
                    y: .35
                },
                tint: 16777215
            }
        }
    }
      , fs = {
        fists: ye("fists", {
            name: "Fists",
            rarity: 0,
            lore: "The old one-two."
        }),
        knuckles_rusted: ye("knuckles", {
            name: "Knuckles Rusted",
            rarity: 2,
            lore: "Rust up for the dust up.",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-knuckles-rusted.img"
            },
            worldImg: {
                sprite: "loot-melee-knuckles-rusted.img"
            }
        }),
        knuckles_heroic: ye("knuckles", {
            name: "Knuckles Heroic",
            rarity: 3,
            lore: "Give 'em a hero sandwich.",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-knuckles-heroic.img"
            },
            worldImg: {
                sprite: "loot-melee-knuckles-heroic.img"
            }
        }),
        karambit_rugged: ye("karambit", {
            name: "Karambit Rugged",
            rarity: 3,
            noPotatoSwap: !1,
            anim: {
                idlePose: "slash",
                attackAnims: ["slash", "fists"]
            },
            lootImg: {
                sprite: "loot-melee-karambit-rugged.img"
            },
            worldImg: {
                sprite: "loot-melee-karambit-rugged.img"
            }
        }),
        karambit_prismatic: ye("karambit", {
            name: "Karambit Prismatic",
            rarity: 4,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-karambit-prismatic.img"
            },
            worldImg: {
                sprite: "loot-melee-karambit-prismatic.img"
            }
        }),
        karambit_drowned: ye("karambit", {
            name: "Karambit Drowned",
            rarity: 4,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-karambit-drowned.img"
            },
            worldImg: {
                sprite: "loot-melee-karambit-drowned.img"
            }
        }),
        bayonet_rugged: ye("bayonet", {
            name: "Bayonet Rugged",
            rarity: 3,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-bayonet-rugged.img"
            },
            worldImg: {
                sprite: "loot-melee-bayonet-rugged.img"
            }
        }),
        bayonet_woodland: ye("bayonet", {
            name: "Bayonet Woodland",
            rarity: 4,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-bayonet-woodland.img"
            },
            worldImg: {
                sprite: "loot-melee-bayonet-woodland.img"
            }
        }),
        huntsman_rugged: ye("huntsman", {
            name: "Huntsman Rugged",
            rarity: 3,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-huntsman-rugged.img"
            },
            worldImg: {
                sprite: "loot-melee-huntsman-rugged.img"
            }
        }),
        huntsman_burnished: ye("huntsman", {
            name: "Huntsman Burnished",
            rarity: 4,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-huntsman-burnished.img"
            },
            worldImg: {
                sprite: "loot-melee-huntsman-burnished.img"
            }
        }),
        bowie_vintage: ye("bowie", {
            name: "Bowie Vintage",
            rarity: 3,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-bowie-vintage.img"
            },
            worldImg: {
                sprite: "loot-melee-bowie-vintage.img"
            }
        }),
        bowie_frontier: ye("bowie", {
            name: "Bowie Frontier",
            rarity: 4,
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-bowie-frontier.img"
            },
            worldImg: {
                sprite: "loot-melee-bowie-frontier.img"
            }
        }),
        machete_taiga: ye("machete", {
            name: "UVSR Taiga",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-machete-taiga.img"
            },
            worldImg: {
                sprite: "loot-melee-machete-taiga.img"
            }
        }),
        kukri_trad: ye("machete", {
            name: "Tallow's Kukri",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-kukri-trad.img"
            },
            worldImg: {
                sprite: "loot-melee-kukri-trad.img",
                pos: {
                    x: -.5,
                    y: -46.5
                }
            }
        }),
        bonesaw_rusted: ye("saw", {
            name: "Bonesaw Rusted",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-bonesaw-rusted.img"
            },
            worldImg: {
                sprite: "loot-melee-bonesaw-rusted.img"
            }
        }),
        woodaxe_bloody: ye("woodaxe", {
            name: "Axe Bloodstained",
            lootImg: {
                sprite: "loot-melee-woodaxe-bloody.img"
            },
            worldImg: {
                sprite: "loot-melee-woodaxe-bloody.img"
            }
        }),
        katana_rusted: ye("katana", {
            name: "Katana Rusted",
            lootImg: {
                sprite: "loot-melee-katana-rusted.img"
            },
            worldImg: {
                sprite: "loot-melee-katana-rusted.img"
            }
        }),
        katana_orchid: ye("katana", {
            name: "Katana Orchid",
            quality: 1,
            lootImg: {
                sprite: "loot-melee-katana-orchid.img"
            },
            worldImg: {
                sprite: "loot-melee-katana-orchid.img"
            }
        }),
        sledgehammer: ye("stonehammer", {
            name: "Sledgehammer",
            lootImg: {
                sprite: "loot-melee-sledgehammer.img"
            },
            worldImg: {
                sprite: "loot-melee-sledgehammer.img",
                pos: {
                    x: -12.5,
                    y: -3.5
                }
            }
        }),
        crowbar_scout: ye("crowbar", {
            name: "Scouting Crowbar",
            noPotatoSwap: !1
        }),
        crowbar_recon: ye("crowbar", {
            name: "Crowbar Carbon",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-crowbar-recon.img"
            },
            worldImg: {
                sprite: "loot-melee-crowbar-recon.img"
            }
        }),
        kukri_sniper: ye("machete", {
            name: "Marksman's Recurve",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-kukri-sniper.img"
            },
            worldImg: {
                sprite: "loot-melee-kukri-sniper.img",
                pos: {
                    x: -.5,
                    y: -46.5
                }
            }
        }),
        bonesaw_healer: ye("saw", {
            name: "The Separator",
            noPotatoSwap: !1,
            lootImg: {
                sprite: "loot-melee-bonesaw-healer.img"
            },
            worldImg: {
                sprite: "loot-melee-bonesaw-healer.img"
            }
        }),
        katana_demo: ye("katana", {
            name: "Hakai no Katana",
            lootImg: {
                sprite: "loot-melee-katana-demo.img"
            },
            worldImg: {
                sprite: "loot-melee-katana-demo.img"
            }
        }),
        spade_assault: ye("spade", {
            name: "Trench Spade",
            noPotatoSwap: !1
        }),
        warhammer_tank: ye("stonehammer", {
            name: "Panzerhammer",
            damage: 64,
            attack: {
                offset: {
                    x: 1.5,
                    y: 0
                },
                rad: 1.75,
                damageTimes: [.3],
                cooldownTime: .6
            },
            lootImg: {
                sprite: "loot-melee-warhammer-tank.img"
            },
            worldImg: {
                sprite: "loot-melee-warhammer-tank.img",
                pos: {
                    x: -10.5,
                    y: -3
                }
            }
        })
    }
      , ys = {
        ...eo,
        ...fs
    };
    function Z(r, t) {
        return dr(to, r, t)
    }
    const to = {
        outfitBase: {
            name: "Basic Outfit",
            type: "outfit",
            skinImg: {
                baseTint: 16303476,
                baseSprite: "player-base-01.img",
                handTint: 16303476,
                handSprite: "player-hands-01.img",
                footTint: 16303476,
                footSprite: "player-feet-01.img",
                backpackTint: 8480055,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            sound: {
                pickup: "clothes_pickup_01"
            }
        }
    }
      , ws = {
        outfitBase: Z("outfitBase", {
            noDropOnDeath: !0,
            name: "Basic Outfit",
            rarity: 0,
            lore: "Pure and simple.",
            lootImg: {
                sprite: "loot-shirt-outfitBase.img",
                tint: 16777215
            }
        }),
        outfitDemo: Z("outfitBase", {
            noDrop: !0,
            skinImg: {
                baseTint: 13068903,
                baseSprite: "player-base-02.img",
                handTint: 11882573,
                handSprite: "player-hands-02.img",
                footTint: 11882573,
                footSprite: "player-feet-02.img",
                backpackTint: 10368820,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215
            }
        }),
        outfitTank: Z("outfitBase", {
            noDrop: !0,
            skinImg: {
                baseTint: 15382883,
                baseSprite: "player-base-02.img",
                handTint: 14197835,
                handSprite: "player-hands-02.img",
                footTint: 14197835,
                footSprite: "player-feet-02.img",
                backpackTint: 12553007,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215
            }
        }),
        outfitMedic: Z("outfitBase", {
            noDrop: !0,
            skinImg: {
                baseTint: 14449116,
                baseSprite: "player-base-02.img",
                handTint: 12866756,
                handSprite: "player-hands-02.img",
                footTint: 12866756,
                footSprite: "player-feet-02.img",
                backpackTint: 11089833,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215
            }
        }),
        outfitScout: Z("outfitBase", {
            noDrop: !0,
            skinImg: {
                baseTint: 11326819,
                baseSprite: "player-base-02.img",
                handTint: 9880138,
                handSprite: "player-hands-02.img",
                footTint: 9880138,
                footSprite: "player-feet-02.img",
                backpackTint: 8630324,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215
            }
        }),
        outfitSniper: Z("outfitBase", {
            noDrop: !0,
            skinImg: {
                baseTint: 9293531,
                baseSprite: "player-base-02.img",
                handTint: 7387849,
                handSprite: "player-hands-02.img",
                footTint: 7387849,
                footSprite: "player-feet-02.img",
                backpackTint: 5415860,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215
            }
        }),
        outfitAssault: Z("outfitBase", {
            noDrop: !0,
            skinImg: {
                baseTint: 14339929,
                baseSprite: "player-base-02.img",
                handTint: 13024064,
                handSprite: "player-hands-02.img",
                footTint: 13024064,
                footSprite: "player-feet-02.img",
                backpackTint: 10918952,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16777215
            }
        }),
        outfitTurkey: Z("outfitBase", {
            name: "Fowl Facade",
            noDropOnDeath: !0,
            skinImg: {
                baseTint: 15781563,
                baseSprite: "player-base-outfitTurkey.img",
                handTint: 10818304,
                handSprite: "player-hands-02.img",
                footTint: 10818304,
                footSprite: "player-feet-02.img",
                backpackTint: 11031846,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitTurkey.img",
                tint: 15781563
            },
            rarity: 3,
            lore: "M1100 not included."
        }),
        outfitDev: Z("outfitBase", {
            name: "Developer Swag",
            noDropOnDeath: !0,
            skinImg: {
                baseTint: 3442216,
                baseSprite: "player-base-outfitDC.img",
                handTint: 6937122,
                handSprite: "player-hands-02.img",
                footTint: 6937122,
                footSprite: "player-feet-02.img",
                backpackTint: 2902793,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitDev.img",
                tint: 16777215
            },
            rarity: 5,
            lore: "Two-time limited edition print."
        }),
        outfitMod: Z("outfitBase", {
            name: "Discord Moderatr",
            noDropOnDeath: !0,
            skinImg: {
                baseTint: 3380187,
                baseSprite: "player-base-outfitDC.img",
                handTint: 9684974,
                handSprite: "player-hands-02.img",
                footTint: 9684974,
                footSprite: "player-feet-02.img",
                backpackTint: 1529478,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitMod.img",
                tint: 16777215
            },
            rarity: 3,
            lore: "For those who wield the power of the pan."
        }),
        outfitWheat: Z("outfitBase", {
            name: "Splintered Wheat",
            skinImg: {
                baseTint: 16777215,
                baseSprite: "player-base-outfitWheat.img",
                handTint: 15785362,
                handSprite: "player-hands-01.img",
                footTint: 15785362,
                footSprite: "player-feet-01.img",
                backpackTint: 13346845,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitWheat.img",
                tint: 16777215
            }
        }),
        outfitNoir: Z("outfitBase", {
            name: "Neo Noir",
            skinImg: {
                baseTint: 1776411,
                baseSprite: "player-base-02.img",
                handTint: 16777215,
                handSprite: "player-hands-02.img",
                footTint: 16777215,
                footSprite: "player-feet-02.img",
                backpackTint: 7829367,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 1776411
            }
        }),
        outfitRedLeaderAged: Z("outfitBase", {
            name: "Weathered Red",
            skinImg: {
                baseTint: 10098712,
                baseSprite: "player-base-02.img",
                handTint: 16711680,
                handSprite: "player-hands-02.img",
                footTint: 16711680,
                footSprite: "player-feet-02.img",
                backpackTint: 5442572,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 10098712
            }
        }),
        outfitBlueLeaderAged: Z("outfitBase", {
            name: "Stifled Blue",
            skinImg: {
                baseTint: 1523353,
                baseSprite: "player-base-02.img",
                handTint: 20223,
                handSprite: "player-hands-02.img",
                footTint: 20223,
                footSprite: "player-feet-02.img",
                backpackTint: 794700,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 1523353
            }
        }),
        outfitRedLeader: Z("outfitBase", {
            name: "Red Leader",
            noDrop: !0,
            skinImg: {
                baseTint: 10158080,
                baseSprite: "player-base-02.img",
                handTint: 16711680,
                handSprite: "player-hands-02.img",
                footTint: 16711680,
                footSprite: "player-feet-02.img",
                backpackTint: 5439488,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 8650752
            }
        }),
        outfitBlueLeader: Z("outfitBase", {
            name: "Blue Leader",
            noDrop: !0,
            skinImg: {
                baseTint: 12187,
                baseSprite: "player-base-02.img",
                handTint: 20223,
                handSprite: "player-hands-02.img",
                footTint: 20223,
                footSprite: "player-feet-02.img",
                backpackTint: 5964,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 13223
            }
        }),
        outfitSpetsnaz: Z("outfitBase", {
            name: "Siberian Assault",
            skinImg: {
                baseTint: 16777215,
                baseSprite: "player-base-outfitSpetsnaz.img",
                handTint: 15000804,
                handSprite: "player-hands-01.img",
                footTint: 15000804,
                footSprite: "player-feet-01.img",
                backpackTint: 13816530,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitSpetsnaz.img",
                tint: 16777215
            }
        }),
        outfitWoodsCloak: Z("outfitBase", {
            name: "Greencloak",
            skinImg: {
                baseTint: 2817792,
                baseSprite: "player-base-02.img",
                handTint: 16711594,
                handSprite: "player-hands-02.img",
                footTint: 16711594,
                footSprite: "player-feet-02.img",
                backpackTint: 15635271,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 2817792
            }
        }),
        outfitElf: Z("outfitBase", {
            name: "Tallow's Little Helper",
            skinImg: {
                baseTint: 12845056,
                baseSprite: "player-base-01.img",
                handTint: 1489152,
                handSprite: "player-hands-01.img",
                footTint: 1489152,
                footSprite: "player-feet-01.img",
                backpackTint: 365312,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 1489152
            }
        }),
        outfitImperial: Z("outfitBase", {
            name: "Imperial Seal",
            skinImg: {
                baseTint: 12320813,
                baseSprite: "player-base-01.img",
                handTint: 16777215,
                handSprite: "player-hands-01.img",
                footTint: 16777215,
                footSprite: "player-feet-01.img",
                backpackTint: 12625727,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 12320813
            }
        }),
        outfitLumber: Z("outfitBase", {
            name: "Woodcutter's Wrap",
            skinImg: {
                baseTint: 16777215,
                baseSprite: "player-base-outfitLumber.img",
                handTint: 8258312,
                handSprite: "player-hands-02.img",
                footTint: 8258312,
                footSprite: "player-feet-02.img",
                backpackTint: 4854547,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitLumber.img",
                tint: 16777215
            }
        }),
        outfitVerde: Z("outfitBase", {
            name: "Poncho Verde",
            skinImg: {
                baseTint: 1785868,
                baseSprite: "player-base-02.img",
                handTint: 11912587,
                handSprite: "player-hands-02.img",
                footTint: 11912587,
                footSprite: "player-feet-02.img",
                backpackTint: 11238441,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 1785868
            }
        }),
        outfitPineapple: Z("outfitBase", {
            name: "Valiant Pineapple",
            skinImg: {
                baseTint: 10027008,
                baseSprite: "player-base-02.img",
                handTint: 4985105,
                handSprite: "player-hands-02.img",
                footTint: 4985105,
                footSprite: "player-feet-02.img",
                backpackTint: 16763904,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 10027008
            }
        }),
        outfitTarkhany: Z("outfitBase", {
            name: "Tarkhany Regal",
            skinImg: {
                baseTint: 4927107,
                baseSprite: "player-base-02.img",
                handTint: 16757760,
                handSprite: "player-hands-02.img",
                footTint: 16757760,
                footSprite: "player-feet-02.img",
                backpackTint: 4661344,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 4927107
            }
        }),
        outfitWaterElem: Z("outfitBase", {
            name: "Water Elemental",
            skinImg: {
                baseTint: 7143401,
                baseSprite: "player-base-02.img",
                handTint: 15990876,
                handSprite: "player-hands-02.img",
                footTint: 15990876,
                footSprite: "player-feet-02.img",
                backpackTint: 32644,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 7143401
            }
        }),
        outfitHeaven: Z("outfitBase", {
            name: "Celestial Garb",
            skinImg: {
                baseTint: 16777215,
                baseSprite: "player-base-outfitHeaven.img",
                handTint: 13762639,
                handSprite: "player-hands-02.img",
                footTint: 13762639,
                footSprite: "player-feet-02.img",
                backpackTint: 36503,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitHeaven.img",
                tint: 16777215
            }
        }),
        outfitMeteor: Z("outfitBase", {
            name: "Falling Star",
            skinImg: {
                baseTint: 9764864,
                baseSprite: "player-base-02.img",
                handTint: 16742400,
                handSprite: "player-hands-02.img",
                footTint: 16742400,
                footSprite: "player-feet-02.img",
                backpackTint: 4727582,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 9764864
            }
        }),
        outfitIslander: Z("outfitBase", {
            name: "Island Time",
            skinImg: {
                baseTint: 16762368,
                baseSprite: "player-base-01.img",
                handTint: 148992,
                handSprite: "player-hands-01.img",
                footTint: 148992,
                footSprite: "player-feet-01.img",
                backpackTint: 4495104,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16762368
            }
        }),
        outfitAqua: Z("outfitBase", {
            name: "Aquatic Avenger",
            skinImg: {
                baseTint: 47778,
                baseSprite: "player-base-01.img",
                handTint: 65502,
                handSprite: "player-hands-01.img",
                footTint: 65502,
                footSprite: "player-feet-01.img",
                backpackTint: 536620,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 47778
            }
        }),
        outfitCoral: Z("outfitBase", {
            name: "Coral Guise",
            skinImg: {
                baseTint: 16736103,
                baseSprite: "player-base-01.img",
                handTint: 16746895,
                handSprite: "player-hands-01.img",
                footTint: 16746895,
                footSprite: "player-feet-01.img",
                backpackTint: 16772298,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16736103
            }
        }),
        outfitKhaki: Z("outfitBase", {
            name: "The Initiative",
            rarity: 1,
            skinImg: {
                baseTint: 12824197,
                baseSprite: "player-base-02.img",
                handTint: 9404516,
                handSprite: "player-hands-02.img",
                footTint: 9404516,
                footSprite: "player-feet-02.img",
                backpackTint: 4208940,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 12824197
            }
        }),
        outfitParma: Z("outfitBase", {
            name: "PARMA Jumpsuit",
            noDropOnDeath: !0,
            rarity: 1,
            lore: "Next generation inversion.",
            skinImg: {
                baseTint: 8746585,
                baseSprite: "player-base-01.img",
                handTint: 12824197,
                handSprite: "player-hands-01.img",
                footTint: 12824197,
                footSprite: "player-feet-01.img",
                backpackTint: 4208940,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitParma.img",
                tint: 16777215
            }
        }),
        outfitParmaPrestige: Z("outfitBase", {
            name: "The Core Jumpsuit",
            noDropOnDeath: !0,
            rarity: 3,
            lore: "Special issue for staffers at Bunker 1.",
            skinImg: {
                baseTint: 14925953,
                baseSprite: "player-base-outfitParmaPrestige.img",
                handTint: 11113323,
                handSprite: "player-hands-02.img",
                footTint: 11113323,
                footSprite: "player-feet-02.img",
                backpackTint: 6640177,
                backpackSprite: "player-circle-base-02.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitParmaPrestige.img",
                tint: 16777215
            }
        }),
        outfitCasanova: Z("outfitBase", {
            name: "Casanova Silks",
            skinImg: {
                baseTint: 4327436,
                baseSprite: "player-base-01.img",
                handTint: 7602183,
                handSprite: "player-hands-01.img",
                footTint: 7602183,
                footSprite: "player-feet-01.img",
                backpackTint: 1052688,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 4327436
            }
        }),
        outfitPrisoner: Z("outfitBase", {
            name: "The New Black",
            skinImg: {
                baseTint: 16735266,
                baseSprite: "player-base-01.img",
                handTint: 16545059,
                handSprite: "player-hands-01.img",
                footTint: 16545059,
                footSprite: "player-feet-01.img",
                backpackTint: 16756224,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 16735266
            }
        }),
        outfitJester: Z("outfitBase", {
            name: "Jester's Folly",
            skinImg: {
                baseTint: 7798904,
                baseSprite: "player-base-01.img",
                handTint: 4915276,
                handSprite: "player-hands-01.img",
                footTint: 4915276,
                footSprite: "player-feet-01.img",
                backpackTint: 936960,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 7798904
            }
        }),
        outfitWoodland: Z("outfitBase", {
            name: "Woodland Combat",
            rarity: 1,
            lore: "Common component of PARMA survival caches.",
            skinImg: {
                baseTint: 2831146,
                baseSprite: "player-base-01.img",
                handTint: 5925970,
                handSprite: "player-hands-01.img",
                footTint: 5925970,
                footSprite: "player-feet-01.img",
                backpackTint: 5056e3,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitWoodland.img",
                tint: 16777215
            }
        }),
        outfitRoyalFortune: Z("outfitBase", {
            name: "Royal Fortune",
            rarity: 3,
            skinImg: {
                baseTint: 8333091,
                baseSprite: "player-base-01.img",
                handTint: 15254058,
                handSprite: "player-hands-01.img",
                footTint: 15254058,
                footSprite: "player-feet-01.img",
                backpackTint: 9981696,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitRoyalFortune.img",
                tint: 16777215
            }
        }),
        outfitKeyLime: Z("outfitBase", {
            name: "Key Lime",
            rarity: 1,
            lore: "Not for eating.",
            skinImg: {
                baseTint: 13107007,
                baseSprite: "player-base-01.img",
                handTint: 15662941,
                handSprite: "player-hands-01.img",
                footTint: 15662941,
                footSprite: "player-feet-01.img",
                backpackTint: 12355383,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitKeyLime.img",
                tint: 16777215
            }
        }),
        outfitCobaltShell: Z("outfitBase", {
            name: "Cobalt Shell",
            rarity: 1,
            lore: "It means bluish.",
            skinImg: {
                baseTint: 11095,
                baseSprite: "player-base-01.img",
                handTint: 2711164,
                handSprite: "player-hands-01.img",
                footTint: 2711164,
                footSprite: "player-feet-01.img",
                backpackTint: 19093,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitCobaltShell.img",
                tint: 16777215
            }
        }),
        outfitCarbonFiber: Z("outfitBase", {
            name: "Carbon Fiber",
            noDropOnDeath: !0,
            rarity: 2,
            lore: "Military-grade, fine spun filament.",
            skinImg: {
                baseTint: 2171169,
                baseSprite: "player-base-01.img",
                handTint: 1842204,
                handSprite: "player-hands-01.img",
                footTint: 1842204,
                footSprite: "player-feet-01.img",
                backpackTint: 3552822,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitCarbonFiber.img",
                tint: 16777215
            }
        }),
        outfitDarkGloves: Z("outfitBase", {
            name: "The Professional",
            noDropOnDeath: !0,
            rarity: 2,
            lore: "True survivrs wear the dark gloves.",
            skinImg: {
                baseTint: 16303476,
                baseSprite: "player-base-01.img",
                handTint: 12482560,
                handSprite: "player-hands-01.img",
                footTint: 12482560,
                footSprite: "player-feet-01.img",
                backpackTint: 10708736,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitDarkGloves.img",
                tint: 16777215
            }
        }),
        outfitDarkShirt: Z("outfitBase", {
            name: "The Semi-Pro",
            noDropOnDeath: !0,
            rarity: 1,
            lore: "Some survivrs wear the dark shirt.",
            skinImg: {
                baseTint: 12482560,
                baseSprite: "player-base-01.img",
                handTint: 16303476,
                handSprite: "player-hands-01.img",
                footTint: 16303476,
                footSprite: "player-feet-01.img",
                backpackTint: 15183443,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitDarkShirt.img",
                tint: 16777215
            }
        }),
        outfitGhillie: Z("outfitBase", {
            name: "Ghillie Suit",
            ghillie: !0,
            skinImg: {
                baseTint: 8630096,
                baseSprite: "player-base-01.img",
                handTint: 8630096,
                handSprite: "player-hands-01.img",
                footTint: 8630096,
                footSprite: "player-feet-01.img",
                backpackTint: 6697728,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-01.img",
                tint: 8630096
            }
        }),
        outfitDesertCamo: Z("outfitBase", {
            name: "Desert Camo",
            rarity: 1,
            skinImg: {
                baseTint: 13736782,
                baseSprite: "player-base-01.img",
                handTint: 11169046,
                handSprite: "player-hands-01.img",
                footTint: 11169046,
                footSprite: "player-feet-01.img",
                backpackTint: 16763778,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitDesertCamo.img",
                tint: 16777215
            }
        }),
        outfitCamo: Z("outfitBase", {
            name: "Forest Camo",
            rarity: 1,
            lore: "Be one with the trees.",
            skinImg: {
                baseTint: 10066278,
                baseSprite: "player-base-01.img",
                handTint: 8684631,
                handSprite: "player-hands-01.img",
                footTint: 8684631,
                footSprite: "player-feet-01.img",
                backpackTint: 6710835,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitCamo.img",
                tint: 16777215
            }
        }),
        outfitRed: Z("outfitBase", {
            name: "Target Practice",
            noDropOnDeath: !0,
            rarity: 1,
            lore: "On the plus side, they won't see you bleed.",
            skinImg: {
                baseTint: 16711680,
                baseSprite: "player-base-01.img",
                handTint: 13893632,
                handSprite: "player-hands-01.img",
                footTint: 13893632,
                footSprite: "player-feet-01.img",
                backpackTint: 11993088,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitRed.img",
                tint: 16777215
            }
        }),
        outfitWhite: Z("outfitBase", {
            name: "Arctic Avenger",
            noDropOnDeath: !0,
            rarity: 1,
            lore: "No business like snow business.",
            skinImg: {
                baseTint: 14935011,
                baseSprite: "player-base-01.img",
                handTint: 15658734,
                handSprite: "player-hands-01.img",
                footTint: 15658734,
                footSprite: "player-feet-01.img",
                backpackTint: 14474460,
                backpackSprite: "player-circle-base-01.img"
            },
            lootImg: {
                sprite: "loot-shirt-outfitWhite.img",
                tint: 16777215
            }
        }),
        outfitBarrel: Z("outfitBase", {
            name: "Barrel Costume",
            obstacleType: "barrel_01",
            baseScale: .8,
            lootImg: {
                tint: 3750201
            }
        }),
        outfitWoodBarrel: Z("outfitBase", {
            name: "Wood Barrel Costume",
            obstacleType: "barrel_02",
            baseScale: 1,
            lootImg: {
                tint: 11235106
            }
        }),
        outfitStone: Z("outfitBase", {
            name: "Stone Costume",
            obstacleType: "stone_01",
            baseScale: .9,
            lootImg: {
                tint: 7434609
            }
        }),
        outfitTree: Z("outfitBase", {
            name: "Tree Costume",
            obstacleType: "tree_07",
            baseScale: 1,
            lootImg: {
                tint: 4599058
            }
        }),
        outfitTreeSpooky: Z("outfitBase", {
            name: "Spooky Tree Costume",
            obstacleType: "tree_05",
            baseScale: 1,
            lootImg: {
                tint: 1775895
            }
        }),
        outfitStump: Z("outfitBase", {
            name: "Stump Costume",
            obstacleType: "tree_09",
            baseScale: 1,
            lootImg: {
                tint: 8602624
            }
        }),
        outfitBush: Z("outfitBase", {
            name: "Bush Costume",
            obstacleType: "bush_01b",
            baseScale: 1,
            lootImg: {
                tint: 3889951
            }
        }),
        outfitLeafPile: Z("outfitBase", {
            name: "Leaf Pile Costume",
            obstacleType: "bush_06b",
            baseScale: 1,
            lootImg: {
                tint: 16731392
            }
        }),
        outfitCrate: Z("outfitBase", {
            name: "Crate Costume",
            obstacleType: "crate_01",
            baseScale: 1,
            lootImg: {
                tint: 6697728
            }
        }),
        outfitTable: Z("outfitBase", {
            name: "Table Costume",
            obstacleType: "table_01",
            baseScale: 1,
            lootImg: {
                tint: 6697728
            }
        }),
        outfitSoviet: Z("outfitBase", {
            name: "Soviet Costume",
            obstacleType: "crate_02",
            baseScale: 1,
            lootImg: {
                tint: 6697728
            }
        }),
        outfitAirdrop: Z("outfitBase", {
            name: "Air Drop Costume",
            obstacleType: "crate_10",
            baseScale: 1,
            lootImg: {
                tint: 6579300
            }
        }),
        outfitOven: Z("outfitBase", {
            name: "Oven Costume",
            obstacleType: "oven_01",
            baseScale: 1,
            lootImg: {
                tint: 14935011
            }
        }),
        outfitRefrigerator: Z("outfitBase", {
            name: "Fridge Costume",
            obstacleType: "refrigerator_01b",
            baseScale: 1,
            lootImg: {
                tint: 7733259
            }
        }),
        outfitVending: Z("outfitBase", {
            name: "Vending Costume",
            obstacleType: "vending_01",
            baseScale: 1,
            lootImg: {
                tint: 10925
            }
        }),
        outfitPumpkin: Z("outfitBase", {
            name: "Pumpkin Costume",
            obstacleType: "pumpkin_01",
            baseScale: 1,
            lootImg: {
                tint: 15889667
            }
        }),
        outfitWoodpile: Z("outfitBase", {
            name: "Woodpile Costume",
            obstacleType: "woodpile_01",
            baseScale: 1,
            lootImg: {
                tint: 9455616
            }
        }),
        outfitToilet: Z("outfitBase", {
            name: "Toilet Costume",
            obstacleType: "toilet_02",
            baseScale: 1,
            lootImg: {
                tint: 16777215
            }
        }),
        outfitBushRiver: Z("outfitBase", {
            name: "River Bush Costume",
            obstacleType: "bush_04",
            baseScale: 1,
            lootImg: {
                tint: 5339946
            }
        }),
        outfitCrab: Z("outfitBase", {
            name: "Crab Pot Costume",
            obstacleType: "crate_20",
            baseScale: 1,
            lootImg: {
                tint: 16592920
            }
        }),
        outfitStumpAxe: Z("outfitBase", {
            name: "Stump Axe Costume",
            obstacleType: "tree_02h",
            baseScale: 1,
            lootImg: {
                tint: 11100701
            }
        })
    }
      , _s = {
        ...to,
        ...ws
    }
      , gr = {
        pass_survivr1: {
            type: "pass",
            xp: [50, 50, 50, 50, 50, 50, 50, 50, 75, 75, 75, 75, 75, 75, 100, 100, 100, 125, 125, 150, 75, 75, 75],
            items: [{
                level: 2,
                item: "outfitParma"
            }, {
                level: 3,
                item: "heal_heart"
            }, {
                level: 4,
                item: "emote_bandagedface"
            }, {
                level: 5,
                item: "outfitWhite"
            }, {
                level: 6,
                item: "boost_star"
            }, {
                level: 7,
                item: "emote_ok"
            }, {
                level: 8,
                item: "outfitRed"
            }, {
                level: 9,
                item: "heal_moon"
            }, {
                level: 10,
                item: "emote_pooface"
            }, {
                level: 11,
                item: "knuckles_rusted"
            }, {
                level: 12,
                item: "boost_naturalize"
            }, {
                level: 13,
                item: "emote_ghost_base"
            }, {
                level: 14,
                item: "outfitDarkGloves"
            }, {
                level: 15,
                item: "heal_tomoe"
            }, {
                level: 16,
                item: "emote_picassoface"
            }, {
                level: 17,
                item: "outfitCarbonFiber"
            }, {
                level: 18,
                item: "boost_shuriken"
            }, {
                level: 19,
                item: "emote_rainbow"
            }, {
                level: 20,
                item: "outfitParmaPrestige"
            }, {
                level: 21,
                item: "knuckles_heroic"
            }, {
                level: 30,
                item: "outfitTurkey"
            }, {
                level: 50,
                item: "bayonet_rugged"
            }, {
                level: 99,
                item: "bayonet_woodland"
            }]
        }
    }
      , bs = {
        leadership: {
            name: "Leadership",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-leadership.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        firepower: {
            name: "Firepower",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-firepower.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        gotw: {
            name: "Gift of the Wild",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-gotw.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        windwalk: {
            name: "Windwalk",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-windwalk.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        rare_potato: {
            name: "Rare Potato",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-rare-potato.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        aoe_heal: {
            name: "Mass Medicate",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-aoe-heal.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        endless_ammo: {
            name: "Endless Ammo",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-endless-ammo.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        steelskin: {
            name: "Steelskin",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-steelskin.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        splinter: {
            name: "Splinter Rounds",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-splinter.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        small_arms: {
            name: "Small Arms",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-small-arms.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        takedown: {
            name: "Takedown",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-takedown.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        field_medic: {
            name: "Field Medic",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-field-medic.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        tree_climbing: {
            name: "Tree Climbing",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-tree-climbing.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        scavenger: {
            name: "Scavenger",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-scavenger.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        scavenger_adv: {
            name: "Master Scavenger",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-scavenger_adv.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        hunted: {
            name: "The Hunted",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-hunted.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        chambered: {
            name: "One In The Chamber",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-chambered.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        martyrdom: {
            name: "Martyrdom",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-martyrdom.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        targeting: {
            name: "Targeting",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-targeting.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        bonus_45: {
            name: ".45 In The Chamber",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-bonus-45.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        broken_arrow: {
            name: "Broken Arrow",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-broken-arrow.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        fabricate: {
            name: "Fabricate",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-fabricate.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        self_revive: {
            name: "Revivify",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-self-revive.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        bonus_9mm: {
            name: "9mm Overpressure",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-bonus-9mm.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        flak_jacket: {
            name: "Flak Jacket",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-flak-jacket.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        explosive: {
            name: "Explosive Rounds",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-explosive.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        bonus_assault: {
            name: "Hollow-points",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-bonus-assault.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        inspiration: {
            name: "Inspiration",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-inspiration.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        final_bugle: {
            name: "Last Breath",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-final-bugle.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        halloween_mystery: {
            name: "Trick Or Treat?",
            type: "perk",
            lootImg: {
                sprite: "loot-perk-halloween-mystery.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        trick_nothing: {
            name: "One With Nothing",
            type: "perk",
            emoteOnPickup: "emote_trick_nothing",
            lootImg: {
                sprite: "loot-perk-trick-nothing.img",
                tint: 16777215,
                border: "loot-circle-outer-04.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        trick_size: {
            name: "Feedership",
            type: "perk",
            emoteOnPickup: "emote_trick_size",
            lootImg: {
                sprite: "loot-perk-trick-size.img",
                tint: 16777215,
                border: "loot-circle-outer-04.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        trick_m9: {
            name: "Dev Troll Special",
            type: "perk",
            emoteOnPickup: "emote_trick_m9",
            lootImg: {
                sprite: "loot-perk-trick-m9.img",
                tint: 16777215,
                border: "loot-circle-outer-04.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        trick_chatty: {
            name: "Gabby Ghost",
            type: "perk",
            emoteOnPickup: "emote_trick_chatty",
            lootImg: {
                sprite: "loot-perk-trick-chatty.img",
                tint: 16777215,
                border: "loot-circle-outer-04.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        trick_drain: {
            name: "That Sucks",
            type: "perk",
            emoteOnPickup: "emote_trick_drain",
            lootImg: {
                sprite: "loot-perk-trick-drain.img",
                tint: 16777215,
                border: "loot-circle-outer-04.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        treat_9mm: {
            name: "Candy Corn",
            type: "perk",
            emoteOnPickup: "emote_treat_9mm",
            lootImg: {
                sprite: "loot-perk-treat-9mm.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        treat_12g: {
            name: "Red Jelly Beans",
            type: "perk",
            emoteOnPickup: "emote_treat_12g",
            lootImg: {
                sprite: "loot-perk-treat-12g.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        treat_556: {
            name: "Sour Apple Belt",
            type: "perk",
            emoteOnPickup: "emote_treat_556",
            lootImg: {
                sprite: "loot-perk-treat-556.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        treat_762: {
            name: "Blueberry Taffy",
            type: "perk",
            emoteOnPickup: "emote_treat_762",
            lootImg: {
                sprite: "loot-perk-treat-762.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        treat_super: {
            name: "Full Size OKAMI Bar",
            type: "perk",
            emoteOnPickup: "emote_treat_super",
            lootImg: {
                sprite: "loot-perk-treat-super.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        },
        turkey_shoot: {
            name: "Perky Shoot",
            type: "perk",
            emoteOnPickup: "emote_turkeyanimal",
            lootImg: {
                sprite: "loot-perk-turkey_shoot.img",
                tint: 16777215,
                border: "loot-circle-outer-03.img",
                borderTint: 16777215,
                scale: .275
            },
            sound: {
                pickup: "perk_pickup_01"
            }
        }
    }
      , zt = {
        ping_danger: {
            type: "ping",
            texture: "ping-team-danger.img",
            mapTexture: "ping-map-danger.img",
            sound: "ping_danger_01",
            soundLeader: "ping_leader_01",
            pingMap: !0,
            pingLife: 4,
            mapLife: 4,
            mapEvent: !1,
            worldDisplay: !0
        },
        ping_coming: {
            type: "ping",
            texture: "ping-team-coming.img",
            mapTexture: "ping-map-coming.img",
            sound: "ping_coming_01",
            soundLeader: "ping_leader_01",
            pingMap: !0,
            pingLife: 4,
            mapLife: 300,
            mapEvent: !1,
            worldDisplay: !0
        },
        ping_help: {
            type: "ping",
            texture: "ping-team-help.img",
            mapTexture: "ping-map-help.img",
            sound: "ping_help_01",
            soundLeader: "ping_leader_01",
            pingMap: !0,
            pingLife: 4,
            mapLife: 4,
            mapEvent: !1,
            worldDisplay: !0
        },
        ping_airdrop: {
            type: "ping",
            texture: "ping-team-airdrop.img",
            mapTexture: "ping-map-airdrop.img",
            sound: "ping_airdrop_01",
            pingMap: !0,
            pingLife: 4,
            mapLife: 10,
            mapEvent: !0,
            worldDisplay: !1,
            tint: 16737792
        },
        ping_airstrike: {
            type: "ping",
            texture: "ping-team-airstrike.img",
            mapTexture: "ping-map-airstrike.img",
            sound: "ping_airstrike_01",
            pingMap: !0,
            pingLife: 2,
            mapLife: 2,
            mapEvent: !0,
            worldDisplay: !0,
            tint: 15400704
        },
        ping_woodsking: {
            type: "ping",
            texture: "player-king-woods.img",
            mapTexture: "ping-map-woods-king.img",
            sound: "helmet03_forest_pickup_01",
            pingMap: !0,
            pingLife: 4,
            mapLife: 10,
            mapEvent: !0,
            worldDisplay: !1,
            tint: 1244928
        },
        ping_unlock: {
            type: "ping",
            texture: "ping-team-unlock.img",
            mapTexture: "ping-map-unlock.img",
            sound: "ping_unlock_01",
            pingMap: !0,
            pingLife: 4,
            mapLife: 10,
            mapEvent: !0,
            worldDisplay: !1,
            tint: 55551
        }
    }
      , ra = {
        quest_top_solo: {
            type: "quest",
            category: "top",
            target: 2,
            xp: 30
        },
        quest_top_squad: {
            type: "quest",
            category: "top",
            target: 2,
            xp: 30
        },
        quest_kills: {
            type: "quest",
            category: "pvp",
            target: 5,
            xp: 30
        },
        quest_kills_hard: {
            type: "quest",
            category: "pvp",
            target: 10,
            xp: 40
        },
        quest_damage: {
            type: "quest",
            category: "pvp",
            target: 750,
            xp: 30
        },
        quest_damage_hard: {
            type: "quest",
            category: "pvp",
            target: 1500,
            xp: 40
        },
        quest_survived: {
            type: "quest",
            category: "pvp",
            target: 900,
            xp: 30,
            timed: !0
        },
        quest_damage_9mm: {
            type: "quest",
            category: "damage",
            target: 250,
            xp: 30,
            icon: "img/emotes/ammo-9mm.svg"
        },
        quest_damage_762mm: {
            type: "quest",
            category: "damage",
            target: 250,
            xp: 30,
            icon: "img/emotes/ammo-762mm.svg"
        },
        quest_damage_556mm: {
            type: "quest",
            category: "damage",
            target: 250,
            xp: 30,
            icon: "img/emotes/ammo-556mm.svg"
        },
        quest_damage_12gauge: {
            type: "quest",
            category: "damage",
            target: 250,
            xp: 30,
            icon: "img/emotes/ammo-12gauge.svg"
        },
        quest_damage_grenade: {
            type: "quest",
            category: "damage",
            target: 100,
            xp: 40
        },
        quest_damage_melee: {
            type: "quest",
            category: "damage",
            target: 150,
            xp: 40
        },
        quest_heal: {
            type: "quest",
            category: "item",
            target: 10,
            xp: 30
        },
        quest_boost: {
            type: "quest",
            category: "item",
            target: 10,
            xp: 30
        },
        quest_airdrop: {
            type: "quest",
            category: "item",
            target: 1,
            xp: 30
        },
        quest_crates: {
            type: "quest",
            category: "destruction",
            target: 25,
            xp: 30
        },
        quest_toilets: {
            type: "quest",
            category: "destruction",
            target: 5,
            xp: 30
        },
        quest_furniture: {
            type: "quest",
            category: "destruction",
            target: 10,
            xp: 30
        },
        quest_barrels: {
            type: "quest",
            category: "destruction",
            target: 10,
            xp: 30
        },
        quest_lockers: {
            type: "quest",
            category: "destruction",
            target: 10,
            xp: 30
        },
        quest_pots: {
            type: "quest",
            category: "destruction",
            target: 8,
            xp: 30
        },
        quest_vending: {
            type: "quest",
            category: "destruction",
            target: 1,
            xp: 40
        },
        quest_club_kills: {
            type: "quest",
            category: "location",
            target: 2,
            xp: 40
        }
    }
      , Xe = {
        mapId: 0,
        desc: {
            name: "Normal",
            icon: "",
            buttonCss: ""
        },
        assets: {
            audio: [{
                name: "club_music_01",
                channel: "ambient"
            }, {
                name: "club_music_02",
                channel: "ambient"
            }, {
                name: "ambient_steam_01",
                channel: "ambient"
            }, {
                name: "log_11",
                channel: "sfx"
            }, {
                name: "log_12",
                channel: "sfx"
            }],
            atlases: ["gradient", "loadout", "shared", "main"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 13480795,
                riverbank: 9461284,
                grass: 8433481,
                underground: 1772803,
                playerSubmerge: 2854052,
                playerGhillie: 8630096
            },
            valueAdjust: 1,
            sound: {
                riverShore: "sand"
            },
            particles: {
                camera: ""
            },
            tracerColors: {},
            airdrop: {
                planeImg: "map-plane-01.img",
                planeSound: "plane_01",
                airdropImg: "map-chute-01.img"
            }
        },
        gameMode: {
            maxPlayers: 80,
            killLeaderEnabled: !0
        },
        gameConfig: {
            planes: {
                timings: [{
                    circleIdx: 1,
                    wait: 10,
                    options: {
                        type: F.Plane.Airdrop
                    }
                }, {
                    circleIdx: 3,
                    wait: 2,
                    options: {
                        type: F.Plane.Airdrop
                    }
                }],
                crates: [{
                    name: "airdrop_crate_01",
                    weight: 10
                }, {
                    name: "airdrop_crate_02",
                    weight: 1
                }]
            },
            bagSizes: {},
            bleedDamage: 2,
            bleedDamageMult: 1
        }
    };
    var Ee = (r => (r[r.Red = 1] = "Red",
    r[r.Blue = 2] = "Blue",
    r))(Ee || {});
    const xs = {
        mapId: 3,
        desc: {
            name: "50v50",
            icon: "img/gui/star.svg",
            buttonCss: "btn-mode-faction",
            buttonText: "50v50"
        },
        assets: {
            audio: [{
                name: "lt_assigned_01",
                channel: "ui"
            }, {
                name: "medic_assigned_01",
                channel: "ui"
            }, {
                name: "marksman_assigned_01",
                channel: "ui"
            }, {
                name: "recon_assigned_01",
                channel: "ui"
            }, {
                name: "grenadier_assigned_01",
                channel: "ui"
            }, {
                name: "bugler_assigned_01",
                channel: "ui"
            }, {
                name: "last_man_assigned_01",
                channel: "ui"
            }, {
                name: "ping_leader_01",
                channel: "ui"
            }, {
                name: "bugle_01",
                channel: "activePlayer"
            }, {
                name: "bugle_02",
                channel: "activePlayer"
            }, {
                name: "bugle_03",
                channel: "activePlayer"
            }, {
                name: "bugle_01",
                channel: "otherPlayers"
            }, {
                name: "bugle_02",
                channel: "otherPlayers"
            }, {
                name: "bugle_03",
                channel: "otherPlayers"
            }],
            atlases: ["gradient", "loadout", "shared", "faction"]
        },
        biome: {
            colors: {
                background: 333348,
                water: 465718,
                waterRipple: 11792639,
                beach: 9328178,
                riverbank: 6632211,
                grass: 5136680,
                underground: 1772803,
                playerSubmerge: 1192009,
                playerGhillie: 5005348
            }
        },
        gameMode: {
            maxPlayers: 100,
            factionMode: !0,
            factions: 2
        }
    }
      , Ss = f.mergeDeep({}, Xe, xs);
    function Mt(r, t) {
        return r[t]
    }
    function ks(r, t) {
        return r[t]
    }
    function it(r) {
        const t = {
            weapons: [{
                type: "",
                ammo: 0
            }, {
                type: "",
                ammo: 0
            }, {
                type: "fists",
                ammo: 0
            }, {
                type: "",
                ammo: 0
            }],
            backpack: "backpack00",
            helmet: "",
            chest: "",
            outfit: "",
            inventory: {
                "9mm": 0,
                "762mm": 0,
                "556mm": 0,
                "12gauge": 0,
                "50AE": 0,
                "308sub": 0,
                flare: 0,
                "45acp": 0,
                frag: 0,
                smoke: 0,
                strobe: 0,
                mirv: 0,
                snowball: 0,
                potato: 0,
                bandage: 0,
                healthkit: 0,
                soda: 0,
                painkiller: 0,
                "1xscope": 1,
                "2xscope": 0,
                "4xscope": 0,
                "8xscope": 0,
                "15xscope": 0
            }
        };
        return f.mergeDeep(t, r || {})
    }
    const da = {
        leader: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0,
                dead: !0
            },
            sound: {
                assign: "leader_assigned_01",
                dead: "leader_dead_01"
            },
            mapIcon: {
                alive: "player-star.img",
                dead: "skull-leader.img"
            },
            perks: ["leadership"],
            defaultItems: it({
                weapons: [r => Mt({
                    [Ee.Red]: {
                        type: "m1014",
                        ammo: 8,
                        fillInv: !0
                    },
                    [Ee.Blue]: {
                        type: "an94",
                        ammo: 45,
                        fillInv: !0
                    }
                }, r), {
                    type: "flare_gun",
                    ammo: 1
                }, r => Mt({
                    [Ee.Red]: {
                        type: "machete_taiga",
                        ammo: 0
                    },
                    [Ee.Blue]: {
                        type: "kukri_trad",
                        ammo: 0
                    }
                }, r), {
                    type: "",
                    ammo: 0
                }],
                backpack: "backpack03",
                helmet: "helmet04_leader",
                chest: "chest03",
                outfit: r => ({
                    [Ee.Red]: "outfitRedLeader",
                    [Ee.Blue]: "outfitBlueLeader"
                })[r],
                inventory: {
                    "8xscope": 1
                }
            })
        },
        lieutenant: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "lt_assigned_01"
            },
            perks: ["firepower"],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, r => Mt({
                    [Ee.Red]: {
                        type: "m4a1",
                        ammo: 40,
                        fillInv: !0
                    },
                    [Ee.Blue]: {
                        type: "grozas",
                        ammo: 40,
                        fillInv: !0
                    }
                }, r), {
                    type: "spade_assault",
                    ammo: 0
                }, {
                    type: "",
                    ammo: 0
                }],
                backpack: "backpack03",
                helmet: "helmet03_lt",
                chest: "chest03",
                inventory: {
                    "4xscope": 1
                }
            })
        },
        medic: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "medic_assigned_01"
            },
            mapIcon: {
                alive: "player-medic.img",
                dead: "skull-leader.img"
            },
            perks: ["aoe_heal", "self_revive"],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, {
                    type: "",
                    ammo: 0
                }, {
                    type: "bonesaw_rusted",
                    ammo: 0
                }, {
                    type: "smoke",
                    ammo: 0
                }],
                backpack: "backpack03",
                helmet: "helmet04_medic",
                chest: "chest03",
                inventory: {
                    "4xscope": 1,
                    bandage: 30,
                    healthkit: 4,
                    painkiller: 4,
                    soda: 15,
                    smoke: 6
                }
            })
        },
        marksman: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "marksman_assigned_01"
            },
            perks: ["targeting"],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, r => Mt({
                    [Ee.Red]: f.weightedRandom([{
                        type: "l86",
                        ammo: 30,
                        fillInv: !0,
                        weight: .9
                    }, {
                        type: "scarssr",
                        ammo: 10,
                        fillInv: !0,
                        weight: .1
                    }]),
                    [Ee.Blue]: f.weightedRandom([{
                        type: "svd",
                        ammo: 10,
                        fillInv: !0,
                        weight: .9
                    }, {
                        type: "scarssr",
                        ammo: 10,
                        fillInv: !0,
                        weight: .1
                    }])
                }, r), {
                    type: "kukri_sniper",
                    ammo: 0
                }, {
                    type: "",
                    ammo: 0
                }],
                backpack: "backpack03",
                helmet: "helmet03_marksman",
                chest: "chest03",
                inventory: {
                    "8xscope": 1
                }
            })
        },
        recon: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "recon_assigned_01"
            },
            perks: ["small_arms"],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, {
                    type: "glock_dual",
                    ammo: 34,
                    fillInv: !0
                }, {
                    type: "crowbar_recon",
                    ammo: 0
                }, {
                    type: "",
                    ammo: 0
                }],
                backpack: "backpack03",
                helmet: "helmet03_recon",
                chest: "chest03",
                inventory: {
                    "4xscope": 1,
                    soda: 6
                }
            })
        },
        grenadier: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "grenadier_assigned_01"
            },
            perks: ["flak_jacket"],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, {
                    type: "mp220",
                    ammo: 2,
                    fillInv: !0
                }, {
                    type: "katana",
                    ammo: 0
                }, {
                    type: "mirv",
                    ammo: 8
                }],
                backpack: "backpack03",
                helmet: "helmet03_grenadier",
                chest: "chest03",
                inventory: {
                    mirv: 8,
                    frag: 12,
                    "4xscope": 1
                }
            })
        },
        bugler: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "bugler_assigned_01"
            },
            perks: ["inspiration", "final_bugle"],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, {
                    type: "bugle",
                    ammo: 1
                }, {
                    type: "",
                    ammo: 0
                }, {
                    type: "",
                    ammo: 0
                }],
                backpack: "backpack03",
                helmet: "helmet03_bugler",
                chest: "chest03",
                inventory: {
                    "4xscope": 1
                }
            })
        },
        last_man: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0
            },
            sound: {
                assign: "last_man_assigned_01"
            },
            perks: ["steelskin", "splinter", () => f.weightedRandom([{
                type: "takedown",
                weight: 4.5
            }, {
                type: "windwalk",
                weight: 1
            }, {
                type: "field_medic",
                weight: 1
            }]).type],
            defaultItems: it({
                weapons: [{
                    type: "",
                    ammo: 0
                }, r => Mt({
                    [Ee.Red]: f.weightedRandom([{
                        type: "m249",
                        ammo: 100,
                        fillInv: !0,
                        weight: 1
                    }, {
                        type: "pkp",
                        ammo: 200,
                        fillInv: !0,
                        weight: 1
                    }]),
                    [Ee.Blue]: f.weightedRandom([{
                        type: "m249",
                        ammo: 100,
                        fillInv: !0,
                        weight: 1
                    }, {
                        type: "pkp",
                        ammo: 200,
                        fillInv: !0,
                        weight: 1
                    }])
                }, r), {
                    type: "",
                    ammo: 0
                }, {
                    type: "mirv",
                    ammo: 8
                }],
                backpack: "backpack03",
                helmet: r => ks({
                    [Ee.Red]: "helmet04_last_man_red",
                    [Ee.Blue]: "helmet04_last_man_blue"
                }, r),
                chest: "chest04",
                inventory: {
                    mirv: 8,
                    "8xscope": 1
                }
            })
        },
        woods_king: {
            type: "role",
            announce: !1,
            killFeed: {
                dead: !0,
                color: "#12ff00"
            },
            sound: {
                dead: "leader_dead_01"
            },
            perks: ["gotw", "windwalk"]
        },
        kill_leader: {
            type: "role",
            announce: !1,
            killFeed: {
                assign: !0,
                dead: !0,
                color: "#ff8400"
            },
            sound: {
                assign: "leader_assigned_01",
                dead: "leader_dead_01"
            }
        },
        the_hunted: {
            type: "role",
            announce: !0,
            killFeed: {
                assign: !0,
                dead: !0,
                color: "#ff8400"
            },
            sound: {
                assign: "leader_assigned_01",
                dead: "leader_dead_01"
            },
            mapIndicator: {
                sprite: "player-the-hunted.img",
                tint: 16745472,
                pulse: !0,
                pulseTint: 16745472
            },
            perks: ["hunted"]
        },
        healer: {
            type: "role",
            announce: !1,
            sound: {
                assign: "spawn_01"
            },
            perks: ["field_medic", "windwalk"],
            visorImg: {
                baseSprite: "player-visor-healer.img",
                spriteScale: .3
            },
            guiImg: "img/gui/role-healer.svg",
            color: 11468975
        },
        tank: {
            type: "role",
            announce: !1,
            sound: {
                assign: "spawn_01"
            },
            perks: ["steelskin", "endless_ammo"],
            visorImg: {
                baseSprite: "player-visor-tank.img",
                spriteScale: .3
            },
            guiImg: "img/gui/role-tank.svg",
            color: 13862400
        },
        sniper: {
            type: "role",
            announce: !1,
            sound: {
                assign: "spawn_01"
            },
            perks: ["chambered", "takedown"],
            visorImg: {
                baseSprite: "player-visor-sniper.img",
                spriteScale: .3
            },
            guiImg: "img/gui/role-sniper.svg",
            color: 30696
        },
        scout: {
            type: "role",
            announce: !1,
            sound: {
                assign: "spawn_01"
            },
            perks: ["small_arms", "tree_climbing"],
            visorImg: {
                baseSprite: "player-visor-scout.img",
                spriteScale: .3
            },
            guiImg: "img/gui/role-scout.svg",
            color: 6725632
        },
        demo: {
            type: "role",
            announce: !1,
            sound: {
                assign: "spawn_01"
            },
            perks: ["fabricate", "flak_jacket"],
            visorImg: {
                baseSprite: "player-visor-demo.img",
                spriteScale: .3
            },
            guiImg: "img/gui/role-demo.svg",
            color: 6750976
        },
        assault: {
            type: "role",
            announce: !1,
            sound: {
                assign: "spawn_01"
            },
            perks: ["firepower", "bonus_assault"],
            visorImg: {
                baseSprite: "player-visor-assault.img",
                spriteScale: .3
            },
            guiImg: "img/gui/role-assault.svg",
            color: 16772119
        }
    }
      , zs = {
        frag: {
            name: "Frag Grenade",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_frag",
            inventoryOrder: 1,
            cookable: !0,
            explodeOnImpact: !1,
            playerCollision: !1,
            fuseTime: 4,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 5,
                speed: 20,
                spinVel: 10 * Math.PI,
                spinDrag: 1
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-frag.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-frag-nopin-nolever-01.img",
                scale: .12,
                tint: 16777215
            },
            handImg: {
                equip: {
                    right: {
                        sprite: "proj-frag-pin-01.img",
                        pos: {
                            x: 4.2,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                cook: {
                    right: {
                        sprite: "proj-frag-nopin-01.img",
                        pos: {
                            x: 4.2,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "proj-frag-pin-part.img",
                        pos: {
                            x: 4.2,
                            y: 4.2
                        },
                        scale: .14
                    }
                },
                throwing: {
                    right: {
                        sprite: "none"
                    },
                    left: {
                        sprite: "none"
                    }
                }
            },
            useThrowParticles: !0,
            sound: {
                pullPin: "frag_pin_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        mirv: {
            name: "MIRV Grenade",
            type: "throwable",
            quality: 1,
            explosionType: "explosion_mirv",
            inventoryOrder: 2,
            cookable: !0,
            explodeOnImpact: !1,
            playerCollision: !1,
            fuseTime: 4,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 5,
                speed: 20,
                spinVel: 10 * Math.PI,
                spinDrag: 1
            },
            numSplit: 6,
            splitType: "mirv_mini",
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-mirv.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-mirv-nopin-nolever.img",
                scale: .13,
                tint: 16777215
            },
            handImg: {
                equip: {
                    right: {
                        sprite: "proj-mirv-pin.img",
                        pos: {
                            x: 4.2,
                            y: 4.2
                        },
                        scale: .15
                    },
                    left: {
                        sprite: "none"
                    }
                },
                cook: {
                    right: {
                        sprite: "proj-mirv-nopin.img",
                        pos: {
                            x: 4.2,
                            y: 4.2
                        },
                        scale: .15
                    },
                    left: {
                        sprite: "proj-frag-pin-part.img",
                        pos: {
                            x: 4.2,
                            y: 4.2
                        },
                        scale: .15
                    }
                },
                throwing: {
                    right: {
                        sprite: "none"
                    },
                    left: {
                        sprite: "none"
                    }
                }
            },
            useThrowParticles: !0,
            sound: {
                pullPin: "frag_pin_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        mirv_mini: {
            name: "MIRV Grenade",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_mirv_mini",
            inventoryOrder: 99,
            cookable: !0,
            noPotatoSwap: !0,
            explodeOnImpact: !1,
            playerCollision: !1,
            fuseTime: 1.8,
            fuseVariance: .3,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 5,
                speed: 20,
                spinVel: 10 * Math.PI,
                spinDrag: 1
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-frag.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-mirv-mini-01.img",
                scale: .12,
                tint: 16777215
            },
            useThrowParticles: !0,
            sound: {
                pullPin: "frag_pin_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        martyr_nade: {
            name: "Martyrdom",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_martyr_nade",
            inventoryOrder: 99,
            cookable: !0,
            noPotatoSwap: !0,
            explodeOnImpact: !1,
            playerCollision: !1,
            fuseTime: 3,
            fuseVariance: .3,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 5,
                speed: 20,
                spinVel: 10 * Math.PI,
                spinDrag: 1
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-frag.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-martyrdom-01.img",
                scale: .12,
                tint: 16777215
            },
            useThrowParticles: !0,
            sound: {
                pullPin: "frag_pin_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        smoke: {
            name: "Smoke Grenade",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_smoke",
            inventoryOrder: 3,
            cookable: !1,
            explodeOnImpact: !1,
            playerCollision: !1,
            fuseTime: 2.5,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 5,
                speed: 15,
                spinVel: 10 * Math.PI,
                spinDrag: 1
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-smoke.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-smoke-nopin-nolever.img",
                scale: .12,
                tint: 16777215
            },
            handImg: {
                equip: {
                    right: {
                        sprite: "proj-smoke-pin.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                cook: {
                    right: {
                        sprite: "proj-smoke-nopin.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "proj-frag-pin-part.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    }
                },
                throwing: {
                    right: {
                        sprite: "none"
                    },
                    left: {
                        sprite: "none"
                    }
                }
            },
            useThrowParticles: !0,
            sound: {
                pullPin: "frag_pin_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        strobe: {
            name: "IR Strobe",
            type: "throwable",
            quality: 1,
            explosionType: "explosion_strobe",
            inventoryOrder: 3,
            cookable: !1,
            explodeOnImpact: !1,
            playerCollision: !1,
            fuseTime: 13.5,
            strikeDelay: 2.5,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 5,
                speed: 25,
                spinVel: 6 * Math.PI,
                spinDrag: 1
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-strobe.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-strobe-armed.img",
                scale: .12,
                tint: 16777215
            },
            handImg: {
                equip: {
                    right: {
                        sprite: "proj-strobe-unarmed.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                cook: {
                    right: {
                        sprite: "proj-strobe-arming.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    }
                },
                throwing: {
                    right: {
                        sprite: "none"
                    },
                    left: {
                        sprite: "none"
                    }
                }
            },
            useThrowParticles: !1,
            sound: {
                pullPin: "strobe_click_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        snowball: {
            name: "Snowball",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_snowball",
            heavyType: "snowball_heavy",
            changeTime: 5,
            inventoryOrder: 0,
            cookable: !0,
            noPotatoSwap: !0,
            forceMaxThrowDistance: !0,
            explodeOnImpact: !0,
            playerCollision: !0,
            fuseTime: 9999,
            aimDistance: 32,
            rad: 1,
            throwPhysics: {
                playerVelMult: 0,
                velZ: 3.35,
                speed: 40,
                spinVel: 10 * Math.PI,
                spinDrag: 1,
                fixedCollisionHeight: .25
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-snowball.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-snowball-01.img",
                scale: .12,
                tint: 16777215
            },
            handImg: {
                equip: {
                    right: {
                        sprite: "proj-snowball-01.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                cook: {
                    right: {
                        sprite: "proj-snowball-01.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                throwing: {
                    right: {
                        sprite: "none"
                    },
                    left: {
                        sprite: "none"
                    }
                }
            },
            useThrowParticles: !1,
            sound: {
                pullPin: "",
                throwing: "frag_throw_01",
                pickup: "snowball_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        snowball_heavy: {
            name: "Snowball",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_snowball_heavy",
            inventoryOrder: 0,
            cookable: !0,
            noPotatoSwap: !0,
            forceMaxThrowDistance: !0,
            explodeOnImpact: !0,
            playerCollision: !0,
            fuseTime: 9999,
            aimDistance: 32,
            rad: 1.25,
            throwPhysics: {
                playerVelMult: 0,
                velZ: 3.35,
                speed: 45,
                spinVel: 10 * Math.PI,
                spinDrag: 1,
                fixedCollisionHeight: .25
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-snowball.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-snowball-02.img",
                scale: .2,
                tint: 16777215
            },
            handImg: {},
            useThrowParticles: !1,
            sound: {
                pullPin: "",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        potato: {
            name: "Potato",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_potato",
            freezeOnImpact: !0,
            heavyType: "potato_heavy",
            changeTime: 5,
            inventoryOrder: 0,
            cookable: !0,
            forceMaxThrowDistance: !0,
            explodeOnImpact: !0,
            playerCollision: !0,
            fuseTime: 9999,
            aimDistance: 32,
            rad: 1,
            throwPhysics: {
                playerVelMult: 0,
                velZ: 3.35,
                speed: 40,
                spinVel: 10 * Math.PI,
                spinDrag: 1,
                fixedCollisionHeight: .25
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-potato.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-potato-01.img",
                scale: .12,
                tint: 16777215
            },
            handImg: {
                equip: {
                    right: {
                        sprite: "proj-potato-01.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                cook: {
                    right: {
                        sprite: "proj-potato-01.img",
                        pos: {
                            x: 3,
                            y: 4.2
                        },
                        scale: .14
                    },
                    left: {
                        sprite: "none"
                    }
                },
                throwing: {
                    right: {
                        sprite: "none"
                    },
                    left: {
                        sprite: "none"
                    }
                }
            },
            useThrowParticles: !1,
            sound: {
                pullPin: "",
                throwing: "frag_throw_01",
                pickup: "potato_pickup_01",
                deploy: "frag_deploy_01"
            },
            emoteId: 210
        },
        potato_heavy: {
            name: "Potato",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_potato_heavy",
            inventoryOrder: 0,
            noPotatoSwap: !0,
            cookable: !0,
            forceMaxThrowDistance: !0,
            explodeOnImpact: !0,
            playerCollision: !0,
            fuseTime: 9999,
            aimDistance: 32,
            rad: 1.25,
            throwPhysics: {
                playerVelMult: 0,
                velZ: 3.35,
                speed: 45,
                spinVel: 10 * Math.PI,
                spinDrag: 1,
                fixedCollisionHeight: .25
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-potato.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-potato-02.img",
                scale: .2,
                tint: 16777215
            },
            handImg: {},
            useThrowParticles: !1,
            sound: {
                pullPin: "",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        },
        potato_cannonball: {
            name: "Potato Cannon",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_potato_cannonball",
            inventoryOrder: 0,
            noPotatoSwap: !0,
            cookable: !0,
            forceMaxThrowDistance: !0,
            explodeOnImpact: !0,
            destroyNonCollidables: !0,
            playerCollision: !0,
            fuseTime: 999,
            aimDistance: 32,
            rad: 1,
            throwPhysics: {
                playerVelMult: 0,
                velZ: 3,
                speed: 65,
                spinVel: 5 * Math.PI,
                spinDrag: 1,
                fixedCollisionHeight: .25
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-potato.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-potato-02.img",
                scale: .2,
                tint: 16777215
            },
            handImg: {},
            useThrowParticles: !1,
            sound: {
                pullPin: "",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            },
            trail: {
                maxLength: 25,
                width: 2.8,
                alpha: 1,
                tint: 5916214
            }
        },
        potato_smgshot: {
            name: "Spud Gun",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_potato_smgshot",
            inventoryOrder: 0,
            noPotatoSwap: !0,
            cookable: !0,
            forceMaxThrowDistance: !0,
            explodeOnImpact: !0,
            destroyNonCollidables: !0,
            playerCollision: !0,
            fuseTime: 999,
            aimDistance: 32,
            rad: .1,
            throwPhysics: {
                playerVelMult: 0,
                velZ: 3,
                speed: 85,
                spinVel: 9 * Math.PI,
                spinDrag: 1,
                fixedCollisionHeight: .25
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-potato.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-wedge-01.img",
                scale: .075,
                tint: 16777215
            },
            handImg: {},
            useThrowParticles: !1,
            sound: {
                pullPin: "",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            },
            trail: {
                maxLength: 40,
                width: 2.8,
                alpha: 1,
                tint: 5920310
            }
        },
        bomb_iron: {
            name: "Iron Bomb",
            type: "throwable",
            quality: 0,
            explosionType: "explosion_bomb_iron",
            inventoryOrder: 1,
            cookable: !0,
            noPotatoSwap: !0,
            explodeOnImpact: !0,
            playerCollision: !1,
            fuseTime: 4,
            aimDistance: 0,
            rad: 1,
            throwPhysics: {
                playerVelMult: .6,
                velZ: 0,
                speed: 20,
                spinVel: 1 * Math.PI,
                spinDrag: 1,
                randomizeSpinDir: !0
            },
            speed: {
                equip: 0,
                attack: 0
            },
            lootImg: {
                sprite: "loot-throwable-frag.img",
                tint: 65280,
                border: "loot-circle-outer-01.img",
                borderTint: 0,
                scale: .2
            },
            worldImg: {
                sprite: "proj-bomb-iron-01.img",
                scale: .12,
                tint: 16777215
            },
            handImg: {},
            useThrowParticles: !0,
            sound: {
                pullPin: "frag_pin_01",
                throwing: "frag_throw_01",
                pickup: "frag_pickup_01",
                deploy: "frag_deploy_01"
            }
        }
    }
      , vs = {
        unlock_default: {
            type: "unlock",
            name: "standard-issue",
            unlocks: ["outfitBase", "fists", "heal_basic", "boost_basic", "crosshair_default", "crosshair_001", "crosshair_005", "crosshair_007", "crosshair_086", "crosshair_027", "crosshair_080", "crosshair_098", "crosshair_101", "crosshair_158", "crosshair_094", "crosshair_118", "crosshair_136", "crosshair_160", "crosshair_176", "emote_thumbsup", "emote_sadface", "emote_happyface", "emote_surviv", "emote_gg", "emote_question", "emote_tombstone", "emote_joyface", "emote_sobface", "emote_thinkingface", "emote_flagus", "emote_flagthailand", "emote_flaggermany", "emote_flagfrance", "emote_flagsouthkorea", "emote_flagbrazil", "emote_flagcanada", "emote_flagspain", "emote_flagrussia", "emote_flagmexico", "emote_flagpoland", "emote_flaguk", "emote_flagcolombia", "emote_flagukraine", "emote_flagturkey", "emote_flagphilippines", "emote_flagczechia", "emote_flagperu", "emote_flagaustria", "emote_flagargentina", "emote_flagjapan", "emote_flagvenezuela", "emote_flagvietnam", "emote_flagswitzerland", "emote_flagnetherlands", "emote_flagchina", "emote_flagtaiwan", "emote_flagchile", "emote_flagaustralia", "emote_flagdenmark", "emote_flagitaly", "emote_flagsweden", "emote_flagecuador", "emote_flagslovakia", "emote_flaghungary", "emote_flagromania", "emote_flaghongkong", "emote_flagindonesia", "emote_flagfinland", "emote_flagnorway", "emote_heart", "emote_sleepy", "emote_flex", "emote_angryface", "emote_upsidedownface", "emote_teabag", "emote_alienface", "emote_flagbelarus", "emote_flagbelgium", "emote_flagkazakhstan", "emote_egg", "emote_police", "emote_dabface", "emote_flagmalaysia", "emote_flagnewzealand", "emote_logosurviv", "emote_logoegg", "emote_logoswine", "emote_logohydra", "emote_logostorm", "emote_flaghonduras", "emote_logocaduceus", "emote_impface", "emote_monocleface", "emote_sunglassface", "emote_headshotface", "emote_potato", "emote_leek", "emote_eggplant", "emote_baguette", "emote_chick", "emote_flagbolivia", "emote_flagcroatia", "emote_flagindia", "emote_flagisrael", "emote_flaggeorgia", "emote_flaggreece", "emote_flagguatemala", "emote_flagportugal", "emote_flagserbia", "emote_flagsingapore", "emote_flagtrinidad", "emote_flaguruguay", "emote_logoconch", "emote_pineapple", "emote_coconut", "emote_crab", "emote_whale", "emote_logometeor", "emote_salt", "emote_disappointface", "emote_logocrossing", "emote_fish", "emote_campfire", "emote_chickendinner", "emote_cattle", "emote_icecream", "emote_cupcake", "emote_donut", "emote_logohatchet", "emote_acorn", "emote_trunk", "emote_forest", "emote_pumpkin", "emote_candycorn", "emote_pilgrimhat", "emote_turkeyanimal", "emote_heartface", "emote_logochrysanthemum", "emote_santahat", "emote_snowman", "emote_snowflake", "emote_flagmorocco", "emote_flagestonia", "emote_flagalgeria", "emote_flagegypt", "emote_flagazerbaijan", "emote_flagalbania", "emote_flaglithuania", "emote_flaglatvia", "emote_flaguae", "emote_flagdominicanrepublic", "emote_logocloud", "emote_logotwins"]
        },
        unlock_new_account: {
            type: "unlock",
            name: "new-account",
            free: !0,
            unlocks: ["outfitDarkShirt"]
        }
    };
    function Qe(r, t) {
        return dr(ro, r, t)
    }
    const ro = {
        xp_10: {
            name: "XP",
            type: "xp",
            xp: 8,
            lootImg: {
                sprite: "loot-xp-book-01.img",
                tint: 16777215,
                border: "loot-circle-outer-05.img",
                borderTint: 16777215,
                scale: .2
            },
            sound: {
                drop: "xp_drop_01",
                pickup: "xp_pickup_01"
            },
            emitter: "xp_common"
        },
        xp_25: {
            name: "XP",
            type: "xp",
            xp: 24,
            lootImg: {
                sprite: "loot-xp-book-01.img",
                tint: 16777215,
                border: "loot-circle-outer-05.img",
                borderTint: 16777215,
                scale: .2
            },
            sound: {
                drop: "xp_drop_02",
                pickup: "xp_pickup_02"
            },
            emitter: "xp_rare"
        },
        xp_100: {
            name: "XP",
            type: "xp",
            xp: 96,
            lootImg: {
                sprite: "loot-xp-book-01.img",
                tint: 16777215,
                border: "loot-circle-outer-05.img",
                borderTint: 16777215,
                scale: .2
            },
            sound: {
                drop: "xp_drop_02",
                pickup: "xp_pickup_02"
            },
            emitter: "xp_mythic"
        }
    }
      , Is = {
        xp_book_tallow: Qe("xp_10", {
            name: "Tallow's Journal",
            lootImg: {
                sprite: "loot-xp-book-01.img"
            }
        }),
        xp_book_greene: Qe("xp_10", {
            name: "Greene's Infinite Wisdom",
            lootImg: {
                sprite: "loot-xp-book-02.img"
            }
        }),
        xp_book_parma: Qe("xp_10", {
            name: "The PARMA Papers",
            lootImg: {
                sprite: "loot-xp-book-03.img"
            }
        }),
        xp_book_nevelskoy: Qe("xp_10", {
            name: "The Nevelskoy Report",
            lootImg: {
                sprite: "loot-xp-book-04.img"
            }
        }),
        xp_book_rinzo: Qe("xp_10", {
            name: "Rinzō's Log",
            lootImg: {
                sprite: "loot-xp-book-05.img"
            }
        }),
        xp_book_kuga: Qe("xp_10", {
            name: "Memoirs of Kuga Kairyū",
            lootImg: {
                sprite: "loot-xp-book-06.img"
            }
        }),
        xp_glasses: Qe("xp_25", {
            name: "Lenz's Spectacles",
            lootImg: {
                sprite: "loot-xp-glasses-01.img"
            }
        }),
        xp_compass: Qe("xp_25", {
            name: "Amélie's True Compass",
            lootImg: {
                sprite: "loot-xp-compass-01.img"
            }
        }),
        xp_stump: Qe("xp_25", {
            name: "Ravenstone's Bloody Stump",
            lootImg: {
                sprite: "loot-xp-stump-01.img"
            }
        }),
        xp_bone: Qe("xp_25", {
            name: "Bone of Gordon",
            lootImg: {
                sprite: "loot-xp-bone-01.img"
            }
        }),
        xp_donut: Qe("xp_100", {
            name: "Cake Donut",
            lootImg: {
                sprite: "loot-xp-donut-01.img"
            }
        })
    }
      , Ts = {
        ...ro,
        ...Is
    }
      , Ta = [Xt, nr, gs, bt, Kr, hs, ds, ys, _s, ra, bs, gr, zt, da, zs, vs, Ts]
      , U = {};
    for (let r = 0; r < Ta.length; r++) {
        const t = Ta[r]
          , a = Object.keys(t);
        for (let i = 0; i < a.length; i++) {
            const o = a[i];
            if (U[o] !== void 0)
                throw new Error(`GameObject ${o} is already defined`);
            U[o] = t[o]
        }
    }
    const le = {
        circleToAabb(r, t) {
            const a = e.create(t);
            return {
                type: 1,
                min: e.sub(r, a),
                max: e.add(r, a)
            }
        },
        aabbToCircle(r, t) {
            const a = e.mul(e.sub(t, r), .5);
            return {
                type: 0,
                pos: e.add(r, a),
                rad: e.length(a)
            }
        },
        lineSegmentToAabb(r, t) {
            return {
                type: n.Type.Aabb,
                min: e.create(r.x < t.x ? r.x : t.x, r.y < t.y ? r.y : t.y),
                max: e.create(r.x > t.x ? r.x : t.x, r.y > t.y ? r.y : t.y)
            }
        },
        boundingAabb(r) {
            const t = e.create(Number.MAX_VALUE, Number.MAX_VALUE)
              , a = e.create(-Number.MAX_VALUE, -Number.MAX_VALUE);
            for (let i = 0; i < r.length; i++) {
                const o = r[i];
                t.x = k.min(t.x, o.min.x),
                t.y = k.min(t.y, o.min.y),
                a.x = k.max(a.x, o.max.x),
                a.y = k.max(a.y, o.max.y)
            }
            return {
                min: t,
                max: a
            }
        },
        splitAabb(r, t) {
            const a = e.mul(e.sub(r.max, r.min), .5)
              , i = e.add(r.min, a)
              , o = {
                min: e.copy(r.min),
                max: e.copy(r.max)
            }
              , s = {
                min: e.copy(r.min),
                max: e.copy(r.max)
            };
            Math.abs(t.y) > Math.abs(t.x) ? (o.max = e.create(r.max.x, i.y),
            s.min = e.create(r.min.x, i.y)) : (o.max = e.create(i.x, r.max.y),
            s.min = e.create(i.x, r.min.y));
            const l = e.sub(r.max, r.min);
            return e.dot(l, t) > 0 ? [s, o] : [o, s]
        },
        divideAabb(r, t, a) {
            const i = e.sub(r.max, r.min)
              , o = e.mul(i, 1 / a)
              , s = [];
            for (let l = 0; l < a; l++) {
                const c = {
                    min: e.copy(r.min),
                    max: e.copy(r.max)
                };
                Math.abs(t.y) > Math.abs(t.x) ? (c.min = e.create(r.min.x, r.min.y + o.y * l),
                c.max = e.create(r.max.x, r.min.y + o.y * (l + 1))) : (c.min = e.create(r.min.x + o.x * l, r.min.y),
                c.max = e.create(r.min.x + o.x * (l + 1), r.max.y)),
                s.push(c)
            }
            return s
        },
        scaleAabbAlongAxis(r, t, a) {
            const i = e.mul(e.sub(r.max, r.min), .5)
              , o = e.add(r.min, i)
              , s = Math.abs(t.y) > Math.abs(t.x);
            return {
                min: e.create(s ? r.min.x : o.x - i.x * a, s ? o.y - i.y * a : r.min.y),
                max: e.create(s ? r.max.x : o.x + i.x * a, s ? o.y + i.y * a : r.max.y)
            }
        },
        clampPosToAabb(r, t) {
            return e.minElems(e.maxElems(r, t.min), t.max)
        },
        clampPolygonToAabb(r, t) {
            const a = [];
            for (let i = 0; i < r.length; i++)
                a.push(le.clampPosToAabb(r[i], t));
            return a
        },
        testPointAabb(r, t, a) {
            return r.x >= t.x && r.y >= t.y && r.x <= a.x && r.y <= a.y
        },
        testCircleAabb(r, t, a, i) {
            const o = e.create(k.clamp(r.x, a.x, i.x), k.clamp(r.y, a.y, i.y));
            return e.lengthSqr(e.sub(r, o)) < t * t || r.x >= a.x && r.x <= i.x && r.y >= a.y && r.y <= i.y
        },
        testCircleCircle(r, t, a, i) {
            const o = t + i;
            return e.lengthSqr(e.sub(a, r)) < o * o
        },
        testAabbAabb(r, t, a, i) {
            return r.x < i.x && r.y < i.y && a.x < t.x && a.y < t.y
        },
        testAabbPolygon(r, t, a) {
            for (let i = 0; i < a.length; i++) {
                const o = a[i]
                  , s = i === a.length - 1 ? a[0] : a[i + 1];
                if (le.intersectSegmentAabb(o, s, r, t))
                    return !0
            }
            return !1
        },
        test(r, t) {
            return r.type === 0 ? t.type === 0 ? le.testCircleCircle(r.pos, r.rad, t.pos, t.rad) : le.testCircleAabb(r.pos, r.rad, t.min, t.max) : t.type === 0 ? le.testCircleAabb(t.pos, t.rad, r.min, r.max) : le.testAabbAabb(r.min, r.max, t.min, t.max)
        },
        aabbInsideAabb(r, t, a, i) {
            return r.x >= a.x && r.y >= a.y && t.x <= i.x && t.y <= i.y
        },
        signedAreaTri(r, t, a) {
            return (r.x - a.x) * (t.y - a.y) - (r.y - a.y) * (t.x - a.x)
        },
        intersectSegmentSegment(r, t, a, i) {
            const o = le.signedAreaTri(r, t, i)
              , s = le.signedAreaTri(r, t, a);
            if (o !== 0 && s !== 0 && o * s < 0) {
                const l = le.signedAreaTri(a, i, r)
                  , c = l + s - o;
                if (l * c < 0) {
                    const m = l / (l - c);
                    return {
                        point: e.add(r, e.mul(e.sub(t, r), m))
                    }
                }
            }
            return null
        },
        intersectSegmentCircle(r, t, a, i) {
            let o = e.sub(t, r);
            const s = k.max(e.length(o), 1e-6);
            o = e.div(o, s);
            const l = e.sub(r, a)
              , c = e.dot(l, o)
              , m = e.dot(l, l) - i * i;
            if (m > 0 && c > 0)
                return null;
            const h = c * c - m;
            if (h < 0)
                return null;
            const u = Math.sqrt(h);
            let g = -c - u;
            if (g < 0 && (g = -c + u),
            g <= s) {
                const w = e.add(r, e.mul(o, g));
                return {
                    point: w,
                    normal: e.normalize(e.sub(w, a))
                }
            }
            return null
        },
        intersectSegmentAabb(r, t, a, i) {
            let o = 0
              , s = Number.MAX_VALUE;
            const l = 1e-5
              , c = r;
            let m = e.sub(t, r);
            const h = e.length(m);
            m = h > l ? e.div(m, h) : e.create(1, 0);
            let u = Math.abs(m.x)
              , g = Math.abs(m.y);
            if (u < l && (m.x = l * 2,
            u = m.x),
            g < l && (m.y = l * 2,
            g = m.y),
            u > l) {
                const T = (a.x - c.x) / m.x
                  , I = (i.x - c.x) / m.x;
                if (o = k.max(o, k.min(T, I)),
                s = k.min(s, k.max(T, I)),
                o > s)
                    return null
            }
            if (g > l) {
                const T = (a.y - c.y) / m.y
                  , I = (i.y - c.y) / m.y;
                if (o = k.max(o, k.min(T, I)),
                s = k.min(s, k.max(T, I)),
                o > s)
                    return null
            }
            if (o > h)
                return null;
            const w = e.add(r, e.mul(m, o))
              , y = e.add(a, e.mul(e.sub(i, a), .5))
              , _ = e.sub(w, y)
              , S = e.mul(e.sub(a, i), .5)
              , b = _.x / Math.abs(S.x) * 1.001
              , A = _.y / Math.abs(S.y) * 1.001
              , P = e.normalizeSafe(e.create(b < 0 ? Math.ceil(b) : Math.floor(b), A < 0 ? Math.ceil(A) : Math.floor(A)), e.create(1, 0));
            return {
                point: w,
                normal: P
            }
        },
        intersectSegmentAabb2(r, t, a, i) {
            const o = [{
                a: e.create(a.x, a.y),
                b: e.create(i.x, a.y)
            }, {
                a: e.create(i.x, a.y),
                b: e.create(i.x, i.y)
            }, {
                a: e.create(i.x, i.y),
                b: e.create(a.x, i.y)
            }, {
                a: e.create(a.x, i.y),
                b: e.create(a.x, a.y)
            }];
            for (let s = 0; s < o.length; s++) {
                const l = o[s]
                  , c = le.intersectSegmentSegment(r, t, l.a, l.b);
                if (c)
                    return c
            }
            return null
        },
        intersectRayAabb(r, t, a, i) {
            Math.abs(t.x) < 1e-5 && (t.x = 1e-5 * 2),
            Math.abs(t.y) < 1e-5 && (t.y = 1e-5 * 2);
            const s = e.divElems(e.sub(a, r), t)
              , l = e.divElems(e.sub(i, r), t)
              , c = e.minElems(s, l)
              , m = e.maxElems(s, l)
              , h = k.min(m.x, m.y)
              , u = k.max(c.x, c.y);
            return h >= u ? e.add(r, e.mul(t, h)) : null
        },
        intersectCircleCircle(r, t, a, i) {
            const o = t + i
              , s = e.sub(a, r)
              , l = e.lengthSqr(s);
            if (l < o * o) {
                const c = Math.sqrt(l);
                return {
                    dir: c > 1e-5 ? e.div(s, c) : e.create(1, 0),
                    pen: o - c
                }
            }
            return null
        },
        intersectAabbCircle(r, t, a, i) {
            if (a.x >= r.x && a.x <= t.x && a.y >= r.y && a.y <= t.y) {
                const c = e.mul(e.sub(t, r), .5)
                  , m = e.add(r, c)
                  , h = e.sub(a, m)
                  , u = Math.abs(h.x) - c.x - i
                  , g = Math.abs(h.y) - c.y - i;
                return u > g ? {
                    dir: e.create(h.x > 0 ? 1 : -1, 0),
                    pen: -u
                } : {
                    dir: e.create(0, h.y > 0 ? 1 : -1),
                    pen: -g
                }
            }
            const o = e.create(k.clamp(a.x, r.x, t.x), k.clamp(a.y, r.y, t.y))
              , s = e.sub(a, o)
              , l = e.lengthSqr(s);
            if (l < i * i) {
                const c = Math.sqrt(l);
                return {
                    dir: c > 1e-4 ? e.div(s, c) : e.create(1, 0),
                    pen: i - c
                }
            }
            return null
        },
        intersectAabbAabb(r, t, a, i) {
            const o = e.mul(e.sub(t, r), .5)
              , s = e.add(r, o)
              , l = e.mul(e.sub(i, a), .5)
              , c = e.add(a, l)
              , m = e.sub(c, s)
              , h = o.x + l.x - Math.abs(m.x);
            if (h > 0) {
                const u = o.y + l.y - Math.abs(m.y);
                if (u > 0)
                    return h > u ? {
                        dir: m.x < 0 ? e.create(-1, 0) : e.create(1, 0),
                        pen: h
                    } : {
                        dir: m.y < 0 ? e.create(0, -1) : e.create(0, 1),
                        pen: u
                    }
            }
            return null
        }
    }
      , n = {
        Type: {
            Circle: 0,
            Aabb: 1
        },
        createCircle(r, t, a=0) {
            return {
                type: n.Type.Circle,
                pos: e.copy(r),
                rad: t,
                height: a
            }
        },
        createAabb(r, t, a=0) {
            return {
                type: n.Type.Aabb,
                min: e.copy(r),
                max: e.copy(t),
                height: a
            }
        },
        createAabbExtents(r, t, a) {
            const i = e.sub(r, t)
              , o = e.add(r, t);
            return n.createAabb(i, o, a)
        },
        createBounding(r) {
            if (r.length === 1)
                return n.copy(r[0]);
            const t = [];
            let a = 0;
            for (let o = 0; o < r.length; o++) {
                const s = r[o];
                t.push(n.toAabb(s)),
                a = k.max(a, s.height)
            }
            const i = le.boundingAabb(t);
            return n.createAabb(i.min, i.max, a)
        },
        toAabb(r) {
            if (r.type === n.Type.Aabb)
                return n.createAabb(r.min, r.max, r.height);
            const t = le.circleToAabb(r.pos, r.rad);
            return n.createAabb(t.min, t.max, r.height)
        },
        copy(r) {
            return r.type === n.Type.Circle ? n.createCircle(r.pos, r.rad, r.height) : n.createAabb(r.min, r.max, r.height)
        },
        transform(r, t, a, i) {
            if (r.type === n.Type.Aabb) {
                const o = e.mul(e.sub(r.max, r.min), .5)
                  , s = e.add(r.min, o)
                  , l = [e.create(s.x - o.x, s.y - o.y), e.create(s.x - o.x, s.y + o.y), e.create(s.x + o.x, s.y - o.y), e.create(s.x + o.x, s.y + o.y)]
                  , c = e.create(Number.MAX_VALUE, Number.MAX_VALUE)
                  , m = e.create(-Number.MAX_VALUE, -Number.MAX_VALUE);
                for (let h = 0; h < l.length; h++) {
                    const u = e.add(e.rotate(e.mul(l[h], i), a), t);
                    c.x = k.min(c.x, u.x),
                    c.y = k.min(c.y, u.y),
                    m.x = k.max(m.x, u.x),
                    m.y = k.max(m.y, u.y)
                }
                return n.createAabb(c, m, r.height)
            }
            return n.createCircle(e.add(e.rotate(e.mul(r.pos, i), a), t), r.rad * i, r.height)
        },
        getPoints(r) {
            const t = []
              , {min: a} = r
              , {max: i} = r;
            return t[0] = e.create(a.x, a.y),
            t[1] = e.create(a.x, i.y),
            t[2] = e.create(i.x, a.y),
            t[3] = e.create(i.x, i.y),
            t
        },
        intersectCircle(r, t, a) {
            return r.type === n.Type.Aabb ? le.intersectAabbCircle(r.min, r.max, t, a) : le.intersectCircleCircle(r.pos, r.rad, t, a)
        },
        intersectAabb(r, t, a) {
            return r.type === n.Type.Aabb ? le.intersectAabbAabb(r.min, r.max, t, a) : le.intersectAabbCircle(t, a, r.pos, r.rad)
        },
        intersectSegment(r, t, a) {
            return r.type === n.Type.Aabb ? le.intersectSegmentAabb(t, a, r.min, r.max) : le.intersectSegmentCircle(t, a, r.pos, r.rad)
        },
        intersect(r, t) {
            return t.type === n.Type.Aabb ? n.intersectAabb(r, t.min, t.max) : n.intersectCircle(r, t.pos, t.rad)
        }
    };
    function x(r, t, a, i) {
        return i = i || {},
        {
            tier: r,
            min: t,
            max: a,
            props: i
        }
    }
    function R(r, t, a) {
        return a = a || {},
        {
            type: r,
            count: t,
            props: a
        }
    }
    function z(r) {
        const t = [];
        for (const i in r)
            r[i] && t.push({
                type: i,
                weight: r[i]
            });
        if (t.length === 0)
            throw new Error("Invalid obstacle types");
        let a = 0;
        for (let i = 0; i < t.length; i++)
            a += t[i].weight;
        return function() {
            let i = f.random(0, a)
              , o = 0;
            for (; i > t[o].weight; )
                i -= t[o].weight,
                o++;
            return t[o].type
        }
    }
    function V(r, t=16777215, a=1, i=10) {
        return {
            sprite: r,
            scale: .5,
            alpha: a,
            tint: t,
            zIdx: i
        }
    }
    function xr(r) {
        const t = {
            type: "obstacle",
            obstacleType: "barrel",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .6
            },
            collision: n.createCircle(e.create(0, 0), 1.75),
            height: .5,
            collidable: !0,
            destructible: !0,
            explosion: "explosion_barrel",
            health: 150,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !0,
                color: 6447714,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-barrel-01.img",
                scale: .4,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "barrel_bullet",
                punch: "barrel_bullet",
                explode: "barrel_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Sr(r) {
        const t = {
            type: "obstacle",
            obstacleType: "barrel",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(0, 0), 1.75),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 20,
            hitParticle: "outhouseChip",
            explodeParticle: "barrelPlank",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !0,
                color: 11235106,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-barrel-02.img",
                residue: "map-barrel-res-02.img",
                scale: .4,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_crate_bullet",
                punch: "wood_crate_bullet",
                explode: "barrel_break_02",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ma(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .9
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.8, 3.4)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 100,
            hitParticle: "clothHit",
            explodeParticle: ["woodPlank", "clothBreak"],
            reflectBullets: !1,
            loot: [],
            map: {
                display: !0,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-bed-02.img",
                residue: "map-bed-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "cloth_bullet",
                punch: "cloth_punch",
                explode: "cloth_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function kr(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(3.5, 1)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 75,
            hitParticle: "woodChip",
            explodeParticle: ["woodPlank", "book"],
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-bookshelf-01.img",
                residue: "map-drawers-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "drawers_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function zr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 1), e.create(2, 3.25)),
                    color: 3815994
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 1), e.create(2, 3.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-generic-floor-02.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, .75), e.create(2, 3.25))
                }],
                imgs: [{
                    sprite: "map-bunker-generic-ceiling-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_6",
                pos: e.create(0, -2.2),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(-2.5, 1),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(2.5, 1),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Ca(r) {
        const t = {
            type: "building",
            ori: 0,
            terrain: {},
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(-.5, 0), e.create(3.25, 2))]
                }],
                imgs: [{
                    sprite: "map-bunker-generic-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "metal_wall_ext_short_6",
                pos: e.create(2.2, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-1, 2.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-1, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: r.statue,
                pos: e.create(-1, 0),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Pa(r) {
        const t = {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(6.5, 0), e.create(4, 3))]
                }],
                imgs: [{
                    sprite: "map-bunker-statue-chamber-floor-01.img",
                    pos: e.create(3.5, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(6.5, 0), e.create(4, 3))
                }],
                imgs: [{
                    sprite: "",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(-4, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(3, 3.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(3, -3.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(12, 0),
                scale: 1,
                ori: 0
            }, {
                type: r.crate,
                pos: e.create(8.5, 0),
                scale: .75,
                ori: 0,
                inheritOri: !1
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Ie(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1.05,
                createMax: 1.2,
                destroy: 1
            },
            collision: n.createCircle(e.create(0, 0), 1.4),
            height: 10,
            collidable: !1,
            destructible: !0,
            health: 100,
            hitParticle: "leaf",
            explodeParticle: "leaf",
            reflectBullets: !1,
            isBush: !0,
            loot: [],
            map: {
                display: !0,
                color: 24320,
                scale: 1.5
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-bush-01.img",
                residue: "map-bush-res-01.img",
                scale: .5,
                alpha: .97,
                tint: 16777215,
                zIdx: 60
            },
            sound: {
                bullet: "bush_bullet",
                punch: "bush_bullet",
                explode: "bush_break_01",
                enter: "bush_enter_01"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function De(r) {
        const t = {
            type: "building",
            map: {
                displayType: "stone_01"
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            ori: 0,
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "stone_02",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function ct(r) {
        const t = {
            type: "obstacle",
            obstacleType: "crate",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.6)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 75,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-case-deagle-01.img",
                residue: "map-crate-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_crate_bullet",
                punch: "wood_crate_bullet",
                explode: "crate_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function xt(r) {
        const t = {
            type: "obstacle",
            obstacleType: "crate",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.6)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 140,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_chest", 3, 4)],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-chest-01.img",
                residue: "map-crate-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_crate_bullet",
                punch: "wood_crate_bullet",
                explode: "crate_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ct(r) {
        const t = xt({
            collision: n.createAabbExtents(e.create(0, .8), e.create(2.25, .8)),
            mapObstacleBounds: [n.createAabbExtents(e.create(0, .8), e.create(2.25, 1.6))],
            terrain: {
                river: {
                    centerWeight: 1
                }
            }
        });
        return f.mergeDeep(t, r || {})
    }
    function gt(r) {
        const t = [{
            type: "container_wall_top",
            pos: e.create(0, 7.95),
            scale: 1,
            ori: 0
        }, {
            type: "container_wall_side",
            pos: e.create(2.35, 2.1),
            scale: 1,
            ori: 0
        }, {
            type: "container_wall_side",
            pos: e.create(-2.35, 2.1),
            scale: 1,
            ori: 0
        }, {
            type: r.loot_spawner_01 || "loot_tier_2",
            pos: e.create(0, 3.25),
            scale: 1,
            ori: 0
        }, {
            type: r.loot_spawner_02 || z({
                loot_tier_1: 2,
                "": 1
            }),
            pos: e.create(0, .05),
            scale: 1,
            ori: 0
        }]
          , a = [{
            type: "container_wall_side_open",
            pos: e.create(2.35, 0),
            scale: 1,
            ori: 0
        }, {
            type: "container_wall_side_open",
            pos: e.create(-2.35, 0),
            scale: 1,
            ori: 0
        }, {
            type: "loot_tier_2",
            pos: e.create(0, -.05),
            scale: 1,
            ori: 0
        }, {
            type: z({
                loot_tier_1: 1,
                "": 1
            }),
            pos: e.create(0, .05),
            scale: 1,
            ori: 0
        }];
        return {
            type: "building",
            map: {
                display: !0,
                color: r.mapTint || 2703694,
                scale: 1,
                displayType: r.mapDisplayType
            },
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [r.open ? n.createAabbExtents(e.create(0, 0), e.create(2.5, 11)) : n.createAabbExtents(e.create(0, 0), e.create(2.5, 8))]
                }],
                imgs: [{
                    sprite: r.open ? "map-building-container-open-floor.img" : "map-building-container-floor-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: r.tint
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: r.open ? n.createAabbExtents(e.create(0, 0), e.create(2.5, 5.75)) : n.createAabbExtents(e.create(0, 2.25), e.create(2.5, 5.5)),
                    zoomOut: r.open ? n.createAabbExtents(e.create(0, 0), e.create(2.5, 11)) : n.createAabbExtents(e.create(0, -.5), e.create(2.5, 8.75))
                }],
                imgs: r.ceilingImgs || [{
                    sprite: r.ceilingSprite,
                    scale: .5,
                    alpha: 1,
                    tint: r.tint
                }]
            },
            mapObjects: r.open ? a : t
        }
    }
    function Kt(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .85
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.5, 1.5)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 125,
            hitParticle: "clothHit",
            explodeParticle: ["woodPlank", "clothBreak"],
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-couch-01.img",
                residue: "map-couch-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "cloth_bullet",
                punch: "cloth_punch",
                explode: "cloth_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function te(r) {
        const t = {
            type: "obstacle",
            obstacleType: "crate",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .5
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 2.25)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 75,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !0,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            img: {
                sprite: "map-crate-01.img",
                residue: "map-crate-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_crate_bullet",
                punch: "wood_crate_bullet",
                explode: "crate_break_02",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function qe(r) {
        const t = {
            obstacleType: "airdrop",
            dropCollision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2.5)),
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2.5)),
            airdropCrate: !0,
            scale: {
                destroy: 1
            },
            destructible: !1,
            health: 200,
            hitParticle: "barrelChip",
            explodeParticle: "airdropCrate02",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1
            },
            button: {
                interactionRad: 1,
                interactionText: "game-unlock",
                useOnce: !0,
                destroyOnUse: !0,
                useDelay: 2.5,
                useDir: e.create(-1, 0),
                useImg: "map-airdrop-04.img",
                useParticle: "airdropCrate03",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "airdrop_open_02"
            }
        };
        return f.mergeDeep(te(t), r || {})
    }
    function Ge(r) {
        const t = {
            type: "obstacle",
            obstacleType: "crate",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createCircle(e.create(0, 0), 2.1),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 150,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            img: {
                sprite: "map-class-crate-01.img",
                residue: "map-class-crate-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_crate_bullet",
                punch: "wood_crate_bullet",
                explode: "crate_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Aa(r) {
        const t = {
            type: "obstacle",
            obstacleType: "locker",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, .15), e.create(2.5, 1)),
            height: 10,
            collidable: !0,
            destructible: !0,
            health: 20,
            hitParticle: "barrelChip",
            explodeParticle: "depositBoxGreyBreak",
            reflectBullets: !0,
            loot: [x("tier_world", 1, 1)],
            lootSpawn: {
                offset: e.create(0, -1),
                speedMult: 0
            },
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-deposit-box-01.img",
                residue: "none",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "deposit_box_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Pe(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(r.hinge, r.extents),
            height: 10,
            collidable: !0,
            destructible: !0,
            health: 150,
            hitParticle: "whiteChip",
            explodeParticle: "whitePlank",
            reflectBullets: !1,
            door: {
                interactionRad: .75,
                canUse: !0,
                openSpeed: 2,
                openOneWay: 0,
                openDelay: 0,
                openOnce: !1,
                autoOpen: !1,
                autoClose: !1,
                autoCloseDelay: 1,
                slideToOpen: !1,
                slideOffset: 3.5,
                spriteAnchor: e.create(.5, 1),
                sound: {
                    open: r.soundOpen || "door_open_01",
                    close: r.soundClose || "door_close_01",
                    change: "",
                    error: ""
                }
            },
            loot: [],
            img: {
                sprite: "map-door-01.img",
                residue: "none",
                scale: .5,
                alpha: 1,
                tint: 14671839,
                zIdx: 15
            },
            sound: {
                bullet: "wall_wood_bullet",
                punch: "wall_wood_bullet",
                explode: "wall_break_01",
                enter: "none"
            }
        }
          , a = r.material;
        if (!mr[a])
            throw new Error(`Invalid material ${r.material}`);
        return f.mergeDeep(t, mr[a], r || {})
    }
    function Pt(r) {
        const t = Pe({
            material: "concrete",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                interactionRad: 2,
                openOneWay: !1,
                openSpeed: 7,
                autoOpen: !0,
                autoClose: !0,
                autoCloseDelay: 1,
                slideToOpen: !0,
                slideOffset: 3.75,
                sound: {
                    open: "door_open_03",
                    close: "door_close_03",
                    error: "door_error_01"
                },
                casingImg: {
                    sprite: "map-door-slot-01.img",
                    pos: e.create(-2, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 1316379
                }
            },
            img: {
                tint: 5373952
            }
        });
        return f.mergeDeep(t, r || {})
    }
    function Da(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, .15), e.create(2.5, 1.25)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 75,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_container", 1, 1)],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-drawers-01.img",
                residue: "map-drawers-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "drawers_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function At(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .9
            },
            collision: n.createAabbExtents(e.create(0, .2), e.create(2.25, .7)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 50,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            lootSpawn: {
                offset: e.create(0, -1),
                speedMult: 0
            },
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-gun-mount-01.img",
                residue: "map-drawers-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "barrel_break_02",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function vr(r) {
        const t = {
            type: "obstacle",
            obstacleType: "locker",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, .15), e.create(1.5, .6)),
            height: 10,
            collidable: !0,
            destructible: !0,
            health: 20,
            hitParticle: "barrelChip",
            explodeParticle: "lockerBreak",
            reflectBullets: !0,
            loot: [x("tier_world", 1, 1)],
            lootSpawn: {
                offset: e.create(0, -1),
                speedMult: 0
            },
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-locker-01.img",
                residue: "",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "deposit_box_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ve(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(1, 1)),
            height: .5,
            collidable: !0,
            destructible: !0,
            explosion: "explosion_barrel",
            health: 250,
            hitParticle: "barrelChip",
            explodeParticle: "depositBoxGreyBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-power-box-01.img",
                residue: "",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "deposit_box_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Oa(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, .15), e.create(1.7, 1.3)),
            height: .5,
            collidable: !0,
            destructible: !0,
            explosion: "explosion_barrel",
            health: 200,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1,
                color: 14935011,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-oven-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "barrel_bullet",
                punch: "barrel_bullet",
                explode: "oven_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function ft(r) {
        const t = {
            type: "obstacle",
            obstacleType: "pot",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 4.25)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 100,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !0,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            img: {
                sprite: "map-planter-01.img",
                residue: "map-planter-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "toilet_porc_bullet",
                punch: "toilet_porc_bullet",
                explode: "ceramic_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ze(r) {
        const t = {
            type: "obstacle",
            obstacleType: "pot",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(0, 0), 1.5),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 50,
            hitParticle: "potChip",
            explodeParticle: "potBreak",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !0,
                color: 6697728,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-pot-01.img",
                residue: "map-pot-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "toilet_porc_bullet",
                punch: "toilet_porc_bullet",
                explode: "toilet_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function nt(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.5, .5)),
            height: .3,
            collidable: !0,
            destructible: !1,
            health: 50,
            hitParticle: "bottleBlueChip",
            explodeParticle: "bottleBlueBreak",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !0,
                color: 6697728,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-bottle-02.img",
                residue: "none",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            },
            button: {
                interactionRad: 1.25,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(-1, 0),
                useImg: "map-bottle-03.img",
                sound: {
                    on: "button_press_01",
                    off: "button_press_01"
                }
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ir(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(0, 0), 1.1),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 100,
            hitParticle: "potatoChip",
            explodeParticle: "potatoBreak",
            reflectBullets: !1,
            swapWeaponOnDestroy: !0,
            regrow: !0,
            regrowTimer: 60,
            loot: [x("tier_potato_perks", 1, 1)],
            map: {
                display: !1,
                color: 9466197,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            img: {
                sprite: "map-potato-01.img",
                residue: "map-potato-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "organic_hit",
                punch: "organic_hit",
                explode: "pumpkin_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function er(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(0, 0), 1.9),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 100,
            reflectBullets: !1,
            isDecalAnchor: !0,
            hitParticle: "pumpkinChip",
            explodeParticle: "pumpkinBreak",
            loot: [x("tier_outfits", 1, 1)],
            map: {
                display: !0,
                color: 15889667,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0
            },
            img: {
                sprite: "map-pumpkin-01.img",
                residue: "map-pumpkin-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "organic_hit",
                punch: "organic_hit",
                explode: "pumpkin_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Fe(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.9, 1.5)),
            height: .5,
            collidable: !0,
            destructible: !1,
            explosion: "explosion_barrel",
            health: 250,
            hitParticle: "barrelChip",
            explodeParticle: "depositBoxGreyBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-recorder-01.img",
                residue: "",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 9
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "deposit_box_break_01",
                enter: "none"
            },
            button: {
                interactionRad: .2,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(-1, 0),
                useImg: "map-recorder-02.img",
                sound: {
                    on: "",
                    off: ""
                }
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ea(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, .15), e.create(1.7, 1.25)),
            height: .5,
            collidable: !0,
            destructible: !1,
            health: 100,
            hitParticle: "redChip",
            explodeParticle: "woodPlank",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1,
                color: 7733259,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-refrigerator-01.img",
                residue: "map-crate-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "barrel_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ba(r) {
        const t = {
            type: "obstacle",
            map: {
                display: !0,
                color: 13278307,
                scale: 1
            },
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .5
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(3.1, 1.4)),
            height: .5,
            collidable: !0,
            destructible: !1,
            health: 150,
            hitParticle: "goldChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !1,
            loot: [],
            img: {
                sprite: "map-sandbags-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wall_brick_bullet",
                punch: "wall_brick_bullet",
                explode: "crate_break_02",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ra(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createCircle(e.create(0, 0), 7.75),
            height: 10,
            collidable: !0,
            destructible: !1,
            health: 300,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !0,
                color: 4079166,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-silo-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "silo_bullet",
                punch: "silo_bullet",
                explode: "barrel_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Me(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1.2,
                destroy: .5
            },
            collision: n.createCircle(e.create(0, 0), 1.6),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 250,
            reflectBullets: !1,
            hitParticle: "rockChip",
            explodeParticle: "rockBreak",
            loot: [],
            map: {
                display: !0,
                color: 11776947,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0
            },
            img: {
                sprite: "map-stone-01.img",
                residue: "map-stone-res-01.img",
                scale: .4,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "stone_bullet",
                punch: "stone_bullet",
                explode: "stone_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Dt(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: .8,
                createMax: 1.2,
                destroy: .5
            },
            collision: n.createCircle(e.create(0, 0), 2.9),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 500,
            reflectBullets: !1,
            hitParticle: "rockChip",
            explodeParticle: "rockBreak",
            loot: [],
            map: {
                display: !0,
                color: 5197647,
                scale: 1
            },
            terrain: {
                grass: !1,
                beach: !1,
                river: {
                    centerWeight: .5
                },
                riverShore: !1
            },
            img: {
                sprite: "map-stone-03.img",
                residue: "map-stone-res-02.img",
                scale: .4,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "stone_bullet",
                punch: "stone_bullet",
                explode: "stone_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function yt(r) {
        const t = {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2)),
            height: .5,
            collidable: !1,
            destructible: !0,
            health: 100,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-table-01.img",
                residue: "map-table-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 60
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "crate_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ot(r) {
        const t = {
            type: "obstacle",
            obstacleType: "toilet",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(0, .25), 1.18),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 100,
            reflectBullets: !1,
            hitParticle: "whiteChip",
            explodeParticle: "toiletBreak",
            loot: [x("tier_toilet", 2, 3)],
            map: {
                display: !1,
                color: 11776947,
                scale: 1
            },
            img: {
                sprite: "map-toilet-01.img",
                residue: "map-toilet-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "toilet_porc_bullet",
                punch: "toilet_porc_bullet",
                explode: "toilet_break_01",
                enter: "none"
            },
            terrain: {
                grass: !0,
                beach: !1
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function ce(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: .8,
                createMax: 1,
                destroy: .5
            },
            collision: n.createCircle(e.create(0, 0), 1.55),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(5.75, 5.75)),
            height: 10,
            collidable: !0,
            destructible: !0,
            health: 175,
            hitParticle: "woodChip",
            explodeParticle: "woodLog",
            reflectBullets: !1,
            isTree: !0,
            loot: [],
            map: {
                display: !0,
                color: 4083758,
                scale: 2.5
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-tree-03.img",
                residue: "map-tree-res-01.img",
                scale: .7,
                alpha: 1,
                tint: 16777215,
                zIdx: 800
            },
            sound: {
                bullet: "tree_bullet",
                punch: "tree_bullet",
                explode: "tree_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Tr(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createCircle(e.create(0, 0), 1.6),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(5.75, 5.75)),
            button: {
                interactionRad: .2,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(-1, 0),
                useImg: "map-tree-switch-04.img",
                sound: {
                    on: "button_press_01",
                    off: "button_press_01"
                }
            },
            height: .5,
            collidable: !0,
            destructible: !1,
            health: 175,
            hitParticle: "woodChip",
            explodeParticle: "woodLog",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 8602624,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-tree-switch-01.img",
                residue: "map-tree-res-01.img",
                scale: .5,
                alpha: 1,
                zIdx: 10,
                tint: 16777215
            },
            sound: {
                bullet: "tree_bullet",
                punch: "tree_bullet",
                explode: "tree_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function v(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.copy(r.extents)),
            height: 10,
            isWall: !0,
            collidable: !0,
            destructible: !0,
            health: r.health || 150,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1
            },
            img: {},
            sound: {
                bullet: "wall_bullet",
                punch: "wall_bullet",
                explode: "barrel_break_01",
                enter: "none"
            }
        }
          , a = r.material;
        if (!mr[a])
            throw new Error(`Invalid material ${r.material}`);
        return f.mergeDeep(t, mr[a], r || {})
    }
    function Mr(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createCircle(e.create(0, 2.3), 4.6),
            height: 10,
            collidable: !0,
            destructible: !1,
            health: 300,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1,
                color: 6310464,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-wheel-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "silo_bullet",
                punch: "silo_bullet",
                explode: "barrel_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function La(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 150,
            hitParticle: "woodChip",
            explodeParticle: "woodLog",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 9455616,
                scale: .875
            },
            terrain: {},
            img: {
                sprite: "map-woodpile-01.img",
                residue: "map-woodpile-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "tree_bullet",
                punch: "tree_bullet",
                explode: "tree_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Cr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(-16, 7), e.create(10.75, 11)),
                    color: 7820585
                }, {
                    collider: n.createAabbExtents(e.create(6, 0), e.create(11.5, 18.25)),
                    color: 9989427
                }, {
                    collider: n.createAabbExtents(e.create(22, 4), e.create(4.5, 7.5)),
                    color: 7820585
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(6, -1), e.create(11.25, 18.25)), n.createAabbExtents(e.create(21.5, 4), e.create(4.75, 7.25))]
                }],
                imgs: [{
                    sprite: "map-building-bank-floor-01.img",
                    pos: e.create(0, 6.96),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-bank-floor-02.img",
                    pos: e.create(9.5, -12.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(6, -1), e.create(11.25, 18.25))
                }, {
                    zoomIn: n.createAabbExtents(e.create(21.5, 4), e.create(4.75, 7.25))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-15, 6), e.create(10.75, 11)),
                    zoomOut: n.createAabbExtents(e.create(6, 1.25), e.create(15.25, 20))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-bank-ceiling-01.img",
                    pos: e.create(-16, 7),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-bank-ceiling-02.img",
                    pos: e.create(6, 0),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-bank-ceiling-03.img",
                    pos: e.create(22, 8),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "brick_wall_ext_23",
                pos: e.create(-14, 17),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_23",
                pos: e.create(-25.9, 6),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_20",
                pos: e.create(-15.5, -5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-5, -7),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(-5, -16.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(-2.5, -19),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(6, -19),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(14.5, -19),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(17, -16.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(17, -6),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(1, -19.25),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(11, -19.25),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-5.25, -13.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(17.25, -13.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_9",
                pos: e.create(22, -3),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_15",
                pos: e.create(26, 4),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_9",
                pos: e.create(22, 11),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(17, 14),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(14.5, 17),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(4.5, 17),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-1, 17.25),
                scale: 1,
                ori: 1
            }, {
                type: r.vault || "vault_01",
                pos: e.create(-12, 6),
                scale: 1,
                ori: 0
            }, {
                type: "bank_wall_int_4",
                pos: e.create(-2.5, -5),
                scale: 1,
                ori: 1
            }, {
                type: "bank_window_01",
                pos: e.create(1, -5),
                scale: 1,
                ori: 1
            }, {
                type: "bank_wall_int_3",
                pos: e.create(4, -5),
                scale: 1,
                ori: 1
            }, {
                type: "bank_wall_int_4",
                pos: e.create(6, -3.5),
                scale: 1,
                ori: 0
            }, {
                type: "bank_window_01",
                pos: e.create(6, 0),
                scale: 1,
                ori: 0
            }, {
                type: "bank_wall_int_4",
                pos: e.create(6, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "bank_wall_int_4",
                pos: e.create(8.5, 5),
                scale: 1,
                ori: 1
            }, {
                type: "bank_window_01",
                pos: e.create(12, 5),
                scale: 1,
                ori: 1
            }, {
                type: "bank_wall_int_3",
                pos: e.create(15, 5),
                scale: 1,
                ori: 1
            }, {
                type: "bank_wall_int_5",
                pos: e.create(17, 4),
                scale: 1,
                ori: 0
            }, {
                type: "bank_wall_int_8",
                pos: e.create(21.5, 4),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(17, -2.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(17, 10.5),
                scale: 1,
                ori: 2
            }, {
                type: "house_door_01",
                pos: e.create(12.5, 17.25),
                scale: 1,
                ori: 1
            }, {
                type: "vending_01",
                pos: e.create(4.5, -16.9),
                scale: 1,
                ori: 2
            }, {
                type: "stand_01",
                pos: e.create(7.65, -17),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(23.5, .5),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(23.5, 7.5),
                scale: 1,
                ori: 3
            }, {
                type: "stand_01",
                pos: e.create(15, 15),
                scale: 1,
                ori: 3
            }, {
                type: "fire_ext_01",
                pos: e.create(4.5, 16.15),
                scale: 1,
                ori: 3
            }, {
                type: "bush_02",
                pos: e.create(-2.5, -16.25),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "bush_02",
                pos: e.create(14.5, -16.25),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(19.75, 13.75),
                scale: .9,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    loot_tier_1: 1
                }),
                pos: e.create(12, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(1, 0),
                scale: 1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(-16.5, -12.5),
                scale: 1.1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-7.5, -7.25),
                scale: .85,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(21, -7),
                scale: .55,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(21, -16.25),
                scale: .55,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function qa(r) {
        const t = {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(-3.5, 0), e.create(10, 10.5))]
                }],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-3.5, 0), e.create(9.25, 10.5)),
                    zoomOut: n.createAabbExtents(e.create(-3.5, 0), e.create(10, 10.5))
                }],
                vision: {
                    dist: 7.25,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-vault-ceiling.img",
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thick_20",
                pos: e.create(-12.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thick_20",
                pos: e.create(-3.5, -9.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thick_20",
                pos: e.create(-3.5, 9.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thick_6",
                pos: e.create(5.5, -6.45),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thick_6",
                pos: e.create(5.5, 6.45),
                scale: 1,
                ori: 0
            }, {
                type: "vault_door_main",
                pos: e.create(6.5, 3.5),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    deposit_box_01: 3,
                    deposit_box_02: r.gold_box || 1
                }),
                pos: e.create(-12.3, 5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    deposit_box_01: 3,
                    deposit_box_02: r.gold_box || 1
                }),
                pos: e.create(-12.3, -5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    deposit_box_01: 3,
                    deposit_box_02: r.gold_box || 1
                }),
                pos: e.create(-8, 9.3),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    deposit_box_01: 3,
                    deposit_box_02: r.gold_box || 1
                }),
                pos: e.create(-8, -9.3),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    deposit_box_01: 3,
                    deposit_box_02: r.gold_box || 1
                }),
                pos: e.create(1, 9.3),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    deposit_box_01: 3,
                    deposit_box_02: r.gold_box || 1
                }),
                pos: e.create(1, -9.3),
                scale: 1,
                ori: 2
            }, {
                type: "crate_05",
                pos: e.create(-3.5, 6.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_05",
                pos: e.create(-3.5, -6.5),
                scale: 1,
                ori: 2
            }, {
                type: r.floor_loot || z({
                    loot_tier_vault_floor: 1
                }),
                pos: e.create(-3.5, 0),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Et(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 12), e.create(5, 2)),
                    color: 12300935
                }, {
                    collider: n.createAabbExtents(e.create(0, -2), e.create(24.5, 12.8)),
                    color: 3816739
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, -2), e.create(28, 16.5)), n.createAabbExtents(e.create(0, 14), e.create(7, 5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "house",
                    collision: [n.createAabbExtents(e.create(0, -2), e.create(25, 13.2)), n.createAabbExtents(e.create(0, 12), e.create(5.5, 2.5))]
                }],
                imgs: [{
                    sprite: "map-building-barn-floor-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, -2), e.create(24.5, 12.8))
                }, {
                    zoomIn: n.createAabbExtents(e.create(0, 12), e.create(5.5, 2.5)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(5.5, 18.5))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-barn-ceiling-01.img",
                    pos: e.create(0, -2),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-barn-ceiling-02.img",
                    pos: e.create(0, 13.2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "brick_wall_ext_4",
                pos: e.create(-24.5, 9),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3",
                pos: e.create(-22.5, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_12",
                pos: e.create(-24.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(-24.5, -13),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3",
                pos: e.create(-22.5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-24.75, 5.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-24.75, -9.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-19.5, 10.75),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-19.5, -14.75),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_16",
                pos: e.create(-10, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_16",
                pos: e.create(10, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_16",
                pos: e.create(-10, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(-5.5, 13),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(5.5, 13),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3",
                pos: e.create(-3.5, 14.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_3",
                pos: e.create(3.5, 14.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(9.5, -14.75),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(2, 14.75),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-2, -14.75),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(24.5, 9),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3",
                pos: e.create(22.5, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_13",
                pos: e.create(17.5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_19",
                pos: e.create(24.5, -5.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_1",
                pos: e.create(23.5, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(24.75, 5.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(19.5, 10.75),
                scale: 1,
                ori: 1
            }, {
                type: r.bonus_room || "panicroom_01",
                pos: e.create(19.5, -8),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_6",
                pos: e.create(-21, .5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_6",
                pos: e.create(-21, -4.5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_5",
                pos: e.create(-11.5, .5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_2",
                pos: e.create(-13, -4.5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_7",
                pos: e.create(-6.5, -4.5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_8",
                pos: e.create(-11.5, -10),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_8",
                pos: e.create(-7.5, 6),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_5",
                pos: e.create(-3.5, -11.5),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_7",
                pos: e.create(10.5, .5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_5",
                pos: e.create(14.5, 7.5),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_13",
                pos: e.create(14.5, -7.5),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_4",
                pos: e.create(17, -1.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-18, -4.5),
                scale: 1,
                ori: 3
            }, {
                type: "house_door_01",
                pos: e.create(-18, .5),
                scale: 1,
                ori: 3
            }, {
                type: "house_door_01",
                pos: e.create(-3.5, -5),
                scale: 1,
                ori: 2
            }, {
                type: "house_door_01",
                pos: e.create(14.5, 1),
                scale: 1,
                ori: 0
            }, {
                type: r.bonus_door,
                pos: e.create(23, -1.5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_column_1",
                pos: e.create(-8, 1),
                scale: 1,
                ori: 0
            }, {
                type: "barn_column_1",
                pos: e.create(-11, -5),
                scale: 1,
                ori: 0
            }, {
                type: "barn_column_1",
                pos: e.create(15, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(-7.5, -12),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(-12.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(-5.5, 7.25),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(-13.5, -9.5),
                scale: 1,
                ori: 3
            }, {
                type: "stand_01",
                pos: e.create(16.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "stand_01",
                pos: e.create(3.5, 12.5),
                scale: 1,
                ori: 3
            }, {
                type: "table_01",
                pos: e.create(8, -8),
                scale: 1,
                ori: 0
            }, {
                type: "oven_01",
                pos: e.create(12.25, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: "refrigerator_01",
                pos: e.create(8.75, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: "bush_02",
                pos: e.create(-22, -2),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "bush_02",
                pos: e.create(12, 8),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(-19, -9.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(-19, 5.5),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_1",
                pos: e.create(0, 5.5),
                scale: 1,
                ori: 0
            }, {
                type: r.porch_01 || "",
                pos: e.create(-4, 17),
                scale: .9,
                ori: 2
            }, {
                type: r.porch_01 || "",
                pos: e.create(4, 17),
                scale: .9,
                ori: 2
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Fa(r) {
        const t = {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(-3, 0), e.create(12, 7)), n.createAabbExtents(e.create(12, -3.5), e.create(3, 2))]
                }],
                imgs: [{
                    sprite: "map-building-barn-basement-floor-01.img",
                    pos: e.create(5.5, -.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(2, 0), e.create(6, 7))
                }, {
                    zoomIn: n.createAabbExtents(e.create(11, -3.5), e.create(3.5, 2))
                }],
                imgs: [{
                    sprite: "map-building-barn-basement-ceiling-01.img",
                    pos: e.create(5, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            mapObjects: [{
                type: "house_door_02",
                pos: e.create(13.5, 7),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(12.5, 6),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_thicker_11",
                pos: e.create(15, 0),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_column_5x10",
                pos: e.create(7, 2.5),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_thicker_21",
                pos: e.create(-6, 6),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_thicker_13",
                pos: e.create(-15, -2),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_thicker_30",
                pos: e.create(1.5, -7),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_3",
                pos: e.create(-4, 3),
                scale: 1,
                ori: 0
            }, {
                type: "stone_wall_int_4",
                pos: e.create(-4, -.5),
                scale: 1,
                ori: 2
            }, {
                type: "concrete_wall_ext_3",
                pos: e.create(-4, -4),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_sledgehammer",
                pos: e.create(.5, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "bookshelf_01",
                pos: e.create(1, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: r.basement || "barn_basement_floor_02",
                pos: e.create(-8, 0),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function ja(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(31.5, 8)),
                    color: 5197647
                }, {
                    collider: n.createAabbExtents(e.create(-14, -9.5), e.create(2.5, 1.5)),
                    color: 3618615
                }, {
                    collider: n.createAabbExtents(e.create(14, -9.5), e.create(2.5, 1.5)),
                    color: 3618615
                }, {
                    collider: n.createAabbExtents(e.create(-14, 9.5), e.create(2.5, 1.5)),
                    color: 3618615
                }, {
                    collider: n.createAabbExtents(e.create(14, 9.5), e.create(2.5, 1.5)),
                    color: 3618615
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(31.5, 8))]
                }],
                imgs: [{
                    sprite: "map-building-bridge-lg-floor.img",
                    pos: e.create(-15.75, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-bridge-lg-floor.img",
                    pos: e.create(15.75, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2,
                    mirrorY: !0
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(16.5, 7))
                }],
                vision: {
                    dist: 10
                },
                imgs: [{
                    sprite: "map-building-bridge-lg-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "bridge_rail_12",
                pos: e.create(-22.5, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_12",
                pos: e.create(-22.5, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_12",
                pos: e.create(22.5, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_12",
                pos: e.create(22.5, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_column_5x4",
                pos: e.create(-14, -9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_column_5x4",
                pos: e.create(-14, 9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_column_5x4",
                pos: e.create(14, -9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_column_5x4",
                pos: e.create(14, 9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_5",
                pos: e.create(-9, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_5",
                pos: e.create(-9, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_5",
                pos: e.create(9, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_5",
                pos: e.create(9, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_3",
                pos: e.create(-5, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_3",
                pos: e.create(-5, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_3",
                pos: e.create(5, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_3",
                pos: e.create(5, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_7",
                pos: e.create(0, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_7",
                pos: e.create(0, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    loot_tier_1: 2,
                    "": 1
                }),
                pos: e.create(-22, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 2,
                    "": 1
                }),
                pos: e.create(22, 0),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(-14, 2.75),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(-10, 5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(0, 4.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(0, -4.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(10, -5),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(14, -2.75),
                scale: 1,
                ori: 1
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Pr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, .5), e.create(18, 12)),
                    color: 3823128
                }, {
                    collider: n.createAabbExtents(e.create(0, -13), e.create(17, 2)),
                    color: 6368528
                }]
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0,
                nearbyRiver: {
                    radMin: .75,
                    radMax: 1.5,
                    facingOri: 1
                }
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "house",
                    collision: [n.createAabbExtents(e.create(0, -1.5), e.create(18, 14))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(4, -14), e.create(3, 2.5)), n.createAabbExtents(e.create(-4, 13.5), e.create(2, 1))]
                }],
                imgs: [{
                    sprite: "map-building-cabin-floor.img",
                    pos: e.create(0, -1),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, .5), e.create(19, 12)),
                    zoomOut: n.createAabbExtents(e.create(0, .5), e.create(21, 14))
                }, {
                    zoomIn: n.createAabbExtents(e.create(4, -13), e.create(3, 2))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                damage: {
                    obstacleCount: 1
                },
                imgs: [{
                    sprite: "map-building-cabin-ceiling-01a.img",
                    pos: e.create(0, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-cabin-ceiling-01b.img",
                    pos: e.create(4, -13),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-chimney-01.img",
                    pos: e.create(13, 2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    removeOnDamaged: !0
                }]
            },
            occupiedEmitters: [{
                type: "cabin_smoke_parent",
                pos: e.create(0, 0),
                rot: 0,
                scale: 1,
                layer: 0,
                parentToCeiling: !0
            }],
            mapObjects: [{
                type: "brick_wall_ext_12",
                pos: e.create(-12, 12),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-2, 12.25),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_12",
                pos: e.create(4, 12),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(11.5, 12.25),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(15.5, 12),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(-18.5, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-18.75, 5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(-18.5, .5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-18.75, -4),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(-18.5, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-15.5, -11),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-11.5, -11.25),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_12",
                pos: e.create(-4, -11),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(2, -11.25),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_12",
                pos: e.create(12, -11),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_15",
                pos: e.create(18.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(18.75, -4),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(18.5, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.cabin_wall_int_5 || "cabin_wall_int_5",
                pos: e.create(-10.5, 9),
                scale: 1,
                ori: 0
            }, {
                type: r.cabin_wall_int_10 || "cabin_wall_int_10",
                pos: e.create(-13, 2),
                scale: 1,
                ori: 1
            }, {
                type: r.cabin_wall_int_13 || "cabin_wall_int_13",
                pos: e.create(-3.5, -4),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(-10.5, 2.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(-4, 2),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(-16, 9),
                scale: 1,
                ori: 0
            }, {
                type: "stand_01",
                pos: e.create(-12.5, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(-15, 0),
                scale: 1,
                ori: 0
            }, {
                type: "pot_01",
                pos: e.create(-16, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "bed_lg_01",
                pos: e.create(-7, -6.75),
                scale: 1,
                ori: 2
            }, {
                type: r.cabin_mount || z({
                    gun_mount_01: 50,
                    gun_mount_05: 50,
                    gun_mount_04: 10,
                    gun_mount_02: 10,
                    gun_mount_03: 1
                }),
                pos: e.create(4, 10.65),
                scale: 1,
                ori: 0
            }, {
                type: "table_01",
                pos: e.create(4, 6.5),
                scale: 1,
                ori: 0
            }, {
                type: "stove_01",
                pos: e.create(13, 2),
                scale: 1,
                ori: 3
            }, {
                type: "woodpile_01",
                pos: e.create(13, -3),
                scale: 1,
                ori: 0
            }, {
                type: "pot_01",
                pos: e.create(16, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: "pot_01",
                pos: e.create(16, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.porch_01 || "",
                pos: e.create(-1, -13.5),
                scale: .9,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Bt(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(7, 7)),
                    color: 15181895
                }, {
                    collider: n.createAabbExtents(e.create(0, -18.9), e.create(2, 12)),
                    color: 6171907
                }]
            },
            terrain: {
                waterEdge: {
                    dir: e.create(0, 1),
                    distMin: -8.5,
                    distMax: 0
                }
            },
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(7, 7)), n.createAabbExtents(e.create(0, -18.9), e.create(2, 12))]
                }],
                imgs: [{
                    sprite: "map-building-hut-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-hut-floor-02.img",
                    pos: e.create(0, -18.9),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(6, 6))
                }],
                vision: {
                    width: 4
                },
                imgs: [{
                    sprite: r.ceilingImg || "map-building-hut-ceiling-01.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }],
                destroy: {
                    wallCount: 2,
                    particle: "hutBreak",
                    particleCount: 25,
                    residue: "map-hut-res-01.img"
                }
            },
            mapObjects: [{
                type: "hut_wall_int_4",
                pos: e.create(-4, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "hut_wall_int_4",
                pos: e.create(4, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "hut_wall_int_5",
                pos: e.create(-6.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "hut_window_open_01",
                pos: e.create(-6.75, .5),
                scale: 1,
                ori: 0
            }, {
                type: "hut_wall_int_6",
                pos: e.create(-6.5, -4),
                scale: 1,
                ori: 0
            }, {
                type: "hut_wall_int_12",
                pos: e.create(0, 6.5),
                scale: 1,
                ori: 1
            }, {
                type: "hut_wall_int_14",
                pos: e.create(6.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    pot_01: 2,
                    "": 1
                }),
                pos: e.create(4.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    pot_01: 2,
                    "": 1
                }),
                pos: e.create(4.5, -4.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    pot_01: 2,
                    "": 1
                }),
                pos: e.create(-4.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    pot_01: 2,
                    "": 1
                }),
                pos: e.create(-4.5, -4.5),
                scale: 1,
                ori: 0
            }, {
                type: r.specialLoot || "pot_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Ar(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(-7.75, 3), e.create(1, 2)),
                    color: 6171907
                }, {
                    collider: n.createAabbExtents(e.create(5, -4.75), e.create(2, 1)),
                    color: 6171907
                }, {
                    collider: n.createAabbExtents(e.create(1, 1.5), e.create(8, 5.5)),
                    color: 3754050
                }, {
                    collider: n.createAabbExtents(e.create(-10.65, 7), e.create(2, 12)),
                    color: 6171907
                }]
            },
            terrain: {},
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(1, 1.5), e.create(8, 5.5)), n.createAabbExtents(e.create(-10.65, 7), e.create(2, 12)), n.createAabbExtents(e.create(-7.75, 3), e.create(1, 2)), n.createAabbExtents(e.create(5, -4.75), e.create(2, 1))]
                }],
                imgs: [{
                    sprite: "map-building-shack-floor-03.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-hut-floor-02.img",
                    pos: e.create(-10.65, 7),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(1, 1.5), e.create(7.75, 5.25))
                }],
                vision: {
                    width: 4
                },
                imgs: [{
                    sprite: "map-building-shack-ceiling-03.img",
                    pos: e.create(.5, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 10461087
                }],
                destroy: {
                    wallCount: 3,
                    particle: "shackGreenBreak",
                    particleCount: 30,
                    residue: "map-shack-res-03.img"
                }
            },
            bridgeLandBounds: [n.createAabbExtents(e.create(-1.75, -4.25), e.create(11.25, 4.75))],
            bridgeWaterBounds: [n.createAabbExtents(e.create(-10.5, 15.5), e.create(3.5, 6))],
            mapObjects: [{
                type: "shack_wall_ext_2",
                pos: e.create(-6.5, 6),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_ext_14",
                pos: e.create(1, 6.5),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_ext_10",
                pos: e.create(8.5, 2),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_ext_2",
                pos: e.create(8, -3.5),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_ext_9",
                pos: e.create(-1.5, -3.5),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_ext_5",
                pos: e.create(-6.5, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: "pot_01",
                pos: e.create(-4.25, -1.25),
                scale: 1,
                ori: 0
            }, {
                type: "pot_01",
                pos: e.create(-1.25, -1.25),
                scale: 1,
                ori: 0
            }, {
                type: "table_01",
                pos: e.create(5.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-4.75, -5.75),
                scale: .9,
                ori: 0
            }, {
                type: "crate_20",
                pos: e.create(-1, -5.75),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_leaf_pile",
                pos: e.create(-10.65, 16),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Ua(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                color: 1995644,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(15, 25)), n.createAabbExtents(e.create(-15, 9), e.create(2.5, 4.5)), n.createAabbExtents(e.create(17.5, -7), e.create(4.5, 2.5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(13, 20))]
                }, {
                    type: "house",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(2, 20))]
                }],
                imgs: r.floor_images || [{
                    sprite: "map-building-greenhouse-floor-01.img",
                    pos: e.create(0, 10),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-greenhouse-floor-01.img",
                    pos: e.create(0, -10),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(0, 21),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(0, -21),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(12.5, 19.5)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(14, 22))
                }],
                vision: {
                    dist: 7.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: r.ceiling_images || [{
                    sprite: "map-building-greenhouse-ceiling-01.img",
                    pos: e.create(0, -9.85),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-greenhouse-ceiling-01.img",
                    pos: e.create(0, 9.85),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215,
                    mirrorY: !0
                }],
                destroy: {
                    wallCount: 7,
                    particle: "greenhouseBreak",
                    particleCount: 60,
                    residue: "",
                    sound: "ceiling_break_02"
                }
            },
            mapObjects: [{
                type: "glass_wall_10",
                pos: e.create(-7, 19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(-7, -19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, 15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, -15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(7, 19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(7, -19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, 15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, -15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_05",
                pos: e.create(2, 19.75),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_05",
                pos: e.create(-2, -19.75),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(-4.5, 14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(-7, 2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(-7, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(-4.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(4.5, 14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(7, 2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(7, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_01: 1,
                    planter_02: 1,
                    planter_03: 1
                }),
                pos: e.create(4.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-15, 11),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(-15, 7),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(15.5, -7),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(19.5, -7),
                scale: .9,
                ori: 0
            }, {
                type: "bunker_structure_08",
                pos: e.create(-9.5, -15.5),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Wa(r) {
        const t = {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            ori: 0,
            mapObstacleBounds: [n.createAabbExtents(e.create(5, 5), e.create(15, 15))],
            layers: [{
                type: "bunker_chrys_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: r.bunkerType || "bunker_chrys_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(10.5, -12.25), e.create(15, 9.5)), n.createAabbExtents(e.create(40, 20), e.create(14.45, 35))]
        };
        return f.mergeDeep(t, r || {})
    }
    function Dr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 10
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, -4), e.create(55, 50))],
            bridgeLandBounds: [n.createAabbExtents(e.create(0, -4), e.create(55, 50))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, 0), e.create(55, 55)),
                color: r.groundTintLt || 5195792,
                roughness: .05,
                offsetDist: .5
            }, {
                bound: n.createAabbExtents(e.create(-28.5, 7), e.create(7, 5)),
                color: r.groundTintDk || 5986827,
                roughness: .05,
                offsetDist: .5
            }, {
                bound: n.createAabbExtents(e.create(-24.5, -35), e.create(5.5, 4.5)),
                color: r.groundTintDk || 5986827,
                roughness: .05,
                offsetDist: .5
            }, {
                bound: n.createAabbExtents(e.create(20, 10), e.create(20, 30)),
                color: r.groundTintDk || 5986827,
                roughness: .05,
                offsetDist: .5
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(55, 55))]
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "container_04",
                pos: e.create(3.75, 14),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-1.35, 10.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-6, 12.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-2, 14.5),
                scale: .9,
                ori: 0
            }, {
                type: "warehouse_02",
                pos: e.create(20, 10),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(35, 24.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(35, 29),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(39.75, 27),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_07",
                pos: e.create(47, 13),
                scale: 1,
                ori: 0
            }, {
                type: "tree_02",
                pos: e.create(50.5, 9.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bunker_structure_06",
                pos: e.create(38, -12.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(21, -32),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(21, -37.5),
                scale: 1,
                ori: 3
            }, {
                type: "tree_07",
                pos: e.create(45.5, -31.5),
                scale: 1,
                ori: 0
            }, {
                type: "tree_07",
                pos: e.create(40.5, -36.5),
                scale: 1.1,
                ori: 0
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(21.75, -50),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(26.75, -49),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_02",
                pos: e.create(44.5, -50.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_09",
                pos: e.create(-9, 34),
                scale: 1,
                ori: 0
            }, {
                type: "tree_02",
                pos: e.create(-13.5, 35.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_09",
                pos: e.create(-16.5, 32),
                scale: 1,
                ori: 3
            }, {
                type: "tree_09",
                pos: e.create(-20, 36),
                scale: 1,
                ori: 2
            }, {
                type: "tree_09",
                pos: e.create(-24.5, 33),
                scale: 1,
                ori: 3
            }, {
                type: "tree_09",
                pos: e.create(-31.5, 37),
                scale: 1,
                ori: 2
            }, {
                type: "tree_09",
                pos: e.create(-32.5, 32),
                scale: 1,
                ori: 1
            }, {
                type: "tree_09",
                pos: e.create(-40, 35.5),
                scale: 1,
                ori: 1
            }, {
                type: "tree_09",
                pos: e.create(-44.5, 32.5),
                scale: 1,
                ori: 3
            }, {
                type: "woodpile_02",
                pos: e.create(-33.5, 23.5),
                scale: 1,
                ori: 0
            }, {
                type: "woodpile_02",
                pos: e.create(-42.75, 21.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-30.5, 9),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    chest_02: 1,
                    case_04: 1
                }),
                pos: e.create(-30.5, 4.75),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-25.75, 7),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "woodpile_02",
                pos: e.create(-14.5, .5),
                scale: 1,
                ori: 1
            }, {
                type: "woodpile_02",
                pos: e.create(-21, -8.75),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-36.5, -9),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-34, -11.5),
                scale: .9,
                ori: 0
            }, {
                type: "outhouse_01",
                pos: e.create(-48.5, -5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    outhouse_01: 5,
                    outhouse_02: 1
                }),
                pos: e.create(-48.5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "woodpile_01",
                pos: e.create(-51, -20.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-26.75, -36),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-22, -34),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_09",
                pos: e.create(-14.5, -20),
                scale: 1,
                ori: 1
            }, {
                type: "tree_09",
                pos: e.create(-11.5, -23),
                scale: 1,
                ori: 2
            }, {
                type: "tree_09",
                pos: e.create(-15.5, -24),
                scale: 1,
                ori: 0
            }, {
                type: "woodpile_02",
                pos: e.create(-37, -34),
                scale: 1,
                ori: 1
            }, {
                type: "woodpile_02",
                pos: e.create(-31, -47),
                scale: 1,
                ori: 0
            }, {
                type: "woodpile_02",
                pos: e.create(-18.75, -45.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-2.5, -35.75),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(.75, -37.5),
                scale: .9,
                ori: 0
            }, {
                type: "tree_07",
                pos: e.create(1, -33),
                scale: 1.2,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Or(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 10
            },
            mapObstacleBounds: [n.createCircle(e.create(0, 0), 40)],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(5, 21.5), e.create(5.5, 6)),
                color: r.groundTintDk || 7563810,
                roughness: .05,
                offsetDist: .5
            }, {
                bound: n.createAabbExtents(e.create(-17.75, -14), e.create(6, 4.5)),
                color: r.groundTintDk || 7563810,
                roughness: .05,
                offsetDist: .5
            }, {
                bound: n.createAabbExtents(e.create(21.5, -10), e.create(4.75, 3.5)),
                color: r.groundTintDk || 7563810,
                roughness: .05,
                offsetDist: .5
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: r.tree_08c || "tree_08c",
                pos: e.create(0, 0),
                scale: 2,
                ori: 0
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(2.5, 19.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(7.5, 19),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(3.5, 24.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_04",
                pos: e.create(-20.5, -13.25),
                scale: 1,
                ori: 0
            }, {
                type: "crate_04",
                pos: e.create(-15, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(23.5, -9.25),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(20, -11),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Na(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 10
            },
            mapObstacleBounds: [n.createCircle(e.create(0, 0), 32)],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, 0), e.create(6.5, 5.5)),
                color: r.groundTintDk || 7563810,
                roughness: .05,
                offsetDist: .5
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(1.75, 2.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_01: 4,
                    crate_19: 1
                }),
                pos: e.create(-1.75, -2.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_09",
                pos: e.create(2.75, -2.25),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-2.75, 2.25),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Er(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(-1.5, 20.5), e.create(12.5, 4.5)),
                    color: 8671554
                }, {
                    collider: n.createAabbExtents(e.create(-2, -23), e.create(3, 2.5)),
                    color: 8671554
                }, {
                    collider: n.createAabbExtents(e.create(-20.5, -22.5), e.create(10, 2)),
                    color: 7750457
                }, {
                    collider: n.createAabbExtents(e.create(28, 1.5), e.create(3.75, 3)),
                    color: 7237230
                }, {
                    collider: n.createAabbExtents(e.create(-3.5, -2), e.create(28, 18.5)),
                    color: 6175023
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(-3.5, -2), e.create(28, 18.5)), n.createAabbExtents(e.create(-1.5, 20.5), e.create(12.5, 4.5)), n.createAabbExtents(e.create(0, 0), e.create(20, 20))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(-21, -17), e.create(11, 8)), n.createAabbExtents(e.create(-23, -6), e.create(8, 3)), n.createAabbExtents(e.create(-2, -24), e.create(2, 3)), n.createAabbExtents(e.create(28, 1.5), e.create(3, 3))]
                }, {
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(-2, 4), e.create(5, 5))]
                }, {
                    type: "house",
                    collision: [n.createAabbExtents(e.create(1, 13), e.create(2, 3.25))]
                }],
                imgs: [{
                    sprite: "map-building-mansion-floor-01a.img",
                    pos: e.create(-1.5, 22),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-mansion-floor-01b.img",
                    pos: e.create(-3.5, -2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-mansion-floor-01c.img",
                    pos: e.create(28.5, 1.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-mansion-floor-01d.img",
                    pos: e.create(-15, -24),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-15, -22.4), e.create(17, 2.2)),
                    zoomOut: n.createAabbExtents(e.create(-15, -24.4), e.create(21, 4.2))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-3.5, -2), e.create(28, 18.5)),
                    zoomOut: n.createAabbExtents(e.create(-3.5, -2), e.create(28, 18.5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-1.5, 20.6), e.create(12, 4.2)),
                    zoomOut: n.createAabbExtents(e.create(-9, 23.1), e.create(5, 6.7))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-mansion-ceiling.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "brick_wall_ext_9",
                pos: e.create(-31.5, -16.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-31.75, -10.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_19",
                pos: e.create(-31.5, .5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-31.75, 11.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(-31.5, 15),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_17",
                pos: e.create(-22.5, 16.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_9",
                pos: e.create(-13.5, 20.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(-13, 24.9),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_19",
                pos: e.create(.5, 24.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_9",
                pos: e.create(10.5, 20.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_13",
                pos: e.create(17.5, 16.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(24.5, 14),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(24.75, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_18",
                pos: e.create(24.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(24.75, -11.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(24.5, -17),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(20.5, -20.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(15.5, -20.75),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_14",
                pos: e.create(7, -20.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-4, -21),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(-7, -20.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_short_7",
                pos: e.create(28.5, 4.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_short_7",
                pos: e.create(28.5, -1.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(-7, -20.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_column_1 || "mansion_column_1",
                pos: e.create(-5, -24),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_column_1 || "mansion_column_1",
                pos: e.create(1, -24),
                scale: 1,
                ori: 1
            }, {
                type: "saferoom_01",
                pos: e.create(-25.5, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: r.mansion_wall_int_12 || "mansion_wall_int_12",
                pos: e.create(-25, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-19, -2.5),
                scale: 1,
                ori: 3
            }, {
                type: r.mansion_wall_int_1 || "mansion_wall_int_1",
                pos: e.create(-30.5, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_03",
                pos: e.create(-30.25, 5.5),
                scale: 1,
                ori: 3
            }, {
                type: r.mansion_wall_int_13 || "mansion_wall_int_13",
                pos: e.create(-20.5, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_wall_int_7 || "mansion_wall_int_7",
                pos: e.create(-19.5, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(-14.5, 6),
                scale: 1,
                ori: 0
            }, {
                type: r.mansion_wall_int_6 || "mansion_wall_int_6",
                pos: e.create(-14.5, 13),
                scale: 1,
                ori: 0
            }, {
                type: r.mansion_wall_int_6 || "mansion_wall_int_6",
                pos: e.create(-14.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: r.mansion_wall_int_10 || "mansion_wall_int_10",
                pos: e.create(-10, -8.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_wall_int_11 || "mansion_wall_int_11",
                pos: e.create(-9.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(-7.5, 14),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(-1.5, 14),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(3.5, 14),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_12",
                pos: e.create(-2, 9.5),
                scale: 1,
                ori: 1
            }, {
                type: "stairs_01",
                pos: e.create(-4.5, 12),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-7.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(3.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_12",
                pos: e.create(-2, -1.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(10.5, 16),
                scale: 1,
                ori: 2
            }, {
                type: r.mansion_wall_int_9 || "mansion_wall_int_9",
                pos: e.create(10.5, 7.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(10.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: r.mansion_wall_int_8 || "mansion_wall_int_8",
                pos: e.create(10.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: r.mansion_wall_int_9 || "mansion_wall_int_9",
                pos: e.create(15.5, 4.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_wall_int_9 || "mansion_wall_int_9",
                pos: e.create(15.5, -1.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_wall_int_5 || "mansion_wall_int_5",
                pos: e.create(19.5, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(24, 1.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_wall_int_5 || "mansion_wall_int_5",
                pos: e.create(3.5, -8.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(6, -8.5),
                scale: 1,
                ori: 3
            }, {
                type: r.mansion_wall_int_11 || "mansion_wall_int_11",
                pos: e.create(5.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    bookshelf_01: 6,
                    bookshelf_02: 1
                }),
                pos: e.create(-27.25, 7.15),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    bookshelf_01: 6,
                    bookshelf_02: 1
                }),
                pos: e.create(-27.25, 14.85),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(-11.5, -11.75),
                scale: 1,
                ori: 3
            }, {
                type: "stand_01",
                pos: e.create(-7.5, -10.5),
                scale: 1,
                ori: 0
            }, {
                type: "stand_01",
                pos: e.create(3.5, -10.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    bookshelf_01: 6,
                    bookshelf_02: 1
                }),
                pos: e.create(7.25, -16.25),
                scale: 1,
                ori: 1
            }, {
                type: "piano_01",
                pos: e.create(14.9, -3.25),
                scale: 1,
                ori: 0
            }, {
                type: "toilet_01",
                pos: e.create(17, 1.5),
                scale: 1,
                ori: 3
            }, {
                type: "refrigerator_01",
                pos: e.create(22.15, 14.4),
                scale: 1,
                ori: 0
            }, {
                type: "oven_01",
                pos: e.create(12.75, 6.75),
                scale: 1,
                ori: 1
            }, {
                type: "oven_01",
                pos: e.create(12.75, 10.25),
                scale: 1,
                ori: 1
            }, {
                type: "table_02",
                pos: e.create(15.75, -14.25),
                scale: 1,
                ori: 0
            }, {
                type: r.entry_loot || "",
                pos: e.create(-2, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_02 || "loot_tier_mansion_floor",
                pos: e.create(-2, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_02 || "",
                pos: e.create(-21, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_02 || "",
                pos: e.create(18, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_02 || "",
                pos: e.create(6, 20.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_01 || "",
                pos: e.create(-30.15, 15),
                scale: .8,
                ori: 0
            }, {
                type: r.decoration_01 || "",
                pos: e.create(1.5, 11.5),
                scale: 1,
                ori: 2
            }, {
                type: r.decoration_01 || "",
                pos: e.create(8.5, 22.5),
                scale: 1,
                ori: 3
            }, {
                type: r.decoration_01 || "",
                pos: e.create(22.5, 14.5),
                scale: 1,
                ori: 3
            }, {
                type: r.decoration_01 || "",
                pos: e.create(22.5, -18.5),
                scale: 1,
                ori: 2
            }, {
                type: r.tree || "tree_interior_01",
                pos: e.create(-2, 4),
                scale: r.tree_scale || .6,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: r.tree_loot || "",
                pos: e.create(-2.25, 4),
                scale: 1,
                ori: 0
            }, {
                type: r.tree_loot || "",
                pos: e.create(-1.75, 4),
                scale: 1,
                ori: 0
            }, {
                type: r.tree_loot || "",
                pos: e.create(-2, 4.25),
                scale: 1,
                ori: 0
            }, {
                type: r.tree_loot || "",
                pos: e.create(-2, 3.75),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    bush_01: 25,
                    bush_03: 1,
                    "": r.bush_chance || 0
                }),
                pos: e.create(-4.75, 1.25),
                scale: .9,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: z({
                    bush_01: 25,
                    bush_03: 1,
                    "": r.bush_chance || 0
                }),
                pos: e.create(.75, 1.25),
                scale: .9,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: z({
                    bush_01: 25,
                    bush_03: 1,
                    "": r.bush_chance || 0
                }),
                pos: e.create(-4.75, 6.75),
                scale: .9,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: z({
                    bush_01: 25,
                    bush_03: 1,
                    "": r.bush_chance || 0
                }),
                pos: e.create(.75, 6.75),
                scale: .9,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: r.porch_01 || "bush_01",
                pos: e.create(-8, -23),
                scale: .95,
                ori: 0
            }, {
                type: r.porch_01 || "bush_01",
                pos: e.create(4, -23),
                scale: .95,
                ori: 0
            }, {
                type: "shack_01",
                pos: e.create(-20.75, 22.5),
                scale: 1,
                ori: 2
            }, {
                type: "crate_01",
                pos: e.create(13.25, 19.25),
                scale: .9,
                ori: 0,
                inheritOri: !1
            }, {
                type: "tree_01",
                pos: e.create(24, 24),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(27, -4),
                scale: 1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(29, -17.25),
                scale: .7,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Ga(r) {
        const t = {
            type: "building",
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "brick",
                    collision: [n.createAabbExtents(e.create(18, 3), e.create(7, 13)), n.createAabbExtents(e.create(5, 0), e.create(6, 10))]
                }],
                imgs: [{
                    sprite: "map-building-mansion-gradient-01.img",
                    pos: e.create(-3.75, .25),
                    scale: 4,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-mansion-cellar-01a.img",
                    pos: e.create(11.5, 5.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-mansion-cellar-01b.img",
                    pos: e.create(28.5, 1.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-mansion-cellar-01c.img",
                    pos: e.create(11.5, -9),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(18, 3), e.create(7, 13))
                }, {
                    zoomIn: n.createAabbExtents(e.create(5, 1.5), e.create(6, 12))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: []
            },
            mapObjects: [{
                type: "brick_wall_ext_thicker_24",
                pos: e.create(-2.5, 6),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_8",
                pos: e.create(0, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_thicker_7",
                pos: e.create(5.5, -9.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_9",
                pos: e.create(11.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_thicker_7",
                pos: e.create(17.5, -9.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_5",
                pos: e.create(21.5, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_thicker_8",
                pos: e.create(25.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_15",
                pos: e.create(25.5, 11.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_16",
                pos: e.create(16, 17.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_thicker_7",
                pos: e.create(9.5, 12.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_5",
                pos: e.create(5.5, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_thicker_5",
                pos: e.create(29.5, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_thicker_5",
                pos: e.create(29.5, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_7",
                pos: e.create(31.5, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_thicker_6",
                pos: e.create(4.5, 15),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(1, 17.6),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    barrel_03: 9,
                    barrel_04: 1
                }),
                pos: e.create(8.5, -9.53),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    barrel_03: 9,
                    barrel_04: 1
                }),
                pos: e.create(11.5, -9.53),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    barrel_03: 9,
                    barrel_04: 1
                }),
                pos: e.create(14.5, -9.53),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    barrel_03: 9,
                    barrel_04: 1
                }),
                pos: e.create(12.75, 15.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    barrel_03: 9,
                    barrel_04: 1
                }),
                pos: e.create(15.75, 15.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    barrel_03: 9,
                    barrel_04: 1
                }),
                pos: e.create(18.75, 15.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(22.25, 14.25),
                scale: .75,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: z({
                    bookshelf_01: 7,
                    bookshelf_02: 1
                }),
                pos: e.create(22.75, 8),
                scale: 1,
                ori: 3
            }, {
                type: r.mansion_column_1 || "mansion_column_1",
                pos: e.create(5.5, 1.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mansion_column_1 || "mansion_column_1",
                pos: e.create(17.5, 1.5),
                scale: 1,
                ori: 1
            }, {
                type: r.mid_obs_01 || "barrel_02",
                pos: e.create(8.5, 1.5),
                scale: .8,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(11.5, 1.5),
                scale: .8,
                ori: 0
            }, {
                type: r.mid_obs_01 || "barrel_02",
                pos: e.create(14.5, 1.5),
                scale: .8,
                ori: 0
            }, {
                type: r.decoration_02 || "",
                pos: e.create(16.5, 7.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_02 || "",
                pos: e.create(11.5, -5.5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_01 || "",
                pos: e.create(.5, -4.5),
                scale: 1,
                ori: 1
            }, {
                type: r.decoration_01 || "",
                pos: e.create(22.5, 14.5),
                scale: 1,
                ori: 3
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Br(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                color: 8145976,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 1.4), e.create(5.5, 6.5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, .15), e.create(3.75, 4.75))]
                }],
                imgs: [{
                    sprite: "map-building-outhouse-floor.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 1.45), e.create(3.6, 3.2)),
                    zoomOut: n.createAabbExtents(e.create(0, 1.4), e.create(3.8, 3.4))
                }],
                imgs: [{
                    sprite: "map-building-outhouse-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }],
                destroy: {
                    wallCount: 2,
                    particleCount: 15,
                    particle: "outhouseBreak",
                    residue: "map-outhouse-res.img"
                }
            },
            mapObjects: [{
                type: "outhouse_wall_top",
                pos: e.create(0, 4.46),
                scale: 1,
                ori: 0
            }, {
                type: "outhouse_wall_side",
                pos: e.create(3.4, 1.73),
                scale: 1,
                ori: 0
            }, {
                type: "outhouse_wall_side",
                pos: e.create(-3.4, 1.73),
                scale: 1,
                ori: 0
            }, {
                type: "outhouse_wall_bot",
                pos: e.create(-2.65, -1.52),
                scale: 1,
                ori: 0
            }, {
                type: "outhouse_wall_bot",
                pos: e.create(2.65, -1.52),
                scale: 1,
                ori: 0
            }, {
                type: r.obs || z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(0, 2),
                scale: .95,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Va(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(9, 9)),
                    color: 10555920
                }, {
                    collider: n.createAabbExtents(e.create(0, 0), e.create(3.5, 3.5)),
                    color: 16727611
                }, {
                    collider: n.createAabbExtents(e.create(0, -10.15), e.create(2, 1.5)),
                    color: 7354635
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(11, 11)), n.createAabbExtents(e.create(0, -20), e.create(4, 12))],
            ori: 0,
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(9, 9)), n.createAabbExtents(e.create(0, -10.15), e.create(2, 1.5))]
                }],
                imgs: [{
                    sprite: "map-building-pavilion-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-teahouse-floor-02.img",
                    pos: e.create(0, -10.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(7, 7)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(9, 9))
                }],
                vision: {
                    width: 4
                },
                imgs: [{
                    sprite: "map-building-pavilion-ceiling-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }],
                destroy: {
                    wallCount: 3,
                    particle: "teapavilionBreak",
                    particleCount: 15,
                    residue: "map-building-pavilion-res-01.img"
                }
            },
            mapObjects: [{
                type: "teahouse_wall_int_12",
                pos: e.create(0, 6.5),
                scale: 1,
                ori: 1
            }, {
                type: "teahouse_wall_int_13",
                pos: e.create(6.5, .5),
                scale: 1,
                ori: 0
            }, {
                type: "teahouse_wall_int_13",
                pos: e.create(-6.5, .5),
                scale: 1,
                ori: 0
            }, {
                type: "teahouse_wall_int_5",
                pos: e.create(-4.5, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "teahouse_wall_int_5",
                pos: e.create(4.5, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "teahouse_door_01",
                pos: e.create(-2, -6.5),
                scale: 1,
                ori: 3
            }, {
                type: r.left_loot || "pot_03",
                pos: e.create(4.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: r.right_loot || "pot_03",
                pos: e.create(-4.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: r.center_loot || "loot_tier_airdrop_armor",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Ha(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(24, 18))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, 0), e.create(21, 15)),
                color: r.grass_color || 6066442,
                roughness: .05,
                offsetDist: .25
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "teahouse_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(12, 11),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(-16, -6),
                scale: 1,
                ori: 0
            }, {
                type: r.tree_small || "tree_07sp",
                pos: e.create(-3, 12),
                scale: .9,
                ori: 0
            }, {
                type: r.tree_small || "tree_07sp",
                pos: e.create(-15, 12),
                scale: .9,
                ori: 0
            }, {
                type: r.tree_large || z({
                    tree_08sp: 2,
                    "": 1
                }),
                pos: e.create(-10, -13),
                scale: 1,
                ori: 0
            }, {
                type: r.tree_large || z({
                    tree_08sp: 2,
                    "": 1
                }),
                pos: e.create(-17.5, 2.5),
                scale: 1.2,
                ori: 0
            }, {
                type: r.tree_large || z({
                    tree_08sp: 2,
                    "": 1
                }),
                pos: e.create(18, -6.5),
                scale: 1,
                ori: 0
            }, {
                type: r.tree_large || z({
                    tree_08sp: 2,
                    "": 1
                }),
                pos: e.create(17.5, 5),
                scale: 1.2,
                ori: 0
            }, {
                type: r.tree_small || "tree_07sp",
                pos: e.create(3, -12),
                scale: .9,
                ori: 0
            }, {
                type: r.tree_small || "tree_07sp",
                pos: e.create(15, -12),
                scale: .9,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Rr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(10, 10))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, 0), e.create(8, 8)),
                color: 7696926,
                roughness: .1,
                offsetDist: .2
            }],
            floor: {
                surfaces: [],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: []
        };
        return f.mergeDeep(t, r || {})
    }
    function $a(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(-21, -8), e.create(21.25, 14)),
                    color: 5855577
                }, {
                    collider: n.createAabbExtents(e.create(-24.5, 8.5), e.create(17.75, 9.75)),
                    color: 3355970
                }, {
                    collider: n.createAabbExtents(e.create(-3.5, 12), e.create(3.5, 6.25)),
                    color: 4278620
                }, {
                    collider: n.createAabbExtents(e.create(10.35, 0), e.create(10.5, 22)),
                    color: 3355970
                }, {
                    collider: n.createAabbExtents(e.create(31.25, 12.5), e.create(10.75, 9.5)),
                    color: 3355970
                }, {
                    collider: n.createAabbExtents(e.create(-3.5, 2.5), e.create(2.25, 2.25)),
                    color: 6310464
                }, {
                    collider: n.createCircle(e.create(-30.5, -18), 1.5),
                    color: 8026746
                }, {
                    collider: n.createCircle(e.create(-20.5, -10.5), 1.5),
                    color: 8026746
                }, {
                    collider: n.createAabbExtents(e.create(-38.5, -7), e.create(1.4, 3.1)),
                    color: 13278307
                }, {
                    collider: n.createAabbExtents(e.create(-7.5, -19.5), e.create(3.1, 1.4)),
                    color: 13278307
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(-24.5, 8.5), e.create(17.75, 9.75)), n.createAabbExtents(e.create(-3.5, 12), e.create(3.5, 6.25)), n.createAabbExtents(e.create(10.35, 0), e.create(10.5, 22)), n.createAabbExtents(e.create(31.25, 12.5), e.create(10.75, 9.5))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(-21.5, -13), e.create(21, 11.5)), n.createAabbExtents(e.create(-3.5, 2), e.create(3, 3.5))]
                }],
                imgs: [{
                    sprite: "map-building-police-floor-01.img",
                    pos: e.create(-9.5, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-police-floor-02.img",
                    pos: e.create(33, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-24.5, 8.5), e.create(17.75, 9.75))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-3.5, 12), e.create(3.5, 6.25))
                }, {
                    zoomIn: n.createAabbExtents(e.create(10.35, 0), e.create(10.5, 22))
                }, {
                    zoomIn: n.createAabbExtents(e.create(31.25, 12.5), e.create(10.75, 9.5)),
                    zoomOut: n.createAabbExtents(e.create(12, 0), e.create(12.75, 26))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-police-ceiling-01.img",
                    pos: e.create(-21.5, 8.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-police-ceiling-02.img",
                    pos: e.create(10.5, 0),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-police-ceiling-03.img",
                    pos: e.create(31.96, 12.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "brick_wall_ext_20",
                pos: e.create(-42, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_41",
                pos: e.create(-21, 18),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(-38, -1),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_21",
                pos: e.create(-18, -1),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(-7, 2),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_7",
                pos: e.create(-4, 6),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_16",
                pos: e.create(0, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-.5, -11),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_10",
                pos: e.create(0, -17.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(3.5, -22),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(6.5, -22.5),
                scale: 1,
                ori: 3
            }, {
                type: "house_door_01",
                pos: e.create(14.5, -22.5),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_6",
                pos: e.create(17.5, -22),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_11",
                pos: e.create(21, -17),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(21.5, -11.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_11",
                pos: e.create(21, -2),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_20",
                pos: e.create(31.5, 3),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_20",
                pos: e.create(42, 12.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_33",
                pos: e.create(25, 22),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(4.5, 22.5),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(2.5, 22),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(0, 20),
                scale: 1,
                ori: 0
            }, {
                type: "police_wall_int_2",
                pos: e.create(-40.5, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_3",
                pos: e.create(-34, 8),
                scale: 1,
                ori: 1
            }, {
                type: "cell_door_01",
                pos: e.create(-35.5, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_8",
                pos: e.create(-35, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "police_wall_int_3",
                pos: e.create(-27, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_8",
                pos: e.create(-28, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "cell_door_01",
                pos: e.create(-21.5, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_3",
                pos: e.create(-20, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_8",
                pos: e.create(-21, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "cell_door_01",
                pos: e.create(-14.5, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_3",
                pos: e.create(-13, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_8",
                pos: e.create(-14, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "cell_door_01",
                pos: e.create(-7.5, 8),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_6",
                pos: e.create(-7, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: "police_wall_int_7",
                pos: e.create(-4, 13),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-7, 17.5),
                scale: 1,
                ori: 2
            }, {
                type: "police_wall_int_4",
                pos: e.create(2.5, -1),
                scale: 1,
                ori: 1
            }, {
                type: "bank_window_01",
                pos: e.create(6, -1),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_6",
                pos: e.create(10.5, -1),
                scale: 1,
                ori: 1
            }, {
                type: "bank_window_01",
                pos: e.create(15, -1),
                scale: 1,
                ori: 1
            }, {
                type: "police_wall_int_4",
                pos: e.create(18.5, -1),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(21, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "police_wall_int_10",
                pos: e.create(21, 12.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(21, 21.5),
                scale: 1,
                ori: 2
            }, {
                type: "metal_wall_ext_10",
                pos: e.create(35.5, 4),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(33, 4.15),
                scale: 1,
                ori: 2
            }, {
                type: "metal_wall_ext_10",
                pos: e.create(35.5, 21),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(33, 20.85),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(38, 20.85),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_18",
                pos: e.create(41, 12.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(40.85, 7.5),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(40.85, 17.5),
                scale: 1,
                ori: 3
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(35.5, 12.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(38, 11.35),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    locker_01: 8,
                    locker_02: 1
                }),
                pos: e.create(33, 13.65),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    toilet_03: 5,
                    toilet_04: 1
                }),
                pos: e.create(-37, 1),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    toilet_03: 5,
                    toilet_04: 1
                }),
                pos: e.create(-23, 1),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    toilet_03: 5,
                    toilet_04: 1
                }),
                pos: e.create(-16, 1),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    toilet_03: 5,
                    toilet_04: 1
                }),
                pos: e.create(-9, 1),
                scale: 1,
                ori: 2
            }, {
                type: "control_panel_01",
                pos: e.create(-4.5, 9.5),
                scale: 1,
                ori: 1
            }, {
                type: "crate_06",
                pos: e.create(-24.5, 20.25),
                scale: 1,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(14.5, 12.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(18.75, 12.5),
                scale: 1,
                ori: 1
            }, {
                type: "fire_ext_01",
                pos: e.create(21.85, 12.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(10.5, 1.25),
                scale: 1,
                ori: 0
            }, {
                type: "vending_01",
                pos: e.create(2, -6.75),
                scale: 1,
                ori: 1
            }, {
                type: "stand_01",
                pos: e.create(2, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "bush_01",
                pos: e.create(2.5, -19.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "bush_01",
                pos: e.create(18.5, -19.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: z({
                    loot_tier_police_floor: 1
                }),
                pos: e.create(-38.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1
                }),
                pos: e.create(-31.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1
                }),
                pos: e.create(-24.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1
                }),
                pos: e.create(-17.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1
                }),
                pos: e.create(-10.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-3.5, 2.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "sandbags_01",
                pos: e.create(-38.5, -7),
                scale: 1,
                ori: 3
            }, {
                type: "sandbags_01",
                pos: e.create(-7.5, -19.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-30.5, -18),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-20.5, -10.5),
                scale: .9,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(39, -6),
                scale: .8,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(28, -17.5),
                scale: .8,
                ori: 0
            }, {
                type: "hedgehog_01",
                pos: e.create(39, -17.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(24.5, -.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: !0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Lr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                color: 6429724,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(19, 17.5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "house",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(14.5, 13))]
                }],
                imgs: [{
                    sprite: "map-building-house-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(-1, 14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(0, -14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(14.5, 13)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(16.5, 15))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-house-ceiling.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "brick_wall_ext_12",
                pos: e.create(-9, 13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_14",
                pos: e.create(8, 13),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(1, 13.25),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-14.5, 10),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_10",
                pos: e.create(-14.5, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(-14.5, -10.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-14.75, 6),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-14.75, -7),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-12.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-4.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(4.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(12.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-8.5, -13.25),
                scale: 1,
                ori: 3
            }, {
                type: "house_window_01",
                pos: e.create(8.5, -13.25),
                scale: 1,
                ori: 3
            }, {
                type: "house_door_01",
                pos: e.create(-2, -13.25),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(14.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_9",
                pos: e.create(14.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_2",
                pos: e.create(14.5, -11.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(14.75, -9),
                scale: 1,
                ori: 2
            }, {
                type: "house_window_01",
                pos: e.create(14.75, 3),
                scale: 1,
                ori: 2
            }, {
                type: r.house_wall_int_9 || "house_wall_int_9",
                pos: e.create(-9.5, -1),
                scale: 1,
                ori: 1
            }, {
                type: r.house_wall_int_5 || "house_wall_int_5",
                pos: e.create(4.5, -6),
                scale: 1,
                ori: 0
            }, {
                type: r.house_wall_int_9 || "house_wall_int_9",
                pos: e.create(9.5, -4),
                scale: 1,
                ori: 1
            }, {
                type: r.house_wall_int_8 || "house_wall_int_8",
                pos: e.create(5.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.house_wall_int_4 || "house_wall_int_4",
                pos: e.create(8, 7),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(4.5, -12.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(6, 2.5),
                scale: 1,
                ori: 2
            }, {
                type: "house_door_01",
                pos: e.create(14, 7),
                scale: 1,
                ori: 1
            }, {
                type: r.house_column_1 || "house_column_1",
                pos: e.create(6, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: r.house_column_1 || "house_column_1",
                pos: e.create(6, -2.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(8, 10),
                scale: 1,
                ori: 1
            }, {
                type: "stand_01",
                pos: e.create(12.25, -2),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(7.75, -6),
                scale: 1,
                ori: 0
            }, {
                type: r.stand || "",
                pos: e.create(-12.25, -3),
                scale: 1,
                ori: 1
            }, {
                type: "table_01",
                pos: e.create(-11.25, 1.75),
                scale: 1,
                ori: 0
            }, {
                type: "oven_01",
                pos: e.create(-7, 11),
                scale: 1,
                ori: 0
            }, {
                type: "refrigerator_01",
                pos: e.create(-7, 1),
                scale: 1,
                ori: 2
            }, {
                type: r.plant || "bush_02",
                pos: r.plant_pos || e.create(-12, -10.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: r.porch_01 || "",
                pos: e.create(4.5, -15.5),
                scale: .9,
                ori: 0
            }, {
                type: r.porch_01 || "",
                pos: e.create(-5.25, 15.5),
                scale: .9,
                ori: 2
            }, {
                type: "loot_tier_1",
                pos: e.create(0, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: r.plant_loot || "",
                pos: e.create(-10.25, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.plant_loot || "",
                pos: e.create(-10, -8.75),
                scale: 1,
                ori: 0
            }, {
                type: r.plant_loot || "",
                pos: e.create(-9.75, -8.25),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function qr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                color: 4656911,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, -1), e.create(19, 18.5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "house",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(14.5, 13))]
                }],
                imgs: [{
                    sprite: "map-building-house-floor-02.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(10, 14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(0, -14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(2.6, -14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(5.2, -14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(7.8, -14.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(0, -16.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(2.6, -16.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(5.2, -16.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-building-porch-01.img",
                    pos: e.create(7.8, -16.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(14.5, 13)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(16.5, 15))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-house-ceiling.img",
                    scale: .667,
                    alpha: 1,
                    tint: 13619151,
                    rot: 2
                }]
            },
            mapObjects: [{
                type: "brick_wall_ext_5",
                pos: e.create(-12.5, 13),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-8.5, 13.25),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_15",
                pos: e.create(.5, 13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_3",
                pos: e.create(13.5, 13),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(12, 13.25),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-14.5, 10),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_10",
                pos: e.create(-14.5, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_4",
                pos: e.create(-14.5, -10.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-14.75, 6),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(-14.75, -7),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-12.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_5",
                pos: e.create(-4.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_13",
                pos: e.create(8.5, -13),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-8.5, -13.25),
                scale: 1,
                ori: 3
            }, {
                type: "house_door_01",
                pos: e.create(-2, -13.25),
                scale: 1,
                ori: 3
            }, {
                type: "brick_wall_ext_8",
                pos: e.create(14.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_9",
                pos: e.create(14.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_2",
                pos: e.create(14.5, -11.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(14.75, -9),
                scale: 1,
                ori: 2
            }, {
                type: "house_window_01",
                pos: e.create(14.75, 3),
                scale: 1,
                ori: 2
            }, {
                type: r.house_wall_int_5 || "house_wall_int_5",
                pos: e.create(-.5, 10),
                scale: 1,
                ori: 0
            }, {
                type: r.house_wall_int_14 || "house_wall_int_14",
                pos: e.create(-7, 3),
                scale: 1,
                ori: 1
            }, {
                type: r.house_wall_int_11 || "house_wall_int_11",
                pos: e.create(-8.5, -2),
                scale: 1,
                ori: 1
            }, {
                type: r.house_wall_int_4 || "house_wall_int_4",
                pos: e.create(12, 1),
                scale: 1,
                ori: 1
            }, {
                type: r.house_wall_int_4 || "house_wall_int_4",
                pos: e.create(12, -7),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(-.5, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_01",
                pos: e.create(-3.5, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: r.house_column_1 || "house_column_1",
                pos: e.create(4, -3),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    toilet_01: 5,
                    toilet_02: 1
                }),
                pos: e.create(-11.75, .5),
                scale: 1,
                ori: 1
            }, {
                type: r.stand || "",
                pos: e.create(-12.5, 11),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    drawers_01: 7,
                    drawers_02: 1
                }),
                pos: e.create(-3.75, 11),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    bookshelf_01: 7,
                    bookshelf_02: 1
                }),
                pos: e.create(13, -3),
                scale: 1,
                ori: 3
            }, {
                type: "table_03",
                pos: e.create(-8.5, -6),
                scale: 1,
                ori: 0
            }, {
                type: "oven_01",
                pos: e.create(-12.25, -11),
                scale: 1,
                ori: 2
            }, {
                type: "refrigerator_01",
                pos: e.create(-4.5, -11),
                scale: 1,
                ori: 2
            }, {
                type: r.plant || "bush_02",
                pos: r.plant_pos || e.create(2, 10.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: r.porch_01 || "",
                pos: e.create(-4.5, -15.5),
                scale: .9,
                ori: 0
            }, {
                type: r.porch_01 || "",
                pos: e.create(5.75, 15.5),
                scale: .9,
                ori: 2
            }, {
                type: "loot_tier_1",
                pos: e.create(0, -4.5),
                scale: 1,
                ori: 0
            }, {
                type: r.plant_loot || "",
                pos: e.create(4.25, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.plant_loot || "",
                pos: e.create(3.75, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: r.plant_loot || "",
                pos: e.create(4, 8.25),
                scale: 1,
                ori: 0
            }, {
                type: "grill_01",
                pos: e.create(6, -15.25),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Xa(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, .9), e.create(5.6, 3.5))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(3.75, -4), e.create(2.25, 1.5))]
                }],
                imgs: [{
                    sprite: "map-building-shack-floor-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, .9), e.create(5.6, 3.5)),
                    zoomOut: n.createAabbExtents(e.create(0, .8), e.create(5.9, 3.8))
                }],
                vision: {
                    width: 4
                },
                imgs: [{
                    sprite: "map-building-shack-ceiling-01.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }],
                destroy: {
                    wallCount: 2,
                    particle: "shackBreak",
                    particleCount: 25,
                    residue: "map-shack-res-01.img"
                }
            },
            mapObjects: [{
                type: "shack_wall_bot",
                pos: e.create(-1.49, -2.4),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_side_left",
                pos: e.create(-5.55, .69),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_top",
                pos: e.create(-.3, 4.33),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_side_right",
                pos: e.create(5.55, .95),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(7.9, 2.85),
                scale: .8,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(7.45, -.9),
                scale: .85,
                ori: 0
            }, {
                type: z({
                    loot_tier_2: 1
                }),
                pos: e.create(-2, .8),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(2, .8),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Qa(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                color: 4014894,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, 1), e.create(5, 4))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(0, -4), e.create(2, 1))]
                }],
                imgs: [{
                    sprite: "map-building-shack-floor-02.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 1), e.create(4.75, 3.75))
                }],
                vision: {
                    width: 4
                },
                imgs: [{
                    sprite: "map-building-shack-ceiling-02.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }],
                destroy: {
                    wallCount: 2,
                    particle: "shackBreak",
                    particleCount: 25,
                    residue: "map-shack-res-02.img"
                }
            },
            mapObjects: [{
                type: "barn_wall_int_2",
                pos: e.create(-3, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_2",
                pos: e.create(3, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: "barn_wall_int_8",
                pos: e.create(-4.5, 1),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_8",
                pos: e.create(4.5, 1),
                scale: 1,
                ori: 0
            }, {
                type: "barn_wall_int_8",
                pos: e.create(0, 4.5),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(4, -4.5),
                scale: .8,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1
                }),
                pos: e.create(0, 1),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function tr(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(27, 0), e.create(3, 12.25)),
                    color: 10066329
                }, {
                    collider: n.createAabbExtents(e.create(-27, 0), e.create(3, 12.25)),
                    color: 10066329
                }, {
                    collider: n.createAabbExtents(e.create(0, 0), e.create(24.5, 12.25)),
                    color: 5915450
                }]
            },
            zIdx: 1,
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(35, 16))],
            floor: {
                surfaces: [{
                    type: "warehouse",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(32, 12.5))]
                }],
                imgs: [{
                    sprite: "map-building-warehouse-floor-01.img",
                    pos: e.create(-15.615, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-warehouse-floor-01.img",
                    pos: e.create(15.615, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(24.5, 12.25)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(32, 12.5))
                }],
                vision: {
                    dist: 8,
                    width: 5
                },
                imgs: [{
                    sprite: "map-building-warehouse-ceiling-01.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "warehouse_wall_side",
                pos: e.create(0, 11.9),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_wall_edge",
                pos: e.create(-24.4, 8.2),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_wall_edge",
                pos: e.create(24.4, 8.2),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_wall_side",
                pos: e.create(0, -11.9),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_wall_edge",
                pos: e.create(-24.4, -8.2),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_wall_edge",
                pos: e.create(24.4, -8.2),
                scale: 1,
                ori: 0
            }, {
                type: r.topLeftObs,
                pos: e.create(-21.25, 8.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: "crate_04",
                pos: e.create(-16.25, 8.75),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-21.25, -8.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: "barrel_01",
                pos: e.create(-16.5, -8.75),
                scale: .9,
                ori: 0
            }, {
                type: r.topRightObs,
                pos: e.create(21.25, 8.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: "barrel_01",
                pos: e.create(16.5, 8.75),
                scale: .9,
                ori: 0
            }, {
                type: "crate_04",
                pos: e.create(16.25, -8.75),
                scale: 1,
                ori: 1
            }, {
                type: r.botRightObs,
                pos: e.create(21.25, -8.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 3
                }),
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: "crate_01",
                pos: e.create(5, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: "crate_01",
                pos: e.create(-5, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: r.ignoreMapSpawnReplacement
            }, {
                type: "crate_04",
                pos: e.create(0, 5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_04",
                pos: e.create(0, -5),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_01 || "",
                pos: e.create(-9, 6),
                scale: 1,
                ori: 0
            }, {
                type: r.decoration_01 || "",
                pos: e.create(9, -6),
                scale: 1,
                ori: 0
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Za(r) {
        const t = {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(25, 0), e.create(3, 12.25)),
                    color: 10066329
                }, {
                    collider: n.createAabbExtents(e.create(-25, 0), e.create(3, 12.25)),
                    color: 10066329
                }, {
                    collider: n.createAabbExtents(e.create(0, 0), e.create(22.5, 12.25)),
                    color: 2240064
                }]
            },
            zIdx: 1,
            terrain: {
                grass: !0,
                beach: !1
            },
            floor: {
                surfaces: [{
                    type: "warehouse",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(27.5, 12.5))]
                }],
                imgs: [{
                    sprite: "map-building-warehouse-floor-02.img",
                    pos: e.create(-13.72, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-building-warehouse-floor-02.img",
                    pos: e.create(13.72, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(22, 12.25)),
                    zoomOut: n.createAabbExtents(e.create(0, 0), e.create(27.5, 12.5))
                }],
                vision: {
                    dist: 8,
                    width: 5
                },
                imgs: [{
                    sprite: "map-building-warehouse-ceiling-02.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_43",
                pos: e.create(0, 12),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_8",
                pos: e.create(-21.9, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_8",
                pos: e.create(21.9, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_43",
                pos: e.create(0, -12),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_8",
                pos: e.create(-21.9, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_8",
                pos: e.create(21.9, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-18.75, 8.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(-14, 8.75),
                scale: .9,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(-18.75, -6),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(-19.5, -9.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(18.75, 6),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(19.5, 9.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(18.75, -8.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(14, -8.75),
                scale: .9,
                ori: 0
            }, {
                type: z({
                    crate_08: 24,
                    crate_09: 1
                }),
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(0, 5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(0, -5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_06",
                pos: e.create(4, -5),
                scale: 1,
                ori: 1
            }, {
                type: "crate_06",
                pos: e.create(-4, 5),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(4.5, 0),
                scale: .9,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-4.5, 0),
                scale: .9,
                ori: 0,
                inheritOri: !1
            }]
        };
        return f.mergeDeep(t, r || {})
    }
    function Fr(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 2)),
            height: 10,
            collidable: !0,
            destructible: !0,
            isWindow: !0,
            health: 1,
            hitParticle: "glassChip",
            explodeParticle: "windowBreak",
            reflectBullets: !1,
            loot: [],
            destroyType: "house_window_broken_01",
            img: {
                sprite: "map-building-house-window-01.img",
                residue: "none",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    function Ce(r) {
        const t = {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 2)),
            height: .2,
            isWall: !0,
            collidable: !0,
            destructible: !1,
            health: 100,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [],
            img: {
                sprite: "map-building-house-window-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            },
            sound: {
                bullet: "wall_wood_bullet",
                punch: "wall_wood_bullet",
                explode: "",
                enter: "none"
            }
        };
        return f.mergeDeep(t, r || {})
    }
    const mr = {
        metal: {
            destructible: !1,
            reflectBullets: !0,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "barrel_break_01",
                enter: "none"
            }
        },
        wood: {
            destructible: !0,
            reflectBullets: !1,
            sound: {
                bullet: "wall_wood_bullet",
                punch: "wall_wood_bullet",
                explode: "wall_break_01",
                enter: "none"
            }
        },
        woodPerm: {
            destructible: !1,
            reflectBullets: !1,
            sound: {
                bullet: "wall_wood_bullet",
                punch: "wall_wood_bullet",
                explode: "wall_break_01",
                enter: "none"
            }
        },
        brick: {
            destructible: !1,
            reflectBullets: !1,
            hitParticle: "brickChip",
            sound: {
                bullet: "wall_brick_bullet",
                punch: "wall_brick_bullet",
                explode: "wall_break_01",
                enter: "none"
            }
        },
        concrete: {
            destructible: !1,
            reflectBullets: !1,
            hitParticle: "barrelChip",
            sound: {
                bullet: "concrete_hit",
                punch: "concrete_hit",
                explode: "wall_break_01",
                enter: "none"
            }
        },
        stone: {
            destructible: !0,
            stonePlated: !0,
            reflectBullets: !1,
            hitParticle: "rockChip",
            explodeParticle: "rockBreak",
            sound: {
                bullet: "concrete_hit",
                punch: "concrete_hit",
                explode: "stone_break_01",
                enter: "none"
            }
        },
        glass: {
            destructible: !0,
            reflectBullets: !1,
            hitParticle: "glassChip",
            explodeParticle: "windowBreak",
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        },
        cobalt: {
            destructible: !1,
            reflectBullets: !0,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            sound: {
                bullet: "cobalt_bullet",
                punch: "cobalt_bullet",
                explode: "barrel_break_01",
                enter: "none"
            }
        }
    }
      , de = {
        barrel_01: xr({}),
        barrel_01b: xr({
            img: {
                tint: 13224393
            },
            loot: [x("tier_surviv", 2, 3), R("mirv", 1), R("mirv", 1), R("mirv", 1)]
        }),
        barrel_02: Sr({
            health: 60
        }),
        barrel_03: Sr({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.25, .5)),
            health: 20,
            img: {
                sprite: "map-barrel-03.img",
                residue: "map-barrel-res-03.img",
                scale: .45
            }
        }),
        barrel_04: Sr({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.25, .5)),
            health: 20,
            loot: [x("tier_soviet", 2, 3)],
            img: {
                sprite: "map-barrel-04.img",
                residue: "map-barrel-res-03.img",
                scale: .45
            }
        }),
        propane_01: xr({
            collision: n.createCircle(e.create(0, 0), 1.25),
            health: 50,
            map: {
                display: !0,
                color: 24516,
                scale: 1
            },
            img: {
                sprite: "map-propane-01.img",
                scale: .4
            }
        }),
        bed_sm_01: Ma({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.4, 3.4)),
            img: {
                sprite: "map-bed-01.img"
            }
        }),
        bed_lg_01: Ma({
            img: {
                residue: "map-bed-res-02.img"
            }
        }),
        bollard_01: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createCircle(e.create(0, 0), 1.25),
            height: .5,
            collidable: !0,
            destructible: !1,
            health: 300,
            hitParticle: "barrelChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !0,
                color: 6310464,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-bollard-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "silo_bullet",
                punch: "silo_bullet",
                explode: "barrel_break_01",
                enter: "none"
            }
        },
        bookshelf_01: kr({
            img: {
                sprite: "map-bookshelf-01.img"
            },
            loot: [x("tier_world", 1, 1)]
        }),
        bookshelf_02: kr({
            img: {
                sprite: "map-bookshelf-02.img"
            },
            loot: [x("tier_soviet", 2, 3)]
        }),
        bush_01: Ie({}),
        bush_01b: Ie({
            img: {
                alpha: 1
            }
        }),
        bush_01cb: Ie({
            img: {
                sprite: "map-bush-01cb.img"
            },
            map: {
                color: 2518873
            }
        }),
        bush_01f: Ie({
            img: {
                sprite: "map-bush-01f.img"
            },
            map: {
                color: 1793032
            }
        }),
        bush_01sv: Ie({
            hitParticle: "leafPrickly",
            explodeParticle: "leafPrickly",
            img: {
                sprite: "map-bush-01sv.img",
                residue: "map-bush-res-01sv.img"
            },
            map: {
                color: 7569455
            }
        }),
        brush_01sv: Ie({
            scale: {
                createMin: 1.5,
                createMax: 1.75,
                destroy: .75
            },
            health: 150,
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.75, 1.75)),
            hitParticle: "leaf",
            explodeParticle: "leaf",
            img: {
                sprite: "map-brush-01sv.img",
                residue: "map-brush-res-02sv.img"
            },
            map: {
                color: 5207588
            }
        }),
        brush_02sv: Ie({
            scale: {
                createMin: 1.5,
                createMax: 1.75,
                destroy: .75
            },
            health: 150,
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.75, 1.75)),
            hitParticle: "leaf",
            explodeParticle: "leaf",
            img: {
                sprite: "map-brush-02sv.img",
                residue: "map-brush-res-02sv.img"
            },
            map: {
                color: 5207588
            }
        }),
        bush_01x: Ie({
            map: {
                color: 4545840
            },
            img: {
                sprite: "map-bush-01x.img"
            }
        }),
        bush_02: Ie({
            img: {
                residue: "map-bush-res-02.img"
            }
        }),
        bush_03: Ie({
            img: {
                sprite: "map-bush-03.img",
                alpha: 1
            }
        }),
        bush_04: Ie({
            hitParticle: "leafRiver",
            explodeParticle: "leafRiver",
            img: {
                sprite: "map-bush-04.img",
                residue: "map-bush-res-04.img",
                alpha: 1,
                scale: .5
            },
            terrain: {
                grass: !0,
                river: {
                    centerWeight: .3
                },
                riverShore: !0
            },
            sound: {
                enter: "bush_enter_02"
            }
        }),
        bush_04cb: Ie({
            hitParticle: "leafRiver",
            explodeParticle: "leafRiver",
            img: {
                sprite: "map-bush-04cb.img",
                residue: "map-bush-res-04.img",
                alpha: 1,
                scale: .5
            },
            terrain: {
                grass: !0,
                river: {
                    centerWeight: .3
                },
                riverShore: !0
            },
            sound: {
                enter: "bush_enter_02"
            },
            map: {
                color: 2784099
            }
        }),
        bush_05: Ie({
            img: {
                sprite: "map-bush-05.img",
                residue: "map-bush-res-05.img"
            },
            map: {
                color: 6971965
            }
        }),
        bush_06: Ie({
            collision: n.createCircle(e.create(0, 0), 1.75),
            img: {
                sprite: "map-bush-06.img",
                residue: "map-bush-res-06.img"
            },
            map: {
                display: !0,
                color: 6971965,
                scale: 1.5
            }
        }),
        bush_06b: Ie({
            scale: {
                createMin: 1,
                createMax: 1
            },
            collision: n.createCircle(e.create(0, 0), 1.75),
            img: {
                sprite: "map-bush-06.img",
                residue: "map-bush-res-06.img",
                alpha: 1
            },
            map: {
                display: !0,
                color: 14041344,
                scale: 1.5
            }
        }),
        bush_07: Ie({
            hitParticle: "leafRiver",
            explodeParticle: "leafRiver",
            img: {
                sprite: "map-bush-07.img",
                alpha: 1,
                scale: .5
            },
            sound: {
                enter: "bush_enter_02"
            }
        }),
        bush_07sp: Ie({
            hitParticle: "leafRiver",
            explodeParticle: "leafRiver",
            map: {
                display: !0,
                color: 671242,
                scale: 1.5
            },
            img: {
                sprite: "map-bush-07sp.img",
                alpha: 1,
                scale: .5
            },
            sound: {
                enter: "bush_enter_02"
            }
        }),
        bush_07x: Ie({
            img: {
                sprite: "map-bush-07x.img"
            }
        }),
        case_01: ct({
            loot: [R("deagle", 1)]
        }),
        case_02: ct({
            img: {
                sprite: "map-case-deagle-02.img"
            },
            loot: [R("deagle", 1), R("deagle", 1)]
        }),
        case_03: ct({
            health: 140,
            img: {
                sprite: "map-case-hatchet-01.img",
                residue: "map-case-hatchet-res-01.img"
            },
            loot: [x("tier_hatchet", 1, 1)],
            hitParticle: "blackChip"
        }),
        case_04: ct({
            health: 140,
            img: {
                sprite: "map-case-flare-01.img",
                residue: "map-case-flare-res-01.img"
            },
            loot: [R("flare_gun", 1)],
            hitParticle: "blackChip",
            map: {
                display: !0,
                color: 7025920,
                scale: .85
            }
        }),
        case_05: ct({
            health: 140,
            img: {
                sprite: "map-case-meteor-01.img",
                residue: "map-case-meteor-res-01.img"
            },
            loot: [R("flare_gun", 1), R("strobe", 1), R("strobe", 1), R("strobe", 1), R("strobe", 1)],
            hitParticle: "blackChip",
            map: {
                display: !1,
                color: 7025920,
                scale: .85
            }
        }),
        case_06: ct({
            health: 140,
            img: {
                sprite: "map-case-chrys-01.img"
            },
            loot: [x("tier_chest", 2, 3), x("tier_chrys_case", 1, 1)],
            hitParticle: "blackChip",
            map: {
                display: !1,
                color: 7025920,
                scale: .85
            }
        }),
        case_07: ct({
            health: 200,
            img: {
                sprite: "map-case-ring-01.img"
            },
            loot: [x("tier_ring_case", 1, 1)],
            hitParticle: "blackChip",
            map: {
                display: !1,
                color: 7025920,
                scale: .85
            }
        }),
        chest_01: xt({
            loot: [x("tier_chest", 3, 4), x("tier_pirate_melee", 1, 1), R("outfitRoyalFortune", 1)]
        }),
        chest_01cb: xt({
            loot: [x("tier_chest", 3, 4), x("tier_pirate_melee", 1, 1)]
        }),
        chest_02: xt({
            img: {
                sprite: "map-chest-02.img"
            },
            loot: [x("tier_chest", 2, 2)],
            map: {
                display: !0,
                color: 7025920,
                scale: .85
            }
        }),
        chest_03: Ct({
            img: {
                sprite: "map-chest-03.img"
            },
            loot: [x("tier_chest", 3, 5), R("outfitWaterElem", 1)]
        }),
        chest_03cb: Ct({
            img: {
                sprite: "map-chest-03.img"
            },
            loot: [x("tier_chest", 3, 5)]
        }),
        chest_03d: Ct({
            img: {
                sprite: "map-chest-03d.img"
            },
            loot: [x("tier_chest", 3, 5), R("outfitWaterElem", 1)]
        }),
        chest_03f: Ct({
            img: {
                sprite: "map-chest-03f.img"
            },
            loot: [x("tier_chest", 3, 5), R("outfitKhaki", 1)]
        }),
        chest_03x: Ct({
            img: {
                sprite: "map-chest-03x.img"
            },
            loot: [x("tier_chest", 3, 5), R("outfitWaterElem", 1)]
        }),
        chest_04: xt({
            health: 200,
            img: {
                sprite: "map-case-basement-01.img"
            },
            loot: [x("tier_noir_outfit", 1, 1), x("tier_chest_04", 1, 1), R("glock_dual", 1), R("smoke", 4)],
            map: {
                display: !1,
                color: 7025920,
                scale: .85
            }
        }),
        chest_04d: xt({
            health: 200,
            img: {
                sprite: "map-case-basement-01.img"
            },
            loot: [x("tier_noir_outfit", 1, 1), x("tier_chest_04", 1, 1), R("9mm", 300), R("smoke", 4), R("backpack02", 1)],
            map: {
                display: !1,
                color: 7025920,
                scale: .85
            }
        }),
        control_panel_01: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.7)),
            button: {
                interactionRad: .75,
                interactionText: "game-use",
                useOnce: !0,
                useType: "cell_door_01",
                useDelay: 1.1,
                useDir: e.create(-1, 0),
                useImg: "map-control-panel-02.img",
                sound: {
                    on: "cell_control_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-control-panel-01.img"
            }
        }),
        control_panel_02: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.7)),
            health: 175,
            img: {
                sprite: "map-control-panel-02.img"
            }
        }),
        control_panel_02b: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.7)),
            destructible: !1,
            button: {
                interactionRad: .2,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(-1, 0),
                useImg: "map-control-panel-01.img",
                sound: {
                    on: "button_press_01",
                    off: "button_press_01"
                }
            },
            img: {
                sprite: "map-control-panel-02.img"
            }
        }),
        control_panel_03: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.25, 1.2)),
            health: 150,
            img: {
                sprite: "map-control-panel-03.img"
            }
        }),
        control_panel_04: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.7)),
            button: {
                interactionRad: .75,
                interactionText: "game-use",
                useOnce: !0,
                useType: "crossing_door_01",
                useDelay: 4.25,
                useDir: e.create(1, 0),
                useImg: "map-control-panel-05.img",
                sound: {
                    on: "cell_control_02",
                    off: ""
                }
            },
            img: {
                sprite: "map-control-panel-04.img"
            }
        }),
        control_panel_06: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 1.2)),
            health: 200,
            img: {
                sprite: "map-control-panel-06.img"
            }
        }),
        switch_01: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.45, .55)),
            destructible: !1,
            button: {
                interactionRad: .2,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(-1, 0),
                useImg: "map-switch-02.img",
                offImg: "map-switch-03.img",
                sound: {
                    on: "button_press_01",
                    off: "button_press_01"
                }
            },
            img: {
                sprite: "map-switch-01.img"
            }
        }),
        switch_02: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.45, .55)),
            destructible: !1,
            img: {
                sprite: "map-switch-02.img"
            }
        }),
        switch_03: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.45, .55)),
            destructible: !1,
            button: {
                interactionRad: .2,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(-1, 0),
                useImg: "map-switch-02.img",
                offImg: "map-switch-02.img",
                sound: {
                    on: "button_press_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-switch-01.img"
            }
        }),
        couch_01: Kt({}),
        couch_02: Kt({
            collision: n.createAabbExtents(e.create(0, 0), e.create(3, 1.5)),
            img: {
                sprite: "map-couch-02.img"
            }
        }),
        couch_02b: Kt({
            collision: n.createAabbExtents(e.create(0, 0), e.create(3, 1.5)),
            img: {
                sprite: "map-couch-02.img",
                mirrorY: !0
            }
        }),
        couch_03: Kt({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            img: {
                sprite: "map-couch-03.img"
            }
        }),
        crate_01: te({}),
        crate_01x: te({
            img: {
                sprite: "map-crate-01x.img"
            }
        }),
        crate_02: te({
            health: 140,
            loot: [x("tier_soviet", 3, 5)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-02.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_02sv: te({
            health: 140,
            loot: [x("tier_soviet", 4, 5), x("tier_world", 1, 1)],
            map: {
                display: !0,
                color: 16760832
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-02sv.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_02sv_lake: te({
            health: 140,
            loot: [x("tier_soviet", 5, 6)],
            map: {
                display: !0,
                color: 16760832
            },
            terrain: {
                lakeCenter: !0
            },
            img: {
                sprite: "map-crate-02sv.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_02x: te({
            health: 140,
            loot: [x("tier_soviet", 3, 5)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-02x.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_02f: te({
            health: 140,
            loot: [x("tier_guns", 3, 3), x("tier_armor", 2, 2), x("tier_packs", 1, 1)],
            map: {
                display: !0,
                color: 13369344
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-02f.img"
            },
            sound: {
                explode: "crate_break_01"
            },
            teamId: 1
        }),
        crate_02d: te({
            health: 140,
            loot: [R("m1014", 1, 1), R("helmet03_lt_aged", 1, 1), R("outfitRedLeaderAged", 1, 1), R("machete_taiga", 1, 1)],
            map: {
                display: !0,
                color: 13369344
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-02f.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_03: te({
            health: 100,
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.575, 1.575)),
            loot: [x("tier_throwables", 2, 4)],
            map: {
                color: 5066014,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-03.img",
                scale: .35
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_03x: te({
            health: 100,
            hitParticle: "glassChip",
            explodeParticle: ["glassPlank"],
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.575, 1.575)),
            loot: [R("snowball", 4, 4), R("snowball", 4, 4), R("snowball", 4, 4)],
            map: {
                color: 31863,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-03x.img",
                scale: .35
            },
            sound: {
                explode: "crate_break_02"
            }
        }),
        crate_04: te({
            health: 225,
            destructible: !0,
            armorPlated: !0,
            hitParticle: "greenChip",
            loot: [x("tier_ammo_crate", 1, 1)],
            map: {
                display: !0,
                color: 5468244,
                scale: .875
            },
            img: {
                sprite: "map-crate-04.img"
            },
            sound: {
                bullet: "ammo_crate_bullet",
                punch: "ammo_crate_bullet",
                explode: "crate_break_01"
            }
        }),
        crate_05: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2, 2)),
            destructible: !1,
            hitParticle: "goldChip",
            loot: [],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-05.img"
            },
            sound: {
                bullet: "wall_brick_bullet",
                punch: "wall_brick_bullet"
            }
        }),
        crate_06: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 1.1)),
            health: 175,
            destructible: !0,
            armorPlated: !0,
            hitParticle: "greenChip",
            loot: [x("tier_ammo", 1, 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-06.img"
            },
            sound: {
                bullet: "ammo_crate_bullet",
                punch: "ammo_crate_bullet"
            }
        }),
        crate_07: te({
            health: 140,
            loot: [x("tier_surviv", 4, 5), R("ak47", 1), R("ak47", 1), R("ak47", 1), R("ak47", 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1)],
            img: {
                sprite: "map-crate-07.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_07b: te({
            health: 140,
            loot: [x("tier_armor", 4, 5), R("mp220", 1), R("mp220", 1), R("bar", 1), R("bar", 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1)],
            img: {
                sprite: "map-crate-07.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_07sv: te({
            health: 140,
            loot: [x("tier_surviv", 4, 5), R("svd", 1), R("svd", 1), R("blr", 1), R("blr", 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1), x("tier_khaki_outfit", 1, 1)],
            img: {
                sprite: "map-crate-07.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_08: te({
            health: 140,
            loot: [x("tier_surviv", 2, 3)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-08.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_09: te({
            health: 140,
            loot: [x("tier_chest", 1, 2), x("tier_conch", 1, 1)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-09.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_10: te({
            health: 200,
            scale: {
                destroy: .75
            },
            loot: [x("tier_airdrop_uncommon", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-10.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_11: te({
            scale: {
                destroy: .75
            },
            health: 200,
            loot: [x("tier_airdrop_rare", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-11.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_11h: te({
            collision: n.createCircle(e.create(0, 0), 2.25),
            isDecalAnchor: !0,
            scale: {
                destroy: .75
            },
            health: 200,
            loot: [x("tier_airdrop_rare", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1), x("tier_airdrop_xp", 2, 2)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-11h.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_10sv: te({
            health: 200,
            scale: {
                destroy: .75
            },
            loot: [x("tier_airdrop_uncommon", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1), x("tier_perks", 1, 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-10.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_11sv: te({
            scale: {
                destroy: .75
            },
            health: 200,
            loot: [x("tier_airdrop_rare", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1), x("tier_perks", 2, 2)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-11.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_11de: te({
            scale: {
                destroy: .75
            },
            health: 200,
            loot: [x("tier_airdrop_rare", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1), x("tier_perks", 1, 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-11.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_11tr: te({
            scale: {
                destroy: .75
            },
            health: 200,
            loot: [x("tier_airdrop_rare", 1, 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 2, 2), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_outfits", 1, 1), x("tier_airdrop_melee", 1, 1), x("tier_airdrop_ammo", 3, 3), x("tier_airdrop_throwables", 1, 1), x("tier_airdrop_xp", 2, 2)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-11.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_12: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(3.5, 3.5)),
            scale: {
                destroy: .75
            },
            health: 500,
            loot: [x("tier_airdrop_rare", 2, 2, {
                preloadGuns: !0
            }), x("tier_airdrop_uncommon", 4, 6, {
                preloadGuns: !0
            }), x("tier_airdrop_armor", 4, 5), x("tier_medical", 12, 15), x("tier_airdrop_scopes", 6, 8), x("tier_airdrop_outfits", 3, 4), x("tier_airdrop_melee", 5, 7), x("tier_airdrop_ammo", 10, 12), x("tier_airdrop_throwables", 6, 8), x("tier_katanas", 1, 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-12.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_13: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(3.5, 3.5)),
            scale: {
                destroy: .75
            },
            health: 200,
            loot: [x("tier_airdrop_mythic", 3, 4, {
                preloadGuns: !0
            }), x("tier_airdrop_rare", 3, 4, {
                preloadGuns: !0
            }), x("tier_airdrop_armor", 6, 8), x("tier_medical", 12, 15), x("tier_airdrop_scopes", 6, 8), x("tier_airdrop_faction_outfits", 1, 2), x("tier_airdrop_faction_melee", 3, 4), x("tier_airdrop_ammo", 10, 12), x("tier_airdrop_throwables", 6, 8), x("tier_katanas", 1, 1), R("strobe", 1), R("strobe", 1), R("strobe", 1)],
            map: {
                display: !1
            },
            img: {
                sprite: "map-crate-13.img",
                residue: "map-crate-res-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_14: te({
            explodeParticle: ["windowBreak", "woodPlank"],
            loot: [x("tier_throwables", 1, 1)],
            img: {
                sprite: "map-crate-14.img"
            },
            sound: {
                explode: "window_break_02"
            }
        }),
        crate_14a: te({
            explodeParticle: ["windowBreak", "woodPlank"],
            loot: [x("tier_soviet", 1, 1)],
            img: {
                sprite: "map-crate-14a.img"
            },
            sound: {
                explode: "window_break_02"
            }
        }),
        crate_15: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [x("tier_knives", 4, 4)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-14.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_16: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [x("tier_knives", 4, 4)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-14.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_18: te({
            health: 140,
            loot: [x("tier_cattle_crate", 2, 3), x("tier_soviet", 1, 2)],
            map: {
                display: !0,
                color: 12867840,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-18.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_19: te({
            health: 140,
            loot: [x("tier_guns", 1, 3), x("tier_surviv", 2, 3)],
            map: {
                display: !0,
                color: 4500224,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-19.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_20: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.7, 1.7)),
            health: 75,
            hitParticle: "greenChip",
            explodeParticle: "greenPlank",
            loot: [x("tier_armor", 1, 1), x("tier_world", 1, 1)],
            map: {
                display: !0,
                color: 3884335,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-20.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_21: te({
            health: 140,
            loot: [x("tier_guns", 1, 2), x("tier_snipers", 1, 1), x("tier_cloud_02", 1, 1), x("tier_perks", 1, 1)],
            map: {
                display: !0,
                color: 18799,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-21.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_21b: te({
            health: 140,
            loot: [x("tier_guns", 1, 2), x("tier_snipers", 1, 1), x("tier_cloud_02", 1, 1), x("tier_perks", 1, 1)],
            map: {
                display: !1,
                color: 18799,
                scale: .875
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-21.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        crate_22: te({
            health: 140,
            loot: [x("tier_guns", 3, 3), x("tier_armor", 2, 2), x("tier_packs", 1, 1)],
            map: {
                display: !0,
                color: 32511
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-22.img"
            },
            sound: {
                explode: "crate_break_01"
            },
            teamId: 2
        }),
        crate_22d: te({
            health: 140,
            loot: [R("an94", 1, 1), R("helmet03_lt_aged", 1, 1), R("outfitBlueLeaderAged", 1, 1), R("kukri_trad", 1, 1)],
            map: {
                display: !0,
                color: 32511
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-crate-22.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        airdrop_crate_01: qe({
            button: {
                useImg: "map-airdrop-02.img",
                useParticle: "airdropCrate01",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01.img",
                residue: "none"
            },
            destroyType: "crate_10",
            explodeParticle: "airdropCrate02"
        }),
        airdrop_crate_02: qe({
            button: {
                useImg: "map-airdrop-02.img",
                useParticle: "airdropCrate01",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01.img",
                residue: "none"
            },
            destroyType: "crate_11",
            explodeParticle: "airdropCrate02"
        }),
        airdrop_crate_03: qe({
            collision: n.createAabbExtents(e.create(0, 0), e.create(4, 4)),
            button: {
                useImg: "map-airdrop-04.img",
                useParticle: "airdropCrate03",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-03.img",
                residue: "none"
            },
            destroyType: "crate_12",
            explodeParticle: "airdropCrate04"
        }),
        airdrop_crate_04: qe({
            collision: n.createAabbExtents(e.create(0, 0), e.create(4, 4)),
            button: {
                useImg: "map-airdrop-04.img",
                useParticle: "airdropCrate03",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-03.img",
                residue: "none"
            },
            destroyType: "crate_13",
            explodeParticle: "airdropCrate04"
        }),
        airdrop_crate_01sv: qe({
            button: {
                useImg: "map-airdrop-02.img",
                useParticle: "airdropCrate01",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01.img",
                residue: "none"
            },
            destroyType: "crate_10sv",
            explodeParticle: "airdropCrate02"
        }),
        airdrop_crate_02sv: qe({
            button: {
                useImg: "map-airdrop-02.img",
                useParticle: "airdropCrate01",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01.img",
                residue: "none"
            },
            destroyType: "crate_11sv",
            explodeParticle: "airdropCrate02"
        }),
        airdrop_crate_02de: qe({
            button: {
                useImg: "map-airdrop-02.img",
                useParticle: "airdropCrate01",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01.img",
                residue: "none"
            },
            destroyType: "crate_11de",
            explodeParticle: "airdropCrate02"
        }),
        airdrop_crate_02h: qe({
            collision: n.createCircle(e.create(0, 0), 2.5),
            button: {
                useImg: "map-airdrop-02h.img",
                useParticle: "airdropCrate01h",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01h.img",
                residue: "none"
            },
            destroyType: "cache_pumpkin_airdrop_02",
            explodeParticle: "airdropCrate02h"
        }),
        airdrop_crate_02tr: qe({
            button: {
                useImg: "map-airdrop-02.img",
                useParticle: "airdropCrate01",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01.img",
                residue: "none"
            },
            destroyType: "crate_11tr",
            explodeParticle: "airdropCrate02"
        }),
        airdrop_crate_01x: qe({
            button: {
                useImg: "map-airdrop-02x.img",
                useParticle: "airdropCrate01x",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01x.img",
                residue: "none"
            },
            destroyType: "crate_10",
            explodeParticle: "airdropCrate02x"
        }),
        airdrop_crate_02x: qe({
            button: {
                useImg: "map-airdrop-02x.img",
                useParticle: "airdropCrate01x",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-airdrop-01x.img",
                residue: "none"
            },
            destroyType: "crate_11",
            explodeParticle: "airdropCrate02x"
        }),
        class_shell_01: qe({
            collision: n.createCircle(e.create(0, 0), 2.25),
            button: {
                useImg: "map-class-shell-01b.img",
                useParticle: "classShell01a",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-class-shell-01a.img",
                residue: "none"
            },
            destroyType: "class_crate_common",
            smartLoot: !0,
            explodeParticle: "classShell01b"
        }),
        class_shell_02: qe({
            collision: n.createCircle(e.create(0, 0), 2.25),
            button: {
                useImg: "map-class-shell-02b.img",
                useParticle: "classShell02a",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-class-shell-02a.img",
                residue: "none"
            },
            destroyType: "class_crate_rare",
            smartLoot: !0,
            explodeParticle: "classShell02b"
        }),
        class_shell_03: qe({
            collision: n.createCircle(e.create(0, 0), 2.25),
            button: {
                useImg: "map-class-shell-03b.img",
                useParticle: "classShell03a",
                sound: {
                    on: "airdrop_open_01",
                    off: ""
                }
            },
            img: {
                sprite: "map-class-shell-03a.img",
                residue: "none",
                zIdx: 20
            },
            destroyType: "class_crate_mythic",
            explodeParticle: "classShell03b"
        }),
        class_crate_common_scout: Ge({
            loot: [x("tier_guns_common_scout", 1, 1), R("crowbar_scout", 1), R("helmet01", 1), R("backpack01", 1), R("soda", 1), R("soda", 1), R("soda", 1)],
            img: {
                sprite: "map-class-crate-scout.img"
            }
        }),
        class_crate_common_sniper: Ge({
            loot: [x("tier_guns_common_sniper", 1, 1), R("kukri_sniper", 1), R("helmet01", 1), R("backpack01", 1), R("4xscope", 1)],
            img: {
                sprite: "map-class-crate-sniper.img"
            }
        }),
        class_crate_common_healer: Ge({
            loot: [x("tier_guns_common_healer", 1, 1), R("bonesaw_healer", 1), R("helmet01", 1), R("backpack01", 1), R("healthkit", 1), R("painkiller", 1), R("smoke", 3)],
            img: {
                sprite: "map-class-crate-healer.img"
            }
        }),
        class_crate_common_demo: Ge({
            loot: [x("tier_guns_common_demo", 1, 1), R("katana_demo", 1), R("helmet01", 1), R("backpack02", 1), R("mirv", 1), R("mirv", 1), R("mirv", 1), R("mirv", 1), R("mirv", 1), R("mirv", 1)],
            img: {
                sprite: "map-class-crate-demo.img"
            }
        }),
        class_crate_common_assault: Ge({
            loot: [x("tier_guns_common_assault", 2, 2), R("spade_assault", 1), R("helmet01", 1), R("backpack01", 1)],
            img: {
                sprite: "map-class-crate-assault.img"
            }
        }),
        class_crate_common_tank: Ge({
            loot: [x("tier_guns_common_tank", 1, 1), R("warhammer_tank", 1), R("helmet02", 1), R("chest02", 1), R("backpack01", 1)],
            img: {
                sprite: "map-class-crate-tank.img"
            }
        }),
        class_crate_rare_scout: Ge({
            loot: [x("tier_guns_rare_scout", 1, 1), R("crowbar_scout", 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 1, 1), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_ammo", 2, 2), x("tier_airdrop_throwables", 1, 1)],
            img: {
                sprite: "map-class-crate-scout.img"
            }
        }),
        class_crate_rare_sniper: Ge({
            loot: [x("tier_guns_rare_sniper", 1, 1), R("kukri_sniper", 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 1, 1), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_ammo", 2, 2), x("tier_airdrop_throwables", 1, 1)],
            img: {
                sprite: "map-class-crate-sniper.img"
            }
        }),
        class_crate_rare_healer: Ge({
            loot: [x("tier_guns_rare_healer", 1, 1), R("bonesaw_healer", 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 1, 1), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_ammo", 2, 2), x("tier_airdrop_throwables", 1, 1)],
            img: {
                sprite: "map-class-crate-healer.img"
            }
        }),
        class_crate_rare_demo: Ge({
            loot: [x("tier_guns_rare_demo", 1, 1), R("katana_demo", 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 1, 1), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_ammo", 2, 2), x("tier_airdrop_throwables", 1, 1)],
            img: {
                sprite: "map-class-crate-demo.img"
            }
        }),
        class_crate_rare_assault: Ge({
            loot: [x("tier_guns_rare_assault", 2, 2), R("spade_assault", 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 1, 1), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_ammo", 2, 2), x("tier_airdrop_throwables", 1, 1)],
            img: {
                sprite: "map-class-crate-assault.img"
            }
        }),
        class_crate_rare_tank: Ge({
            loot: [x("tier_guns_rare_tank", 1, 1), R("warhammer_tank", 1), x("tier_airdrop_armor", 1, 1), x("tier_medical", 1, 1), x("tier_airdrop_scopes", 1, 1), x("tier_airdrop_ammo", 2, 2), x("tier_airdrop_throwables", 1, 1)],
            img: {
                sprite: "map-class-crate-tank.img"
            }
        }),
        class_crate_mythic: Ge({
            loot: [x("tier_class_crate_mythic", 1, 1)],
            img: {
                sprite: "map-class-crate-03.img"
            }
        }),
        mil_crate_01: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [x("tier_knives", 1, 1)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-mil-01.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        mil_crate_02: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [R("ot38", 1), R("ot38", 1), R("ot38", 1), R("ot38", 1)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-mil-02.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        mil_crate_03: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [R("ots38_dual", 1)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-mil-03.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        mil_crate_04: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [x("tier_guns", 1, 1), x("tier_throwables", 2, 3)],
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-mil-04.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        mil_crate_05: te({
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.7, 1.25)),
            health: 100,
            loot: [x("tier_guns", 1, 2), x("tier_snipers", 1, 2)],
            map: {
                display: !0,
                color: 3622438
            },
            terrain: {
                grass: !0,
                beach: !0
            },
            img: {
                sprite: "map-crate-mil-05.img"
            },
            sound: {
                explode: "crate_break_01"
            }
        }),
        bottle_01: Ze({
            collision: n.createCircle(e.create(0, 0), .5),
            health: 12,
            hitParticle: "bottleBrownChip",
            explodeParticle: "bottleBrownBreak",
            img: {
                sprite: "map-bottle-01.img",
                residue: "none"
            },
            loot: [],
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        }),
        bottle_02: Ze({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.5, .5)),
            health: 20,
            hitParticle: "bottleBlueChip",
            explodeParticle: "bottleBlueBreak",
            img: {
                sprite: "map-bottle-02.img",
                residue: "none"
            },
            loot: [],
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        }),
        bottle_02r: nt({
            img: {
                tint: 13172736
            }
        }),
        bottle_02o: nt({
            collidable: !1,
            img: {
                tint: 16734720
            }
        }),
        bottle_02y: nt({
            collidable: !1,
            img: {
                tint: 16776960
            }
        }),
        bottle_02g: nt({
            collidable: !1,
            img: {
                tint: 32768
            }
        }),
        bottle_02b: nt({
            img: {
                tint: 27903
            }
        }),
        bottle_02i: nt({
            collidable: !1,
            img: {
                tint: 4915330
            }
        }),
        bottle_02v: nt({
            img: {
                tint: 15631086
            }
        }),
        bottle_04: Ze({
            collision: n.createCircle(e.create(0, 0), .5),
            health: 20,
            hitParticle: "bottleWhiteChip",
            explodeParticle: "bottleWhiteBreak",
            img: {
                sprite: "map-bottle-04.img",
                residue: "none"
            },
            loot: [],
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        }),
        bottle_05: Ze({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.5, .5)),
            health: 20,
            hitParticle: "bottleWhiteChip",
            explodeParticle: "bottleWhiteBreak",
            img: {
                sprite: "map-bottle-05.img",
                residue: "none"
            },
            loot: [],
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        }),
        candle_01: {
            type: "obstacle",
            map: {
                display: !1,
                color: 16777215,
                scale: 1
            },
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .5
            },
            collision: n.createCircle(e.create(0, 0), .5),
            height: .5,
            collidable: !1,
            destructible: !1,
            health: 150,
            hitParticle: "goldChip",
            explodeParticle: "barrelBreak",
            reflectBullets: !1,
            loot: [],
            img: {
                sprite: "map-candle-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "none",
                punch: "none",
                explode: "none",
                enter: "none"
            }
        },
        deposit_box_01: Aa({
            img: {
                sprite: "map-deposit-box-01.img"
            },
            loot: [x("tier_world", 1, 1)]
        }),
        deposit_box_02: Aa({
            explodeParticle: "depositBoxGoldBreak",
            img: {
                sprite: "map-deposit-box-02.img"
            },
            loot: [x("tier_soviet", 1, 2), x("tier_guns", 1, 1)]
        }),
        drawers_01: Da({
            img: {
                sprite: "map-drawers-01.img"
            },
            loot: [x("tier_container", 1, 1)]
        }),
        drawers_02: Da({
            img: {
                sprite: "map-drawers-02.img"
            },
            loot: [x("tier_soviet", 2, 3)]
        }),
        fire_ext_01: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(.35, 0), 1),
            height: .5,
            collidable: !0,
            destructible: !0,
            createSmoke: !0,
            health: 75,
            hitParticle: "redChip",
            explodeParticle: "redBreak",
            reflectBullets: !0,
            loot: [],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-fire-ext-01.img",
                residue: "map-fire-ext-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "barrel_bullet",
                punch: "barrel_bullet",
                explode: "explosion_smoke_01",
                enter: "none"
            }
        },
        grill_01: Oa({
            collision: n.createCircle(e.create(0, 0), 1.55),
            img: {
                sprite: "map-grill-01.img"
            }
        }),
        gun_mount_01: At({
            loot: [R("m870", 1)],
            img: {
                sprite: "map-gun-mount-01.img"
            }
        }),
        gun_mount_02: At({
            loot: [R("mp220", 1)],
            img: {
                sprite: "map-gun-mount-02.img"
            }
        }),
        gun_mount_03: At({
            loot: [R("qbb97", 1)],
            img: {
                sprite: "map-gun-mount-03.img"
            }
        }),
        gun_mount_04: At({
            loot: [R("woodaxe_bloody", 1)],
            img: {
                sprite: "map-gun-mount-04.img"
            }
        }),
        gun_mount_05: At({
            loot: [R("m1100", 1)],
            img: {
                sprite: "map-gun-mount-05.img"
            }
        }),
        locker_01: vr({
            img: {
                sprite: "map-locker-01.img"
            },
            loot: [x("tier_world", 1, 1)]
        }),
        locker_02: vr({
            img: {
                sprite: "map-locker-02.img"
            },
            loot: [x("tier_police", 1, 1)]
        }),
        locker_03: vr({
            img: {
                sprite: "map-locker-03.img"
            },
            loot: [R("ak47", 1, 1), R("backpack02", 1, 1)]
        }),
        oven_01: Oa({}),
        piano_01: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(3.75, 1)),
            height: .5,
            collidable: !0,
            destructible: !1,
            health: 75,
            hitParticle: "woodChip",
            explodeParticle: ["woodPlank", "book"],
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-piano-01.img",
                residue: "map-drawers-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "piano_hit",
                punch: "piano_hit",
                explode: "drawers_break_01",
                enter: "none"
            }
        },
        planter_01: ft({}),
        planter_02: ft({
            img: {
                sprite: "map-planter-02.img"
            }
        }),
        planter_03: ft({
            img: {
                sprite: "map-planter-03.img"
            }
        }),
        planter_04: ft({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            img: {
                sprite: "map-planter-04.img"
            },
            destructible: !1,
            button: {
                interactionRad: .1,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: .25,
                useDir: e.create(1, 0),
                useImg: "map-planter-05.img",
                sound: {
                    on: "watering_01",
                    off: "watering_01"
                }
            }
        }),
        planter_06: ft({
            img: {
                sprite: "map-planter-06.img",
                residue: "map-planter-res-02.img"
            }
        }),
        planter_07: ft({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            img: {
                sprite: "map-planter-07.img",
                residue: "map-planter-res-03.img"
            },
            destructible: !0
        }),
        pot_01: Ze({}),
        pot_02: Ze({
            img: {
                sprite: "map-pot-02.img"
            },
            loot: [R("spas12", 1)]
        }),
        pot_03: Ze({
            img: {
                sprite: "map-pot-03.img"
            }
        }),
        pot_03b: Ze({
            img: {
                sprite: "map-pot-03.img"
            },
            loot: [R("outfitWoodsCloak", 1), R("backpack03", 1)]
        }),
        pot_03c: Ze({
            img: {
                sprite: "map-pot-03.img"
            },
            loot: [x("tier_pavilion", 1, 1)]
        }),
        pot_04: Ze({
            img: {
                sprite: "map-pot-04.img"
            }
        }),
        pot_05: Ze({
            img: {
                sprite: "map-pot-05.img"
            },
            loot: [R("scout_elite", 1), x("tier_islander_outfit", 1, 1)]
        }),
        potato_01: Ir({}),
        potato_02: Ir({
            img: {
                sprite: "map-potato-02.img"
            }
        }),
        potato_03: Ir({
            img: {
                sprite: "map-potato-03.img"
            }
        }),
        power_box_01: Ve({}),
        pumpkin_01: er({
            loot: [x("tier_outfits", 1, 1), x("tier_pumpkin_candy", 1, 1)]
        }),
        pumpkin_02: er({
            health: 140,
            img: {
                sprite: "map-pumpkin-02.img"
            },
            loot: [x("tier_guns", 1, 2), x("tier_pumpkin_candy", 1, 2), x("tier_outfits", 1, 1)]
        }),
        pumpkin_03: er({
            collision: n.createCircle(e.create(0, 0), 1.25),
            map: {
                display: !1
            },
            img: {
                sprite: "map-pumpkin-03.img",
                residue: "map-pumpkin-res-03.img"
            },
            loot: [x("tier_pumpkin_perks", 1, 1), x("tier_fruit_xp", 1, 1)]
        }),
        squash_01: er({
            collision: n.createCircle(e.create(0, 0), 1.25),
            map: {
                display: !1
            },
            img: {
                sprite: "map-squash-01.img",
                residue: "map-squash-res-01.img"
            },
            hitParticle: "squashChip",
            explodeParticle: "squashBreak",
            loot: [R("turkey_shoot", 1, 1), x("tier_fruit_xp", 1, 1)]
        }),
        refrigerator_01: Ea({}),
        refrigerator_01b: Ea({
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            health: 250
        }),
        recorder_01: Fe({
            button: {
                sound: {
                    on: "log_01"
                }
            }
        }),
        recorder_02: Fe({
            button: {
                sound: {
                    on: "log_02"
                }
            }
        }),
        recorder_03: Fe({
            button: {
                sound: {
                    on: "log_03"
                }
            }
        }),
        recorder_04: Fe({
            button: {
                sound: {
                    on: "log_04"
                }
            }
        }),
        recorder_05: Fe({
            button: {
                sound: {
                    on: "log_05"
                }
            }
        }),
        recorder_06: Fe({
            button: {
                sound: {
                    on: "log_06"
                }
            }
        }),
        recorder_07: Fe({
            button: {
                sound: {
                    on: "footstep_07"
                }
            }
        }),
        recorder_08: Fe({
            button: {
                sound: {
                    on: "footstep_08"
                }
            }
        }),
        recorder_09: Fe({
            button: {
                sound: {
                    on: "footstep_09"
                }
            }
        }),
        recorder_10: Fe({
            button: {
                sound: {
                    on: "cell_control_03"
                }
            }
        }),
        recorder_11: Fe({
            button: {
                sound: {
                    on: "log_11"
                },
                useImg: "map-recorder-04.img"
            },
            img: {
                sprite: "map-recorder-03.img"
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 1.25))
        }),
        recorder_12: Fe({
            button: {
                sound: {
                    on: "log_12"
                },
                useImg: "map-recorder-04.img"
            },
            img: {
                sprite: "map-recorder-03.img"
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 1.25))
        }),
        recorder_13: Fe({
            button: {
                sound: {
                    on: "log_13"
                },
                useImg: "map-recorder-04.img"
            },
            img: {
                sprite: "map-recorder-03.img"
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 1.25))
        }),
        recorder_14: Fe({
            button: {
                sound: {
                    on: "log_14"
                },
                useImg: "map-recorder-04.img"
            },
            img: {
                sprite: "map-recorder-03.img"
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 1.25))
        }),
        screen_01: {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .85
            },
            collision: n.createAabbExtents(e.create(0, .05), e.create(4, .2)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 25,
            hitParticle: "clothHit",
            explodeParticle: "barrelBreak",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-screen-01.img",
                residue: "map-screen-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "cloth_bullet",
                punch: "cloth_punch",
                explode: "screen_break_01",
                enter: "none"
            }
        },
        sandbags_01: Ba({}),
        sandbags_02: Ba({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.1, 1.4)),
            img: {
                sprite: "map-sandbags-02.img"
            }
        }),
        silo_01: Ra({}),
        silo_01po: Ra({
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .9
            },
            destructible: !0,
            health: 2500,
            loot: [R("potato_smg", 1, 1)],
            img: {
                residue: "map-smoke-res.img",
                tint: 16749645
            }
        }),
        stairs_01: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2)),
            height: .5,
            collidable: !1,
            destructible: !0,
            health: 100,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-stairs-broken-01.img",
                residue: "map-table-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 60
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "crate_break_01",
                enter: "none"
            }
        },
        stand_01: {
            type: "obstacle",
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            collision: n.createAabbExtents(e.create(0, .15), e.create(1.25, 1.25)),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 75,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            reflectBullets: !1,
            loot: [x("tier_world", 1, 1)],
            map: {
                display: !1,
                color: 6697728,
                scale: .875
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            img: {
                sprite: "map-stand-01.img",
                residue: "map-drawers-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "drawers_break_01",
                enter: "none"
            }
        },
        stone_01: Me({}),
        stone_01b: Me({
            img: {
                residue: "map-stone-res-01b.img"
            }
        }),
        stone_01cb: Me({
            map: {
                display: !0,
                color: 10265256,
                scale: 1
            },
            img: {
                sprite: "map-stone-01cb.img",
                residue: "map-stone-res-01cb.img"
            }
        }),
        stone_01f: Me({
            map: {
                display: !0,
                color: 8224125,
                scale: 1
            }
        }),
        stone_01sv: Me({
            scale: {
                createMin: 1.2,
                createMax: 1.5,
                destroy: .5
            }
        }),
        stone_01x: Me({
            map: {
                display: !0,
                color: 6052956,
                scale: 1
            },
            img: {
                sprite: "map-stone-01x.img",
                residue: "map-stone-res-01x.img"
            }
        }),
        stone_02: Me({
            img: {
                tint: 15066597
            },
            loot: [x("tier_surviv", 2, 3), R("ak47", 1)]
        }),
        stone_02sv: Me({
            img: {
                tint: 15066597
            },
            loot: [x("tier_surviv", 2, 3), R("m39", 1), x("tier_perks", 1, 1)]
        }),
        stone_03: Dt({}),
        stone_03b: Dt({
            img: {
                sprite: "map-stone-03b.img",
                residue: "map-stone-res-01.img"
            }
        }),
        stone_03cb: Dt({
            img: {
                sprite: "map-stone-03cb.img",
                residue: "map-stone-res-02cb.img"
            }
        }),
        stone_03f: Dt({
            img: {
                sprite: "map-stone-03f.img",
                residue: "map-stone-res-02f.img"
            }
        }),
        stone_03x: Dt({
            img: {
                sprite: "map-stone-03x.img",
                residue: "map-stone-res-02x.img"
            }
        }),
        stone_04: Me({
            stonePlated: !0,
            scale: {
                createMin: .8,
                createMax: .8,
                destroy: .75
            },
            hitParticle: "rockEyeChip",
            explodeParticle: "rockEyeBreak",
            loot: [x("tier_eye_block", 1, 1)],
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            map: {
                display: !0,
                color: 1512466,
                scale: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.8, 1.8)),
            img: {
                sprite: "map-stone-04.img",
                residue: "map-stone-res-04.img"
            }
        }),
        stone_05: Me({
            stonePlated: !0,
            hitParticle: "rockEyeChip",
            explodeParticle: "rockEyeBreak",
            loot: [x("tier_eye_stone", 1, 1)],
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            map: {
                display: !0,
                color: 1512466,
                scale: 1
            },
            collision: n.createCircle(e.create(0, 0), 1.7),
            img: {
                sprite: "map-stone-05.img",
                residue: "map-stone-res-01b.img"
            }
        }),
        stone_06: Me({
            stonePlated: !0,
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            height: 10,
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            },
            map: {
                display: !0,
                color: 3618615,
                scale: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.5, 2)),
            img: {
                sprite: "map-stone-06.img",
                scale: .5,
                residue: "map-stone-res-06.img"
            }
        }),
        stone_07: Me({
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            collision: n.createCircle(e.create(0, 0), 7.75),
            health: 500,
            map: {
                display: !0,
                color: 9931908,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-stone-07.img",
                residue: "map-stone-res-07.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            }
        }),
        stove_01: Ve({
            obstacleType: "furniture",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .85
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(3, 2.25)),
            disableBuildingOccupied: !0,
            damageCeiling: !0,
            explosion: "explosion_stove",
            height: 10,
            health: 500,
            img: {
                sprite: "map-stove-01.img"
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "oven_break_01",
                enter: "none"
            }
        }),
        stove_02: Ve({
            obstacleType: "furniture",
            collision: n.createCircle(e.create(0, 0), 1.5),
            disableBuildingOccupied: !0,
            damageCeiling: !0,
            explosion: "explosion_stove",
            height: 10,
            health: 400,
            img: {
                sprite: "map-stove-02.img"
            },
            sound: {
                bullet: "wall_bullet",
                punch: "metal_punch",
                explode: "oven_break_01",
                enter: "none"
            }
        }),
        table_01: yt({}),
        table_01x: yt({
            img: {
                sprite: "map-table-01x.img"
            }
        }),
        table_02: yt({
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.5, 2.5)),
            health: 125,
            img: {
                sprite: "map-table-02.img",
                residue: "map-table-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 60
            }
        }),
        table_02x: yt({
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.5, 2.5)),
            health: 125,
            img: {
                sprite: "map-table-02x.img",
                residue: "map-table-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 60
            }
        }),
        table_03: yt({
            collision: n.createCircle(e.create(0, 0), 2.5),
            health: 125,
            img: {
                sprite: "map-table-03.img",
                residue: "map-table-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 60
            }
        }),
        table_03x: yt({
            collision: n.createCircle(e.create(0, 0), 2.5),
            health: 125,
            img: {
                sprite: "map-table-03x.img",
                residue: "map-table-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 60
            }
        }),
        tire_01: function(r) {
            const t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: n.createCircle(e.create(0, 0), 1.75),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 1500,
                hitParticle: "blackChip",
                explodeParticle: "barrelBreak",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !0,
                    color: 6708838,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-tire-01.img",
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "cloth_bullet",
                    punch: "cloth_punch",
                    explode: "cloth_break_01",
                    enter: "none"
                }
            };
            return f.mergeDeep(t, r || {})
        }({}),
        toilet_01: Ot({
            img: {
                sprite: "map-toilet-01.img"
            },
            loot: [x("tier_toilet", 2, 3)]
        }),
        toilet_02: Ot({
            img: {
                sprite: "map-toilet-02.img"
            },
            loot: [x("tier_soviet", 3, 4)]
        }),
        toilet_02b: Ot({
            img: {
                sprite: "map-toilet-02.img",
                tint: 11842740
            },
            loot: [R("fireaxe", 1, 1)]
        }),
        toilet_03: Ot({
            reflectBullets: !0,
            hitParticle: "barrelChip",
            explodeParticle: "toiletMetalBreak",
            img: {
                sprite: "map-toilet-03.img",
                residue: "map-toilet-res-02.img"
            },
            loot: [x("tier_world", 1, 2)],
            sound: {
                bullet: "toilet_metal_bullet",
                punch: "toilet_metal_bullet",
                explode: "toilet_break_02"
            }
        }),
        toilet_04: Ot({
            reflectBullets: !0,
            hitParticle: "barrelChip",
            explodeParticle: "toiletMetalBreak",
            img: {
                sprite: "map-toilet-04.img",
                residue: "map-toilet-res-02.img"
            },
            loot: [x("tier_soviet", 2, 3)],
            sound: {
                bullet: "toilet_metal_bullet",
                punch: "toilet_metal_bullet",
                explode: "toilet_break_02"
            }
        }),
        towelrack_01: kr({
            collision: n.createAabbExtents(e.create(0, 0), e.create(3, 1)),
            img: {
                sprite: "map-towelrack-01.img"
            },
            explodeParticle: ["woodPlank", "clothBreak"]
        }),
        tree_01: ce({}),
        tree_01cb: ce({
            scale: {
                createMin: 1.1,
                createMax: 1.3,
                destroy: .5
            },
            collision: n.createCircle(e.create(0, 0), 1.2),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(7.75, 7.75)),
            map: {
                color: 2900834
            },
            img: {
                sprite: "map-tree-03cb.img"
            }
        }),
        tree_01sv: ce({
            map: {
                color: 4411673
            },
            img: {
                sprite: "map-tree-03sv.img"
            }
        }),
        tree_interior_01: ce({
            img: {
                zIdx: 200
            }
        }),
        tree_01x: ce({
            img: {
                sprite: "map-tree-01x.img"
            }
        }),
        tree_02: ce({
            health: 120,
            collision: n.createCircle(e.create(0, 0), 1.6),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(1.6, 1.6)),
            height: .5,
            loot: [R("woodaxe", 1)],
            map: {
                display: !1
            },
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .9
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-tree-04.img",
                scale: .5,
                zIdx: 10
            }
        }),
        tree_02h: ce({
            health: 120,
            collision: n.createCircle(e.create(0, 0), 1.6),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(1.6, 1.6)),
            height: .5,
            loot: [R("woodaxe_bloody", 1)],
            map: {
                display: !1
            },
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .9
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-tree-04h.img",
                scale: .5,
                zIdx: 10
            }
        }),
        tree_03: ce({
            img: {
                tint: 11645361
            },
            loot: [x("tier_surviv", 2, 3), R("mosin", 1)]
        }),
        tree_03sv: ce({
            map: {
                color: 4411673
            },
            img: {
                sprite: "map-tree-03sv.img",
                tint: 11645361
            },
            loot: [x("tier_surviv", 2, 3), R("mosin", 1)]
        }),
        tree_03w: ce({
            scale: {
                createMin: 1,
                createMax: 1.2
            },
            map: {
                color: 5199637,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-07.img",
                tint: 11645361
            },
            loot: [x("tier_surviv", 2, 3), R("mosin", 1)]
        }),
        tree_03sp: ce({
            scale: {
                createMin: 1,
                createMax: 1.2
            },
            map: {
                color: 16697057,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-07sp.img",
                tint: 11645361
            },
            loot: [x("tier_surviv", 2, 3), R("mosin", 1)]
        }),
        tree_05: ce({
            collision: n.createCircle(e.create(0, 0), 2.3),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(12, 12)),
            scale: {
                createMin: 1.2,
                createMax: 1.3
            },
            health: 400,
            map: {
                color: 5911831,
                scale: 3
            },
            img: {
                sprite: "map-tree-05.img",
                residue: "map-tree-res-02.img",
                tint: 16777215,
                scale: .7,
                zIdx: 801
            }
        }),
        tree_05b: ce({
            collision: n.createCircle(e.create(0, 0), 2.3),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(12, 12)),
            scale: {
                createMin: 1,
                createMax: 1
            },
            health: 500,
            loot: [x("tier_shotguns", 1, 1), x("tier_lmgs", 1, 1), R("outfitTreeSpooky", 1)],
            map: {
                color: 5911831,
                scale: 3
            },
            img: {
                sprite: "map-tree-05.img",
                residue: "map-tree-res-02.img",
                tint: 16777215,
                scale: .7,
                zIdx: 801
            }
        }),
        tree_05c: ce({
            collision: n.createCircle(e.create(0, 0), 1.05),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(4, 4)),
            scale: {
                createMin: 1.6,
                createMax: 1.6
            },
            health: 200,
            map: {
                color: 9064739,
                scale: 3
            },
            img: {
                sprite: "map-tree-05c.img",
                residue: "map-tree-res-02.img",
                tint: 16777215,
                scale: .35,
                zIdx: 801
            }
        }),
        tree_06: ce({
            img: {
                sprite: "map-tree-06.img"
            },
            map: {
                color: 7700520
            }
        }),
        tree_07: ce({
            scale: {
                createMin: 1,
                createMax: 1.2
            },
            map: {
                color: 5199637,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-07.img"
            }
        }),
        tree_07sp: ce({
            scale: {
                createMin: 1,
                createMax: 1.2
            },
            map: {
                color: 16697057,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-07sp.img"
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0
            }
        }),
        tree_07spr: ce({
            scale: {
                createMin: 1,
                createMax: 1.2
            },
            map: {
                color: 16697057,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-07sp.img"
            },
            terrain: {
                grass: !1,
                beach: !1,
                riverShore: !0
            }
        }),
        tree_07su: ce({
            scale: {
                createMin: 1,
                createMax: 1.2
            },
            map: {
                color: 2185478,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-07su.img"
            }
        }),
        tree_08: ce({
            scale: {
                createMin: 1.2,
                createMax: 1.4
            },
            health: 225,
            map: {
                color: 11033868,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-08.img",
                residue: "map-tree-res-02.img",
                scale: .35
            }
        }),
        tree_08b: ce({
            scale: {
                createMin: 1.75,
                createMax: 2
            },
            health: 300,
            map: {
                color: 9647632,
                scale: 3
            },
            img: {
                sprite: "map-tree-08.img",
                residue: "map-tree-res-02.img",
                tint: 14383224,
                scale: .35,
                zIdx: 801
            }
        }),
        tree_08c: ce({
            scale: {
                createMin: 1.75,
                createMax: 2
            },
            health: 500,
            loot: [x("tier_shotguns", 2, 3), x("tier_lmgs", 2, 3), R("outfitWoodland", 1)],
            map: {
                color: 7817749,
                scale: 3
            },
            img: {
                sprite: "map-tree-08.img",
                residue: "map-tree-res-02.img",
                tint: 11645361,
                scale: .35,
                zIdx: 801
            }
        }),
        tree_08f: ce({
            scale: {
                createMin: 1.2,
                createMax: 1.6
            },
            health: 200,
            map: {
                color: 995844,
                scale: 3
            },
            img: {
                sprite: "map-tree-08f.img",
                residue: "map-tree-res-01.img",
                scale: .35,
                zIdx: 801
            }
        }),
        tree_08sp: ce({
            scale: {
                createMin: 1.2,
                createMax: 1.4
            },
            health: 225,
            map: {
                color: 16746936,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-08sp.img",
                residue: "map-tree-res-02.img",
                scale: .35
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0
            }
        }),
        tree_08spb: ce({
            scale: {
                createMin: 1.75,
                createMax: 2
            },
            health: 300,
            map: {
                color: 16734619,
                scale: 3
            },
            img: {
                sprite: "map-tree-08sp.img",
                residue: "map-tree-res-02.img",
                tint: 14383224,
                scale: .35,
                zIdx: 801
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0
            }
        }),
        tree_08spc: ce({
            scale: {
                createMin: 1.75,
                createMax: 2
            },
            health: 500,
            loot: [x("tier_shotguns", 2, 3), x("tier_lmgs", 2, 3), R("outfitWoodland", 1)],
            map: {
                color: 8268107,
                scale: 3
            },
            img: {
                sprite: "map-tree-08sp.img",
                residue: "map-tree-res-02.img",
                tint: 11645361,
                scale: .35,
                zIdx: 801
            }
        }),
        tree_08spr: ce({
            scale: {
                createMin: 1.2,
                createMax: 1.4
            },
            health: 225,
            map: {
                color: 16746936,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-08sp.img",
                residue: "map-tree-res-02.img",
                scale: .35
            },
            terrain: {
                grass: !1,
                beach: !1,
                riverShore: !0
            }
        }),
        tree_08su: ce({
            scale: {
                createMin: 1.2,
                createMax: 1.4
            },
            health: 225,
            map: {
                color: 2183181,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-08su.img",
                residue: "map-tree-res-01.img",
                scale: .35,
                zIdx: 801
            }
        }),
        tree_08sub: ce({
            scale: {
                createMin: 1.75,
                createMax: 2
            },
            health: 300,
            map: {
                color: 1785864,
                scale: 3
            },
            img: {
                sprite: "map-tree-08su.img",
                residue: "map-tree-res-02.img",
                tint: 9211210,
                scale: .35,
                zIdx: 801
            },
            terrain: {
                grass: !0,
                beach: !1,
                riverShore: !0
            }
        }),
        tree_09: ce({
            health: 120,
            collision: n.createCircle(e.create(0, 0), 1.6),
            aabb: n.createAabbExtents(e.create(0, 0), e.create(5.75, 5.75)),
            height: .5,
            map: {
                display: !0,
                color: 8602624,
                scale: 1
            },
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .75
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-tree-09.img",
                scale: .5,
                zIdx: 10
            }
        }),
        tree_10: ce({
            collision: n.createCircle(e.create(0, 0), 1.25),
            scale: {
                createMin: .9,
                createMax: 1.1
            },
            map: {
                color: 7571807,
                scale: 2.5
            },
            img: {
                sprite: "map-tree-10.img"
            }
        }),
        tree_11: ce({
            collision: n.createCircle(e.create(0, 0), 1.25),
            scale: {
                createMin: 1,
                createMax: 1
            },
            img: {
                sprite: "map-tree-11.img",
                scale: .5,
                alpha: .92,
                zIdx: 201
            }
        }),
        tree_12: ce({
            map: {
                color: 8032292,
                scale: 7
            },
            img: {
                sprite: "map-tree-12.img",
                residue: "map-tree-res-12.img",
                tint: 16777215,
                zIdx: 801
            }
        }),
        tree_13: ce({
            img: {
                sprite: "map-tree-13.img",
                tint: 16777215,
                zIdx: 801
            }
        }),
        tree_switch_01: Tr({
            img: {
                sprite: "map-tree-switch-01.img"
            }
        }),
        tree_switch_02: Tr({
            img: {
                sprite: "map-tree-switch-02.img"
            }
        }),
        tree_switch_03: Tr({
            img: {
                sprite: "map-tree-switch-03.img"
            }
        }),
        vat_01: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .9
            },
            collision: n.createCircle(e.create(0, 0), 2),
            height: .5,
            collidable: !0,
            destructible: !0,
            health: 250,
            reflectBullets: !1,
            hitParticle: "glassChip",
            explodeParticle: "windowBreak",
            loot: [],
            map: {
                display: !0,
                color: 11776947,
                scale: 1
            },
            terrain: {
                grass: !1,
                beach: !1
            },
            img: {
                sprite: "map-vat-01.img",
                residue: "map-vat-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        },
        vat_02: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .95
            },
            collision: n.createCircle(e.create(0, 0), 3.1),
            height: .5,
            collidable: !0,
            destructible: !1,
            health: 1e3,
            reflectBullets: !1,
            hitParticle: "glassChip",
            explodeParticle: "windowBreak",
            loot: [],
            map: {
                display: !0,
                color: 11776947,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            img: {
                sprite: "map-vat-02.img",
                residue: "map-vat-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_01",
                enter: "none"
            }
        },
        vending_01: function() {
            const r = {
                type: "obstacle",
                obstacleType: "vending",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: n.createAabbExtents(e.create(0, .15), e.create(1.7, 1.25)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 150,
                hitParticle: "blueChip",
                explodeParticle: ["windowBreak", "lockerBreak"],
                reflectBullets: !0,
                loot: [x("tier_vending_soda", 1, 3), R("soda", 1)],
                map: {
                    display: !1,
                    color: 10925,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-vending-soda-01.img",
                    residue: "map-vending-res.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "vending_break_01",
                    enter: "none"
                }
            };
            return f.mergeDeep(r, {})
        }(),
        wheel_01: Mr({
            button: {
                interactionRad: 1,
                interactionText: "game-use",
                useOnce: !0,
                useType: "",
                useDelay: 2.5,
                useDir: e.create(-1, 0),
                useImg: "map-wheel-02.img",
                sound: {
                    on: "wheel_control_01",
                    off: ""
                }
            }
        }),
        wheel_02: Mr({
            img: {
                sprite: "map-wheel-02.img"
            }
        }),
        wheel_03: Mr({
            img: {
                sprite: "map-wheel-03.img"
            }
        }),
        woodpile_01: La({}),
        woodpile_02: La({
            collision: n.createAabbExtents(e.create(0, 0), e.create(6, 3)),
            health: 400,
            destructible: !0,
            img: {
                sprite: "map-woodpile-02.img",
                residue: "map-woodpile-res-02.img"
            }
        }),
        bank_window_01: {
            type: "obstacle",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: 1
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 2)),
            height: 10,
            collidable: !0,
            destructible: !0,
            isWindow: !0,
            health: 75,
            hitParticle: "glassChip",
            explodeParticle: ["windowBreak", "redPlank"],
            reflectBullets: !1,
            loot: [],
            img: {
                sprite: "map-building-bank-window-01.img",
                residue: "map-building-bank-window-res-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            sound: {
                bullet: "glass_bullet",
                punch: "glass_bullet",
                explode: "window_break_02",
                enter: "none"
            }
        },
        house_door_01: Pe({
            material: "wood",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2)
        }),
        house_door_02: Pe({
            material: "metal",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                sound: {
                    open: "door_open_02",
                    close: "door_close_02"
                }
            },
            img: {
                tint: 4934475
            }
        }),
        house_door_03: Pe({
            material: "wood",
            hinge: e.create(0, 2),
            extents: e.create(.5, 1.75),
            img: {
                sprite: "map-door-03.img"
            }
        }),
        house_door_05: Pe({
            material: "glass",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            img: {
                sprite: "map-door-05.img"
            }
        }),
        house_door_06: Pe({
            material: "wood",
            hinge: e.create(0, 1.25),
            extents: e.create(.3, 1.25),
            img: {
                sprite: "map-door-06.img"
            }
        }),
        crossing_door_01: Pe({
            material: "metal",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                sound: {
                    open: "door_open_02",
                    close: "door_close_02"
                }
            },
            img: {
                tint: 3159362
            }
        }),
        cell_door_01: Pe({
            material: "metal",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                sound: {
                    open: "door_open_02",
                    close: "door_close_02"
                }
            },
            img: {
                tint: 1776411
            }
        }),
        eye_door_01: Pe({
            material: "metal",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                openOneWay: -1,
                sound: {
                    open: "door_open_02",
                    close: "door_close_02"
                }
            },
            img: {
                tint: 921102
            }
        }),
        lab_door_01: Pt({
            img: {
                tint: 5373952
            }
        }),
        lab_door_02: Pt({
            door: {
                openOneWay: !0,
                slideOffset: -3.75,
                casingImg: {
                    pos: e.create(6, 0)
                }
            },
            img: {
                tint: 5373952
            }
        }),
        lab_door_03: Pt({
            door: {
                openOneWay: !0
            },
            img: {
                tint: 5373952
            }
        }),
        lab_door_locked_01: Pt({
            door: {
                locked: !0,
                openOnce: !0,
                autoClose: !1,
                sound: {
                    error: ""
                }
            },
            img: {
                tint: 5373952
            }
        }),
        house_window_01: Fr({}),
        house_window_broken_01: Ce({}),
        lab_window_01: Fr({
            destroyType: "lab_window_broken_01"
        }),
        lab_window_broken_01: Ce({
            img: {
                tint: 1316379
            }
        }),
        container_05_collider: v({
            material: "metal",
            extents: e.create(2.75, 6)
        }),
        container_05: {
            type: "building",
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .5
            },
            zIdx: 1,
            map: {
                display: !0,
                color: 11485762,
                scale: 1
            },
            terrain: {
                grass: !1,
                beach: !1
            },
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 2.4), e.create(2.5, 5.75))
                }],
                imgs: [{
                    sprite: "map-building-container-ceiling-05.img",
                    scale: .5,
                    alpha: 1,
                    tint: 11485762
                }]
            },
            mapObjects: [{
                type: "container_05_collider",
                pos: e.create(0, 2.4),
                scale: 1,
                ori: 0
            }]
        },
        greenhouse_01: Ua({}),
        greenhouse_02: Ua({
            floor_images: [{
                sprite: "map-building-greenhouse-floor-02.img",
                pos: e.create(0, 10),
                scale: .5,
                alpha: 1,
                tint: 16777215,
                rot: 2
            }, {
                sprite: "map-building-greenhouse-floor-02.img",
                pos: e.create(0, -10),
                scale: .5,
                alpha: 1,
                tint: 16777215
            }, {
                sprite: "map-building-porch-01.img",
                pos: e.create(0, 21),
                scale: .5,
                alpha: 1,
                tint: 16777215,
                rot: 0
            }, {
                sprite: "map-building-porch-01.img",
                pos: e.create(0, -21),
                scale: .5,
                alpha: 1,
                tint: 16777215,
                rot: 2
            }],
            ceiling_images: [{
                sprite: "map-building-greenhouse-ceiling-02.img",
                scale: 1,
                alpha: 1,
                tint: 16777215
            }],
            mapObjects: [{
                type: "glass_wall_10",
                pos: e.create(-7, 19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(-7, -19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, 15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, -15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(-12.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(7, 19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(7, -19.5),
                scale: 1,
                ori: 1
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, 15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, -15),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_10",
                pos: e.create(12.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_05",
                pos: e.create(2, 19.75),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_05",
                pos: e.create(-2, -19.75),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(-4.5, 14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(-7, 2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(-7, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(-4.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(4.5, 14.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(7, 2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(7, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_06: 2,
                    "": 1
                }),
                pos: e.create(4.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-15, 11),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(-15, 7),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(15.5, -7),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(19.5, -7),
                scale: .9,
                ori: 0
            }, {
                type: "bunker_structure_08b",
                pos: e.create(-9.5, -15.5),
                scale: 1,
                ori: 0
            }]
        }),
        bunker_chrys_01: {
            type: "building",
            map: {
                display: !1,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 10), e.create(3.6, 5.8)),
                    color: 6707790
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(1.5, 3.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-generic-floor-03.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, -.25), e.create(1.5, 3.25))
                }],
                imgs: [{
                    sprite: "map-bunker-generic-ceiling-02.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_5",
                pos: e.create(0, -3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(-2, .1),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(2, .1),
                scale: 1,
                ori: 0
            }]
        },
        lab_door_chrys: Pe({
            destructible: !1,
            material: "concrete",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                openOneWay: !1,
                openSpeed: 7,
                autoOpen: !1,
                autoClose: !1,
                slideToOpen: !0,
                slideOffset: 3.75,
                sound: {
                    open: "door_open_03",
                    close: "door_close_03",
                    error: "door_error_01"
                },
                casingImg: {
                    sprite: "map-door-slot-01.img",
                    pos: e.create(-2, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 1316379
                }
            },
            img: {
                tint: 5373952
            }
        }),
        bunker_chrys_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(11, -12), e.create(14.5, 9))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-chamber-floor-01a.img",
                    pos: e.create(0, 1.85),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-chrys-chamber-floor-01b.img",
                    pos: e.create(11, -10.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(11, -12), e.create(14.5, 9))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-chamber-ceiling-01.img",
                    pos: e.create(11.5, -11),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            puzzle: {
                name: "bunker_chrys_01",
                completeUseType: "lab_door_chrys",
                completeOffDelay: 1,
                completeUseDelay: 2,
                errorResetDelay: 1,
                pieceResetDelay: 10,
                sound: {
                    fail: "door_error_01",
                    complete: "none"
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_5",
                pos: e.create(0, 4),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_26",
                pos: e.create(-3, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_9",
                pos: e.create(3, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_19",
                pos: e.create(14, -3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_25",
                pos: e.create(11, -20),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(25, -5.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(25, -17.5),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(4.5, -4.15),
                scale: 1,
                ori: 0
            }, {
                type: "locker_03",
                pos: e.create(8, -4.15),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(.5, -16.5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(12, -9.5),
                scale: .8,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(12, -13.5),
                scale: .8,
                ori: 0
            }, {
                type: "couch_01",
                pos: e.create(15.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "screen_01",
                pos: e.create(23, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "switch_01",
                pos: e.create(18.5, -4.25),
                scale: 1,
                ori: 0,
                puzzlePiece: "ichi"
            }, {
                type: "switch_01",
                pos: e.create(21.5, -4.25),
                scale: 1,
                ori: 0,
                puzzlePiece: "shi"
            }, {
                type: "switch_01",
                pos: e.create(18.5, -18.75),
                scale: 1,
                ori: 2,
                puzzlePiece: "ni"
            }, {
                type: "switch_01",
                pos: e.create(21.5, -18.75),
                scale: 1,
                ori: 2,
                puzzlePiece: "san"
            }, {
                type: "lab_door_chrys",
                pos: e.create(25.5, -9.5),
                scale: 1,
                ori: 2
            }, {
                type: "bunker_chrys_compartment_01",
                pos: e.create(39.5, -6),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_chrys_compartment_02",
                pos: e.create(43.5, 19),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_chrys_compartment_03",
                pos: e.create(43.5, 43),
                scale: 1,
                ori: 0
            }]
        },
        bunker_chrys_sublevel_01b: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(11, -12), e.create(14.5, 9))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-chamber-floor-01a.img",
                    pos: e.create(0, 1.85),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-chrys-chamber-floor-01b.img",
                    pos: e.create(11, -10.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(11, -12), e.create(14.5, 9))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-chamber-ceiling-01.img",
                    pos: e.create(11.5, -11),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            mapObjects: [{
                type: "concrete_wall_ext_5",
                pos: e.create(0, 4),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_26",
                pos: e.create(-3, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_9",
                pos: e.create(3, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_19",
                pos: e.create(14, -3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_25",
                pos: e.create(11, -20),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(25, -5.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(25, -17.5),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(4.5, -4.15),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(.5, -16.5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(12, -9.5),
                scale: .8,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(12, -13.5),
                scale: .8,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "couch_01",
                pos: e.create(15.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "switch_02",
                pos: e.create(18.5, -4.25),
                scale: 1,
                ori: 0
            }, {
                type: "switch_02",
                pos: e.create(21.5, -4.25),
                scale: 1,
                ori: 0
            }, {
                type: "switch_02",
                pos: e.create(18.5, -18.75),
                scale: 1,
                ori: 2
            }, {
                type: "switch_02",
                pos: e.create(21.5, -18.75),
                scale: 1,
                ori: 2
            }, {
                type: "lab_door_01",
                pos: e.create(25.5, -9.5),
                scale: 1,
                ori: 2
            }, {
                type: "bunker_chrys_compartment_01b",
                pos: e.create(39.5, -6),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_chrys_compartment_02b",
                pos: e.create(43.5, 19),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_chrys_compartment_03b",
                pos: e.create(43.5, 43),
                scale: 1,
                ori: 0
            }]
        },
        vault_door_chrys_01: Pe({
            material: "metal",
            hinge: e.create(1, 3.5),
            extents: e.create(1, 3.5),
            img: {
                sprite: "map-door-02.img"
            },
            door: {
                interactionRad: 1.5,
                openSpeed: .23,
                openOneWay: -1,
                openDelay: 4.1,
                openOnce: !0,
                spriteAnchor: e.create(.2, 1),
                sound: {
                    open: "none",
                    close: "none",
                    change: "vault_change_01"
                }
            }
        }),
        vault_door_chrys_02: Pe({
            material: "metal",
            hinge: e.create(1, 3.5),
            extents: e.create(1, 3.5),
            img: {
                sprite: "map-door-02.img"
            },
            door: {
                canUse: !1,
                spriteAnchor: e.create(.2, 1)
            }
        }),
        bunker_chrys_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 2), e.create(14, 13))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-floor-01a.img",
                    pos: e.create(-12.5, -4.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-chrys-compartment-floor-01b.img",
                    pos: e.create(3.5, 2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 2), e.create(14, 13))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-ceiling-01a.img",
                    pos: e.create(-10.5, -2.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }, {
                    sprite: "map-bunker-chrys-compartment-ceiling-01b.img",
                    pos: e.create(4, 3),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            puzzle: {
                name: "bunker_chrys_02",
                completeUseType: "vault_door_chrys_01",
                completeOffDelay: 1,
                completeUseDelay: 5.5,
                errorResetDelay: 1,
                pieceResetDelay: 10,
                sound: {
                    fail: "door_error_01",
                    complete: "vault_change_03"
                }
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-11, -2),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-11, 1),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_27",
                pos: e.create(.5, -9),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_42",
                pos: e.create(15.5, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_34",
                pos: e.create(-7.5, 17),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_column_4x8",
                pos: e.create(-3.5, 14.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_column_4x8",
                pos: e.create(11.5, 14.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    crate_01: 2,
                    crate_04: 1
                }),
                pos: e.create(1.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_01: 2,
                    crate_04: 1
                }),
                pos: e.create(1.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_01: 2,
                    crate_04: 1
                }),
                pos: e.create(6.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_01: 2,
                    crate_04: 1
                }),
                pos: e.create(6.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "vault_door_chrys_01",
                pos: e.create(.5, 15.5),
                scale: 1,
                ori: 3
            }, {
                type: "loot_tier_chrys_01",
                pos: e.create(12, -5.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_chrys_compartment_01b: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 2), e.create(14, 13))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-floor-01a.img",
                    pos: e.create(-12.5, -4.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-chrys-compartment-floor-01c.img",
                    pos: e.create(3.5, 2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 2), e.create(14, 13))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-ceiling-01a.img",
                    pos: e.create(-10.5, -2.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }, {
                    sprite: "map-bunker-chrys-compartment-ceiling-01b.img",
                    pos: e.create(4, 3),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            puzzle: {
                name: "bunker_chrys_02",
                completeUseType: "vault_door_chrys_02",
                completeOffDelay: 1,
                completeUseDelay: 5.5,
                errorResetDelay: 1,
                pieceResetDelay: 10,
                sound: {
                    fail: "door_error_01",
                    complete: "vault_change_03"
                }
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-11, -2),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-11, 1),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_27",
                pos: e.create(.5, -9),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_42",
                pos: e.create(15.5, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_34",
                pos: e.create(-7.5, 17),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_column_4x8",
                pos: e.create(-3.5, 14.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_column_4x8",
                pos: e.create(11.5, 14.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(-.5, 7),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(2.5, 7),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(5.5, 7),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(8.5, 7),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(-.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(8.5, 4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(-.5, 1),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(8.5, 1),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(-.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(2.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(5.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    planter_07: 2,
                    "": 1
                }),
                pos: e.create(8.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: "vault_door_chrys_02",
                pos: e.create(.5, 15.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_chrys_compartment_02: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(10, 10))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-floor-02a.img",
                    pos: e.create(0, -2.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-chrys-compartment-floor-02b.img",
                    pos: e.create(0, 9.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(10, 11))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-ceiling-02a.img",
                    pos: e.create(0, 8.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }, {
                    sprite: "map-bunker-chrys-compartment-ceiling-02b.img",
                    pos: e.create(0, -2.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-8, 6),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(8, 6),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-7.5, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(7.5, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-4, 12),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(4, 12),
                scale: 1,
                ori: 1
            }, {
                type: "loot_tier_chrys_02",
                pos: e.create(8, -6.5),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_12",
                pos: e.create(0, 5),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_06",
                pos: e.create(-8.5, 1.5),
                scale: 1,
                ori: 1
            }]
        },
        bunker_chrys_compartment_02b: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(10, 10))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-floor-02a.img",
                    pos: e.create(0, -2.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-chrys-compartment-floor-02c.img",
                    pos: e.create(0, 9.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(10, 11))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-ceiling-02a.img",
                    pos: e.create(0, 8.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }, {
                    sprite: "map-bunker-chrys-compartment-ceiling-02b.img",
                    pos: e.create(0, -2.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-8, 6),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(8, 6),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-7.5, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(7.5, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-4, 12),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(4, 12),
                scale: 1,
                ori: 1
            }, {
                type: "loot_tier_chrys_01",
                pos: e.create(8, -6.5),
                scale: 1,
                ori: 0
            }, {
                type: "control_panel_06",
                pos: e.create(-8.5, 1.5),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_06",
                pos: e.create(8.5, 1.5),
                scale: 1,
                ori: 3
            }, {
                type: "stone_wall_int_4",
                pos: e.create(0, 10.9),
                scale: 1,
                ori: 1
            }]
        },
        bunker_chrys_compartment_03: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, -1), e.create(10, 14))]
                }, {
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 11), e.create(10, 4)), n.createAabbExtents(e.create(-7, -3), e.create(3, 3)), n.createAabbExtents(e.create(8, -3), e.create(2, 3))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-floor-03a.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(10, 13))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-ceiling-03a.img",
                    pos: e.create(0, -9.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731,
                    rot: 0
                }, {
                    sprite: "map-bunker-chrys-compartment-ceiling-03b.img",
                    pos: e.create(0, 3),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731,
                    rot: 0
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-7.5, -8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(7.5, -8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-11, -7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(11, -7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-11.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(11.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(0, 13),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(0, 4.75),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(3, .5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-3, .5),
                scale: .9,
                ori: 0
            }, {
                type: "wheel_03",
                pos: e.create(0, 9.1),
                scale: 1,
                ori: 0
            }, {
                type: "wheel_03",
                pos: e.create(-7.6, 1),
                scale: 1,
                ori: 1
            }, {
                type: "wheel_03",
                pos: e.create(7.6, 1),
                scale: 1,
                ori: 3
            }, {
                type: "loot_tier_chrys_03",
                pos: e.create(0, -5.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_chrys_compartment_03b: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, -1), e.create(10, 14))]
                }, {
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 11), e.create(10, 4)), n.createAabbExtents(e.create(-7, -3), e.create(3, 3)), n.createAabbExtents(e.create(8, -3), e.create(2, 3))]
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-floor-03a.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(10, 13))
                }],
                imgs: [{
                    sprite: "map-bunker-chrys-compartment-ceiling-03a.img",
                    pos: e.create(0, -9.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731,
                    rot: 0
                }, {
                    sprite: "map-bunker-chrys-compartment-ceiling-03b.img",
                    pos: e.create(0, 3),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731,
                    rot: 0
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-7.5, -8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(7.5, -8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-11, -7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(11, -7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-11.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(11.5, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(0, 13),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(0, 4.75),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(3, .5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-3, .5),
                scale: .9,
                ori: 0
            }, {
                type: "wheel_03",
                pos: e.create(0, 9.1),
                scale: 1,
                ori: 0
            }, {
                type: "wheel_03",
                pos: e.create(-7.6, 1),
                scale: 1,
                ori: 1
            }, {
                type: "wheel_02",
                pos: e.create(7.6, 1),
                scale: 1,
                ori: 3
            }, {
                type: "case_05",
                pos: e.create(0, -5.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_structure_08: Wa({
            bunkerType: "bunker_chrys_sublevel_01"
        }),
        bunker_structure_08b: Wa({
            bunkerType: "bunker_chrys_sublevel_01b"
        }),
        hedgehog_wall: v({
            material: "metal",
            extents: e.create(3, .5),
            height: .5,
            map: {
                display: !0,
                color: 5854285,
                scale: 1
            }
        }),
        hedgehog_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !1,
                beach: !0
            },
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "map-hedgehog-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "hedgehog_wall",
                pos: e.create(0, 0),
                scale: 1,
                ori: 1
            }, {
                type: "hedgehog_wall",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        },
        cache_01: De({}),
        cache_01sv: De({
            mapObjects: [{
                type: "stone_02sv",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "stone_01"
            }
        }),
        cache_02: De({
            mapObjects: [{
                type: "tree_03",
                pos: e.create(0, 0),
                scale: .9,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1.2,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "tree_01"
            }
        }),
        cache_02sv: De({
            mapObjects: [{
                type: "tree_03sv",
                pos: e.create(0, 0),
                scale: .9,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1.2,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "tree_01sv"
            }
        }),
        cache_02w: De({
            mapObjects: [{
                type: "tree_03w",
                pos: e.create(0, 0),
                scale: .9,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1.2,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "tree_07"
            }
        }),
        cache_02sp: De({
            mapObjects: [{
                type: "tree_03sp",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1.3,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "tree_07sp"
            }
        }),
        cache_03: De({
            mapObjects: [{
                type: "bush_06",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_leaf_pile",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "bush_06"
            }
        }),
        cache_06: De({
            mapObjects: [{
                type: "bush_07",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_leaf_pile",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "bush_07"
            }
        }),
        cache_07: De({
            mapObjects: [{
                type: "barrel_01b",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_initiative_01",
                pos: e.create(0, 0),
                scale: 1.1,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "barrel_01"
            }
        }),
        cache_log_13: De({
            terrain: {
                grass: !1,
                beach: !0
            },
            mapObjects: [{
                type: "crate_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "recorder_13",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }],
            map: {
                displayType: "crate_01"
            }
        }),
        cache_pumpkin_01: De({
            mapObjects: [{
                type: "pumpkin_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_light_01",
                pos: e.create(0, 0),
                scale: 1.5,
                ori: 0,
                inheritOri: !1
            }]
        }),
        cache_pumpkin_02: De({
            mapObjects: [{
                type: "pumpkin_02",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_light_01",
                pos: e.create(0, 0),
                scale: 1.5,
                ori: 0,
                inheritOri: !1
            }]
        }),
        cache_pumpkin_03: De({
            mapObjects: [{
                type: "pumpkin_03",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_light_04",
                pos: e.create(0, 0),
                scale: 1.5,
                ori: 0,
                inheritOri: !1
            }]
        }),
        cache_pumpkin_airdrop_02: De({
            mapObjects: [{
                type: "crate_11h",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_light_01",
                pos: e.create(0, 0),
                scale: 1.5,
                ori: 0,
                inheritOri: !1
            }]
        }),
        candle_lit_01: De({
            mapObjects: [{
                type: "candle_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_light_02",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }]
        }),
        candle_lit_02: De({
            mapObjects: [{
                type: "candle_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_light_03",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }]
        }),
        hut_wall_int_4: v({
            material: "wood",
            extents: e.create(.5, 2),
            hitParticle: "tanChip",
            img: V("map-wall-04.img", 4608e3)
        }),
        hut_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "tanChip",
            img: V("map-wall-05.img", 4608e3)
        }),
        hut_wall_int_6: v({
            material: "wood",
            extents: e.create(.5, 3),
            hitParticle: "tanChip",
            img: V("map-wall-06.img", 4608e3)
        }),
        hut_wall_int_12: v({
            material: "wood",
            extents: e.create(.5, 6),
            hitParticle: "tanChip",
            img: V("map-wall-12.img", 4608e3)
        }),
        hut_wall_int_14: v({
            material: "wood",
            extents: e.create(.5, 7),
            hitParticle: "tanChip",
            img: V("map-wall-14.img", 4608e3)
        }),
        hut_window_open_01: Ce({
            img: {
                tint: 7681026
            }
        }),
        hut_01: Bt({}),
        hut_01x: Bt({
            ceiling: {
                imgs: [{
                    sprite: "map-building-hut-ceiling-01.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(4.5, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-05.img",
                    pos: e.create(-.5, 5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }]
            }
        }),
        hut_02: Bt({
            ceilingImg: "map-building-hut-ceiling-02.img",
            specialLoot: "pot_02",
            map: {
                displayType: "hut_01"
            }
        }),
        hut_02x: Bt({
            specialLoot: "pot_02",
            ceiling: {
                imgs: [{
                    sprite: "map-building-hut-ceiling-02.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(4.5, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-05.img",
                    pos: e.create(.5, -4.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            },
            map: {
                displayType: "hut_01x"
            }
        }),
        hut_03: Bt({
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(7, 7)),
                    color: 7771201
                }, {
                    collider: n.createAabbExtents(e.create(0, -18.9), e.create(2, 12)),
                    color: 6171907
                }]
            },
            ceilingImg: "map-building-hut-ceiling-03.img",
            specialLoot: "pot_05"
        }),
        warehouse_wall_side: v({
            material: "metal",
            extents: e.create(25, .6)
        }),
        warehouse_wall_edge: v({
            material: "metal",
            extents: e.create(.6, 3.2)
        }),
        warehouse_01: tr({
            topLeftObs: "crate_01",
            topRightObs: "crate_01",
            botRightObs: "crate_01",
            ignoreMapSpawnReplacement: !0
        }),
        warehouse_01h: tr({
            topLeftObs: "crate_01",
            topRightObs: "crate_01",
            botRightObs: "crate_01",
            decoration_01: "candle_lit_01",
            ignoreMapSpawnReplacement: !0
        }),
        warehouse_01f: tr({
            topLeftObs: "crate_01",
            topRightObs: "crate_01",
            botRightObs: "crate_01",
            ignoreMapSpawnReplacement: !1
        }),
        warehouse_01x: tr({
            topLeftObs: "crate_01",
            topRightObs: "crate_01",
            botRightObs: "crate_01",
            ignoreMapSpawnReplacement: !0,
            ceiling: {
                imgs: [{
                    sprite: "map-building-warehouse-ceiling-01.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(7.5, 5),
                    scale: .9,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-05.img",
                    pos: e.create(-8.5, 4),
                    scale: .9,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(22.25, 11.25),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(-22.25, -11.25),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            }
        }),
        warehouse_02: Za({}),
        warehouse_02x: Za({
            ceiling: {
                imgs: [{
                    sprite: "map-building-warehouse-ceiling-02.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(0, 4),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(20.25, -9.75),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(-20.25, 9.75),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            }
        }),
        warehouse_complex_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(26, 70.5), e.create(47, 7.5)),
                    color: 5855577
                }, {
                    collider: n.createAabbExtents(e.create(15.5, 52.5), e.create(57.5, 10.5)),
                    color: 5855577
                }, {
                    collider: n.createAabbExtents(e.create(33, 11), e.create(75, 31)),
                    color: 5855577
                }, {
                    collider: n.createAabbExtents(e.create(5, -30), e.create(47, 10)),
                    color: 5855577
                }, {
                    collider: n.createAabbExtents(e.create(-39.75, 11.25), e.create(2, 51)),
                    color: 16109568
                }, {
                    collider: n.createCircle(e.create(-39, 55), 1.25),
                    color: 6310464
                }, {
                    collider: n.createCircle(e.create(-39, 20.5), 1.25),
                    color: 6310464
                }, {
                    collider: n.createCircle(e.create(-39, 2), 1.25),
                    color: 6310464
                }, {
                    collider: n.createCircle(e.create(-39, -31.5), 1.25),
                    color: 6310464
                }, {
                    collider: n.createAabbExtents(e.create(-28, -30), e.create(2, 2)),
                    color: 6697728
                }, {
                    collider: n.createAabbExtents(e.create(-23, -33), e.create(2, 2)),
                    color: 6697728
                }, {
                    collider: n.createAabbExtents(e.create(7, 70), e.create(2, 2)),
                    color: 6697728
                }, {
                    collider: n.createAabbExtents(e.create(12, 72), e.create(2, 2)),
                    color: 6697728
                }, {
                    collider: n.createCircle(e.create(-26.5, 54.75), 1.75),
                    color: 8026746
                }, {
                    collider: n.createCircle(e.create(-23.5, 57), 1.75),
                    color: 8026746
                }, {
                    collider: n.createCircle(e.create(84, -15.5), 1.75),
                    color: 8026746
                }, {
                    collider: n.createCircle(e.create(40, -35), 1.5),
                    color: 8026746
                }, {
                    collider: n.createCircle(e.create(65, 61), 1.5),
                    color: 8026746
                }, {
                    collider: n.createAabbExtents(e.create(44.5, -25), e.create(1.4, 3.1)),
                    color: 13278307
                }, {
                    collider: n.createAabbExtents(e.create(58, 47.5), e.create(1.4, 3.1)),
                    color: 13278307
                }]
            },
            terrain: {
                waterEdge: {
                    dir: e.create(-1, 0),
                    distMin: 72,
                    distMax: 72
                }
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(26, 70.5), e.create(47, 7.5)), n.createAabbExtents(e.create(15.5, 52.5), e.create(57.5, 10.5)), n.createAabbExtents(e.create(33, 11), e.create(75, 31)), n.createAabbExtents(e.create(5, -30), e.create(47, 10))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(26, 60), e.create(47, 18)),
                color: 9340275,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(5, 11.5), e.create(47, 51.5)),
                color: 9340275,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(80, 11), e.create(28, 31)),
                color: 9340275,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(26, 58), e.create(46, 19)),
                color: 5855577,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(5, 11.5), e.create(46, 50.5)),
                color: 5855577,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(78, 11), e.create(29, 30)),
                color: 5855577,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(-37.5, 38), e.create(4.5, 10)),
                color: 9340275,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(-37.5, -15), e.create(4.5, 10)),
                color: 9340275,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(-37.5, 38), e.create(3.5, 9)),
                color: 5855577,
                order: 1
            }, {
                bound: n.createAabbExtents(e.create(-37.5, -15), e.create(3.5, 9)),
                color: 5855577,
                order: 1
            }],
            floor: {
                surfaces: [{
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(26, 60), e.create(47, 18)), n.createAabbExtents(e.create(5, 11.5), e.create(47, 51.5)), n.createAabbExtents(e.create(80, 11), e.create(28, 31))]
                }],
                imgs: [{
                    sprite: "map-complex-warehouse-floor-01.img",
                    pos: e.create(-39.2, 55),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-complex-warehouse-floor-02.img",
                    pos: e.create(-39.2, 11.5),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-complex-warehouse-floor-03.img",
                    pos: e.create(-39.2, -32),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "warehouse_02",
                pos: e.create(5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_02",
                pos: e.create(70, 0),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_02",
                pos: e.create(18, 55),
                scale: 1,
                ori: 0
            }, {
                type: "bollard_01",
                pos: e.create(-39, 55),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_06: .08
                }),
                pos: e.create(-37.5, 38),
                scale: 1,
                ori: 0
            }, {
                type: "bollard_01",
                pos: e.create(-39, 20.5),
                scale: 1,
                ori: 2
            }, {
                type: "bollard_01",
                pos: e.create(-39, 2),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_06: .08
                }),
                pos: e.create(-37.5, -15),
                scale: 1,
                ori: 2
            }, {
                type: "bollard_01",
                pos: e.create(-39, -31.5),
                scale: 1,
                ori: 2
            }, {
                type: "crate_01",
                pos: e.create(-28, -30),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(-23, -33),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "container_04",
                pos: e.create(-11.5, -26.575),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(-6, -29),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(9.5, -29),
                scale: 1,
                ori: 0
            }, {
                type: "container_04",
                pos: e.create(15, -26.575),
                scale: 1,
                ori: 0
            }, {
                type: "shack_02",
                pos: e.create(37, -30),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(44.5, -25),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(84, -15.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(-3, 22),
                scale: 1,
                ori: 1
            }, {
                type: "container_04",
                pos: e.create(-5.425, 27.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(-3, 33),
                scale: 1,
                ori: 1
            }, {
                type: "container_04",
                pos: e.create(28, 22),
                scale: 1,
                ori: 1
            }, {
                type: "container_04",
                pos: e.create(28, 27.5),
                scale: 1,
                ori: 1
            }, {
                type: "container_04",
                pos: e.create(28, 33),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(53, 22),
                scale: 1,
                ori: 3
            }, {
                type: "container_04",
                pos: e.create(55.425, 27.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(53, 33),
                scale: 1,
                ori: 3
            }, {
                type: "container_04",
                pos: e.create(84, 22),
                scale: 1,
                ori: 3
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1,
                    container_05: 2,
                    container_06: .08,
                    "": .75
                }),
                pos: e.create(86.425, 27.5),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(-26.5, 54.75),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-23.5, 57),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(7, 70),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(12, 72),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "shack_02",
                pos: e.create(60, 58),
                scale: 1,
                ori: 1
            }, {
                type: "sandbags_01",
                pos: e.create(58, 47.5),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_01",
                pos: e.create(-37.5, 59.5),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_02",
                pos: e.create(-29.5, 52.5),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_03",
                pos: e.create(-16.5, 61.5),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_04",
                pos: e.create(-15.5, 73.5),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_05",
                pos: e.create(2.5, 72.5),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_04",
                pos: e.create(33.5, 74),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_06",
                pos: e.create(62.5, 69),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_04",
                pos: e.create(105, 34),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_05",
                pos: e.create(101.5, 23),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_01",
                pos: e.create(84.5, 36),
                scale: 1,
                ori: 3
            }, {
                type: "decal_oil_03",
                pos: e.create(73.5, 30),
                scale: 1,
                ori: 3
            }, {
                type: "decal_oil_03",
                pos: e.create(56.5, 39),
                scale: 1,
                ori: 3
            }, {
                type: "decal_oil_06",
                pos: e.create(60.5, 14),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_02",
                pos: e.create(40, 42),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_05",
                pos: e.create(41.5, 20),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_01",
                pos: e.create(35.5, 9),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_02",
                pos: e.create(38.5, -5),
                scale: 1,
                ori: 2
            }, {
                type: "decal_oil_05",
                pos: e.create(36.5, -22),
                scale: 1,
                ori: 3
            }, {
                type: "decal_oil_03",
                pos: e.create(83, -16),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_04",
                pos: e.create(28.5, -37),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_01",
                pos: e.create(22.5, -24),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_03",
                pos: e.create(7.5, -13.5),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_04",
                pos: e.create(6.5, -21),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_06",
                pos: e.create(-2.5, -32),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_05",
                pos: e.create(-22.5, -24),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_03",
                pos: e.create(-37.5, -29.75),
                scale: 1,
                ori: 0
            }, {
                type: "decal_oil_04",
                pos: e.create(-37.25, 9.5),
                scale: .75,
                ori: 1
            }, {
                type: "decal_oil_02",
                pos: e.create(-25.5, 15.5),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_04",
                pos: e.create(-12.5, 22.5),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_05",
                pos: e.create(-14.5, 33.5),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_03",
                pos: e.create(-26.5, 40.5),
                scale: 1,
                ori: 1
            }, {
                type: "decal_oil_06",
                pos: e.create(3.5, 28.5),
                scale: 1,
                ori: 2
            }, {
                type: "decal_oil_02",
                pos: e.create(15.5, 38.5),
                scale: 1,
                ori: 2
            }],
            teamId: 2
        },
        logging_complex_01: Dr({}),
        logging_complex_01sp: Dr({
            groundTintLt: 3361294,
            groundTintDk: 2437648
        }),
        logging_complex_01su: Dr({
            groundTintLt: 7843122,
            groundTintDk: 5143827
        }),
        logging_complex_02: Or({}),
        logging_complex_02sp: Or({
            groundTintDk: 2437648,
            tree_08c: "tree_08spc"
        }),
        logging_complex_02su: Or({
            groundTintDk: 5143827
        }),
        logging_complex_03: Na({}),
        logging_complex_03sp: Na({
            groundTintDk: 2437648
        }),
        junkyard_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            ori: 0,
            mapObstacleBounds: [n.createCircle(e.create(0, 0), 37)],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(-8.5, 24), e.create(13, 9)),
                color: 1184769
            }, {
                bound: n.createAabbExtents(e.create(26.75, 8.5), e.create(8, 5.5)),
                color: 1184769
            }, {
                bound: n.createAabbExtents(e.create(23.75, -15.5), e.create(7, 5.5)),
                color: 1184769
            }, {
                bound: n.createAabbExtents(e.create(-23.5, -3), e.create(4.75, 3.5)),
                color: 1184769
            }, {
                bound: n.createAabbExtents(e.create(-3.5, -19.5), e.create(4, 6.5)),
                color: 1184769
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "tree_05b",
                pos: e.create(0, 0),
                scale: 1.5,
                ori: 0
            }, {
                type: "candle_lit_01",
                pos: e.create(-9, 3),
                scale: 1,
                ori: 0
            }, {
                type: "candle_lit_01",
                pos: e.create(9, 3),
                scale: 1,
                ori: 0
            }, {
                type: "candle_lit_01",
                pos: e.create(-6.5, -7),
                scale: 1,
                ori: 0
            }, {
                type: "candle_lit_01",
                pos: e.create(6.5, -7),
                scale: 1,
                ori: 0
            }, {
                type: "candle_lit_01",
                pos: e.create(0, 9),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-2.5, 29.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-6.5, 29),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-10.5, 29.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-14.5, 30),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(1.5, 23.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-2.5, 24.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-6.5, 24),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-10.5, 24),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-14.5, 23.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-18.5, 24.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-2.5, 18.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-6.5, 18),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-10.5, 18.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    refrigerator_01: 3,
                    "": 1
                }),
                pos: e.create(-14.5, 19),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    table_01: 3
                }),
                pos: e.create(22.5, 6),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    table_01: 3
                }),
                pos: e.create(29, 6),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    table_01: 3
                }),
                pos: e.create(24.5, 11),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    table_01: 3
                }),
                pos: e.create(31, 11),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    oven_01: 3,
                    "": 1
                }),
                pos: e.create(20, -13),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    oven_01: 3,
                    "": 1
                }),
                pos: e.create(24, -12.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    oven_01: 3,
                    "": 1
                }),
                pos: e.create(28, -13.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    oven_01: 3,
                    "": 1
                }),
                pos: e.create(22, -18.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    oven_01: 3,
                    "": 1
                }),
                pos: e.create(26, -18.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    toilet_01: 3
                }),
                pos: e.create(-1.5, -16),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    toilet_01: 3
                }),
                pos: e.create(-5, -22),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    toilet_01: 3
                }),
                pos: e.create(-5.5, -17.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    toilet_01: 3
                }),
                pos: e.create(-1.5, -23.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    vending_01: 3
                }),
                pos: e.create(-25.5, -4.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    vending_01: 3
                }),
                pos: e.create(-21.5, -2.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    cache_03: 3
                }),
                pos: e.create(-24, 7),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    cache_03: 3
                }),
                pos: e.create(14, 18),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    cache_03: 3
                }),
                pos: e.create(-18, -16),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    cache_03: 3
                }),
                pos: e.create(9.5, -16),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    "": 1,
                    cache_03: 3
                }),
                pos: e.create(25.5, -2.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }]
        },
        archway_column_1: v({
            material: "wood",
            extents: e.create(1, 1),
            img: Object.assign(V("map-column-01.img", 7290644), {
                residue: "map-drawers-res.img"
            })
        }),
        archway_01: {
            type: "building",
            map: {
                display: !0,
                color: 7813914,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(10, 1))]
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                collision: [n.createAabbExtents(e.create(0, 0), e.create(10.5, 2))],
                imgs: [{
                    sprite: "map-building-archway-ceiling-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }],
                destroy: {
                    wallCount: 1,
                    particle: "archwayBreak",
                    particleCount: 15,
                    residue: "map-archway-res-01.img"
                }
            },
            mapObjects: [{
                type: "archway_column_1",
                pos: e.create(-10, 0),
                scale: 1,
                ori: 0
            }, {
                type: "archway_column_1",
                pos: e.create(10, 0),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_1",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        },
        desert_town_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(65, 102)), n.createAabbExtents(e.create(0, 0), e.create(20, 120)), n.createAabbExtents(e.create(-60, 40), e.create(10, 5))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, 0), e.create(60, 95)),
                color: 12813354,
                roughness: .1,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(0, 0), e.create(10, 96)),
                color: 9396511,
                roughness: .1,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-33, 40), e.create(27, 5)),
                color: 9396511,
                roughness: .1,
                offsetDist: 1
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(55, 25))]
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "archway_01",
                pos: e.create(0, 95),
                scale: 1,
                ori: 0
            }, {
                type: "archway_01",
                pos: e.create(0, -95),
                scale: 1,
                ori: 0
            }, {
                type: "police_01",
                pos: e.create(40, -50),
                scale: 1,
                ori: 3
            }, {
                type: "cabin_01",
                pos: e.create(37, 20),
                scale: 1,
                ori: 3
            }, {
                type: "cabin_01",
                pos: e.create(35, 70),
                scale: 1,
                ori: 3
            }, {
                type: "barn_01",
                pos: e.create(-34, -60),
                scale: 1,
                ori: 3
            }, {
                type: "bank_01b",
                pos: e.create(-35, 0),
                scale: 1,
                ori: 1
            }, {
                type: "saloon_structure_01",
                pos: e.create(-35, 70),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(5, 76),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-6.75, 71),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(-6.75, 67),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(-50, 42),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-4, 44),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-1.5, 46.5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_18",
                pos: e.create(.25, 42),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-21, 31.5),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(-15, 31.5),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(13, 34),
                scale: 1,
                ori: 1
            }, {
                type: "sandbags_02",
                pos: e.create(7, 8),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(-7.25, -12.5),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(-7.25, -22),
                scale: 1,
                ori: 1
            }, {
                type: "crate_18",
                pos: e.create(2.5, -56.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-1.5, -59),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(1.5, -61),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(-5.5, -74),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(7.5, -82),
                scale: 1,
                ori: 0
            }]
        },
        desert_town_02: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, -3), e.create(50, 60)), n.createAabbExtents(e.create(0, 0), e.create(60, 15))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, -3), e.create(45, 55)),
                color: 12813354,
                roughness: .1,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(0, 0), e.create(46, 10)),
                color: 9396511,
                roughness: .1,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(0, 2), e.create(5, 50.5)),
                color: 9396511,
                roughness: .1,
                offsetDist: 1
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "archway_01",
                pos: e.create(45, 0),
                scale: 1,
                ori: 1
            }, {
                type: "archway_01",
                pos: e.create(-45, 0),
                scale: 1,
                ori: 1
            }, {
                type: "house_red_01",
                pos: e.create(24, 30),
                scale: 1,
                ori: 3
            }, {
                type: "house_red_02",
                pos: e.create(-24, 30),
                scale: 1,
                ori: 3
            }, {
                type: "bank_01b",
                pos: e.create(-10, -34),
                scale: 1,
                ori: 2
            }, {
                type: "shack_01",
                pos: e.create(31, -26),
                scale: 1,
                ori: 2
            }, {
                type: "outhouse_01",
                pos: e.create(28, -46),
                scale: 1,
                ori: 0
            }, {
                type: "tree_06",
                pos: e.create(29, -36),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-4.75, 34),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(-4.75, 30),
                scale: 1,
                ori: 1
            }, {
                type: "sandbags_01",
                pos: e.create(-9, 10),
                scale: 1,
                ori: 0
            }, {
                type: "crate_18",
                pos: e.create(2.5, 1.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-2, -1),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(1.5, -3),
                scale: .9,
                ori: 0
            }, {
                type: "sandbags_01",
                pos: e.create(16, -10),
                scale: 1,
                ori: 1
            }]
        },
        statue_01: Me({
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .5
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.4, 4.4)),
            destructible: !1,
            map: {
                display: !0,
                color: 5723991,
                scale: 1
            },
            img: {
                sprite: "map-statue-01.img",
                scale: .5
            }
        }),
        statue_03: Me({
            stonePlated: !0,
            health: 500,
            height: 10,
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .85
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.4, 4.4)),
            destructible: !0,
            map: {
                display: !0,
                color: 5723991,
                scale: 1
            },
            img: {
                sprite: "map-statue-03.img",
                scale: .5,
                residue: ""
            }
        }),
        statue_04: Me({
            stonePlated: !0,
            health: 500,
            height: 10,
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .85
            },
            collision: n.createAabbExtents(e.create(0, 0), e.create(4.4, 4.4)),
            destructible: !0,
            map: {
                display: !0,
                color: 5723991,
                scale: 1
            },
            img: {
                sprite: "map-statue-04.img",
                scale: .5,
                residue: ""
            }
        }),
        statue_top_01: Me({
            health: 500,
            height: 10,
            collision: n.createCircle(e.create(0, 0), 2.45),
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            destructible: !0,
            map: {
                display: !1,
                color: 5723991,
                scale: 1
            },
            img: {
                sprite: "map-statue-top-01.img",
                residue: "",
                scale: .5,
                zIdx: 60
            }
        }),
        statue_top_02: Me({
            health: 500,
            height: 10,
            collision: n.createCircle(e.create(0, 0), 2.45),
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            destructible: !0,
            map: {
                display: !1,
                color: 5723991,
                scale: 1
            },
            img: {
                sprite: "map-statue-top-02.img",
                residue: "",
                scale: .5,
                zIdx: 60
            }
        }),
        statue_structure_01: {
            type: "building",
            ori: 0,
            terrain: {},
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "statue_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "statue_top_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        },
        statue_structure_02: {
            type: "building",
            ori: 0,
            terrain: {},
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "statue_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "statue_top_02",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        },
        statue_building_03: Ca({
            statue: "statue_03"
        }),
        statue_underground_03: Pa({
            crate: "crate_02d"
        }),
        statue_structure_03: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 5), e.create(7.5, 12.5))],
            layers: [{
                type: "statue_building_03",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "statue_underground_03",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(-1, 0), e.create(2.6, 2)),
                downDir: e.create(1, 0)
            }],
            mask: [n.createAabbExtents(e.create(5.7, 0), e.create(4, 4))]
        },
        statue_building_04: Ca({
            statue: "statue_04"
        }),
        statue_underground_04: Pa({
            crate: "crate_22d"
        }),
        statue_structure_04: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 5), e.create(7.5, 12.5))],
            layers: [{
                type: "statue_building_04",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "statue_underground_04",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(-1, 0), e.create(2.6, 2)),
                downDir: e.create(1, 0)
            }],
            mask: [n.createAabbExtents(e.create(5.7, 0), e.create(4, 4))]
        },
        river_town_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(70.75, .5), e.create(30, 54.5)),
                    color: 3815994
                }, {
                    collider: n.createAabbExtents(e.create(77.5, 64), e.create(23, 10)),
                    color: 3815994
                }, {
                    collider: n.createAabbExtents(e.create(111, -29.5), e.create(10.5, 24.5)),
                    color: 3815994
                }, {
                    collider: n.createAabbExtents(e.create(50, 0), e.create(4.4, 4.4)),
                    color: 5723991
                }]
            },
            terrain: {
                bridge: {
                    nearbyWidthMult: 1
                },
                spawnPriority: 100
            },
            bridgeLandBounds: [n.createAabbExtents(e.create(-41, 0), e.create(6, 10)), n.createAabbExtents(e.create(41, 0), e.create(6, 10)), n.createAabbExtents(e.create(81, 0), e.create(40, 54)), n.createAabbExtents(e.create(78, 64), e.create(23, 10)), n.createAabbExtents(e.create(-76, -22), e.create(36, 24)), n.createAabbExtents(e.create(-72, 22), e.create(27, 25))],
            bridgeWaterBounds: [n.createAabbExtents(e.create(0, 0), e.create(5, 5))],
            mapObstacleBounds: [n.createAabbExtents(e.create(71, 0), e.create(31, 56)), n.createAabbExtents(e.create(77, 65), e.create(24, 10)), n.createAabbExtents(e.create(112, -30), e.create(10, 26)), n.createAabbExtents(e.create(106, 19.5), e.create(8, 7.25)), n.createAabbExtents(e.create(-71, 32), e.create(27, 15)), n.createAabbExtents(e.create(-71, 16), e.create(8, 6)), n.createAabbExtents(e.create(-75, -34), e.create(40, 19)), n.createAabbExtents(e.create(-57, -10), e.create(5, 11)), n.createAabbExtents(e.create(-86, -10), e.create(5, 11)), n.createAabbExtents(e.create(-21, 0), e.create(100, 8)), n.createAabbExtents(e.create(-109, 30), e.create(7, 7.25)), n.createAabbExtents(e.create(0, 0), e.create(40, 15))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(-20, 0), e.create(100, 6)),
                color: 6632211,
                roughness: .05,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-71, 10), e.create(2, 9)),
                color: 6632211,
                roughness: 0,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-57, -10), e.create(2, 9)),
                color: 6632211,
                roughness: 0,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-109, 30), e.create(6, 6.25)),
                color: 3293977,
                roughness: .05,
                offsetDist: .5
            }, {
                bound: n.createAabbExtents(e.create(-86, -10), e.create(2, 9)),
                color: 6632211,
                roughness: 0,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(106, 19.5), e.create(7, 6.25)),
                color: 3293977,
                roughness: .05,
                offsetDist: .5
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(70.75, .5), e.create(30, 54.5)), n.createAabbExtents(e.create(77.5, 64), e.create(23, 10)), n.createAabbExtents(e.create(111, -29.5), e.create(10.5, 24.5))]
                }],
                imgs: [{
                    sprite: "map-complex-warehouse-floor-04.img",
                    pos: e.create(81, 10),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "bridge_xlg_structure_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "barn_01",
                pos: e.create(-71, 30),
                scale: 1,
                ori: 2
            }, {
                type: "house_red_01",
                pos: e.create(-56, -30),
                scale: 1,
                ori: 0
            }, {
                type: "house_red_02",
                pos: e.create(-96, -30),
                scale: 1,
                ori: 0
            }, {
                type: "sandbags_02",
                pos: e.create(-68, 2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 3
                }),
                pos: e.create(-85, 1),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 3
                }),
                pos: e.create(-90, -1),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_02f",
                pos: e.create(-106.5, 32.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(-111.25, 32.25),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-108, 27.25),
                scale: 1,
                ori: 0
            }, {
                type: "statue_structure_01",
                pos: e.create(-50, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(45, 36),
                scale: 1,
                ori: 2
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(51, 36),
                scale: 1,
                ori: 2
            }, {
                type: "shack_02",
                pos: e.create(47, 20),
                scale: 1,
                ori: 0
            }, {
                type: "warehouse_02",
                pos: e.create(78, 40),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(95, 44),
                scale: 1,
                ori: 0
            }, {
                type: "statue_structure_02",
                pos: e.create(50, 0),
                scale: 1,
                ori: 2
            }, {
                type: "crate_01",
                pos: e.create(74.5, -.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(79.5, .25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(106, 22),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(104.5, 17.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_22",
                pos: e.create(109.25, 17.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(85, -13),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(45, -36),
                scale: 1,
                ori: 0
            }, {
                type: "shack_02",
                pos: e.create(47, -20),
                scale: 1,
                ori: 2
            }, {
                type: "warehouse_02",
                pos: e.create(86, -30),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(72, -47),
                scale: 1,
                ori: 1
            }]
        },
        river_town_02: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            oris: [0, 1],
            mapObstacleBounds: [n.createAabbExtents(e.create(61, -3), e.create(24, 21)), n.createAabbExtents(e.create(46, -36), e.create(6, 14)), n.createAabbExtents(e.create(-68, 0), e.create(27, 8)), n.createAabbExtents(e.create(0, 0), e.create(14, 14)), n.createAabbExtents(e.create(-80, 32), e.create(4, 4)), n.createAabbExtents(e.create(-16, 13), e.create(5, 2.5)), n.createAabbExtents(e.create(16, -13), e.create(5, 2.5)), n.createAabbExtents(e.create(-76.5, 19.5), e.create(2.5, 2.5)), n.createAabbExtents(e.create(-62, -18), e.create(2.5, 2.5))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(-5, 0), e.create(70, 6)),
                color: 9585940,
                roughness: .05,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-71, 10), e.create(2, 9)),
                color: 9585940,
                roughness: .05,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-76, 19), e.create(10.5, 8)),
                color: 9585940,
                roughness: .1,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-57, -10), e.create(2, 9)),
                color: 9585940,
                roughness: .05,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(-63, -19), e.create(11.5, 8.5)),
                color: 9585940,
                roughness: .1,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(0, 0), e.create(14, 10)),
                color: 8405016,
                roughness: .3,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(0, 0), e.create(9, 22)),
                color: 8405016,
                roughness: .3,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(0, 0), e.create(4, 33)),
                color: 8405016,
                roughness: .3,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(61, -3), e.create(22, 19)),
                color: 3815994,
                roughness: .15,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(45, -34), e.create(5.75, 14)),
                color: 3815994,
                roughness: .15,
                offsetDist: 1
            }, {
                bound: n.createAabbExtents(e.create(69, -10), e.create(4, 3.75)),
                color: 14657367,
                roughness: .2,
                offsetDist: 1
            }],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(61, -3), e.create(22, 19)), n.createAabbExtents(e.create(45, -34), e.create(5.75, 14))]
                }],
                imgs: [{
                    sprite: "map-complex-warehouse-floor-05.img",
                    pos: e.create(81, 10),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "stone_06",
                pos: e.create(-16, 13),
                scale: 1,
                ori: 0,
                inheritOri: !0
            }, {
                type: "stone_06",
                pos: e.create(16, -13),
                scale: 1,
                ori: 0,
                inheritOri: !0
            }, {
                type: "sandbags_02",
                pos: e.create(-68, 2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 4
                }),
                pos: e.create(-85, 1),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 4
                }),
                pos: e.create(-90, -1),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "statue_structure_03",
                pos: e.create(-50, 0),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-80, 32),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 4
                }),
                pos: e.create(-76.5, 19.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    crate_02: 1,
                    crate_01: 4
                }),
                pos: e.create(-62, -18),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "statue_structure_04",
                pos: e.create(50, 0),
                scale: 1,
                ori: 2
            }, {
                type: "tree_06",
                pos: e.create(69, -10),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(74.5, -.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(79.5, .25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: z({
                    container_01: 1,
                    container_02: 1,
                    container_03: 1
                }),
                pos: e.create(45, -36),
                scale: 1,
                ori: 0
            }, {
                type: "tree_05c",
                pos: e.create(0, 2),
                scale: 2,
                ori: 0,
                inheritOri: !1
            }, {
                type: "case_05",
                pos: e.create(0, -2),
                scale: 1,
                ori: 0,
                inheritOri: !0
            }]
        },
        shack_wall_top: v({
            material: "wood",
            extents: e.create(5.6, .35),
            height: 10,
            img: V("map-wall-shack-top.img")
        }),
        shack_wall_side_left: v({
            material: "wood",
            extents: e.create(.35, 3.43),
            height: 10,
            img: V("map-wall-shack-left.img")
        }),
        shack_wall_side_right: v({
            material: "wood",
            extents: e.create(.35, 3.8),
            height: 10,
            img: V("map-wall-shack-right.img")
        }),
        shack_wall_bot: v({
            material: "wood",
            extents: e.create(3.75, .35),
            height: 10,
            img: V("map-wall-shack-bot.img")
        }),
        shack_01: Xa({}),
        shack_01x: Xa({
            ceiling: {
                imgs: [{
                    sprite: "map-building-shack-ceiling-01.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-05.img",
                    pos: e.create(-4, 2.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(3.5, -.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            }
        }),
        shack_02: Qa({}),
        shack_02x: Qa({
            ceiling: {
                imgs: [{
                    sprite: "map-building-shack-ceiling-02.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-05.img",
                    pos: e.create(-2, 1),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            }
        }),
        shilo_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    color: 3240224,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [n.createAabbExtents(e.create(0, -1), e.create(17, 15))],
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(15, 12))]
                    }],
                    imgs: [{
                        sprite: "map-building-shilo-floor-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: e.create(0, -13),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    zoomRegions: [{
                        zoomIn: n.createAabbExtents(e.create(0, 0), e.create(14.5, 11.5)),
                        zoomOut: n.createAabbExtents(e.create(0, 0), e.create(14.5, 11.5))
                    }],
                    vision: {
                        width: 4
                    },
                    imgs: [{
                        sprite: "map-building-shilo-ceiling-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "metal_wall_ext_12_5",
                    pos: e.create(7.75, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_12_5",
                    pos: e.create(-7.75, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_13",
                    pos: e.create(8.5, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_13",
                    pos: e.create(-8.5, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_23",
                    pos: e.create(-14.5, .5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_23",
                    pos: e.create(14.5, .5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "silo_01po",
                    pos: e.create(0, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: e.create(-2, -12),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_window_01",
                    pos: e.create(0, 11.75),
                    scale: 1,
                    ori: 1
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        shack_wall_ext_2: v({
            material: "wood",
            extents: e.create(.5, 1),
            hitParticle: "tanChip",
            img: V("map-wall-02.img", 12556639)
        }),
        shack_wall_ext_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "tanChip",
            img: V("map-wall-05.img", 12556639)
        }),
        shack_wall_ext_9: v({
            material: "wood",
            extents: e.create(.5, 4.5),
            hitParticle: "tanChip",
            img: V("map-wall-09.img", 12556639)
        }),
        shack_wall_ext_10: v({
            material: "wood",
            extents: e.create(.5, 5),
            hitParticle: "tanChip",
            img: V("map-wall-10.img", 12556639)
        }),
        shack_wall_ext_14: v({
            material: "wood",
            extents: e.create(.5, 7),
            hitParticle: "tanChip",
            img: V("map-wall-14.img", 12556639)
        }),
        shack_03a: Ar({
            terrain: {
                bridge: {
                    nearbyWidthMult: 1
                },
                nearbyRiver: {
                    radMin: .75,
                    radMax: 1.5,
                    facingOri: 1
                }
            }
        }),
        shack_03b: Ar({
            terrain: {
                waterEdge: {
                    dir: e.create(0, 1),
                    distMin: 4,
                    distMax: 5
                }
            },
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(-7.75, 3), e.create(1, 2)),
                    color: 6171907
                }, {
                    collider: n.createAabbExtents(e.create(5, -4.75), e.create(2, 1)),
                    color: 6171907
                }, {
                    collider: n.createAabbExtents(e.create(1, 1.5), e.create(8, 5.5)),
                    color: 5730406
                }, {
                    collider: n.createAabbExtents(e.create(-10.65, 9), e.create(2, 12)),
                    color: 6171907
                }]
            },
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(1, 1.5), e.create(8, 5.5)), n.createAabbExtents(e.create(-10.65, 9), e.create(2, 12)), n.createAabbExtents(e.create(-7.75, 3), e.create(1, 2)), n.createAabbExtents(e.create(5, -4.75), e.create(2, 1))]
                }],
                imgs: [{
                    sprite: "map-building-shack-floor-03.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-hut-floor-02.img",
                    pos: e.create(-10.65, 9),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                imgs: [{
                    sprite: "map-building-shack-ceiling-03.img",
                    pos: e.create(.5, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }]
            }
        }),
        shack_03x: Ar({
            terrain: {
                bridge: {
                    nearbyWidthMult: 1
                },
                nearbyRiver: {
                    radMin: .75,
                    radMax: 1.5,
                    facingOri: 1
                }
            },
            ceiling: {
                imgs: [{
                    sprite: "map-building-shack-ceiling-03.img",
                    pos: e.create(.5, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 10461087
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(3.75, 1.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }]
            }
        }),
        outhouse_wall_top: v({
            material: "wood",
            extents: e.create(3.2, .35),
            height: 10,
            hitParticle: "outhouseChip",
            explodeParticle: "outhousePlank",
            health: 100,
            img: V("map-wall-outhouse-top.img")
        }),
        outhouse_wall_side: v({
            material: "wood",
            extents: e.create(.35, 3.1),
            height: 10,
            hitParticle: "outhouseChip",
            explodeParticle: "outhousePlank",
            health: 100,
            img: V("map-wall-outhouse-side.img")
        }),
        outhouse_wall_bot: v({
            material: "wood",
            extents: e.create(1.15, .35),
            height: 10,
            hitParticle: "outhouseChip",
            explodeParticle: "outhousePlank",
            health: 100,
            img: V("map-wall-outhouse-bot.img")
        }),
        outhouse_01: Br({}),
        outhouse_01x: Br({
            ceiling: {
                imgs: [{
                    sprite: "map-building-outhouse-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(2.25, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            }
        }),
        outhouse_02: Br({
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 1.45), e.create(3.6, 3.2)),
                    zoomOut: n.createAabbExtents(e.create(0, 1.4), e.create(3.8, 3.4))
                }],
                imgs: [{
                    sprite: "map-building-outhouse-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 13735576
                }],
                destroy: {
                    wallCount: 2,
                    particleCount: 15,
                    particle: "outhouseBreak",
                    residue: "map-outhouse-res.img"
                }
            },
            obs: "toilet_02b"
        }),
        perch_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    color: 1915136,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(7, 8))],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(4.25, 5)), n.createAabbExtents(e.create(5, 0), e.create(1.25, 2)), n.createAabbExtents(e.create(-5, 0), e.create(1.25, 2))]
                    }],
                    imgs: [{
                        sprite: "map-building-perch-floor.img",
                        pos: e.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    zoomRegions: [],
                    imgs: [{
                        sprite: "map-building-perch-ceiling.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }],
                    destroy: {
                        wallCount: 5,
                        particleCount: 15,
                        particle: "shackGreenBreak",
                        residue: "map-perch-res.img"
                    }
                },
                mapObjects: [{
                    type: "loot_tier_1",
                    pos: e.create(0, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_2",
                    pos: e.create(3.5, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_2",
                    pos: e.create(-3.5, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_2",
                    pos: e.create(3.5, 3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_2",
                    pos: e.create(-3.5, 3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_2_5",
                    pos: e.create(2.75, -4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_2_5",
                    pos: e.create(-2.75, -4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_2_5",
                    pos: e.create(2.75, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_2_5",
                    pos: e.create(-2.75, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_broken_01",
                    pos: e.create(0, 4.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_broken_01",
                    pos: e.create(0, -4.75),
                    scale: 1,
                    ori: 1
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        brick_wall_ext_1: v({
            material: "brick",
            extents: e.create(.5, .5)
        }),
        brick_wall_ext_2: v({
            material: "brick",
            extents: e.create(.5, 1)
        }),
        brick_wall_ext_3: v({
            material: "brick",
            extents: e.create(.5, 1.5)
        }),
        brick_wall_ext_4: v({
            material: "brick",
            extents: e.create(.5, 2)
        }),
        brick_wall_ext_5: v({
            material: "brick",
            extents: e.create(.5, 2.5)
        }),
        brick_wall_ext_6: v({
            material: "brick",
            extents: e.create(.5, 3)
        }),
        brick_wall_ext_7: v({
            material: "brick",
            extents: e.create(.5, 3.5)
        }),
        brick_wall_ext_8: v({
            material: "brick",
            extents: e.create(.5, 4)
        }),
        brick_wall_ext_9: v({
            material: "brick",
            extents: e.create(.5, 4.5)
        }),
        brick_wall_ext_10: v({
            material: "brick",
            extents: e.create(.5, 5)
        }),
        brick_wall_ext_11: v({
            material: "brick",
            extents: e.create(.5, 5.5)
        }),
        brick_wall_ext_12: v({
            material: "brick",
            extents: e.create(.5, 6)
        }),
        brick_wall_ext_12_5: v({
            material: "brick",
            extents: e.create(.5, 6.25)
        }),
        brick_wall_ext_13: v({
            material: "brick",
            extents: e.create(.5, 6.5)
        }),
        brick_wall_ext_14: v({
            material: "brick",
            extents: e.create(.5, 7)
        }),
        brick_wall_ext_15: v({
            material: "brick",
            extents: e.create(.5, 7.5)
        }),
        brick_wall_ext_16: v({
            material: "brick",
            extents: e.create(.5, 8)
        }),
        brick_wall_ext_17: v({
            material: "brick",
            extents: e.create(.5, 8.5)
        }),
        brick_wall_ext_18: v({
            material: "brick",
            extents: e.create(.5, 9)
        }),
        brick_wall_ext_19: v({
            material: "brick",
            extents: e.create(.5, 9.5)
        }),
        brick_wall_ext_20: v({
            material: "brick",
            extents: e.create(.5, 10)
        }),
        brick_wall_ext_21: v({
            material: "brick",
            extents: e.create(.5, 10.5)
        }),
        brick_wall_ext_23: v({
            material: "brick",
            extents: e.create(.5, 11.5)
        }),
        brick_wall_ext_33: v({
            material: "brick",
            extents: e.create(.5, 16.5)
        }),
        brick_wall_ext_41: v({
            material: "brick",
            extents: e.create(.5, 20.5)
        }),
        brick_wall_ext_short_7: v({
            material: "brick",
            extents: e.create(.5, 3.5),
            height: .5
        }),
        brick_wall_ext_thicker_4: v({
            material: "brick",
            extents: e.create(1.5, 2)
        }),
        brick_wall_ext_thicker_5: v({
            material: "brick",
            extents: e.create(1.5, 2.5)
        }),
        brick_wall_ext_thicker_6: v({
            material: "brick",
            extents: e.create(1.5, 3)
        }),
        brick_wall_ext_thicker_7: v({
            material: "brick",
            extents: e.create(1.5, 3.5)
        }),
        brick_wall_ext_thicker_8: v({
            material: "brick",
            extents: e.create(1.5, 4)
        }),
        brick_wall_ext_thicker_9: v({
            material: "brick",
            extents: e.create(1.5, 4.5)
        }),
        brick_wall_ext_thicker_15: v({
            material: "brick",
            extents: e.create(1.5, 7.5)
        }),
        brick_wall_ext_thicker_16: v({
            material: "brick",
            extents: e.create(1.5, 8)
        }),
        brick_wall_ext_thicker_24: v({
            material: "brick",
            extents: e.create(1.5, 12)
        }),
        concrete_wall_ext_thin_6: v({
            material: "concrete",
            extents: e.create(.375, 3)
        }),
        concrete_wall_ext_1_5: v({
            material: "concrete",
            extents: e.create(.5, .75)
        }),
        concrete_wall_ext_2: v({
            material: "concrete",
            extents: e.create(.5, 1)
        }),
        concrete_wall_ext_3: v({
            material: "concrete",
            extents: e.create(.5, 1.5)
        }),
        concrete_wall_ext_4: v({
            material: "concrete",
            extents: e.create(.5, 2)
        }),
        concrete_wall_ext_5: v({
            material: "concrete",
            extents: e.create(.5, 2.5)
        }),
        concrete_wall_ext_6: v({
            material: "concrete",
            extents: e.create(.5, 3)
        }),
        concrete_wall_ext_7: v({
            material: "concrete",
            extents: e.create(.5, 3.5)
        }),
        concrete_wall_ext_8: v({
            material: "concrete",
            extents: e.create(.5, 4)
        }),
        concrete_wall_ext_9: v({
            material: "concrete",
            extents: e.create(.5, 4.5)
        }),
        concrete_wall_ext_9_5: v({
            material: "concrete",
            extents: e.create(.5, 4.75)
        }),
        concrete_wall_ext_10_5: v({
            material: "concrete",
            extents: e.create(.5, 5.25)
        }),
        concrete_wall_ext_11: v({
            material: "concrete",
            extents: e.create(.5, 5.5)
        }),
        concrete_wall_ext_11_5: v({
            material: "concrete",
            extents: e.create(.5, 5.75)
        }),
        concrete_wall_ext_13: v({
            material: "concrete",
            extents: e.create(.5, 6.5)
        }),
        concrete_wall_ext_14: v({
            material: "concrete",
            extents: e.create(.5, 7)
        }),
        concrete_wall_ext_15: v({
            material: "concrete",
            extents: e.create(.5, 7.5)
        }),
        concrete_wall_ext_16: v({
            material: "concrete",
            extents: e.create(.5, 8)
        }),
        concrete_wall_ext_17: v({
            material: "concrete",
            extents: e.create(.5, 8.5)
        }),
        concrete_wall_ext_23: v({
            material: "concrete",
            extents: e.create(.5, 11.5)
        }),
        concrete_wall_ext_24: v({
            material: "concrete",
            extents: e.create(.5, 12)
        }),
        concrete_wall_ext_25: v({
            material: "concrete",
            extents: e.create(.5, 12.5)
        }),
        concrete_wall_column_4x8: v({
            material: "concrete",
            extents: e.create(2, 4)
        }),
        concrete_wall_column_4x9: v({
            material: "concrete",
            extents: e.create(2, 4.5)
        }),
        concrete_wall_column_4x24: v({
            material: "concrete",
            extents: e.create(2, 12)
        }),
        concrete_wall_column_5x10: v({
            material: "concrete",
            extents: e.create(2.5, 5)
        }),
        concrete_wall_column_7x10: v({
            material: "concrete",
            extents: e.create(3.5, 5)
        }),
        concrete_wall_ext_thick_11: v({
            material: "concrete",
            extents: e.create(1, 5.5)
        }),
        concrete_wall_ext_thicker_4: v({
            material: "concrete",
            extents: e.create(1.5, 2)
        }),
        concrete_wall_ext_thicker_5: v({
            material: "concrete",
            extents: e.create(1.5, 2.5)
        }),
        concrete_wall_ext_thicker_6: v({
            material: "concrete",
            extents: e.create(1.5, 3)
        }),
        concrete_wall_ext_thicker_8: v({
            material: "concrete",
            extents: e.create(1.5, 4)
        }),
        concrete_wall_ext_thicker_9: v({
            material: "concrete",
            extents: e.create(1.5, 4.5)
        }),
        concrete_wall_ext_thicker_10: v({
            material: "concrete",
            extents: e.create(1.5, 5)
        }),
        concrete_wall_ext_thicker_11: v({
            material: "concrete",
            extents: e.create(1.5, 5.5)
        }),
        concrete_wall_ext_thicker_12: v({
            material: "concrete",
            extents: e.create(1.5, 6)
        }),
        concrete_wall_ext_thicker_13: v({
            material: "concrete",
            extents: e.create(1.5, 6.5)
        }),
        concrete_wall_ext_thicker_14: v({
            material: "concrete",
            extents: e.create(1.5, 7)
        }),
        concrete_wall_ext_thicker_15: v({
            material: "concrete",
            extents: e.create(1.5, 7.5)
        }),
        concrete_wall_ext_thicker_17: v({
            material: "concrete",
            extents: e.create(1.5, 8.5)
        }),
        concrete_wall_ext_thicker_19: v({
            material: "concrete",
            extents: e.create(1.5, 9.5)
        }),
        concrete_wall_ext_thicker_21: v({
            material: "concrete",
            extents: e.create(1.5, 10.5)
        }),
        concrete_wall_ext_thicker_22: v({
            material: "concrete",
            extents: e.create(1.5, 11)
        }),
        concrete_wall_ext_thicker_27: v({
            material: "concrete",
            extents: e.create(1.5, 13.5)
        }),
        concrete_wall_ext_thicker_30: v({
            material: "concrete",
            extents: e.create(1.5, 15)
        }),
        concrete_wall_ext_thicker_31: v({
            material: "concrete",
            extents: e.create(1.5, 15.5)
        }),
        concrete_wall_ext_thicker_42: v({
            material: "concrete",
            extents: e.create(1.5, 21)
        }),
        concrete_wall_ext_thicker_54: v({
            material: "concrete",
            extents: e.create(1.5, 27)
        }),
        metal_wall_ext_3: v({
            material: "metal",
            extents: e.create(.5, 1.5)
        }),
        metal_wall_ext_4: v({
            material: "metal",
            extents: e.create(.5, 2)
        }),
        metal_wall_ext_5: v({
            material: "metal",
            extents: e.create(.5, 2.5)
        }),
        metal_wall_ext_6: v({
            material: "metal",
            extents: e.create(.5, 3)
        }),
        metal_wall_ext_7: v({
            material: "metal",
            extents: e.create(.5, 3.5)
        }),
        metal_wall_ext_8: v({
            material: "metal",
            extents: e.create(.5, 4)
        }),
        metal_wall_ext_9: v({
            material: "metal",
            extents: e.create(.5, 4.5)
        }),
        metal_wall_ext_10: v({
            material: "metal",
            extents: e.create(.5, 5)
        }),
        metal_wall_ext_12: v({
            material: "metal",
            extents: e.create(.5, 6)
        }),
        metal_wall_ext_12_5: v({
            material: "metal",
            extents: e.create(.5, 6.25)
        }),
        metal_wall_ext_13: v({
            material: "metal",
            extents: e.create(.5, 6.5)
        }),
        metal_wall_ext_18: v({
            material: "metal",
            extents: e.create(.5, 9)
        }),
        metal_wall_ext_23: v({
            material: "metal",
            extents: e.create(.5, 11.5)
        }),
        metal_wall_ext_43: v({
            material: "metal",
            extents: e.create(.5, 21.5)
        }),
        metal_wall_ext_short_6: v({
            material: "metal",
            extents: e.create(.5, 3),
            height: .5
        }),
        metal_wall_ext_short_7: v({
            material: "metal",
            extents: e.create(.5, 3.5),
            height: .5
        }),
        metal_wall_ext_thick_6: v({
            material: "metal",
            extents: e.create(1, 3)
        }),
        metal_wall_ext_thick_12: v({
            material: "metal",
            extents: e.create(1, 6)
        }),
        metal_wall_ext_thick_20: v({
            material: "metal",
            extents: e.create(1, 10)
        }),
        metal_wall_ext_thicker_4: v({
            material: "metal",
            extents: e.create(1.5, 2)
        }),
        metal_wall_ext_thicker_5: v({
            material: "metal",
            extents: e.create(1.5, 2.5)
        }),
        metal_wall_ext_thicker_6: v({
            material: "metal",
            extents: e.create(1.5, 3)
        }),
        metal_wall_ext_thicker_7: v({
            material: "metal",
            extents: e.create(1.5, 3.5)
        }),
        metal_wall_ext_thicker_8: v({
            material: "metal",
            extents: e.create(1.5, 4)
        }),
        metal_wall_ext_thicker_9: v({
            material: "metal",
            extents: e.create(1.5, 4.5)
        }),
        metal_wall_ext_thicker_10: v({
            material: "metal",
            extents: e.create(1.5, 5)
        }),
        metal_wall_ext_thicker_11: v({
            material: "metal",
            extents: e.create(1.5, 5.5)
        }),
        metal_wall_ext_thicker_12: v({
            material: "metal",
            extents: e.create(1.5, 6)
        }),
        metal_wall_ext_thicker_13: v({
            material: "metal",
            extents: e.create(1.5, 6.5)
        }),
        metal_wall_ext_thicker_14: v({
            material: "metal",
            extents: e.create(1.5, 7)
        }),
        metal_wall_ext_thicker_15: v({
            material: "metal",
            extents: e.create(1.5, 7.5)
        }),
        metal_wall_ext_thicker_16: v({
            material: "metal",
            extents: e.create(1.5, 8)
        }),
        metal_wall_ext_thicker_17: v({
            material: "metal",
            extents: e.create(1.5, 8.5)
        }),
        metal_wall_ext_thicker_18: v({
            material: "metal",
            extents: e.create(1.5, 9)
        }),
        metal_wall_ext_thicker_19: v({
            material: "metal",
            extents: e.create(1.5, 9.5)
        }),
        metal_wall_ext_thicker_20: v({
            material: "metal",
            extents: e.create(1.5, 10)
        }),
        metal_wall_ext_thicker_21: v({
            material: "metal",
            extents: e.create(1.5, 10.5)
        }),
        metal_wall_ext_thicker_22: v({
            material: "metal",
            extents: e.create(1.5, 11)
        }),
        metal_wall_ext_thicker_23: v({
            material: "metal",
            extents: e.create(1.5, 11.5)
        }),
        metal_wall_ext_thicker_24: v({
            material: "metal",
            extents: e.create(1.5, 12)
        }),
        metal_wall_ext_thicker_25: v({
            material: "metal",
            extents: e.create(1.5, 12.5)
        }),
        metal_wall_ext_thicker_26: v({
            material: "metal",
            extents: e.create(1.5, 13)
        }),
        metal_wall_ext_thicker_27: v({
            material: "metal",
            extents: e.create(1.5, 13.5)
        }),
        metal_wall_ext_thicker_28: v({
            material: "metal",
            extents: e.create(1.5, 14.5)
        }),
        metal_wall_ext_thicker_29: v({
            material: "metal",
            extents: e.create(1.5, 14.5)
        }),
        metal_wall_ext_thicker_32: v({
            material: "metal",
            extents: e.create(1.5, 16)
        }),
        metal_wall_ext_thicker_34: v({
            material: "metal",
            extents: e.create(1.5, 17)
        }),
        metal_wall_ext_thicker_35: v({
            material: "metal",
            extents: e.create(1.5, 17.5)
        }),
        metal_wall_ext_thicker_42: v({
            material: "metal",
            extents: e.create(1.5, 21)
        }),
        metal_wall_ext_thicker_48: v({
            material: "metal",
            extents: e.create(1.5, 24)
        }),
        glass_wall_9: v({
            material: "glass",
            extents: e.create(.5, 4.5),
            health: 100,
            img: V("map-wall-glass-9.img")
        }),
        glass_wall_10: v({
            material: "glass",
            extents: e.create(.5, 5),
            health: 50,
            img: V("map-wall-glass-10.img")
        }),
        glass_wall_12: v({
            material: "glass",
            extents: e.create(.5, 6),
            health: 50,
            img: V("map-wall-glass-12.img")
        }),
        glass_wall_12_2: v({
            material: "glass",
            extents: e.create(1, 6),
            health: 5e3,
            img: V("map-wall-glass-12-2.img")
        }),
        glass_wall_18: v({
            material: "glass",
            extents: e.create(.5, 9),
            health: 150,
            img: V("map-wall-glass-18.img")
        }),
        panicroom_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(4.5, 6))]
                }],
                imgs: [{
                    sprite: "map-building-panicroom-floor.img",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(4.5, 6))
                }],
                imgs: [{
                    sprite: "map-building-panicroom-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_12",
                pos: e.create(-4, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_3",
                pos: e.create(-2, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(0, -5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_12",
                pos: e.create(4, 0),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_2",
                pos: e.create(0, -.05),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    "": 1
                }),
                pos: e.create(0, .05),
                scale: 1,
                ori: 0
            }]
        },
        barn_basement_stairs_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "map-building-barn-basement-stairs.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "concrete_wall_ext_8",
                pos: e.create(4, 2),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_column_4x8",
                pos: e.create(-2.5, 2),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_column_4x9",
                pos: e.create(0, -4),
                scale: 1,
                ori: 1
            }]
        },
        barn_basement_floor_01: Fa({}),
        barn_basement_floor_01d: Fa({
            basement: "barn_basement_floor_02d"
        }),
        barn_basement_floor_02: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }],
                imgs: [{
                    sprite: "map-building-barn-basement-floor-02.img",
                    pos: e.create(-2, -.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-1, -1), e.create(5, 6))
                }],
                imgs: [{
                    sprite: "map-building-barn-basement-ceiling-02.img",
                    pos: e.create(-1.4, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            mapObjects: [{
                type: "chest_04",
                pos: e.create(-1, -.5),
                scale: 1,
                ori: 1
            }]
        },
        barn_basement_floor_02d: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }],
                imgs: [{
                    sprite: "map-building-barn-basement-floor-02.img",
                    pos: e.create(-2, -.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-1, -1), e.create(5, 6))
                }],
                imgs: [{
                    sprite: "map-building-barn-basement-ceiling-02.img",
                    pos: e.create(-1.4, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6182731
                }]
            },
            mapObjects: [{
                type: "chest_04d",
                pos: e.create(-1, -.5),
                scale: 1,
                ori: 1
            }]
        },
        barn_basement_structure_01: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(30, 30))],
            layers: [{
                type: "barn_basement_stairs_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "barn_basement_floor_01",
                pos: e.create(-10, -.5),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(1.5, 1.5), e.create(2, 3.5)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(-12.5, -1), e.create(12, 8.5)), n.createAabbExtents(e.create(3.51, -6), e.create(4, 4))]
        },
        barn_basement_structure_01d: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(30, 30))],
            layers: [{
                type: "barn_basement_stairs_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "barn_basement_floor_01d",
                pos: e.create(-10, -.5),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(1.5, 1.5), e.create(2, 3.5)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(-12.5, -1), e.create(12, 8.5)), n.createAabbExtents(e.create(3.51, -6), e.create(4, 4))]
        },
        barn_wall_int_2: v({
            material: "wood",
            extents: e.create(.5, 1),
            hitParticle: "ltgreenChip",
            img: V("map-wall-02-rounded.img", 7173701)
        }),
        barn_wall_int_2_5: v({
            material: "wood",
            extents: e.create(.5, 1.25),
            hitParticle: "ltgreenChip",
            img: V("map-wall-02-5-rounded.img", 7173701)
        }),
        barn_wall_int_4: v({
            material: "wood",
            extents: e.create(.5, 2),
            hitParticle: "ltgreenChip",
            img: V("map-wall-04-rounded.img", 7173701)
        }),
        barn_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-05-rounded.img", 7173701)
        }),
        barn_wall_int_6: v({
            material: "wood",
            extents: e.create(.5, 3),
            hitParticle: "ltgreenChip",
            img: V("map-wall-06-rounded.img", 7173701)
        }),
        barn_wall_int_7: v({
            material: "wood",
            extents: e.create(.5, 3.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-07-rounded.img", 7173701)
        }),
        barn_wall_int_8: v({
            material: "wood",
            extents: e.create(.5, 4),
            hitParticle: "ltgreenChip",
            img: V("map-wall-08-rounded.img", 7173701)
        }),
        barn_wall_int_11: v({
            material: "wood",
            extents: e.create(.5, 5.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-11-rounded.img", 7173701)
        }),
        barn_wall_int_13: v({
            material: "wood",
            extents: e.create(.5, 6.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-13-rounded.img", 7173701)
        }),
        barn_column_1: v({
            material: "concrete",
            extents: e.create(1, 1),
            hitParticle: "ltgreenChip",
            img: V("map-column-01.img", 2764060)
        }),
        barn_01: Et({
            bonus_door: "house_door_02"
        }),
        barn_01h: Et({
            porch_01: "cache_pumpkin_02",
            bonus_door: "house_door_02"
        }),
        barn_01x: Et({
            ceiling: {
                imgs: [{
                    sprite: "map-building-barn-ceiling-01.img",
                    pos: e.create(0, -2),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-barn-ceiling-02.img",
                    pos: e.create(0, 13.2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(-14.5, 5.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(-.5, -9),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-03.img",
                    pos: e.create(14.5, 5.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            },
            bonus_door: "house_door_02"
        }),
        barn_02: Et({
            bonus_room: "barn_basement_structure_01",
            bonus_door: "",
            map: {
                displayType: "barn_01"
            }
        }),
        barn_02d: Et({
            bonus_room: "barn_basement_structure_01d",
            bonus_door: "",
            map: {
                displayType: "barn_01"
            }
        }),
        bank_wall_int_3: v({
            material: "wood",
            extents: e.create(.5, 1.5),
            img: V("map-wall-03-rounded.img", 7951934)
        }),
        bank_wall_int_4: v({
            material: "wood",
            extents: e.create(.5, 2),
            img: V("map-wall-04-rounded.img", 7951934)
        }),
        bank_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            img: V("map-wall-05-rounded.img", 7951934)
        }),
        bank_wall_int_8: v({
            material: "wood",
            extents: e.create(.5, 4),
            img: V("map-wall-08-rounded.img", 7951934)
        }),
        bank_01: Cr({
            teamId: 1
        }),
        bank_01b: Cr({
            vault: "vault_01b"
        }),
        bank_01x: Cr({
            ceiling: {
                imgs: [{
                    sprite: "map-building-bank-ceiling-01.img",
                    pos: e.create(-16, 7),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-bank-ceiling-02.img",
                    pos: e.create(6, 0),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-bank-ceiling-03.img",
                    pos: e.create(22, 8),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(-13, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(1.25, 9.25),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(13.75, 15.25),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(15.25, -15.75),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }]
            }
        }),
        vault_door_main: Pe({
            material: "metal",
            hinge: e.create(1, 3.5),
            extents: e.create(1, 3.5),
            img: {
                sprite: "map-door-02.img"
            },
            door: {
                interactionRad: 1.5,
                openSpeed: .23,
                openOneWay: -1,
                openDelay: 4.1,
                openOnce: !0,
                spriteAnchor: e.create(.2, 1),
                sound: {
                    open: "none",
                    close: "none",
                    change: "vault_change_01"
                }
            }
        }),
        vault_01: qa({}),
        vault_01b: qa({
            gold_box: 9,
            floor_loot: "loot_tier_stonehammer"
        }),
        police_wall_int_2: v({
            material: "wood",
            extents: e.create(.5, 1),
            img: V("map-wall-02-rounded.img", 1777447)
        }),
        police_wall_int_3: v({
            material: "wood",
            extents: e.create(.5, 1.5),
            img: V("map-wall-03-rounded.img", 1777447)
        }),
        police_wall_int_4: v({
            material: "wood",
            extents: e.create(.5, 2),
            img: V("map-wall-04-rounded.img", 1777447)
        }),
        police_wall_int_6: v({
            material: "wood",
            extents: e.create(.5, 3),
            img: V("map-wall-06-rounded.img", 1777447)
        }),
        police_wall_int_7: v({
            material: "wood",
            extents: e.create(.5, 3.5),
            img: V("map-wall-07-rounded.img", 1777447)
        }),
        police_wall_int_8: v({
            material: "wood",
            extents: e.create(.5, 4),
            img: V("map-wall-08-rounded.img", 1777447)
        }),
        police_wall_int_10: v({
            material: "wood",
            extents: e.create(.5, 5),
            img: V("map-wall-10-rounded.img", 1777447)
        }),
        police_01: $a({
            teamId: 2
        }),
        police_01x: $a({
            ceiling: {
                imgs: [{
                    sprite: "map-building-police-ceiling-01.img",
                    pos: e.create(-21.5, 8.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-police-ceiling-02.img",
                    pos: e.create(10.5, 0),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-police-ceiling-03.img",
                    pos: e.create(31.96, 12.5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(13, 17.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(-21, 14),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-03.img",
                    pos: e.create(30.25, 6.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-snow-07.img",
                    pos: e.create(4.5, -3.25),
                    scale: .6,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(-40.25, 14.75),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(-38.75, .75),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }]
            }
        }),
        house_wall_int_4: v({
            material: "wood",
            extents: e.create(.5, 2),
            hitParticle: "tanChip",
            img: V("map-wall-04-rounded.img", 10584424)
        }),
        house_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "tanChip",
            img: V("map-wall-05-rounded.img", 10584424)
        }),
        house_wall_int_8: v({
            material: "wood",
            extents: e.create(.5, 4),
            hitParticle: "tanChip",
            img: V("map-wall-08-rounded.img", 10584424)
        }),
        house_wall_int_9: v({
            material: "wood",
            extents: e.create(.5, 4.5),
            hitParticle: "tanChip",
            img: V("map-wall-09-rounded.img", 10584424)
        }),
        house_wall_int_11: v({
            material: "wood",
            extents: e.create(.5, 5.5),
            hitParticle: "tanChip",
            img: V("map-wall-11-rounded.img", 10584424)
        }),
        house_wall_int_14: v({
            material: "wood",
            extents: e.create(.5, 7),
            hitParticle: "tanChip",
            img: V("map-wall-14-rounded.img", 10584424)
        }),
        house_column_1: v({
            material: "concrete",
            extents: e.create(1, 1),
            hitParticle: "tanChip",
            img: V("map-column-01.img", 5587506)
        }),
        house_red_01: Lr({
            stand: "stand_01"
        }),
        house_red_01h: Lr({
            porch_01: "cache_pumpkin_02",
            stand: "stand_01"
        }),
        house_red_01x: Lr({
            ceiling: {
                imgs: [{
                    sprite: "map-building-house-ceiling.img",
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(-5.5, 8.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(4.5, -7),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            }
        }),
        house_red_02: qr({
            stand: "stand_01"
        }),
        house_red_02h: qr({
            porch_01: "cache_pumpkin_02",
            stand: "stand_01"
        }),
        house_red_02x: qr({
            ceiling: {
                imgs: [{
                    sprite: "map-building-house-ceiling.img",
                    scale: .667,
                    alpha: 1,
                    tint: 13619151,
                    rot: 2
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(3.5, 6),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(-4.5, -8),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            }
        }),
        cabin_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "tanChip",
            img: V("map-wall-05-rounded.img", 10584424)
        }),
        cabin_wall_int_10: v({
            material: "wood",
            extents: e.create(.5, 5),
            hitParticle: "tanChip",
            img: V("map-wall-10-rounded.img", 10584424)
        }),
        cabin_wall_int_13: v({
            material: "wood",
            extents: e.create(.5, 6.5),
            hitParticle: "tanChip",
            img: V("map-wall-13-rounded.img", 10584424)
        }),
        cabin_01: Pr({}),
        cabin_01x: Pr({
            ceiling: {
                imgs: [{
                    sprite: "map-building-cabin-ceiling-01a.img",
                    pos: e.create(0, .5),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-cabin-ceiling-01b.img",
                    pos: e.create(4, -13),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(-13, 6),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(-3.5, -6.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-03.img",
                    pos: e.create(10.75, 8.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-chimney-01.img",
                    pos: e.create(13, 2),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    removeOnDamaged: !0
                }]
            }
        }),
        cabin_02: Pr({
            cabin_mount: "gun_mount_02",
            porch_01: "cache_pumpkin_02"
        }),
        dock_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(2.5, 0), e.create(2.4, 10.25)),
                    color: 8862486
                }, {
                    collider: n.createAabbExtents(e.create(-2.45, 7.75), e.create(2.6, 2.5)),
                    color: 8862486
                }]
            },
            terrain: {
                grass: !0,
                beach: !1,
                bridge: {
                    nearbyWidthMult: .75
                }
            },
            bridgeLandBounds: [n.createAabbExtents(e.create(2.5, -10.5), e.create(2.5, 1.5))],
            bridgeWaterBounds: [n.createAabbExtents(e.create(0, 7.75), e.create(5.5, 3.5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(2.5, 0), e.create(2.4, 10.25)), n.createAabbExtents(e.create(-2.45, 7.75), e.create(2.6, 2.5))]
                }],
                imgs: [{
                    sprite: "map-building-dock-floor-01a.img",
                    pos: e.create(-2.5, 7.85),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-dock-floor-01b.img",
                    pos: e.create(2.5, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "bollard_01",
                pos: e.create(-4.25, 7.75),
                scale: .8,
                ori: 2
            }, {
                type: z({
                    barrel_01: 1,
                    crate_01: 1
                }),
                pos: e.create(3, 8.25),
                scale: .75,
                ori: 0
            }]
        },
        mansion_wall_int_1: v({
            material: "wood",
            extents: e.create(.5, .5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-01-rounded.img", 16768917)
        }),
        mansion_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-05-rounded.img", 16768917)
        }),
        mansion_wall_int_6: v({
            material: "wood",
            extents: e.create(.5, 3),
            hitParticle: "ltgreenChip",
            img: V("map-wall-06-rounded.img", 16768917)
        }),
        mansion_wall_int_7: v({
            material: "wood",
            extents: e.create(.5, 3.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-07-rounded.img", 16768917)
        }),
        mansion_wall_int_8: v({
            material: "wood",
            extents: e.create(.5, 4),
            hitParticle: "ltgreenChip",
            img: V("map-wall-08-rounded.img", 16768917)
        }),
        mansion_wall_int_9: v({
            material: "wood",
            extents: e.create(.5, 4.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-09-rounded.img", 16768917)
        }),
        mansion_wall_int_10: v({
            material: "wood",
            extents: e.create(.5, 5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-10-rounded.img", 16768917)
        }),
        mansion_wall_int_11: v({
            material: "wood",
            extents: e.create(.5, 5.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-11-rounded.img", 16768917)
        }),
        mansion_wall_int_12: v({
            material: "wood",
            extents: e.create(.5, 6),
            hitParticle: "ltgreenChip",
            img: V("map-wall-12-rounded.img", 16768917)
        }),
        mansion_wall_int_13: v({
            material: "wood",
            extents: e.create(.5, 6.5),
            hitParticle: "ltgreenChip",
            img: V("map-wall-13-rounded.img", 16768917)
        }),
        mansion_column_1: v({
            material: "concrete",
            extents: e.create(1, 1),
            hitParticle: "tanChip",
            img: V("map-column-01.img", 7432016)
        }),
        saferoom_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(6, 4))]
                }],
                imgs: [{
                    sprite: "map-building-saferoom-floor.img",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(5, 3))
                }],
                imgs: [{
                    sprite: "map-building-saferoom-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_7",
                pos: e.create(-5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_6",
                pos: e.create(1.5, 3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_9",
                pos: e.create(0, -3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(5, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    case_01: 1,
                    case_02: .025,
                    chest_02: 1
                }),
                pos: e.create(2.5, 0),
                scale: 1,
                ori: 3
            }]
        },
        mansion_01: Er({}),
        mansion_01x: Er({
            ceiling: {
                imgs: [{
                    sprite: "map-building-mansion-ceiling.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-01.img",
                    pos: e.create(6, 19.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-02.img",
                    pos: e.create(-16, 8),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-snow-03.img",
                    pos: e.create(20.25, -1.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-04.img",
                    pos: e.create(10.25, -13.25),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-05.img",
                    pos: e.create(10.25, 6.25),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-07.img",
                    pos: e.create(-21.25, -20.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(-29.75, 13.25),
                    scale: .75,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            },
            tree: "tree_11",
            tree_scale: 1,
            tree_loot: "loot_tier_1",
            bush_chance: 999
        }),
        mansion_02: Er({
            decoration_01: "decal_web_01",
            decoration_02: "candle_lit_01",
            porch_01: "cache_pumpkin_02",
            entry_loot: ""
        }),
        mansion_cellar_01: Ga({}),
        mansion_cellar_02: Ga({
            decoration_01: "decal_web_01",
            decoration_02: "candle_lit_01",
            mid_obs_01: "pumpkin_01"
        }),
        mansion_structure_01: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            layers: [{
                type: "mansion_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "mansion_cellar_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(28, 1.5), e.create(3, 2.55)),
                downDir: e.create(-1, 0),
                noCeilingReveal: !0
            }, {
                collision: n.createAabbExtents(e.create(1, 13.5), e.create(2, 3.5)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(10, -.1), e.create(15, 10.1)), n.createAabbExtents(e.create(17.5, 13.5), e.create(7.49, 3.49))],
            teamId: 1
        },
        mansion_structure_02: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            layers: [{
                type: "mansion_02",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "mansion_cellar_02",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(28, 1.5), e.create(3, 2.55)),
                downDir: e.create(-1, 0),
                noCeilingReveal: !0
            }, {
                collision: n.createAabbExtents(e.create(1, 13.5), e.create(2, 3.5)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(10, -.1), e.create(15, 10.1)), n.createAabbExtents(e.create(17.5, 13.5), e.create(7.49, 3.49))]
        },
        saloon_column_1: v({
            material: "woodPerm",
            extents: e.create(1, 1),
            hitParticle: "blackChip",
            img: V("map-column-01.img", 1710618)
        }),
        saloon_bar_small: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 5)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        saloon_bar_large: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 7.5)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        saloon_bar_back_large: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 5)),
            img: {
                sprite: "map-saloon-bar-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            }
        }),
        saloon_bar_back_small: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 1.5)),
            img: {
                sprite: "map-saloon-bar-02.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            }
        }),
        saloon_door_secret: Pe({
            destructible: !1,
            material: "wood",
            hitParticle: "woodChip",
            hinge: e.create(0, 2),
            extents: e.create(.75, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                openOneWay: !1,
                openSpeed: 36,
                autoOpen: !1,
                autoClose: !1,
                slideToOpen: !0,
                slideOffset: 4.5,
                sound: {
                    open: ""
                }
            },
            img: {
                sprite: "map-door-04.img",
                residue: "map-drawers-res.img",
                scale: .5,
                tint: 16777215,
                zIdx: 9
            }
        }),
        wood_perm_wall_ext_5: v({
            material: "woodPerm",
            extents: e.create(.5, 2.5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_6: v({
            material: "woodPerm",
            extents: e.create(.5, 3),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_7: v({
            material: "woodPerm",
            extents: e.create(.5, 3.5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_14: v({
            material: "woodPerm",
            extents: e.create(.5, 7),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_17: v({
            material: "woodPerm",
            extents: e.create(.5, 8.5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_35: v({
            material: "woodPerm",
            extents: e.create(.5, 17.5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_6: v({
            material: "woodPerm",
            extents: e.create(1.5, 3),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_7: v({
            material: "woodPerm",
            extents: e.create(1.5, 3.5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_8: v({
            material: "woodPerm",
            extents: e.create(1.5, 4),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_10: v({
            material: "woodPerm",
            extents: e.create(1.5, 5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_12: v({
            material: "woodPerm",
            extents: e.create(1.5, 6),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_13: v({
            material: "woodPerm",
            extents: e.create(1.5, 6.5),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_18: v({
            material: "woodPerm",
            extents: e.create(1.5, 9),
            hitParticle: "blackChip"
        }),
        wood_perm_wall_ext_thicker_21: v({
            material: "woodPerm",
            extents: e.create(1.5, 10.5),
            hitParticle: "blackChip"
        }),
        saloon_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(20.5, 20.5)),
                    color: 5252110
                }, {
                    collider: n.createAabbExtents(e.create(-1, 1), e.create(19, 19)),
                    color: 4337194
                }, {
                    collider: n.createAabbExtents(e.create(-3, 3), e.create(17, 17)),
                    color: 2499104
                }, {
                    collider: n.createAabbExtents(e.create(-23.5, 1), e.create(3, 2)),
                    color: 3485483
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(22.5, 22.5))],
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "house",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(20.5, 20.5)), n.createAabbExtents(e.create(-23.5, 1), e.create(3, 2))]
                }],
                imgs: [{
                    sprite: "map-building-saloon-floor-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-saloon-ceiling-02.img",
                    pos: e.create(-23.5, 1),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-1, 1), e.create(19, 19)),
                    zoomOut: n.createAabbExtents(e.create(1, -1), e.create(21.5, 21.5))
                }],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                damage: {
                    obstacleCount: 1
                },
                imgs: [{
                    sprite: "map-building-saloon-ceiling-01.img",
                    pos: e.create(0, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-building-saloon-ceiling-02.img",
                    pos: e.create(-23.5, 1),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-chimney-01.img",
                    pos: e.create(-3, 3),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    removeOnDamaged: !0
                }]
            },
            occupiedEmitters: [{
                type: "cabin_smoke_parent",
                pos: e.create(0, 0),
                rot: 0,
                scale: 1,
                layer: 0,
                parentToCeiling: !0
            }],
            puzzle: {
                name: "saloon",
                completeUseType: "saloon_door_secret",
                completeOffDelay: 1,
                completeUseDelay: 2,
                errorResetDelay: 1,
                pieceResetDelay: 10,
                sound: {
                    fail: "door_error_01",
                    complete: "piano_02"
                }
            },
            mapObjects: [{
                type: "wood_perm_wall_ext_17",
                pos: e.create(-20, 11),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_5",
                pos: e.create(-23, 3),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_5",
                pos: e.create(-26, 1),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_5",
                pos: e.create(-22, 1),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_5",
                pos: e.create(-23, -1),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_14",
                pos: e.create(-20, -7.5),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_35",
                pos: e.create(-3, 20),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_6",
                pos: e.create(-16.5, -14),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-12, -14.25),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_7",
                pos: e.create(-7, -14),
                scale: 1,
                ori: 1
            }, {
                type: "house_window_01",
                pos: e.create(-2, -14.25),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_7",
                pos: e.create(3, -14),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_6",
                pos: e.create(14, 16.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(14.25, 12),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_7",
                pos: e.create(14, 7),
                scale: 1,
                ori: 0
            }, {
                type: "house_window_01",
                pos: e.create(14.25, 2),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_7",
                pos: e.create(14, -3),
                scale: 1,
                ori: 0
            }, {
                type: "saloon_bar_back_large",
                pos: e.create(-18.75, 7.5),
                scale: 1,
                ori: 0
            }, {
                type: "saloon_door_secret",
                pos: e.create(-18.75, 2.5),
                scale: 1,
                ori: 2
            }, {
                type: "saloon_bar_back_small",
                pos: e.create(-18.75, -2),
                scale: 1,
                ori: 0
            }, {
                type: "bottle_01",
                pos: e.create(-18.75, 11.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-18.75, 10),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-18.75, 9),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-18.75, 6),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-18.75, 5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-18.75, 3.75),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_02v",
                pos: e.create(-18.75, -1.75),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "violet"
            }, {
                type: "saloon_bar_large",
                pos: e.create(-11, 5),
                scale: 1,
                ori: 0
            }, {
                type: "saloon_bar_small",
                pos: e.create(-14.5, -4),
                scale: 1,
                ori: 1
            }, {
                type: "bottle_01",
                pos: e.create(-10.75, 11),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_02r",
                pos: e.create(-11, 8),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "red"
            }, {
                type: "bottle_01",
                pos: e.create(-11, 6.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-10.75, 5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-11, 1.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-10.75, -1),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_02b",
                pos: e.create(-11, -2.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "blue"
            }, {
                type: "bottle_01",
                pos: e.create(-13, -4),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-15, -4.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bottle_01",
                pos: e.create(-16.5, -4),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_02",
                pos: e.create(-17.5, 17.5),
                scale: 1,
                ori: 0,
                puzzlePiece: "barrel"
            }, {
                type: "piano_01",
                pos: e.create(-18, -9.5),
                scale: 1,
                ori: 1
            }, {
                type: "loot_tier_1",
                pos: e.create(-16, -9.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    gun_mount_01: 100,
                    gun_mount_02: 10
                }),
                pos: e.create(-.5, 18.75),
                scale: 1,
                ori: 0,
                puzzlePiece: "gun"
            }, {
                type: "barrel_02",
                pos: e.create(-3, -7),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(-.5, -4.5),
                scale: .9,
                ori: 0
            }, {
                type: "stove_02",
                pos: e.create(-3, 3),
                scale: 1,
                ori: 0
            }, {
                type: "bottle_02g",
                pos: e.create(7.25, 10.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "green"
            }, {
                type: "table_03",
                pos: e.create(7.25, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "table_03",
                pos: e.create(7.25, .5),
                scale: 1,
                ori: 0
            }, {
                type: "bottle_02i",
                pos: e.create(12.5, 4.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "indigo"
            }, {
                type: "crate_01",
                pos: e.create(11, 17),
                scale: .9,
                ori: 0
            }, {
                type: "bottle_02y",
                pos: e.create(8, 18.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "yellow"
            }, {
                type: "crate_01",
                pos: e.create(-23, 11.5),
                scale: .9,
                ori: 0
            }, {
                type: "bush_01",
                pos: e.create(-23.5, 7),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-23, -5),
                scale: .9,
                ori: 0
            }, {
                type: "saloon_column_1",
                pos: e.create(-19.5, -17.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(-10, -16.5),
                scale: .9,
                ori: 0
            }, {
                type: "bottle_02o",
                pos: e.create(3.75, -17.5),
                scale: 1,
                ori: 0,
                inheritOri: !1,
                puzzlePiece: "orange"
            }, {
                type: "saloon_column_1",
                pos: e.create(5.5, -17.5),
                scale: 1,
                ori: 0,
                puzzlePiece: "column"
            }, {
                type: "saloon_column_1",
                pos: e.create(17.5, 19.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(16.5, 9),
                scale: .9,
                ori: 0
            }, {
                type: "saloon_column_1",
                pos: e.create(17.5, -5.5),
                scale: 1,
                ori: 0
            }]
        },
        saloon_cellar_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "brick",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(15, 9))]
                }],
                imgs: [{
                    sprite: "map-building-saloon-cellar-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(15, 9))
                }],
                imgs: [{
                    sprite: "",
                    pos: e.create(-2, 3.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 7,
                    width: 3
                }
            },
            mapObjects: [{
                type: "wood_perm_wall_ext_thicker_18",
                pos: e.create(-8, 10),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_5",
                pos: e.create(1.5, 7),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_thicker_12",
                pos: e.create(-4.5, 4),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_thicker_13",
                pos: e.create(-16, 2),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_thicker_8",
                pos: e.create(-13.5, -6),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_thicker_7",
                pos: e.create(-8, -8),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_thicker_13",
                pos: e.create(0, -10),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_thicker_7",
                pos: e.create(8, -8),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_thicker_8",
                pos: e.create(13.5, -6),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_thicker_13",
                pos: e.create(16, 2),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_thicker_10",
                pos: e.create(12.5, 10),
                scale: 1,
                ori: 1
            }, {
                type: "wood_perm_wall_ext_thicker_6",
                pos: e.create(9, 5.5),
                scale: 1,
                ori: 0
            }, {
                type: "wood_perm_wall_ext_thicker_21",
                pos: e.create(0, 1),
                scale: 1,
                ori: 1
            }, {
                type: "loot_tier_saloon",
                pos: e.create(0, -4),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_04",
                pos: e.create(-3, -8.03),
                scale: 1,
                ori: 2
            }, {
                type: "barrel_04",
                pos: e.create(0, -8.03),
                scale: 1,
                ori: 2
            }, {
                type: "barrel_04",
                pos: e.create(3, -8.03),
                scale: 1,
                ori: 2
            }, {
                type: "recorder_04",
                pos: e.create(12.5, 6.5),
                scale: 1,
                ori: 0
            }]
        },
        saloon_structure_01: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            layers: [{
                type: "saloon_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "saloon_cellar_01",
                pos: e.create(-19, -6),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(-19.5, .75), e.create(1.5, 2)),
                downDir: e.create(-1, 0)
            }],
            mask: [n.createAabbExtents(e.create(-30, .75), e.create(10, 5))],
            interiorSound: {
                sound: "piano_music_01",
                soundAlt: "",
                transitionTime: 5,
                outsideMaxDist: 10,
                outsideVolume: .25,
                puzzle: "saloon"
            }
        },
        teahouse_wall_int_3: v({
            material: "wood",
            extents: e.create(.5, 1.5),
            hitParticle: "tanChip",
            img: V("map-wall-03.img", 5505024, .95)
        }),
        teahouse_wall_int_4: v({
            material: "wood",
            extents: e.create(.5, 2),
            hitParticle: "tanChip",
            img: V("map-wall-04.img", 5505024, .95)
        }),
        teahouse_wall_int_5: v({
            material: "wood",
            extents: e.create(.5, 2.5),
            hitParticle: "tanChip",
            img: V("map-wall-05.img", 5505024, .95)
        }),
        teahouse_wall_int_7: v({
            material: "wood",
            extents: e.create(.5, 3.5),
            hitParticle: "tanChip",
            img: V("map-wall-07.img", 5505024, .95)
        }),
        teahouse_wall_int_12: v({
            material: "wood",
            extents: e.create(.5, 6),
            hitParticle: "tanChip",
            img: V("map-wall-12.img", 5505024, .95)
        }),
        teahouse_wall_int_13: v({
            material: "wood",
            extents: e.create(.5, 6.5),
            hitParticle: "tanChip",
            img: V("map-wall-13.img", 5505024, .95)
        }),
        teahouse_wall_int_14: v({
            material: "wood",
            extents: e.create(.5, 7),
            hitParticle: "tanChip",
            img: V("map-wall-14.img", 5505024, .95)
        }),
        teahouse_wall_int_18: v({
            material: "wood",
            extents: e.create(.5, 9),
            hitParticle: "tanChip",
            img: V("map-wall-18.img", 5505024, .95)
        }),
        teahouse_door_01: Pt({
            img: {
                tint: 14537141,
                alpha: .95
            },
            door: {
                interactionRad: 2,
                openOneWay: !1,
                openSpeed: 7,
                autoOpen: !1,
                autoClose: !1,
                autoCloseDelay: 1,
                slideToOpen: !0,
                slideOffset: 3.75,
                sound: {
                    open: "door_open_04",
                    close: "door_open_04",
                    error: "door_error_01"
                },
                casingImg: {
                    sprite: "map-door-slot-02.img",
                    pos: e.create(-2, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 3211264
                }
            }
        }),
        teahouse_window_open_01: Ce({
            img: {
                tint: 12216619
            }
        }),
        teahouse_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: n.createAabbExtents(e.create(0, 0), e.create(14, 9)),
                        color: 4608356
                    }, {
                        collider: n.createAabbExtents(e.create(0, 0), e.create(7.5, 3.75)),
                        color: 5793921
                    }, {
                        collider: n.createAabbExtents(e.create(9, -10.15), e.create(2, 1.5)),
                        color: 7354635
                    }, {
                        collider: n.createAabbExtents(e.create(-9, 10.15), e.create(2, 1.5)),
                        color: 7354635
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(14, 9)), n.createAabbExtents(e.create(9, -10.15), e.create(2, 1.5)), n.createAabbExtents(e.create(-9, 10.15), e.create(2, 1.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-teahouse-floor-01.img",
                        pos: e.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-teahouse-floor-02.img",
                        pos: e.create(9, -10.25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-teahouse-floor-02.img",
                        pos: e.create(-9, 10.25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    zoomRegions: [{
                        zoomIn: n.createAabbExtents(e.create(0, 0), e.create(12, 7)),
                        zoomOut: n.createAabbExtents(e.create(0, 0), e.create(14, 9))
                    }],
                    vision: {
                        width: 4
                    },
                    imgs: [{
                        sprite: "map-building-teahouse-ceiling-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }],
                    destroy: {
                        wallCount: 3,
                        particle: "teahouseBreak",
                        particleCount: 25,
                        residue: "map-building-teahouse-res-01.img"
                    }
                },
                mapObjects: [{
                    type: "teahouse_window_open_01",
                    pos: e.create(-6.5, -6.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "teahouse_window_open_01",
                    pos: e.create(11.75, 1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "teahouse_wall_int_7",
                    pos: e.create(11.5, -3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "teahouse_wall_int_4",
                    pos: e.create(11.5, 5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "teahouse_door_01",
                    pos: e.create(-7, 6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "teahouse_wall_int_18",
                    pos: e.create(2, 6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "teahouse_wall_int_3",
                    pos: e.create(-9.5, -6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "teahouse_wall_int_12",
                    pos: e.create(1, -6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "teahouse_wall_int_14",
                    pos: e.create(-11.5, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "teahouse_door_01",
                    pos: e.create(7, -6.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "pot_03",
                    pos: e.create(9.5, 4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_03",
                    pos: e.create(-9.5, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_03",
                    pos: e.create(-9.5, -4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "case_06",
                    pos: e.create(0, 0),
                    scale: 1,
                    ori: 0
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        teapavilion_01: Va({
            terrain: {
                lakeCenter: !0
            }
        }),
        teapavilion_01w: Va({
            center_loot: "loot_tier_helmet_forest",
            left_loot: "pot_03b",
            right_loot: "pot_03c",
            terrain: {
                lakeCenter: !0
            }
        }),
        teahouse_complex_01s: Ha({}),
        teahouse_complex_01su: Ha({
            grass_color: 6460706,
            tree_small: "tree_08su",
            tree_large: "tree_08su"
        }),
        savannah_patch_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: []
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(20, 16))],
                mapGroundPatches: [{
                    bound: n.createAabbExtents(e.create(8, 15), e.create(5, 4)),
                    color: 13084454,
                    roughness: .1,
                    offsetDist: .5
                }, {
                    bound: n.createAabbExtents(e.create(-6, -12), e.create(7, 3)),
                    color: 13084454,
                    roughness: .1,
                    offsetDist: .5
                }, {
                    bound: n.createAabbExtents(e.create(-18, 8), e.create(3, 4)),
                    color: 13084454,
                    roughness: .1,
                    offsetDist: .5
                }, {
                    bound: n.createAabbExtents(e.create(16, -8), e.create(3, 6)),
                    color: 13084454,
                    roughness: .1,
                    offsetDist: .5
                }, {
                    bound: n.createAabbExtents(e.create(0, 0), e.create(16, 12)),
                    color: r.grass_color || 16762368,
                    roughness: .1,
                    offsetDist: .5
                }],
                floor: {
                    surfaces: [{
                        type: "grass",
                        data: {
                            isBright: !0
                        },
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(16, 12))]
                    }],
                    imgs: []
                },
                ceiling: {
                    zoomRegions: [],
                    imgs: []
                },
                mapObjects: [{
                    type: "crate_21",
                    pos: e.create(0, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: r.tree_large || "tree_12",
                    pos: e.create(-13, 5.5),
                    scale: 1.1,
                    ori: 0
                }, {
                    type: r.tree_large || "tree_12",
                    pos: e.create(10.5, -5),
                    scale: .9,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_01sv",
                    pos: e.create(7, 10),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bush_01sv",
                    pos: e.create(-8, -10),
                    scale: 1,
                    ori: 0
                }]
            };
            return f.mergeDeep(t, r || {})
        }({
            grass_color: 15451700,
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 1
            }
        }),
        kopje_patch_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: []
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(45, 35))],
                mapGroundPatches: [{
                    bound: n.createAabbExtents(e.create(0, 0), e.create(40, 30)),
                    color: r.grass_color || 16762368,
                    roughness: .2,
                    offsetDist: 3
                }, {
                    bound: n.createAabbExtents(e.create(0, 0), e.create(16, 12)),
                    color: 5862162,
                    roughness: .2,
                    offsetDist: 1
                }],
                floor: {
                    surfaces: [{
                        type: "grass",
                        collision: []
                    }],
                    imgs: []
                },
                ceiling: {
                    zoomRegions: [],
                    imgs: []
                },
                mapObjects: [{
                    type: "crate_21",
                    pos: e.create(-2.5, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "crate_21",
                    pos: e.create(2.5, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "crate_01",
                    pos: e.create(0, 5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "crate_01",
                    pos: e.create(0, -5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_01: 3,
                        "": 1
                    }),
                    pos: e.create(-39.5, 30.5),
                    scale: .95,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_01: 3,
                        "": 1
                    }),
                    pos: e.create(-41.5, 26),
                    scale: .95,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_01: 3,
                        "": 1
                    }),
                    pos: e.create(39.5, -30.5),
                    scale: .95,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_01: 3,
                        "": 1
                    }),
                    pos: e.create(41.5, -26),
                    scale: .95,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: r.tree_large || "tree_12",
                    pos: e.create(34, 22.5),
                    scale: 1.05,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_12",
                    pos: e.create(-34.5, -23),
                    scale: .95,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_12",
                    pos: e.create(22.5, -14),
                    scale: .95,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_01sv",
                    pos: e.create(21.5, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_01sv",
                    pos: e.create(11, -15),
                    scale: 1,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_01sv",
                    pos: e.create(-19, 2),
                    scale: 1,
                    ori: 0
                }, {
                    type: r.tree_small || "tree_01sv",
                    pos: e.create(-10, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "stone_07",
                    pos: e.create(-20, 12),
                    scale: 1,
                    ori: 0
                }, {
                    type: "stone_07",
                    pos: e.create(15.5, 10),
                    scale: 1,
                    ori: 1
                }, {
                    type: "stone_07",
                    pos: e.create(-13.5, -12.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "kopje_brush_01",
                    pos: e.create(-40, -9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "kopje_brush_01",
                    pos: e.create(-40, 6),
                    scale: 1,
                    ori: 2
                }, {
                    type: "kopje_brush_01",
                    pos: e.create(40, -9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "kopje_brush_01",
                    pos: e.create(40, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "kopje_brush_01",
                    pos: e.create(0, 28),
                    scale: 1,
                    ori: 1
                }, {
                    type: "kopje_brush_01",
                    pos: e.create(0, -28),
                    scale: 1,
                    ori: 3
                }]
            };
            return f.mergeDeep(t, r || {})
        }({
            grass_color: 8035865,
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 2
            }
        }),
        kopje_brush_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(18, 18))],
            mapGroundPatches: [],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: z({
                    loot_tier_1: 1,
                    loot_tier_2: 1,
                    loot_tier_surviv: 1
                }),
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(0, 0),
                scale: 1.5,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(1, 6),
                scale: 1.5,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-4, 3),
                scale: 1.5,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-5, -2),
                scale: 1.5,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(2.5, -5),
                scale: 1.5,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-1, -8),
                scale: 1.5,
                ori: 0
            }]
        },
        grassy_wall_3: v({
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            material: "wood",
            extents: e.create(.375, 1.5),
            hitParticle: "tanChip",
            img: {
                sprite: "map-wall-03-grassy.img",
                residue: "map-wall-03-grassy-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            map: {
                display: !0,
                color: 7282176,
                scale: 1
            },
            health: 300
        }),
        grassy_wall_8: v({
            scale: {
                createMin: 1,
                createMax: 1,
                destroy: .8
            },
            material: "wood",
            extents: e.create(.375, 4),
            hitParticle: "tanChip",
            img: {
                sprite: "map-wall-08-grassy.img",
                residue: "map-wall-08-grassy-res.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            },
            map: {
                display: !0,
                color: 7282176,
                scale: 1
            },
            health: 300
        }),
        grassy_cover_01: Rr({
            mapObjects: [{
                type: "loot_tier_1",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "grassy_wall_8",
                pos: e.create(0, 4.75),
                scale: 1,
                ori: 1
            }, {
                type: "grassy_wall_8",
                pos: e.create(0, -4.75),
                scale: 1,
                ori: 3
            }, {
                type: "grassy_wall_3",
                pos: e.create(0, 3),
                scale: 1,
                ori: 0
            }, {
                type: "grassy_wall_3",
                pos: e.create(0, -3),
                scale: 1,
                ori: 2
            }]
        }),
        grassy_cover_02: Rr({
            mapObjects: [{
                type: "loot_tier_1",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "grassy_wall_8",
                pos: e.create(0, 4.75),
                scale: 1,
                ori: 1
            }, {
                type: "grassy_wall_8",
                pos: e.create(0, -4.75),
                scale: 1,
                ori: 3
            }, {
                type: "grassy_wall_3",
                pos: e.create(-3.5, 3),
                scale: 1,
                ori: 0
            }, {
                type: "grassy_wall_3",
                pos: e.create(3.5, -3),
                scale: 1,
                ori: 2
            }]
        }),
        grassy_cover_03: Rr({
            mapObjects: [{
                type: "loot_tier_1",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "grassy_wall_8",
                pos: e.create(-5, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: "grassy_wall_8",
                pos: e.create(1, -4.75),
                scale: 1,
                ori: 3
            }, {
                type: "grassy_wall_3",
                pos: e.create(-3.25, 5),
                scale: 1,
                ori: 1
            }, {
                type: "grassy_wall_3",
                pos: e.create(4.5, -3),
                scale: 1,
                ori: 2
            }]
        }),
        grassy_cover_complex_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(30, 10))],
            mapGroundPatches: [],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: z({
                    grassy_cover_01: 1,
                    grassy_cover_02: 1,
                    grassy_cover_03: 1
                }),
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    grassy_cover_01: 1,
                    grassy_cover_02: 1,
                    grassy_cover_03: 1
                }),
                pos: e.create(-15, 0),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    grassy_cover_01: 1,
                    grassy_cover_02: 1,
                    grassy_cover_03: 1
                }),
                pos: e.create(15, 0),
                scale: 1,
                ori: 0
            }]
        },
        brush_clump_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(17, 17))],
            mapGroundPatches: [],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: z({
                    loot_tier_1: 1,
                    loot_tier_2: 1,
                    loot_tier_surviv: 1
                }),
                pos: e.create(-2, -2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    stone_01: 3,
                    barrel_01: 3,
                    "": 1
                }),
                pos: e.create(2, 2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-13, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-6, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(0, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(7, 2),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(12, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(0, -10),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(3, -5),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-3, 5),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-6, 10),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-4, -6),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(5, -13),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(5, 5),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(10, 9),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(10, -9),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-10, -9),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-8, 13),
                scale: 1.75,
                ori: 0
            }]
        },
        brush_clump_02: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(17, 17))],
            mapGroundPatches: [],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: z({
                    loot_tier_1: 1,
                    loot_tier_2: 1,
                    loot_tier_surviv: 1
                }),
                pos: e.create(2, 2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    stone_01: 3,
                    barrel_01: 3,
                    "": 1
                }),
                pos: e.create(-2, -2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-12, 4),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-6, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(0, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(7, -12),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(12, 2),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(1, -11),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(3, -4),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-3, 4),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(3, 11),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(11, 12),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(5, 5),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(9, 8),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(10, -9),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-8, 13),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-7, 9),
                scale: 1.75,
                ori: 0
            }]
        },
        brush_clump_03: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(17, 17))],
            mapGroundPatches: [],
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: z({
                    loot_tier_1: 1,
                    loot_tier_2: 1,
                    loot_tier_surviv: 1
                }),
                pos: e.create(2, 2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    stone_01: 3,
                    barrel_01: 3,
                    "": 1
                }),
                pos: e.create(-2, -2),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-12, 4),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-6, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(0, 0),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(7, -11.5),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(1, -13.5),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(3, -4),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-3, 4),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(10, -9),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-3, 13),
                scale: 1.75,
                ori: 0
            }, {
                type: z({
                    brush_01sv: 5,
                    brush_02sv: 5,
                    "": 1
                }),
                pos: e.create(-7, 9),
                scale: 1.75,
                ori: 0
            }]
        },
        teapavilion_complex_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                lakeCenter: !0
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(14, 14)), n.createAabbExtents(e.create(0, -20), e.create(4, 12))],
            mapGroundPatches: [{
                bound: n.createAabbExtents(e.create(0, 0), e.create(12.5, 12.5)),
                color: 6066442,
                roughness: .1,
                offsetDist: .25
            }],
            ori: 0,
            floor: {
                surfaces: [{
                    type: "grass",
                    collision: []
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "teapavilion_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_02",
                pos: e.create(11, -4),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    tree_07sp: 2,
                    "": 1
                }),
                pos: e.create(-3, 12),
                scale: .9,
                ori: 0
            }, {
                type: z({
                    tree_07sp: 2,
                    "": 1
                }),
                pos: e.create(-12, -6),
                scale: .9,
                ori: 0
            }, {
                type: z({
                    tree_08sp: 2,
                    "": 1
                }),
                pos: e.create(-12.5, 9),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    tree_07sp: 2,
                    "": 1
                }),
                pos: e.create(12, 4),
                scale: .9,
                ori: 0
            }]
        },
        club_wall_int_6: v({
            material: "wood",
            extents: e.create(.5, 3),
            hitParticle: "tanChip",
            img: V("map-wall-06-rounded.img", 10584424)
        }),
        club_wall_int_10: v({
            material: "wood",
            extents: e.create(.5, 5),
            hitParticle: "redChip",
            img: V("map-wall-10-rounded.img", 7218988)
        }),
        club_bar_small: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 4.5)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        club_bar_large: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 7)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        club_bar_back_large: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.75, 7.5)),
            img: {
                sprite: "map-club-bar-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 10
            }
        }),
        secret_door_club: Pe({
            destructible: !1,
            material: "concrete",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                openOneWay: !1,
                openSpeed: 7,
                autoOpen: !1,
                autoClose: !1,
                slideToOpen: !0,
                slideOffset: 3.75,
                sound: {
                    open: "door_open_03",
                    close: "door_close_03",
                    error: "door_error_01"
                },
                casingImg: {
                    sprite: "map-door-slot-01.img",
                    pos: e.create(-2, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 1316379
                }
            },
            img: {
                tint: 5373952
            }
        }),
        bathhouse_column_1: v({
            material: "concrete",
            extents: e.create(2, 2),
            hitParticle: "whiteChip",
            img: V("map-bathhouse-column-01.img", 13481337)
        }),
        bathhouse_column_2: v({
            material: "concrete",
            extents: e.create(1, 1),
            hitParticle: "whiteChip",
            img: V("map-bathhouse-column-02.img", 13481337)
        }),
        bathhouse_rocks_01: Ve({
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.55, 1.55)),
            destructible: !1,
            img: {
                sprite: "map-bathrocks-01.img"
            }
        }),
        vault_door_bathhouse: Pe({
            destructible: !1,
            material: "metal",
            hinge: e.create(0, 2),
            extents: e.create(.3, 2),
            door: {
                canUse: !1,
                openOnce: !0,
                openOneWay: !1,
                openSpeed: 7,
                autoOpen: !1,
                autoClose: !1,
                slideToOpen: !0,
                slideOffset: 3.75,
                sound: {
                    open: "door_open_03",
                    close: "door_close_03",
                    error: "door_error_01"
                },
                casingImg: {
                    sprite: "map-door-slot-01.img",
                    pos: e.create(-2, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 1316379
                }
            },
            img: {
                tint: 4934475
            }
        }),
        club_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: n.createAabbExtents(e.create(-29.25, -8.5), e.create(3.25, 2.5)),
                        color: 13022098
                    }, {
                        collider: n.createAabbExtents(e.create(-4, -8.5), e.create(22, 13.25)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(6, 18), e.create(12, 8.25)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(16, 16.5), e.create(2, 6.5)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(6.5, 7), e.create(2.5, 3)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(23.5, -7.5), e.create(5.75, 7)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(1.5, -24.5), e.create(8, 3.5)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(-1.5, 30.75), e.create(4.5, 4.5)),
                        color: 5900046
                    }, {
                        collider: n.createAabbExtents(e.create(-21.5, 7), e.create(2.5, 3)),
                        color: 5900046
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                mapGroundPatches: [{
                    bound: n.createAabbExtents(e.create(-13.5, 11.5), e.create(16, 24.5)),
                    color: 9340275,
                    order: 1
                }, {
                    bound: n.createAabbExtents(e.create(-13.5, 11.5), e.create(15, 23.5)),
                    color: 5855577,
                    order: 1
                }, {
                    bound: n.createAabbExtents(e.create(1.5, 7), e.create(3, 3)),
                    color: 5855577,
                    order: 1
                }, {
                    bound: n.createAabbExtents(e.create(-12, 14.5), e.create(7.5, .25)),
                    color: 14145495,
                    order: 1,
                    useAsMapShape: !1
                }, {
                    bound: n.createAabbExtents(e.create(-12, 21.5), e.create(7.5, .25)),
                    color: 14145495,
                    order: 1,
                    useAsMapShape: !1
                }, {
                    bound: n.createAabbExtents(e.create(-12, 28.5), e.create(7.5, .25)),
                    color: 14145495,
                    order: 1,
                    useAsMapShape: !1
                }, {
                    bound: n.createAabbExtents(e.create(15, 5), e.create(20, 30)),
                    color: 7551e3,
                    roughness: .05,
                    offsetDist: .5
                }],
                mapObstacleBounds: [],
                floor: {
                    surfaces: [{
                        type: "asphalt",
                        collision: [n.createAabbExtents(e.create(1.5, -24.5), e.create(5, 3.5)), n.createAabbExtents(e.create(-13, 20.25), e.create(16.5, 15.5)), n.createAabbExtents(e.create(-28, 0), e.create(1.5, 5.25))]
                    }, {
                        type: "stone",
                        collision: [n.createAabbExtents(e.create(-29.5, -8.5), e.create(3, 2.5))]
                    }, {
                        type: "carpet",
                        collision: [n.createAabbExtents(e.create(-4, -8.5), e.create(22, 13.25)), n.createAabbExtents(e.create(4.5, 18), e.create(10.5, 8.25)), n.createAabbExtents(e.create(16, 16.5), e.create(2, 6.5)), n.createAabbExtents(e.create(6.5, 7), e.create(2.5, 3)), n.createAabbExtents(e.create(23.5, -3), e.create(5.75, 2.5)), n.createAabbExtents(e.create(26.5, -7.5), e.create(2.5, 7))]
                    }],
                    imgs: [{
                        sprite: "map-building-club-floor-01a.img",
                        pos: e.create(-30, -8.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01b.img",
                        pos: e.create(-21.5, 8),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01c.img",
                        pos: e.create(-4, -8.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01d.img",
                        pos: e.create(1.5, -25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01e.img",
                        pos: e.create(24, -7.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01f.img",
                        pos: e.create(6.5, 7),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01g.img",
                        pos: e.create(6, 18),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-floor-01h.img",
                        pos: e.create(-1.5, 31.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    zoomRegions: [{
                        zoomIn: n.createAabbExtents(e.create(-4, -8.5), e.create(22, 13.25))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(4.5, 18), e.create(10.5, 8.25))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(16, 16.5), e.create(2, 6.75))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(6.5, 7), e.create(2.5, 3))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(-1.5, 30), e.create(3, 4))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(23.5, -3), e.create(5.75, 2.5))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(26.5, -7.5), e.create(2.5, 7))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(1.5, -24), e.create(5, 3))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(-21.5, 7), e.create(2.5, 3))
                    }, {
                        zoomOut: n.createAabbExtents(e.create(1.5, -28), e.create(5.5, 2))
                    }, {
                        zoomOut: n.createAabbExtents(e.create(-21.5, 11), e.create(3.5, 2))
                    }, {
                        zoomOut: n.createAabbExtents(e.create(17, 25), e.create(3, 3))
                    }, {
                        zoomOut: n.createAabbExtents(e.create(17, 25), e.create(3, 3))
                    }],
                    vision: {
                        dist: 7.5,
                        width: 2.5,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-club-ceiling-01a.img",
                        pos: e.create(-4.5, -8.5),
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-ceiling-01b.img",
                        pos: e.create(24, -7.5),
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-club-ceiling-01c.img",
                        pos: e.create(6, 22.5),
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                puzzle: {
                    name: "club_01",
                    completeUseType: "secret_door_club",
                    completeOffDelay: 1,
                    completeUseDelay: 2,
                    errorResetDelay: 1,
                    pieceResetDelay: 10,
                    sound: {
                        fail: "door_error_01",
                        complete: "none"
                    }
                },
                mapObjects: [{
                    type: "concrete_wall_ext_7",
                    pos: e.create(-30, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: e.create(-30, -5.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(-24, 7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(-19, 7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_3",
                    pos: e.create(-25, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_25",
                    pos: e.create(-26, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_9_5",
                    pos: e.create(-21.75, -21.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "club_window_01",
                    pos: e.create(-15.5, -21.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_11_5",
                    pos: e.create(-8.25, -21.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(-3, -24.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(6, -24.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_13",
                    pos: e.create(12, -21.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_13",
                    pos: e.create(12, -21.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_6",
                    pos: e.create(18, -18),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_7x10",
                    pos: e.create(21, -10),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_4",
                    pos: e.create(26.5, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_10_5",
                    pos: e.create(29, -9.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: "club_window_01",
                    pos: e.create(29.25, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_1_5",
                    pos: e.create(29, -.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_11",
                    pos: e.create(23, -.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(18, 2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_8",
                    pos: e.create(13.5, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_6",
                    pos: e.create(9, 7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_8",
                    pos: e.create(13.5, 9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_13",
                    pos: e.create(18, 15.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thick_11",
                    pos: e.create(9, 26),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_11",
                    pos: e.create(2, 30.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_11",
                    pos: e.create(-5, 30.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_4",
                    pos: e.create(-1.5, 34.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "secret_door_club",
                    pos: e.create(.5, 26),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_16",
                    pos: e.create(-6, 17),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_9",
                    pos: e.create(-1, 9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_6",
                    pos: e.create(4, 7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_23",
                    pos: e.create(-8, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: e.create(-23.5, 4.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: e.create(-2.5, -21.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: e.create(5.5, -21.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "club_bar_small",
                    pos: e.create(-16, -.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "club_bar_large",
                    pos: e.create(-7.5, -3.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "club_bar_back_large",
                    pos: e.create(-8, 3.3),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bottle_05",
                    pos: e.create(-16.25, 1.25),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-16, -.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-16, -2.25),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_05",
                    pos: e.create(-14.5, -4),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-12.25, -3.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-9.5, -3.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_05",
                    pos: e.create(-5.25, -2.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-5.5, -4.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bottle_04",
                    pos: e.create(-2.25, -3.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_05",
                    pos: e.create(-3.25, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_05",
                    pos: e.create(-4.25, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-6.5, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-7.5, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_04",
                    pos: e.create(-8.5, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_05",
                    pos: e.create(-12.25, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bottle_05",
                    pos: e.create(-13.25, 3.3),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(-12, .25),
                    scale: .85,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(-7.75, .25),
                    scale: .85,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(-3.5, .25),
                    scale: .85,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "couch_02",
                    pos: e.create(-24, -15),
                    scale: 1,
                    ori: 1
                }, {
                    type: "couch_03",
                    pos: e.create(-24, -19.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "couch_02b",
                    pos: e.create(-19.5, -19.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "table_03",
                    pos: e.create(-19, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_flyer_01",
                    pos: e.create(-17.5, -13.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "couch_02b",
                    pos: e.create(-7, -15),
                    scale: 1,
                    ori: 1
                }, {
                    type: "couch_03",
                    pos: e.create(-7, -19.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "couch_02",
                    pos: e.create(-11.5, -19.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "table_03",
                    pos: e.create(-12, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "club_wall_int_10",
                    pos: e.create(12.5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "club_wall_int_10",
                    pos: e.create(8, -13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "couch_01",
                    pos: e.create(13, -9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: z({
                        crate_01: 1,
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(11, -13.5),
                    scale: .85,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_01: 1,
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(15.25, -15.5),
                    scale: .85,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: z({
                        crate_01: 1,
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(15.25, 1.75),
                    scale: .85,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "club_vault",
                    pos: e.create(-1.5, 30.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "switch_01",
                    pos: e.create(-5.5, 11.5),
                    scale: 1,
                    ori: 1,
                    puzzlePiece: "1"
                }, {
                    type: "switch_01",
                    pos: e.create(-5.5, 14.5),
                    scale: 1,
                    ori: 1,
                    puzzlePiece: "4"
                }, {
                    type: "switch_01",
                    pos: e.create(-5.5, 17.5),
                    scale: 1,
                    ori: 1,
                    puzzlePiece: "2"
                }, {
                    type: "switch_01",
                    pos: e.create(-5.5, 20.5),
                    scale: 1,
                    ori: 1,
                    puzzlePiece: "3"
                }, {
                    type: "bookshelf_01",
                    pos: e.create(-1.5, 24),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_02",
                    pos: e.create(10.75, 23),
                    scale: .75,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "decal_barrel_explosion",
                    pos: e.create(17.5, 26.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_plank_01",
                    pos: e.create(17.25, 27.25),
                    scale: .5,
                    ori: 0
                }, {
                    type: "decal_plank_01",
                    pos: e.create(17.5, 27.5),
                    scale: .5,
                    ori: 1
                }, {
                    type: "decal_plank_01",
                    pos: e.create(19.5, 25.75),
                    scale: .5,
                    ori: 1
                }, {
                    type: "decal_plank_01",
                    pos: e.create(18.75, 25.5),
                    scale: .5,
                    ori: 3
                }, {
                    type: "couch_01",
                    pos: e.create(6.5, 11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: z({
                        deposit_box_01: 3,
                        deposit_box_02: 1
                    }),
                    pos: e.create(-4.25, 29.55),
                    scale: 1,
                    ori: 1
                }, {
                    type: z({
                        deposit_box_01: 3,
                        deposit_box_02: 1
                    }),
                    pos: e.create(1.25, 29.55),
                    scale: 1,
                    ori: 3
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(-5.5, -24),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(8.5, -24),
                    scale: 1,
                    ori: 0
                }, {
                    type: z({
                        crate_03: 1,
                        barrel_01: 1,
                        barrel_02: 1
                    }),
                    pos: e.create(1.5, 7),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bush_01",
                    pos: e.create(11.5, 7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: e.create(-13.75, 17),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: e.create(-10.25, 18.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: z({
                        crate_01: 1,
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(-25, 30),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bush_01",
                    pos: e.create(-28.5, -14),
                    scale: 1,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: e.create(26.5, -18),
                    scale: .75,
                    ori: 0
                }, {
                    type: z({
                        crate_01: 1,
                        crate_14: 1,
                        crate_14a: 1
                    }),
                    pos: e.create(21, -17.5),
                    scale: .9,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "decal_oil_04",
                    pos: e.create(-12, 26.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_oil_03",
                    pos: e.create(-18, 32),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_oil_02",
                    pos: e.create(-24, 23),
                    scale: .75,
                    ori: 0
                }, {
                    type: "decal_oil_06",
                    pos: e.create(-11, 16.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_oil_05",
                    pos: e.create(-9.5, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "decal_oil_03",
                    pos: e.create(-26, 11.5),
                    scale: .5,
                    ori: 1
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        bathhouse_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [],
                zIdx: 0,
                floor: {
                    surfaces: [{
                        type: "tile",
                        collision: [n.createAabbExtents(e.create(2, 9.5), e.create(20, 22)), n.createAabbExtents(e.create(0, 7.5), e.create(26, 48)), n.createAabbExtents(e.create(-26, -26), e.create(4, 3))]
                    }],
                    imgs: [{
                        sprite: "map-building-club-gradient-01.img",
                        pos: e.create(-3.5, -13.5),
                        scale: 4,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bathhouse-basement-01a.img",
                        pos: e.create(-33.5, -26),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bathhouse-basement-01b.img",
                        pos: e.create(-10, -26.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bathhouse-basement-01c.img",
                        pos: e.create(18.5, -35.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bathhouse-basement-01d.img",
                        pos: e.create(23.02, -27.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bathhouse-basement-01e.img",
                        pos: e.create(2, 9),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    zoomRegions: [{
                        zoomIn: n.createAabbExtents(e.create(2, 9.5), e.create(20, 22)),
                        zoomOut: n.createAabbExtents(e.create(2, 9.5), e.create(22, 24)),
                        zoom: 48
                    }, {
                        zoomIn: n.createAabbExtents(e.create(0, 7.5), e.create(26, 48))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(-26, -26), e.create(4, 3))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(30, .5), e.create(7.5, 6.5))
                    }, {
                        zoomIn: n.createAabbExtents(e.create(-26, 16.5), e.create(7.5, 6.5))
                    }],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: []
                },
                occupiedEmitters: [{
                    type: "bathhouse_steam",
                    pos: e.create(30, .5),
                    dir: e.create(-1, 0),
                    rot: 0,
                    scale: 1,
                    layer: 1,
                    parentToCeiling: !1
                }, {
                    type: "bathhouse_steam",
                    pos: e.create(-26, 16.5),
                    dir: e.create(1, 0),
                    rot: 0,
                    scale: 1,
                    layer: 1,
                    parentToCeiling: !1
                }],
                goreRegion: n.createAabbExtents(e.create(2, 8.5), e.create(20, 23)),
                puzzle: {
                    name: "club_02",
                    completeUseType: "vault_door_bathhouse",
                    completeOffDelay: 1,
                    completeUseDelay: 2,
                    errorResetDelay: 1,
                    pieceResetDelay: 10,
                    sound: {
                        fail: "door_error_01",
                        complete: "none"
                    }
                },
                mapObjects: [{
                    type: "concrete_wall_ext_5",
                    pos: e.create(-36.5, -26),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_7",
                    pos: e.create(-33.5, -23),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: e.create(-33.5, -29),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_4",
                    pos: e.create(-28, -22),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_6",
                    pos: e.create(-27.5, -17.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_11",
                    pos: e.create(-23.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_11",
                    pos: e.create(-24.5, -30),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_6",
                    pos: e.create(-20.5, -34.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "club_wall_int_6",
                    pos: e.create(-14.5, -34.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "club_wall_int_6",
                    pos: e.create(-9.5, -34.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_4x24",
                    pos: e.create(-8, -22.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_column_4x9",
                    pos: e.create(2, -29),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_54",
                    pos: e.create(5, -39),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_14",
                    pos: e.create(26.5, -30.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_4",
                    pos: e.create(23, -25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_6",
                    pos: e.create(19.5, -26.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_10",
                    pos: e.create(16, -31),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_19",
                    pos: e.create(9.5, -23),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_14",
                    pos: e.create(18, -15),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_21",
                    pos: e.create(23.5, 20),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_5",
                    pos: e.create(23.5, -11),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_19",
                    pos: e.create(15.5, 32),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_19",
                    pos: e.create(-11.5, 32),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_5",
                    pos: e.create(-19.5, 28),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_thicker_19",
                    pos: e.create(-19.5, -2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_05",
                    pos: e.create(-18, -14),
                    scale: 1,
                    ori: 3
                }, {
                    type: "glass_wall_9",
                    pos: e.create(-.5, -14),
                    scale: 1,
                    ori: 1
                }, {
                    type: "glass_wall_9",
                    pos: e.create(-9.5, -14),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_05",
                    pos: e.create(8, -14),
                    scale: 1,
                    ori: 1
                }, {
                    type: "vault_door_bathhouse",
                    pos: e.create(6, 34.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "vault_door_bathhouse",
                    pos: e.create(-2, 34.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "switch_03",
                    pos: e.create(8, 30.75),
                    scale: 1,
                    ori: 0,
                    puzzlePiece: "1"
                }, {
                    type: "house_door_01",
                    pos: e.create(2, -37.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: e.create(-19.5, -24.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: z({
                        toilet_01: 9,
                        toilet_02: 1
                    }),
                    pos: e.create(-17, -35.25),
                    scale: 1,
                    ori: 2
                }, {
                    type: z({
                        toilet_01: 9,
                        toilet_02: 1
                    }),
                    pos: e.create(-12, -35.25),
                    scale: 1,
                    ori: 2
                }, {
                    type: "towelrack_01",
                    pos: e.create(-12, -25.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(-13, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "pot_04",
                    pos: e.create(-13, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "towelrack_01",
                    pos: e.create(-13, 2.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(-13, 8.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "towelrack_01",
                    pos: e.create(-13, 14.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "pot_04",
                    pos: e.create(-13, 20),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(-13, 24.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(17, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "pot_04",
                    pos: e.create(17, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "towelrack_01",
                    pos: e.create(17, 2.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(17, 8.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "towelrack_01",
                    pos: e.create(17, 14.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "pot_04",
                    pos: e.create(17, 20),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_column_1",
                    pos: e.create(17, 24.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "locker_01",
                    pos: e.create(-27.5, -28.85),
                    scale: 1,
                    ori: 2
                }, {
                    type: "locker_01",
                    pos: e.create(-23.5, -28.85),
                    scale: 1,
                    ori: 2
                }, {
                    type: "locker_01",
                    pos: e.create(10.5, -37.85),
                    scale: 1,
                    ori: 2
                }, {
                    type: "locker_01",
                    pos: e.create(14.5, -37.85),
                    scale: 1,
                    ori: 2
                }, {
                    type: "locker_01",
                    pos: e.create(18.5, -37.85),
                    scale: 1,
                    ori: 2
                }, {
                    type: "decal_bathhouse_pool_01",
                    pos: e.create(2, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_club_01",
                    pos: e.create(2, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_club_02",
                    pos: e.create(2, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_sideroom_01",
                    pos: e.create(-26, 16.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_sideroom_01",
                    pos: e.create(30, .5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "bathhouse_sideroom_02",
                    pos: e.create(2, 44),
                    scale: 1,
                    ori: 0
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        bathhouse_sideroom_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: []
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(7.5, 6.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-bathhouse-sideroom-01.img",
                        pos: e.create(-1, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    zoomRegions: [{
                        zoomIn: n.createAabbExtents(e.create(0, 0), e.create(7.5, 6.5))
                    }],
                    vision: {
                        dist: 5.5,
                        width: 3.25,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-bathhouse-sideroom-ceiling-01.img",
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                soundEmitters: [{
                    sound: "ambient_steam_01",
                    channel: "ambient",
                    pos: e.create(0, 0),
                    range: {
                        min: 9,
                        max: 16
                    },
                    falloff: 1,
                    volume: .2
                }],
                healRegions: [{
                    collision: n.createAabbExtents(e.create(0, 0), e.create(7.5, 6.5)),
                    healRate: 3
                }],
                mapObjects: [{
                    type: "concrete_wall_ext_thicker_15",
                    pos: e.create(.5, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_15",
                    pos: e.create(.5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_thicker_19",
                    pos: e.create(-8.5, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_4",
                    pos: e.create(7.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_4",
                    pos: e.create(7.5, -4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_05",
                    pos: e.create(7.5, -2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bathhouse_rocks_01",
                    pos: e.create(0, 0),
                    scale: 1,
                    ori: 0
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        bathhouse_sideroom_02: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: []
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "container",
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(14, 10))]
                    }],
                    imgs: [{
                        sprite: "map-building-bathhouse-sideroom-02.img",
                        pos: e.create(0, .5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    zoomRegions: [{
                        zoomIn: n.createAabbExtents(e.create(0, 0), e.create(14, 9.5))
                    }],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-bathhouse-sideroom-ceiling-02.img",
                        scale: 1,
                        alpha: 1,
                        tint: 4931116
                    }]
                },
                mapObjects: [{
                    type: "metal_wall_ext_thick_12",
                    pos: e.create(10, -9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_thick_12",
                    pos: e.create(-10, -9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_thicker_19",
                    pos: e.create(14.5, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_thicker_19",
                    pos: e.create(-14.5, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_thicker_26",
                    pos: e.create(0, 9),
                    scale: 1,
                    ori: 1
                }, {
                    type: "crate_05",
                    pos: e.create(-2.5, -2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_05",
                    pos: e.create(2.5, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: e.create(-10.75, 5.25),
                    scale: .8,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: e.create(10.75, 5.25),
                    scale: .8,
                    ori: 0
                }, {
                    type: "mil_crate_04",
                    pos: e.create(-5.75, 5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "mil_crate_04",
                    pos: e.create(5.75, 5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "case_07",
                    pos: e.create(0, 5.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: z({
                        deposit_box_01: 3,
                        deposit_box_02: 1
                    }),
                    pos: e.create(-13.75, -4.8),
                    scale: 1,
                    ori: 1
                }, {
                    type: z({
                        deposit_box_01: 3,
                        deposit_box_02: 1
                    }),
                    pos: e.create(-13.75, .45),
                    scale: 1,
                    ori: 1
                }, {
                    type: z({
                        deposit_box_01: 3,
                        deposit_box_02: 1
                    }),
                    pos: e.create(13.75, -4.8),
                    scale: 1,
                    ori: 3
                }, {
                    type: z({
                        deposit_box_01: 3,
                        deposit_box_02: 1
                    }),
                    pos: e.create(13.75, .45),
                    scale: 1,
                    ori: 3
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        club_window_01: Fr({
            isWindow: !1,
            hitParticle: "woodChip",
            explodeParticle: "woodPlank",
            destroyType: "club_window_broken_01",
            img: {
                sprite: "map-building-boarded-window-01.img"
            },
            sound: {
                bullet: "wood_prop_bullet",
                punch: "wood_prop_bullet",
                explode: "barrel_break_02",
                enter: "none"
            }
        }),
        club_window_broken_01: Ce({
            img: {
                tint: 7886127
            }
        }),
        club_vault: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(3, 4))]
                }],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(3, 4))
                }],
                imgs: [{
                    sprite: "map-building-club-vault-ceiling.img",
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "loot_tier_club_melee",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        },
        club_structure_01: {
            type: "structure",
            structureType: "club",
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 10
            },
            mapObstacleBounds: [],
            layers: [{
                type: "club_01",
                pos: e.create(-3.5, -17.5),
                ori: 0
            }, {
                type: "bathhouse_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(-33, -26), e.create(3, 2.55)),
                downDir: e.create(1, 0),
                noCeilingReveal: !0
            }, {
                collision: n.createAabbExtents(e.create(23, -28.5), e.create(2, 3)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(-5, 8), e.create(25, 50)), n.createAabbExtents(e.create(23.01, -35.5), e.create(3, 4))],
            interiorSound: {
                sound: "club_music_01",
                soundAlt: "club_music_02",
                filter: "club",
                transitionTime: 1,
                soundAltPlayTime: 90,
                outsideMaxDist: 10,
                outsideVolume: .25,
                undergroundVolume: .707,
                puzzle: "club_02"
            }
        },
        club_complex_01: {
            type: "building",
            map: {
                display: !0,
                shapes: []
            },
            terrain: {
                grass: !0,
                beach: !1,
                spawnPriority: 10
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(-16, 15), e.create(19, 6)), n.createAabbExtents(e.create(-8, -15.5), e.create(26.5, 27.5)), n.createAabbExtents(e.create(-2, -47), e.create(10, 5)), n.createAabbExtents(e.create(-37, -26), e.create(4, 5)), n.createAabbExtents(e.create(23, -7), e.create(8, 10)), n.createAabbExtents(e.create(22, -29), e.create(6, 12)), n.createAabbExtents(e.create(-8, -23), e.create(28, 21)), n.createAabbExtents(e.create(2, 0), e.create(16, 12)), n.createAabbExtents(e.create(-16, 0), e.create(4, 4)), n.createAabbExtents(e.create(-28.5, 12.5), e.create(3.5, 3.5))],
            mapGroundPatches: [],
            floor: {
                surfaces: [],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "club_structure_01",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "shack_01",
                pos: e.create(22, -10),
                scale: 1,
                ori: 1
            }]
        },
        bunker_egg_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 7.75), e.create(2, 3.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-generic-floor-01.img",
                    pos: e.create(0, 7.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                vision: {
                    dist: 5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: []
            },
            mapObjects: [{
                type: "metal_wall_ext_short_6",
                pos: e.create(0, 5.3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(5, 8),
                scale: 1.05,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(-5, 7.5),
                scale: 1.1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(-1.25, 15.75),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_01",
                pos: e.create(-5, -0),
                scale: 1,
                ori: 0
            }, {
                type: "stone_01",
                pos: e.create(-5.75, -1.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "decal_vent_02",
                pos: e.create(4.5, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "bush_01",
                pos: e.create(5.75, -6.75),
                scale: 1,
                ori: 0
            }]
        },
        bunker_egg_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, -4.5), e.create(10, 9))]
                }],
                imgs: [{
                    sprite: "map-bunker-egg-chamber-floor-01a.img",
                    pos: e.create(-.15, -4.6),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-egg-chamber-floor-01b.img",
                    pos: e.create(0, 9.24),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, -4.5), e.create(10, 9))
                }],
                imgs: [{
                    sprite: "map-bunker-egg-chamber-ceiling-01.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(0, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_24",
                pos: e.create(0, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-2, 5),
                scale: 1,
                ori: 3
            }, {
                type: "crate_07",
                pos: e.create(0, -4.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-7, -11),
                scale: .9,
                ori: 0
            }]
        },
        bunker_egg_sublevel_02: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, -4.5), e.create(10, 9))]
                }],
                imgs: [{
                    sprite: "map-bunker-egg-chamber-floor-01a.img",
                    pos: e.create(-.15, -4.6),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-egg-chamber-floor-01b.img",
                    pos: e.create(0, 9.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, -4.5), e.create(10, 9))
                }],
                imgs: [{
                    sprite: "map-bunker-egg-chamber-ceiling-01.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(0, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_24",
                pos: e.create(0, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-2, 5),
                scale: 1,
                ori: 3
            }, {
                type: "crate_07b",
                pos: e.create(0, -4.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-7, -11),
                scale: .9,
                ori: 0
            }]
        },
        bunker_egg_sublevel_01sv: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, -4.5), e.create(10, 9))]
                }],
                imgs: [{
                    sprite: "map-bunker-egg-chamber-floor-01a.img",
                    pos: e.create(-.15, -4.6),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-egg-chamber-floor-01b.img",
                    pos: e.create(0, 9.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, -4.5), e.create(10, 9))
                }],
                imgs: [{
                    sprite: "map-bunker-egg-chamber-ceiling-01.img",
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(0, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_24",
                pos: e.create(0, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-2, 5),
                scale: 1,
                ori: 3
            }, {
                type: "crate_07sv",
                pos: e.create(0, -4.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-7, -11),
                scale: .9,
                ori: 0
            }]
        },
        bunker_structure_01: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 5), e.create(7.5, 12.5))],
            layers: [{
                type: "bunker_egg_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_egg_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 8.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(0, -3.7), e.create(10, 9.5))]
        },
        bunker_structure_01b: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 5), e.create(7.5, 12.5))],
            layers: [{
                type: "bunker_egg_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_egg_sublevel_02",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 8.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(0, -3.7), e.create(10, 9.5))]
        },
        bunker_structure_01sv: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 5), e.create(7.5, 12.5))],
            layers: [{
                type: "bunker_egg_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_egg_sublevel_01sv",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 8.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(0, -3.7), e.create(10, 9.5))]
        },
        bunker_hydra_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(20.25, 3.5), e.create(6.25, 5.5)),
                    color: 2894892
                }, {
                    collider: n.createAabbExtents(e.create(32.25, 3.5), e.create(6.75, 9.25)),
                    color: 3815994
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(20.25, 3.5), e.create(6.25, 5.5)), n.createAabbExtents(e.create(32.25, 3.5), e.create(6.75, 9.25))]
                }, {
                    type: "container",
                    collision: [n.createAabbExtents(e.create(16.25, 3.5), e.create(3.25, 2)), n.createAabbExtents(e.create(-16.5, -90.75), e.create(2, 3.25)), n.createAabbExtents(e.create(40, -50.5), e.create(2, 3.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-floor-01.img",
                    pos: e.create(25.75, 3.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-generic-floor-01.img",
                    pos: e.create(-16.5, -90),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-bunker-generic-floor-01.img",
                    pos: e.create(40, -51),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(19.25, 3.5), e.create(6.25, 5.5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(32.25, 3.5), e.create(6.75, 9.25))
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-ceiling-01.img",
                    pos: e.create(25.75, 3.5),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {
                    dist: 5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_13",
                pos: e.create(18.75, 9.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_13",
                pos: e.create(18.75, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_11",
                pos: e.create(12.75, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_7",
                pos: e.create(25.75, 9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_7",
                pos: e.create(25.75, -2),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_2",
                pos: e.create(26.25, 12.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_2",
                pos: e.create(26.25, -5.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_8",
                pos: e.create(35.25, 12.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_8",
                pos: e.create(35.25, -5.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_17",
                pos: e.create(38.75, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "police_wall_int_7",
                pos: e.create(32.75, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "police_wall_int_2",
                pos: e.create(33.25, 4.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_01",
                pos: e.create(38.25, 4.5),
                scale: 1,
                ori: 1
            }, {
                type: z({
                    toilet_03: 5,
                    toilet_04: 1
                }),
                pos: e.create(35.75, 10.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_08",
                pos: e.create(35.75, -2.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_6",
                pos: e.create(13, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(17, 6),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(17, 1),
                scale: 1,
                ori: 1
            }, {
                type: "decal_vent_01",
                pos: e.create(-1.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_02",
                pos: e.create(8, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_6",
                pos: e.create(-16.5, -87.75),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-19, -91),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-14, -91),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_01",
                pos: e.create(-15.15, -79.55),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_6",
                pos: e.create(40, -53.25),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(37.5, -50),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(42.5, -50),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_02",
                pos: e.create(40, -60.5),
                scale: 1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(-11.5, -92),
                scale: 1.05,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(-21.5, -92.5),
                scale: 1.1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(-17.5, -83.25),
                scale: 1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(45, -50),
                scale: 1.05,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(35, -50.5),
                scale: 1.1,
                ori: 0
            }, {
                type: "tree_01",
                pos: e.create(38.75, -42.25),
                scale: 1,
                ori: 0
            }, {
                type: "decal_hydra_01",
                pos: e.create(3.5, -48.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }]
        },
        bunker_hydra_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(3.5, 3), e.create(9.5, 9))]
                }, {
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(-15.5, -79.5), e.create(3, 8)), n.createAabbExtents(e.create(40.5, -62), e.create(9.5, 8))]
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-chamber-floor-01a.img",
                    pos: e.create(17.5, 3.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hydra-chamber-floor-01b.img",
                    pos: e.create(3.5, 2.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hydra-chamber-floor-02.img",
                    pos: e.create(-15.5, -83),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hydra-chamber-floor-03.img",
                    pos: e.create(40.5, -58.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(3.5, 2.25), e.create(10, 10))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-15, -77), e.create(5.5, 10.5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(38, -62), e.create(11.5, 8))
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-chamber-ceiling-01.img",
                    pos: e.create(7, 2),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }, {
                    sprite: "map-bunker-hydra-chamber-ceiling-02.img",
                    pos: e.create(-13.5, -76.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }, {
                    sprite: "map-bunker-hydra-chamber-ceiling-03.img",
                    pos: e.create(38, -62),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 10,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(20, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(16.5, 7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(16.5, 0),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(14, 12),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(14, -5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_21",
                pos: e.create(2, 13.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_21",
                pos: e.create(-7, 2.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-3, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(10, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(13.5, 5.5),
                scale: 1,
                ori: 2
            }, {
                type: "lab_door_01",
                pos: e.create(-.5, -7.5),
                scale: 1,
                ori: 3
            }, {
                type: "lab_door_01",
                pos: e.create(7.5, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "sandbags_01",
                pos: e.create(0, 7.25),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(10.25, -2.75),
                scale: .9,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(10.25, 9.75),
                scale: .9,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(-3.5, -3),
                scale: .9,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_23",
                pos: e.create(-20, -83),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_19",
                pos: e.create(-11, -79),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-13, -90.5),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(-16.5, -94),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-18.5, -87.5),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(-12.15, -79),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(-12.15, -74.5),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(-12.15, -83.5),
                scale: 1,
                ori: 3
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(40, -47),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(36.5, -50.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(43.5, -50.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(33, -53),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(30, -55),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(30, -66),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_16",
                pos: e.create(36.5, -71),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(48.25, -70),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_13",
                pos: e.create(50, -62),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(48.25, -54),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(38, -53.5),
                scale: 1,
                ori: 3
            }, {
                type: "crate_08",
                pos: e.create(34, -67),
                scale: 1,
                ori: 2
            }, {
                type: "locker_01",
                pos: e.create(46.5, -55.15),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(48.9, -57.5),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(48.9, -62),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(48.9, -66.5),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(46.5, -68.85),
                scale: 1,
                ori: 2
            }, {
                type: "bunker_hydra_compartment_01",
                pos: e.create(3.5, -18.95),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_hydra_compartment_02",
                pos: e.create(6, -50),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_hydra_compartment_03",
                pos: e.create(10.5, -74.95),
                scale: 1,
                ori: 0
            }]
        },
        bunker_hydra_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 1.5), e.create(9.5, 12.5))]
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-floor-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 1.25), e.create(10, 10))
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-ceiling-01.img",
                    pos: e.create(0, 1.25),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_17",
                pos: e.create(-9.75, 3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-6.5, 9.75),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(6.5, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(10.5, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(-7.5, -6.75),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(8, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "crate_08",
                pos: e.create(6.5, 6.5),
                scale: 1,
                ori: 2
            }, {
                type: "sandbags_01",
                pos: e.create(4.75, 1.5),
                scale: 1,
                ori: 0
            }, {
                type: "lab_door_01",
                pos: e.create(-4, -8.5),
                scale: 1,
                ori: 3
            }, {
                type: "lab_door_01",
                pos: e.create(4, -8.5),
                scale: 1,
                ori: 1
            }, {
                type: "locker_01",
                pos: e.create(-6, 8.4),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(-8.35, 6),
                scale: 1,
                ori: 1
            }, {
                type: "locker_01",
                pos: e.create(-8.35, 1.5),
                scale: 1,
                ori: 1
            }, {
                type: "locker_01",
                pos: e.create(-8.35, -3),
                scale: 1,
                ori: 1
            }, {
                type: "locker_01",
                pos: e.create(-6, -5.4),
                scale: 1,
                ori: 2
            }]
        },
        metal_wall_column_5x12: v({
            material: "metal",
            extents: e.create(2.5, 6)
        }),
        bunker_hydra_compartment_02: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "tile",
                    data: {
                        isBright: !0
                    },
                    collision: [n.createAabbExtents(e.create(-2.5, 16), e.create(22, 4)), n.createAabbExtents(e.create(-2.5, 9.5), e.create(6, 2.5)), n.createAabbExtents(e.create(0, -4.5), e.create(25, 17))]
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-floor-02.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-2, 3), e.create(22.5, 19.5))
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-ceiling-02.img",
                    pos: e.create(0, 1),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_21",
                pos: e.create(-17, 21.75),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_21",
                pos: e.create(12, 21.75),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_42",
                pos: e.create(-26, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_29",
                pos: e.create(21, 6),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-19, -18.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-18.5, -14),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-15, -15),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_9",
                pos: e.create(-9, -16),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_9",
                pos: e.create(4, -16),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(10, -15),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(17, -14),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_column_5x12",
                pos: e.create(-14.5, 13),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_column_5x12",
                pos: e.create(9.5, 13),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_03",
                pos: e.create(-7, 12),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_03",
                pos: e.create(2, 12),
                scale: 1,
                ori: 3
            }, {
                type: "lab_window_01",
                pos: e.create(-7, 7),
                scale: 1,
                ori: 1
            }, {
                type: "lab_window_01",
                pos: e.create(-4, 7),
                scale: 1,
                ori: 1
            }, {
                type: "lab_window_01",
                pos: e.create(-1, 7),
                scale: 1,
                ori: 1
            }, {
                type: "lab_window_01",
                pos: e.create(2, 7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_4",
                pos: e.create(-9, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_4",
                pos: e.create(4, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "lab_door_01",
                pos: e.create(-20.5, 13),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_01",
                pos: e.create(15.5, 13),
                scale: 1,
                ori: 3
            }, {
                type: "crate_01",
                pos: e.create(-17.5, 7.75),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "vat_01",
                pos: e.create(-12.25, 7.5),
                scale: 1,
                ori: 3
            }, {
                type: "vat_01",
                pos: e.create(-12, -2.5),
                scale: 1,
                ori: 0
            }, {
                type: "vat_01",
                pos: e.create(-18, -2.5),
                scale: 1,
                ori: 2
            }, {
                type: "vat_02",
                pos: e.create(-2.5, 1.5),
                scale: 1,
                ori: 2
            }, {
                type: "power_box_01",
                pos: e.create(-2.5, -3),
                scale: 1,
                ori: 2
            }, {
                type: "crate_01",
                pos: e.create(12.5, 7.75),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "vat_01",
                pos: e.create(7.25, 7.5),
                scale: 1,
                ori: 3
            }, {
                type: "vat_01",
                pos: e.create(7, -2.5),
                scale: 1,
                ori: 2
            }, {
                type: "vat_01",
                pos: e.create(13, -2.5),
                scale: 1,
                ori: 0
            }, {
                type: "vat_01",
                pos: e.create(-10.75, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_01",
                pos: e.create(-4.5, -16.5),
                scale: 1,
                ori: 3
            }, {
                type: "vat_01",
                pos: e.create(5.75, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "fire_ext_01",
                pos: e.create(1.5, -14.15),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_03",
                pos: e.create(-20.5, -16.5),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_02",
                pos: e.create(20.5, -8.5),
                scale: 1,
                ori: 2
            }]
        },
        bunker_hydra_compartment_03: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, 2), e.create(9, 8.75))]
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-floor-03.img",
                    pos: e.create(0, -.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, .75), e.create(10, 7.75))
                }],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-ceiling-03.img",
                    pos: e.create(0, 1),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_17",
                pos: e.create(-10.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(0, -8),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(10.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_14",
                pos: e.create(2, 6),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-6.5, -1.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(-1.75, 2),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(-2, -2),
                scale: .9,
                ori: 0
            }, {
                type: "case_03",
                pos: e.create(7, -4),
                scale: 1,
                ori: 3
            }]
        },
        bunker_structure_02: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(25.5, 3.5), e.create(16, 11.5)), n.createAabbExtents(e.create(-16.5, -89.5), e.create(7, 7.5)), n.createAabbExtents(e.create(40, -47.25), e.create(6.5, 7.25)), n.createAabbExtents(e.create(3.5, -48.5), e.create(3, 3))],
            layers: [{
                type: "bunker_hydra_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_hydra_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(16.4, 3.5), e.create(2.6, 2)),
                downDir: e.create(-1, 0)
            }, {
                collision: n.createAabbExtents(e.create(-16.5, -90.75), e.create(2, 2.5)),
                downDir: e.create(0, 1)
            }, {
                collision: n.createAabbExtents(e.create(40, -50.35), e.create(2, 2.5)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(3.5, -7.2), e.create(10.75, 20)), n.createAabbExtents(e.create(-15, -79.75), e.create(5, 8.5)), n.createAabbExtents(e.create(39, -61.85), e.create(12, 9)), n.createAabbExtents(e.create(3.5, -49.2), e.create(23.49, 21.99)), n.createAabbExtents(e.create(10.5, -76.7), e.create(10, 5.5))]
        },
        bunker_storm_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 10), e.create(3.6, 5.8)),
                    color: 6707790
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 7.75), e.create(2, 3.25))]
                }, {
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, 13.5), e.create(3.75, 2.5))]
                }, {
                    type: "asphalt",
                    collision: [n.createAabbExtents(e.create(5, 13.75), e.create(1.25, 2.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-storm-floor-02.img",
                    pos: e.create(1.25, 10),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 10), e.create(3.5, 5.6)),
                    zoomOut: n.createAabbExtents(e.create(0, 10), e.create(3.8, 5.9))
                }],
                vision: {
                    dist: 5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-shack-ceiling-01.img",
                    pos: e.create(-1, 10),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }],
                destroy: {
                    wallCount: 2,
                    particle: "shackBreak",
                    particleCount: 25,
                    residue: "none"
                }
            },
            mapObjects: [{
                type: "metal_wall_ext_short_6",
                pos: e.create(0, 5.3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_bot",
                pos: e.create(3.39, 8.6),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_side_left",
                pos: e.create(.3, 4.52),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_top",
                pos: e.create(-3.39, 9.73),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_side_right",
                pos: e.create(0, 15.58),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-2, 17.9),
                scale: .8,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(1.45, 17.7),
                scale: .85,
                ori: 0
            }, {
                type: "decal_vent_01",
                pos: e.create(-5, -0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_02",
                pos: e.create(4.5, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "stone_01",
                pos: e.create(-4.25, -1.5),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "bush_01",
                pos: e.create(3.75, -6.75),
                scale: 1,
                ori: 0
            }]
        },
        bunker_storm_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(1, -4.4), e.create(10.5, 9))]
                }, {
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(19, -5.5), e.create(7.5, 8))]
                }],
                imgs: [{
                    sprite: "map-bunker-storm-chamber-floor-01a.img",
                    pos: e.create(8.5, -4.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-storm-chamber-floor-01b.img",
                    pos: e.create(0, 9.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(8.5, -4.5), e.create(18, 9.5))
                }],
                imgs: [{
                    sprite: "map-bunker-storm-chamber-ceiling-01.img",
                    pos: e.create(8.5, -1),
                    scale: 1,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(0, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-10.5, -3),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_21",
                pos: e.create(-1.5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(10.5, -11),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(12.5, -11),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(21.5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(27.5, -5.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_17",
                pos: e.create(20.5, 3.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_9",
                pos: e.create(10.5, 2.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(12.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_02",
                pos: e.create(-2, 5),
                scale: 1,
                ori: 3
            }, {
                type: "crate_01",
                pos: e.create(-6.5, 1.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_04",
                pos: e.create(6, -1),
                scale: 1,
                ori: 0
            }, {
                type: "crate_04",
                pos: e.create(3.9, -6.4),
                scale: 1,
                ori: 0
            }, {
                type: "control_panel_03",
                pos: e.create(16, -11.5),
                scale: 1,
                ori: 2
            }, {
                type: "control_panel_02",
                pos: e.create(20, -11.25),
                scale: 1,
                ori: 2
            }, {
                type: "control_panel_03",
                pos: e.create(24, -11.5),
                scale: 1,
                ori: 2
            }, {
                type: "crate_08",
                pos: e.create(23.5, -.5),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    case_03: 1,
                    chest_02: 9
                }),
                pos: e.create(16.5, .25),
                scale: 1,
                ori: 0
            }, {
                type: "lab_door_01",
                pos: e.create(11.5, -2),
                scale: 1,
                ori: 2
            }, {
                type: "barrel_01",
                pos: e.create(-7, -11),
                scale: .9,
                ori: 0
            }]
        },
        bunker_structure_03: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 6), e.create(7, 16.5))],
            layers: [{
                type: "bunker_storm_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_storm_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 8.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(8.5, -3.7), e.create(18, 9.5))]
        },
        bunker_conch_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(20, 3.35), e.create(5.5, 2.5)),
                    color: 2703694
                }, {
                    collider: n.createAabbExtents(e.create(46.5, -32.55), e.create(5.5, 2.5)),
                    color: 2703694
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(16.25, 3.5), e.create(3.25, 2)), n.createAabbExtents(e.create(44.25, -32.5), e.create(3.25, 2)), n.createAabbExtents(e.create(22, 3.35), e.create(8, 2.5)), n.createAabbExtents(e.create(50.5, -32.55), e.create(8, 2.5))]
                }],
                imgs: [{
                    sprite: "map-bunker-conch-floor-01.img",
                    pos: e.create(20.75, 3.45),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-conch-floor-01.img",
                    pos: e.create(48.75, -32.45),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(19, 3.35), e.create(5.5, 2.5)),
                    zoomOut: n.createAabbExtents(e.create(22, 3.35), e.create(8, 2.5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(47.5, -32.55), e.create(5.5, 2.5)),
                    zoomOut: n.createAabbExtents(e.create(50.5, -32.55), e.create(8, 2.5))
                }],
                imgs: [{
                    sprite: "map-bunker-conch-ceiling-01.img",
                    pos: e.create(19.25, 3.35),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-conch-ceiling-01.img",
                    pos: e.create(47.25, -32.55),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }],
                vision: {}
            },
            mapObjects: [{
                type: "container_wall_top",
                pos: e.create(13.7, 3.35),
                scale: 1,
                ori: 1
            }, {
                type: "container_wall_side",
                pos: e.create(19.6, 5.7),
                scale: 1,
                ori: 1
            }, {
                type: "container_wall_side",
                pos: e.create(19.6, 1),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(24, 9),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(18, -2),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "container_wall_top",
                pos: e.create(41.7, -32.55),
                scale: 1,
                ori: 1
            }, {
                type: "container_wall_side",
                pos: e.create(47.6, -34.9),
                scale: 1,
                ori: 1
            }, {
                type: "container_wall_side",
                pos: e.create(47.6, -30.2),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(47, -27),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(40, -37),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_03",
                pos: e.create(-2, -13.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_conch_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(1, 4), e.create(12.5, 3.5)), n.createAabbExtents(e.create(28, -30), e.create(13.5, 4.5))]
                }],
                imgs: [{
                    sprite: "map-bunker-conch-chamber-floor-01.img",
                    pos: e.create(4, 5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-conch-chamber-floor-02.img",
                    pos: e.create(34.86, -29.9),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(1, 3.5), e.create(12.5, 5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(26.75, -30), e.create(15.25, 4.5))
                }],
                imgs: [{
                    sprite: "map-bunker-conch-chamber-ceiling-01.img",
                    pos: e.create(-2, 3.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }, {
                    sprite: "map-bunker-conch-chamber-ceiling-02.img",
                    pos: e.create(26.25, -29.9),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 7,
                    width: 3
                }
            },
            occupiedEmitters: [{
                type: "bunker_bubbles_01",
                pos: e.create(-2, -13.5),
                rot: 0,
                scale: .5,
                layer: 0
            }],
            mapObjects: [{
                type: "house_door_02",
                pos: e.create(13.5, 1.35),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(20, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(16.5, 6.7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_29",
                pos: e.create(7, 0),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_16",
                pos: e.create(5.5, 9),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_9",
                pos: e.create(-7, 7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(-13, 3.5),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(9.5, 7.85),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(5, 7.85),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(.5, 7.85),
                scale: 1,
                ori: 0
            }, {
                type: "decal_pipes_01",
                pos: e.create(-4.5, 5),
                scale: 1,
                ori: 2
            }, {
                type: "house_door_02",
                pos: e.create(41.5, -34.55),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(48, -32.4),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(38.5, -35.9),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_13",
                pos: e.create(42, -29.2),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(34, -26.7),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(27, -33.4),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(20, -30.9),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(23.5, -23.9),
                scale: 1,
                ori: 1
            }, {
                type: "decal_pipes_04",
                pos: e.create(22, -29.9),
                scale: 1,
                ori: 2
            }, {
                type: "loot_tier_2",
                pos: e.create(31, -30),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_conch_compartment_01",
                pos: e.create(-1.5, -12.4),
                scale: 1,
                ori: 0
            }]
        },
        bunker_conch_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "water",
                    collision: [n.createAabbExtents(e.create(1, -2.5), e.create(15, 15.5))]
                }],
                imgs: [{
                    sprite: "map-bunker-conch-compartment-floor-01a.img",
                    pos: e.create(-3, -.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-conch-compartment-floor-01b.img",
                    pos: e.create(9.75, -17.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-1.5, -1), e.create(12.5, 12))
                }, {
                    zoomIn: n.createAabbExtents(e.create(9.5, -14.5), e.create(4, 2.5))
                }],
                imgs: [{
                    sprite: "map-bunker-conch-compartment-ceiling-01.img",
                    pos: e.create(-.75, -5.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 7,
                    width: 3
                }
            },
            occupiedEmitters: [{
                type: "bunker_bubbles_01",
                pos: e.create(-.5, -1),
                rot: 0,
                scale: .5,
                layer: 0
            }],
            mapObjects: [{
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-11.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-15, 7.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(-15.5, .5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(-13.5, -6.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(-11.5, -11.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_13",
                pos: e.create(-3.5, -13.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(4.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_13",
                pos: e.create(9.5, -18.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(13.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_19",
                pos: e.create(11.5, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_19",
                pos: e.create(3.5, 10.5),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_01",
                pos: e.create(-10, 11),
                scale: 1,
                ori: 3
            }, {
                type: "control_panel_03",
                pos: e.create(-12.25, 4.25),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_02",
                pos: e.create(-12, .25),
                scale: 1,
                ori: 1
            }, {
                type: "fire_ext_01",
                pos: e.create(-3, 8.75),
                scale: 1,
                ori: 3
            }, {
                type: "crate_09",
                pos: e.create(2.75, 6.25),
                scale: 1,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(7.5, 6.25),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "decal_pipes_02",
                pos: e.create(7.25, 7.25),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-3.75, -2),
                scale: .8,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(-1.25, -4.25),
                scale: .8,
                ori: 0,
                inheritOri: !1
            }, {
                type: "crate_01",
                pos: e.create(-7.5, -9.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(3.5, -9.5),
                scale: 1,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "decal_pipes_03",
                pos: e.create(-5.25, -9.25),
                scale: 1,
                ori: 0
            }, {
                type: "lab_door_01",
                pos: e.create(13.5, -17),
                scale: 1,
                ori: 0
            }]
        },
        bunker_structure_04: {
            type: "structure",
            terrain: {
                waterEdge: {
                    dir: e.create(-1, 0),
                    distMin: 15,
                    distMax: 16
                }
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(21, 3.5), e.create(9.5, 8)), n.createAabbExtents(e.create(48, -32.5), e.create(10, 8))],
            layers: [{
                type: "bunker_conch_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_conch_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(16.9, 3.5), e.create(2.6, 2)),
                downDir: e.create(-1, 0)
            }, {
                collision: n.createAabbExtents(e.create(44.9, -32.5), e.create(2.6, 2)),
                downDir: e.create(-1, 0)
            }],
            mask: [n.createAabbExtents(e.create(-1.5, -9.2), e.create(15.7, 22)), n.createAabbExtents(e.create(28.25, -32), e.create(14, 8))]
        },
        bunker_crossing_stairs_01: zr({}),
        bunker_crossing_stairs_01b: zr({
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, .75), e.create(2, 3.25))
                }],
                imgs: [{
                    sprite: "map-bunker-crossing-ceiling-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            }
        }),
        bunker_crossing_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(5, 5)),
                    color: 1984867
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "map-bunker-crossing-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "bunker_crossing_stairs_01b",
                pos: e.create(34.5, 28.5),
                scale: 1,
                ori: 3
            }, {
                type: "bunker_crossing_stairs_01b",
                pos: e.create(-36, 20),
                scale: 1,
                ori: 2
            }, {
                type: "bunker_crossing_stairs_01b",
                pos: e.create(36, -14),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_crossing_stairs_01",
                pos: e.create(-34.5, -22.5),
                scale: 1,
                ori: 1
            }]
        },
        bunker_crossing_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 3.25), e.create(38, 28))]
                }],
                imgs: [{
                    sprite: "map-bunker-crossing-chamber-floor-01a.img",
                    pos: e.create(-11.44, 27),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-01b.img",
                    pos: e.create(-9.38, 18.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-01c.img",
                    pos: e.create(-36.44, 18.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-03.img",
                    pos: e.create(28.5, 23.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 2
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-02.img",
                    pos: e.create(-28.5, -17.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-01a.img",
                    pos: e.create(11.45, -21),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-01b.img",
                    pos: e.create(9.39, -12.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-bunker-crossing-chamber-floor-01c.img",
                    pos: e.create(36.45, -12.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-3, 27.5), e.create(35.1, 5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(3, -21.5), e.create(35.1, 5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-4, 20.5), e.create(3, 3))
                }, {
                    zoomIn: n.createAabbExtents(e.create(4, -14.5), e.create(3, 3))
                }],
                imgs: [{
                    sprite: "map-bunker-crossing-chamber-ceiling-01.img",
                    pos: e.create(-3.5, 24),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }, {
                    sprite: "map-bunker-crossing-chamber-ceiling-01.img",
                    pos: e.create(3.5, -18),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335,
                    rot: 2
                }],
                vision: {
                    dist: 7,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(38.5, 28.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_02",
                pos: e.create(32, 30.5),
                scale: 1,
                ori: 2
            }, {
                type: "decal_pipes_05",
                pos: e.create(13, 28.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_48",
                pos: e.create(15, 32),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_35",
                pos: e.create(21.5, 25),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(2.5, 23.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-.5, 20.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-7.5, 20.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_32",
                pos: e.create(-22, 29),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(-39.5, 23),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(-36, 16),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-38, 22.5),
                scale: 1,
                ori: 3
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-32.5, 19.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_22",
                pos: e.create(-20, 22),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(-4.5, 29),
                scale: .8,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(-38.5, -22.5),
                scale: 1,
                ori: 0
            }, {
                type: "house_door_02",
                pos: e.create(-32, -20.5),
                scale: 1,
                ori: 2
            }, {
                type: "decal_pipes_05",
                pos: e.create(-12, -22.5),
                scale: 1,
                ori: 2
            }, {
                type: "metal_wall_ext_thicker_48",
                pos: e.create(-15, -26),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(-31.5, -19),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_16",
                pos: e.create(-12, -19),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-2.5, -17.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(7.5, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_32",
                pos: e.create(22, -23),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(39.5, -17),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(36, -10),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(38, -16.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(32.5, -13.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_22",
                pos: e.create(20, -16),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(4.5, -23),
                scale: .8,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(-12.5, -22.25),
                scale: 1,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(-7, -22.75),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_crossing_compartment_01",
                pos: e.create(1.5, 0),
                scale: 1,
                ori: 0
            }]
        },
        bunker_crossing_bathroom: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "water",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }],
                imgs: [{
                    sprite: "",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(3.75, 2))
                }],
                imgs: [{
                    sprite: "map-building-crossing-bathroom-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: z({
                    toilet_03: 5,
                    toilet_04: 1
                }),
                pos: e.create(2, 0),
                scale: 1,
                ori: 3
            }]
        },
        bunker_crossing_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "water",
                    collision: [n.createAabbExtents(e.create(-1, 3), e.create(17, 17.5))]
                }],
                imgs: [{
                    sprite: "map-bunker-crossing-compartment-floor-02.img",
                    pos: e.create(-22.5, -10),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-crossing-compartment-floor-01.img",
                    pos: e.create(4, 3),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(4, 3), e.create(22, 14.5))
                }, {
                    zoomIn: n.createAabbExtents(e.create(-22, -11), e.create(4.5, 9))
                }],
                imgs: [{
                    sprite: "map-bunker-crossing-compartment-ceiling-01a.img",
                    pos: e.create(-22.475, -11),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }, {
                    sprite: "map-bunker-crossing-compartment-ceiling-01b.img",
                    pos: e.create(3.975, 3),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 7,
                    width: 3
                }
            },
            occupiedEmitters: [{
                type: "bunker_bubbles_02",
                pos: e.create(-1.5, 0),
                rot: 0,
                scale: .5,
                layer: 0
            }],
            mapObjects: [{
                type: "metal_wall_ext_thicker_13",
                pos: e.create(-14, 16),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_01",
                pos: e.create(-7.5, 17.5),
                scale: 1,
                ori: 3
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(5.5, 16),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(16, 13.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(22, 8),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(28, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "lab_door_01",
                pos: e.create(17.5, 6.5),
                scale: 1,
                ori: 2
            }, {
                type: "bunker_crossing_bathroom",
                pos: e.create(22, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(22, 1),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(16, -6),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(9.5, -10),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_01",
                pos: e.create(4.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_19",
                pos: e.create(-9, -10),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-19.5, -8),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(-20, -14.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_17",
                pos: e.create(-27, -11),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(-23, -1),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_14",
                pos: e.create(-19, 7.5),
                scale: 1,
                ori: 0
            }, {
                type: "control_panel_04",
                pos: e.create(-15.25, 8.5),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_03",
                pos: e.create(-15.5, 12.75),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_03",
                pos: e.create(-15.5, 4.25),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(-5, 10.25),
                scale: .8,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-3.25, 12.5),
                scale: .8,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(1.15, 14.85),
                scale: 1,
                ori: 0
            }, {
                type: "locker_03",
                pos: e.create(4.5, 14.85),
                scale: 1,
                ori: 0
            }, {
                type: "bookshelf_01",
                pos: e.create(10.5, 13),
                scale: 1,
                ori: 0
            }, {
                type: "bed_sm_01",
                pos: e.create(10.5, 10),
                scale: 1,
                ori: 3
            }, {
                type: "crate_01",
                pos: e.create(-5, -6.25),
                scale: .8,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "barrel_01",
                pos: e.create(-3, -2.5),
                scale: .9,
                ori: 0
            }, {
                type: "vending_01",
                pos: e.create(-1.25, -6.5),
                scale: 1,
                ori: 2
            }, {
                type: "fire_ext_01",
                pos: e.create(14, -.5),
                scale: 1,
                ori: 2
            }, {
                type: "refrigerator_01",
                pos: e.create(8.25, -6.5),
                scale: 1,
                ori: 2
            }, {
                type: "oven_01",
                pos: e.create(12.25, -6.5),
                scale: 1,
                ori: 2
            }, {
                type: "crossing_door_01",
                pos: e.create(-17.85, -2.5),
                scale: 1,
                ori: 2
            }, {
                type: "couch_01",
                pos: e.create(-12, 0),
                scale: 1,
                ori: 0
            }, {
                type: "screen_01",
                pos: e.create(-12, -7.5),
                scale: 1,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-23.5, -4.5),
                scale: .8,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "loot_tier_woodaxe",
                pos: e.create(-23.5, -8.5),
                scale: .8,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-23.5, -14),
                scale: .8,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crossing_door_01",
                pos: e.create(-21.5, -20.15),
                scale: 1,
                ori: 1
            }]
        },
        bunker_structure_05: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1,
                bridge: {
                    nearbyWidthMult: 1.2
                },
                spawnPriority: 100
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(35.5, 28.5), e.create(6, 6)), n.createAabbExtents(e.create(-36, 19), e.create(6, 6)), n.createAabbExtents(e.create(36, -13), e.create(6, 6)), n.createAabbExtents(e.create(-35.5, -22.5), e.create(6, 6)), n.createAabbExtents(e.create(0, 0), e.create(6, 6))],
            bridgeLandBounds: [n.createAabbExtents(e.create(35.5, 28.5), e.create(5, 5)), n.createAabbExtents(e.create(-36, 19), e.create(5, 5)), n.createAabbExtents(e.create(36, -13), e.create(5, 5)), n.createAabbExtents(e.create(-35.5, -22.5), e.create(5, 5))],
            bridgeWaterBounds: [n.createAabbExtents(e.create(0, 0), e.create(5, 5))],
            layers: [{
                type: "bunker_crossing_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_crossing_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(35.6, 28.5), e.create(2.6, 2)),
                downDir: e.create(-1, 0)
            }, {
                collision: n.createAabbExtents(e.create(-36, 19), e.create(2, 2.6)),
                downDir: e.create(0, 1)
            }, {
                collision: n.createAabbExtents(e.create(36, -13), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }, {
                collision: n.createAabbExtents(e.create(-35.5, -22.5), e.create(2.6, 2)),
                downDir: e.create(1, 0)
            }],
            mask: [n.createAabbExtents(e.create(-3.7, 27), e.create(36.5, 5)), n.createAabbExtents(e.create(3.7, -21), e.create(36.5, 5)), n.createAabbExtents(e.create(0, 3), e.create(30, 18.95))]
        },
        bunker_hatchet_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 10), e.create(3.6, 5.8)),
                    color: 6707790
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 7.75), e.create(2, 3.25))]
                }, {
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, 13.5), e.create(3.75, 2.5)), n.createAabbExtents(e.create(5, 13.75), e.create(1.25, 2.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-storm-floor-02.img",
                    pos: e.create(1.25, 10),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 10), e.create(3.5, 5.6)),
                    zoomOut: n.createAabbExtents(e.create(0, 10), e.create(3.8, 5.9))
                }],
                vision: {
                    dist: 5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: [{
                    sprite: "map-building-shack-ceiling-01.img",
                    pos: e.create(-1, 10),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }],
                destroy: {
                    wallCount: 2,
                    particle: "shackBreak",
                    particleCount: 25,
                    residue: "none"
                }
            },
            mapObjects: [{
                type: "metal_wall_ext_short_6",
                pos: e.create(0, 5.3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(-2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_short_7",
                pos: e.create(2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "shack_wall_bot",
                pos: e.create(3.39, 8.6),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_side_left",
                pos: e.create(.3, 4.52),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_top",
                pos: e.create(-3.39, 9.73),
                scale: 1,
                ori: 1
            }, {
                type: "shack_wall_side_right",
                pos: e.create(0, 15.58),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-2, 17.9),
                scale: .8,
                ori: 0,
                inheritOri: !1
            }, {
                type: "barrel_01",
                pos: e.create(1.45, 17.7),
                scale: .85,
                ori: 0
            }, {
                type: "decal_vent_01",
                pos: e.create(5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "decal_vent_02",
                pos: e.create(5, -8.5),
                scale: 1,
                ori: 0
            }, {
                type: "tree_07",
                pos: e.create(6.75, -4.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_hatchet_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(-3, -4.4), e.create(13, 9))]
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-chamber-floor-01a.img",
                    pos: e.create(0, -4.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-chamber-floor-01b.img",
                    pos: e.create(0, 9.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-chamber-floor-01c.img",
                    pos: e.create(-15, -9.475),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-3, -4.4), e.create(13, 9.25))
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-chamber-ceiling-01.img",
                    pos: e.create(-3, -4.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(0, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(-8.5, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(8.5, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(10.5, -6),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(-10.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_14",
                pos: e.create(-16, -7.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_25",
                pos: e.create(-3.5, -14.5),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-2, 5),
                scale: 1,
                ori: 3
            }, {
                type: "barrel_01",
                pos: e.create(-5, .5),
                scale: .9,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(6.75, -10.75),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_06",
                pos: e.create(0, -11),
                scale: 1,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(7, -4),
                scale: 1,
                ori: 1
            }, {
                type: "bunker_hatchet_compartment_01",
                pos: e.create(-32, -1.5),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_hatchet_compartment_02",
                pos: e.create(-63.5, -4),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_hatchet_compartment_03",
                pos: e.create(-55, 20.5),
                scale: 1,
                ori: 0
            }]
        },
        bunker_hatchet_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(16, 13))]
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-compartment-floor-01.img",
                    pos: e.create(0, .5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(16, 12.5))
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-compartment-ceiling-01.img",
                    pos: e.create(0, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_13",
                pos: e.create(10.5, 2),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(3.5, 7),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(-3.5, 14.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_21",
                pos: e.create(-10.5, 6),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_32",
                pos: e.create(0, -13),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_14",
                pos: e.create(-16, -6),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_01",
                pos: e.create(16, -7.5),
                scale: 1,
                ori: 2
            }, {
                type: "lab_door_01",
                pos: e.create(-16, -7.5),
                scale: 1,
                ori: 2
            }, {
                type: "lab_door_01",
                pos: e.create(-9, 12.5),
                scale: 1,
                ori: 3
            }, {
                type: "metal_wall_ext_10",
                pos: e.create(8.65, -.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_10",
                pos: e.create(3, 5.15),
                scale: 1,
                ori: 1
            }, {
                type: "locker_01",
                pos: e.create(.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(5.5, 5),
                scale: 1,
                ori: 0
            }, {
                type: "locker_01",
                pos: e.create(8.5, 2),
                scale: 1,
                ori: 3
            }, {
                type: "locker_01",
                pos: e.create(8.5, -3),
                scale: 1,
                ori: 3
            }, {
                type: "barrel_01",
                pos: e.create(1.5, -.5),
                scale: .9,
                ori: 0
            }, {
                type: "fire_ext_01",
                pos: e.create(.5, -11.25),
                scale: .9,
                ori: 1
            }, {
                type: "couch_01",
                pos: e.create(-7.5, -2.5),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-7, 8.5),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }]
        },
        bunker_hatchet_compartment_02: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(16, 15))]
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-compartment-floor-02a.img",
                    pos: e.create(4, -8.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-compartment-floor-02b.img",
                    pos: e.create(.75, 6),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-compartment-floor-02c.img",
                    pos: e.create(-14, .5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-compartment-floor-02d.img",
                    pos: e.create(-6.27, 14.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(-.5, 0), e.create(16, 15))
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-compartment-ceiling-02.img",
                    pos: e.create(-.5, -.5),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_8",
                pos: e.create(11.5, -10.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_13",
                pos: e.create(10, 4.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(3, 9.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(6, -13),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_12",
                pos: e.create(-1.5, -16.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_7",
                pos: e.create(-9, -13.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_11",
                pos: e.create(-13, -8.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(-17, .5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_6",
                pos: e.create(-12.5, 6.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_25",
                pos: e.create(-11, 20.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_14",
                pos: e.create(-4, 15),
                scale: 1,
                ori: 0
            }, {
                type: "lab_door_01",
                pos: e.create(-5.5, 15),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-1.25, .5),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(2.75, -1.75),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_04",
                pos: e.create(3, 2.5),
                scale: .85,
                ori: 0
            }, {
                type: "crate_01",
                pos: e.create(-7.5, 11),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "control_panel_06",
                pos: e.create(2, 6.25),
                scale: 1,
                ori: 0
            }, {
                type: "control_panel_06",
                pos: e.create(6.75, 1.5),
                scale: 1,
                ori: 3
            }, {
                type: "loot_tier_hatchet_melee",
                pos: e.create(6.75, 6.25),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_12_2",
                pos: e.create(-10.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: "glass_wall_12_2",
                pos: e.create(-1.5, -10),
                scale: 1,
                ori: 1
            }, {
                type: "loot_tier_imperial_outfit",
                pos: e.create(-13.5, -4.5),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_pineapple_outfit",
                pos: e.create(-13.5, -1),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_tarkhany_outfit",
                pos: e.create(-13.5, 2.5),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_spetsnaz_outfit",
                pos: e.create(-5, -13),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_lumber_outfit",
                pos: e.create(-1.5, -13),
                scale: 1,
                ori: 0
            }, {
                type: "loot_tier_verde_outfit",
                pos: e.create(2, -13),
                scale: 1,
                ori: 0
            }]
        },
        bunker_hatchet_compartment_03: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(19, 10))]
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-compartment-floor-03a.img",
                    pos: e.create(-14.5, -8.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-compartment-floor-03b.img",
                    pos: e.create(-9, 3),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-compartment-floor-03c.img",
                    pos: e.create(5.5, -.25),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-hatchet-compartment-floor-03d.img",
                    pos: e.create(14.5, -3.75),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(19, 9.5))
                }],
                imgs: [{
                    sprite: "map-bunker-hatchet-compartment-ceiling-03.img",
                    pos: e.create(0, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_25",
                pos: e.create(1.5, -4),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(12, 3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_10",
                pos: e.create(1.5, 6.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_21",
                pos: e.create(-10.5, 10),
                scale: 1,
                ori: 1
            }, {
                type: "crate_01",
                pos: e.create(-16, -5),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_01",
                pos: e.create(3, -.5),
                scale: .85,
                ori: 0,
                ignoreMapSpawnReplacement: !0
            }, {
                type: "crate_06",
                pos: e.create(-11.75, -1.05),
                scale: .85,
                ori: 0
            }, {
                type: "crate_06",
                pos: e.create(-7, -1.05),
                scale: .85,
                ori: 0
            }, {
                type: "case_03",
                pos: e.create(-2.5, 6.5),
                scale: 1,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-7, 6.75),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-11, 5.5),
                scale: .9,
                ori: 0
            }]
        },
        bunker_structure_06: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(1, 6), e.create(7, 13.5))],
            layers: [{
                type: "bunker_hatchet_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_hatchet_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 8.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(-3, -3.7), e.create(13, 9.5)), n.createAabbExtents(e.create(-48.025, 6), e.create(32, 24.95))]
        },
        bunker_eye_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 7.5), e.create(2, 3.25)),
                    color: 6946816
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "container",
                    collision: [n.createAabbExtents(e.create(0, 7.75), e.create(2, 3.25))]
                }],
                imgs: [{
                    sprite: "map-bunker-generic-floor-01.img",
                    pos: e.create(0, 7.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 8.25), e.create(2, 3.25))
                }],
                imgs: [{
                    sprite: "map-bunker-generic-ceiling-01.img",
                    pos: e.create(0, 7.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            },
            puzzle: {
                name: "bunker_eye_01",
                completeUseType: "eye_door_01",
                completeOffDelay: 1,
                completeUseDelay: 2,
                errorResetDelay: 1,
                pieceResetDelay: 2,
                sound: {
                    fail: "door_error_01",
                    complete: ""
                }
            },
            mapObjects: [{
                type: "metal_wall_ext_6",
                pos: e.create(0, 5.3),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(-2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_7",
                pos: e.create(2.5, 8.5),
                scale: 1,
                ori: 0
            }, {
                type: "bush_01",
                pos: e.create(5, 23),
                scale: 1.2,
                ori: 0
            }]
        },
        vault_door_eye: Pe({
            material: "metal",
            hinge: e.create(1, 3.5),
            extents: e.create(1, 3.5),
            img: {
                sprite: "map-door-02.img"
            },
            door: {
                interactionRad: 1.5,
                openSpeed: 10,
                openOneWay: -1,
                openDelay: .1,
                openOnce: !0,
                canUse: !1,
                spriteAnchor: e.create(.2, 1),
                sound: {
                    open: "none",
                    close: "none",
                    change: "none"
                }
            }
        }),
        metal_wall_column_4x8: v({
            material: "metal",
            extents: e.create(2, 4)
        }),
        stone_wall_int_4: v({
            material: "stone",
            extents: e.create(.6, 2),
            img: V("map-wall-04-stone.img", 16777215)
        }),
        bunker_eye_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, -12), e.create(14, 17))]
                }],
                imgs: [{
                    sprite: "map-bunker-eye-chamber-floor-01a.img",
                    pos: e.create(0, -8.5),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-bunker-eye-chamber-floor-01b.img",
                    pos: e.create(13, -23),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, -12), e.create(14, 17))
                }],
                imgs: [{
                    sprite: "map-bunker-eye-chamber-ceiling-01.img",
                    pos: e.create(0, -12),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }],
                vision: {
                    dist: 5,
                    width: 3
                }
            },
            puzzle: {
                name: "bunker_eye_02",
                completeUseType: "vault_door_eye",
                completeOffDelay: 1,
                completeUseDelay: 5.25,
                errorResetDelay: 1,
                pieceResetDelay: 10,
                sound: {
                    fail: "door_error_01",
                    complete: "vault_change_02"
                }
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(0, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(3.5, 8),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(-7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(7, 5.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_34",
                pos: e.create(-10.5, -10),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(13, -26.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_4",
                pos: e.create(15.5, -23),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(13, -19.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_24",
                pos: e.create(10.5, -5),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_column_4x8",
                pos: e.create(-7.5, -29),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_column_4x8",
                pos: e.create(7.5, -29),
                scale: 1,
                ori: 1
            }, {
                type: "house_door_02",
                pos: e.create(-2, 5),
                scale: 1,
                ori: 3
            }, {
                type: "stone_04",
                pos: e.create(12, -23),
                scale: 1,
                ori: 2
            }, {
                type: "stone_wall_int_4",
                pos: e.create(9.4, -23),
                scale: 1,
                ori: 0
            }, {
                type: "recorder_01",
                pos: e.create(7.5, 2),
                scale: 1,
                ori: 2
            }, {
                type: "control_panel_02b",
                pos: e.create(-7, 1),
                scale: 1,
                ori: 1,
                puzzlePiece: "swine"
            }, {
                type: "control_panel_02b",
                pos: e.create(-7, -4),
                scale: 1,
                ori: 1,
                puzzlePiece: "egg"
            }, {
                type: "control_panel_02b",
                pos: e.create(-7, -9),
                scale: 1,
                ori: 1,
                puzzlePiece: "storm"
            }, {
                type: "control_panel_02b",
                pos: e.create(-7, -14),
                scale: 1,
                ori: 1,
                puzzlePiece: "caduceus"
            }, {
                type: "control_panel_02b",
                pos: e.create(-7, -19),
                scale: 1,
                ori: 1,
                puzzlePiece: "crossing"
            }, {
                type: "control_panel_02b",
                pos: e.create(-7, -24),
                scale: 1,
                ori: 1,
                puzzlePiece: "conch"
            }, {
                type: "control_panel_02b",
                pos: e.create(7, -4),
                scale: 1,
                ori: 3,
                puzzlePiece: "cloud"
            }, {
                type: "control_panel_02b",
                pos: e.create(7, -9),
                scale: 1,
                ori: 3,
                puzzlePiece: "hydra"
            }, {
                type: "control_panel_02b",
                pos: e.create(7, -14),
                scale: 1,
                ori: 3,
                puzzlePiece: "hatchet"
            }, {
                type: "control_panel_02b",
                pos: e.create(7, -19),
                scale: 1,
                ori: 3,
                puzzlePiece: "harpsichord"
            }, {
                type: "candle_lit_02",
                pos: e.create(0, -1.5),
                scale: .75,
                ori: 0
            }, {
                type: "candle_lit_02",
                pos: e.create(0, -11.5),
                scale: .75,
                ori: 0
            }, {
                type: "candle_lit_02",
                pos: e.create(0, -21.5),
                scale: .75,
                ori: 0
            }, {
                type: "vault_door_eye",
                pos: e.create(3.5, -30),
                scale: 1,
                ori: 1
            }, {
                type: "bunker_eye_compartment_01",
                pos: e.create(0, -39),
                scale: 1,
                ori: 0
            }]
        },
        bunker_eye_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "tile",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(10, 10))]
                }],
                imgs: [{
                    sprite: "map-bunker-eye-compartment-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(10, 10))
                }],
                imgs: [{
                    sprite: "map-bunker-eye-compartment-ceiling-01.img",
                    pos: e.create(0, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "metal_wall_ext_thicker_20",
                pos: e.create(10.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_20",
                pos: e.create(-10.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_18",
                pos: e.create(0, -10.5),
                scale: 1,
                ori: 1
            }, {
                type: "loot_tier_eye_02",
                pos: e.create(0, -3.5),
                scale: 1,
                ori: 0
            }, {
                type: "recorder_02",
                pos: e.create(-7, -7),
                scale: 1,
                ori: 2
            }]
        },
        bunker_structure_07: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            ori: 2,
            mapObstacleBounds: [n.createAabbExtents(e.create(-1, 8), e.create(7, 6)), n.createAabbExtents(e.create(-40, -70), e.create(2, 2)), n.createAabbExtents(e.create(40, -70), e.create(2, 2)), n.createAabbExtents(e.create(0, -30), e.create(2, 2)), n.createAabbExtents(e.create(5, 23), e.create(2, 2))],
            layers: [{
                type: "bunker_eye_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_eye_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, 8.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }],
            mask: [n.createAabbExtents(e.create(0, -22.2), e.create(13.5, 28))]
        },
        bunker_twins_stairs_01: zr({
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 1), e.create(2, 3.25)),
                    color: 10244368
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, .75), e.create(2, 3.25))
                }],
                imgs: [{
                    sprite: "map-bunker-twins-ceiling-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }]
            }
        }),
        bunker_twins_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [],
                imgs: [{
                    sprite: "map-bunker-vent-02.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                vision: {
                    dist: 5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: []
            },
            mapObjects: [{
                type: "bunker_twins_stairs_01",
                pos: e.create(5, 13.5),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_twins_stairs_01",
                pos: e.create(-5, -13.5),
                scale: 1,
                ori: 2
            }, {
                type: "bunker_twins_stairs_01",
                pos: e.create(-18.5, 0),
                scale: 1,
                ori: 1
            }, {
                type: "bunker_twins_stairs_01",
                pos: e.create(18.5, 0),
                scale: 1,
                ori: 3
            }]
        },
        cobalt_wall_int_4: v({
            material: "cobalt",
            extents: e.create(.6, 2),
            img: V("map-wall-04-cobalt.img", 16777215)
        }),
        bunker_twins_sublevel_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [{
                    type: "tile",
                    data: {
                        isBright: !0
                    },
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(16, 11))]
                }],
                imgs: [{
                    sprite: "map-bunker-twins-chamber-floor-01.img",
                    pos: e.create(0, 0),
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [{
                    zoomIn: n.createAabbExtents(e.create(0, 0), e.create(15.5, 10.5))
                }],
                imgs: [{
                    sprite: "map-bunker-twins-chamber-ceiling-01.img",
                    scale: 1,
                    alpha: 1,
                    tint: 6250335
                }]
            },
            mapObjects: [{
                type: "concrete_wall_ext_6",
                pos: e.create(5, 17.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(1.5, 14),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(8.5, 14),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(-7.5, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(12.5, 11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(16.5, 9),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-16.5, 9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(-5, -17.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-1.5, -14),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-8.5, -14),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_15",
                pos: e.create(7.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_5",
                pos: e.create(-12.5, -11.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-16.5, -9),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(16.5, -9),
                scale: 1,
                ori: 0
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(22.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(19, 3.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(19, -3.5),
                scale: 1,
                ori: 1
            }, {
                type: "concrete_wall_ext_6",
                pos: e.create(-22.5, 0),
                scale: 1,
                ori: 0
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-19, 3.5),
                scale: 1,
                ori: 1
            }, {
                type: "metal_wall_ext_thicker_8",
                pos: e.create(-19, -3.5),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_locked_01",
                pos: e.create(3, 10.5),
                scale: 1,
                ori: 3
            }, {
                type: "lab_door_locked_01",
                pos: e.create(-3, -10.5),
                scale: 1,
                ori: 1
            }, {
                type: "lab_door_locked_01",
                pos: e.create(15.5, 2),
                scale: 1,
                ori: 2
            }, {
                type: "lab_door_locked_01",
                pos: e.create(-15.5, -2),
                scale: 1,
                ori: 0
            }, {
                type: "class_shell_03",
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }, {
                type: "vat_01",
                pos: e.create(-6.75, 6.75),
                scale: 1,
                ori: 3
            }, {
                type: "vat_01",
                pos: e.create(-12.175, 6.75),
                scale: 1,
                ori: 3
            }, {
                type: "vat_01",
                pos: e.create(6.75, -6.75),
                scale: 1,
                ori: 1
            }, {
                type: "vat_01",
                pos: e.create(12.175, -6.75),
                scale: 1,
                ori: 1
            }, {
                type: "control_panel_03",
                pos: e.create(2.5, -8.25),
                scale: 1,
                ori: 2
            }, {
                type: "cobalt_wall_int_4",
                pos: e.create(-12.5, -10.385),
                scale: 1,
                ori: 3
            }, {
                type: "barrel_01",
                pos: e.create(-10, -8),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(-13, -6),
                scale: .9,
                ori: 0
            }, {
                type: "recorder_14",
                pos: e.create(-13.5, -8.75),
                scale: 1,
                ori: 1
            }, {
                type: "cobalt_wall_int_4",
                pos: e.create(12.5, 10.385),
                scale: 1,
                ori: 1
            }, {
                type: "barrel_01",
                pos: e.create(10, 8),
                scale: .9,
                ori: 0
            }, {
                type: "barrel_01",
                pos: e.create(13, 6),
                scale: .9,
                ori: 0
            }, {
                type: "bunker_twins_compartment_01",
                pos: e.create(-19.5, -18.5),
                scale: 1,
                ori: 0
            }, {
                type: "bunker_twins_compartment_01",
                pos: e.create(19.5, 18.5),
                scale: 1,
                ori: 2
            }]
        },
        bunker_twins_compartment_01: {
            type: "building",
            map: {
                display: !1,
                color: 6707790,
                scale: 1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 2,
            floor: {
                surfaces: [{
                    type: "bunker",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(0, 0))]
                }],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                imgs: [{
                    sprite: "map-bunker-hydra-compartment-ceiling-03.img",
                    pos: e.create(0, 0),
                    scale: 1,
                    alpha: 1,
                    tint: 6250335,
                    rot: 0,
                    mirrorX: !0
                }]
            },
            mapObjects: []
        },
        bunker_structure_09: {
            type: "structure",
            terrain: {
                grass: !0,
                beach: !1
            },
            ori: 0,
            mapObstacleBounds: [n.createAabbExtents(e.create(5, 15.4), e.create(3.5, 6)), n.createAabbExtents(e.create(-5, -15.4), e.create(3.5, 6)), n.createAabbExtents(e.create(20.5, 0), e.create(6, 3.5)), n.createAabbExtents(e.create(-20.5, 0), e.create(6, 3.5)), n.createAabbExtents(e.create(0, 0), e.create(2.5, 2.5))],
            layers: [{
                type: "bunker_twins_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bunker_twins_sublevel_01",
                pos: e.create(0, 0),
                ori: 0
            }],
            stairs: [{
                collision: n.createAabbExtents(e.create(5, 14.4), e.create(2, 2.6)),
                downDir: e.create(0, -1)
            }, {
                collision: n.createAabbExtents(e.create(-5, -14.4), e.create(2, 2.6)),
                downDir: e.create(0, 1)
            }, {
                collision: n.createAabbExtents(e.create(19.5, 0), e.create(2.6, 2)),
                downDir: e.create(-1, 0)
            }, {
                collision: n.createAabbExtents(e.create(-19.5, 0), e.create(2.6, 2)),
                downDir: e.create(1, 0)
            }],
            mask: [n.createAabbExtents(e.create(0, 0), e.create(16.75, 11.75))]
        },
        bridge_lg_under_column: v({
            material: "concrete",
            extents: e.create(2.5, 10)
        }),
        concrete_wall_column_5x4: v({
            material: "concrete",
            extents: e.create(2.5, 2)
        }),
        bridge_rail_3: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 2)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        bridge_rail_12: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 6.5)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        bridge_lg_01: ja({}),
        bridge_lg_01x: ja({
            ceiling: {
                imgs: [{
                    sprite: "map-building-bridge-lg-ceiling.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }, {
                    sprite: "map-snow-03.img",
                    pos: e.create(-10, -4),
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-07.img",
                    pos: e.create(8, 4),
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    rot: 0
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(15, -5.25),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 1
                }, {
                    sprite: "map-snow-06.img",
                    pos: e.create(-15, 5.25),
                    scale: .667,
                    alpha: 1,
                    tint: 16777215,
                    rot: 3
                }]
            }
        }),
        bridge_lg_under_01: {
            type: "building",
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: []
            },
            mapObjects: [{
                type: "bridge_lg_under_column",
                pos: e.create(-14, 0),
                scale: 1,
                ori: 0
            }, {
                type: "bridge_lg_under_column",
                pos: e.create(14, 0),
                scale: 1,
                ori: 0
            }]
        },
        bridge_lg_structure_01: {
            type: "structure",
            terrain: {
                bridge: {
                    nearbyWidthMult: 5
                }
            },
            layers: [{
                type: "bridge_lg_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bridge_lg_under_01",
                pos: e.create(0, 0),
                ori: 0,
                underground: !1
            }],
            bridgeLandBounds: [n.createAabbExtents(e.create(-34, 0), e.create(6, 9)), n.createAabbExtents(e.create(34, 0), e.create(6, 9))],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, -9.5), e.create(11.5, 1.5)),
                downDir: e.create(0, 1),
                lootOnly: !0
            }, {
                collision: n.createAabbExtents(e.create(0, 9.5), e.create(11.5, 1.5)),
                downDir: e.create(0, -1),
                lootOnly: !0
            }],
            mask: [n.createAabbExtents(e.create(0, 0), e.create(12, 8))]
        },
        bridge_xlg_under_column: v({
            material: "concrete",
            extents: e.create(2.5, 14)
        }),
        concrete_wall_column_9x4: v({
            material: "concrete",
            extents: e.create(4.5, 2)
        }),
        bridge_rail_20: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 10)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        bridge_xlg_01: function(r) {
            const t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: n.createAabbExtents(e.create(0, 0), e.create(38.5, 12)),
                        color: 2894124
                    }, {
                        collider: n.createAabbExtents(e.create(-16, -13), e.create(3, 1.5)),
                        color: 3618615
                    }, {
                        collider: n.createAabbExtents(e.create(16, -13), e.create(3, 1.5)),
                        color: 3618615
                    }, {
                        collider: n.createAabbExtents(e.create(-16, 13), e.create(3, 1.5)),
                        color: 3618615
                    }, {
                        collider: n.createAabbExtents(e.create(16, 13), e.create(3, 1.5)),
                        color: 3618615
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "asphalt",
                        collision: [n.createAabbExtents(e.create(0, 0), e.create(38.5, 12))]
                    }],
                    imgs: [{
                        sprite: "map-building-bridge-xlg-floor.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    zoomRegions: [],
                    imgs: []
                },
                mapObjects: [{
                    type: "bridge_rail_20",
                    pos: e.create(-26, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_20",
                    pos: e.create(-26, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_20",
                    pos: e.create(26, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_20",
                    pos: e.create(26, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_column_9x4",
                    pos: e.create(-16, -13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_9x4",
                    pos: e.create(-16, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_9x4",
                    pos: e.create(16, -13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_9x4",
                    pos: e.create(16, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(-9, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(-9, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(9, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: e.create(9, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: e.create(-5, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: e.create(-5, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: e.create(5, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: e.create(5, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: e.create(0, 11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: e.create(0, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "loot_tier_1",
                    pos: e.create(-25, 3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "loot_tier_1",
                    pos: e.create(25, 3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "sandbags_01",
                    pos: e.create(-14, 6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "sandbags_01",
                    pos: e.create(-20, -8),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: e.create(-14, -8),
                    scale: .9,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: e.create(0, 2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: e.create(0, -2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: e.create(0, 7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: e.create(0, -7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: e.create(-5, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: e.create(5, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: e.create(-27, -8),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: e.create(27, -8),
                    scale: 1,
                    ori: 0
                }, {
                    type: "sandbags_01",
                    pos: e.create(14, 6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "sandbags_01",
                    pos: e.create(20, -8),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: e.create(14, -8),
                    scale: .9,
                    ori: 0
                }]
            };
            return f.mergeDeep(t, r || {})
        }({}),
        bridge_xlg_under_01: {
            type: "building",
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: []
            },
            mapObjects: [{
                type: "bridge_xlg_under_column",
                pos: e.create(-14, 0),
                scale: 1,
                ori: 0
            }, {
                type: "bridge_xlg_under_column",
                pos: e.create(14, 0),
                scale: 1,
                ori: 0
            }]
        },
        bridge_xlg_structure_01: {
            type: "structure",
            terrain: {
                bridge: {
                    nearbyWidthMult: 5
                }
            },
            layers: [{
                type: "bridge_xlg_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bridge_xlg_under_01",
                pos: e.create(0, 0),
                ori: 0,
                underground: !1
            }],
            bridgeLandBounds: [n.createAabbExtents(e.create(-41, 0), e.create(5, 10)), n.createAabbExtents(e.create(41, 0), e.create(5, 10))],
            bridgeWaterBounds: [n.createAabbExtents(e.create(0, 0), e.create(5, 5))],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, -13.5), e.create(11.5, 1.5)),
                downDir: e.create(0, 1),
                lootOnly: !0
            }, {
                collision: n.createAabbExtents(e.create(0, 13.5), e.create(11.5, 1.5)),
                downDir: e.create(0, -1),
                lootOnly: !0
            }],
            mask: [n.createAabbExtents(e.create(0, 0), e.create(12, 12))]
        },
        bridge_rail_28: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.4, 14)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        brick_wall_ext_3_0_low: Ce({
            collision: n.createAabbExtents(e.create(0, 0), e.create(.5, 1.5)),
            img: {
                sprite: "",
                scale: .5,
                alpha: 1,
                tint: 4456448,
                zIdx: 10
            }
        }),
        brick_wall_ext_11_5: v({
            material: "brick",
            extents: e.create(.5, 5.75)
        }),
        bridge_md_01: {
            type: "building",
            map: {
                display: !0,
                shapes: [{
                    collider: n.createAabbExtents(e.create(0, 0), e.create(14, 3.5)),
                    color: 9322264
                }]
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 1,
            floor: {
                surfaces: [{
                    type: "shack",
                    collision: [n.createAabbExtents(e.create(0, 0), e.create(13.5, 3.5))]
                }],
                imgs: [{
                    sprite: "map-building-bridge-md-floor.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215
                }]
            },
            ceiling: {
                zoomRegions: [],
                imgs: []
            },
            mapObjects: [{
                type: "bridge_rail_28",
                pos: e.create(0, 3),
                scale: 1,
                ori: 1
            }, {
                type: "bridge_rail_28",
                pos: e.create(0, -3),
                scale: 1,
                ori: 1
            }, {
                type: "brick_wall_ext_3_0_low",
                pos: e.create(-6, 4.25),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3_0_low",
                pos: e.create(6, 4.25),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3_0_low",
                pos: e.create(-6, -4.25),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_3_0_low",
                pos: e.create(6, -4.25),
                scale: 1,
                ori: 0
            }, {
                type: z({
                    loot_tier_1: 1,
                    loot_tier_2: 1
                }),
                pos: e.create(0, 0),
                scale: 1,
                ori: 0
            }]
        },
        bridge_md_under_01: {
            type: "building",
            map: {
                display: !1
            },
            terrain: {
                grass: !0,
                beach: !1
            },
            zIdx: 0,
            floor: {
                surfaces: [],
                imgs: []
            },
            ceiling: {
                zoomRegions: [],
                vision: {
                    dist: 5.5,
                    width: 2.75,
                    linger: .5,
                    fadeRate: 6
                },
                imgs: []
            },
            mapObjects: [{
                type: "brick_wall_ext_11_5",
                pos: e.create(-6, 0),
                scale: 1,
                ori: 0
            }, {
                type: "brick_wall_ext_11_5",
                pos: e.create(6, 0),
                scale: 1,
                ori: 0
            }]
        },
        bridge_md_structure_01: {
            type: "structure",
            terrain: {
                bridge: {
                    nearbyWidthMult: 8
                }
            },
            mapObstacleBounds: [n.createAabbExtents(e.create(0, 0), e.create(23, 7))],
            layers: [{
                type: "bridge_md_01",
                pos: e.create(0, 0),
                ori: 0
            }, {
                type: "bridge_md_under_01",
                pos: e.create(0, 0),
                ori: 0,
                underground: !1
            }],
            bridgeLandBounds: [n.createAabbExtents(e.create(-15.5, 0), e.create(3, 5)), n.createAabbExtents(e.create(15.5, 0), e.create(3, 5))],
            stairs: [{
                collision: n.createAabbExtents(e.create(0, -4.75), e.create(5.5, 1.25)),
                downDir: e.create(0, 1),
                lootOnly: !0
            }, {
                collision: n.createAabbExtents(e.create(0, 4.75), e.create(5.5, 1.25)),
                downDir: e.create(0, -1),
                lootOnly: !0
            }],
            mask: [n.createAabbExtents(e.create(0, 0), e.create(6.5, 3.6))]
        },
        container_wall_top: v({
            material: "metal",
            extents: e.create(2.75, .4)
        }),
        container_wall_side: v({
            material: "metal",
            extents: e.create(.4, 5.5)
        }),
        container_wall_side_open: v({
            material: "metal",
            extents: e.create(.4, 6)
        }),
        container_01: gt({
            open: !1,
            tint: 2703694,
            ceilingSprite: "map-building-container-ceiling-01.img"
        }),
        container_02: gt({
            open: !1,
            tint: 2703694,
            ceilingSprite: "map-building-container-ceiling-02.img"
        }),
        container_03: gt({
            open: !1,
            tint: 2703694,
            ceilingSprite: "map-building-container-ceiling-03.img"
        }),
        container_04: gt({
            open: !0,
            tint: 3560807,
            ceilingSprite: "map-building-container-open-ceiling-01.img"
        }),
        container_01x: gt({
            open: !1,
            tint: 2703694,
            ceilingImgs: [{
                sprite: "map-building-container-ceiling-01.img",
                scale: .5,
                alpha: 1,
                tint: 2703694
            }, {
                sprite: "map-snow-05.img",
                pos: e.create(0, 3),
                scale: .6,
                alpha: 1,
                tint: 16777215,
                rot: 0
            }]
        }),
        container_06: gt({
            open: !1,
            tint: 12227840,
            ceilingSprite: "map-building-container-ceiling-01.img",
            loot_spawner_01: "loot_tier_sv98",
            loot_spawner_02: "loot_tier_scopes_sniper",
            mapDisplayType: "container_01"
        }),
        loot_tier_1: {
            type: "loot_spawner",
            loot: [x("tier_world", 1, 1)],
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            }
        },
        loot_tier_2: {
            type: "loot_spawner",
            loot: [x("tier_container", 1, 1)],
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            }
        },
        loot_tier_beach: {
            type: "loot_spawner",
            loot: [x("tier_world", 1, 1)],
            terrain: {
                grass: !1,
                beach: !0
            }
        },
        loot_tier_surviv: {
            type: "loot_spawner",
            loot: [x("tier_surviv", 1, 1)],
            terrain: {
                grass: !0,
                beach: !0,
                riverShore: !0
            }
        },
        loot_tier_vault_floor: {
            type: "loot_spawner",
            loot: [x("tier_vault_floor", 1, 1)]
        },
        loot_tier_police_floor: {
            type: "loot_spawner",
            loot: [x("tier_police_floor", 1, 1)]
        },
        loot_tier_mansion_floor: {
            type: "loot_spawner",
            loot: [x("tier_mansion_floor", 1, 1)]
        },
        loot_tier_sv98: {
            type: "loot_spawner",
            loot: [x("tier_sv98", 1, 1)]
        },
        loot_tier_scopes_sniper: {
            type: "loot_spawner",
            loot: [x("tier_scopes_sniper", 1, 1)]
        },
        loot_tier_woodaxe: {
            type: "loot_spawner",
            loot: [x("tier_woodaxe", 1, 1)]
        },
        loot_tier_fireaxe: {
            type: "loot_spawner",
            loot: [x("tier_fireaxe", 1, 1)]
        },
        loot_tier_stonehammer: {
            type: "loot_spawner",
            loot: [x("tier_stonehammer", 1, 1)]
        },
        loot_tier_sledgehammer: {
            type: "loot_spawner",
            loot: [x("tier_sledgehammer", 1, 1)]
        },
        loot_tier_hatchet_melee: {
            type: "loot_spawner",
            loot: [x("tier_hatchet_melee", 1, 1)]
        },
        loot_tier_club_melee: {
            type: "loot_spawner",
            loot: [x("tier_club_melee", 1, 1)]
        },
        loot_tier_leaf_pile: {
            type: "loot_spawner",
            loot: [x("tier_leaf_pile", 1, 1)]
        },
        loot_tier_islander_outfit: {
            type: "loot_spawner",
            loot: [x("tier_islander_outfit", 1, 1)]
        },
        loot_tier_verde_outfit: {
            type: "loot_spawner",
            loot: [x("tier_verde_outfit", 1, 1)]
        },
        loot_tier_lumber_outfit: {
            type: "loot_spawner",
            loot: [x("tier_lumber_outfit", 1, 1)]
        },
        loot_tier_imperial_outfit: {
            type: "loot_spawner",
            loot: [x("tier_imperial_outfit", 1, 1)]
        },
        loot_tier_pineapple_outfit: {
            type: "loot_spawner",
            loot: [x("tier_pineapple_outfit", 1, 1)]
        },
        loot_tier_tarkhany_outfit: {
            type: "loot_spawner",
            loot: [x("tier_tarkhany_outfit", 1, 1)]
        },
        loot_tier_spetsnaz_outfit: {
            type: "loot_spawner",
            loot: [x("tier_spetsnaz_outfit", 1, 1)]
        },
        loot_tier_eye_01: {
            type: "loot_spawner",
            loot: [x("tier_eye_01", 1, 1)]
        },
        loot_tier_eye_02: {
            type: "loot_spawner",
            loot: [x("tier_eye_02", 1, 1)]
        },
        loot_tier_saloon: {
            type: "loot_spawner",
            loot: [x("tier_saloon", 1, 1)]
        },
        loot_tier_chrys_01: {
            type: "loot_spawner",
            loot: [x("tier_chrys_01", 1, 1)]
        },
        loot_tier_chrys_02: {
            type: "loot_spawner",
            loot: [x("tier_chrys_02", 1, 1)]
        },
        loot_tier_chrys_02b: {
            type: "loot_spawner",
            loot: [x("tier_chrys_02b", 1, 1)]
        },
        loot_tier_chrys_03: {
            type: "loot_spawner",
            loot: [x("tier_chrys_03", 1, 1)]
        },
        loot_tier_airdrop_armor: {
            type: "loot_spawner",
            loot: [x("tier_airdrop_armor", 1, 1)]
        },
        loot_tier_helmet_forest: {
            type: "loot_spawner",
            loot: [x("tier_forest_helmet", 1, 1)],
            terrain: {
                grass: !0,
                beach: !1
            }
        },
        loot_tier_helmet_potato: {
            type: "loot_spawner",
            loot: [x("tier_potato_helmet", 1, 1)],
            terrain: {
                grass: !0,
                beach: !1
            }
        },
        loot_tier_perk_test: {
            type: "loot_spawner",
            loot: [R("explosive", 1), R("splinter", 1), R("scavenger_adv", 1)],
            terrain: {
                grass: !0,
                beach: !1
            }
        },
        loot_tier_sniper_test: {
            type: "loot_spawner",
            loot: [R("l86", 1), R("svd", 1), R("vss", 1), R("blr", 1), R("scarssr", 1)],
            terrain: {
                grass: !0,
                beach: !1
            }
        },
        loot_tier_loot_test: {
            type: "loot_spawner",
            loot: [R("explosive", 1), R("backpack03", 1), R("chest03", 1), R("helmet03", 1), R("scavenger_adv", 1), R("explosive", 1), R("splinter", 1), R("p30l", 1), R("p30l", 1), R("p30l", 1), R("p30l", 1), R("deagle", 1), R("deagle", 1), R("deagle", 1), R("ots38_dual", 1)],
            terrain: {
                grass: !0,
                beach: !1
            }
        },
        decal_barrel_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            img: {
                sprite: "map-barrel-res-01.img",
                scale: .24,
                alpha: 1,
                tint: 0,
                zIdx: 9
            }
        },
        decal_frag_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            img: {
                sprite: "map-barrel-res-01.img",
                scale: .2,
                alpha: .8,
                tint: 0,
                zIdx: 11
            }
        },
        decal_frag_small_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            img: {
                sprite: "map-barrel-res-01.img",
                scale: .12,
                alpha: .8,
                tint: 2105376,
                zIdx: 11
            }
        },
        decal_rounds_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            lifetime: {
                min: 2,
                max: 2.5
            },
            img: {
                sprite: "map-barrel-res-01.img",
                scale: .1,
                alpha: .8,
                tint: 3150346,
                zIdx: 11
            }
        },
        decal_bomb_iron_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            lifetime: {
                min: 6,
                max: 10
            },
            fadeChance: .6,
            img: {
                sprite: "map-barrel-res-01.img",
                scale: .2,
                alpha: .8,
                tint: 0,
                zIdx: 11
            }
        },
        decal_smoke_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            img: {
                sprite: "map-smoke-res.img",
                scale: .2,
                alpha: .5,
                tint: 16777215,
                zIdx: 11
            }
        },
        decal_snowball_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            lifetime: 5,
            fadeChance: 1,
            img: {
                sprite: "map-snowball-res.img",
                scale: .2,
                alpha: .25,
                tint: 16777215,
                zIdx: 11
            }
        },
        decal_potato_explosion: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            lifetime: 5,
            fadeChance: 1,
            img: {
                sprite: "map-potato-res.img",
                scale: .2,
                alpha: .25,
                tint: 16777215,
                zIdx: 11
            }
        },
        decal_vent_01: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-bunker-vent-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_vent_02: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-bunker-vent-02.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_vent_03: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-bunker-vent-03.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_hydra_01: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 3),
            height: 0,
            img: {
                sprite: "map-bunker-hydra-floor-04.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_pipes_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1, 4.5)),
            height: 1,
            img: {
                sprite: "map-pipes-01.img",
                scale: .5,
                alpha: .96,
                tint: 16777215,
                zIdx: 60
            }
        },
        decal_pipes_02: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(4, 3)),
            height: 1,
            img: {
                sprite: "map-pipes-02.img",
                scale: .5,
                alpha: .96,
                tint: 16777215,
                zIdx: 60
            }
        },
        decal_pipes_03: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(10.5, 4)),
            height: 1,
            img: {
                sprite: "map-pipes-03.img",
                scale: .5,
                alpha: .96,
                tint: 16777215,
                zIdx: 60
            }
        },
        decal_pipes_04: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1, 5.5)),
            height: 1,
            img: {
                sprite: "map-pipes-04.img",
                scale: .5,
                alpha: .96,
                tint: 16777215,
                zIdx: 60
            }
        },
        decal_pipes_05: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1, 3.5)),
            height: 1,
            img: {
                sprite: "map-pipes-05.img",
                scale: .5,
                alpha: .96,
                tint: 16777215,
                zIdx: 60
            }
        },
        decal_initiative_01: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 3),
            height: 0,
            img: {
                sprite: "map-decal-initiative.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_web_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            height: 1,
            img: {
                sprite: "map-web-01.img",
                scale: .5,
                alpha: .75,
                tint: 16777215,
                zIdx: 60
            }
        },
        decal_light_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(3.25, 3.25)),
            height: 1,
            lifetime: 1e10,
            img: {
                sprite: "map-light-01.img",
                scale: 1,
                alpha: .5,
                tint: 16751616,
                zIdx: 60,
                flicker: !0,
                flickerMin: .9,
                flickerMax: 1.1,
                flickerRate: .5,
                ignoreAdjust: !0
            }
        },
        decal_light_02: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2.5)),
            height: 1,
            lifetime: 1e10,
            img: {
                sprite: "map-light-01.img",
                scale: .75,
                alpha: .5,
                tint: 16760397,
                zIdx: 60,
                flicker: !0,
                flickerMin: .8,
                flickerMax: 1.2,
                flickerRate: .2,
                ignoreAdjust: !0
            }
        },
        decal_light_03: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2.5)),
            height: 1,
            lifetime: 1e10,
            img: {
                sprite: "map-light-01.img",
                scale: .75,
                alpha: .5,
                tint: 8585216,
                zIdx: 60,
                flicker: !0,
                flickerMin: .8,
                flickerMax: 1.2,
                flickerRate: .2,
                ignoreAdjust: !0
            }
        },
        decal_light_04: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.5, 2.5)),
            height: 1,
            lifetime: 1e10,
            img: {
                sprite: "map-light-01.img",
                scale: .75,
                alpha: .5,
                tint: 16734244,
                zIdx: 60,
                flicker: !0,
                flickerMin: .5,
                flickerMax: .75,
                flickerRate: .4,
                ignoreAdjust: !0
            }
        },
        decal_blood_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            height: 0,
            img: {
                sprite: "part-splat-01.img",
                scale: .25,
                alpha: .95,
                tint: 4001294,
                zIdx: 0
            }
        },
        decal_blood_02: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            height: 0,
            img: {
                sprite: "part-splat-02.img",
                scale: .25,
                alpha: .95,
                tint: 4001294,
                zIdx: 0
            }
        },
        decal_blood_03: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(1.5, 1.5)),
            height: 0,
            img: {
                sprite: "part-splat-03.img",
                scale: .25,
                alpha: .95,
                tint: 4001294,
                zIdx: 0
            }
        },
        decal_chrys_01: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 1,
            img: {
                sprite: "map-bunker-vent-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 3
            }
        },
        decal_oil_01: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-decal-oil-01.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_oil_02: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-decal-oil-02.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_oil_03: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-decal-oil-03.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_oil_04: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            img: {
                sprite: "map-decal-oil-04.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_oil_05: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 1),
            height: 0,
            img: {
                sprite: "map-decal-oil-05.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_oil_06: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 2),
            height: 0,
            img: {
                sprite: "map-decal-oil-06.img",
                scale: .5,
                alpha: 1,
                tint: 16777215,
                zIdx: 0
            }
        },
        decal_bathhouse_pool_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(9, 15)),
            height: 1,
            surface: {
                type: "water",
                data: {
                    waterColor: 5157572,
                    rippleColor: 10478319
                }
            },
            img: {
                sprite: "map-bathhouse-pool-01.img",
                scale: 8,
                alpha: .5,
                tint: 52721,
                zIdx: 5
            },
            gore: {
                fade: {
                    start: 0,
                    end: 4,
                    pow: .5,
                    speed: 2
                },
                tint: 7667727,
                alpha: .85,
                waterColor: 8529201,
                rippleColor: 11490399
            }
        },
        decal_club_01: {
            type: "decal",
            collision: n.createCircle(e.create(0, 0), 4),
            height: 0,
            img: {
                sprite: "map-decal-club-01.img",
                scale: 1,
                alpha: 1,
                tint: 16777215,
                zIdx: 4
            }
        },
        decal_club_02: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(4, 10.5)),
            height: 1,
            img: {
                sprite: "map-decal-club-02.img",
                scale: 1,
                alpha: 0,
                tint: 16777215,
                zIdx: 4
            },
            gore: {
                fade: {
                    start: 4,
                    end: 6,
                    pow: 3.25,
                    speed: .5
                },
                alpha: 1
            }
        },
        decal_plank_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(2.25, 2.25)),
            height: 0,
            img: {
                sprite: "part-plank-01.img",
                scale: .5,
                alpha: 1,
                tint: 4327436,
                zIdx: 9
            }
        },
        decal_flyer_01: {
            type: "decal",
            collision: n.createAabbExtents(e.create(0, 0), e.create(.5, 1)),
            height: 0,
            img: {
                sprite: "map-decal-flyer-01.img",
                scale: .6,
                alpha: .667,
                tint: 16777215,
                zIdx: 4
            }
        }
    };
    var ie = function(t, a, i) {
        var o = t instanceof ArrayBuffer || typeof Buffer < "u" && t instanceof Buffer;
        if (!o)
            throw new Error("Must specify a valid ArrayBuffer or Buffer.");
        a = a || 0,
        i = i || t.byteLength || t.length,
        this._view = new Uint8Array(t,a,i)
    };
    ie._scratch = new DataView(new ArrayBuffer(8));
    Object.defineProperty(ie.prototype, "buffer", {
        get: function() {
            return Buffer.from(this._view.buffer)
        },
        enumerable: !0,
        configurable: !1
    });
    Object.defineProperty(ie.prototype, "byteLength", {
        get: function() {
            return this._view.length
        },
        enumerable: !0,
        configurable: !1
    });
    ie.prototype._setBit = function(r, t) {
        t ? this._view[r >> 3] |= 1 << (r & 7) : this._view[r >> 3] &= ~(1 << (r & 7))
    }
    ;
    ie.prototype.getBits = function(r, t, a) {
        var i = this._view.length * 8 - r;
        if (t > i)
            throw new Error(`Cannot get ${t} bit(s) from offset ${r}, ${i} available`);
        for (var o = 0, s = 0; s < t; ) {
            var l = t - s
              , c = r & 7
              , m = this._view[r >> 3]
              , h = k.min(l, 8 - c)
              , u = (1 << h) - 1
              , g = m >> c & u;
            o |= g << s,
            r += h,
            s += h
        }
        return a ? (t !== 32 && o & 1 << t - 1 && (o |= -1 ^ (1 << t) - 1),
        o) : o >>> 0
    }
    ;
    ie.prototype.setBits = function(r, t, a) {
        var i = this._view.length * 8 - r;
        if (a > i)
            throw new Error(`Cannot set ${a} bit(s) from offset ${r}, ${i} available`);
        for (var o = 0; o < a; ) {
            var s;
            a - o >= 8 && (r & 7) === 0 ? (this._view[r >> 3] = t & 255,
            s = 8) : (this._setBit(r, t & 1),
            s = 1),
            t = t >> s,
            r += s,
            o += s
        }
    }
    ;
    ie.prototype.getBoolean = function(r) {
        return this.getBits(r, 1, !1) !== 0
    }
    ;
    ie.prototype.getInt8 = function(r) {
        return this.getBits(r, 8, !0)
    }
    ;
    ie.prototype.getUint8 = function(r) {
        return this.getBits(r, 8, !1)
    }
    ;
    ie.prototype.getInt16 = function(r) {
        return this.getBits(r, 16, !0)
    }
    ;
    ie.prototype.getUint16 = function(r) {
        return this.getBits(r, 16, !1)
    }
    ;
    ie.prototype.getInt32 = function(r) {
        return this.getBits(r, 32, !0)
    }
    ;
    ie.prototype.getUint32 = function(r) {
        return this.getBits(r, 32, !1)
    }
    ;
    ie.prototype.getFloat32 = function(r) {
        return ie._scratch.setUint32(0, this.getUint32(r)),
        ie._scratch.getFloat32(0)
    }
    ;
    ie.prototype.getFloat64 = function(r) {
        return ie._scratch.setUint32(0, this.getUint32(r)),
        ie._scratch.setUint32(4, this.getUint32(r + 32)),
        ie._scratch.getFloat64(0)
    }
    ;
    ie.prototype.setBoolean = function(r, t) {
        this.setBits(r, t ? 1 : 0, 1)
    }
    ;
    ie.prototype.setInt8 = ie.prototype.setUint8 = function(r, t) {
        this.setBits(r, t, 8)
    }
    ;
    ie.prototype.setInt16 = ie.prototype.setUint16 = function(r, t) {
        this.setBits(r, t, 16)
    }
    ;
    ie.prototype.setInt32 = ie.prototype.setUint32 = function(r, t) {
        this.setBits(r, t, 32)
    }
    ;
    ie.prototype.setFloat32 = function(r, t) {
        ie._scratch.setFloat32(0, t),
        this.setBits(r, ie._scratch.getUint32(0), 32)
    }
    ;
    ie.prototype.setFloat64 = function(r, t) {
        ie._scratch.setFloat64(0, t),
        this.setBits(r, ie._scratch.getUint32(0), 32),
        this.setBits(r + 32, ie._scratch.getUint32(4), 32)
    }
    ;
    ie.prototype.getArrayBuffer = function(r, t) {
        for (var a = new Uint8Array(t), i = 0; i < t; i++)
            a[i] = this.getUint8(r + i * 8);
        return a
    }
    ;
    var rt = function(t, a) {
        return function() {
            if (this._index + a > this._length)
                throw new Error("Trying to read past the end of the stream");
            var i = this._view[t](this._index);
            return this._index += a,
            i
        }
    }
      , at = function(t, a) {
        return function(i) {
            this._view[t](this._index, i),
            this._index += a
        }
    };
    function Ms(r, t) {
        return ao(r, t, !1)
    }
    function Cs(r, t) {
        return ao(r, t, !0)
    }
    function ao(r, t, a) {
        if (t === 0)
            return "";
        var i = 0
          , o = []
          , s = !0
          , l = !!t;
        for (t || (t = Math.floor((r._length - r._index) / 8)); i < t; ) {
            var c = r.readUint8();
            if (c === 0 && (s = !1,
            !l))
                break;
            s && o.push(c),
            i++
        }
        var m = String.fromCharCode.apply(null, o);
        if (a)
            try {
                return decodeURIComponent(escape(m))
            } catch {
                return m
            }
        else
            return m
    }
    function Ps(r, t, a) {
        for (var i = a || t.length + 1, o = 0; o < i; o++)
            r.writeUint8(o < t.length ? t.charCodeAt(o) : 0)
    }
    function As(r, t, a) {
        for (var i = Ds(t), o = a || i.length + 1, s = 0; s < o; s++)
            r.writeUint8(s < i.length ? i[s] : 0)
    }
    function Ds(r) {
        var t = [], a, i;
        for (a = 0; a < r.length; a++)
            i = r.charCodeAt(a),
            i <= 127 ? t.push(i) : i <= 2047 ? (t.push(i >> 6 | 192),
            t.push(i & 63 | 128)) : i <= 65535 ? (t.push(i >> 12 | 224),
            t.push(i >> 6 & 63 | 128),
            t.push(i & 63 | 128)) : (t.push(i >> 18 | 240),
            t.push(i >> 12 & 63 | 128),
            t.push(i >> 6 & 63 | 128),
            t.push(i & 63 | 128));
        return t
    }
    var oe = function(t, a, i) {
        var o = t instanceof ArrayBuffer || typeof Buffer < "u" && t instanceof Buffer;
        if (!(t instanceof ie) && !o)
            throw new Error("Must specify a valid BitView, ArrayBuffer or Buffer");
        o ? this._view = new ie(t,a,i) : this._view = t,
        this._index = 0,
        this._startIndex = 0,
        this._length = this._view.byteLength * 8
    };
    Object.defineProperty(oe.prototype, "index", {
        get: function() {
            return this._index - this._startIndex
        },
        set: function(t) {
            this._index = t + this._startIndex
        },
        enumerable: !0,
        configurable: !0
    });
    Object.defineProperty(oe.prototype, "length", {
        get: function() {
            return this._length - this._startIndex
        },
        set: function(t) {
            this._length = t + this._startIndex
        },
        enumerable: !0,
        configurable: !0
    });
    Object.defineProperty(oe.prototype, "bitsLeft", {
        get: function() {
            return this._length - this._index
        },
        enumerable: !0,
        configurable: !0
    });
    Object.defineProperty(oe.prototype, "byteIndex", {
        get: function() {
            return Math.ceil(this._index / 8)
        },
        set: function(t) {
            this._index = t * 8
        },
        enumerable: !0,
        configurable: !0
    });
    Object.defineProperty(oe.prototype, "buffer", {
        get: function() {
            return this._view.buffer
        },
        enumerable: !0,
        configurable: !1
    });
    Object.defineProperty(oe.prototype, "view", {
        get: function() {
            return this._view
        },
        enumerable: !0,
        configurable: !1
    });
    oe.prototype.readBits = function(r, t) {
        var a = this._view.getBits(this._index, r, t);
        return this._index += r,
        a
    }
    ;
    oe.prototype.writeBits = function(r, t) {
        this._view.setBits(this._index, r, t),
        this._index += t
    }
    ;
    oe.prototype.readBoolean = rt("getBoolean", 1);
    oe.prototype.readInt8 = rt("getInt8", 8);
    oe.prototype.readUint8 = rt("getUint8", 8);
    oe.prototype.readInt16 = rt("getInt16", 16);
    oe.prototype.readUint16 = rt("getUint16", 16);
    oe.prototype.readInt32 = rt("getInt32", 32);
    oe.prototype.readUint32 = rt("getUint32", 32);
    oe.prototype.readFloat32 = rt("getFloat32", 32);
    oe.prototype.readFloat64 = rt("getFloat64", 64);
    oe.prototype.writeBoolean = at("setBoolean", 1);
    oe.prototype.writeInt8 = at("setInt8", 8);
    oe.prototype.writeUint8 = at("setUint8", 8);
    oe.prototype.writeInt16 = at("setInt16", 16);
    oe.prototype.writeUint16 = at("setUint16", 16);
    oe.prototype.writeInt32 = at("setInt32", 32);
    oe.prototype.writeUint32 = at("setUint32", 32);
    oe.prototype.writeFloat32 = at("setFloat32", 32);
    oe.prototype.writeFloat64 = at("setFloat64", 64);
    oe.prototype.readASCIIString = function(r) {
        return Ms(this, r)
    }
    ;
    oe.prototype.readUTF8String = function(r) {
        return Cs(this, r)
    }
    ;
    oe.prototype.writeASCIIString = function(r, t) {
        Ps(this, r, t)
    }
    ;
    oe.prototype.writeUTF8String = function(r, t) {
        As(this, r, t)
    }
    ;
    oe.prototype.readBitStream = function(r) {
        var t = new oe(this._view);
        return t._startIndex = this._index,
        t._index = this._index,
        t.length = r,
        this._index += r,
        t
    }
    ;
    oe.prototype.writeBitStream = function(r, t) {
        t || (t = r.bitsLeft);
        for (var a; t > 0; )
            a = k.min(t, 32),
            this.writeBits(r.readBits(a), a),
            t -= a
    }
    ;
    oe.prototype.readArrayBuffer = function(r) {
        var t = this._view.getArrayBuffer(this._index, r);
        return this._index += r * 8,
        t
    }
    ;
    oe.prototype.writeArrayBuffer = function(r, t) {
        this.writeBitStream(new oe(r), t * 8)
    }
    ;
    class Os {
        protocol = 0;
        matchPriv = "";
        loadoutPriv = "";
        questPriv = "";
        name = "";
        useTouch = !1;
        isMobile = !1;
        bot = !1;
        loadout = {
            outfit: "",
            melee: "",
            heal: "",
            boost: "",
            emotes: []
        };
        deserialize(t) {
            this.protocol = t.readUint32(),
            this.matchPriv = t.readString(),
            this.loadoutPriv = t.readString(),
            this.questPriv = t.readString(),
            this.name = t.readString(ae.PlayerNameMaxLen),
            this.useTouch = t.readBoolean(),
            this.isMobile = t.readBoolean(),
            this.bot = t.readBoolean(),
            this.loadout.outfit = t.readGameType(),
            this.loadout.melee = t.readGameType(),
            this.loadout.heal = t.readGameType(),
            this.loadout.boost = t.readGameType(),
            this.loadout.emotes = [];
            const a = t.readUint8();
            for (let i = 0; i < a; i++) {
                const o = t.readGameType();
                this.loadout.emotes.push(o)
            }
            t.readAlignToNextByte()
        }
        serialize(t) {
            t.writeUint32(this.protocol),
            t.writeString(this.matchPriv),
            t.writeString(this.loadoutPriv),
            t.writeString(this.questPriv),
            t.writeString(this.name, ae.PlayerNameMaxLen),
            t.writeBoolean(this.useTouch),
            t.writeBoolean(this.isMobile),
            t.writeBoolean(this.bot),
            t.writeGameType(this.loadout.outfit),
            t.writeGameType(this.loadout.melee),
            t.writeGameType(this.loadout.heal),
            t.writeGameType(this.loadout.boost),
            t.writeUint8(this.loadout.emotes.length);
            for (const a of this.loadout.emotes)
                t.writeGameType(a);
            t.writeAlignToNextByte()
        }
    }
    class Es {
        reason = "";
        serialize(t) {
            t.writeString(this.reason)
        }
        deserialize(t) {
            this.reason = t.readString()
        }
    }
    class Ja {
        seq = 0;
        moveLeft = !1;
        moveRight = !1;
        moveUp = !1;
        moveDown = !1;
        shootStart = !1;
        shootHold = !1;
        portrait = !1;
        touchMoveActive = !1;
        touchMoveDir = e.create(1, 0);
        touchMoveLen = 255;
        toMouseDir = e.create(1, 0);
        toMouseLen = 0;
        inputs = [];
        useItem = "";
        addInput(t) {
            this.inputs.length < 7 && !this.inputs.includes(t) && this.inputs.push(t)
        }
        serialize(t) {
            t.writeUint8(this.seq),
            t.writeBoolean(this.moveLeft),
            t.writeBoolean(this.moveRight),
            t.writeBoolean(this.moveUp),
            t.writeBoolean(this.moveDown),
            t.writeBoolean(this.shootStart),
            t.writeBoolean(this.shootHold),
            t.writeBoolean(this.portrait),
            t.writeBoolean(this.touchMoveActive),
            this.touchMoveActive && (t.writeUnitVec(this.touchMoveDir, 8),
            t.writeUint8(this.touchMoveLen)),
            t.writeUnitVec(this.toMouseDir, 10),
            t.writeFloat(this.toMouseLen, 0, ae.MouseMaxDist, 8),
            t.writeBits(this.inputs.length, 4);
            for (let a = 0; a < this.inputs.length; a++)
                t.writeUint8(this.inputs[a]);
            t.writeGameType(this.useItem),
            t.writeBits(0, 6)
        }
        deserialize(t) {
            this.seq = t.readUint8(),
            this.moveLeft = t.readBoolean(),
            this.moveRight = t.readBoolean(),
            this.moveUp = t.readBoolean(),
            this.moveDown = t.readBoolean(),
            this.shootStart = t.readBoolean(),
            this.shootHold = t.readBoolean(),
            this.portrait = t.readBoolean(),
            this.touchMoveActive = t.readBoolean(),
            this.touchMoveActive && (this.touchMoveDir = t.readUnitVec(8),
            this.touchMoveLen = t.readUint8()),
            this.toMouseDir = t.readUnitVec(10),
            this.toMouseLen = t.readFloat(0, ae.MouseMaxDist, 8);
            const a = t.readBits(4);
            for (let i = 0; i < a; i++)
                this.inputs.push(t.readUint8());
            this.useItem = t.readGameType(),
            t.readBits(6)
        }
    }
    class Bs {
        teamMode;
        playerId = 0;
        started = !1;
        emotes = [];
        serialize(t) {
            t.writeUint8(this.teamMode),
            t.writeUint16(this.playerId),
            t.writeBoolean(this.started),
            t.writeUint8(this.emotes.length);
            for (let a = 0; a < this.emotes.length; a++)
                t.writeGameType(this.emotes[a]);
            t.writeAlignToNextByte()
        }
        deserialize(t) {
            this.teamMode = t.readUint8(),
            this.playerId = t.readUint16(),
            this.started = t.readBoolean();
            const a = t.readUint8();
            for (let i = 0; i < a; i++) {
                const o = t.readGameType();
                this.emotes.push(o)
            }
            t.readAlignToNextByte()
        }
    }
    var ve = (r => (r[r.Invalid = 0] = "Invalid",
    r[r.Player = 1] = "Player",
    r[r.Obstacle = 2] = "Obstacle",
    r[r.Loot = 3] = "Loot",
    r[r.LootSpawner = 4] = "LootSpawner",
    r[r.DeadBody = 5] = "DeadBody",
    r[r.Building = 6] = "Building",
    r[r.Structure = 7] = "Structure",
    r[r.Decal = 8] = "Decal",
    r[r.Projectile = 9] = "Projectile",
    r[r.Smoke = 10] = "Smoke",
    r[r.Airdrop = 11] = "Airdrop",
    r))(ve || {});
    const jr = {
        1: {
            serializedFullSize: 32,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeUnitVec(t.dir, 8)
            }
            ,
            serializeFull: (r, t) => {
                if (r.writeGameType(t.outfit),
                r.writeGameType(t.backpack),
                r.writeGameType(t.helmet),
                r.writeGameType(t.chest),
                r.writeGameType(t.activeWeapon),
                r.writeBits(t.layer, 2),
                r.writeBoolean(t.dead),
                r.writeBoolean(t.downed),
                r.writeBits(t.animType, 3),
                r.writeBits(t.animSeq, 3),
                r.writeBits(t.actionType, 3),
                r.writeBits(t.actionSeq, 3),
                r.writeBoolean(t.wearingPan),
                r.writeBoolean(t.healEffect),
                r.writeBoolean(t.frozen),
                r.writeBits(t.frozenOri, 2),
                r.writeBoolean(t.hasteType !== tt.None),
                t.hasteType !== tt.None && (r.writeBits(t.hasteType, 3),
                r.writeBits(t.hasteSeq, 3)),
                r.writeBoolean(t.actionItem !== ""),
                t.actionItem !== "" && r.writeGameType(t.actionItem),
                r.writeBoolean(t.hasScale),
                t.hasScale && r.writeFloat(t.scale, ae.PlayerMinScale, ae.PlayerMaxScale, 8),
                r.writeBoolean(t.role !== ""),
                t.role !== "" && r.writeGameType(t.role),
                r.writeBoolean(t.hasPerks),
                t.hasPerks) {
                    const a = k.min(t.perks.length, ae.MaxPerks - 1);
                    r.writeBits(a, 3);
                    for (let i = 0; i < a; i++) {
                        const o = t.perks[i];
                        r.writeGameType(o.type),
                        r.writeBoolean(o.droppable)
                    }
                }
                r.writeAlignToNextByte()
            }
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.dir = r.readUnitVec(8)
            }
            ,
            deserializeFull(r, t) {
                t.outfit = r.readGameType(),
                t.backpack = r.readGameType(),
                t.helmet = r.readGameType(),
                t.chest = r.readGameType(),
                t.activeWeapon = r.readGameType(),
                t.layer = r.readBits(2),
                t.dead = r.readBoolean(),
                t.downed = r.readBoolean(),
                t.animType = r.readBits(3),
                t.animSeq = r.readBits(3),
                t.actionType = r.readBits(3),
                t.actionSeq = r.readBits(3),
                t.wearingPan = r.readBoolean(),
                t.healEffect = r.readBoolean(),
                t.frozen = r.readBoolean(),
                t.frozenOri = r.readBits(2),
                t.hasteType = 0,
                t.hasteSeq = -1,
                r.readBoolean() && (t.hasteType = r.readBits(3),
                t.hasteSeq = r.readBits(3));
                const a = r.readBoolean();
                t.actionItem = a ? r.readGameType() : "";
                const i = r.readBoolean();
                t.scale = i ? r.readFloat(ae.PlayerMinScale, ae.PlayerMaxScale, 8) : 1;
                const o = r.readBoolean();
                if (t.role = o ? r.readGameType() : "",
                t.perks = [],
                r.readBoolean()) {
                    const l = r.readBits(3);
                    for (let c = 0; c < l; c++) {
                        const m = r.readGameType()
                          , h = r.readBoolean();
                        t.perks.push({
                            type: m,
                            droppable: h
                        })
                    }
                }
                r.readAlignToNextByte()
            }
        },
        2: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeBits(t.ori, 2),
                r.writeFloat(t.scale, ae.MapObjectMinScale, ae.MapObjectMaxScale, 8),
                r.writeBits(0, 6)
            }
            ,
            serializeFull: (r, t) => {
                r.writeFloat(t.healthT, 0, 1, 8),
                r.writeMapType(t.type),
                r.writeBits(t.layer, 2),
                r.writeBoolean(t.dead),
                r.writeBoolean(t.isDoor),
                t.isDoor && (r.writeBoolean(t.door.open),
                r.writeBoolean(t.door.canUse),
                r.writeBoolean(t.door.locked),
                r.writeBits(t.door.seq, 5)),
                r.writeBoolean(t.isButton),
                t.isButton && (r.writeBoolean(t.button.onOff),
                r.writeBoolean(t.button.canUse),
                r.writeBits(t.button.seq, 6)),
                r.writeBoolean(t.isPuzzlePiece),
                t.isPuzzlePiece && r.writeUint16(t.parentBuildingId),
                r.writeBoolean(t.isSkin),
                t.isSkin && r.writeUint16(t.skinPlayerId),
                r.writeBits(0, 5)
            }
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.ori = r.readBits(2),
                t.scale = r.readFloat(ae.MapObjectMinScale, ae.MapObjectMaxScale, 8),
                r.readBits(6)
            }
            ,
            deserializeFull: (r, t) => {
                t.healthT = r.readFloat(0, 1, 8),
                t.type = r.readMapType(),
                t.layer = r.readBits(2),
                t.dead = r.readBoolean(),
                t.isDoor = r.readBoolean(),
                t.isDoor && (t.door = {},
                t.door.open = r.readBoolean(),
                t.door.canUse = r.readBoolean(),
                t.door.locked = r.readBoolean(),
                t.door.seq = r.readBits(5)),
                t.isButton = r.readBoolean(),
                t.isButton && (t.button = {},
                t.button.onOff = r.readBoolean(),
                t.button.canUse = r.readBoolean(),
                t.button.seq = r.readBits(6)),
                t.isPuzzlePiece = r.readBoolean(),
                t.isPuzzlePiece && (t.parentBuildingId = r.readUint16()),
                t.isSkin = r.readBoolean(),
                t.isSkin && (t.skinPlayerId = r.readUint16()),
                r.readBits(5)
            }
        },
        6: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeBoolean(t.ceilingDead),
                r.writeBoolean(t.occupied),
                r.writeBoolean(t.ceilingDamaged),
                r.writeBoolean(t.hasPuzzle),
                t.hasPuzzle && (r.writeBoolean(t.puzzleSolved),
                r.writeBits(t.puzzleErrSeq, 7)),
                r.writeBits(0, 4)
            }
            ,
            serializeFull: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeMapType(t.type),
                r.writeBits(t.ori, 2),
                r.writeBits(t.layer, 2)
            }
            ,
            deserializePart: (r, t) => {
                t.ceilingDead = r.readBoolean(),
                t.occupied = r.readBoolean(),
                t.ceilingDamaged = r.readBoolean(),
                t.hasPuzzle = r.readBoolean(),
                t.hasPuzzle && (t.puzzleSolved = r.readBoolean(),
                t.puzzleErrSeq = r.readBits(7)),
                r.readBits(4)
            }
            ,
            deserializeFull: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.type = r.readMapType(),
                t.ori = r.readBits(2),
                t.layer = r.readBits(2)
            }
        },
        7: {
            serializedFullSize: 0,
            serializePart: () => {}
            ,
            serializeFull: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeMapType(t.type),
                r.writeBits(t.ori, 2),
                r.writeBoolean(t.interiorSoundEnabled),
                r.writeBoolean(t.interiorSoundAlt);
                for (let a = 0; a < F.structureLayerCount; a++)
                    r.writeUint16(t.layerObjIds[a])
            }
            ,
            deserializePart: () => {}
            ,
            deserializeFull: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.type = r.readMapType(),
                t.ori = r.readBits(2),
                t.interiorSoundEnabled = r.readBoolean(),
                t.interiorSoundAlt = r.readBoolean(),
                t.layerObjIds = [];
                for (let a = 0; a < F.structureLayerCount; a++) {
                    const i = r.readUint16();
                    t.layerObjIds.push(i)
                }
            }
        },
        4: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeMapType(t.type),
                r.writeBits(t.layer, 2),
                r.writeBits(0, 2)
            }
            ,
            serializeFull: () => {}
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.type = r.readMapType(),
                t.layer = r.readBits(2),
                r.readBits(2)
            }
            ,
            deserializeFull: () => {}
        },
        3: {
            serializedFullSize: 5,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16)
            }
            ,
            serializeFull: (r, t) => {
                r.writeGameType(t.type),
                r.writeUint8(t.count),
                r.writeBits(t.layer, 2),
                r.writeBoolean(t.isOld),
                r.writeBoolean(t.isPreloadedGun),
                r.writeBoolean(t.ownerId != 0),
                t.ownerId != 0 && r.writeUint16(t.ownerId),
                r.writeBits(0, 1)
            }
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16)
            }
            ,
            deserializeFull: (r, t) => {
                t.type = r.readGameType(),
                t.count = r.readUint8(),
                t.layer = r.readBits(2),
                t.isOld = r.readBoolean(),
                t.isPreloadedGun = r.readBoolean(),
                t.hasOwner = r.readBoolean(),
                t.hasOwner && (t.ownerId = r.readUint16()),
                r.readBits(1)
            }
        },
        5: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16)
            }
            ,
            serializeFull: (r, t) => {
                r.writeUint8(t.layer),
                r.writeUint16(t.playerId)
            }
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16)
            }
            ,
            deserializeFull: (r, t) => {
                t.layer = r.readUint8(),
                t.playerId = r.readUint16()
            }
        },
        8: {
            serializedFullSize: 0,
            serializePart: () => {}
            ,
            serializeFull: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeFloat(t.scale, ae.MapObjectMinScale, ae.MapObjectMaxScale, 8),
                r.writeMapType(t.type),
                r.writeBits(t.ori, 2),
                r.writeBits(t.layer, 2),
                r.writeUint8(t.goreKills)
            }
            ,
            deserializePart: () => {}
            ,
            deserializeFull: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.scale = r.readFloat(ae.MapObjectMinScale, ae.MapObjectMaxScale, 8),
                t.type = r.readMapType(),
                t.ori = r.readBits(2),
                t.layer = r.readBits(2),
                t.goreKills = r.readUint8()
            }
        },
        9: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeFloat(t.posZ, 0, F.projectile.maxHeight, 10),
                r.writeUnitVec(t.dir, 7)
            }
            ,
            serializeFull: (r, t) => {
                r.writeGameType(t.type),
                r.writeBits(t.layer, 2),
                r.writeBits(0, 4)
            }
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.posZ = r.readFloat(0, F.projectile.maxHeight, 10),
                t.dir = r.readUnitVec(7)
            }
            ,
            deserializeFull: (r, t) => {
                t.type = r.readGameType(),
                t.layer = r.readBits(2),
                r.readBits(4)
            }
        },
        10: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
                r.writeFloat(t.rad, 0, ae.SmokeMaxRad, 8)
            }
            ,
            serializeFull: (r, t) => {
                r.writeBits(t.layer, 2),
                r.writeBits(t.interior, 6)
            }
            ,
            deserializePart: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16),
                t.rad = r.readFloat(0, ae.SmokeMaxRad, 8)
            }
            ,
            deserializeFull: (r, t) => {
                t.layer = r.readBits(2),
                t.interior = r.readBits(6)
            }
        },
        11: {
            serializedFullSize: 0,
            serializePart: (r, t) => {
                r.writeFloat(t.fallT, 0, 1, 7),
                r.writeBoolean(t.landed)
            }
            ,
            serializeFull: (r, t) => {
                r.writeVec(t.pos, 0, 0, 1024, 1024, 16)
            }
            ,
            deserializePart: (r, t) => {
                t.fallT = r.readFloat(0, 1, 7),
                t.landed = r.readBoolean()
            }
            ,
            deserializeFull: (r, t) => {
                t.pos = r.readVec(0, 0, 1024, 1024, 16)
            }
        },
        0: {
            serializedFullSize: 0,
            deserializeFull: () => {}
            ,
            deserializePart: () => {}
            ,
            serializeFull: () => {}
            ,
            serializePart: () => {}
        }
    };
    function Rs(r, t) {
        if (r.writeBoolean(t.healthDirty),
        t.healthDirty && r.writeFloat(t.health, 0, 100, 8),
        r.writeBoolean(t.boostDirty),
        t.boostDirty && r.writeFloat(t.boost, 0, 100, 8),
        r.writeBoolean(t.zoomDirty),
        t.zoomDirty && r.writeUint8(t.zoom),
        r.writeBoolean(t.actionDirty),
        t.actionDirty && (r.writeFloat(t.action.time, 0, ae.ActionMaxDuration, 8),
        r.writeFloat(t.action.duration, 0, ae.ActionMaxDuration, 8),
        r.writeUint16(t.action.targetId)),
        r.writeBoolean(t.inventoryDirty),
        t.inventoryDirty) {
            r.writeGameType(t.scope);
            for (const a of Object.keys(F.bagSizes)) {
                const i = t.inventory[a] > 0;
                r.writeBoolean(i),
                i && r.writeBits(t.inventory[a], 9)
            }
        }
        if (r.writeBoolean(t.weapsDirty),
        t.weapsDirty) {
            r.writeBits(t.curWeapIdx, 2);
            for (let a = 0; a < F.WeaponSlot.Count; a++)
                r.writeGameType(t.weapons[a].type),
                r.writeUint8(t.weapons[a].ammo)
        }
        r.writeBoolean(t.spectatorCountDirty),
        t.spectatorCountDirty && r.writeUint8(t.spectatorCount),
        r.writeAlignToNextByte()
    }
    function Ls(r, t) {
        if (t.healthDirty = r.readBoolean(),
        t.healthDirty && (t.health = r.readFloat(0, 100, 8)),
        t.boostDirty = r.readBoolean(),
        t.boostDirty && (t.boost = r.readFloat(0, 100, 8)),
        t.zoomDirty = r.readBoolean(),
        t.zoomDirty && (t.zoom = r.readUint8()),
        t.actionDirty = r.readBoolean(),
        t.actionDirty && (t.action = {},
        t.action.time = r.readFloat(0, ae.ActionMaxDuration, 8),
        t.action.duration = r.readFloat(0, ae.ActionMaxDuration, 8),
        t.action.targetId = r.readUint16()),
        t.inventoryDirty = r.readBoolean(),
        t.inventoryDirty) {
            t.scope = r.readGameType(),
            t.inventory = {};
            const a = Object.keys(F.bagSizes);
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                let s = 0;
                r.readBoolean() && (s = r.readBits(9)),
                t.inventory[o] = s
            }
        }
        if (t.weapsDirty = r.readBoolean(),
        t.weapsDirty) {
            t.curWeapIdx = r.readBits(2),
            t.weapons = [];
            for (let a = 0; a < F.WeaponSlot.Count; a++)
                t.weapons.push({
                    type: r.readGameType(),
                    ammo: r.readUint8()
                })
        }
        t.spectatorCountDirty = r.readBoolean(),
        t.spectatorCountDirty && (t.spectatorCount = r.readUint8()),
        r.readAlignToNextByte()
    }
    function qs(r, t) {
        r.writeUint8(t.players.length);
        for (let a = 0; a < t.players.length; a++) {
            const i = t.players[a];
            r.writeBoolean(i.hasData),
            i.hasData && (r.writeVec(i.pos, 0, 0, 1024, 1024, 11),
            r.writeBoolean(i.visible),
            r.writeBoolean(i.dead),
            r.writeBoolean(i.downed),
            r.writeBoolean(i.role !== ""),
            i.role !== "" && r.writeGameType(i.role))
        }
        r.writeAlignToNextByte()
    }
    function Fs(r, t) {
        t.players = [];
        const a = r.readUint8();
        for (let i = 0; i < a; i++) {
            const o = {};
            o.hasData = r.readBoolean(),
            o.hasData && (o.pos = r.readVec(0, 0, 1024, 1024, 11),
            o.visible = r.readBoolean(),
            o.dead = r.readBoolean(),
            o.downed = r.readBoolean(),
            o.role = "",
            r.readBoolean() && (o.role = r.readGameType())),
            t.players.push(o)
        }
        r.readAlignToNextByte()
    }
    function js(r, t) {
        r.writeUint8(t.players.length);
        for (let a = 0; a < t.players.length; a++) {
            const i = t.players[a];
            r.writeFloat(i.health, 0, 100, 7),
            r.writeBoolean(i.disconnected)
        }
    }
    function Us(r, t) {
        t.players = [];
        const a = r.readUint8();
        for (let i = 0; i < a; i++) {
            const o = {};
            o.health = r.readFloat(0, 100, 7),
            o.disconnected = r.readBoolean(),
            t.players.push(o)
        }
    }
    function Ws(r, t) {
        r.writeUint16(t.playerId),
        r.writeUint8(t.teamId),
        r.writeUint8(t.groupId),
        r.writeString(t.name),
        r.writeGameType(t.loadout.heal),
        r.writeGameType(t.loadout.boost),
        r.writeAlignToNextByte()
    }
    function Ns(r, t) {
        t.playerId = r.readUint16(),
        t.teamId = r.readUint8(),
        t.groupId = r.readUint8(),
        t.name = r.readString(),
        t.loadout = {},
        t.loadout.heal = r.readGameType(),
        t.loadout.boost = r.readGameType(),
        r.readAlignToNextByte()
    }
    function Gs(r, t) {
        r.writeUint8(t.mode),
        r.writeFloat32(t.duration),
        r.writeVec(t.posOld, 0, 0, 1024, 1024, 16),
        r.writeVec(t.posNew, 0, 0, 1024, 1024, 16),
        r.writeFloat(t.radOld, 0, 2048, 16),
        r.writeFloat(t.radNew, 0, 2048, 16)
    }
    function Vs(r, t) {
        t.mode = r.readUint8(),
        t.duration = r.readFloat32(),
        t.posOld = r.readVec(0, 0, 1024, 1024, 16),
        t.posNew = r.readVec(0, 0, 1024, 1024, 16),
        t.radOld = r.readFloat(0, 2048, 16),
        t.radNew = r.readFloat(0, 2048, 16)
    }
    const pe = {
        DeletedObjects: 1,
        FullObjects: 2,
        ActivePlayerId: 4,
        Gas: 8,
        GasCircle: 16,
        PlayerInfos: 32,
        DeletePlayerIds: 64,
        PlayerStatus: 128,
        GroupStatus: 256,
        Bullets: 512,
        Explosions: 1024,
        Emotes: 2048,
        Planes: 4096,
        AirstrikeZones: 8192,
        MapIndicators: 16384,
        KillLeader: 32768
    };
    class Hs {
        delObjIds = [];
        fullObjects = [];
        partObjects = [];
        activePlayerId = 0;
        activePlayerIdDirty = !1;
        activePlayerData;
        gasData;
        gasDirty = !1;
        gasT = 0;
        gasTDirty = !1;
        playerInfos = [];
        deletedPlayerIds = [];
        playerStatus = {
            players: []
        };
        playerStatusDirty = !1;
        groupStatus = {
            players: []
        };
        groupStatusDirty = !1;
        bullets = [];
        explosions = [];
        emotes = [];
        planes = [];
        airstrikeZones = [];
        mapIndicators = [];
        killLeaderId = 0;
        killLeaderKills = 0;
        killLeaderDirty = !1;
        ack = 0;
        serialize(t) {
            let a = 0;
            const i = t.byteIndex;
            if (t.writeUint16(a),
            this.delObjIds.length) {
                t.writeUint16(this.delObjIds.length);
                for (let s = 0; s < this.delObjIds.length; s++)
                    t.writeUint16(this.delObjIds[s]);
                a |= pe.DeletedObjects
            }
            if (this.fullObjects.length) {
                t.writeUint16(this.fullObjects.length);
                for (let s = 0; s < this.fullObjects.length; s++) {
                    const l = this.fullObjects[s];
                    t.writeUint8(l.__type),
                    t.writeBytes(l.partialStream, 0, l.partialStream.byteIndex),
                    t.writeBytes(l.fullStream, 0, l.fullStream.byteIndex)
                }
                a |= pe.FullObjects
            }
            t.writeUint16(this.partObjects.length);
            for (let s = 0; s < this.partObjects.length; s++) {
                const l = this.partObjects[s];
                t.writeBytes(l.partialStream, 0, l.partialStream.byteIndex)
            }
            if (this.activePlayerIdDirty && (t.writeUint16(this.activePlayerId),
            a |= pe.ActivePlayerId),
            Rs(t, this.activePlayerData),
            this.gasDirty && (Gs(t, this.gasData),
            a |= pe.Gas),
            this.gasTDirty && (t.writeFloat(this.gasT, 0, 1, 16),
            a |= pe.GasCircle),
            this.playerInfos.length) {
                t.writeUint8(this.playerInfos.length);
                for (let s = 0; s < this.playerInfos.length; s++)
                    Ws(t, this.playerInfos[s]);
                a |= pe.PlayerInfos
            }
            if (this.deletedPlayerIds.length) {
                t.writeUint8(this.deletedPlayerIds.length);
                for (let s = 0; s < this.deletedPlayerIds.length; s++)
                    t.writeUint16(this.deletedPlayerIds[s]);
                a |= pe.DeletePlayerIds
            }
            if (this.playerStatusDirty && (qs(t, this.playerStatus),
            a |= pe.PlayerStatus),
            this.groupStatusDirty && (js(t, this.groupStatus),
            a |= pe.GroupStatus),
            this.bullets.length) {
                t.writeUint8(this.bullets.length);
                for (let s = 0; s < this.bullets.length; s++) {
                    const l = this.bullets[s];
                    t.writeUint16(l.playerId),
                    t.writeVec(l.startPos, 0, 0, 1024, 1024, 16),
                    t.writeUnitVec(l.dir, 8),
                    t.writeGameType(l.bulletType),
                    t.writeBits(l.layer, 2),
                    t.writeFloat(l.varianceT, 0, 1, 4),
                    t.writeBits(l.distAdjIdx, 4),
                    t.writeBoolean(l.clipDistance),
                    l.clipDistance && t.writeFloat(l.distance, 0, 1024, 16),
                    t.writeBoolean(l.shotFx),
                    l.shotFx && (t.writeGameType(l.shotSourceType),
                    t.writeBoolean(l.shotOffhand),
                    t.writeBoolean(l.lastShot)),
                    t.writeBoolean(l.reflectCount > 0),
                    l.reflectCount > 0 && (t.writeBits(l.reflectCount, 2),
                    t.writeUint16(l.reflectObjId)),
                    t.writeBoolean(l.hasSpecialFx),
                    l.hasSpecialFx && (t.writeBoolean(l.shotAlt),
                    t.writeBoolean(l.splinter),
                    t.writeBoolean(l.trailSaturated),
                    t.writeBoolean(l.trailSmall),
                    t.writeBoolean(l.trailThick))
                }
                t.writeAlignToNextByte(),
                a |= pe.Bullets
            }
            if (this.explosions.length) {
                t.writeUint8(this.explosions.length);
                for (let s = 0; s < this.explosions.length; s++) {
                    const l = this.explosions[s];
                    t.writeVec(l.pos, 0, 0, 1024, 1024, 16),
                    t.writeGameType(l.type),
                    t.writeBits(l.layer, 2),
                    t.writeAlignToNextByte()
                }
                a |= pe.Explosions
            }
            if (this.emotes.length) {
                t.writeUint8(this.emotes.length);
                for (let s = 0; s < this.emotes.length; s++) {
                    const l = this.emotes[s];
                    t.writeUint16(l.playerId),
                    t.writeGameType(l.type),
                    t.writeGameType(l.itemType),
                    t.writeBoolean(l.isPing),
                    l.isPing && t.writeVec(l.pos, 0, 0, 1024, 1024, 16),
                    t.writeAlignToNextByte()
                }
                a |= pe.Emotes
            }
            if (this.planes.length) {
                t.writeUint8(this.planes.length);
                for (let s = 0; s < this.planes.length; s++) {
                    const l = this.planes[s];
                    t.writeUint8(l.id),
                    t.writeVec(e.add(l.pos, e.create(512, 512)), 0, 0, 2048, 2048, 10),
                    t.writeUnitVec(l.planeDir, 8),
                    t.writeBoolean(l.actionComplete),
                    t.writeBits(l.action, 3)
                }
                a |= pe.Planes
            }
            if (this.airstrikeZones.length) {
                t.writeUint8(this.airstrikeZones.length);
                for (let s = 0; s < this.airstrikeZones.length; s++) {
                    const l = this.airstrikeZones[s];
                    t.writeVec(l.pos, 0, 0, 1024, 1024, 12),
                    t.writeFloat(l.rad, 0, ae.AirstrikeZoneMaxRad, 8),
                    t.writeFloat(l.duration, 0, ae.AirstrikeZoneMaxDuration, 8)
                }
                a |= pe.AirstrikeZones
            }
            if (this.mapIndicators.length) {
                t.writeUint8(this.mapIndicators.length);
                for (let s = 0; s < this.mapIndicators.length; s++) {
                    const l = this.mapIndicators[s];
                    t.writeBits(l.id, 4),
                    t.writeBoolean(l.dead),
                    t.writeBoolean(l.equipped),
                    t.writeGameType(l.type),
                    t.writeVec(l.pos, 0, 0, 1024, 1024, 16)
                }
                t.writeAlignToNextByte(),
                a |= pe.MapIndicators
            }
            this.killLeaderDirty && (t.writeUint16(this.killLeaderId),
            t.writeUint8(this.killLeaderKills),
            a |= pe.KillLeader),
            t.writeUint8(this.ack);
            const o = t.byteIndex;
            t.byteIndex = i,
            t.writeUint16(a),
            t.byteIndex = o
        }
        deserialize(t, a) {
            const i = t.readUint16();
            if ((i & pe.DeletedObjects) != 0) {
                const s = t.readUint16();
                for (let l = 0; l < s; l++)
                    this.delObjIds.push(t.readUint16())
            }
            if ((i & pe.FullObjects) != 0) {
                const s = t.readUint16();
                for (let l = 0; l < s; l++) {
                    const c = {};
                    c.__type = t.readUint8(),
                    c.__id = t.readUint16(),
                    jr[c.__type].deserializePart(t, c),
                    jr[c.__type].deserializeFull(t, c),
                    this.fullObjects.push(c)
                }
            }
            for (let s = t.readUint16(), l = 0; l < s; l++) {
                const c = {};
                c.__id = t.readUint16();
                const m = a.PYeO(c.__id, t);
                jr[m].deserializePart(t, c),
                this.partObjects.push(c)
            }
            (i & pe.ActivePlayerId) != 0 && (this.activePlayerId = t.readUint16(),
            this.activePlayerIdDirty = !0);
            const o = {};
            if (Ls(t, o),
            this.activePlayerData = o,
            (i & pe.Gas) != 0) {
                const s = {};
                Vs(t, s),
                this.gasData = s,
                this.gasDirty = !0
            }
            if ((i & pe.GasCircle) != 0 && (this.gasT = t.readFloat(0, 1, 16),
            this.gasTDirty = !0),
            (i & pe.PlayerInfos) != 0) {
                const s = t.readUint8();
                for (let l = 0; l < s; l++) {
                    const c = {};
                    Ns(t, c),
                    this.playerInfos.push(c)
                }
            }
            if ((i & pe.DeletePlayerIds) != 0) {
                const s = t.readUint8();
                for (let l = 0; l < s; l++) {
                    const c = t.readUint16();
                    this.deletedPlayerIds.push(c)
                }
            }
            if ((i & pe.PlayerStatus) != 0) {
                const s = {};
                Fs(t, s),
                this.playerStatus = s,
                this.playerStatusDirty = !0
            }
            if ((i & pe.GroupStatus) != 0) {
                const s = {};
                Us(t, s),
                this.groupStatus = s,
                this.groupStatusDirty = !0
            }
            if ((i & pe.Bullets) != 0) {
                for (let s = t.readUint8(), l = 0; l < s; l++) {
                    const c = {};
                    c.playerId = t.readUint16(),
                    c.pos = t.readVec(0, 0, 1024, 1024, 16),
                    c.dir = t.readUnitVec(8),
                    c.bulletType = t.readGameType(),
                    c.layer = t.readBits(2),
                    c.varianceT = t.readFloat(0, 1, 4),
                    c.distAdjIdx = t.readBits(4),
                    c.clipDistance = t.readBoolean(),
                    c.clipDistance && (c.distance = t.readFloat(0, 1024, 16)),
                    c.shotFx = t.readBoolean(),
                    c.shotFx && (c.shotSourceType = t.readGameType(),
                    c.shotOffhand = t.readBoolean(),
                    c.lastShot = t.readBoolean()),
                    c.reflectCount = 0,
                    c.reflectObjId = 0,
                    t.readBoolean() && (c.reflectCount = t.readBits(2),
                    c.reflectObjId = t.readUint16()),
                    c.hasSpecialFx = t.readBoolean(),
                    c.hasSpecialFx && (c.shotAlt = t.readBoolean(),
                    c.splinter = t.readBoolean(),
                    c.trailSaturated = t.readBoolean(),
                    c.trailSmall = t.readBoolean(),
                    c.trailThick = t.readBoolean()),
                    this.bullets.push(c)
                }
                t.readAlignToNextByte()
            }
            if ((i & pe.Explosions) != 0) {
                const s = t.readUint8();
                for (let l = 0; l < s; l++) {
                    const c = {};
                    c.pos = t.readVec(0, 0, 1024, 1024, 16),
                    c.type = t.readGameType(),
                    c.layer = t.readBits(2),
                    t.readAlignToNextByte(),
                    this.explosions.push(c)
                }
            }
            if ((i & pe.Emotes) != 0)
                for (let s = t.readUint8(), l = 0; l < s; l++) {
                    const c = {};
                    c.playerId = t.readUint16(),
                    c.type = t.readGameType(),
                    c.itemType = t.readGameType(),
                    c.isPing = t.readBoolean(),
                    c.isPing && (c.pos = t.readVec(0, 0, 1024, 1024, 16)),
                    t.readBits(3),
                    this.emotes.push(c)
                }
            if ((i & pe.Planes) != 0)
                for (let s = t.readUint8(), l = 0; l < s; l++) {
                    const c = {};
                    c.id = t.readUint8();
                    const m = t.readVec(0, 0, 2048, 2048, 10);
                    c.pos = e.create(m.x - 512, m.y - 512),
                    c.planeDir = t.readUnitVec(8),
                    c.actionComplete = t.readBoolean(),
                    c.action = t.readBits(3),
                    this.planes.push(c)
                }
            if ((i & pe.AirstrikeZones) != 0)
                for (let s = t.readUint8(), l = 0; l < s; l++) {
                    const c = {};
                    c.pos = t.readVec(0, 0, 1024, 1024, 12),
                    c.rad = t.readFloat(0, ae.AirstrikeZoneMaxRad, 8),
                    c.duration = t.readFloat(0, ae.AirstrikeZoneMaxDuration, 8),
                    this.airstrikeZones.push(c)
                }
            if ((i & pe.MapIndicators) != 0) {
                for (let s = t.readUint8(), l = 0; l < s; l++) {
                    const c = {};
                    c.id = t.readBits(4),
                    c.dead = t.readBoolean(),
                    c.equipped = t.readBoolean(),
                    c.type = t.readGameType(),
                    c.pos = t.readVec(0, 0, 1024, 1024, 16),
                    this.mapIndicators.push(c)
                }
                t.readAlignToNextByte()
            }
            (i & pe.KillLeader) != 0 && (this.killLeaderId = t.readUint16(),
            this.killLeaderKills = t.readUint8(),
            this.killLeaderDirty = !0),
            this.ack = t.readUint8()
        }
    }
    function $s(r) {
        return r ? .5 : .25
    }
    class Xs {
        itemSourceType = "";
        mapSourceType = "";
        damageType = st.Player;
        targetId = 0;
        killerId = 0;
        killCreditId = 0;
        killerKills = 0;
        downed = !1;
        killed = !1;
        serialize(t) {
            t.writeUint8(this.damageType),
            t.writeGameType(this.itemSourceType),
            t.writeMapType(this.mapSourceType),
            t.writeUint16(this.targetId),
            t.writeUint16(this.killerId),
            t.writeUint16(this.killCreditId),
            t.writeUint8(this.killerKills),
            t.writeBoolean(this.downed),
            t.writeBoolean(this.killed),
            t.writeAlignToNextByte()
        }
        deserialize(t) {
            this.damageType = t.readUint8(),
            this.itemSourceType = t.readGameType(),
            this.mapSourceType = t.readMapType(),
            this.targetId = t.readUint16(),
            this.killerId = t.readUint16(),
            this.killCreditId = t.readUint16(),
            this.killerKills = t.readUint8(),
            this.downed = t.readBoolean(),
            this.killed = t.readBoolean(),
            t.readAlignToNextByte()
        }
    }
    class aa {
        playerStats = {
            playerId: 0,
            timeAlive: 0,
            kills: 0,
            dead: !1,
            damageDealt: 0,
            damageTaken: 0
        };
        serialize(t) {
            t.writeUint16(this.playerStats.playerId),
            t.writeUint16(this.playerStats.timeAlive),
            t.writeUint8(this.playerStats.kills),
            t.writeUint8(this.playerStats.dead),
            t.writeUint16(Math.round(this.playerStats.damageDealt)),
            t.writeUint16(Math.round(this.playerStats.damageTaken))
        }
        deserialize(t) {
            const a = {};
            a.playerId = t.readUint16(),
            a.timeAlive = t.readUint16(),
            a.kills = t.readUint8(),
            a.dead = t.readUint8(),
            a.damageDealt = t.readUint16(),
            a.damageTaken = t.readUint16(),
            this.playerStats = a
        }
    }
    class Qs {
        teamId = 0;
        teamRank = 0;
        gameOver = !1;
        winningTeamId = 0;
        playerStats = [];
        serialize(t) {
            t.writeUint8(this.teamId),
            t.writeUint8(this.teamRank),
            t.writeUint8(+this.gameOver),
            t.writeUint8(this.winningTeamId),
            t.writeUint8(this.playerStats.length);
            for (let a = 0; a < this.playerStats.length; a++) {
                const i = this.playerStats[a]
                  , o = new aa;
                o.playerStats = i,
                o.serialize(t)
            }
        }
        deserialize(t) {
            this.teamId = t.readUint8(),
            this.teamRank = t.readUint8(),
            this.gameOver = t.readUint8(),
            this.winningTeamId = t.readUint8();
            for (let a = t.readUint8(), i = 0; i < a; i++) {
                const o = new aa;
                o.deserialize(t),
                this.playerStats.push(o.playerStats)
            }
        }
    }
    class Zs {
        type = 0;
        item = "";
        count = 0;
        serialize(t) {
            t.writeUint8(this.type),
            t.writeGameType(this.item),
            t.writeUint8(this.count),
            t.writeBits(0, 6)
        }
        deserialize(t) {
            this.type = t.readUint8(),
            this.item = t.readGameType(),
            this.count = t.readUint8(),
            t.readBits(6)
        }
    }
    function Js(r, t) {
        r.writeFloat32(t.width),
        r.writeUint8(t.looped),
        r.writeUint8(t.points.length);
        for (const a of t.points)
            r.writeVec(a, 0, 0, 1024, 1024, 16)
    }
    function Ys(r, t) {
        t.width = r.readFloat32(),
        t.looped = r.readUint8(),
        t.points = [];
        const a = r.readUint8();
        for (let i = 0; i < a; i++) {
            const o = r.readVec(0, 0, 1024, 1024, 16);
            t.points.push(o)
        }
    }
    function Ks(r, t) {
        r.writeString(t.name),
        r.writeVec(t.pos, 0, 0, 1024, 1024, 16)
    }
    function el(r, t) {
        t.name = r.readString(),
        t.pos = r.readVec(0, 0, 1024, 1024, 16)
    }
    function tl(r, t) {
        r.writeVec(t.min, 0, 0, 1024, 1024, 16),
        r.writeVec(t.max, 0, 0, 1024, 1024, 16),
        r.writeUint32(t.color),
        r.writeFloat32(t.roughness),
        r.writeFloat32(t.offsetDist),
        r.writeBits(t.order, 7),
        r.writeBoolean(t.useAsMapShape)
    }
    function rl(r, t) {
        t.min = r.readVec(0, 0, 1024, 1024, 16),
        t.max = r.readVec(0, 0, 1024, 1024, 16),
        t.color = r.readUint32(),
        t.roughness = r.readFloat32(),
        t.offsetDist = r.readFloat32(),
        t.order = r.readBits(7),
        t.useAsMapShape = r.readBoolean()
    }
    function al(r, t) {
        r.writeVec(t.pos, 0, 0, 1024, 1024, 16),
        r.writeFloat(t.scale, ae.MapObjectMinScale, ae.MapObjectMaxScale, 8),
        r.writeMapType(t.type),
        r.writeBits(t.ori, 2),
        r.writeBits(0, 2)
    }
    function il(r, t) {
        t.pos = r.readVec(0, 0, 1024, 1024, 16),
        t.scale = r.readFloat(ae.MapObjectMinScale, ae.MapObjectMaxScale, 8),
        t.type = r.readMapType(),
        t.ori = r.readBits(2),
        r.readBits(2)
    }
    class ol {
        mapName = "";
        seed = 0;
        width = 0;
        height = 0;
        shoreInset = 0;
        grassInset = 0;
        rivers = [];
        places = [];
        objects = [];
        groundPatches = [];
        serialize(t) {
            t.writeString(this.mapName, ae.MapNameMaxLen),
            t.writeUint32(this.seed),
            t.writeUint16(this.width),
            t.writeUint16(this.height),
            t.writeUint16(this.shoreInset),
            t.writeUint16(this.grassInset),
            t.writeUint8(this.rivers.length);
            for (let a = 0; a < this.rivers.length; a++)
                Js(t, this.rivers[a]);
            t.writeUint8(this.places.length);
            for (let a = 0; a < this.places.length; a++)
                Ks(t, this.places[a]);
            t.writeUint16(this.objects.length);
            for (let a = 0; a < this.objects.length; a++)
                al(t, this.objects[a]);
            t.writeUint8(this.groundPatches.length);
            for (let a = 0; a < this.groundPatches.length; a++)
                tl(t, this.groundPatches[a])
        }
        deserialize(t) {
            this.mapName = t.readString(ae.MapNameMaxLen),
            this.seed = t.readUint32(),
            this.width = t.readUint16(),
            this.height = t.readUint16(),
            this.shoreInset = t.readUint16(),
            this.grassInset = t.readUint16();
            const a = t.readUint8();
            for (let l = 0; l < a; l++) {
                const c = {};
                Ys(t, c),
                this.rivers.push(c)
            }
            const i = t.readUint8();
            for (let l = 0; l < i; l++) {
                const c = {};
                el(t, c),
                this.places.push(c)
            }
            const o = t.readUint16();
            for (let l = 0; l < o; l++) {
                const c = {};
                il(t, c),
                this.objects.push(c)
            }
            const s = t.readUint8();
            for (let l = 0; l < s; l++) {
                const c = {};
                rl(t, c),
                this.groundPatches.push(c)
            }
        }
    }
    class sl {
        specBegin = !1;
        specNext = !1;
        specPrev = !1;
        specForce = !1;
        serialize(t) {
            t.writeBoolean(this.specBegin),
            t.writeBoolean(this.specNext),
            t.writeBoolean(this.specPrev),
            t.writeBoolean(this.specForce),
            t.writeBits(0, 4)
        }
        deserialize(t) {
            this.specBegin = t.readBoolean(),
            this.specNext = t.readBoolean(),
            this.specPrev = t.readBoolean(),
            this.specForce = t.readBoolean(),
            t.readBits(4)
        }
    }
    class ll {
        item = "";
        weapIdx = 0;
        serialize(t) {
            t.writeGameType(this.item),
            t.writeUint8(this.weapIdx),
            t.writeBits(0, 6)
        }
        deserialize(t) {
            this.item = t.readGameType(),
            this.weapIdx = t.readUint8(),
            t.readBits(6)
        }
    }
    class Ya {
        pos = e.create(0, 0);
        type = "";
        isPing = !1;
        serialize(t) {
            t.writeVec(this.pos, 0, 0, 1024, 1024, 16),
            t.writeGameType(this.type),
            t.writeBoolean(this.isPing),
            t.writeBits(0, 5)
        }
        deserialize(t) {
            this.pos = t.readVec(0, 0, 1024, 1024, 16),
            this.type = t.readGameType(),
            this.isPing = t.readBoolean(),
            t.readBits(5)
        }
    }
    class cl {
        playerId = 0;
        killerId = 0;
        role = "";
        assigned = !1;
        killed = !1;
        serialize(t) {
            t.writeUint16(this.playerId),
            t.writeUint16(this.killerId),
            t.writeGameType(this.role),
            t.writeBoolean(this.assigned),
            t.writeBoolean(this.killed),
            t.writeAlignToNextByte()
        }
        deserialize(t) {
            this.playerId = t.readUint16(),
            this.killerId = t.readUint16(),
            this.role = t.readGameType(),
            this.assigned = t.readBoolean(),
            this.killed = t.readBoolean(),
            t.readAlignToNextByte()
        }
    }
    class nl {
        teamAliveCounts = [];
        serialize(t) {
            const a = this.teamAliveCounts.length;
            t.writeUint8(a);
            for (let i = 0; i < a; i++)
                t.writeUint8(this.teamAliveCounts[i])
        }
        deserialize(t) {
            const a = t.readUint8();
            for (let i = 0; i < a; i++) {
                const o = t.readUint8();
                this.teamAliveCounts.push(o)
            }
        }
    }
    class ml {
        role = "";
        serialize(t) {
            t.writeGameType(this.role),
            t.writeBits(0, 6)
        }
        deserialize(t) {
            this.role = t.readGameType(),
            t.readBits(6)
        }
    }
    class pl {
        _typeToId = {};
        _idToType = {};
        nextId = 0;
        maxId;
        constructor(t) {
            this.maxId = 2 ** t,
            this.addType("")
        }
        addType(t) {
            Oe(this._typeToId[t] === void 0, `Type ${t} has already been defined!`),
            Oe(this.nextId < this.maxId),
            this._typeToId[t] = this.nextId,
            this._idToType[this.nextId] = t,
            this.nextId++
        }
        typeToId(t) {
            const a = this._typeToId[t];
            return Oe(a !== void 0, `Invalid type ${t}`),
            a
        }
        idToType(t) {
            const a = this._idToType[t];
            return a === void 0 && console.error("Invalid id given to idToType", t, "max", Object.keys(this._idToType).length),
            a
        }
    }
    function io(r, t, a) {
        const i = new pl(a)
          , o = Object.keys(t);
        Oe(o.length <= i.maxId, `${r} contains ${o.length} types, max ${i.maxId}`);
        for (let s = 0; s < o.length; s++)
            i.addType(o[s]);
        return i
    }
    const Ka = io("Game", U, 10)
      , ei = io("Map", de, 12);
    class ul extends oe {
        writeString(t, a) {
            this.writeASCIIString(t, a)
        }
        readString(t) {
            return this.readASCIIString(t)
        }
        writeFloat(t, a, i, o) {
            Oe(o > 0 && o < 31),
            Oe(t >= a && t <= i, `writeFloat: value out of range: ${t}, range: [${a}, ${i}]`);
            const s = (1 << o) - 1
              , m = (k.clamp(t, a, i) - a) / (i - a) * s + .5;
            this.writeBits(m, o)
        }
        readFloat(t, a, i) {
            Oe(i > 0 && i < 31);
            const o = (1 << i) - 1
              , l = this.readBits(i) / o;
            return t + l * (a - t)
        }
        writeVec(t, a, i, o, s, l) {
            this.writeFloat(t.x, a, o, l),
            this.writeFloat(t.y, i, s, l)
        }
        readVec(t, a, i, o, s) {
            return {
                x: this.readFloat(t, i, s),
                y: this.readFloat(a, o, s)
            }
        }
        writeUnitVec(t, a) {
            this.writeVec(t, -1.0001, -1.0001, 1.0001, 1.0001, a)
        }
        readUnitVec(t) {
            return this.readVec(-1.0001, -1.0001, 1.0001, 1.0001, t)
        }
        writeVec32(t) {
            this.writeFloat32(t.x),
            this.writeFloat32(t.y)
        }
        readVec32() {
            return {
                x: this.readFloat32(),
                y: this.readFloat32()
            }
        }
        writeBytes(t, a, i) {
            Oe(this.index % 8 == 0);
            const o = new Uint8Array(t._view._view.buffer,a,i);
            this._view._view.set(o, this.index / 8),
            this.index += i * 8
        }
        writeAlignToNextByte() {
            const t = 8 - this.index % 8;
            t < 8 && this.writeBits(0, t)
        }
        readAlignToNextByte() {
            const t = 8 - this.index % 8;
            t < 8 && this.readBits(t)
        }
        writeGameType(t) {
            this.writeBits(Ka.typeToId(t), 10)
        }
        readGameType() {
            return Ka.idToType(this.readBits(10))
        }
        writeMapType(t) {
            this.writeBits(ei.typeToId(t), 12)
        }
        readMapType() {
            return ei.idToType(this.readBits(12))
        }
    }
    class ti {
        stream;
        arrayBuf;
        constructor(t) {
            const a = t instanceof ArrayBuffer ? t : t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength);
            if (!(a instanceof ArrayBuffer))
                throw new Error(`Invalid buf type ${typeof t > "u" ? "undefined" : typeof t}`);
            this.arrayBuf = a,
            this.stream = new ul(a)
        }
        getBuffer() {
            return new Uint8Array(this.arrayBuf,0,this.stream.byteIndex)
        }
        getStream() {
            return this.stream
        }
        serializeMsg(t, a) {
            Oe(this.stream.index % 8 == 0),
            this.stream.writeUint8(t),
            a.serialize(this.stream),
            Oe(this.stream.index % 8 == 0)
        }
        serializeMsgStream(t, a) {
            Oe(this.stream.index % 8 == 0 && a.index % 8 == 0),
            this.stream.writeUint8(t),
            this.stream.writeBytes(a, 0, a.index / 8)
        }
        deserializeMsgType() {
            return this.stream.length - this.stream.byteIndex * 8 >= 1 ? this.stream.readUint8() : 0
        }
    }
    const ae = {
        MapNameMaxLen: 24,
        PlayerNameMaxLen: 16,
        MouseMaxDist: 64,
        SmokeMaxRad: 10,
        ActionMaxDuration: 8.5,
        AirstrikeZoneMaxRad: 256,
        AirstrikeZoneMaxDuration: 60,
        PlayerMinScale: .75,
        PlayerMaxScale: 2,
        MapObjectMinScale: .125,
        MapObjectMaxScale: 2.5,
        MaxPerks: 8
    };
    var ke = (r => (r[r.None = 0] = "None",
    r[r.Join = 1] = "Join",
    r[r.Disconnect = 2] = "Disconnect",
    r[r.Input = 3] = "Input",
    r[r.Edit = 4] = "Edit",
    r[r.Joined = 5] = "Joined",
    r[r.Update = 6] = "Update",
    r[r.Kill = 7] = "Kill",
    r[r.GameOver = 8] = "GameOver",
    r[r.Pickup = 9] = "Pickup",
    r[r.Map = 10] = "Map",
    r[r.Spectate = 11] = "Spectate",
    r[r.DropItem = 12] = "DropItem",
    r[r.Emote = 13] = "Emote",
    r[r.PlayerStats = 14] = "PlayerStats",
    r[r.AdStatus = 15] = "AdStatus",
    r[r.Loadout = 16] = "Loadout",
    r[r.RoleAnnouncement = 17] = "RoleAnnouncement",
    r[r.Stats = 18] = "Stats",
    r[r.UpdatePass = 19] = "UpdatePass",
    r[r.AliveCounts = 20] = "AliveCounts",
    r[r.PerkModeRoleSelect = 21] = "PerkModeRoleSelect",
    r))(ke || {})
      , ot = (r => (r[r.Full = 0] = "Full",
    r[r.AlreadyOwned = 1] = "AlreadyOwned",
    r[r.AlreadyEquipped = 2] = "AlreadyEquipped",
    r[r.BetterItemEquipped = 3] = "BetterItemEquipped",
    r[r.Success = 4] = "Success",
    r[r.GunCannotFire = 5] = "GunCannotFire",
    r))(ot || {});
    class hl {
        serialize(t) {}
        deserialize(t) {}
    }
    function dl() {
        return new URLSearchParams(self.location.search).has("crazygames")
    }
    async function gl() {
        return new Promise(function(r, t) {
            const a = document.createElement("script");
            a.src = "https://sdk.crazygames.com/crazygames-sdk-v3.js",
            document.head.appendChild(a),
            dt.phone && (document.getElementById("btn-hamburger").style.display = "none"),
            document.getElementById("crazygamesDiscord").style.display = "block",
            a.addEventListener("load", async function() {
                await window.CrazyGames.SDK.init(),
                ia("survev-io_728x90", 728, 90),
                setInterval( () => {
                    const i = document.getElementById("start-menu-wrapper");
                    getComputedStyle(i).display != "none" && ia("survev-io_728x90", 728, 90)
                }
                , 6e4),
                r()
            }),
            a.addEventListener("error", function() {
                console.log("CrazyGames SDK load error"),
                t()
            })
        }
        )
    }
    async function ia(r, t, a) {
        return new Promise(async function(i, o) {
            try {
                await window.CrazyGames.SDK.banner.requestBanner({
                    id: r,
                    width: t,
                    height: a
                }),
                i()
            } catch (s) {
                console.log("Banner request error", s),
                o()
            }
        }
        )
    }
    function or(r) {
        const t = {
            adFinished: r,
            adError: r,
            adStarted: () => console.log("Start midgame ad")
        };
        window.CrazyGames.SDK.ad.requestAd("midgame", t)
    }
    function oo(r) {
        let t = r.target;
        for (; t && t !== document.body; ) {
            const a = getComputedStyle(t).overflowY;
            if (a === "auto" || a === "scroll")
                return;
            t = t.parentElement
        }
        r.preventDefault()
    }
    window.addEventListener("wheel", oo, {
        passive: !1
    });
    window.addEventListener("touchmove", oo, {
        passive: !1
    });
    document.addEventListener("keydown", r => {
        if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(r.key)) {
            const a = r.target
              , i = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
            if (r.key === " " && (i.includes(a.tagName) || a.isContentEditable))
                return;
            r.preventDefault()
        }
    }
    );
    let pr;
    async function fl() {
        return new Promise(function(r) {
            const t = document.createElement("script");
            t.src = "https://api.gamemonetize.com/sdk.js",
            t.id = "gamemonetize-sdk",
            document.head.appendChild(t),
            document.getElementById("crazygamesDiscord").style.display = "block",
            window.SDK_OPTIONS = {
                gameId: "q9xrmuceu30pey8llzop5cr0p1p2fbx9",
                onEvent: function(a) {
                    switch (a.name) {
                    case "SDK_GAME_PAUSE":
                        break;
                    case "SDK_GAME_START":
                        pr && pr();
                        break;
                    case "SDK_READY":
                        console.log("Successfully loaded GameMonetize SDK");
                        break
                    }
                }
            },
            r()
        }
        )
    }
    function sr(r) {
        pr = r,
        window.sdk && window.sdk.showBanner ? window.sdk.showBanner() : pr()
    }
    function yl() {
        if (window !== window.parent) {
            if (new URL(document.referrer).origin.includes("gamemonetize"))
                return !0
        } else if (window.location.href.includes("gamemonetize"))
            return !0;
        return !1
    }
    async function wl() {
        return new Promise(function(r) {
            const t = document.createElement("script");
            t.src = "https://game-cdn.poki.com/scripts/v2/poki-sdk.js",
            document.head.appendChild(t),
            document.getElementById("crazygamesDiscord").style.display = "block",
            t.addEventListener("load", async function() {
                window.PokiSDK.init().then( () => {
                    console.log("Poki SDK successfully initialized")
                }
                ).catch( () => {
                    console.log("Initialized, something went wrong, load you game anyway")
                }
                ),
                r()
            })
        }
        )
    }
    function lr(r) {
        window.PokiSDK.commercialBreak( () => {}
        ).then( () => {
            r()
        }
        )
    }
    function _l() {
        return !!(window !== window.parent && new URL(document.referrer).origin.includes("poki"))
    }
    const bl = "https://surviv.mathsiscoolfun.com"
      , Qt = {
        resolveUrl: function(r) {
            return bl + r
        },
        resolveRoomHost: function() {
            return "surviv.mathsiscoolfun.com"
        }
    }
      , Tt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(r) {
        return typeof r
    }
    : function(r) {
        return r && typeof Symbol == "function" && r.constructor === Symbol && r !== Symbol.prototype ? "symbol" : typeof r
    }
      , ri = Array.prototype.slice
      , ai = Object.keys
      , xl = function() {
        return Object.prototype.toString.call(arguments)
    }() == "[object Arguments]";
    function Sl(r) {
        return Object.prototype.toString.call(r) == "[object Arguments]"
    }
    function kl(r) {
        return r && (typeof r > "u" ? "undefined" : Tt(r)) == "object" && typeof r.length == "number" && Object.prototype.hasOwnProperty.call(r, "callee") && !Object.prototype.propertyIsEnumerable.call(r, "callee") || !1
    }
    const ii = xl ? Sl : kl
      , oa = function(r, t, a) {
        return a || (a = {}),
        r === t ? !0 : r instanceof Date && t instanceof Date ? r.getTime() === t.getTime() : !r || !t || (typeof r > "u" ? "undefined" : Tt(r)) != "object" && (typeof t > "u" ? "undefined" : Tt(t)) != "object" ? a.strict ? r === t : r == t : zl(r, t, a)
    };
    function oi(r) {
        return r == null
    }
    function si(r) {
        return !(!r || (typeof r > "u" ? "undefined" : Tt(r)) !== "object" || typeof r.length != "number" || typeof r.copy != "function" || typeof r.slice != "function" || r.length > 0 && typeof r[0] != "number")
    }
    function zl(r, t, a) {
        let i, o;
        if (oi(r) || oi(t) || r.prototype !== t.prototype)
            return !1;
        if (ii(r))
            return ii(t) ? (r = ri.call(r),
            t = ri.call(t),
            oa(r, t, a)) : !1;
        if (si(r)) {
            if (!si(t) || r.length !== t.length)
                return !1;
            for (i = 0; i < r.length; i++)
                if (r[i] !== t[i])
                    return !1;
            return !0
        }
        let s, l;
        try {
            s = ai(r),
            l = ai(t)
        } catch {
            return !1
        }
        if (s.length != l.length)
            return !1;
        for (s.sort(),
        l.sort(),
        i = s.length - 1; i >= 0; i--)
            if (s[i] != l[i])
                return !1;
        for (i = s.length - 1; i >= 0; i--)
            if (o = s[i],
            !oa(r[o], t[o], a))
                return !1;
        return (typeof r > "u" ? "undefined" : Tt(r)) === (typeof t > "u" ? "undefined" : Tt(t))
    }
    var so = (r => (r[r.New = 0] = "New",
    r[r.Confirmed = 1] = "Confirmed",
    r[r.Ackd = 2] = "Ackd",
    r))(so || {});
    const xe = {
        ItemStatus: so,
        validate: function(r) {
            const t = function(l, c, m) {
                const h = U[c];
                return h && h.type == l ? c : m
            }
              , a = function(l, c) {
                const m = parseFloat(l);
                return Number.isNaN(m) ? c : m
            }
              , i = {
                crosshair: {
                    type: "",
                    color: 16777215,
                    size: 1,
                    stroke: 0
                },
                emotes: [],
                ...r
            }
              , o = {
                outfit: t("outfit", i.outfit, "outfitBase"),
                melee: t("melee", i.melee, "fists"),
                heal: t("heal_effect", i.heal, "heal_basic"),
                boost: t("boost_effect", i.boost, "boost_basic"),
                player_icon: t("emote", i.player_icon, ""),
                crosshair: {
                    type: t("crosshair", i.crosshair.type, "crosshair_default"),
                    color: parseInt(i.crosshair.color) || 16777215,
                    size: a(i.crosshair.size, 1).toFixed(2),
                    stroke: a(i.crosshair.stroke, 0).toFixed(2)
                },
                emotes: []
            }
              , s = F.defaultEmoteLoadout.slice();
            for (let l = 0; l < F.EmoteSlot.Count; l++) {
                const c = l < i.emotes.length ? i.emotes[l] : "";
                o.emotes.push(t("emote", c, s[l]))
            }
            return o
        },
        defaultLoadout: function() {
            return xe.validate({})
        },
        modified: function(r, t) {
            return !oa(r, t)
        },
        getUserAvailableItems: function(r) {
            const t = []
              , a = U.unlock_default;
            for (let i = 0; i < a.unlocks.length; i++) {
                const o = a.unlocks[i];
                t.push({
                    type: o,
                    source: "unlock_default",
                    timeAcquired: 0,
                    ackd: xe.ItemStatus.Ackd
                })
            }
            for (let i = 0; i < r.length; i++)
                t.push(r[i]);
            return t
        }
    };
    function vl(r, t, a) {
        typeof t == "function" && (a = t,
        t = null);
        const i = {
            url: Qt.resolveUrl(r),
            type: "POST",
            timeout: 10 * 1e3,
            headers: {
                "X-Requested-With": "XMLHttpRequest"
            }
        };
        t && (i.contentType = "application/json; charset=utf-8",
        i.data = JSON.stringify(t)),
        d.ajax(i).done(o => {
            a(null, o)
        }
        ).fail(o => {
            a(o)
        }
        )
    }
    class Il {
        constructor(t) {
            this.config = t,
            window.login = () => {
                this.login()
            }
            ,
            window.deleteAccount = () => {
                this.deleteAccount()
            }
            ,
            window.deleteItems = () => {
                this.ajaxRequest("/api/user/delete_items", {}, (a, i) => {
                    this.loadProfile()
                }
                )
            }
            ,
            window.unlock = a => {
                console.log(`Unlocking ${a}`),
                this.unlock(a)
            }
            ,
            window.setQuest = (a, i=0) => {
                this.ajaxRequest("/api/user/set_quest", {
                    questType: a,
                    idx: i
                }, (o, s) => {
                    this.getPass()
                }
                )
            }
            ,
            window.refreshQuest = a => {
                this.refreshQuest(a)
            }
            ,
            window.setPassUnlock = a => {
                this.setPassUnlock(a)
            }
        }
        events = {};
        requestsInFlight = 0;
        loggingIn = !1;
        loggedIn = !1;
        profile = {
            linkedTwitch: !1,
            linkedDiscord: !1,
            usernameSet: !1,
            username: "",
            slug: "",
            usernameChangeTime: 0
        };
        loadout = xe.defaultLoadout();
        loadoutPriv = "";
        items = [];
        quests = [];
        questPriv = "";
        pass = {};
        ajaxRequest(t, a, i) {
            typeof a == "function" && (i = a,
            a = null),
            this.requestsInFlight++,
            this.emit("request", this),
            vl(t, a, (o, s) => {
                i(o, s),
                this.requestsInFlight--,
                this.emit("request", this),
                this.requestsInFlight == 0 && this.emit("requestsComplete")
            }
            )
        }
        addEventListener(t, a) {
            this.events[t] = this.events[t] || [],
            this.events[t].push(a)
        }
        removeEventListener(t, a) {
            const i = this.events[t] || [];
            for (let o = i.length - 1; o >= 0; o--)
                i[o] == a && i.splice(o, 1)
        }
        emit(t, ...a) {
            const i = (this.events[t] || []).slice(0);
            for (let o = 0; o < i.length; o++)
                i[o](...a)
        }
        init() {
            this.config.get("sessionCookie") && this.setSessionCookies(),
            this.login()
        }
        setSessionCookies() {
            this.clearSessionCookies(),
            document.cookie = this.config.get("sessionCookie"),
            document.cookie = `app-data=${Date.now()}`
        }
        clearSessionCookies() {
            document.cookie = "app-sid=;expires=Thu, 01 Jan 1970 00:00:01 GMT;",
            document.cookie = "app-data=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"
        }
        loginWithAccessToken(t, a, i) {
            a( (o, s) => {
                if (o) {
                    this.emit("error", "login_failed");
                    return
                }
                const l = i(s);
                this.ajaxRequest(`${t}?access_token=${l}`, (c, m) => {
                    c ? this.emit("error", "login_failed") : (this.config.set("sessionCookie", m.cookie),
                    this.setSessionCookies(),
                    this.login())
                }
                )
            }
            )
        }
        login() {
            this.loadProfile(),
            this.getPass(!0)
        }
        logout() {
            this.config.set("profile", null),
            this.config.set("sessionCookie", null),
            this.ajaxRequest("/api/user/logout", (t, a) => {
                window.location.reload()
            }
            )
        }
        loadProfile() {
            this.loggingIn = !this.loggedIn,
            this.ajaxRequest("/api/user/profile", (a, i) => {
                const o = this.loggingIn;
                if (this.loggingIn = !1,
                this.loggedIn = !1,
                this.profile = {},
                this.loadoutPriv = "",
                this.items = [],
                a)
                    console.error("account", "load_profile_error");
                else if (i.banned)
                    this.emit("error", "account_banned", i.reason);
                else if (i.success) {
                    this.loggedIn = !0,
                    this.profile = i.profile,
                    this.loadoutPriv = i.loadoutPriv,
                    this.items = i.items;
                    const s = this.config.get("profile") || {
                        slug: ""
                    };
                    s.slug = i.profile.slug,
                    this.config.set("profile", s)
                }
                this.loggedIn || this.config.set("sessionCookie", null),
                o && this.loggedIn && this.emit("login", this),
                this.emit("items", this.items)
            }
            );
            const t = this.config.get("loadout");
            this.loadout = f.mergeDeep({}, xe.defaultLoadout(), t),
            this.emit("loadout", this.loadout)
        }
        resetStats() {
            this.ajaxRequest("/api/user/reset_stats", (t, a) => {
                t && (console.error("account", "reset_stats_error"),
                this.emit("error", "server_error"))
            }
            )
        }
        deleteAccount() {
            this.ajaxRequest("/api/user/delete", (t, a) => {
                if (t) {
                    console.error("account", "delete_error"),
                    this.emit("error", "server_error");
                    return
                }
                this.config.set("profile", null),
                this.config.set("sessionCookie", null),
                window.location.reload()
            }
            )
        }
        setUsername(t, a) {
            this.ajaxRequest("/api/user/username", {
                username: t
            }, (i, o) => {
                if (i) {
                    console.error("account", "set_username_error"),
                    a(i);
                    return
                }
                o.result == "success" ? (this.loadProfile(),
                a()) : a(o.result)
            }
            )
        }
        setLoadout(t) {
            this.loadout,
            this.loadout = t,
            this.emit("loadout", this.loadout),
            this.config.set("loadout", t)
        }
        setItemStatus(t, a) {
            if (a.length != 0) {
                for (let i = 0; i < a.length; i++) {
                    const o = this.items.find(s => s.type == a[i]);
                    o && (o.status = Math.max(o.status, t))
                }
                this.emit("items", this.items),
                this.ajaxRequest("/api/user/set_item_status", {
                    status: t,
                    itemTypes: a
                }, (i, o) => {
                    i && console.error("account", "set_item_status_error")
                }
                )
            }
        }
        unlock(t) {
            this.ajaxRequest("/api/user/unlock", {
                unlockType: t
            }, (a, i) => {
                if (a || !i.success) {
                    console.error("account", "unlock_error"),
                    this.emit("error", "server_error");
                    return
                }
                this.items = i.items,
                this.emit("items", this.items)
            }
            )
        }
        getPass(t) {}
        setPassUnlock(t) {
            this.ajaxRequest("/api/user/set_pass_unlock", {
                unlockType: t
            }, (a, i) => {
                a || !i.success ? console.error("account", "set_pass_unlock_error") : this.getPass(!1)
            }
            )
        }
        refreshQuest(t) {
            this.ajaxRequest("/api/user/refresh_quest", {
                idx: t
            }, (a, i) => {
                if (a) {
                    console.error("account", "refresh_quest_error");
                    return
                }
                i.success ? this.getPass(!1) : this.emit("pass", this.pass, this.quests, !1)
            }
            )
        }
    }
    class Tl {
        introMusic = !0;
        soundUpdateThrottle = 0;
        tracks;
        trackToIdx;
        initTime;
        constructor() {
            this.tracks = [],
            this.trackToIdx = {};
            const t = (a, i, o, s) => {
                this.tracks.push({
                    name: a,
                    sound: i,
                    channel: o,
                    immediateMode: s,
                    inst: null,
                    instSound: "",
                    filter: "",
                    weight: 0,
                    volume: 0
                }),
                this.trackToIdx[a] = this.tracks.length - 1
            }
            ;
            t("music", "menu_music", "music", !1),
            t("wind", "ambient_wind_01", "ambient", !1),
            t("river", "ambient_stream_01", "ambient", !1),
            t("waves", "ambient_waves_01", "ambient", !1),
            t("interior_0", "", "ambient", !0),
            t("interior_1", "", "ambient", !0),
            this.initTime = Date.now()
        }
        getTrack(t) {
            return this.tracks[this.trackToIdx[t]]
        }
        onGameStart() {
            this.introMusic = !1;
            for (let t = 0; t < this.tracks.length; t++)
                this.tracks[t].weight = 0;
            this.getTrack("wind").weight = 1,
            this.soundUpdateThrottle = 0
        }
        onGameComplete(t) {
            for (let a = 0; a < this.tracks.length; a++) {
                const i = this.tracks[a];
                i.immediateMode && (i.weight = 0)
            }
            this.getTrack("river").weight = 0
        }
        update(t, a, i) {
            let o = !1;
            this.soundUpdateThrottle -= t,
            this.soundUpdateThrottle <= 0 && (this.soundUpdateThrottle = .2,
            o = !0);
            let s = 0;
            for (let l = this.tracks.length - 1; l >= 0; l--) {
                const c = this.tracks[l];
                if (!c.inst && c.sound && a.isSoundLoaded(c.sound, c.channel) && (console.log("Start track", c.sound, c.channel),
                c.inst = a.playSound(c.sound, {
                    channel: c.channel,
                    startSilent: !0,
                    loop: c.channel == "ambient",
                    forceStart: !0,
                    filter: c.filter,
                    forceFilter: !0
                }),
                c.instSound = c.sound,
                l == 0 && console.log("Play delay", Date.now() - this.initTime)),
                c.inst && o) {
                    const m = c.weight * (1 - s);
                    s += m,
                    c.volume = m;
                    const h = a.getSoundDefVolume(c.sound, c.channel);
                    a.setVolume(c.inst, m * h, c.channel)
                }
                c.inst && (!c.sound && k.eqAbs(a.getVolume(c.inst), 0) || c.sound && c.sound != c.instSound) && (console.log("Stop track", c.name, c.channel),
                a.stopSound(c.inst),
                c.inst = null,
                c.instSound = ""),
                c.immediateMode && (c.sound = "",
                c.weight = 0)
            }
            if (this.introMusic) {
                const l = this.getTrack("music");
                l.inst && (l.weight = k.min(l.weight + t, 1));
                const c = this.getTrack("wind");
                l.inst && !a.isSoundPlaying(l.inst) && (c.weight = k.min(c.weight + t, 1))
            }
        }
    }
    const Ut = window.navigator.userAgent.includes("iPod") || window.navigator.userAgent.includes("iPhone") || window.navigator.userAgent.includes("iPad");
    let lo = null
      , co = !1;
    function Ml(r) {
        try {
            return r.createGain().disconnect(r.destination),
            !1
        } catch {
            return !0
        }
    }
    const wt = 128;
    class li {
        constructor(t) {
            this.ctx = t,
            this.volumeOld = this.volume,
            this.panOld = this.pan,
            this.gainNode = this.ctx.createGain(),
            this.pannerNode = this.ctx.createPanner(),
            this.pannerNode.panningModel = "equalpower",
            this.gainNode.connect(this.pannerNode)
        }
        sound = null;
        id = 0;
        volume = 1;
        volumeOld;
        pan = 0;
        panOld;
        ambient;
        sourceNode = null;
        destination = null;
        paramEvents = 0;
        gainNode;
        pannerNode;
        stopTime = 0;
        stopping = !1;
        playState = "playFinished";
        setGain(t) {
            this.stopping || (Ut ? this.gainNode.gain.value = t : (this.gainNode.gain.setTargetAtTime(t, this.ctx.currentTime, .02),
            ++this.paramEvents))
        }
        setPan(t) {
            this.stopping || (this.pannerNode.setPosition(t, 0, -.5),
            this.paramEvents += 3)
        }
        start(t, a, i, o, s, l, c, m, h) {
            this.volume = this.volumeOld = i,
            this.pan = this.panOld = o,
            this.ambient = m,
            this.stopping = !1,
            this.destination = t,
            this.sourceNode = this.ctx.createBufferSource(),
            this.sourceNode.buffer = a,
            this.sourceNode.connect(this.gainNode),
            this.pannerNode.connect(this.destination),
            this.sourceNode.loop = s,
            Ut ? this.gainNode.gain.value = i : (this.gainNode.gain.setValueAtTime(i, this.ctx.currentTime),
            ++this.paramEvents),
            this.setPan(o),
            this.sourceNode.detune && (this.sourceNode.detune.value = h),
            this.sourceNode.start(this.ctx.currentTime + l, c),
            this.stopTime = s ? 1e100 : this.ctx.currentTime + l + a.duration - c,
            this.playState = "playSucceeded"
        }
        stop() {
            this.stopping || (this.setGain(0),
            this.stopTime = this.ctx.currentTime + .1,
            this.stopping = !0,
            this.playState = "playInterrupted")
        }
        disconnect() {
            if (this.sound?.instances.splice(this.sound?.instances.indexOf(this), 1),
            this.sound = null,
            this.sourceNode?.stop(0),
            this.sourceNode?.disconnect(this.gainNode),
            this.pannerNode?.disconnect(this.destination),
            Ut)
                try {
                    this.sourceNode.buffer = lo
                } catch {}
            this.destination = null,
            this.sourceNode = null,
            this.playState = "playFinished"
        }
        reallocNodes() {
            this.gainNode.disconnect(this.pannerNode),
            this.gainNode = this.ctx.createGain(),
            this.pannerNode = this.ctx.createPanner(),
            this.pannerNode.panningModel = "equalpower",
            this.gainNode.connect(this.pannerNode),
            this.paramEvents = 0
        }
    }
    let ur = null;
    class ci {
        constructor(t) {
            this.instance = t,
            this.id = t.id
        }
        id;
        check(t) {
            this.id != this.instance.id && (this.instance = ur,
            this.id = ur?.id)
        }
        stop() {
            this.check(),
            this.instance.stop()
        }
        get volume() {
            return this.check(),
            this.instance.volume
        }
        set volume(t) {
            this.check(!0),
            this.instance.volume = t
        }
        get pan() {
            return this.check(),
            this.instance.pan
        }
        set pan(t) {
            this.check(!0),
            this.instance.pan = t
        }
        get playState() {
            return this.check(),
            this.instance.playState
        }
    }
    let mt = null;
    class Cl {
        constructor(t, a, i, o, s) {
            if (this.ctx = t,
            this.inNode = a,
            this.outNode = i,
            this.name = o,
            this.params = s,
            this.volume = s.volume != null ? s.volume : 1,
            this.echoVolume = s.echoVolume || 0,
            this.echoDelay = s.echoDelay || 0,
            this.echoLowPass = s.echoLowPass || 3e3,
            this.stereoSpread = s.stereoSpread || 0,
            !co) {
                const l = this.ctx.createGain();
                this.inNode.connect(l),
                this.inNode = l
            }
            this.convolverNode = this.ctx.createConvolver(),
            this.echoVolume && (this.echoLowPassNode = this.ctx.createBiquadFilter(),
            this.echoLowPassNode.type = "lowpass",
            this.echoLowPassNode.frequency.setValueAtTime(this.echoLowPass, 0),
            this.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
            this.echoDelayNode = this.ctx.createDelay(this.echoDelay || .01),
            this.echoDelayNode.delayTime.setValueAtTime(this.echoDelay, 0)),
            this.stereoSpread && (this.stereoDelayNode = this.ctx.createDelay(this.stereoSpread),
            this.stereoDelayNode.delayTime.setValueAtTime(this.stereoSpread, 0),
            this.mergerNode = this.ctx.createChannelMerger(2))
        }
        volume;
        echoVolume;
        echoDelay;
        echoLowPass;
        stereoSpread;
        gainNode = null;
        convolverNode = null;
        echoGainNode = null;
        echoLowPassNode = null;
        echoDelayNode = null;
        stereoDelayNode = null;
        mergerNode = null;
        targetLevel = 0;
        gain = 0;
        drainEndTime = 0;
        active = !1;
        isConnected() {
            return this.gainNode != null
        }
        connect() {
            if (this.gainNode = this.ctx.createGain(),
            this.gainNode.channelCount = 1,
            this.gainNode.channelCountMode = "explicit",
            this.gainNode.gain.setValueAtTime(0, 0),
            this.echoVolume && (this.echoGainNode = this.ctx.createGain(),
            this.echoGainNode.channelCount = 1,
            this.echoGainNode.channelCountMode = "explicit",
            this.echoGainNode.gain.setValueAtTime(this.echoVolume, 0)),
            this.inNode.connect(this.gainNode),
            this.gainNode.connect(this.convolverNode),
            this.echoVolume && (this.convolverNode?.connect(this.echoGainNode),
            this.echoGainNode?.connect(this.echoLowPassNode),
            this.echoLowPassNode?.connect(this.echoDelayNode),
            this.echoDelayNode?.connect(this.convolverNode)),
            this.stereoSpread) {
                const {buffer: t} = this.convolverNode;
                t && t.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
                this.convolverNode?.connect(this.stereoDelayNode),
                this.convolverNode?.connect(this.mergerNode, 0, 0),
                this.stereoDelayNode?.connect(this.mergerNode, 0, 1),
                this.mergerNode?.connect(this.outNode)
            } else
                this.convolverNode?.connect(this.outNode)
        }
        disconnect() {
            this.inNode.disconnect(this.gainNode),
            this.gainNode?.disconnect(this.convolverNode),
            this.echoVolume && (this.convolverNode?.disconnect(this.echoGainNode),
            this.echoGainNode?.disconnect(this.echoLowPassNode),
            this.echoLowPassNode?.disconnect(this.echoDelayNode),
            this.echoDelayNode?.disconnect(this.convolverNode)),
            this.stereoSpread ? (this.convolverNode?.disconnect(this.stereoDelayNode),
            this.convolverNode?.disconnect(this.mergerNode, 0, 0),
            this.stereoDelayNode?.disconnect(this.mergerNode, 0, 1),
            this.mergerNode?.disconnect(this.outNode)) : this.convolverNode?.disconnect(this.outNode),
            this.gainNode = null,
            this.echoGainNode = null
        }
        setGain(t, a, i) {
            if (t *= this.volume,
            this.gain != t) {
                if (t != 0 && !this.gainNode && this.connect(),
                t == 0) {
                    this.echoGainNode && this.echoGainNode.gain.setValueAtTime(0, i);
                    const {buffer: o} = this.convolverNode
                      , s = o ? o.duration : 0;
                    this.drainEndTime = i + s + this.echoDelay + this.stereoSpread
                }
                this.gain == 0 && this.echoGainNode && this.echoGainNode.gain.setValueAtTime(this.echoVolume, a),
                this.gainNode?.gain.setValueAtTime(this.gain, a),
                this.gainNode?.gain.linearRampToValueAtTime(t, i),
                this.gain = t
            }
        }
    }
    class Pl {
        ctx = new (window.AudioContext || window.webkitAudioContext);
        masterGainNode;
        compressorNode;
        reverbNode;
        eqNodes = {};
        files = {};
        sounds = {};
        instances = [];
        instanceId = 0;
        playingInstances = [];
        reverbs = {};
        activeReverbs = [];
        reverbFadeEndTime = 0;
        volume = 1;
        volumeOld;
        muted = !1;
        mutedOld;
        runningOfflineTest;
        offlineCtx;
        startTime;
        onfileload = function(...t) {}
        ;
        PLAY_INITED = "playInited";
        PLAY_SUCCEEDED = "playSucceeded";
        PLAY_INTERRUPTED = "playInterrupted";
        PLAY_FINISHED = "playFinished";
        PLAY_FAILED = "playFailed";
        constructor() {
            if (Ut) {
                const a = this.ctx.createBuffer(1, 1, 44100)
                  , i = this.ctx.createBufferSource();
                i.buffer = a,
                i.connect(this.ctx.destination),
                i.start(),
                i.disconnect(this.ctx.destination),
                this.ctx.close(),
                this.ctx = new (window.AudioContext || window.webkitAudioContext)
            }
            co = Ml(this.ctx),
            window.audioEngine = this,
            this.masterGainNode = this.ctx.createGain(),
            this.compressorNode = this.ctx.createDynamicsCompressor(),
            this.masterGainNode.connect(this.compressorNode),
            this.compressorNode.connect(this.ctx.destination),
            this.reverbNode = this.ctx.createGain(),
            this.reverbNode.connect(this.masterGainNode);
            const t = {
                muffled: [[20, 2.8284 / 2, -6, "peaking"], [40, 2.8284 / 2, -7, "peaking"], [80, 2.8284 / 2, -10, "peaking"], [160, 2.8284 / 2, -13, "peaking"], [320, 2.8284 / 2, -22, "peaking"], [640, 2.8284 / 2, -18, "peaking"], [1280, 2.8284 / 2, -25, "peaking"], [2560, 2.8284 / 2, -10, "peaking"], [5120, 2.8284 / 2, -30, "peaking"], [10240, 2.8284 / 2, -25, "peaking"]],
                club: [[20, 2.8284 / 2, -6, "lowshelf"], [63, 2.8284 / 2, -3, "lowshelf"], [125, 2.8284 / 2, -3, "lowshelf"], [250, 2.8284 / 2, -6, "lowshelf"], [500, 2.8284 / 2, -18, "peaking"], [1e3, 2.8284 / 2, -36, "peaking"], [2e3, 2.8284 / 2, -48, "peaking"], [4e3, 2.8284 / 2, -50, "highshelf"], [8e3, 2.8284 / 2, -50, "highshelf"], [16e3, 2.8284 / 2, -50, "highshelf"]]
            };
            Object.keys(t).forEach(a => {
                const i = this.ctx.createGain();
                i.gain.setValueAtTime(16, 0);
                const o = t[a];
                let s = i;
                for (let l = 0; l < o.length; l++) {
                    const c = this.ctx.createBiquadFilter();
                    s.connect(c),
                    s = c,
                    c.frequency.setValueAtTime(o[l][0], 0),
                    c.Q.setValueAtTime(o[l][1], 0),
                    c.gain.setValueAtTime(o[l][2], 0),
                    c.type = o[l][3]
                }
                s.connect(this.reverbNode),
                this.eqNodes[a] = i
            }
            );
            for (let a = 0; a < wt; a++) {
                const i = new li(this.ctx);
                this.instances[a] = i
            }
            if (ur = new li(this.ctx),
            mt = new ci(ur),
            this.volumeOld = this.volume,
            this.mutedOld = this.muted,
            this.ctx.state == "suspended") {
                const a = () => {
                    this.ctx.resume();
                    const i = this.ctx.createBufferSource();
                    i.buffer = this.ctx.createBuffer(1, 1, 22050),
                    i.connect(this.ctx.destination),
                    i.start(),
                    setTimeout( () => {
                        this.ctx.state == "running" && (document.body.removeEventListener("mousedown", a, !1),
                        document.body.removeEventListener("touchend", a, !1))
                    }
                    , 0)
                }
                ;
                document.body.addEventListener("mousedown", a, !1),
                document.body.addEventListener("touchend", a, !1)
            }
            Ut && (lo = this.ctx.createBuffer(1, 1, 22050))
        }
        loadFile(t, a) {
            if (this.files[t] != null)
                return a(t),
                this.files[t];
            this.files[t] = {
                buffer: null
            };
            const i = new XMLHttpRequest;
            i.open("GET", t),
            i.responseType = "arraybuffer";
            const o = function(l) {
                console.error(`Failed loading sound file: ${t}`)
            };
            return i.addEventListener("load", s => {
                const l = i.response;
                if (!l) {
                    o();
                    return
                }
                this.ctx.decodeAudioData(l, c => {
                    this.files[t].buffer = c,
                    a(t)
                }
                , () => {
                    console.error(`Failed decoding sound: ${t}`)
                }
                )
            }
            ),
            i.addEventListener("abort", o),
            i.addEventListener("error", o),
            i.addEventListener("timeout", o),
            i.send(),
            this.files[t]
        }
        registerSound(t, a, i) {
            const s = {
                file: this.loadFile(t, this.onfileload.bind(this)),
                canCoalesce: !!i.canCoalesce,
                maxInstances: i.channels || 16,
                volume: i.volume || 1,
                instances: []
            };
            this.sounds[a] = s
        }
        play(t, a) {
            const i = this.sounds[t];
            if (!i)
                return console.error(`No sound named: ${t}`),
                mt;
            const o = a.filter || "none";
            let s = a.volume != null ? a.volume : 1;
            s *= i.volume,
            s = this.muted ? 0 : s;
            const l = a.pan || 0
              , c = !!a.loop
              , m = a.delay ? a.delay * .001 : 0
              , h = a.offset ? a.offset : 0
              , u = a.ambient || !1
              , g = a.detune || 0;
            if (!i.file.buffer || this.muted && !a.loop)
                return mt;
            if (o !== "none" && o !== "reverb" && o !== "muffled" && o !== "club")
                return console.error(`Invalid filter: ${o}. Only valid filters are 'none', 'reverb', 'muffled' and 'club'.`),
                mt;
            if (i.canCoalesce) {
                const A = this.ctx.currentTime + i.file.buffer.duration;
                for (let P = 0; P < i.instances.length; P++) {
                    const T = i.instances[P];
                    if (Math.abs(A - T.stopTime) > .03)
                        continue;
                    const I = T.volume * T.volume + s * s
                      , C = T.volume * T.pan + s * l
                      , q = T.volume + s;
                    return T.volume = Math.sqrt(I),
                    T.pan = C / Math.max(.001, q),
                    mt
                }
            }
            for (let b = 0; b < wt && (++this.instanceId,
            !!this.instances[this.instanceId % wt].sound); b++)
                ;
            const w = this.instances[this.instanceId % wt];
            if (w.sound)
                return console.error(`All ${wt} sound instances in use. You are using way too many sounds!`),
                mt;
            w.id = this.instanceId;
            const y = w.paramEvents > 150
              , _ = w.paramEvents > 20 && !(this.instanceId % 7);
            for ((y || _) && w.reallocNodes(); i.instances.length >= i.maxInstances; ) {
                let b = i.instances[0];
                for (let A = 1; A < i.instances.length; A++)
                    b.stopTime > i.instances[A].stopTime && (b = i.instances[A]);
                b.disconnect()
            }
            w.sound = i,
            i.instances.push(w);
            const S = o === "none" ? this.masterGainNode : o === "reverb" ? this.reverbNode : this.eqNodes[o];
            return w.start(S, i.file.buffer, s, l, c, m, h, u, g),
            this.playingInstances.includes(w) || this.playingInstances.push(w),
            new ci(w)
        }
        registerReverb(t, a, i) {
            const o = new Cl(this.ctx,this.reverbNode,this.masterGainNode,a,i);
            this.loadFile(t, s => {
                o.convolverNode.buffer = this.files[s].buffer,
                this.onfileload(s)
            }
            ),
            this.reverbs[a] = o
        }
        setReverbs(t) {
            for (let a = 0; a < this.activeReverbs.length; a++) {
                const i = this.activeReverbs[a];
                t[i.name] || (i.targetLevel = 0)
            }
            for (const a in t) {
                if (!t[a])
                    continue;
                const i = this.reverbs[a];
                if (!i) {
                    console.error(`No reverb named ${a}`);
                    continue
                }
                this.reverbs[a].active || (this.activeReverbs.push(i),
                i.active = !0),
                i.targetLevel = t[a]
            }
        }
        stop(t=!0) {
            for (let a = 0; a < wt; a++) {
                const i = this.instances[a];
                t && i.ambient || i.sound && i.stop()
            }
        }
        update(t) {
            this.ctx.state == "suspended" && this.ctx.resume();
            const a = this.muted ? 0 : this.volume
              , i = this.mutedOld ? 0 : this.volumeOld;
            this.volumeOld = this.volume,
            this.mutedOld = this.muted,
            a != i && this.masterGainNode.gain.setTargetAtTime(a, this.ctx.currentTime, .02);
            for (let o = this.playingInstances.length - 1; o >= 0; o--) {
                const s = this.playingInstances[o];
                s.volumeOld != s.volume && (s.volumeOld = s.volume,
                s.setGain(s.volume)),
                s.panOld != s.pan && (s.panOld = s.pan,
                s.setPan(s.pan)),
                s.sound && this.ctx.currentTime > s.stopTime && s.disconnect(),
                s.sound || this.playingInstances.splice(o, 1)
            }
            if (this.ctx.currentTime > this.reverbFadeEndTime) {
                const o = this.ctx.currentTime + .006
                  , s = .025;
                this.reverbFadeEndTime = o + s;
                let l = 0;
                for (let m = 0; m < this.activeReverbs.length; m++) {
                    const h = this.activeReverbs[m];
                    l += h.targetLevel
                }
                const c = l > 1 ? 1 / l : 1;
                for (let m = 0; m < this.activeReverbs.length; m++) {
                    const h = this.activeReverbs[m]
                      , u = Math.sqrt(c * h.targetLevel);
                    h.setGain(u, o, this.reverbFadeEndTime)
                }
                for (let m = this.activeReverbs.length - 1; m >= 0; m--) {
                    const h = this.activeReverbs[m]
                      , u = this.ctx.currentTime > h.drainEndTime;
                    h.gain == 0 && u && (h.isConnected() && h.disconnect(),
                    h.active = !1,
                    this.activeReverbs.splice(m, 1))
                }
            }
        }
        setMute(t) {
            this.muted = t
        }
        on(t, a, i) {
            if (t != "fileload") {
                console.error('Only "fileload" event supported');
                return
            }
            this.onfileload = a.bind(i)
        }
        updatePerformanceTest() {
            if (this.runningOfflineTest = this.runningOfflineTest != null ? this.runningOfflineTest : !1,
            this.runningOfflineTest)
                return;
            this.runningOfflineTest = !0;
            const t = 10;
            this.offlineCtx = new OfflineAudioContext(2,t * this.ctx.sampleRate,this.ctx.sampleRate);
            const a = this.offlineCtx.createBuffer(2, t * this.ctx.sampleRate, this.ctx.sampleRate);
            for (let m = 0; m < a.numberOfChannels; m++) {
                const h = a.getChannelData(m);
                for (let u = 0; u < h.length; u++)
                    h[u] = Math.sin(u / 2333) * Math.sin(u / 5741) * 2 * Math.random() - 1
            }
            const i = this.offlineCtx.createBufferSource();
            i.buffer = a;
            const o = this.offlineCtx.createConvolver()
              , l = this.offlineCtx.createBuffer(1, 4 * this.ctx.sampleRate, this.ctx.sampleRate);
            for (let m = 0; m < l.numberOfChannels; m++) {
                const h = l.getChannelData(m);
                for (let u = 0; u < h.length; u++)
                    h[u] = 2 * Math.random() - 1
            }
            o.buffer = l;
            const c = {
                echoVolume: .5,
                echoLowPass: 800,
                echoDelay: .25,
                stereoSpread: .004
            };
            c.convolverNode = o,
            c.echoLowPassNode = this.offlineCtx.createBiquadFilter(),
            c.echoLowPassNode.type = "lowpass",
            c.echoLowPassNode.frequency.setValueAtTime(c.echoLowPass, 0),
            c.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
            c.echoDelayNode = this.offlineCtx.createDelay(c.echoDelay),
            c.echoDelayNode.delayTime.setValueAtTime(c.echoDelay, 0),
            c.stereoDelayNode = this.offlineCtx.createDelay(c.stereoSpread),
            c.stereoDelayNode.delayTime.setValueAtTime(c.stereoSpread, 0),
            c.mergerNode = this.offlineCtx.createChannelMerger(2),
            c.gainNode = this.offlineCtx.createGain(),
            c.gainNode.channelCount = 1,
            c.gainNode.channelCountMode = "explicit",
            c.gainNode.gain.setValueAtTime(1, 0),
            c.echoGainNode = this.offlineCtx.createGain(),
            c.echoGainNode.channelCount = 1,
            c.echoGainNode.channelCountMode = "explicit",
            c.echoGainNode.gain.setValueAtTime(c.echoVolume, 0),
            c.outNode = this.offlineCtx.createGain(),
            c.gainNode.connect(c.convolverNode);
            {
                const {buffer: m} = c.convolverNode;
                m && m.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
                c.convolverNode.connect(c.stereoDelayNode),
                c.convolverNode.connect(c.mergerNode, 0, 0),
                c.stereoDelayNode?.connect(c.mergerNode, 0, 1),
                c.mergerNode?.connect(c.outNode)
            }
            console.log("starting convolver"),
            i.connect(c.gainNode),
            c.outNode.connect(this.offlineCtx.destination),
            i.start(),
            this.startTime = performance.now(),
            this.offlineCtx.oncomplete = m => {
                const h = performance.now();
                console.log("Offline render time: ", h - this.startTime),
                this.runningOfflineTest = !1
            }
            ,
            this.offlineCtx.startRendering()
        }
    }
    const He = {
        Sound: new Pl
    }
      , Al = {
        players: {
            m9_01: {
                path: "audio/guns/m9_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m9_reload_01: {
                path: "audio/guns/m9_reload_01.mp3",
                volume: 1
            },
            m9_reload_02: {
                path: "audio/guns/m9_reload_02.mp3",
                volume: 1
            },
            m9_switch_01: {
                path: "audio/guns/m9_switch_01.mp3",
                volume: 1
            },
            m93r_01: {
                path: "audio/guns/m93r_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m93r_reload_01: {
                path: "audio/guns/m93r_reload_01.mp3",
                volume: 1
            },
            m93r_reload_02: {
                path: "audio/guns/m93r_reload_02.mp3",
                volume: 1
            },
            m93r_switch_01: {
                path: "audio/guns/m93r_switch_01.mp3",
                volume: 1
            },
            glock_01: {
                path: "audio/guns/glock_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            glock_reload_01: {
                path: "audio/guns/glock_reload_01.mp3",
                volume: 1
            },
            glock_reload_02: {
                path: "audio/guns/glock_reload_02.mp3",
                volume: 1
            },
            glock_switch_01: {
                path: "audio/guns/glock_switch_01.mp3",
                volume: 1
            },
            p30l_01: {
                path: "audio/guns/p30l_01.mp3",
                volume: 1.2,
                maxInstances: 5
            },
            p30l_reload_01: {
                path: "audio/guns/p30l_reload_01.mp3",
                volume: 1.4
            },
            p30l_reload_02: {
                path: "audio/guns/p30l_reload_02.mp3",
                volume: 1.4
            },
            p30l_switch_01: {
                path: "audio/guns/p30l_switch_01.mp3",
                volume: 1.5
            },
            m1911_01: {
                path: "audio/guns/m1911_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m1911_reload_01: {
                path: "audio/guns/m1911_reload_01.mp3",
                volume: 1
            },
            m1911_reload_02: {
                path: "audio/guns/m1911_reload_02.mp3",
                volume: 1
            },
            m1911_switch_01: {
                path: "audio/guns/m1911_switch_01.mp3",
                volume: 1
            },
            ot38_01: {
                path: "audio/guns/ot38_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            ot38_reload_01: {
                path: "audio/guns/ot38_reload_01.mp3",
                volume: 1
            },
            ot38_reload_02: {
                path: "audio/guns/ot38_reload_02.mp3",
                volume: 1
            },
            ot38_switch_01: {
                path: "audio/guns/ot38_switch_01.mp3",
                volume: 1
            },
            ots38_01: {
                path: "audio/guns/ots38_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            colt45_01: {
                path: "audio/guns/colt45_01.mp3",
                volume: 1
            },
            colt45_reload_01: {
                path: "audio/guns/colt45_reload_01.mp3",
                volume: 1
            },
            colt45_reload_02: {
                path: "audio/guns/colt45_reload_02.mp3",
                volume: 1
            },
            colt45_switch_01: {
                path: "audio/guns/colt45_switch_01.mp3",
                volume: 1
            },
            deagle_01: {
                path: "audio/guns/deagle_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            deagle_reload_01: {
                path: "audio/guns/deagle_reload_01.mp3",
                volume: 1
            },
            deagle_reload_02: {
                path: "audio/guns/deagle_reload_02.mp3",
                volume: 1
            },
            deagle_switch_01: {
                path: "audio/guns/deagle_switch_01.mp3",
                volume: 1
            },
            flare_gun_01: {
                path: "audio/guns/flare_gun_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            flare_gun_reload_01: {
                path: "audio/guns/flare_gun_reload_01.mp3",
                volume: 1
            },
            flare_gun_reload_02: {
                path: "audio/guns/flare_gun_reload_02.mp3",
                volume: 1
            },
            ak47_01: {
                path: "audio/guns/ak47_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            ak47_reload_01: {
                path: "audio/guns/ak47_reload_01.mp3",
                volume: 1
            },
            ak47_switch_01: {
                path: "audio/guns/ak47_switch_01.mp3",
                volume: 1
            },
            an94_01: {
                path: "audio/guns/an94_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            an94_reload_01: {
                path: "audio/guns/an94_reload_01.mp3",
                volume: 1
            },
            an94_switch_01: {
                path: "audio/guns/an94_switch_01.mp3",
                volume: 1
            },
            groza_01: {
                path: "audio/guns/groza_01.mp3",
                volume: .95,
                maxInstances: 5
            },
            groza_reload_01: {
                path: "audio/guns/groza_reload_01.mp3",
                volume: 1.1
            },
            groza_switch_01: {
                path: "audio/guns/groza_switch_01.mp3",
                volume: 1.1
            },
            grozas_01: {
                path: "audio/guns/grozas_01.mp3",
                volume: .95,
                maxInstances: 5
            },
            scar_01: {
                path: "audio/guns/scar_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            scar_reload_01: {
                path: "audio/guns/scar_reload_01.mp3",
                volume: 1
            },
            scar_switch_01: {
                path: "audio/guns/scar_switch_01.mp3",
                volume: 1
            },
            scarssr_01: {
                path: "audio/guns/scarssr_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            dp28_01: {
                path: "audio/guns/dp28_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            dp28_reload_01: {
                path: "audio/guns/dp28_reload_01.mp3",
                volume: 1
            },
            dp28_switch_01: {
                path: "audio/guns/dp28_switch_01.mp3",
                volume: 1
            },
            bar_01: {
                path: "audio/guns/bar_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            bar_reload_01: {
                path: "audio/guns/bar_reload_01.mp3",
                volume: 1
            },
            bar_switch_01: {
                path: "audio/guns/bar_switch_01.mp3",
                volume: 1
            },
            pkp_01: {
                path: "audio/guns/pkp_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            pkp_reload_01: {
                path: "audio/guns/pkp_reload_01.mp3",
                volume: 1
            },
            pkp_switch_01: {
                path: "audio/guns/pkp_switch_01.mp3",
                volume: 1
            },
            m870_01: {
                path: "audio/guns/m870_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m870_reload_01: {
                path: "audio/guns/m870_reload_01.mp3",
                volume: 1
            },
            m870_cycle_01: {
                path: "audio/guns/m870_cycle_01.mp3",
                volume: 1
            },
            m870_pull_01: {
                path: "audio/guns/m870_pull_01.mp3",
                volume: 1
            },
            spas12_01: {
                path: "audio/guns/spas12_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            spas12_reload_01: {
                path: "audio/guns/spas12_reload_01.mp3",
                volume: 1
            },
            spas12_cycle_01: {
                path: "audio/guns/spas12_cycle_01.mp3",
                volume: 1
            },
            spas12_pull_01: {
                path: "audio/guns/spas12_pull_01.mp3",
                volume: 1
            },
            mp220_01: {
                path: "audio/guns/mp220_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            mp220_reload_01: {
                path: "audio/guns/mp220_reload_01.mp3",
                volume: 1
            },
            mp220_deploy_01: {
                path: "audio/guns/mp220_deploy_01.mp3",
                volume: 1
            },
            saiga_01: {
                path: "audio/guns/saiga_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            saiga_reload_01: {
                path: "audio/guns/saiga_reload_01.mp3",
                volume: 1
            },
            saiga_switch_01: {
                path: "audio/guns/saiga_switch_01.mp3",
                volume: 1
            },
            usas_01: {
                path: "audio/guns/usas_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            usas_reload_01: {
                path: "audio/guns/usas_reload_01.mp3",
                volume: 1
            },
            usas_switch_01: {
                path: "audio/guns/usas_switch_01.mp3",
                volume: 1
            },
            m1100_01: {
                path: "audio/guns/m1100_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m1100_reload_01: {
                path: "audio/guns/m1100_reload_01.mp3",
                volume: 1
            },
            m1100_deploy_01: {
                path: "audio/guns/m1100_deploy_01.mp3",
                volume: 1
            },
            m1014_01: {
                path: "audio/guns/m1014_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m1014_reload_01: {
                path: "audio/guns/m1014_reload_01.mp3",
                volume: 1
            },
            m1014_deploy_01: {
                path: "audio/guns/m1014_deploy_01.mp3",
                volume: 1
            },
            m39_01: {
                path: "audio/guns/m39_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m39_reload_01: {
                path: "audio/guns/m39_reload_01.mp3",
                volume: 1
            },
            m39_switch_01: {
                path: "audio/guns/m39_switch_01.mp3",
                volume: 1
            },
            svd_01: {
                path: "audio/guns/svd_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            svd_reload_01: {
                path: "audio/guns/svd_reload_01.mp3",
                volume: 1
            },
            svd_switch_01: {
                path: "audio/guns/svd_switch_01.mp3",
                volume: 1
            },
            garand_01: {
                path: "audio/guns/garand_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            garand_02: {
                path: "audio/guns/garand_02.mp3",
                volume: 1,
                maxInstances: 5
            },
            garand_reload_01: {
                path: "audio/guns/garand_reload_01.mp3",
                volume: 1
            },
            garand_switch_01: {
                path: "audio/guns/garand_switch_01.mp3",
                volume: 1
            },
            m1a1_01: {
                path: "audio/guns/m1a1_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m1a1_reload_01: {
                path: "audio/guns/m1a1_reload_01.mp3",
                volume: 1
            },
            m1a1_switch_01: {
                path: "audio/guns/m1a1_switch_01.mp3",
                volume: 1
            },
            mp5_01: {
                path: "audio/guns/mp5_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            mp5_reload_01: {
                path: "audio/guns/mp5_reload_01.mp3",
                volume: 1
            },
            mp5_switch_01: {
                path: "audio/guns/mp5_switch_01.mp3",
                volume: 1
            },
            mac10_01: {
                path: "audio/guns/mac10_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            mac10_reload_01: {
                path: "audio/guns/mac10_reload_01.mp3",
                volume: 1
            },
            mac10_switch_01: {
                path: "audio/guns/mac10_switch_01.mp3",
                volume: 1
            },
            ump9_01: {
                path: "audio/guns/ump9_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            ump9_reload_01: {
                path: "audio/guns/ump9_reload_01.mp3",
                volume: 1
            },
            ump9_switch_01: {
                path: "audio/guns/ump9_switch_01.mp3",
                volume: 1
            },
            vector_01: {
                path: "audio/guns/vector_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            vector_02: {
                path: "audio/guns/vector_02.mp3",
                volume: 1,
                maxInstances: 5
            },
            vector_reload_01: {
                path: "audio/guns/vector_reload_01.mp3",
                volume: 1
            },
            vector_switch_01: {
                path: "audio/guns/vector_switch_01.mp3",
                volume: 1
            },
            scorpion_01: {
                path: "audio/guns/scorpion_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            scorpion_reload_01: {
                path: "audio/guns/scorpion_reload_01.mp3",
                volume: 1
            },
            scorpion_switch_01: {
                path: "audio/guns/scorpion_switch_01.mp3",
                volume: 1
            },
            vss_01: {
                path: "audio/guns/vss_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            vss_reload_01: {
                path: "audio/guns/vss_reload_01.mp3",
                volume: 1
            },
            vss_switch_01: {
                path: "audio/guns/vss_switch_01.mp3",
                volume: 1
            },
            famas_01: {
                path: "audio/guns/famas_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            famas_reload_01: {
                path: "audio/guns/famas_reload_01.mp3",
                volume: 1
            },
            famas_switch_01: {
                path: "audio/guns/famas_switch_01.mp3",
                volume: 1
            },
            hk416_01: {
                path: "audio/guns/hk416_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            hk416_reload_01: {
                path: "audio/guns/hk416_reload_01.mp3",
                volume: 1
            },
            hk416_switch_01: {
                path: "audio/guns/hk416_switch_01.mp3",
                volume: 1
            },
            m4a1_01: {
                path: "audio/guns/m4a1_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m4a1_reload_01: {
                path: "audio/guns/m4a1_reload_01.mp3",
                volume: 1
            },
            m4a1_switch_01: {
                path: "audio/guns/m4a1_switch_01.mp3",
                volume: 1
            },
            mk12_01: {
                path: "audio/guns/mk12_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            mk12_reload_01: {
                path: "audio/guns/mk12_reload_01.mp3",
                volume: 1
            },
            mk12_switch_01: {
                path: "audio/guns/mk12_switch_01.mp3",
                volume: 1
            },
            l86_01: {
                path: "audio/guns/l86_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            l86_reload_01: {
                path: "audio/guns/l86_reload_01.mp3",
                volume: 1
            },
            l86_switch_01: {
                path: "audio/guns/l86_switch_01.mp3",
                volume: 1
            },
            m249_01: {
                path: "audio/guns/m249_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            m249_reload_01: {
                path: "audio/guns/m249_reload_01.mp3",
                volume: 1.5
            },
            m249_switch_01: {
                path: "audio/guns/m249_switch_01.mp3",
                volume: 1.5
            },
            qbb97_01: {
                path: "audio/guns/qbb97_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            qbb97_reload_01: {
                path: "audio/guns/qbb97_reload_01.mp3",
                volume: 1
            },
            qbb97_switch_01: {
                path: "audio/guns/qbb97_switch_01.mp3",
                volume: 1
            },
            scout_01: {
                path: "audio/guns/scout_01.mp3",
                volume: 2,
                maxInstances: 5
            },
            scout_reload_01: {
                path: "audio/guns/scout_reload_01.mp3",
                volume: 1.2
            },
            scout_cycle_01: {
                path: "audio/guns/scout_cycle_01.mp3",
                volume: 1.2
            },
            scout_pull_01: {
                path: "audio/guns/scout_pull_01.mp3",
                volume: 1.2
            },
            model94_01: {
                path: "audio/guns/model94_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            model94_reload_01: {
                path: "audio/guns/model94_reload_01.mp3",
                volume: 1
            },
            model94_cycle_01: {
                path: "audio/guns/model94_cycle_01.mp3",
                volume: 1
            },
            mkg45_01: {
                path: "audio/guns/mkg45_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            mkg45_reload_01: {
                path: "audio/guns/mkg45_reload_01.mp3",
                volume: 1.25
            },
            mkg45_switch_01: {
                path: "audio/guns/mkg45_switch_01.mp3",
                volume: 1.25
            },
            blr_01: {
                path: "audio/guns/blr_01.mp3",
                volume: 1.5,
                maxInstances: 5
            },
            blr_reload_01: {
                path: "audio/guns/blr_reload_01.mp3",
                volume: 1
            },
            blr_cycle_01: {
                path: "audio/guns/blr_cycle_01.mp3",
                volume: 1
            },
            mosin_01: {
                path: "audio/guns/mosin_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            mosin_reload_01: {
                path: "audio/guns/mosin_reload_01.mp3",
                volume: 1
            },
            mosin_reload_02: {
                path: "audio/guns/mosin_reload_02.mp3",
                volume: 1
            },
            mosin_cycle_01: {
                path: "audio/guns/mosin_cycle_01.mp3",
                volume: 1
            },
            mosin_pull_01: {
                path: "audio/guns/mosin_pull_01.mp3",
                volume: 1
            },
            sv98_01: {
                path: "audio/guns/sv98_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            sv98_reload_01: {
                path: "audio/guns/sv98_reload_01.mp3",
                volume: 1
            },
            sv98_cycle_01: {
                path: "audio/guns/sv98_cycle_01.mp3",
                volume: 1
            },
            sv98_pull_01: {
                path: "audio/guns/sv98_pull_01.mp3",
                volume: 1
            },
            awc_01: {
                path: "audio/guns/awc_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            awc_reload_01: {
                path: "audio/guns/awc_reload_01.mp3",
                volume: 1
            },
            awc_cycle_01: {
                path: "audio/guns/awc_cycle_01.mp3",
                volume: 1
            },
            awc_pull_01: {
                path: "audio/guns/awc_pull_01.mp3",
                volume: 1
            },
            potato_cannon_01: {
                path: "audio/guns/potato_cannon_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            potato_cannon_reload_01: {
                path: "audio/guns/potato_cannon_reload_01.mp3",
                volume: 1
            },
            potato_cannon_switch_01: {
                path: "audio/guns/potato_cannon_switch_01.mp3",
                volume: 1
            },
            potato_smg_01: {
                path: "audio/guns/potato_smg_01.mp3",
                volume: 1,
                maxInstances: 5
            },
            potato_smg_reload_01: {
                path: "audio/guns/potato_smg_reload_01.mp3",
                volume: 1
            },
            potato_smg_switch_01: {
                path: "audio/guns/potato_smg_switch_01.mp3",
                volume: 1
            },
            bugle_01: {
                path: "audio/guns/bugle_01.mp3",
                volume: 1.5,
                maxInstances: 3,
                preload: !1
            },
            bugle_02: {
                path: "audio/guns/bugle_02.mp3",
                volume: 1.5,
                maxInstances: 3,
                preload: !1
            },
            bugle_03: {
                path: "audio/guns/bugle_03.mp3",
                volume: 1.5,
                maxInstances: 3,
                preload: !1
            },
            empty_fire_01: {
                path: "audio/guns/empty_fire_01.mp3",
                volume: .9
            },
            empty_fire_02: {
                path: "audio/guns/empty_fire_02.mp3",
                volume: .9
            },
            gun_switch_01: {
                path: "audio/guns/gun_switch_01.mp3",
                volume: 1
            },
            bandage_use_01: {
                path: "audio/ui/bandage_use_01.mp3",
                volume: 1
            },
            healthkit_use_01: {
                path: "audio/ui/healthkit_use_01.mp3",
                volume: 1
            },
            soda_use_01: {
                path: "audio/ui/soda_use_01.mp3",
                volume: 1
            },
            pills_use_01: {
                path: "audio/ui/pills_use_01.mp3",
                volume: 1
            },
            stow_weapon_01: {
                path: "audio/ui/stow_weapon_01.mp3",
                volume: 1
            }
        },
        hits: {
            stone_bullet_hit_01: {
                path: "audio/hits/stone_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            wood_bullet_hit_01: {
                path: "audio/hits/wood_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            wood_bullet_hit_02: {
                path: "audio/hits/wood_bullet_hit_02.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            wood_bullet_hit_03: {
                path: "audio/hits/wood_bullet_hit_03.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            wood_bullet_hit_04: {
                path: "audio/hits/wood_bullet_hit_04.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            bush_bullet_hit_01: {
                path: "audio/hits/bush_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            metal_bullet_hit_01: {
                path: "audio/hits/metal_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            metal_bullet_hit_02: {
                path: "audio/hits/metal_bullet_hit_02.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            metal_bullet_hit_03: {
                path: "audio/hits/metal_bullet_hit_03.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            metal_bullet_hit_04: {
                path: "audio/hits/metal_bullet_hit_04.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 6
            },
            pan_bullet_hit_01: {
                path: "audio/hits/pan_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 6
            },
            brick_bullet_hit_01: {
                path: "audio/hits/brick_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            punch_hit_01: {
                path: "audio/hits/punch_hit_01.mp3",
                volume: 1
            },
            knife_hit_01: {
                path: "audio/hits/knife_hit_01.mp3",
                volume: 1
            },
            pan_hit_01: {
                path: "audio/hits/pan_hit_01.mp3",
                volume: 1
            },
            axe_hit_01: {
                path: "audio/hits/axe_hit_01.mp3",
                volume: 1
            },
            hook_hit_01: {
                path: "audio/hits/hook_hit_01.mp3",
                volume: 1
            },
            saw_hit_01: {
                path: "audio/hits/saw_hit_01.mp3",
                volume: 2.5
            },
            crowbar_hit_01: {
                path: "audio/hits/crowbar_hit_01.mp3",
                volume: 1
            },
            spade_hit_01: {
                path: "audio/hits/spade_hit_01.mp3",
                volume: 1
            },
            hammer_hit_01: {
                path: "audio/hits/hammer_hit_01.mp3",
                volume: 1
            },
            metal_punch_hit_01: {
                path: "audio/hits/metal_punch_hit_01.mp3",
                volume: 1
            },
            metal_punch_hit_02: {
                path: "audio/hits/metal_punch_hit_02.mp3",
                volume: 1
            },
            player_bullet_hit_01: {
                path: "audio/hits/player_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            player_bullet_hit_02: {
                path: "audio/hits/player_bullet_hit_02.mp3",
                volume: 1,
                canCoalesce: !0
            },
            plastic_bullet_hit_01: {
                path: "audio/hits/plastic_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            toilet_bullet_hit_01: {
                path: "audio/hits/toilet_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            toilet_bullet_hit_02: {
                path: "audio/hits/toilet_bullet_hit_02.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            glass_bullet_hit_01: {
                path: "audio/hits/glass_bullet_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            concrete_hit_01: {
                path: "audio/hits/concrete_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            frag_grass_01: {
                path: "audio/hits/frag_grass_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            frag_sand_01: {
                path: "audio/hits/frag_sand_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            frag_water_01: {
                path: "audio/hits/frag_water_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            cloth_hit_01: {
                path: "audio/hits/cloth_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            cloth_hit_02: {
                path: "audio/hits/cloth_hit_02.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            organic_hit_01: {
                path: "audio/hits/organic_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            piano_hit_01: {
                path: "audio/hits/piano_hit_01.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            },
            piano_hit_02: {
                path: "audio/hits/piano_hit_02.mp3",
                volume: 1,
                canCoalesce: !0,
                maxInstances: 3
            }
        },
        sfx: {
            crate_break_01: {
                path: "audio/sfx/crate_break_01.mp3",
                volume: 1
            },
            crate_break_02: {
                path: "audio/sfx/crate_break_02.mp3",
                volume: 1
            },
            tree_break_01: {
                path: "audio/sfx/tree_break_01.mp3",
                volume: 1
            },
            bush_break_01: {
                path: "audio/sfx/bush_break_01.mp3",
                volume: 1
            },
            bush_enter_01: {
                path: "audio/sfx/bush_enter_01.mp3",
                volume: 1,
                canCoalesce: !0
            },
            bush_enter_02: {
                path: "audio/sfx/bush_enter_02.mp3",
                volume: 1,
                canCoalesce: !0
            },
            barrel_break_01: {
                path: "audio/sfx/barrel_break_01.mp3",
                volume: 1
            },
            barrel_break_02: {
                path: "audio/sfx/barrel_break_02.mp3",
                volume: 1
            },
            stone_break_01: {
                path: "audio/sfx/stone_break_01.mp3",
                volume: 1
            },
            wall_break_01: {
                path: "audio/sfx/wall_break_01.mp3",
                volume: 1
            },
            ceiling_break_01: {
                path: "audio/sfx/ceiling_break_01.mp3",
                volume: 1
            },
            ceiling_break_02: {
                path: "audio/sfx/ceiling_break_02.mp3",
                volume: 1
            },
            toilet_break_01: {
                path: "audio/sfx/toilet_break_01.mp3",
                volume: 1
            },
            toilet_break_02: {
                path: "audio/sfx/toilet_break_02.mp3",
                volume: 1
            },
            vending_break_01: {
                path: "audio/sfx/vending_break_01.mp3",
                volume: 1
            },
            window_break_01: {
                path: "audio/sfx/window_break_01.mp3",
                volume: 1
            },
            window_break_02: {
                path: "audio/sfx/window_break_02.mp3",
                volume: 1
            },
            drawers_break_01: {
                path: "audio/sfx/drawers_break_01.mp3",
                volume: 1
            },
            oven_break_01: {
                path: "audio/sfx/oven_break_01.mp3",
                volume: 1
            },
            deposit_box_break_01: {
                path: "audio/sfx/deposit_box_break_01.mp3",
                volume: 1
            },
            cloth_break_01: {
                path: "audio/sfx/cloth_break_01.mp3",
                volume: 1
            },
            screen_break_01: {
                path: "audio/sfx/screen_break_01.mp3",
                volume: 1
            },
            pumpkin_break_01: {
                path: "audio/sfx/pumpkin_break_01.mp3",
                volume: 1,
                preload: !1
            },
            ceramic_break_01: {
                path: "audio/sfx/ceramic_break_01.mp3",
                volume: 1
            },
            footstep_grass_01: {
                path: "audio/sfx/footstep_grass_01.mp3",
                volume: 1
            },
            footstep_grass_02: {
                path: "audio/sfx/footstep_grass_02.mp3",
                volume: 1
            },
            footstep_metal_01: {
                path: "audio/sfx/footstep_metal_01.mp3",
                volume: 1
            },
            footstep_metal_02: {
                path: "audio/sfx/footstep_metal_02.mp3",
                volume: 1
            },
            footstep_metal_03: {
                path: "audio/sfx/footstep_metal_03.mp3",
                volume: 1
            },
            footstep_metal_04: {
                path: "audio/sfx/footstep_metal_04.mp3",
                volume: 1
            },
            footstep_metal_05: {
                path: "audio/sfx/footstep_metal_05.mp3",
                volume: 1
            },
            footstep_wood_01: {
                path: "audio/sfx/footstep_wood_01.mp3",
                volume: 1
            },
            footstep_wood_02: {
                path: "audio/sfx/footstep_wood_02.mp3",
                volume: 1
            },
            footstep_wood_03: {
                path: "audio/sfx/footstep_wood_03.mp3",
                volume: 1
            },
            footstep_sand_01: {
                path: "audio/sfx/footstep_sand_01.mp3",
                volume: 1
            },
            footstep_sand_02: {
                path: "audio/sfx/footstep_sand_02.mp3",
                volume: 1
            },
            footstep_water_01: {
                path: "audio/sfx/footstep_water_01.mp3",
                volume: 1
            },
            footstep_water_02: {
                path: "audio/sfx/footstep_water_02.mp3",
                volume: 1
            },
            footstep_tile_01: {
                path: "audio/sfx/footstep_tile_01.mp3",
                volume: 1
            },
            footstep_tile_02: {
                path: "audio/sfx/footstep_tile_02.mp3",
                volume: 1
            },
            footstep_asphalt_01: {
                path: "audio/sfx/footstep_asphalt_01.mp3",
                volume: 1
            },
            footstep_asphalt_02: {
                path: "audio/sfx/footstep_asphalt_02.mp3",
                volume: 1
            },
            footstep_brick_01: {
                path: "audio/sfx/footstep_brick_01.mp3",
                volume: 1
            },
            footstep_stone_01: {
                path: "audio/sfx/footstep_stone_01.mp3",
                volume: .8
            },
            footstep_carpet_01: {
                path: "audio/sfx/footstep_carpet_01.mp3",
                volume: 1
            },
            punch_swing_01: {
                path: "audio/sfx/punch_swing_01.mp3",
                volume: 1
            },
            knife_swing_01: {
                path: "audio/sfx/knife_swing_01.mp3",
                volume: 1
            },
            medium_swing_01: {
                path: "audio/sfx/medium_swing_01.mp3",
                volume: 1
            },
            heavy_swing_01: {
                path: "audio/sfx/heavy_swing_01.mp3",
                volume: 1
            },
            bullet_whiz_01: {
                path: "audio/sfx/bullet_whiz_01.mp3",
                volume: 1
            },
            bullet_whiz_02: {
                path: "audio/sfx/bullet_whiz_02.mp3",
                volume: 1
            },
            bullet_whiz_03: {
                path: "audio/sfx/bullet_whiz_03.mp3",
                volume: 1
            },
            frag_throw_01: {
                path: "audio/sfx/frag_throw_01.mp3",
                volume: 1
            },
            frag_pin_01: {
                path: "audio/sfx/frag_pin_01.mp3",
                volume: 1
            },
            frag_deploy_01: {
                path: "audio/ui/frag_pickup_01.mp3",
                volume: 1
            },
            frag_water_01: {
                path: "audio/hits/frag_water_01.mp3",
                volume: 1
            },
            strobe_click_01: {
                path: "audio/sfx/strobe_click_01.mp3",
                volume: 1
            },
            explosion_01: {
                path: "audio/sfx/explosion_01.mp3",
                volume: 1
            },
            explosion_02: {
                path: "audio/sfx/explosion_02.mp3",
                volume: 1
            },
            explosion_03: {
                path: "audio/sfx/explosion_03.mp3",
                volume: 1
            },
            explosion_04: {
                path: "audio/sfx/explosion_04.mp3",
                volume: 1,
                maxInstances: 4
            },
            explosion_05: {
                path: "audio/sfx/explosion_05.mp3",
                volume: 1
            },
            explosion_smoke_01: {
                path: "audio/sfx/explosion_smoke_01.mp3",
                volume: 1
            },
            snowball_01: {
                path: "audio/sfx/snowball_01.mp3",
                volume: 1,
                preload: !1
            },
            snowball_02: {
                path: "audio/sfx/snowball_02.mp3",
                volume: 1,
                preload: !1
            },
            potato_01: {
                path: "audio/sfx/potato_01.mp3",
                volume: 1,
                preload: !1
            },
            potato_02: {
                path: "audio/sfx/potato_02.mp3",
                volume: 1,
                preload: !1
            },
            stow_weapon_01: {
                path: "audio/ui/stow_weapon_01.mp3",
                volume: 1
            },
            knife_deploy_01: {
                path: "audio/ui/knife_deploy_01.mp3",
                volume: 1
            },
            pan_pickup_01: {
                path: "audio/ui/pan_pickup_01.mp3",
                volume: 1
            },
            knuckles_deploy_01: {
                path: "audio/ui/knuckles_deploy_01.mp3",
                volume: 1
            },
            door_open_01: {
                path: "audio/sfx/door_open_01.mp3",
                volume: 1
            },
            door_close_01: {
                path: "audio/sfx/door_close_01.mp3",
                volume: 1
            },
            door_open_02: {
                path: "audio/sfx/door_open_02.mp3",
                volume: 1
            },
            door_close_02: {
                path: "audio/sfx/door_close_02.mp3",
                volume: 1
            },
            door_open_03: {
                path: "audio/sfx/door_open_03.mp3",
                volume: 1
            },
            door_close_03: {
                path: "audio/sfx/door_close_03.mp3",
                volume: 1
            },
            door_open_04: {
                path: "audio/sfx/door_open_04.mp3",
                volume: .8
            },
            door_error_01: {
                path: "audio/sfx/door_error_01.mp3",
                volume: 1
            },
            vault_change_01: {
                path: "audio/sfx/vault_change_01.mp3",
                volume: 1
            },
            vault_change_02: {
                path: "audio/sfx/vault_change_02.mp3",
                volume: 1,
                preload: !1
            },
            vault_change_03: {
                path: "audio/sfx/vault_change_03.mp3",
                volume: 1,
                preload: !1
            },
            cell_control_01: {
                path: "audio/sfx/cell_control_01.mp3",
                volume: 1
            },
            cell_control_02: {
                path: "audio/sfx/cell_control_02.mp3",
                volume: 1
            },
            plane_01: {
                path: "audio/sfx/plane_01.mp3",
                volume: 1
            },
            plane_02: {
                path: "audio/sfx/plane_02.mp3",
                volume: 1,
                preload: !1
            },
            fighter_01: {
                path: "audio/sfx/fighter_01.mp3",
                volume: 1
            },
            airdrop_chute_01: {
                path: "audio/sfx/airdrop_chute_01.mp3",
                volume: 1
            },
            airdrop_fall_01: {
                path: "audio/sfx/airdrop_fall_01.mp3",
                volume: 1
            },
            airdrop_crash_01: {
                path: "audio/sfx/airdrop_crash_01.mp3",
                volume: 1
            },
            airdrop_crash_02: {
                path: "audio/sfx/airdrop_crash_02.mp3",
                volume: 1
            },
            airdrop_open_01: {
                path: "audio/sfx/airdrop_open_01.mp3",
                volume: 1
            },
            airdrop_open_02: {
                path: "audio/sfx/airdrop_open_02.mp3",
                volume: 1
            },
            button_press_01: {
                path: "audio/sfx/button_press_01.mp3",
                volume: 1,
                maxInstances: 3
            },
            watering_01: {
                path: "audio/sfx/watering_01.mp3",
                volume: 1,
                maxInstances: 3,
                preload: !1
            },
            piano_02: {
                path: "audio/sfx/piano_02.mp3",
                volume: 1,
                preload: !1
            },
            footstep_08: {
                path: "audio/sfx/footstep_08.mp3",
                volume: 1,
                preload: !1
            },
            footstep_09: {
                path: "audio/sfx/footstep_09.mp3",
                volume: 1,
                preload: !1
            },
            howl_01: {
                path: "audio/sfx/howl_01.mp3",
                volume: 1,
                preload: !1
            },
            wheel_control_01: {
                path: "audio/sfx/wheel_control_01.mp3",
                volume: 1,
                preload: !1
            },
            log_01: {
                path: "audio/sfx/log_01.mp3",
                volume: 1,
                preload: !1
            },
            log_02: {
                path: "audio/sfx/log_02.mp3",
                volume: 1,
                preload: !1
            },
            log_03: {
                path: "audio/sfx/log_03.mp3",
                volume: 1,
                preload: !1
            },
            log_04: {
                path: "audio/sfx/log_04.mp3",
                volume: 1,
                preload: !1
            },
            log_05: {
                path: "audio/sfx/log_05.mp3",
                volume: 1,
                preload: !1
            },
            log_06: {
                path: "audio/sfx/log_06.mp3",
                volume: 1,
                preload: !1
            },
            log_11: {
                path: "audio/sfx/log_11.mp3",
                volume: 4,
                preload: !1
            },
            log_12: {
                path: "audio/sfx/log_12.mp3",
                volume: 4,
                preload: !1
            },
            log_13: {
                path: "audio/sfx/log_13.mp3",
                volume: 2,
                preload: !1
            },
            log_14: {
                path: "audio/sfx/log_14.mp3",
                volume: 2,
                preload: !1
            },
            ability_stim_01: {
                path: "audio/sfx/ability_stim_01.mp3",
                volume: 4
            },
            xp_drop_01: {
                path: "audio/sfx/xp_drop_01.mp3",
                volume: 1.25,
                preload: !1
            },
            xp_drop_02: {
                path: "audio/sfx/xp_drop_02.mp3",
                volume: 1.25,
                preload: !1
            },
            cluck_01: {
                path: "audio/sfx/cluck_01.mp3",
                volume: 1,
                preload: !1
            },
            cluck_02: {
                path: "audio/sfx/cluck_02.mp3",
                volume: 1,
                preload: !1
            },
            feather_01: {
                path: "audio/sfx/feather_01.mp3",
                volume: 1,
                preload: !1
            }
        },
        ambient: {
            ambient_wind_01: {
                path: "audio/ambient/ambient_wind_01.mp3",
                volume: 1,
                loadPriority: 1
            },
            ambient_waves_01: {
                path: "audio/ambient/ambient_waves_01.mp3",
                volume: 1,
                loadPriority: 1
            },
            ambient_stream_01: {
                path: "audio/ambient/ambient_stream_01.mp3",
                volume: 1,
                loadPriority: 1
            },
            piano_music_01: {
                path: "audio/ambient/piano_music_01.mp3",
                volume: 1,
                preload: !1
            },
            ambient_wind_02: {
                path: "audio/ambient/ambient_wind_02.mp3",
                volume: 1,
                preload: !1
            },
            ambient_steam_01: {
                path: "audio/ambient/ambient_steam_01.mp3",
                volume: 1,
                preload: !1
            },
            club_music_01: {
                path: "audio/ambient/club_music_01.mp3",
                volume: 1,
                preload: !1
            },
            club_music_02: {
                path: "audio/ambient/club_music_02.mp3",
                volume: 1,
                preload: !1
            },
            ambient_lab_01: {
                path: "audio/ambient/ambient_lab_01.mp3",
                volume: .2,
                preload: !1
            }
        },
        ui: {
            ammo_pickup_01: {
                path: "audio/ui/ammo_pickup_01.mp3",
                volume: 1
            },
            clothes_pickup_01: {
                path: "audio/ui/clothes_pickup_01.mp3",
                volume: 1
            },
            bells_01: {
                path: "audio/sfx/plane_02.mp3",
                volume: 1,
                preload: !1
            },
            helmet_pickup_01: {
                path: "audio/ui/helmet_pickup_01.mp3",
                volume: 1
            },
            chest_pickup_01: {
                path: "audio/ui/chest_pickup_01.mp3",
                volume: 1
            },
            gun_pickup_01: {
                path: "audio/ui/gun_pickup_01.mp3",
                volume: 1
            },
            scope_pickup_01: {
                path: "audio/ui/scope_pickup_01.mp3",
                volume: 1
            },
            pack_pickup_01: {
                path: "audio/ui/pack_pickup_01.mp3",
                volume: 1
            },
            soda_pickup_01: {
                path: "audio/ui/soda_pickup_01.mp3",
                volume: 1
            },
            pills_pickup_01: {
                path: "audio/ui/pills_pickup_01.mp3",
                volume: 1
            },
            bandage_pickup_01: {
                path: "audio/ui/bandage_pickup_01.mp3",
                volume: 1
            },
            healthkit_pickup_01: {
                path: "audio/ui/healthkit_pickup_01.mp3",
                volume: 1
            },
            frag_pickup_01: {
                path: "audio/ui/frag_pickup_01.mp3",
                volume: 1
            },
            snowball_pickup_01: {
                path: "audio/ui/snowball_pickup_01.mp3",
                volume: 1,
                preload: !1
            },
            potato_pickup_01: {
                path: "audio/ui/potato_pickup_01.mp3",
                volume: 1,
                preload: !1
            },
            heavy_pickup_01: {
                path: "audio/ui/heavy_pickup_01.mp3",
                volume: 1
            },
            pan_pickup_01: {
                path: "audio/ui/pan_pickup_01.mp3",
                volume: 1
            },
            perk_pickup_01: {
                path: "audio/ui/perk_pickup_01.mp3",
                volume: 1
            },
            xp_pickup_01: {
                path: "audio/ui/xp_pickup_01.mp3",
                volume: 1.5,
                preload: !1
            },
            xp_pickup_02: {
                path: "audio/ui/xp_pickup_02.mp3",
                volume: 1.5,
                preload: !1
            },
            ping_danger_01: {
                path: "audio/ui/ping_danger_01.mp3",
                volume: 1
            },
            ping_coming_01: {
                path: "audio/ui/ping_coming_01.mp3",
                volume: 1
            },
            ping_help_01: {
                path: "audio/ui/ping_help_01.mp3",
                volume: 1
            },
            ping_leader_01: {
                path: "audio/ui/ping_leader_01.mp3",
                volume: 1,
                preload: !1
            },
            ping_airdrop_01: {
                path: "audio/ui/ping_airdrop_01.mp3",
                volume: 1
            },
            ping_airstrike_01: {
                path: "audio/ui/ping_airstrike_01.mp3",
                volume: 1
            },
            ping_unlock_01: {
                path: "audio/ui/ping_unlock_01.mp3",
                volume: 1,
                preload: !1
            },
            emote_01: {
                path: "audio/ui/emote_01.mp3",
                volume: 1
            },
            trick_01: {
                path: "audio/ui/trick_01.mp3",
                volume: 1.5,
                preload: !1
            },
            trick_02: {
                path: "audio/ui/trick_02.mp3",
                volume: 1.5,
                preload: !1
            },
            trick_03: {
                path: "audio/ui/trick_03.mp3",
                volume: 1.5,
                preload: !1
            },
            treat_01: {
                path: "audio/ui/treat_01.mp3",
                volume: 1,
                preload: !1
            },
            loot_drop_01: {
                path: "audio/ui/loot_drop_01.mp3",
                volume: 1
            },
            notification_start_01: {
                path: "audio/ui/notification_start_01.mp3",
                volume: 1
            },
            notification_join_01: {
                path: "audio/ui/notification_join_01.mp3",
                volume: 1
            },
            leader_assigned_01: {
                path: "audio/ui/leader_assigned_01.mp3",
                volume: 1,
                maxInstances: 1
            },
            leader_dead_01: {
                path: "audio/ui/leader_dead_01.mp3",
                volume: 1.75,
                maxInstances: 1
            },
            lt_assigned_01: {
                path: "audio/ui/lt_assigned_01.mp3",
                volume: 1,
                preload: !1,
                maxInstances: 1
            },
            medic_assigned_01: {
                path: "audio/ui/medic_assigned_01.mp3",
                volume: 2,
                preload: !1,
                maxInstances: 1
            },
            marksman_assigned_01: {
                path: "audio/ui/marksman_assigned_01.mp3",
                volume: 2,
                preload: !1,
                maxInstances: 1
            },
            recon_assigned_01: {
                path: "audio/ui/recon_assigned_01.mp3",
                volume: 1.5,
                preload: !1,
                maxInstances: 1
            },
            grenadier_assigned_01: {
                path: "audio/ui/grenadier_assigned_01.mp3",
                volume: 2.5,
                preload: !1,
                maxInstances: 1
            },
            bugler_assigned_01: {
                path: "audio/ui/bugler_assigned_01.mp3",
                volume: 2.5,
                preload: !1,
                maxInstances: 1
            },
            last_man_assigned_01: {
                path: "audio/ui/last_man_assigned_01.mp3",
                volume: 1.75,
                preload: !1,
                maxInstances: 1
            },
            helmet03_forest_pickup_01: {
                path: "audio/ui/helmet03_forest_pickup_01.mp3",
                volume: 1,
                maxInstances: 1,
                preload: !1
            },
            kill_leader_assigned_01: {
                path: "audio/ui/kill_leader_assigned_01.mp3",
                volume: 1.5,
                maxInstances: 1,
                preload: !1
            },
            kill_leader_assigned_02: {
                path: "audio/ui/kill_leader_assigned_02.mp3",
                volume: 1.5,
                maxInstances: 1,
                preload: !1
            },
            kill_leader_dead_01: {
                path: "audio/ui/kill_leader_dead_01.mp3",
                volume: 1.5,
                maxInstances: 1,
                preload: !1
            },
            kill_leader_dead_02: {
                path: "audio/ui/kill_leader_dead_02.mp3",
                volume: 1.5,
                maxInstances: 1,
                preload: !1
            },
            spawn_01: {
                path: "audio/ui/spawn_01.mp3",
                volume: 3,
                preload: !1
            }
        },
        music: {
            menu_music: {
                path: "audio/ambient/menu_music_01.mp3",
                volume: 1,
                loadPriority: 2
            }
        }
    }
      , Dl = {
        footstep_grass: {
            channel: "sfx",
            sounds: ["footstep_grass_01", "footstep_grass_02"]
        },
        footstep_container: {
            channel: "sfx",
            sounds: ["footstep_metal_03"]
        },
        footstep_warehouse: {
            channel: "sfx",
            sounds: ["footstep_metal_01", "footstep_metal_02"]
        },
        footstep_house: {
            channel: "sfx",
            sounds: ["footstep_wood_02", "footstep_wood_03"]
        },
        footstep_shack: {
            channel: "sfx",
            sounds: ["footstep_wood_01"]
        },
        footstep_sand: {
            channel: "sfx",
            sounds: ["footstep_sand_01", "footstep_sand_02"]
        },
        footstep_water: {
            channel: "sfx",
            sounds: ["footstep_water_01", "footstep_water_02"]
        },
        footstep_tile: {
            channel: "sfx",
            sounds: ["footstep_tile_01", "footstep_tile_02"]
        },
        footstep_asphalt: {
            channel: "sfx",
            sounds: ["footstep_asphalt_01", "footstep_asphalt_02"]
        },
        footstep_brick: {
            channel: "sfx",
            sounds: ["footstep_brick_01"]
        },
        footstep_bunker: {
            channel: "sfx",
            sounds: ["footstep_metal_04", "footstep_metal_05"]
        },
        footstep_stone: {
            channel: "sfx",
            sounds: ["footstep_stone_01"]
        },
        footstep_carpet: {
            channel: "sfx",
            sounds: ["footstep_carpet_01"]
        },
        player_bullet_hit: {
            channel: "hits",
            sounds: ["player_bullet_hit_01"]
        },
        metal_punch: {
            channel: "hits",
            sounds: ["metal_punch_hit_01", "metal_punch_hit_02"]
        },
        cloth_punch: {
            channel: "hits",
            sounds: ["cloth_hit_01"]
        },
        cloth_bullet: {
            channel: "hits",
            sounds: ["cloth_hit_02"]
        },
        organic_hit: {
            channel: "hits",
            sounds: ["organic_hit_01"]
        },
        piano_hit: {
            channel: "hits",
            sounds: ["piano_hit_01", "piano_hit_02"]
        },
        wall_bullet: {
            channel: "hits",
            sounds: ["metal_bullet_hit_01"]
        },
        wall_wood_bullet: {
            channel: "hits",
            sounds: ["wood_bullet_hit_02"]
        },
        wall_brick_bullet: {
            channel: "hits",
            sounds: ["brick_bullet_hit_01"]
        },
        stone_bullet: {
            channel: "hits",
            sounds: ["stone_bullet_hit_01"]
        },
        barrel_bullet: {
            channel: "hits",
            sounds: ["metal_bullet_hit_03"]
        },
        pan_bullet: {
            channel: "hits",
            sounds: ["pan_bullet_hit_01"]
        },
        silo_bullet: {
            channel: "hits",
            sounds: ["metal_bullet_hit_04"]
        },
        toilet_porc_bullet: {
            channel: "hits",
            sounds: ["toilet_bullet_hit_01"]
        },
        toilet_metal_bullet: {
            channel: "hits",
            sounds: ["toilet_bullet_hit_02"]
        },
        glass_bullet: {
            channel: "hits",
            sounds: ["glass_bullet_hit_01"]
        },
        cobalt_bullet: {
            channel: "hits",
            sounds: ["metal_bullet_hit_02"]
        },
        concrete_hit: {
            channel: "hits",
            sounds: ["concrete_hit_01"]
        },
        wood_prop_bullet: {
            channel: "hits",
            sounds: ["wood_bullet_hit_03"]
        },
        wood_crate_bullet: {
            channel: "hits",
            sounds: ["wood_bullet_hit_04"]
        },
        ammo_crate_bullet: {
            channel: "hits",
            sounds: ["plastic_bullet_hit_01"]
        },
        bush_bullet: {
            channel: "hits",
            sounds: ["bush_bullet_hit_01"]
        },
        tree_bullet: {
            channel: "hits",
            sounds: ["wood_bullet_hit_01"]
        },
        player_bullet_grunt: {
            channel: "hits",
            sounds: ["player_bullet_hit_02"]
        },
        bullet_whiz: {
            channel: "sfx",
            sounds: ["bullet_whiz_01", "bullet_whiz_02", "bullet_whiz_03"]
        },
        frag_grass: {
            channel: "hits",
            sounds: ["frag_grass_01"]
        },
        frag_sand: {
            channel: "hits",
            sounds: ["frag_sand_01"]
        },
        frag_water: {
            channel: "hits",
            sounds: ["frag_water_01"]
        },
        kill_leader_assigned: {
            channel: "ui",
            sounds: ["kill_leader_assigned_01", "kill_leader_assigned_02"]
        },
        kill_leader_dead: {
            channel: "ui",
            sounds: ["kill_leader_dead_01", "kill_leader_dead_02"]
        },
        cluck: {
            channel: "sfx",
            sounds: ["cluck_01", "cluck_02"]
        }
    }
      , Ol = {
        activePlayer: {
            volume: .5,
            maxRange: 48,
            list: "players",
            type: "sound"
        },
        otherPlayers: {
            volume: .5,
            maxRange: 48,
            list: "players",
            type: "sound"
        },
        hits: {
            volume: .4,
            maxRange: 48,
            list: "hits",
            type: "sound"
        },
        sfx: {
            volume: 1,
            maxRange: 48,
            list: "sfx",
            type: "sound"
        },
        ambient: {
            volume: 1,
            maxRange: 1,
            list: "ambient",
            type: "sound"
        },
        ui: {
            volume: .75,
            maxRange: 48,
            list: "ui",
            type: "sound"
        },
        music: {
            volume: 1,
            maxRange: 1,
            list: "music",
            type: "music"
        }
    }
      , El = {
        cathedral: {
            path: "audio/reverb/cathedral_01.mp3",
            volume: .7,
            stereoSpread: .004
        },
        cave: {
            path: "audio/reverb/cave_mono_01.mp3",
            volume: .7,
            echoVolume: .5,
            echoDelay: .25,
            echoLowPass: 800,
            stereoSpread: .004
        }
    }
      , je = {
        Sounds: Al,
        Groups: Dl,
        Channels: Ol,
        Reverbs: El
    }
      , ni = .003
      , Ur = .5;
    class Bl {
        mute = !1;
        masterVolume = 1;
        soundVolume = 1;
        musicVolume = 1;
        baseVolume = .5;
        sounds = {};
        loadedFiles = {};
        preloadedSounds = !1;
        cameraPos = e.create(0, 0);
        activeLayer = 0;
        underground = !1;
        soundInstances = [];
        constructor(t) {
            He.Sound.volume = .5,
            He.Sound.on("fileload", this.loadHandler, this)
        }
        preloadSounds() {
            if (!this.preloadedSounds) {
                this.preloadedSounds = !0;
                const t = {}
                  , a = Object.keys(je.Sounds);
                for (let c = 0; c < a.length; c++) {
                    const m = a[c]
                      , h = je.Sounds[m]
                      , u = Object.keys(h);
                    for (let g = 0; g < u.length; g++) {
                        const w = u[g];
                        t[w] !== void 0 && console.log(`Sound ${w} defined multiple times!`),
                        t[w] = !0
                    }
                }
                const i = []
                  , o = Object.keys(je.Channels);
                for (let c = 0; c < o.length; c++) {
                    const m = o[c]
                      , h = je.Channels[m]
                      , u = je.Sounds[h.list]
                      , g = Object.keys(u);
                    for (let w = 0; w < g.length; w++) {
                        const y = g[w]
                          , _ = u[y];
                        if (_.preload === void 0 || _.preload) {
                            const S = {
                                canCoalesce: _.canCoalesce,
                                channels: _.maxInstances,
                                volume: _.volume
                            };
                            i.push({
                                name: y,
                                channel: m,
                                path: _.path,
                                options: S,
                                priority: _.loadPriority || 0
                            })
                        }
                    }
                }
                i.sort( (c, m) => m.priority - c.priority);
                for (let c = 0; c < i.length; c++) {
                    const m = i[c];
                    this.loadSound(m)
                }
                const s = je.Reverbs
                  , l = Object.keys(s);
                for (let c = 0; c < l.length; c++) {
                    const m = l[c]
                      , h = s[m];
                    He.Sound.registerReverb(h.path, m, h)
                }
            }
        }
        loadSound(t) {
            const a = t.name + t.channel;
            this.sounds[a] || (He.Sound.registerSound(t.path, a, t.options),
            this.sounds[a] = {
                path: t.path,
                name: t.name,
                channel: t.channel
            })
        }
        loadHandler(t) {
            this.loadedFiles[t] = !0
        }
        update(t) {
            for (let o = this.soundInstances.length - 1; o >= 0; o--) {
                const s = this.soundInstances[o];
                (s.instance.playState == "playFinished" || s.instance.playState == "playInterrupted" || s.instance.playState == "playFailed") && this.soundInstances.splice(o, 1)
            }
            const a = [0, 1, 1 / 3, 2 / 3]
              , i = this.underground ? a[this.activeLayer] : 0;
            He.Sound.setReverbs({
                cathedral: i
            }),
            He.Sound.update(t)
        }
        playSound(t, a={}) {
            if (!t || t == "none")
                return null;
            a.channel = a.channel || "activePlayer",
            a.startSilent = a.startSilent || !1,
            a.forceStart = a.forceStart || !1,
            a.loop = a.loop || !1,
            a.soundPos = a.soundPos || null,
            a.fallOff = a.fallOff || 0,
            a.filter = a.filter || "",
            a.delay = a.delay || 0,
            a.ignoreMinAllowable = a.ignoreMinAllowable || !1,
            a.rangeMult = a.rangeMult || 1,
            a.offset = a.offset || 0,
            a.ambient = a.channel == "ambient" || a.channel == "music",
            a.detune = a.detune || 0,
            a.volumeScale = a.volumeScale || 1;
            let i = null;
            const o = je.Channels[a.channel];
            if (o && (!this.mute || a.forceStart)) {
                const s = this.baseVolume * 1 * this.getTypeVolume(o.type) * a.volumeScale
                  , l = a.layer !== void 0 && !f.sameAudioLayer(a.layer, this.activeLayer)
                  , c = a.filter ? l || a.forceFilter ? a.filter : "reverb" : "none";
                if (a.channel != "activePlayer" && a.soundPos) {
                    const m = e.sub(this.cameraPos, a.soundPos)
                      , h = e.length(m);
                    let u = o.maxRange * a.rangeMult;
                    k.eqAbs(u, 0) && (u = 1);
                    const g = k.clamp(Math.abs(h / u), 0, 1)
                      , w = Math.pow(1 - g, 1 + a.fallOff * 2);
                    let y = o.volume * w * s;
                    if (y = l ? y * Ur : y,
                    y > ni || a.ignoreMinAllowable) {
                        const _ = k.clamp(m.x / u * -1, -1, 1);
                        i = He.Sound.play(t + a.channel, {
                            filter: c,
                            loop: a.loop ? -1 : 0,
                            volume: a.startSilent ? 0 : y,
                            pan: _,
                            delay: a.delay,
                            offset: a.offset,
                            ambient: a.ambient,
                            detune: a.detune
                        })
                    }
                } else {
                    let m = o.volume * s;
                    m = l ? m * Ur : m,
                    i = He.Sound.play(t + a.channel, {
                        filter: c,
                        loop: a.loop ? -1 : 0,
                        volume: a.startSilent ? 0 : m,
                        delay: a.delay,
                        offset: a.offset,
                        ambient: a.ambient,
                        detune: a.detune
                    })
                }
                if (i && (a.loop || a.channel == "music")) {
                    const m = a.channel == "music" ? "music" : "sound";
                    this.soundInstances.push({
                        instance: i,
                        type: m
                    })
                }
            }
            return i
        }
        playGroup(t, a={}) {
            const i = je.Groups[t];
            if (i) {
                const o = i.sounds
                  , s = Math.floor(f.random(0, o.length));
                return a.channel = i.channel,
                this.playSound(o[s], a)
            }
            return null
        }
        updateSound(t, a, i, o={}) {
            o.fallOff = o.fallOff || 0,
            o.rangeMult = o.rangeMult || 1,
            o.ignoreMinAllowable = o.ignoreMinAllowable || !1,
            o.volumeScale = o.volumeScale || 1;
            const s = je.Channels[a];
            if (t && s) {
                const l = this.baseVolume * 1 * this.getTypeVolume(s.type) * o.volumeScale
                  , c = e.sub(this.cameraPos, i)
                  , m = e.length(c);
                let h = s.maxRange * o.rangeMult;
                k.eqAbs(h, 0) && (h = 1);
                const u = k.clamp(Math.abs(m / h), 0, 1)
                  , g = Math.pow(1 - u, 1 + o.fallOff * 2);
                let w = s.volume * g * l;
                if (w = o.layer === void 0 || f.sameAudioLayer(o.layer, this.activeLayer) ? w : w * Ur,
                w > ni || o.ignoreMinAllowable) {
                    const _ = k.clamp(c.x / h * -1, -1, 1);
                    t.volume = w,
                    t.pan = _
                }
            }
        }
        setMasterVolume(t) {
            t = k.clamp(t, 0, 1),
            He.Sound.volume = t
        }
        _setInstanceTypeVolume(t, a) {
            a = k.clamp(a, 0, 1);
            const i = this.getTypeVolume(t)
              , o = i > 1e-4 ? a / i : 0;
            for (let s = 0; s < this.soundInstances.length; s++) {
                const l = this.soundInstances[s];
                l.type == t && (l.instance.volume *= o)
            }
        }
        setSoundVolume(t) {
            this._setInstanceTypeVolume("sound", t),
            this.soundVolume = t
        }
        setMusicVolume(t) {
            this._setInstanceTypeVolume("music", t),
            this.musicVolume = t
        }
        setVolume(t, a, i) {
            if (t) {
                i = i || "sound";
                const o = this.getTypeVolume(i);
                t.volume = a * o
            }
        }
        getVolume(t) {
            return t ? t.volume : 0
        }
        setMute(t) {
            return this.mute = t,
            He.Sound.setMute(this.mute),
            this.mute
        }
        muteToggle() {
            return this.setMute(!this.mute)
        }
        stopSound(t) {
            t?.stop()
        }
        stopAll() {
            He.Sound.stop()
        }
        allLoaded() {
            const t = Object.keys(this.sounds);
            for (let a = 0; a < t.length; a++) {
                const i = this.sounds[t[a]];
                if (!this.isSoundLoaded(i.name, i.channel))
                    return !1
            }
            return !0
        }
        isSoundLoaded(t, a) {
            const i = this.sounds[t + a];
            return i && this.loadedFiles[i.path]
        }
        isSoundPlaying(t) {
            return !!t && t.playState == He.Sound.PLAY_SUCCEEDED
        }
        getSoundDefVolume(t, a) {
            const i = je.Sounds[a][t]
              , o = je.Channels[a];
            return i && o ? i.volume * o.volume : 1
        }
        getTypeVolume(t) {
            switch (t) {
            case "music":
                return this.musicVolume;
            case "sound":
                return this.soundVolume;
            default:
                return this.soundVolume
            }
        }
    }
    const Rl = {
        ENV: "website",
        muteAudio: !1,
        masterVolume: 1,
        soundVolume: 1,
        musicVolume: 1,
        highResTex: !0,
        interpolation: !0,
        screenShake: !0,
        anonPlayerNames: !1,
        touchMoveStyle: "anywhere",
        touchAimStyle: "anywhere",
        touchAimLine: !0,
        profile: null,
        playerName: "",
        region: "na",
        gameModeIdx: 2,
        teamAutoFill: !0,
        language: "en",
        prerollGamesPlayed: 0,
        totalGamesPlayed: 0,
        promptAppRate: !0,
        regionSelected: !1,
        lastNewsTimestamp: 0,
        perkModeRole: "",
        loadout: xe.defaultLoadout(),
        sessionCookie: "",
        binds: "",
        version: 1
    };
    class Ll {
        loaded = !1;
        localStorageAvailable = !0;
        config = {};
        onModifiedListeners = [];
        async load(t) {
            const a = o => {
                let s = {};
                try {
                    s = JSON.parse(o)
                } catch {}
                this.config = f.mergeDeep({}, Rl, s),
                this.checkUpgradeConfig(),
                this.onModified(),
                this.loaded = !0
            }
            ;
            let i = "{}";
            try {
                i = localStorage.getItem("surviv_config")
            } catch {
                this.localStorageAvailable = !1
            }
            a(i),
            dl() ? (this.config.ENV = "CrazyGames",
            await gl()) : _l() ? (this.config.ENV = "POKI",
            await wl()) : yl() ? (this.config.ENV = "GameMonetize",
            await fl()) : (this.config.ENV = "website",
            document.getElementById("btn-start-fullscreen").style.display = "inline-block",
            document.getElementById("btn-game-fullscreen").style.display = "block",
            document.getElementById("left-column").style.display = "block"),
            t(),
            this.config.ENV === "POKI" && window.PokiSDK.gameLoadingFinished()
        }
        store() {
            const t = JSON.stringify(this.config);
            if (this.localStorageAvailable)
                try {
                    localStorage.setItem("surviv_config", t)
                } catch {}
        }
        set(t, a) {
            if (!t)
                return;
            const i = t.split(".");
            let o = this.config;
            for (; i.length > 1; )
                o = o[i.shift()];
            o[i.shift()] = a,
            this.store(),
            this.onModified(t)
        }
        get(t) {
            if (!t)
                return;
            const a = t.split(".");
            let i = this.config;
            for (let o = 0; o < a.length; o++)
                i = i[a[o]];
            return i
        }
        addModifiedListener(t) {
            this.onModifiedListeners.push(t)
        }
        onModified(t) {
            for (let a = 0; a < this.onModifiedListeners.length; a++)
                this.onModifiedListeners[a](t)
        }
        checkUpgradeConfig() {}
    }
    const ql = JSON.parse(`["2 girls 1 cup","2g1c","4r5e","5h1t","5hit","a_s_s","a55","a55hole","acrotomophilia","aeolus","ahole","alabama hot pocket","alaskan pipeline","anal","analprobe","anilingus","anus","apeshit","ar5e","areola","areole","arian","arrse","arse","arsehole","aryan","ass","ass hole","assbag","assbandit","assbang","assbanged","assbanger","assbangs","assbite","assclown","asscock","asscracker","asses","assface","assfuck","assfucker","ass-fucker","assfukka","assgoblin","assh0le","asshat","ass-hat","asshead","assho1e","asshole","assholes","asshopper","ass-jabber","assjacker","asslick","asslicker","assmaster","assmonkey","assmunch","assmuncher","assnigger","asspirate","ass-pirate","assshit","assshole","asssucker","asswad","asswhole","asswipe","asswipes","auto erotic","autoerotic","axwound","azazel","azz","b!tch","b00bs","b17ch","b1tch","babe","babeland","babes","baby batter","baby juice","balls","ball gag","ball gravy","ball kicking","ball licking","ball sack","ball sucking","ballbag","ballsack","bampot","bang","bangbros","banger","bareback","barely legal","barenaked","barf","bastard","bastardo","bastards","bastinado","bawdy","bbw","bdsm","beaner","beaners","beardedclam","beastial","beastiality","beatch","beater","beaver cleaver","beaver lips","beeyotch","bellend","beotch","bestial","bestiality","bi+ch","biatch","big black","big breasts","big knockers","big tits","bigtits","bimbo","bimbos","birdlock","bitch","bitchass","bitched","bitcher","bitchers","bitches","bitchin","bitching","bitchtits","bitchy","black cock","blonde action","blonde on blonde action","blow job","blow your load","blowjob","blowjobs","blue waffle","blumpkin","bod","bodily","boink","boiolas","bollock","bollocks","bollok","bollox","bondage","boned","boner","boners","bong","boob","boobies","boobs","booby","booger","bookie","booobs","boooobs","booooobs","booooooobs","bootee","bootie","booty","booty call","booze","boozer","boozy","bosom","bosomy","bra","brassiere","breast","breasts","breeder","brotherfucker","brown showers","brunette action","buceta","bugger","bukkake","bull shit","bulldyke","bullet vibe","bullshit","bullshits","bullshitted","bullturds","bum","bumblefuck","bung","bung hole","bunghole","bunny fucker","busty","butt","butt fuck","butt plug","buttcheeks","buttfuck","buttfucka","buttfucker","butthole","buttmuch","butt-pirate","buttplug","c.0.c.k","c.o.c.k.","c.u.n.t","c0ck","c-0-c-k","c0cksucker","caca","cahone","camel toe","cameltoe","camgirl","camslut","camwhore","carpet muncher","carpetmuncher","cawk","cervix","chesticle","chinc","chincs","chink","choad","chocolate rosebuds","chode","chodes","cipa","circlejerk","cl1t","cleveland steamer","climax","clit","clitface","clitfuck","clitoris","clitorus","clits","clitty","clover clamps","clusterfuck","cnut","cocain","cocaine","cock","c-o-c-k","cock sucker","cockass","cockbite","cockblock","cockburger","cockeye","cockface","cockfucker","cockhead","cockholster","cockjockey","cockknocker","cockknoker","cocklump","cockmaster","cockmongler","cockmongruel","cockmonkey","cockmunch","cockmuncher","cocknose","cocknugget","cocks","cockshit","cocksmith","cocksmoke","cocksmoker","cocksniffer","cocksuck","cocksucked","cocksucker","cock-sucker","cocksucking","cocksucks","cocksuka","cocksukka","cockwaffle","coital","cok","cokmuncher","coksucka","commie","condom","coochie","coochy","coon","coons","cooter","coprolagnia","coprophilia","corksucker","cornhole","cox","crabs","crack","crackwhore","crap","crappy","creampie","crotte","cum","cumbubble","cumdumpster","cumguzzler","cumjockey","cummer","cummin","cumming","cums","cumshot","cumshots","cumslut","cumstain","cumtart","cunilingus","cunillingus","cunnie","cunnilingus","cunny","cunt","c-u-n-t","cuntass","cuntface","cunthole","cunthunter","cuntlick","cuntlicker","cuntlicking","cuntrag","cunts","cuntslut","cyalis","cyberfuc","cyberfuck","cyberfucked","cyberfucker","cyberfuckers","cyberfucking","d0ng","d0uch3","d0uche","d1ck","d1ld0","d1ldo","dago","dagos","darkie","damn","damned","dammit","date rape","daterape","dawgie-style","deep throat","deepthroat","deggo","dendrophilia","dick","dickbag","dickbeaters","dickdipper","dickface","dickflipper","dickfuck","dickfucker","dickhead","dickheads","dickhole","dickish","dick-ish","dickjuice","dickmilk ","dickmonger","dickripper","dicks","dicksipper","dickslap","dick-sneeze","dicksuck","dicksucker","dicksucking","dicktickler","dickwad","dickweasel","dickweed","dickwhipper","dickwod","dickzipper","diddle","dike","dildo","dildos","diligaf","dillweed","dimwit","dingle","dingleberries","dingleberry","dink","dinks","dipship","dipshit","dirsa","dirty pillows","dirty sanchez","dlck","dog style","dog-fucker","doggie style","doggiestyle","doggie-style","doggin","dogging","doggy style","doggystyle","doggy-style","dolcett","domination","dominatrix","dommes","dong","donkey punch","donkeyribber","doochbag","doofus","dookie","doosh","dopey","double dong","double penetration","doublelift","douch3","douche","douchebag","douchebags","douche-fag","douchewaffle","douchey","dp action","drunk","dry hump","duche","dumass","dumb ass","dumbass","dumbasses","dumbcunt","dumbfuck","dumbshit","dummy","dumshit","dvda","dyke","dykes","eat my ass","ecchi","ejaculate","ejaculated","ejaculates","ejaculating","ejaculatings","ejaculation","ejakulate","enlargement","erect","erection","erotic","erotism","escort","essohbee","eunuch","extacy","extasy","f u c k","f u c k e r","f.u.c.k","f_u_c_k","f4nny","fack","fag","fagbag","fagfucker","fagg","fagged","fagging","faggit","faggitt","faggot","faggotcock","faggs","fagot","fagots","fags","fagtard","faig","faigt","fanny","fannybandit","fannyflaps","fannyfucker","fanyy","fartknocker","fatass","fcuk","fcuker","fcuking","fecal","feck","fecker","felch","felcher","felching","fellate","fellatio","feltch","feltcher","female squirting","femdom","figging","fingerbang","fingerfuck","fingerfucked","fingerfucker","fingerfuckers","fingerfucking","fingerfucks","fingering","fisted","fistfuck","fistfucked","fistfucker","fistfuckers","fistfucking","fistfuckings","fistfucks","fisting","fisty","flamer","flange","floozy","foad","foah","fondle","foobar","fook","fooker","foot fetish","footjob","foreskin","freex","frigg","frigga","frotting","fubar","fuck","f-u-c-k","fuck buttons","fuck off","fucka","fuckass","fuckbag","fuckboy","fuckbrain","fuckbutt","fuckbutter","fucked","fucker","fuckers","fuckersucker","fuckface","fuckhead","fuckheads","fuckhole","fuckin","fucking","fuckings","fuckingshitmotherfucker","fuckme","fucknugget","fucknut","fucknutt","fuckoff","fucks","fuckstick","fucktard","fuck-tard","fucktards","fucktart","fucktwat","fuckup","fuckwad","fuckwhit","fuckwit","fuckwitt","fudge packer","fudgepacker","fuk","fuker","fukker","fukkin","fuks","fukwhit","fukwit","futanari","fux","fux0r","fvck","fxck","gae","gai","gang bang","gangbang","gangbanged","gangbangs","ganja","gay","gay sex","gayass","gaybob","gaydo","gayfuck","gayfuckist","gaylord","gays","gaysex","gaytard","gaywad","genitals","gey","gfy","ghay","ghey","giant cock","gigolo","girl on","girl on top","girls gone wild","glans","goatcx","goatse","god damn","godamn","godamnit","goddam","god-dam","goddammit","goddamn","goddamned","god-damned","goddamnit","gokkun","golden shower","goldenshower","gonad","gonads","goo girl","gooch","goodpoop","gook","gooks","goregasm","gringo","grope","group sex","gspot","g-spot","gtfo","guido","guro","h0m0","h0mo","hand job","handjob","hard core","hard on","hardcore","hardcoresex","he11","heeb","hemp","hentai","heroin","herp","herpes","herpy","heshe","hitler","hiv","ho","hoar","hoare","hobag","hoe","hoer","hom0","homey","homo","homodumbshit","homoerotic","homoey","honkey","honky","hooch","hookah","hooker","hoor","hootch","hooter","hooters","hore","horniest","horny","hot carl","hot chick","hotsex","how to kill","how to murder","huge fat","hump","humped","humping","hussy","hymen","inbred","incest","injun","intercourse","j3rk0ff","jack Off","jackass","jackhole","jackoff","jack-off","jaggi","jagoff","jail bait","jailbait","jap","japs","jelly donut","jerk","jerk off","jerk0ff","jerkass","jerked","jerkoff","jerk-off","jigaboo","jiggaboo","jiggerboo","jism","jiz","jizm","jizz","jizzed","juggs","jungle bunny","junglebunny","junkie","junky","kawk","kike","kikes","kinbaku","kinkster","kinky","kkk","knob","knobbing","knobead","knobed","knobend","knobhead","knobjocky","knobjokey","kock","kondum","kondums","kooch","kooches","kootch","kraut","kum","kummer","kumming","kums","kunilingus","kunja","kunt","kyke","l3i+ch","l3itch","labia","lameass","lardass","leather restraint","leather straight jacket","lech","lemon party","leper","lesbian","lesbians","lesbo","lesbos","lez","lezbian","lezbians","lezbo","lezbos","lezzie","lezzies","lezzy","lmao","lmfao","loin","loins","lolita","lovemaking","lube","lust","lusting","lusty","m0f0","m0fo","m45terbate","ma5terb8","ma5terbate","make me come","male squirting","mams","masochist","massa","masterb8","masterbat","masterbat3","masterbate","master-bate","masterbating","masterbation","masterbations","masturbate","masturbating","masturbation","maxi","mcfagget","menage a trois","menses","menstruate","menstruation","meth","m-fucking","mick","milf","minge","missionary position","mof0","mofo","mo-fo","molest","moolie","moron","mothafuck","mothafucka","mothafuckas","mothafuckaz","mothafucked","mothafucker","mothafuckers","mothafuckin","mothafucking","mothafuckings","mothafucks","mother fucker","motherfuck","motherfucka","motherfucked","motherfucker","motherfuckers","motherfuckin","motherfucking","motherfuckings","motherfuckka","motherfucks","mound of venus","mr hands","mtherfucker","mthrfucker","mthrfucking","muff","muff diver","muffdiver","muffdiving","munging","murder","mutha","muthafecker","muthafuckaz","muthafucker","muthafuckker","muther","mutherfucker","mutherfucking","muthrfucking","n1gga","n1gger","nad","nads","naked","nambla","napalm","nappy","nawashi","nazi","nazism","negro","neonazi","nig nog","nigaboo","nigg3r","nigg4h","nigga","niggah","niggas","niggaz","nigger","niggers","niggle","niglet","nimphomania","nimrod","ninny","nipple","nipples","nob","nob jokey","nobhead","nobjocky","nobjokey","nooky","nsfw images","nude","nudity","numbnuts","nut sack","nutsack","nympho","nymphomania","octopussy","omorashi","one cup two girls","one guy one jar","opiate","opium","oral","orally","organ","orgasim","orgasims","orgasm","orgasmic","orgasms","orgies","orgy","ovary","ovum","ovums","p.u.s.s.y.","p0rn","paddy","paedophile","paki","panooch","pantie","panties","panty","pastie","pasty","pawn","pcp","pecker","peckerhead","pedo","pedobear","pedophile","pedophilia","pedophiliac","peepee","pegging","penetrate","penetration","penial","penile","penis","penisbanger","penisfucker","penispuffer","perversion","peyote","phalli","phallic","phone sex","phonesex","phuck","phuk","phuked","phuking","phukked","phukking","phuks","phuq","piece of shit","pigfucker","pillowbiter","pimp","pimpis","pinko","piss pig","pissed","pissed off","pisser","pissers","pisses","pissflaps","pissin","pissing","pissoff","piss-off","pisspig","playboy","pleasure chest","pms","polack","pole smoker","polesmoker","pollock","ponyplay","poof","poon","poonani","poonany","poontang","poop","poop chute","poopchute","poopuncher","porch monkey","porchmonkey","porn","porno","pornography","pornos","potty","prick","pricks","prig","prince albert piercing","pron","prostitute","prude","pthc","pube","pubes","pubic","pubis","punanny","punany","punkass","punky","punta","puss","pusse","pussi","pussies","pussy","pussylicking","pussypounder","pussys","pust","puto","queaf","queef","queer","queerbait","queerhole","queero","queers","quicky","quim","racy","raghead","raging boner","rape","raped","raper","raping","rapist","raunch","rectal","rectum","rectus","reefer","reetard","reich","renob","retard","retarded","reverse cowgirl","revue","rimjaw","rimjob","rimming","ritard","rosy palm","rosy palm and her 5 sisters","rtard","r-tard","rump","rumprammer","ruski","rusty trombone","s hit","s&m","s.h.i.t.","s.o.b.","s_h_i_t","s0b","sadism","sadist","sand nigger","sandler","sandnigger","sanger","santorum","scag","scantily","scat","schizo","schlong","scissoring","screw","screwed","screwing","scroat","scrog","scrot","scrote","scrotum","scrud","scum","seaman","seamen","seduce","seks","semen","sex","sexo","sexual","sexy","sh!+","sh!t","sh1t","s-h-1-t","shag","shagger","shaggin","shagging","shamedame","shaved beaver","shaved pussy","shemale","shi+","shibari","shit","s-h-i-t","shitass","shitbag","shitbagger","shitblimp","shitbrains","shitbreath","shitcanned","shitcunt","shitdick","shite","shiteater","shited","shitey","shitface","shitfaced","shitfuck","shitfull","shithead","shithole","shithouse","shiting","shitings","shits","shitspitter","shitstain","shitt","shitted","shitter","shitters","shittiest","shitting","shittings","shitty","shiz","shiznit","shota","shrimping","sissy","skag","skank","skeet","skullfuck","slag","slanteye","slave","sleaze","sleazy","slut","slutbag","slutdumper","slutkiss","sluts","smeg","smegma","smut","smutty","snatch","snowballing","snuff","s-o-b","sodom","sodomize","sodomy","son-of-a-bitch","souse","soused","spac","sperm","spic","spick","spik","spiks","splooge","splooge moose","spooge","spook","spread legs","spunk","steamy","stfu","stiffy","stoned","strap on","strapon","strappado","strip","strip club","stroke","stupid","style doggy","suck","suckass","sucked","sucking","suckmydick","sucks","suicide girls","sultry women","sumofabiatch","swastika","swinger","t1t","t1tt1e5","t1tties","tainted love","tampon","tard","taste my","tawdry","tea bagging","teabagging","teat","teets","teez","terd","teste","testee","testes","testical","testicle","testis","threesome","throating","thrust","thug","thundercunt","tied up","tight white","tinkle","tit","titfuck","titi","tits","titt","tittie5","tittiefucker","titties","titty","tittyfuck","tittyfucker","tittywank","titwank","toke","tongue in a","toots","topless","tosser","towelhead","tramp","tranny","transsexual","trashy","tribadism","tub girl","tubgirl","turd","tush","tushy","tw4t","twat","twathead","twatlips","twats","twatty","twatwaffle","twink","twinkie","two girls one cup","twunt","twunter","ugly","unclefucker","undies","undressing","unwed","upskirt","urethra play","urinal","urine","urophilia","uterus","uzi","v14gra","v1gra","vag","vagina","vajayjay","va-j-j","valium","venus mound","viagra","vibrator","violet wand","virgin","vixen","vjayjay","vodka","vomit","vorarephilia","voyeur","vulgar","vulva","w00se","wad","wang","wank","wanker","wankjob","wanky","wazoo","wedgie","weed","weenie","weewee","weiner","weirdo","wench","wet dream","wetback","wh0re","wh0reface","white power","whitey","whiz","whoar","whoralicious","whore","whorealicious","whorebag","whored","whoreface","whorehopper","whorehouse","whores","whoring","wigger","willies","willy","womb","woody","wop","wrapping men","wrinkled starfish","wtf","xrated","x-rated","xxx","yaoi","yeasty","yellow showers","yiffy","yobbo","zoophile","zoophilia","zubb","(ock","[ock",".f uc k","@rse","@rsehol","@unt","[unt","< unt","<.unt","<loth head","<lothhead","<nuts","<o(k","<o<&nbsp;k","<o<ksu<ka","<o<ksu<ker","<oon","<u&nbsp;nt","<u&nbsp;nts","<u*t","<unt","<unt's","<vnt","<vnts","a$$hole","a$$hole$","a$$holes","a.rse","a+*hole","ar$ehole","ar$hole","ar$holes","ar5h0le","ar5h0les","ars3","arse hole","arseh0le","arseh0les","arseho","arsehol","arseholes","arsewipe","arsh0le","arshole","arsholes","ashole","ass h0le","assh0les","b.astard","b.ollocks","b.ugger","b@st@rd","b@st@rds","b00tha","b00thas","b0ll0cks","b0llocks","b3llend","basterd","basyard","basyards","batty boy","batty&nbsp;boi","batty&nbsp;boy","beef curtains","belend","bell end","bell.end","bell-end","bin dippers","bin-dippers","bo11ocks","boabie sooking","boaby sooking","boll0cks","bolocks","bolox","bootha","boothas","bum bandit","bum hole","bumbandit","bum-bandit","bumh0l3","bumh0le","bumhol3","bumhole","c *nt!","c *nts!","c u n t","c u n t.","c#nt","c&nbsp;u&nbsp;n&nbsp;t","c* nt","c.unt","c.untyb.ollocks","c_u_n_t","c00n","c0cksucka","cahnt","cahnts","clunge","cnuts","co(k","coc&nbsp;k","cocksucka","cocksuckers","cocksuckers.","cossor ali","cretin","cripple","critest","cu&nbsp;nt","cu&nbsp;nts","cunting","cunt's","cvnt","cvnts","d1ck!","d1ckh@ed","darky","dick&nbsp;head","dumbfucker","dxxkhead","ethnics","f ck","f o a d","f off","f u c ked","f uc k","f uc king","f uck","f###","f##k","f##king","f#cked","f$cks","f&nbsp;cked","f&nbsp;u&nbsp;c&nbsp;k","f&nbsp;uck","f&nbsp;ucker","f&nbsp;ucking","f()()k","f()()ker","f()()king","f*#kin'","f*&k","f*&k!ng","f.o.a.d","f.o.a.d.","f.u.c.k.","f.uck","f@@@in","f@@@ing","f@ck","f@g","f@gs","f[_]cker","f[_]cking","f^^k","f^^ked","f^^ker","f^^king","f^ck","f^cker","f^cking","f__kin","f__king","f<uk","f>>k","f00k","f00ked","f0oked","fackin","facking","f4ggot","f4gg0t","fagg0t","faggits","fagits","fck","f'ck","fck&nbsp;ing","fck1ng","fckeud","fckin","fcking","fcks","fckw1t","fckwit","fcuked","fcukin","fcuks","feckin","fecking","f---ed","fekking","felched","feltching","f-----g","f---ing","f--k","fkin","fking","flucknuts","fo0ked","f-o-a-d","fookd","fooked","fookin","fookin'","fooking","frig","frigging","frigin","friging","fu <k","fu&kin","fu&king","fu&nbsp;ck","fu&nbsp;cked","fu&nbsp;cker","fu&nbsp;cking","fu(k","fu(ker","fu(kers","fu.ck","fu@k","fu@ker","fu^k","fu^ker","fu^king","fu< kin","fu<k","f-u-<-k","fu<ked","fu<ker","fu<kin","fu<king","fu<kker","fu<kr","fu<ks","fuc&nbsp;ked","fuc&nbsp;ker","fuc&nbsp;king","f-uck","fúck","fúçk","fùck","fûck","fück","fuck&nbsp;ed","fuck&nbsp;ing","fucke&nbsp;d","fucki&nbsp;ng","fúcking","fuckinghell","fuckk","fuckw1t","fuck-wit","fuckwits","fucw1t","fucwit","fudge p@cker","fudgep@cker","fudge-p@cker","fudge-packer","fudgpacker","fukced","fuked","fukin","fuking","fukk","fukked","fukking","fuukn","fvckup","fvck-up","fvckw1t","fvckwit","gang-bang","gash","gayhole","gimp","girlie-gardening","goris","gypo","gypos","gyppo","gyppos","hvns","israelians","ities","k@ffir","k@ffirs","k@fir","k@firs","kaf1r","kaff1r","kaffir","kaffirs","kafir","kafirs","kafr","kants","khunt","kiddie fiddler","kiddie fiddling","kiddie-fiddler","kiddie-fiddling","kiddy fiddler","kiddyfiddler","kiddy-fiddler","kn0b","knob&nbsp;head","knobber","kuffar","m.inge","m.otherf.ucker","m1nge","mofuccer","mofucker","mofuckers","mofucking","mofukcer","mohterfuccer","mohterfuccers","mohterfuck","mohterfucker","mohterfuckers","mohterfucking","mohterfucks","mohterfuk","mohterfukcer","mohterfukcers","mohterfuking","mohterfuks","moterfuccer","moterfuck","moterfucker","moterfuckers","moterfucking","moterfucks","mothafuccer","motha-fucka","mother f---ers","motherfuccer","motherfuccers","motherfukkker","mthafucca","mthafuccas","mthafucka","mthafuckas","mthafukca","mthafukcas","muff-diver","muff-diving","muffs","muth@fucker","muthafuccer","muthafuck","muthafuck@","muthafucka","muthafuckers","muthafucking","muthafucks","muthafukas","niga","nignog","nig-nog","nob&nbsp;head","nonce","p.iss-flaps","p@ki","p@kis","p00f","p00fs","p00fter","p00fters","p0of","paedo","paedophiles","pak1","pakis","peado","peadofile","peadofiles","peedo","peedofile","peedofiles","peedophile","peedophiles","peedos","pench0d","pench0ds","penchod","penchods","phanny","phanny.","pheck","phecking","phelching","pheque","phequing","phucker","phuckin","phucking","phucks","pikey","pillow biter","pillow-biter","piss off","po0f","poff","ponce","poo stabber","poo stabbers","poofs","poofter","pr!ck","pr!ck.","pr1ck","pr1ck!","pr1cks","pr1cks!","prik","pu$$y","ragheads","ret@rd","rim job","s.hit","s1ut","sc u m!","sc um","sh hit","sh!te","sh!tes","sh1te","shirtlifter","shirtlifters","shit stabber","shit stabbers","shitstabber","shitstabbers","spastic","spaz","spaz.","spit roasting","spitroast","spit-roast","spit-roasting","spunking","ß0ll0çk5","t w a t","t wat","t.wat","t0$$er","t0sser","t0ssers","tea-bagging","to55er","to55ers","tosser,","tossers","tossurs","towel head","tvvat","tvvats","tw at","tw&nbsp;at","tw@","tw@t","tw@ts","tw_t","twa t","twatt","twattish","twunts","up the gary","w anker","w ankers","w#nker","w#nkers","w*nkers, 0","w.ank","w@nk","w@nker","w@nkers","w@nks","w0g","w0gs","w4nker!","w4nkers!","wa nker","wan k er","wan k ers","wan ker","wanka","wanke r","wanked","wankers","wanking","wanks","wank's","wet spam","whanker","whankers","wog","xrse","xrseh","xrsehol","xrsehole","xxxhole","y!ddo!","y!ddo!!","yid","yido","zachariah bishop","blow-job","boner:deboner","bonk:bonkers","candy-ass","chuffnuts","cojones","dipstick","feak","furbox","furburger","gayboy","ginch","gnikcuf","hardon","honkers","kcid","kcuf","lactoids","lesbyterian","lezzo","man-root","nestlecock","onanism","pusy","queve","quimsteak","qveer","sappho","scumbag","scumber","sexpot","shagbucket","shagstress","snarf","sodomite","strollop","suckster","tnuc","toggaf","tribadist","twank","wiseass","wizzer","abbo","abortionist","abuser","alabama hotpocket","alligatorbait","analannie","analsex","arsebagger","arsebandit","arseblaster","arsecowboy","arsefuck","arsefucker","arsehat","arsehore","arsejockey","arsekiss","arsekisser","arselick","arselicker","arselover","arseman","arsemonkey","arsemunch","arsemuncher","arsepacker","arsepirate","arsepuppies","arseranger","arses","arsewhore","assbagger","assblaster","asscowboy","assholz","asshore","assjockey","asskiss","asskisser","assklown","asslover","assman","ass monkey","asspacker","asspuppies","assranger","asswhore","azzhole","backdoorman","badfuck","baldy","ball licker","balllicker","banging","barelylegal","barface","barfface","bassterds","bastardz","basterds","basterdz","bazongas","bazooms","beastality","beat-off","beatoff","beatyourmeat","bicurious","bigass","bigbastard","bigbutt","bitchez","bitchslap","biteme","boffing","bohunk","bollick","bootycall","bountybar","breastjob","breastlover","breastman","brothel","buggered","buggery","bukake","bullcrap","bulldike","bumfuck","bungabunga","butchbabes","butchdike","butchdyke","butt-bang","buttbang","buttface","butt-fuck","butt-fucker","butt-fuckers","buttfuckers","butthead","buttman","buttmunch","buttmuncher","buttpirate","buttstain","buttwipe","byatch","cacker","cameljockey","cawks","chav","cherrypopper","chickslick","clamdigger","clamdiver","clogwog","cnts","cntz","cockblocker","cockcowboy","cockfight","cock-head","cockknob","cocklicker","cocklover","cocknob","cockqueen","cockrider","cocksman","cocksucer","cocktease","cocky","coitus","coondog","copulate","cracker","crackpipe","crack-whore","crotchjockey","crotchmonkey","crotchrot","cumfest","cumm","cumquat","cumqueen","cunntt","cunteyed","cuntfuck","cuntfucker","cuntsucker","cuntz","cybersex","cyberslimer","damnation","damnit","datnigga","deapthroat","dego","devilworshipper","dickbrain","dickforbrains","dickless","dicklick","dicklicker","dickmilk","dilldo","dilldos","dixiedike","dixiedyke","dominatricks","dominatrics","douch","douchbag","drag queen","dragqueen","dragqween","dripdick","dumbbitch","easyslut","eatballs","eatme","eatpussy","enema","excrement","facefucker","facist","faeces","faget","faggots","fagit","fagz","faigs","fark","farted","farting","farty","fastfuck","fatfuck","fatfucker","fatso","feces","felatio","fister","flasher","flid","flipping the bird","flyd","flydie","flydye","footaction","footfuck","footfucker","footlicker","fornicate","freakfuck","freakyfucker","freefuck","fucck","fuckable","fuckbuddy","fuckedup","fuckfest","fuckfreak","fuckfriend","fuckher","fuckina","fuckingbitch","fuckingcunt","fuckinnuts","fuckinright","fuckit","fuckknob","fuckmehard","fuckmonkey","fuckpig","fuckwhore","fuckyou","fugly","Fukah","Fuken","Fukkah","Fukken","funfuck","fuuck","gangbanger","gatorbait","gaygirl","gaymuthafuckinwhore","gayz","getiton","givehead","glazeddonut","godammit","goddamit","goddamnes","goddamnmuthafucker","gonorrehea","gonzagas","gotohell","greaseball","grostulation","gypp","gyppie","gyppy","headfuck","hells","hijacker","hijacking","hillbillies","hindoo","hitlerism","hitlerist","hobo","hoes","holestuffer","homobangers","honger","hookers","hoore","horney","horseshit","hosejob","hotdamn","hotpussy","hottotrot","iblowu","idiot","insest","internet wife","intheass","inthebuff","jackshit","japcrap","jesuschrist","jiggabo","jihad","jijjiboo","jisim","jiss","jizim","jizjuice","jizzim","jizzum","jubblies","juggalo","kissass","knobz","krap","krappy","kumbubble","kumbullbe","kunnilingus","kunts","kuntz","lactate","lady boy","ladyboy","lapdance","lesbain","lesbayn","lesbin","lezbe","lezbefriends","lezz","lezzer","libido","lickme","limpdick","lipshits","lipshitz","livesex","loadedgun","lovebone","lovegoo","lovegun","lovejuice","lovemuscle","lovepistol","loverocket","low life","lowlife","lubejob","luckycameltoe","manhater","manpaste","masokist","massterbait","masstrbait","masstrbate","mastabate","mastabater","masterbaiter","master bates","masterbates","mastrabator","mattressprincess","meatbeater","meatrack","mgger","mggor","molestation","molester","molestor","moneyshot","mooncricket","motha fucker","motha fuker","motha fukkah","motha fukker","mother-fucker","mother fukah","mother fuker","mother fukkah","mother fukker","motherlovebone","muffdive","muffindiver","mufflikcer","muncher","mutha fucker","mutha fukah","mutha fuker","mutha fukkah","mutha fukker","nastt","nastybitch","nastyho","nastyslut","nastywhore","necro","negroes","negroid","niggaracci","niggard","niggarded","niggarding","niggardliness","niggardliness's,","niggardly","niggard's,","niggards","niggerhead","niggerhole","nigger's,","niggled","niggles","niggling","nigglings","niggor","niggur","nigr","nigra","nigre","nigur","niiger","niigr","nipplering","nittit","nlgger","nlggor","nofuckingway","nookey","nookie","nudger","nut case","nutcase","nutfucker","ontherag","orafis","orgasum","oriface","orifice","orifiss","packi","packie","packy","paedofile","pakie","paky","palesimian","panti","pearlnecklace","peckerwood","peeenus","peeenusss","peehole","peenus","peinus","penas","penis-breath","penises","penus","penuus","perv","pervert","phuc","phuker","phukker","phungky","pi55","picaninny","piccaninny","pickaninny","piky","pimper","pimpjuic","pimpjuice","pimpsimp","pindick","piss","pisshead","play boy","play bunny","playbunny","play girl","playgirl","plumper","pocketpool","polac","polak","pooperscooper","pooping","poorwhitetrash","poostabber","popimp","pornflick","pornking","pornprincess","pric","prickhead","pu55i","pu55y","pubiclice","puke","puntang","purinaprincess","pussee","pussie","pussyeater","pussyfucker","pussylicker","pussylips","pussylover","puuke","puuker","queerz","qweers","qweerz","qweir","rag head","rearend","rearentry","recktum","redneck","rentafuck","russki","russkie","sadom","saeema butt","sandm","scank","screwyou","seaman staines","sexed","sexfarm","sexhound","sexhouse","sexing","sexkitten","sexslave","sextogo","sextoy","sextoys","sexwhore","sexymoma","sexy-slim","seymour butts","shat","shhit","shitcan","shiter","shitfit","shitforbrains","shitfucker","shithapens","shithappens","shitlist","shitola","shitoutofluck","shity","shitz","shortfuck","shyt","shyte","shytty","shyty","sixsixsix","sixtynine","sixtyniner","skanck","skankbitch","skankee","skankey","skankfuck","skanks","skankwhore","skanky","skankybitch","skankywhore","skinflute","skum","skumbag","slantyeye","slapper","slavedriver","sleezebag","sleezeball","slideitin","slimeball","slimebucket","slopehead","slopey","slopy","slutt","slutting","slutty","slutwear","slutwhore","slutz","smackthemonkey","smelly","snatchpatch","snot","snowback","snownigger","sodomise","sonofabitch","sonofbitch","spacca","spaghettibender","spaghettinigger","spankthemonkey","spazza","spermacide","spermbag","spermhearder","spermherder","spig","spigotty","spitter","splittail","spreadeagle","squaw","stabber","stripclub","stroking","stupidfuck","stupidfucker","suckdick","sucker","suckme","suckmyass","suckmytit","suckoff","tarbaby","testicles","thicklips","thicko","thirdeye","thirdleg","timbernigger","titbitnipply","titfucker","titfuckin","titjob","titlicker","titlover","tittie","tonguethrust","tonguethruster","tonguetramp","torture","tosspot","trailertrash","trannie","trots","trouser snake","tuckahoe","tunneloflove","twobitwhore","unfuckable","uptheass","upthebutt","urinate","usama bin laden","vaginal","vajina","valjina","vibrater","vietcong","violate","violation","virginbreaker","vullva","waysted","welcher","wetspot","whacker","whigger","whiskeydick","whiskydick","whitenigger","whitetrash","whoor","whop","whorefucker","wife beater","williewanker","wuss","wuzzie","yellowman","zigabo","zipperhea","zipper head","suicide","kill yourself","kys","hang yourself","unalive yourself","nigg","puta","amcik","boobz","boody","boong","cazzo","forni","fotze","ginzo","gippo","gipps","godam","goyim","groid","gubba","guizi","gyopo","gyped","harem","heebs","horis","hoser","hymie","japie","jewed","jigga","jiggs","jiggy","jizin","jizzd","jizzn","kacap","kumer","kurac","kurwa","kushi","kykes","kyopo","kyrpa","lebos","lubra","lugan","lynch","mibun","mocky","nibba","nigar","nigas","niger","nigha","nigor","niqqa","nudie","nymph","pansy","paska","pendy","pizda","pocha","pocho","pohms","quiff","seppo","smack","spank","spics","stagg","trois","ukrop","vittu","wigga","beaney","boches","bungas","chinga","crotch","darkey","doggie","dyefly","dziwka","exkwew","fetish","ficken","geezer","gummer","gwailo","gweilo","gypped","gypsys","hodgie","honkie","huevon","humper","humpin","ikeymo","jewess","jigger","jizzin","kaffer","kaffre","kanake","kanker","katsap","kigger","knulle","kwailo","mabuno","macaca","maumau","menage","mierda","mockey","mockie","moskal","moslem","mtrfck","mulkku","muschi","mzungu","necked","negres","noonan","nooner","orospu","piefke","pimmel","pimped","pooper","pudboy","punani","pusies","qahbeh","racial","redleg","rigger","sambos","shipal","skribz","slanty","sloper","slopes","tantra","tiedup","tittis","tortur","trojan","turnon","yarpie","arabush","asholes","ballgag","bangbro","bluegum","bootlip","buffies","coolies","coonass","cowgirl","dothead","dryhump","fanculo","flikker","gangsta","genital","googirl","horndog","hotcarl","hugefat","humpher","humphim","hustler","israels","jerries","jimfish","khokhol","lezzian","licking","mahbuno","mamhoon","maricon","mideast","mulatto","nigette","pendejo","pierdol","preteen","puddboy","quashie","sanchez","scheiss","schmuck","septics","sheeney","shinola","shylock","slopeys","spludge","squinty","triplex","urethra","vagiina","whities","wichser","africoon","andskota","bassterd","bigblack","blackman","burrhead","chinaman","chinamen","clansman","clansmen","dogstyle","dunecoon","earotics","eatmyass","footstar","foursome","godsdamn","golliwog","homicide","horndawg","hotchick","illegals","klansman","klansmen","klootzak","knockers","kuksuger","lingerie","mosshead","peepshow","peepshpw","poontsee","pplicker","schaffer","schlampe","sharmuta","sharmute","stringer","syphilis","tacohead","thicklip","threeway","wetdream","yourtits","zabourah","arschloch","assrammer","babyjuice","ballgravy","futkretzn","girlontop","hairyback","halfbreed","halfcaste","hillbilly","howtokill","jigarooni","magicwand","marijuana","masturbat","monkleigh","mouliewop","penthouse","poundtown","premature","scallywag","schvartse","schwartze","skurwysyn","sphencter","squirting","stuinties","swallower","tarbabies","tongueina","babybatter","beastility","beaverlips","bigbreasts","bluewaffle","buddhahead","bulletvibe","chinaswede","chingchong","clanswoman","clanswomen","deepaction","doubledong","ejackulate","jellydonut","klanswoman","klanswomen","makemecome","mickeyfinn","missionary","rautenberg","samckdaddy","shawtypimp","socksucker","spierdalaj","spreadlegs","squarehead","styledoggy","tightwhite","udgepacker","venusmound","whitepower","zipperhead","ballkicking","dawgiestyle","diaperdaddy","donkeypunch","howtomurder","meatbeatter","pancakeface","pommiegrant","swampguinea","taintedlove","beefcurtains","blowyourload","brownshowers","christkiller","cloverclamps","currymuncher","dirtypillows","motherfvcker","moundofvenus","pickaninnies","porchmonkies","spearchucker","tigolbitties","transvestite","beavercleaver","girlsgonewild","jacktheripper","junglebunnies","masterblaster","pleasurechest","tigoldbitties","tongethruster","yellowshowers","brunetteaction","femalesquirtin","luckycammeltoe","purinapricness","clevelandsteamer","wrinkledstarfish","princealbertpiercing","niggardliness's","niggard's","nigger's","nicotine","hell","f*ck","f**k","f***k","fu*k","fu**k","fk","fuq","sh*t","damm","d@mn","d@mm","h3ll","h*ll","b*tch","btch","bast4rd","b@stard","bast@rd","@ss","a$$","@$$","cr@p","d!ck","p1ss","p!ss","p@ss","c*nt","c**t","wh*re","wh0r3","slvt","sl*t","sl*tt","d*uche","d*uch3","@sshole","@$$hole","m0therfucker","m0therf*cker","m0th3rfucker","motherf*cker","c*cksucker","c*cksuck3r","cocksuck3r","j@ckass","j@ck@ss","jack@ss","j@ck*ss","b*llshit","b@llshit","bllsht","b*llsh1t","bullsh1t","b@llsh1t","@rsehole","ars3hole","ars*hole","f*ggot","f@gg0t","b@st4rd","sh!thead","sh1thead","sh1th3ad","shith3ad","sh*thead","c*ck","c0k","p*rn","pr0n","porn0","fckr","f*ckr","fc*k","fc*kr","fkn","fn","fqn","fnck","d1k","d!k","dik","dyk","dykk","d*kk","c*m","c*mm","s!ut","p1mp","p!mp","b00b","b*ob","b0b","b00bz","b0bz","b0obs","@ssh0le","@$$h0le","f!ck","f1ck","f*q","f*cking","f**king","f***king","fkng","f*kin","f@king","buggr","buggrr","bugg3r","buggering","f@ggot","f*gg0t","twatface","twatfaced","wankr","w4nk","w4nker","w@nkr","w*nkr","wankd","tossr","toss3r","t0ss3r","t!t","titz","t!tt","t!tz","c_nt","c*ntz","c_ntz","pisd","pissd","pishead","p!sshead","p1sshead","f*cker","f_ckr","f@ckr","fcukr","f_ck3r","f*cked","fc*ked","f_ckd","f_cked","f_cking","fc*king","f_ckn","f_ckng","f@cking","motherfckr","mthrfcukr","mthrfcuker","mothrf*cker","mthrf*cker","d!ckhead","d!ckhed","d!ckh3ad","d1ckh3ad","dickh3ad","d!ckhd","d*ckhead","dickhed","dikhead","dickhd","ballz","ballzy","ballsy","ballsz","b@llz","b@lls","b*llz","b*lls","b00bies","boobi","boobied","co*k","co**k","pr!k","prickr","pr1kr","pr!kr","pr!cker","w0gg","w0gger","wogger","w*gg","w0gg3r","wogging","f4git","f@git","fag0t","f@got","fagott","f4gott","faggets","faggy","fagzz","pissr","p!ssr","piss3r","p1ss3r","p1ssr","p!ssed","p1ssed","p1ssd","tw*t","fuc","fucc","fkk","f*k","d*mn","dammn","d@mmn","sl*tty","slttty","sltttty","sluttz","slttz","sltttz","bitchz","biotch","bitchr","b*tchr","b1tchr","n!gger","nigg*r","nigg@r","n!gg3r","n1gg3r","n1gg@r","n!gg@r","n1gg*r","n!gg*r","n1g","n!gg","n1gg","n*gg","niggr","n!ggr","n1ggr","n*gger","n!gga","n!gg@","n1gg@","nigg@","n1ggah","n!ggah","n*ggah","nigg@h","n!gg@h","n1gg@h","n1g@h","n!g@h","nigguh","n1gguh","n!gguh","n*gguh","n1ggaz","n!ggaz","n*ggaz","nigg@s","n!gg@s","n1gg@s","n1gg@z","nigg@z","n!gg@z","n*gg@z","niggahz","n1ggahz","n!ggahz","n*ggahz","nigg@hz","n!gg@hz","n1gg@hz","niggar","n1ggar","n!ggar","n*ggar","nigg@rs","n1gg@rs","n!gg@rs","n!g@rs","n!g@r","n!g@rz","niggrz","n1ggrz","n!ggrz","n!gg@rz","nigg@rz","niggrs","n1ggrs","n!ggrs","shiit","cr4p","c@cksucker","c0cksuck3r","c0ck$ucker","c*cksucka","c@cksucka","c0cksuck@h","loser","l0ser","looser","l00ser","l0s3r","l*ser","l*s3r","l@s3r","l@ser","l0$er","l0$3r","l0ozer","lozer","l0z3r","l*zer","l*z3r","lo$er","l0zer","loz3r","loos3r","l0oser","l00z3r","looz3r","looz*r","l0o$er","l0os3r","l*ozer"]`)
      , Fl = document.createElement("canvas");
    function no(r, t) {
        return new URLSearchParams(t || window.location.search).get(r) || ""
    }
    const re = {
        getParameterByName: no,
        getCookie: function(r) {
            const t = `${r}=`
              , i = decodeURIComponent(document.cookie).split(";");
            for (let o = 0; o < i.length; o++) {
                let s = i[o];
                for (; s.charAt(0) == " "; )
                    s = s.substring(1);
                if (s.indexOf(t) == 0)
                    return s.substring(t.length, s.length)
            }
            return ""
        },
        sanitizeNameInput: function(r) {
            let t = r.trim();
            t.length > ae.PlayerNameMaxLen && (t = t.substring(0, ae.PlayerNameMaxLen));
            const a = ` ${t.toLowerCase()} `;
            return ql.some(i => a.includes(` ${i} `)) && (t = "Survev.io"),
            t
        },
        colorToHexString: function(r) {
            return `#${`000000${r.toString(16)}`.slice(-6)}`
        },
        colorToDOMString: function(r, t) {
            return `rgba(${r >> 16 & 255}, ${r >> 8 & 255}, ${r & 255}, ${t})`
        },
        htmlEscape: function(r="") {
            return r.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
        },
        truncateString: function(r, t, a) {
            const i = Fl.getContext("2d");
            i.font = t;
            let o = r;
            for (let s = r.length; s > 0 && i.measureText(o).width > a; )
                o = `${r.substring(0, --s)}…`;
            return o
        },
        toggleFullScreen: function(r) {
            let t = document.documentElement;
            document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || r ? document.exitFullscreen ? document.exitFullscreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen?.() : t.requestFullscreen ? t.requestFullscreen() : t.msRequestFullscreen ? (t = document.body,
            t.msRequestFullscreen()) : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.webkitRequestFullscreen?.()
        },
        copyTextToClipboard: function(r) {
            try {
                const t = d("<input>");
                if (d("body").append(t),
                t.val(r),
                D.os == "ios") {
                    const a = t.get(0)
                      , i = a.contentEditable
                      , o = a.readOnly;
                    a.contentEditable = "true",
                    a.readOnly = !0;
                    const s = document.createRange();
                    s.selectNodeContents(a);
                    const l = window.getSelection();
                    l.removeAllRanges(),
                    l.addRange(s),
                    a.setSelectionRange(0, 999999),
                    a.contentEditable = i,
                    a.readOnly = o
                } else
                    t.select();
                document.execCommand("copy"),
                t.remove()
            } catch {}
        },
        getSvgFromGameType: function(r) {
            const t = U[r];
            switch (t ? t.type : "") {
            case "gun":
            case "melee":
            case "throwable":
            case "heal":
            case "boost":
            case "helmet":
            case "chest":
            case "scope":
            case "backpack":
            case "perk":
            case "xp":
                return `img/loot/${t.lootImg?.sprite.slice(0, -4)}.svg`;
            case "heal_effect":
            case "boost_effect":
                return `img/particles/${t.texture?.slice(0, -4)}.svg`;
            case "emote":
                return `img/emotes/${t.texture.slice(0, -4)}.svg`;
            case "crosshair":
                return `img/crosshairs/${t.texture.slice(0, -4)}.svg`;
            case "outfit":
                {
                    const i = t.lootImg;
                    if (i.sprite !== "loot-shirt-01.img")
                        return `img/loot/${i.sprite.slice(0, -4)}.svg`;
                    const o = `<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128"><path d="M63.993 8.15c-10.38 0-22.796 3.526-30.355 7.22-8.038 3.266-14.581 7.287-19.253 14.509C8.102 39.594 5.051 54.6 7.13 78.482c5.964 2.07 11.333 1.45 16.842-.415-1.727-7.884-1.448-15.764.496-22.204 2.126-7.044 6.404-12.722 12.675-13.701l2.77-.432.074 2.803c.054 2.043.09 4.17.116 6.335l.027 6.312c-.037 8.798-.382 18.286-1.277 27.845 5.637 1.831 14.806 2.954 23.964 3.019l4.597-.058c8.53-.275 16.742-1.449 21.665-3.063-1.093-14.65-1.166-29.434-1.52-41.334l-.097-3.283 3.18.824c6.238 1.617 10.55 7.376 12.76 14.507 2.02 6.51 2.353 14.37.64 22.248a29.764 29.764 0 0 0 12.847 1.181l4.399-.588c1.033-18.811-1.433-37.403-6.27-46.264l-4.408-6.376c-4.647-5.357-10.62-8.399-17.665-11.074-6.746-3.458-18.358-6.614-28.95-6.614zm0 3.05c6.494 0 13.37 1.942 19.274 4.516-3.123 2.758-6.971 4.665-11.067 5.754l-7.852 17.31-6.838-16.882c-4.757-.93-9.26-2.957-12.783-6.174C50.9 13.081 57.809 11.2 63.993 11.2zm.58 28.539l3.512 5.327-3.497 5.053-3.53-5.053zm0 11.888l3.512 5.328-3.497 5.052-3.53-5.053 3.514-5.327zm0 11.733l3.512 5.327-3.497 5.054-3.53-5.054zm0 11.876l3.512 5.327-3.497 5.054-3.53-5.053 3.514-5.327zm25.079 13.715c-6.61 2.055-15.829 2.907-25.277 2.951-9.5.045-18.965-.744-25.902-2.892-.205 1.785-.43 3.569-.678 5.347 5.968 2.132 16.346 3.408 26.497 3.36 10.143-.05 20.355-1.444 25.912-3.433a241.302 241.302 0 0 1-.552-5.333zm1.368 9.086c-6.782 2.308-16.533 3.262-26.53 3.31-2.935.015-5.866-.052-8.724-.213l-4.227-.315c-5.358-.5-10.307-1.382-14.329-2.758-.897 5.43-2.02 10.772-3.413 15.903 2.117 1.06 4.41 1.968 6.835 2.733l3.97 1.096c15.85 3.805 35.88 2.156 49.601-3.513-1.355-5.09-2.387-10.57-3.183-16.243z" fill="${this.colorToHexString(i.tint)}"/></svg>`;
                    return URL.createObjectURL(new Blob([o],{
                        type: "image/svg+xml;charset=utf-8"
                    }))
                }
            default:
                return ""
            }
        },
        getCssTransformFromGameType: function(r) {
            const t = U[r];
            let a = "";
            return t?.lootImg && (a = `rotate(${t.lootImg.rot || 0}rad) scaleX(${t.lootImg.mirror ? -1 : 1})`),
            a
        },
        random64: function() {
            function r() {
                return Math.floor(Math.random() * Math.pow(2, 32)).toString(16)
            }
            return r() + r()
        }
    };
    function jl() {
        return dt.android.device || dt.apple.device || mo()
    }
    function mo() {
        const r = navigator.userAgent.toLowerCase();
        return r.includes("ipad") || r.includes("macintosh") && "ontouchend"in document
    }
    function po() {
        return dt.apple.phone || dt.apple.ipod
    }
    function Ul() {
        return dt.android.device
    }
    function Wl() {
        const r = window.navigator.userAgent
          , t = r.indexOf("MSIE ")
          , a = r.indexOf("Trident/");
        return t > 0 || a > 0
    }
    function Nl() {
        return window.navigator.userAgent.indexOf("Edge/") > 0
    }
    function Gl() {
        return po() && (screen.width == 375 && screen.height == 812 || screen.height == 375 && screen.width == 812 || screen.width == 414 && screen.height == 896 || screen.height == 414 && screen.width == 896)
    }
    function Vl() {
        return po() ? "ios" : Ul() ? "android" : "pc"
    }
    function Hl() {
        return Wl() ? "ie" : Nl() ? "edge" : "unknown"
    }
    function $l(r, t) {
        try {
            localStorage.setItem(r, t)
        } catch {}
    }
    function Xl(r) {
        let t = null;
        try {
            t = localStorage.getItem(r)
        } catch {}
        return t
    }
    class Ql {
        os;
        browser;
        model;
        pixelRatio = window.devicePixelRatio;
        version;
        mobile;
        tablet;
        touch;
        uiLayout;
        debug = !1;
        UiLayout = {
            Lg: 0,
            Sm: 1
        };
        isLandscape = !0;
        screenWidth = 0;
        screenHeight = 0;
        constructor() {
            this.os = Vl(),
            this.browser = Hl(),
            this.model = Gl() ? "iphonex" : "unknown";
            const t = no("version");
            t && $l("surviv_version", t),
            this.version = Xl("surviv_version") || "1.0.0",
            this.mobile = jl(),
            this.tablet = dt.tablet || mo(),
            this.touch = this.mobile || this.tablet,
            this.uiLayout = this.mobile ? this.UiLayout.Sm : this.UiLayout.Lg,
            this.onResize()
        }
        onResize() {
            this.isLandscape = window.innerWidth > window.innerHeight || window.orientation == 90 || window.orientation == -90,
            this.screenWidth = window.innerWidth,
            this.screenHeight = window.innerHeight;
            const t = this.isLandscape ? this.screenWidth : this.screenHeight;
            this.uiLayout = this.mobile || t <= 850 || t <= 900 && this.pixelRatio >= 3 ? this.UiLayout.Sm : this.UiLayout.Lg
        }
    }
    const D = new Ql;
    class uo {
        XafO = e.create(0, 0);
        OGpt = 16;
        JTYv = 1.5;
        baWXDd = 1.5;
        llqJG = 1;
        Nsps = 1;
        hlf = !0;
        dFm = 0;
        mAXkNL = !0;
        jAGEt = 0;
        CZsM() {
            return this.OGpt * this.JTYv
        }
        alZrl(t) {
            return {
                x: this.llqJG * .5 + (t.x - this.XafO.x) * this.CZsM(),
                y: this.Nsps * .5 - (t.y - this.XafO.y) * this.CZsM()
            }
        }
        QmZuG(t) {
            return {
                x: this.XafO.x + (t.x - this.llqJG * .5) / this.CZsM(),
                y: this.XafO.y + (this.Nsps * .5 - t.y) / this.CZsM()
            }
        }
        oQvD(t) {
            return t * this.JTYv
        }
        dFeFi(t) {
            return t * this.CZsM()
        }
        azYM(t) {
            this.hlf = t
        }
        meP(t) {
            this.mAXkNL = t
        }
        IsPrFh(t, a) {
            const i = e.length(e.sub(this.XafO, t))
              , o = k.delerp(i, 40, 10) * a;
            this.dFm = Math.max(this.dFm, o)
        }
        DKGKye() {
            this.hlf && (this.XafO = e.add(this.XafO, e.mul(e.randomUnit(), this.dFm))),
            this.dFm = 0
        }
    }
    class Zl {
        shapes = [];
        addLine(t, a, i, o) {
            this.shapes.push({
                type: 0,
                start: e.copy(t),
                end: e.copy(a),
                color: i,
                fill: o
            })
        }
        addRay(t, a, i, o, s) {
            this.shapes.push({
                type: 1,
                pos: e.copy(t),
                dir: e.copy(a),
                len: i,
                color: o,
                fill: s
            })
        }
        addCircle(t, a, i, o) {
            this.shapes.push({
                type: 2,
                pos: e.copy(t),
                rad: a,
                color: i,
                fill: o
            })
        }
        addAabb(t, a, i, o) {
            this.shapes.push({
                type: 3,
                min: e.copy(t),
                max: e.copy(a),
                color: i,
                fill: o
            })
        }
        addCollider(t, a, i) {
            t.type == n.Type.Aabb ? this.addAabb(t.min, t.max, a, i) : this.addCircle(t.pos, t.rad, a, i)
        }
        CCrkNK(t, a) {}
        flush() {
            this.shapes = []
        }
    }
    const ze = new Zl
      , mi = 4
      , pi = 5
      , Jl = 10;
    function ui(r) {
        return r.displayCloseIcon ? "img/gui/close.svg" : re.getSvgFromGameType(r.ping || r.emote)
    }
    function Rt(r) {
        let t = Math.atan2(r.y, r.x) * 180 / Math.PI;
        return t < 0 && (t += 360),
        t
    }
    function Yl(r, t, a) {
        return t <= a ? a - t <= 180 ? t <= r && r <= a : a <= r || r <= t : t - a <= 180 ? a <= r && r <= t : t <= r || r <= a
    }
    class Kl {
        constructor(t, a, i, o, s) {
            this.audioManager = t,
            this.uiManager = a,
            this.playerBarn = i,
            this.camera = o,
            this.map = s,
            this.triggerPing = () => {
                if (this.activePlayer) {
                    let m;
                    this.emoteSelector.ping && !this.emoteWheelsGreyed ? zt[this.emoteSelector.ping]?.pingMap && (m = this.uiManager.getWorldPosFromMapPos(this.bigmapPingPos || this.emoteScreenPos, this.map, this.camera),
                    m ||= this.camera.QmZuG(this.emoteScreenPos),
                    m.x = k.clamp(m.x, 0, this.map.width),
                    m.y = k.clamp(m.y, 0, this.map.height),
                    this.sendPing({
                        type: this.emoteSelector.ping,
                        pos: m
                    })) : this.emoteSelector.emote && !this.emoteWheelsGreyed && (m = this.activePlayer.XafO,
                    this.sendEmote({
                        type: this.emoteSelector.emote,
                        pos: m
                    }),
                    this.uiManager.displayMapLarge(!0)),
                    this.inputReset(),
                    this.pingKeyTriggered = this.pingKeyDown
                }
            }
            ,
            this.triggerEmote = () => {
                if (this.activePlayer) {
                    let m;
                    this.emoteSelector.emote && !this.emoteWheelsGreyed && (m = this.activePlayer.XafO,
                    this.sendEmote({
                        type: this.emoteSelector.emote,
                        pos: m
                    })),
                    this.inputReset()
                }
            }
            ,
            this.onTouchStart = m => {
                this.wheelDisplayed && (m.stopPropagation(),
                this.inputReset())
            }
            ,
            D.touch && (this.emoteElems.css("pointer-events", "auto"),
            this.bigmapCollision.on("touchend", m => {
                m.stopPropagation(),
                this.bigmapPingPos = {
                    x: m.originalEvent?.changedTouches[0].pageX,
                    y: m.originalEvent?.changedTouches[0].pageY
                },
                this.emoteScreenPos = e.create(this.camera.llqJG / 2, this.camera.Nsps / 2),
                this.pingMouseTriggered = !0
            }
            ),
            this.emoteButtonElem.css("pointer-events", "auto"),
            this.emoteButtonElem.on("touchstart", m => {
                m.stopPropagation(),
                this.emoteScreenPos = e.create(this.camera.llqJG / 2, this.camera.Nsps / 2),
                this.emoteMouseTriggered = !0
            }
            ),
            this.emoteElems.on("touchstart", m => {
                m.stopPropagation(),
                this.emoteTouchedPos = {
                    x: m.originalEvent?.changedTouches[0].pageX,
                    y: m.originalEvent?.changedTouches[0].pageY
                }
            }
            ),
            d(document).on("touchstart", this.onTouchStart)),
            this.emoteWheelData = {
                middle: {
                    parent: d("#ui-emote-middle"),
                    vA: e.create(-1, 1),
                    vC: e.create(1, 1),
                    ping: "",
                    emote: "",
                    displayCloseIcon: !0
                },
                top: {
                    parent: d("#ui-emote-top"),
                    vA: e.create(-1, 1),
                    vC: e.create(1, 1),
                    ping: "",
                    emote: "",
                    emoteSlot: Te.Top
                },
                right: {
                    parent: d("#ui-emote-right"),
                    vA: e.create(1, 1),
                    vC: e.create(1, -1),
                    ping: "",
                    emote: "",
                    emoteSlot: Te.Right
                },
                bottom: {
                    parent: d("#ui-emote-bottom"),
                    vA: e.create(1, -1),
                    vC: e.create(-1, -1),
                    ping: "",
                    emote: "",
                    emoteSlot: Te.Bottom
                },
                left: {
                    parent: d("#ui-emote-left"),
                    vA: e.create(-1, -1),
                    vC: e.create(-1, 1),
                    ping: "",
                    emote: "",
                    emoteSlot: Te.Left
                }
            };
            const l = {
                middle: {
                    parent: d("#ui-team-ping-middle"),
                    vA: e.create(-1, 1),
                    vC: e.create(1, 1),
                    ping: "",
                    emote: "",
                    displayCloseIcon: !0
                },
                top: {
                    parent: d("#ui-team-ping-top"),
                    vA: e.create(-1, 1),
                    vC: e.create(1, 1),
                    ping: "ping_danger",
                    emote: ""
                },
                right: {
                    parent: d("#ui-team-ping-right"),
                    vA: e.create(1, 1),
                    vC: e.create(1, -1),
                    ping: "ping_coming",
                    emote: ""
                },
                bottom: {
                    parent: d("#ui-team-ping-bottom"),
                    vA: e.create(1, -1),
                    vC: e.create(-1, -1),
                    ping: "ping_help",
                    emote: ""
                },
                "bottom-left": {
                    parent: d("#ui-team-ping-bottom-left"),
                    vA: e.create(-1, -1),
                    vC: e.create(-1, 0),
                    ping: "",
                    emote: "emote_medical"
                },
                "top-left": {
                    parent: d("#ui-team-ping-top-left"),
                    vA: e.create(-1, 0),
                    vC: e.create(-1, 1),
                    ping: "",
                    emote: "emote_ammo",
                    ammoEmote: !0
                }
            };
            for (const m in l)
                if (l.hasOwnProperty(m)) {
                    const h = l[m]
                      , u = Rt(h.vA)
                      , g = Rt(h.vC);
                    this.teamPingSelectors.push({
                        parent: h.parent,
                        angleA: u,
                        angleC: g,
                        highlight: h.parent.find(".ui-emote-hl"),
                        highlightDisplayed: !1,
                        ping: h.ping,
                        emote: h.emote,
                        ammoEmote: h?.ammoEmote,
                        displayCloseIcon: h?.displayCloseIcon
                    })
                }
            this.displayedSelectors = this.teamPingSelectors,
            this.container.scale.set(this.baseScale, this.baseScale),
            this.container.addChild(this.pingContainer);
            const c = function(m, h=16777215) {
                const u = new ue
                  , g = new ue
                  , w = F.groupColors[m] || h
                  , y = he.from("ping-border.img");
                y.scale.set(.4, .4),
                y.anchor.set(.5, .5),
                y.tint = w,
                y.alpha = 0,
                y.visible = !0,
                u.addChild(y);
                const _ = he.from("ping-team-danger.img");
                _.scale.set(.4, .4),
                _.anchor.set(.5, .5),
                _.tint = w,
                _.alpha = 0,
                _.visible = !0,
                u.addChild(_);
                const S = he.from("ping-team-danger.img");
                S.scale.set(.5, .5),
                S.anchor.set(.5, .5),
                S.tint = w,
                S.alpha = 0,
                S.visible = !0,
                g.addChild(S);
                const b = he.from("ping-indicator.img");
                return b.scale.set(.5, .5),
                b.anchor.set(.5, 0),
                b.alpha = 0,
                b.visible = !0,
                g.addChild(b),
                {
                    elem: d("#ui-team-indicators").find(`.ui-indicator-ping[data-id=${m}]`),
                    borderElem: d("#ui-team-indicators").find(`.ui-indicator-ping-border[data-id=${m}]`),
                    pingContainer: u,
                    indContainer: g,
                    borderSprite: {
                        sprite: y,
                        baseScale: .4
                    },
                    pingSprite: {
                        sprite: _,
                        baseScale: .4
                    },
                    indSpriteOuter: {
                        sprite: b,
                        baseScale: .5,
                        baseTint: Number(b.tint)
                    },
                    indSpriteInner: {
                        sprite: S,
                        baseScale: .5,
                        baseTint: Number(S.tint)
                    },
                    displayed: !1,
                    fadeIn: 0,
                    life: 0,
                    fadeOut: 0,
                    pos: e.create(0, 0)
                }
            };
            for (let m = 0; m < 4; m++) {
                const h = c(m);
                this.pingContainer.addChild(h.pingContainer),
                this.indContainer.addChild(h.indContainer),
                this.pingIndicators.push({
                    ping: h
                })
            }
            this.airdropIndicator = c(mi, zt.ping_airdrop.tint),
            this.pingContainer.addChild(this.airdropIndicator.pingContainer),
            this.indContainer.addChild(this.airdropIndicator.indContainer),
            this.pingIndicators.push({
                ping: this.airdropIndicator
            }),
            this.airstrikeIndicator = c(pi, zt.ping_airstrike.tint),
            this.pingContainer.addChild(this.airstrikeIndicator.pingContainer),
            this.indContainer.addChild(this.airstrikeIndicator.indContainer),
            this.pingIndicators.push({
                ping: this.airstrikeIndicator
            })
        }
        gameElem = d("#ui-game");
        disable = !1;
        activePlayer = null;
        worldPos = e.create(0, 0);
        zIdxNext = 0;
        emoteSelector = {
            ping: "",
            emote: ""
        };
        emoteSoftTicker = 0;
        emoteHardTicker = 0;
        emoteCounter = 0;
        emoteWheelsGreyed = !1;
        teamEmotesGreyed = !1;
        wheelKeyTriggered = !1;
        emoteTimeoutTicker = 0;
        pingKeyTriggered = !1;
        pingKeyDown = !1;
        pingMouseTriggered = !1;
        wheelDisplayed = !1;
        emoteMouseTriggered = !1;
        emoteScreenPos = e.create(0, 0);
        triggerPing;
        triggerEmote;
        emoteTouchedPos = null;
        bigmapPingPos = null;
        onTouchStart;
        emoteElems = d(".ui-emote");
        bigmapCollision = d("#big-map-collision");
        emoteButtonElem = d("#ui-emote-button");
        emoteWheels = d("#ui-emotes, #ui-team-pings");
        teamEmotes = d(".ui-emote-bottom-left, .ui-emote-top-left");
        emoteWheel = d("#ui-emotes");
        emoteWheelData;
        teamPingWheel = d("#ui-team-pings");
        teamPingSelectors = [];
        displayedSelectors;
        baseScale = 1;
        container = new ue;
        pingContainer = new ue;
        indContainer = new ue;
        pingIndicators = [];
        airdropIndicator;
        airstrikeIndicator;
        emoteLifeIn = .75;
        emoteLife = 1;
        emoteLifeOut = .1;
        pingFadeIn = .5;
        pingLife = 4.25;
        pingFadeOut = .1;
        wedgeOpacityReset = D.touch ? 1 : .75;
        teamEmoteOpacityReset = .2;
        emotes = [];
        newPings = [];
        newEmotes = [];
        emoteLoadout = [];
        unlockTypes = {};
        socialUnlocked = !1;
        emoteWheelSelectors;
        parentDisplayed;
        AlR() {
            D.touch && (d(document).off("touchstart", this.onTouchStart),
            this.emoteButtonElem.off("touchstart"),
            this.emoteElems.off("touchstart"),
            this.bigmapCollision.off("touchend")),
            this.init()
        }
        init() {
            this.emoteWheelsGreyed = !1,
            this.emoteWheels.css("opacity", 1),
            this.teamEmotesGreyed = !1,
            this.teamEmotes.css("opacity", 1),
            this.disable = !1,
            this.inputReset()
        }
        inputReset() {
            this.pingMouseTriggered = !1,
            this.pingKeyTriggered = !1,
            this.emoteMouseTriggered = !1,
            this.wheelDisplayed = !1,
            this.displayWheel(this.teamPingWheel, !1),
            this.displayWheel(this.emoteWheel, !1),
            this.emoteTouchedPos = null,
            this.bigmapPingPos = null,
            this.emoteTimeoutTicker = 0;
            for (let t = 0; t < this.displayedSelectors.length; t++) {
                const a = this.displayedSelectors[t]
                  , o = bt[a.emote]?.teamOnly;
                this.teamEmotesGreyed && o ? a.parent.css("opacity", this.teamEmoteOpacityReset) : a.parent.css("opacity", this.wedgeOpacityReset),
                a.highlight.css("display", "none"),
                a.highlightDisplayed = !1
            }
        }
        sendPing(t) {
            this.newPings.push({
                type: t.type,
                pos: t.pos
            }),
            this.incrementEmote()
        }
        addPing(t, a) {
            if (this.activePlayer) {
                const i = zt[t.type];
                if (i) {
                    this.uiManager.createPing(t.type, t.pos, t.playerId, this.activePlayer.__id, this.playerBarn, a);
                    let o = null
                      , s = i.sound;
                    if (t.type == "ping_airdrop")
                        o = this.pingIndicators[mi].ping;
                    else if (t.type == "ping_airstrike")
                        o = this.pingIndicators[pi].ping;
                    else {
                        const l = this.playerBarn.getPlayerInfo(t.playerId);
                        if (l) {
                            const m = this.playerBarn.getPlayerInfo(this.activePlayer.__id).groupId
                              , h = l.groupId;
                            if (m == h) {
                                const g = this.playerBarn.getGroupInfo(h).playerIds.indexOf(t.playerId);
                                g !== -1 && (o = this.pingIndicators[g].ping)
                            }
                        }
                        const c = this.playerBarn.getPlayerStatus(t.playerId);
                        c && c.role == "leader" && (s = i.soundLeader)
                    }
                    a || t.type != "ping_airstrike" ? this.audioManager.playSound(s, {
                        channel: "ui"
                    }) : this.audioManager.playSound(s, {
                        channel: "ui",
                        fallOff: 1,
                        soundPos: t.pos,
                        rangeMult: 20
                    }),
                    o && (o.pos = t.pos,
                    o.pingSprite.sprite.texture = K.from(i.texture),
                    o.indSpriteInner.sprite.texture = K.from(i.texture),
                    o.indSpriteInner.sprite.tint = i.mapEvent ? i.tint : o.indSpriteInner.baseTint,
                    o.indSpriteOuter.sprite.tint = i.mapEvent ? i.tint : o.indSpriteOuter.baseTint,
                    o.fadeIn = this.pingFadeIn,
                    o.life = this.pingLife,
                    o.fadeOut = this.pingFadeOut,
                    o.mapEvent = i.mapEvent,
                    o.worldDisplay = i.worldDisplay)
                }
            }
        }
        sendEmote(t) {
            this.newEmotes.push({
                type: t.type,
                pos: t.pos
            }),
            this.incrementEmote()
        }
        addEmote(t) {
            const a = bt[t.type];
            if (a) {
                let i = null;
                for (let o = 0; o < this.emotes.length; o++)
                    this.emotes[o].alive || i ? this.emotes[o].alive && this.emotes[o].playerId == t.playerId && (this.emotes[o].alive = !1) : i = this.emotes[o];
                if (i || (i = {},
                i.alive = !1,
                i.pos = e.create(0, 0),
                i.container = new ue,
                i.circleOuter = he.from("emote-circle-outer.img"),
                i.circleOuter.anchor.set(.5, .5),
                i.baseScale = .55,
                i.circleOuter.scale.set(i.baseScale * .8, i.baseScale * .8),
                i.circleOuter.tint = 0,
                i.circleOuter.visible = !0,
                i.container.addChild(i.circleOuter),
                i.sprite = new he,
                i.sprite.anchor.set(.5, .5),
                i.container.addChild(i.sprite),
                i.sprite.scale.set(i.baseScale, i.baseScale),
                i.posOffset = e.create(0, 4),
                i.container.scale.set(1, 1),
                i.container.visible = !1,
                this.emotes.push(i)),
                i.alive = !0,
                i.isNew = !0,
                i.type = t.type,
                i.playerId = t.playerId,
                i.pos = e.create(0, 0),
                i.lifeIn = this.emoteLifeIn,
                i.life = this.emoteLife,
                i.lifeOut = this.emoteLifeOut,
                i.zIdx = this.zIdxNext++,
                a.texture && (i.sprite.texture = K.from(a.texture)),
                i.container.visible = !1,
                i.baseScale = .55,
                i.sound = a.sound,
                i.channel = a.channel,
                t.type == "emote_loot") {
                    const o = U[t.itemType];
                    if (o?.lootImg) {
                        i.sprite.texture = K.from(o.lootImg.sprite);
                        const s = U[o.ammo];
                        i.circleOuter.tint = s ? s.lootImg.tintDark : 0,
                        o.lootImg.rot ? i.sprite.rotation = o.lootImg.rot : i.sprite.rotation = 0,
                        o.lootImg.mirror ? i.sprite.scale.set(i.baseScale * -1, i.baseScale) : i.sprite.scale.set(i.baseScale, i.baseScale),
                        o.sound?.deploy && (o.type == "gun" ? (i.sound = o.sound.deploy,
                        i.channel = "activePlayer") : i.sound = "")
                    }
                } else
                    i.circleOuter.tint = 0,
                    i.sprite.rotation = 0,
                    i.sprite.scale.set(i.baseScale, i.baseScale)
            }
        }
        incrementEmote() {
            this.emoteCounter++,
            this.emoteCounter >= F.player.emoteThreshold && (this.emoteHardTicker = this.emoteHardTicker > 0 ? this.emoteHardTicker : F.player.emoteHardCooldown * 1.5)
        }
        lCPzxG(t, a, i, o, s, l, c, m, h, u) {
            const g = this.playerBarn
              , w = this.camera;
            let y = e.create(m.mousePos.x, m.mousePos.y);
            m.lostFocus && this.inputReset(),
            h.isBindPressed(j.TeamPingMenu) && !this.pingKeyDown && !u && (this.pingKeyDown = !0,
            this.pingKeyTriggered = !0),
            h.isBindReleased(j.TeamPingMenu) && this.pingKeyDown && (this.pingKeyDown = !1,
            this.pingKeyTriggered = this.wheelDisplayed),
            h.isBindPressed(j.TeamPingSingle) && !this.pingMouseTriggered && !this.emoteMouseTriggered && (this.emoteScreenPos = e.copy(y),
            this.pingMouseTriggered = !0),
            h.isBindReleased(j.TeamPingSingle) && this.pingMouseTriggered && this.triggerPing(),
            h.isBindPressed(j.EmoteMenu) && (!this.pingMouseTriggered && !this.emoteMouseTriggered && this.pingKeyDown && (this.emoteScreenPos = e.copy(y),
            this.pingMouseTriggered = !0),
            this.pingMouseTriggered || (this.emoteScreenPos = e.copy(y),
            this.emoteMouseTriggered = !0)),
            h.isBindReleased(j.EmoteMenu) && (this.pingKeyTriggered && this.pingMouseTriggered && this.triggerPing(),
            this.emoteMouseTriggered && this.triggerEmote()),
            this.activePlayer = i,
            (a != i.__id || i.tuWDuv.veYmO) && !this.disable && (this.AlR(),
            this.disable = !0);
            const _ = l.perkMode && !i.tuWDuv.COS;
            if (!this.disable && !_ && (this.wheelKeyTriggered = this.pingKeyTriggered || this.emoteMouseTriggered,
            this.emoteSoftTicker -= t,
            this.emoteCounter >= F.player.emoteThreshold && this.emoteHardTicker > 0 ? (this.emoteHardTicker -= t,
            this.emoteHardTicker < 0 && (this.emoteCounter = 0)) : this.emoteSoftTicker < 0 && this.emoteCounter > 0 && (this.emoteCounter--,
            this.emoteSoftTicker = F.player.emoteSoftCooldown * 1.5),
            (this.pingMouseTriggered || this.emoteMouseTriggered) && !this.wheelDisplayed && (this.parentDisplayed = this.pingMouseTriggered ? this.teamPingWheel : this.emoteWheel,
            this.parentDisplayed.css({
                display: "block",
                left: this.emoteScreenPos.x,
                top: this.emoteScreenPos.y
            }),
            this.displayWheel(this.parentDisplayed, !0),
            this.wheelDisplayed = !0,
            this.displayedSelectors = this.pingMouseTriggered ? this.teamPingSelectors : this.emoteWheelSelectors,
            this.worldPos = w.QmZuG(this.emoteScreenPos)),
            this.wheelDisplayed))
                if (this.emoteTimeoutTicker += t,
                this.emoteTimeoutTicker > Jl)
                    this.inputReset();
                else {
                    this.emoteHardTicker > 0 && !this.emoteWheelsGreyed ? (this.emoteWheels.css("opacity", .5),
                    this.emoteWheelsGreyed = !0) : this.emoteHardTicker <= 0 && this.emoteWheelsGreyed && (this.emoteWheels.css("opacity", 1),
                    this.emoteWheelsGreyed = !1),
                    !this.teamEmotesGreyed && o == 1 && (this.teamEmotes.css("opacity", this.teamEmoteOpacityReset),
                    this.teamEmotesGreyed = !0);
                    let T = null;
                    if (D.touch && (y = this.emoteTouchedPos),
                    y) {
                        const I = e.sub(y, this.emoteScreenPos);
                        I.y *= -1;
                        const C = e.length(I)
                          , q = Rt(I)
                          , E = 35
                          , L = i.sUpm.kgyV[i.sUpm.nUn]
                          , M = U[L.type];
                        let O = "";
                        M && M.ammo && (O = M.ammo);
                        for (let H = 0; H < this.displayedSelectors.length; H++) {
                            const N = this.displayedSelectors[H];
                            if (N.ammoEmote) {
                                const ee = {
                                    "9mm": "emote_ammo9mm",
                                    "12gauge": "emote_ammo12gauge",
                                    "762mm": "emote_ammo762mm",
                                    "556mm": "emote_ammo556mm",
                                    "50AE": "emote_ammo50ae",
                                    "308sub": "emote_ammo308sub",
                                    flare: "emote_ammoflare",
                                    "45acp": "emote_ammo45acp"
                                }
                                  , fe = N.emote;
                                if (N.emote = ee[O] || "emote_ammo",
                                N.texture = bt[N.emote].texture,
                                fe != N.emote) {
                                    const we = N.parent.find(".ui-emote-image")
                                      , Ne = ui(N);
                                    we.css("background-image", `url(${Ne})`)
                                }
                            }
                            const $ = N.ping || N.emote
                              , Q = bt[N.emote]
                              , G = Q && Q.teamOnly && o == 1;
                            if (C <= E && !$ && this.emoteHardTicker <= 0 && !G) {
                                T = N;
                                continue
                            }
                            if (Yl(q, N.angleC, N.angleA) && C > E && $ && this.emoteHardTicker <= 0 && !G) {
                                T = N;
                                continue
                            }
                            N.highlightDisplayed && (N.parent.css("opacity", this.wedgeOpacityReset),
                            N.highlight.css("display", "none"),
                            N.highlightDisplayed = !1)
                        }
                    }
                    T && (this.emoteSelector = T,
                    T.highlightDisplayed || (T.parent.css("opacity", 1),
                    T.highlight.css("display", "block"),
                    T.highlightDisplayed = !0),
                    D.touch && this.emoteTouchedPos && (this.pingMouseTriggered ? this.triggerPing() : this.triggerEmote()))
                }
            for (let T = 0; T < this.emotes.length; T++) {
                const I = this.emotes[T];
                if (I.alive) {
                    let C = !1
                      , q = e.create(0, 0)
                      , E = 0;
                    const L = g.getPlayerById(I.playerId);
                    if (L && !L.tuWDuv.veYmO && (q = e.copy(L.eCcoC),
                    E = L.layer,
                    C = !0),
                    !C) {
                        const M = s.getDeadBodyById(I.playerId);
                        M && (q = e.copy(M.pos),
                        E = M.layer,
                        C = !0)
                    }
                    if (C) {
                        I.isNew && this.audioManager.playSound(I.sound, {
                            channel: I.channel,
                            soundPos: q,
                            layer: E
                        }),
                        I.isNew = !1,
                        I.pos = q,
                        I.lifeIn > 0 ? I.lifeIn -= t : I.life > 0 ? I.life -= t : I.lifeOut > 0 && (I.lifeOut -= t);
                        const M = f.sameLayer(E, this.activePlayer.layer) ? 3 : E;
                        c.addPIXIObj(I.container, M, 5e4, I.zIdx),
                        I.alive = I.alive && I.lifeOut > 0
                    } else
                        I.alive = !1
                }
            }
            const S = e.create(w.llqJG * .5 / w.CZsM(), w.Nsps * .5 / w.CZsM())
              , b = {
                min: e.sub(w.XafO, S),
                max: e.add(w.XafO, S)
            }
              , A = g.getPlayerInfo(i.__id).groupId
              , P = g.getGroupInfo(A);
            for (let T = 0; T < this.pingIndicators.length; T++) {
                const I = this.pingIndicators[T].ping
                  , C = P.playerIds[T]
                  , q = I.indContainer
                  , E = I.pingContainer;
                if (C != null || I.mapEvent) {
                    g.getPlayerInfo(C);
                    const L = C == this.activePlayer.__id
                      , M = g.getPlayerStatus(C)
                      , O = I.borderSprite.sprite
                      , H = I.pingSprite.sprite
                      , N = I.indSpriteOuter.sprite
                      , $ = I.indSpriteInner.sprite;
                    let Q = !0;
                    if (I.fadeIn -= t,
                    I.life -= t,
                    I.fadeOut -= I.life > 0 ? 0 : t,
                    I.fadeOut > 0) {
                        const W = I.pos
                          , G = e.normalizeSafe(e.sub(W, w.XafO), e.create(1, 0))
                          , ee = le.intersectRayAabb(w.XafO, G, b.min, b.max)
                          , fe = Math.atan2(G.y, -G.x) + Math.PI * .5
                          , we = w.alZrl(ee)
                          , Ne = le.testCircleAabb(W, F.player.radius, b.min, b.max)
                          , wr = w.oQvD(I.borderSprite.baseScale)
                          , fa = w.oQvD(I.pingSprite.baseScale);
                        if (O.scale.set(wr, wr),
                        H.scale.set(fa, fa),
                        M?.dead)
                            continue;
                        const Jt = 64;
                        Q = I.fadeOut < 0;
                        const ya = Ne ? w.alZrl(W).x : k.clamp(we.x, Jt, w.llqJG - Jt)
                          , wa = Ne ? w.alZrl(W).y : k.clamp(we.y, Jt, w.Nsps - Jt)
                          , _a = w.alZrl(W).x
                          , ba = w.alZrl(W).y;
                        H.position.x = _a,
                        H.position.y = ba,
                        O.position.x = _a,
                        O.position.y = ba,
                        N.position.x = ya,
                        N.position.y = wa,
                        N.rotation = fe,
                        $.position.x = ya,
                        $.position.y = wa;
                        const _r = O.alpha <= 0 ? 1 : O.alpha - t;
                        O.alpha = _r;
                        const xa = w.oQvD(I.borderSprite.baseScale * (2 - _r));
                        if (O.scale.set(xa, xa),
                        $.alpha = Ne ? 0 : _r,
                        I.fadeIn > 0) {
                            const Yt = 1 - I.fadeIn / this.pingFadeIn;
                            E.alpha = 1,
                            q.alpha = 1,
                            H.alpha = 1,
                            N.alpha = Ne ? 0 : Yt
                        } else
                            N.alpha = Ne ? 0 : 1;
                        if (I.life < 0) {
                            const Yt = I.fadeOut / this.pingFadeOut;
                            E.alpha = Yt,
                            q.alpha = Yt
                        }
                        I.displayed || (E.visible = I.worldDisplay,
                        q.visible = !L || I.mapEvent,
                        I.displayed = !0)
                    }
                    Q && I.displayed && (E.visible = !1,
                    q.visible = !1,
                    I.displayed = !1)
                } else
                    E.visible = !1,
                    q.visible = !1,
                    I.displayed = !1
            }
        }
        displayWheel(t, a) {
            t.css("display", a ? "block" : "none")
        }
        updateEmoteWheel(t) {
            this.emoteLoadout = t;
            const a = {
                top: t[Te.Top],
                right: t[Te.Right],
                bottom: t[Te.Bottom],
                left: t[Te.Left]
            };
            for (const i in a)
                if (a.hasOwnProperty(i)) {
                    const o = a[i];
                    bt[o] && this.emoteWheelData[i] && (this.emoteWheelData[i].emote = o)
                }
            this.emoteWheelSelectors = [];
            for (const i in this.emoteWheelData)
                if (this.emoteWheelData.hasOwnProperty(i)) {
                    const o = this.emoteWheelData[i]
                      , s = Rt(o.vA)
                      , l = Rt(o.vC);
                    this.emoteWheelSelectors.push(Object.assign({
                        angleA: s,
                        angleC: l,
                        highlight: o.parent.find(".ui-emote-hl"),
                        highlightDisplayed: !1
                    }, o));
                    const c = o.parent.find(".ui-emote-image")
                      , m = ui(o);
                    c.css("background-image", `url(${m})`)
                }
        }
        CCrkNK(t) {
            for (let a = 0; a < this.emotes.length; a++) {
                const i = this.emotes[a];
                if (i.container.visible = i.alive,
                i.alive) {
                    let o = 0;
                    if (i.lifeIn > 0) {
                        const m = 1 - i.lifeIn / this.emoteLifeIn;
                        o = k.easeOutElastic(m)
                    } else
                        i.life > 0 ? o = 1 : i.lifeOut > 0 && (o = i.lifeOut / this.emoteLifeOut);
                    const s = e.add(i.pos, e.mul(i.posOffset, 1 / k.clamp(t.JTYv, .75, 1)))
                      , l = t.alZrl(s)
                      , c = o * i.baseScale * k.clamp(t.JTYv, .9, 1.75);
                    i.container.position.set(l.x, l.y),
                    i.container.scale.set(c, c)
                }
            }
        }
    }
    const Wr = F.GasMode
      , Lt = 100 * 1e3
      , hi = 512;
    class ho {
        constructor(t, a) {
            if (this.canvasMode = t,
            this.gasColor = a,
            t)
                this.canvas = document.createElement("canvas"),
                this.canvas.width = window.innerWidth,
                this.canvas.height = window.innerHeight,
                this.display = new he(K.from(this.canvas)),
                this.gasColorDOMString = re.colorToDOMString(a, .6);
            else {
                this.display = new Re;
                const i = this.display;
                i.clear(),
                i.beginFill(a, .6),
                i.moveTo(-1e5, -1e5),
                i.lineTo(Lt, -1e5),
                i.lineTo(Lt, Lt),
                i.lineTo(-1e5, Lt),
                i.closePath(),
                i.beginHole(),
                i.moveTo(0, 1);
                for (let o = 1; o < hi; o++) {
                    const s = o / hi
                      , l = Math.sin(Math.PI * 2 * s)
                      , c = Math.cos(Math.PI * 2 * s);
                    i.lineTo(l, c)
                }
                i.endHole(),
                i.closePath()
            }
            this.display.visible = !1
        }
        gasColorDOMString = "";
        display = null;
        canvas = null;
        free() {
            this.display.destroy(!0)
        }
        resize() {
            this.canvas != null && (this.canvas.width = window.innerWidth,
            this.canvas.height = window.innerHeight,
            this.display.texture.update())
        }
        render(t, a, i) {
            if (this.canvas != null) {
                const o = this.canvas
                  , s = o.getContext("2d");
                s.clearRect(0, 0, o.width, o.height),
                s.beginPath(),
                s.fillStyle = this.gasColorDOMString,
                s.rect(0, 0, o.width, o.height),
                s.arc(t.x, t.y, a, 0, Math.PI * 2, !0),
                s.fill()
            } else {
                const o = e.copy(t);
                let s = a;
                s < .1 && (s = 1,
                o.x += Lt * .5);
                const l = this.display;
                l.position.set(o.x, o.y),
                l.scale.set(s, s)
            }
            this.display.visible = i
        }
    }
    class ec {
        display = new ue;
        circleGfx = new Re;
        lineGfx = new Re;
        safePos = e.create(0, 0);
        safeRad = 0;
        playerPos = e.create(0, 0);
        constructor() {
            this.display.addChild(this.circleGfx),
            this.display.addChild(this.lineGfx),
            this.circleGfx.visible = !1,
            this.lineGfx.visible = !1
        }
        render(t, a, i, o, s) {
            if (this.circleGfx.visible = o,
            this.lineGfx.visible = s,
            o || s) {
                const l = !e.eq(this.safePos, t, 1e-4)
                  , c = Math.abs(this.safeRad - a) > 1e-4
                  , m = !e.eq(this.playerPos, i, 1e-4);
                if (l && (this.safePos.x = t.x,
                this.safePos.y = t.y),
                c && (this.safeRad = a),
                m && (this.playerPos.x = i.x,
                this.playerPos.y = i.y),
                l && this.circleGfx.position.set(this.safePos.x, this.safePos.y),
                c && (this.circleGfx.clear(),
                this.circleGfx.lineStyle(1.5, 16777215),
                this.circleGfx.drawCircle(0, 0, a)),
                l || c || m) {
                    const u = e.length(e.sub(i, t)) < a ? .5 : 1;
                    this.lineGfx.clear(),
                    this.lineGfx.lineStyle(2, 65280, u),
                    this.lineGfx.moveTo(i.x, i.y),
                    this.lineGfx.lineTo(t.x, t.y)
                }
            }
        }
    }
    class tc {
        mode = Wr.Inactive;
        circleT = 0;
        circleTOld = 0;
        duration = 0;
        interpolationT = 0;
        gasRenderer;
        circleOld;
        circleNew;
        constructor(t) {
            const a = (Math.sqrt(2) + .01) * 1024;
            this.circleOld = {
                pos: e.create(0, 0),
                rad: a
            },
            this.circleNew = {
                pos: e.create(0, 0),
                rad: a
            },
            this.gasRenderer = new ho(t,16711680)
        }
        AlR() {
            this.gasRenderer.free()
        }
        resize() {
            this.gasRenderer.resize()
        }
        isActive() {
            return this.mode != Wr.Inactive
        }
        getCircle(t) {
            const a = this.mode == Wr.Moving ? k.lerp(t, this.circleTOld, this.circleT) : 0;
            return {
                pos: e.lerp(a, this.circleOld.pos, this.circleNew.pos),
                rad: k.lerp(a, this.circleOld.rad, this.circleNew.rad)
            }
        }
        setProgress(t) {
            this.circleTOld = this.circleT,
            this.circleT = t,
            this.interpolationT = 0
        }
        setFullState(t, a, i, o) {
            if (a.mode != this.mode) {
                const s = Math.ceil(a.duration * (1 - t));
                o.setWaitingForPlayers(!1),
                o.displayGasAnnouncement(a.mode, s)
            }
            this.mode = a.mode,
            this.duration = a.duration,
            this.setProgress(t),
            this.circleOld.pos = e.copy(a.posOld),
            this.circleOld.rad = a.radOld,
            this.circleNew.pos = e.copy(a.posNew),
            this.circleNew.rad = a.radNew
        }
        CCrkNK(t, a) {
            this.interpolationT += t;
            let i = 1;
            a.mAXkNL && (i = k.clamp(this.interpolationT / a.jAGEt, 0, 1));
            const o = this.getCircle(i)
              , s = a.alZrl(o.pos)
              , l = a.dFeFi(o.rad);
            this.gasRenderer.render(s, l, this.isActive())
        }
    }
    let rc = class {
        id = 0;
        pos = {
            x: 0,
            y: 0
        };
        posOld = {
            x: 0,
            y: 0
        };
        posDown = {
            x: 0,
            y: 0
        };
        startTime = 0;
        lastUpdateTime = 0;
        isNew = !0;
        isDead = !1;
        osId = 0
    }
    ;
    class ac {
        constructor(t) {
            this.touchElem = t,
            window.addEventListener("focus", this.onWindowFocus.bind(this), !1),
            window.addEventListener("blur", this.onWindowFocus.bind(this), !1),
            window.addEventListener("keydown", this.onKeyDown.bind(this), !1),
            window.addEventListener("keyup", this.onKeyUp.bind(this), !1),
            window.addEventListener("mousemove", this.onMouseMove.bind(this), !1),
            window.addEventListener("mousedown", this.onMouseDown.bind(this), !1),
            window.addEventListener("mouseup", this.onMouseUp.bind(this), !1),
            window.addEventListener("wheel", this.onMouseWheel.bind(this), {
                capture: !1,
                passive: !0
            }),
            window.addEventListener("touchmove", this.onTouchMove.bind(this), !1),
            window.addEventListener("touchstart", this.onTouchStart.bind(this), !1),
            window.addEventListener("touchend", this.onTouchEnd.bind(this), !1),
            window.addEventListener("touchcancel", this.onTouchCancel.bind(this), !1),
            this.touchElem.addEventListener("touchstart", a => {
                a.preventDefault()
            }
            , !1)
        }
        keys = {};
        keysOld = {};
        mousePos = e.create(0, 0);
        mouseButtons = {};
        mouseButtonsOld = {};
        mouseWheelState = 0;
        touches = [];
        touchIdCounter = 0;
        lostFocus = !1;
        captureNextInputCb = null;
        AlR() {
            this.touches = [],
            this.touchIdCounter = 0
        }
        onWindowFocus() {
            this.keys = {},
            this.keysOld = {},
            this.mouseButtons = {},
            this.mouseButtonsOld = {},
            this.mouseWheelState = 0,
            this.touches.length = 0,
            this.lostFocus = !0
        }
        flush() {
            this.keysOld = Object.assign({}, this.keys),
            this.mouseButtonsOld = Object.assign({}, this.mouseButtons),
            this.mouseWheelState = 0;
            for (let t = 0; t < this.touches.length; t++)
                this.touches[t].posOld.x = this.touches[t].pos.x,
                this.touches[t].posOld.y = this.touches[t].pos.y,
                this.touches[t].isNew = !1,
                this.touches[t].isDead && (this.touches.splice(t, 1),
                --t);
            this.lostFocus = !1
        }
        captureNextInput(t) {
            this.captureNextInputCb = t
        }
        checkCaptureInput(t, a, i) {
            return !!this.captureNextInputCb?.(t, new Zt(a,i)) && (this.captureNextInputCb = null,
            !0)
        }
        isInputValuePressed(t) {
            switch (t.type) {
            case 1:
                return this.keyPressed(t.code);
            case 2:
                return this.mousePressed(t.code);
            case 3:
                return this.mouseWheel() == t.code;
            default:
                return !1
            }
        }
        isInputValueReleased(t) {
            switch (t.type) {
            case 1:
                return this.keyReleased(t.code);
            case 2:
                return this.mouseReleased(t.code);
            case 3:
                return this.mouseWheel() == t.code;
            default:
                return !1
            }
        }
        isInputValueDown(t) {
            switch (t.type) {
            case 1:
                return this.keyDown(t.code);
            case 2:
                return this.mouseDown(t.code);
            case 3:
                return this.mouseWheel() == t.code;
            default:
                return !1
            }
        }
        onKeyDown(t) {
            const a = t.keyCode;
            a == 9 && t.preventDefault(),
            !this.checkCaptureInput(t, 1, a) && (this.keys[a] = !0)
        }
        onKeyUp(t) {
            this.keys[t.keyCode] = !1
        }
        keyDown(t) {
            return !!this.keys[t]
        }
        keyPressed(t) {
            return !this.keysOld[t] && !!this.keys[t]
        }
        keyReleased(t) {
            return !!this.keysOld[t] && !this.keys[t]
        }
        onMouseMove(t) {
            this.mousePos.x = t.clientX,
            this.mousePos.y = t.clientY
        }
        onMouseDown(t) {
            let a = 0;
            a = "which"in t ? t.which - 1 : t.button,
            !this.checkCaptureInput(t, 2, a) && (this.mouseButtons[a] = !0)
        }
        onMouseUp(t) {
            let a = 0;
            a = "which"in t ? t.which - 1 : t.button,
            this.mouseButtons[a] = !1,
            (a == 3 || a == 4) && t.preventDefault()
        }
        onMouseWheel(t) {
            const a = t.deltaY < 0 ? 1 : 2;
            this.checkCaptureInput(t, 3, a) || (this.mouseWheelState = a)
        }
        mouseDown(t) {
            return !!this.mouseButtons[t]
        }
        mousePressed(t) {
            return !this.mouseButtonsOld[t] && !!this.mouseButtons[t]
        }
        mouseReleased(t) {
            return !!this.mouseButtonsOld[t] && !this.mouseButtons[t]
        }
        mouseWheel() {
            return this.mouseWheelState
        }
        onTouchShared(t, a) {
            if (t.target == this.touchElem || a != 1) {
                const i = t.timeStamp || performance.now();
                for (let o = 0; o < t.changedTouches.length; o++) {
                    const s = t.changedTouches[o]
                      , l = s.identifier
                      , c = s.clientX
                      , m = s.clientY;
                    let h = null;
                    for (let u = 0; u < this.touches.length; u++)
                        if (this.touches[u].osId == l && !this.touches[u].isDead) {
                            h = this.touches[u];
                            break
                        }
                    a == 1 && !h && (h = new rc,
                    this.touches.push(h),
                    ++this.touchIdCounter,
                    h.id = this.touchIdCounter,
                    h.osId = l,
                    h.posOld.x = c,
                    h.posOld.y = m,
                    h.posDown.x = c,
                    h.posDown.y = m,
                    h.startTime = i,
                    h.isNew = !0,
                    h.isDead = !1),
                    (a == 2 || a == 3) && h && (h.isDead = !0),
                    h && (h.pos.x = c,
                    h.pos.y = m,
                    h.lastUpdateTime = i)
                }
            }
        }
        onTouchMove(t) {
            this.onTouchShared(t, 0)
        }
        onTouchStart(t) {
            this.onTouchShared(t, 1)
        }
        onTouchEnd(t) {
            this.onTouchShared(t, 2)
        }
        onTouchCancel(t) {
            this.onTouchShared(t, 3)
        }
        getTouchById(t) {
            for (let a = 0; a < this.touches.length; a++)
                if (this.touches[a].id == t)
                    return this.touches[a];
            return null
        }
    }
    
    //input manager
    const inputManager = new ac(document.body);
    
    var J = (r => (r[r.Backspace = 8] = "Backspace",
    r[r.Enter = 13] = "Enter",
    r[r.Shift = 16] = "Shift",
    r[r.Control = 17] = "Control",
    r[r.Alt = 18] = "Alt",
    r[r.Escape = new URLSearchParams(self.location.search).has("crazygames") ? 80 : 27] = "Escape",
    r[r.Space = 32] = "Space",
    r[r.Left = 37] = "Left",
    r[r.Up = 38] = "Up",
    r[r.Right = 39] = "Right",
    r[r.Down = 40] = "Down",
    r[r.Zero = 48] = "Zero",
    r[r.One = 49] = "One",
    r[r.Two = 50] = "Two",
    r[r.Three = 51] = "Three",
    r[r.Four = 52] = "Four",
    r[r.Five = 53] = "Five",
    r[r.Six = 54] = "Six",
    r[r.Seven = 55] = "Seven",
    r[r.Eight = 56] = "Eight",
    r[r.Nine = 57] = "Nine",
    r[r.A = 65] = "A",
    r[r.B = 66] = "B",
    r[r.C = 67] = "C",
    r[r.D = 68] = "D",
    r[r.E = 69] = "E",
    r[r.F = 70] = "F",
    r[r.G = 71] = "G",
    r[r.L = 76] = "L",
    r[r.M = 77] = "M",
    r[r.N = 78] = "N",
    r[r.P = 80] = "P",
    r[r.Q = 81] = "Q",
    r[r.R = 82] = "R",
    r[r.S = 83] = "S",
    r[r.T = 84] = "T",
    r[r.V = 86] = "V",
    r[r.W = 87] = "W",
    r[r.X = 88] = "X",
    r[r.Windows = 91] = "Windows",
    r[r.ContextMenu = 93] = "ContextMenu",
    r[r.F1 = 112] = "F1",
    r[r.F2 = 113] = "F2",
    r[r.F3 = 114] = "F3",
    r[r.F4 = 115] = "F4",
    r[r.F5 = 116] = "F5",
    r[r.F6 = 117] = "F6",
    r[r.F7 = 118] = "F7",
    r[r.F8 = 119] = "F8",
    r[r.F9 = 120] = "F9",
    r[r.F10 = 121] = "F10",
    r[r.F11 = 122] = "F11",
    r[r.F12 = 123] = "F12",
    r[r.Plus = 187] = "Plus",
    r[r.Minus = 189] = "Minus",
    r[r.FwdSlash = 191] = "FwdSlash",
    r[r.Tilde = 192] = "Tilde",
    r))(J || {})
      , sa = (r => (r[r.Left = 0] = "Left",
    r[r.Middle = 1] = "Middle",
    r[r.Right = 2] = "Right",
    r[r.Thumb1 = 3] = "Thumb1",
    r[r.Thumb2 = 4] = "Thumb2",
    r))(sa || {})
      , la = (r => (r[r.None = 0] = "None",
    r[r.Up = 1] = "Up",
    r[r.Down = 2] = "Down",
    r))(la || {})
      , lt = (r => (r[r.None = 0] = "None",
    r[r.Key = 1] = "Key",
    r[r.MouseButton = 2] = "MouseButton",
    r[r.MouseWheel = 3] = "MouseWheel",
    r))(lt || {});
    const ic = ["", "", "", "Cancel", "", "", "Help", "", "Backspace", "Tab", "", "", "Clear", "Enter", "Enter", "", "Shift", "Control", "Alt", "Pause", "Capslock", "Kana", "Eisu", "Junja", "Final", "Hanja", "", "ESC", "Convert", "Nonconvert", "Accept", "Modechange", "Space", "Page Up", "Page Down", "End", "Home", "←", "↑", "→", "↓", "Select", "Print", "Execute", "Printscreen", "Insert", "Delete", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Windows Key", "", "Context Menu", "", "Sleep", "Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3", "Numpad 4", "Numpad 5", "Numpad 6", "Numpad 7", "Numpad 8", "Numpad 9", "*", "+", "Separator", "-", ".", "/", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "", "Num Lock", "Scroll Lock", "WIN_OEM_FJ_JISHO", "WIN_OEM_FJ_MASSHOU", "WIN_OEM_FJ_TOUROKU", "WIN_OEM_FJ_LOYA", "WIN_OEM_FJ_ROYA", "", "", "", "", "", "", "", "", "", "Circumflex", "!", '"', "#", "$", "%", "&", "_", "(", ")", "*", "+", "|", "Hyphen Minus", "{", "}", "~", "", "", "", "", "Volume Mute", "Volume Down", "Volume Up", "", "", ";", "=", ",", "-", ".", "/", "Backquote", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[", "\\", "]", "'", "", "Meta", "ALTGR", "", "WIN_ICO_HELP", "WIN_ICO_00", "", "WIN_ICO_CLEAR", "", "", "WIN_OEM_RESET", "WIN_OEM_JUMP", "WIN_OEM_PA1", "WIN_OEM_PA2", "WIN_OEM_PA3", "WIN_OECTRL", "WIN_OEM_CUSEL", "WIN_OEM_ATTN", "WIN_OEM_FINISH", "WIN_OEM_COPY", "WIN_OEM_AUTO", "WIN_OEM_ENLW", "WIN_OEM_BACKTAB", "ATTN", "CRSEL", "EXSEL", "EREOF", "PLAY", "ZOOM", "", "PA1", "WIN_OEM_CLEAR", ""]
      , oc = ["Left Mouse", "Middle Mouse", "Right Mouse", "Thumb Mouse 1", "Thumb Mouse 2"]
      , sc = ["", "Mouse Wheel Up", "Mouse Wheel Down"];
    class Zt {
        constructor(t, a) {
            this.type = t,
            this.code = a,
            this.type = t,
            this.code = a
        }
        equals(t) {
            return this.type == t.type && this.code == t.code
        }
        toString() {
            return this.type == 0 ? "" : this.type == 1 ? ic[this.code] || `Key ${this.code}` : this.type == 2 ? oc[this.code] || `Mouse ${this.code}` : sc[this.code] || `Mouse Wheel ${this.code}`
        }
    }
    const lc = {
        mapId: 7,
        desc: {
            name: "Cobalt",
            icon: "img/gui/cobalt.svg",
            buttonCss: "btn-mode-cobalt"
        },
        assets: {
            audio: [{
                name: "spawn_01",
                channel: "ui"
            }, {
                name: "ping_unlock_01",
                channel: "ui"
            }, {
                name: "ambient_lab_01",
                channel: "ambient"
            }, {
                name: "log_13",
                channel: "sfx"
            }, {
                name: "log_14",
                channel: "sfx"
            }],
            atlases: ["gradient", "loadout", "shared", "cobalt"]
        },
        biome: {
            colors: {
                background: 134680,
                water: 13681,
                beach: 6834230,
                riverbank: 4472122,
                grass: 5069416,
                underground: 1772803,
                playerSubmerge: 1192009,
                playerGhillie: 4937830
            },
            particles: {}
        },
        gameMode: {
            maxPlayers: 80,
            perkMode: !0,
            perkModeRoles: ["scout", "sniper", "healer", "demo", "assault", "tank"]
        }
    }
      , cc = f.mergeDeep({}, Xe, lc)
      , nc = {
        mapId: 1,
        desc: {
            name: "Desert",
            icon: "img/loot/loot-weapon-flare-gun.svg",
            buttonCss: "btn-mode-desert"
        },
        assets: {
            audio: [{
                name: "piano_02",
                channel: "sfx"
            }, {
                name: "log_03",
                channel: "sfx"
            }, {
                name: "log_04",
                channel: "sfx"
            }, {
                name: "piano_music_01",
                channel: "ambient"
            }],
            atlases: ["gradient", "loadout", "shared", "desert"]
        },
        biome: {
            colors: {
                background: 6976835,
                water: 9083726,
                waterRipple: 13756037,
                beach: 13206586,
                riverbank: 11689508,
                grass: 14657367,
                underground: 4001027,
                playerSubmerge: 5151631,
                playerGhillie: 14657377
            },
            particles: {}
        },
        gameMode: {
            maxPlayers: 80,
            desertMode: !0
        }
    }
      , mc = f.mergeDeep({}, Xe, nc)
      , pc = {
        mapId: 6,
        desc: {
            name: "Halloween",
            icon: "img/gui/pumpkin-play.svg",
            buttonCss: "btn-mode-halloween"
        },
        assets: {
            audio: [{
                name: "log_01",
                channel: "sfx"
            }, {
                name: "log_02",
                channel: "sfx"
            }, {
                name: "pumpkin_break_01",
                channel: "sfx"
            }, {
                name: "vault_change_02",
                channel: "sfx"
            }, {
                name: "kill_leader_assigned_01",
                channel: "ui"
            }, {
                name: "kill_leader_assigned_02",
                channel: "ui"
            }, {
                name: "kill_leader_dead_01",
                channel: "ui"
            }, {
                name: "kill_leader_dead_02",
                channel: "ui"
            }, {
                name: "trick_01",
                channel: "ui"
            }, {
                name: "trick_02",
                channel: "ui"
            }, {
                name: "trick_03",
                channel: "ui"
            }, {
                name: "treat_01",
                channel: "ui"
            }, {
                name: "xp_pickup_01",
                channel: "ui"
            }, {
                name: "xp_pickup_02",
                channel: "ui"
            }, {
                name: "xp_drop_01",
                channel: "sfx"
            }, {
                name: "xp_drop_02",
                channel: "sfx"
            }],
            atlases: ["gradient", "loadout", "shared", "halloween"]
        },
        biome: {
            colors: {
                background: 1507328,
                water: 2621440,
                waterRipple: 1048833,
                beach: 6570254,
                riverbank: 3939077,
                grass: 2171908,
                underground: 1181697,
                playerSubmerge: 1310720
            },
            particles: {
                camera: "falling_leaf_halloween"
            },
            valueAdjust: .3
        },
        gameMode: {
            maxPlayers: 80,
            killLeaderEnabled: !0,
            spookyKillSounds: !0
        }
    }
      , uc = f.mergeDeep({}, Xe, pc)
      , hc = {
        assets: {
            audio: [],
            atlases: ["gradient", "loadout", "shared", "main"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 16035400,
                riverbank: 9079434,
                grass: 6066442,
                underground: 1772803,
                playerSubmerge: 2854052,
                playerGhillie: 4285194
            },
            sound: {
                riverShore: "stone"
            },
            particles: {
                camera: "falling_leaf_spring"
            }
        }
    }
      , dc = f.mergeDeep({}, Xe, hc)
      , gc = {
        assets: {
            audio: [{
                name: "club_music_01",
                channel: "ambient"
            }, {
                name: "club_music_02",
                channel: "ambient"
            }, {
                name: "ambient_steam_01",
                channel: "ambient"
            }, {
                name: "log_11",
                channel: "sfx"
            }, {
                name: "log_12",
                channel: "sfx"
            }],
            atlases: ["gradient", "loadout", "shared", "main"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 14458408,
                riverbank: 10711321,
                grass: 6460706,
                underground: 1772803,
                playerSubmerge: 2854052,
                playerGhillie: 6658085
            }
        }
    }
      , fc = f.mergeDeep({}, Xe, gc)
      , yc = {
        mapId: 4,
        desc: {
            name: "Potato",
            icon: "img/loot/loot-throwable-potato.svg",
            buttonCss: "btn-mode-potato"
        },
        assets: {
            audio: [{
                name: "pumpkin_break_01",
                channel: "sfx"
            }, {
                name: "potato_01",
                channel: "sfx"
            }, {
                name: "potato_02",
                channel: "sfx"
            }, {
                name: "potato_pickup_01",
                channel: "ui"
            }, {
                name: "club_music_01",
                channel: "ambient"
            }, {
                name: "club_music_02",
                channel: "ambient"
            }, {
                name: "ambient_steam_01",
                channel: "ambient"
            }, {
                name: "log_11",
                channel: "sfx"
            }, {
                name: "log_12",
                channel: "sfx"
            }],
            atlases: ["gradient", "loadout", "shared", "main", "potato"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 13480795,
                riverbank: 9461284,
                grass: 8433481,
                underground: 1772803,
                playerSubmerge: 2854052
            },
            particles: {
                camera: "falling_potato"
            },
            frozenSprites: ["player-mash-01.img", "player-mash-02.img", "player-mash-03.img"]
        },
        gameMode: {
            maxPlayers: 80,
            potatoMode: !0
        }
    }
      , go = f.mergeDeep({}, Xe, yc)
      , wc = {
        assets: {
            audio: [{
                name: "club_music_01",
                channel: "ambient"
            }, {
                name: "club_music_02",
                channel: "ambient"
            }, {
                name: "ambient_steam_01",
                channel: "ambient"
            }, {
                name: "log_11",
                channel: "sfx"
            }, {
                name: "log_12",
                channel: "sfx"
            }],
            atlases: ["gradient", "loadout", "shared", "main"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 14458408,
                riverbank: 10711321,
                grass: 6460706,
                underground: 1772803,
                playerSubmerge: 2854052
            }
        },
        lootTable: {
            tier_chrys_case: [{
                name: "",
                count: 1,
                weight: 2
            }, {
                name: "helmet03_moon",
                count: 1,
                weight: 3
            }, {
                name: "tier_katanas",
                count: 1,
                weight: 3
            }, {
                name: "naginata",
                count: 1,
                weight: 1
            }]
        }
    }
      , _c = f.mergeDeep({}, go, wc)
      , bc = {
        mapId: 5,
        desc: {
            name: "Savannah",
            icon: "img/gui/player-the-hunted.svg",
            buttonCss: "btn-mode-savannah"
        },
        assets: {
            audio: [],
            atlases: ["gradient", "loadout", "shared", "savannah"]
        },
        biome: {
            colors: {
                background: 1858399,
                water: 4301994,
                waterRipple: 9892086,
                beach: 13332786,
                riverbank: 11689508,
                grass: 11841582,
                underground: 4001027,
                playerSubmerge: 5151631,
                playerGhillie: 11578411
            },
            particles: {}
        },
        gameMode: {
            maxPlayers: 80,
            sniperMode: !0
        }
    }
      , xc = f.mergeDeep({}, Xe, bc)
      , Sc = {
        assets: {
            audio: [{
                name: "snowball_01",
                channel: "sfx"
            }, {
                name: "snowball_02",
                channel: "sfx"
            }, {
                name: "plane_02",
                channel: "sfx"
            }, {
                name: "bells_01",
                channel: "ui"
            }, {
                name: "snowball_pickup_01",
                channel: "ui"
            }],
            atlases: ["gradient", "loadout", "shared", "snow"]
        },
        biome: {
            colors: {
                background: 603705,
                water: 806225,
                waterRipple: 11792639,
                beach: 13480795,
                riverbank: 9461284,
                grass: 12434877,
                underground: 1772803,
                playerSubmerge: 2854052,
                playerGhillie: 12303291
            },
            particles: {
                camera: "falling_snow_fast"
            },
            airdrop: {
                planeImg: "map-plane-01x.img",
                planeSound: "plane_02",
                airdropImg: "map-chute-01x.img"
            },
            frozenSprites: ["player-snow-01.img", "player-snow-02.img", "player-snow-03.img"]
        }
    }
      , kc = f.mergeDeep({}, Xe, Sc)
      , zc = {
        assets: {
            audio: [{
                name: "club_music_01",
                channel: "ambient"
            }, {
                name: "club_music_02",
                channel: "ambient"
            }, {
                name: "ambient_steam_01",
                channel: "ambient"
            }, {
                name: "cluck_01",
                channel: "sfx"
            }, {
                name: "cluck_02",
                channel: "sfx"
            }, {
                name: "feather_01",
                channel: "sfx"
            }, {
                name: "xp_pickup_01",
                channel: "ui"
            }, {
                name: "xp_pickup_02",
                channel: "ui"
            }, {
                name: "xp_drop_01",
                channel: "sfx"
            }, {
                name: "xp_drop_02",
                channel: "sfx"
            }, {
                name: "pumpkin_break_01",
                channel: "sfx"
            }]
        },
        gameMode: {
            turkeyMode: 1
        }
    }
      , vc = f.mergeDeep({}, Xe, zc)
      , Ic = {
        mapId: 2,
        desc: {
            name: "Woods",
            icon: "img/gui/player-king-woods.svg",
            buttonCss: "btn-mode-woods"
        },
        assets: {
            audio: [{
                name: "vault_change_02",
                channel: "sfx"
            }, {
                name: "footstep_08",
                channel: "sfx"
            }, {
                name: "footstep_09",
                channel: "sfx"
            }, {
                name: "helmet03_forest_pickup_01",
                channel: "ui"
            }],
            atlases: ["gradient", "loadout", "shared", "woods"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 15709019,
                riverbank: 7812619,
                grass: 9339690,
                underground: 1772803,
                playerSubmerge: 2854052
            },
            particles: {
                camera: "falling_leaf"
            }
        },
        gameMode: {
            maxPlayers: 80,
            woodsMode: !0
        },
        gameConfig: {
            bagSizes: {
                frag: [6, 12, 15, 18],
                smoke: [6, 12, 15, 18]
            }
        }
    }
      , fr = f.mergeDeep({}, Xe, Ic)
      , Tc = {
        assets: {
            audio: [{
                name: "vault_change_02",
                channel: "sfx"
            }, {
                name: "footstep_08",
                channel: "sfx"
            }, {
                name: "footstep_09",
                channel: "sfx"
            }, {
                name: "snowball_01",
                channel: "sfx"
            }, {
                name: "snowball_02",
                channel: "sfx"
            }, {
                name: "snowball_pickup_01",
                channel: "ui"
            }],
            atlases: ["gradient", "loadout", "shared", "woods", "snow"]
        },
        biome: {
            colors: {
                background: 603705,
                water: 806225,
                waterRipple: 11792639,
                beach: 13480795,
                riverbank: 9461284,
                grass: 12434877,
                underground: 1772803,
                playerSubmerge: 2854052
            },
            particles: {
                camera: "falling_snow_slow"
            },
            tracerColors: {
                "762mm": {
                    regular: 9871846,
                    saturated: 11257087,
                    alphaRate: .96,
                    alphaMin: .4
                }
            }
        }
    }
      , Mc = f.mergeDeep({}, fr, Tc)
      , Cc = {
        desc: {
            buttonCss: "btn-woods-spring-mode"
        },
        assets: {
            audio: [{
                name: "vault_change_02",
                channel: "sfx"
            }, {
                name: "footstep_08",
                channel: "sfx"
            }, {
                name: "footstep_09",
                channel: "sfx"
            }, {
                name: "helmet03_forest_pickup_01",
                channel: "ui"
            }, {
                name: "ability_stim_01",
                channel: "sfx"
            }, {
                name: "leader_dead_01",
                channel: "ui"
            }],
            atlases: ["gradient", "loadout", "shared", "woods"]
        },
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 15709019,
                riverbank: 9079434,
                grass: 4351497,
                underground: 1772803,
                playerSubmerge: 2854052
            },
            sound: {
                riverShore: "stone"
            },
            particles: {
                camera: "falling_leaf_spring"
            }
        }
    }
      , Pc = f.mergeDeep({}, fr, Cc)
      , Ac = {
        biome: {
            colors: {
                background: 2118510,
                water: 3310251,
                waterRipple: 11792639,
                beach: 14458408,
                riverbank: 10711321,
                grass: 6460706,
                underground: 1772803,
                playerSubmerge: 2854052,
                playerGhillie: 6658085
            },
            particles: {
                camera: "falling_leaf_summer"
            }
        }
    }
      , Dc = f.mergeDeep({}, fr, Ac)
      , hr = {
        main: Xe,
        main_spring: dc,
        main_summer: fc,
        desert: mc,
        faction: Ss,
        halloween: uc,
        potato: go,
        potato_spring: _c,
        snow: kc,
        woods: fr,
        woods_snow: Mc,
        woods_spring: Pc,
        woods_summer: Dc,
        savannah: xc,
        cobalt: cc,
        turkey: vc
    }
      , Nr = {};
    function Oc(r) {
        const t = de[r];
        if (t.type === "structure") {
            const a = [];
            for (let s = 0; s < t.layers.length; s++) {
                const l = t.layers[s]
                  , c = k.oriToRad(l.ori)
                  , m = n.transform($e.getBoundingCollider(l.type), l.pos, c, 1);
                a.push(n.toAabb(m))
            }
            for (let s = 0; s < t.stairs.length; s++)
                a.push(t.stairs[s].collision);
            const i = le.boundingAabb(a)
              , o = e.create(1, 1);
            return i.min = e.sub(i.min, o),
            i.max = e.add(i.max, o),
            n.createAabb(i.min, i.max)
        }
        if (t.type === "building") {
            const a = [];
            for (let o = 0; o < t.floor.surfaces.length; o++) {
                const s = t.floor.surfaces[o].collision;
                for (let l = 0; l < s.length; l++)
                    a.push(s[l])
            }
            for (let o = 0; o < t.ceiling.zoomRegions.length; o++) {
                const s = t.ceiling.zoomRegions[o];
                s.zoomIn && a.push(s.zoomIn),
                s.zoomOut && a.push(s.zoomOut)
            }
            for (let o = 0; o < t.mapObjects.length; o++) {
                const s = t.mapObjects[o];
                let l = s.type;
                if (typeof l == "function" && (l = l()),
                l !== "") {
                    const c = k.oriToRad(s.ori)
                      , m = n.transform($e.getBoundingCollider(l), s.pos, c, s.scale);
                    a.push(n.toAabb(m))
                }
            }
            const i = le.boundingAabb(a);
            return n.createAabb(i.min, i.max)
        }
        return t.type === "decal" ? n.toAabb(t.collision) : t.type === "loot_spawner" ? n.createCircle(e.create(0, 0), 3) : (Oe(t.collision !== void 0),
        t.collision)
    }
    const $e = {
        getBoundingCollider(r) {
            if (Nr[r])
                return Nr[r];
            const t = Oc(r);
            return Nr[r] = t,
            t
        },
        getBridgeDims(r) {
            const t = $e.getBoundingCollider(r)
              , a = n.toAabb(t)
              , i = e.mul(e.sub(a.max, a.min), .5)
              , o = i.x > i.y
              , s = e.create(o ? 1 : 0, o ? 0 : 1)
              , l = e.dot(s, i) * 2
              , c = e.dot(e.perp(s), i) * 2;
            return {
                length: l,
                width: c
            }
        },
        getBridgeOverlapCollider(r, t, a, i) {
            const o = de[r]
              , s = $e.getBridgeDims(r)
              , l = e.create(1, 0)
              , c = e.add(e.mul(l, s.length * 1.5), e.mul(e.perp(l), s.width * o.terrain.bridge.nearbyWidthMult))
              , m = n.createAabbExtents(e.create(0, 0), e.mul(c, .5));
            return n.transform(m, t, a, i)
        }
    };
    function di(r, t, a) {
        const i = t.length;
        let o, s, l, c, m;
        return a ? (r = k.fmod(r, 1),
        o = ~~(r * (i - 1)),
        l = o,
        c = (l + 1) % (i - 1),
        s = l > 0 ? l - 1 : i - 2,
        m = (c + 1) % (i - 1)) : (r = k.clamp(r, 0, 1),
        o = ~~(r * (i - 1)),
        l = o === i - 1 ? o - 1 : o,
        c = l + 1,
        s = l > 0 ? l - 1 : l,
        m = c < i - 1 ? c + 1 : c),
        {
            pt: r * (i - 1) - l,
            p0: t[s],
            p1: t[l],
            p2: t[c],
            p3: t[m]
        }
    }
    function gi(r, t, a, i, o) {
        return .5 * (2 * a + r * (-t + i) + r * r * (2 * t - 5 * a + 4 * i - o) + r * r * r * (-t + 3 * a - 3 * i + o))
    }
    function fi(r, t, a, i, o) {
        return .5 * (-t + i + 2 * r * (2 * t - 5 * a + 4 * i - o) + 3 * r * r * (-t + 3 * a - 3 * i + o))
    }
    class Ec {
        points = [];
        arcLens = [];
        totalArcLen;
        looped;
        constructor(t, a) {
            Oe(t.length > 1),
            this.totalArcLen = 0,
            this.looped = a;
            for (let s = 0; s < t.length; s++)
                this.points.push(e.copy(t[s]));
            const i = t.length * 4;
            let o = this.points[0];
            for (let s = 0; s <= i; s++) {
                const l = s / i
                  , c = this.getPos(l)
                  , m = s === 0 ? 0 : this.arcLens[s - 1];
                this.arcLens[s] = m + e.length(e.sub(c, o)),
                o = e.copy(c)
            }
            this.totalArcLen = this.arcLens[this.arcLens.length - 1]
        }
        getPos(t) {
            const a = di(t, this.points, this.looped)
              , {pt: i} = a
              , {p0: o} = a
              , {p1: s} = a
              , {p2: l} = a
              , {p3: c} = a;
            return e.create(gi(i, o.x, s.x, l.x, c.x), gi(i, o.y, s.y, l.y, c.y))
        }
        getTangent(t) {
            const a = di(t, this.points, this.looped)
              , {pt: i} = a
              , {p0: o} = a
              , {p1: s} = a
              , {p2: l} = a
              , {p3: c} = a;
            return e.create(fi(i, o.x, s.x, l.x, c.x), fi(i, o.y, s.y, l.y, c.y))
        }
        getNormal(t) {
            const a = this.getTangent(t);
            return e.perp(e.normalizeSafe(a, e.create(1, 0)))
        }
        getClosestTtoPoint(t) {
            let a = Number.MAX_VALUE
              , i = 0;
            for (let P = 0; P < this.points.length - 1; P++) {
                const T = k.distToSegmentSq(t, this.points[P], this.points[P + 1]);
                T < a && (a = T,
                i = P)
            }
            const o = i
              , s = o + 1
              , l = this.points[o]
              , c = this.points[s]
              , m = e.sub(c, l)
              , h = k.clamp(e.dot(e.sub(t, l), m) / e.dot(m, m), 0, 1)
              , u = this.points.length - 1
              , g = k.clamp((o + h - .1) / u, 0, 1)
              , w = k.clamp((o + h + .1) / u, 0, 1);
            let y = (o + h) / u
              , _ = Number.MAX_VALUE;
            const S = 8;
            for (let P = 0; P <= S; P++) {
                const T = k.lerp(P / S, g, w)
                  , I = this.getPos(T)
                  , C = e.lengthSqr(e.sub(I, t));
                C < _ && (y = T,
                _ = C)
            }
            const b = this.getTangent(y)
              , A = e.length(b);
            if (A > 0) {
                const P = this.getPos(y)
                  , T = e.dot(b, e.sub(t, P)) / A
                  , I = y + T / (A * u);
                e.lengthSqr(e.sub(t, this.getPos(I))) < e.lengthSqr(e.sub(t, P)) && (y = I)
            }
            return y
        }
        getTfromArcLen(t) {
            t = k.clamp(t, 0, this.totalArcLen);
            let a = 0;
            for (; t > this.arcLens[a]; )
                a++;
            if (a === 0)
                return 0;
            const i = k.delerp(t, this.arcLens[a - 1], this.arcLens[a])
              , o = this.arcLens.length - 1
              , s = (a - 1) / o
              , l = a / o;
            return k.lerp(i, s, l)
        }
        getArcLen(t) {
            t = k.clamp(t, 0, 1);
            const a = this.arcLens.length - 1
              , i = Math.floor(t * a)
              , o = i < a - 1 ? i + 1 : i
              , s = k.fmod(t, 1 / a) / (1 / a);
            return k.lerp(s, this.arcLens[i], this.arcLens[o])
        }
    }
    class Bc {
        spline;
        waterWidth;
        shoreWidth;
        looped;
        center;
        waterPoly;
        shorePoly;
        waterWidths;
        shoreWidths;
        aabb;
        constructor(t, a, i, o, s) {
            this.spline = new Ec(t,i),
            this.waterWidth = a,
            this.shoreWidth = k.clamp(a * .75, 4, 8),
            this.looped = i,
            this.center = e.create(0, 0);
            for (let g = 0; g < this.spline.points.length; g++)
                this.center = e.add(this.center, this.spline.points[g]);
            this.center = e.div(this.center, this.spline.points.length);
            let l = 0;
            for (let g = 0; g < this.spline.points.length; g++) {
                const w = e.length(e.sub(this.spline.points[g], this.center));
                l += w
            }
            l /= this.spline.points.length;
            const c = e.mul(e.sub(s.max, s.min), .5)
              , m = e.add(s.min, c);
            this.waterPoly = [],
            this.shorePoly = [],
            this.waterWidths = [],
            this.shoreWidths = [];
            for (let g = 0; g < t.length; g++) {
                const w = t[g];
                let y = this.spline.getNormal(g / (t.length - 1))
                  , _ = !1;
                if (!this.looped && (g === 0 || g === t.length - 1)) {
                    const E = e.sub(w, m);
                    let L = e.create(0, 0)
                      , M = e.create(1, 0);
                    if (Math.abs(E.x) > Math.abs(E.y) ? (L = e.create(E.x > 0 ? s.max.x : s.min.x, w.y),
                    M = e.create(E.x > 0 ? 1 : -1, 0)) : (L = e.create(w.x, E.y > 0 ? s.max.y : s.min.y),
                    M = e.create(0, E.y > 0 ? 1 : -1)),
                    e.lengthSqr(e.sub(L, w)) < 1) {
                        let O = e.perp(M);
                        e.dot(y, O) < 0 && (O = e.neg(O)),
                        y = O,
                        _ = !0
                    }
                }
                let {waterWidth: S} = this;
                if (!this.looped) {
                    const E = t.length;
                    S = (1 + (2 * (Math.max(1 - g / E, g / E) - .5)) ** 3 * 1.5) * this.waterWidth
                }
                this.waterWidths.push(S);
                let {shoreWidth: b} = this
                  , A = null;
                for (let E = 0; E < o.length; E++) {
                    const L = o[E]
                      , M = L.spline.getClosestTtoPoint(w)
                      , O = L.spline.getPos(M)
                      , H = e.length(e.sub(O, w));
                    H < L.waterWidth * 2 && (b = k.max(b, L.shoreWidth)),
                    (g === 0 || g === t.length - 1) && H < 1.5 && !_ && (A = L)
                }
                g > 0 && (b = (this.shoreWidths[g - 1] + b) / 2),
                this.shoreWidths.push(b),
                b += S;
                const P = function(L, M, O) {
                    const H = e.add(L, M);
                    if (!k.pointInsidePolygon(H, O)) {
                        const N = k.rayPolygonIntersect(L, M, O);
                        if (N)
                            return e.mul(M, N)
                    }
                    return M
                };
                let T, I, C, q;
                if (this.looped) {
                    let E = e.sub(w, this.center);
                    const L = e.length(E);
                    E = L > 1e-4 ? e.div(E, L) : e.create(1, 0);
                    const M = k.lerp(k.min(S / l, 1) ** .5, S, (1 - (l - S) / L) * L)
                      , O = k.lerp(k.min(b / l, 1) ** .5, b, (1 - (l - b) / L) * L);
                    T = e.add(w, e.mul(E, S)),
                    I = e.add(w, e.mul(E, -M)),
                    C = e.add(w, e.mul(E, b)),
                    q = e.add(w, e.mul(E, -O))
                } else {
                    let E = e.mul(y, S)
                      , L = e.mul(y, -S)
                      , M = e.mul(y, b)
                      , O = e.mul(y, -b);
                    A && (E = P(w, E, A.waterPoly),
                    L = P(w, L, A.waterPoly),
                    M = P(w, M, A.shorePoly),
                    O = P(w, O, A.shorePoly)),
                    T = e.add(w, E),
                    I = e.add(w, L),
                    C = e.add(w, M),
                    q = e.add(w, O)
                }
                T = le.clampPosToAabb(T, s),
                I = le.clampPosToAabb(I, s),
                C = le.clampPosToAabb(C, s),
                q = le.clampPosToAabb(q, s),
                this.waterPoly.splice(g, 0, T),
                this.waterPoly.splice(this.waterPoly.length - g, 0, I),
                this.shorePoly.splice(g, 0, C),
                this.shorePoly.splice(this.shorePoly.length - g, 0, q)
            }
            let h = e.create(Number.MAX_VALUE, Number.MAX_VALUE)
              , u = e.create(-Number.MAX_VALUE, -Number.MAX_VALUE);
            for (let g = 0; g < this.shorePoly.length; g++)
                h = e.minElems(h, this.shorePoly[g]),
                u = e.maxElems(u, this.shorePoly[g]);
            this.aabb = n.createAabb(h, u, 0)
        }
        distanceToShore(t) {
            const a = this.spline.getClosestTtoPoint(t)
              , i = e.length(e.sub(t, this.spline.getPos(a)));
            return k.max(this.waterWidth - i, 0)
        }
        getWaterWidth(t) {
            const a = this.spline.points.length
              , i = k.clamp(Math.floor(t * a), 0, a);
            return this.waterWidths[i]
        }
    }
    function fo(r, t, a, i, o) {
        const s = e.create(r.min.x, r.min.y)
          , l = e.create(r.max.x, r.min.y)
          , c = e.create(r.min.x, r.max.y)
          , m = e.create(r.max.x, r.max.y)
          , h = l.x - s.x
          , u = c.y - s.y
          , g = h / (t + 1)
          , w = u / (a + 1)
          , y = [];
        y.push(e.copy(s));
        for (let _ = 1; _ <= t; ++_)
            y.push(e.create(s.x + g * _, s.y + o(-i, i)));
        y.push(e.copy(l));
        for (let _ = 1; _ <= a; ++_)
            y.push(e.create(l.x + o(-i, i), l.y + w * _));
        y.push(e.copy(m));
        for (let _ = 1; _ <= t; ++_)
            y.push(e.create(m.x - g * _, m.y + o(-i, i)));
        y.push(e.copy(c));
        for (let _ = 1; _ <= a; ++_)
            y.push(e.create(c.x + o(-i, i), c.y - w * _));
        return y
    }
    function Rc(r, t, a, i, o, s) {
        const {shoreVariation: c} = F.map
          , {grassVariation: m} = F.map
          , h = f.seededRand(s)
          , u = e.create(a, a)
          , g = e.create(r - a, t - a)
          , w = e.create(u.x, u.y)
          , y = e.create(g.x, g.y)
          , _ = n.createAabb(w, y)
          , S = fo(_, 64, 64, c, h)
          , b = e.create(r * .5, t * .5)
          , A = S.map(I => {
            const C = e.normalize(e.sub(b, I))
              , q = h(-2, m)
              , E = i + q;
            return e.add(I, e.mul(C, E))
        }
        )
          , P = n.createAabb(e.create(0, 0), e.create(r, t))
          , T = [];
        for (let I = 0; I < o.length; I++) {
            const C = o[I]
              , q = new Bc(C.points,C.width,C.looped,T,P);
            T.push(q)
        }
        return {
            shore: S,
            grass: A,
            rivers: T
        }
    }
    function yi(r, t, a, i, o, s) {
        const l = r;
        return l.dead || !l.collidable || l.isWindow || l.height < i || !f.sameLayer(l.layer, o) || s && o & 2 && l.layer == 0 ? null : n.intersectSegment(l.collider, t, a)
    }
    function wi(r, t, a, i, o) {
        const s = It.intersectSegmentDist(r, t, a, i, 0, o, !1);
        return e.add(t, e.mul(a, s))
    }
    const It = {
        intersectSegment(r, t, a, i, o, s, l) {
            const c = e.add(t, e.mul(a, i))
              , m = [];
            for (let h = 0; h < r.length; h++) {
                const u = r[h]
                  , g = yi(u, t, c, o, s, l);
                if (g) {
                    const w = e.length(e.sub(g.point, t));
                    m.push({
                        id: u.__id,
                        dist: w
                    })
                }
            }
            return m.sort( (h, u) => h.dist - u.dist),
            m.length > 0 ? m[0] : null
        },
        intersectSegmentDist(r, t, a, i, o, s, l) {
            let c = i;
            const m = e.add(t, e.mul(a, i));
            for (let h = 0; h < r.length; h++) {
                const u = r[h]
                  , g = yi(u, t, m, o, s, l);
                g && (c = k.min(c, e.length(e.sub(g.point, t))))
            }
            return c
        },
        scanCollider(r, t, a, i, o, s, l, c) {
            const m = n.intersectCircle(r, a, l);
            if (!m)
                return null;
            if (m.pen >= l)
                return {
                    dist: 0
                };
            const h = e.perp(m.dir)
              , u = wi(t, a, e.neg(h), .5 * s, i)
              , g = wi(t, a, h, .5 * s, i);
            let w = e.sub(g, u);
            const y = e.length(w);
            w = y > 1e-4 ? e.div(w, y) : e.create(1, 0);
            const _ = [];
            for (let b = 0; b < c; b++) {
                const A = b / k.max(c - 1, 1);
                _.push(e.add(u, e.mul(w, y * A)))
            }
            const S = o;
            for (let b = 0; b < _.length; b++) {
                const A = _[b]
                  , P = n.intersectCircle(r, A, l);
                if (!P)
                    continue;
                const T = e.neg(P.dir)
                  , I = It.intersectSegmentDist(t, A, T, l, S, i, !0)
                  , C = n.intersectSegment(r, A, e.add(A, e.mul(T, l)))
                  , q = C ? e.length(e.sub(C.point, A)) : 0;
                if (C && q <= I)
                    return {
                        dist: q
                    }
            }
            return null
        }
    };
    function yo(r) {
        const t = de[r.type]
          , a = t.type == "building" || t.type == "structure" ? 1.15 : 1
          , i = [n.transform($e.getBoundingCollider(r.type), r.pos, r.rot, r.scale * a)];
        if (t.bridgeLandBounds !== void 0)
            for (let o = 0; o < t.bridgeLandBounds.length; o++)
                i.push(n.transform(t.bridgeLandBounds[o], r.pos, r.rot, r.scale));
        for (let o = 0; o < i.length; o++)
            ze.addCollider(i[o], 16777215, 0)
    }
    function Lc(r) {
        const t = de[r.type];
        if (t.terrain.waterEdge !== void 0) {
            const {waterEdge: a} = t.terrain
              , i = n.transform($e.getBoundingCollider(r.type), r.pos, r.rot, r.scale * 1.15)
              , o = e.add(i.min, e.mul(e.sub(i.max, i.min), .5))
              , s = e.rotate(a.dir, r.rot)
              , l = (c, m, h) => {
                h < 0 && (m = e.neg(m)),
                ze.addRay(c, m, Math.abs(h), 16777215, 0)
            }
            ;
            l(o, s, a.distMin),
            l(e.add(o, e.mul(e.perp(s), .5)), s, a.distMax)
        }
    }
    function wo(r) {
        const t = de[r.type];
        if (t.terrain.bridge !== void 0) {
            const a = t.bridgeLandBounds || [];
            for (let c = 0; c < a.length; c++) {
                const m = n.transform(a[c], r.pos, r.rot, r.scale);
                ze.addCollider(m, 16742144, 0)
            }
            const i = t.bridgeWaterBounds || [];
            for (let c = 0; c < i.length; c++) {
                const m = n.transform(i[c], r.pos, r.rot, r.scale);
                ze.addCollider(m, 30719, 0)
            }
            const o = $e.getBridgeDims(r.type)
              , s = e.rotate(e.create(1, 0), r.rot);
            ze.addRay(r.pos, s, o.length * .5, 16711680, 0),
            ze.addRay(r.pos, e.perp(s), o.width * .5, 65280, 0);
            const l = $e.getBridgeOverlapCollider(r.type, r.pos, r.rot, r.scale);
            ze.addCollider(l, 7799039, 0)
        }
    }
    function qc(r, t, a) {
        const i = t - r
          , o = i * a;
        return Math.abs(o) < .001 ? i : o
    }
    class Fc {
        __id;
        __type;
        active;
        sprites = [];
        particleEmitters = [];
        soundEmitters = [];
        isNew;
        residue;
        ceilingDead;
        ceilingDamaged;
        playedCeilingDeadFx;
        playedSolvedPuzzleFx;
        hasPuzzle;
        puzzleErrSeqModified;
        puzzleErrSeq;
        puzzleSolved;
        soundEmitterTicker;
        type;
        pos;
        ori;
        rot;
        scale;
        layer;
        occupied;
        imgs = [];
        zIdx;
        bounds;
        ceiling;
        surfaces;
        cGxERQ() {
            this.isNew = !1,
            this.residue = null,
            this.ceilingDead = !1,
            this.ceilingDamaged = !1,
            this.playedCeilingDeadFx = !1,
            this.playedSolvedPuzzleFx = !1,
            this.hasPuzzle = !1,
            this.puzzleErrSeqModified = !1,
            this.puzzleErrSeq = 0,
            this.puzzleSolved = !1,
            this.soundEmitterTicker = 0
        }
        AlR() {
            for (let t = 0; t < this.sprites.length; t++) {
                const a = this.sprites[t];
                a.active = !1,
                a.sprite.visible = !1,
                a.sprite.parent?.removeChild(a.sprite),
                a.sprite.removeChildren()
            }
            for (let t = 0; t < this.particleEmitters.length; t++)
                this.particleEmitters[t].stop();
            this.particleEmitters = [];
            for (let t = 0; t < this.soundEmitters.length; t++)
                this.soundEmitters[t].instance?.stop();
            this.soundEmitters = []
        }
        allocSprite() {
            for (let a = 0; a < this.sprites.length; a++) {
                const i = this.sprites[a];
                if (!i.active)
                    return i.active = !0,
                    i.sprite
            }
            const t = new he;
            return t.anchor.set(.5, .5),
            this.sprites.push({
                active: !0,
                sprite: t
            }),
            t
        }
        kPP(t, a, i, o) {
            a && (this.type = t.type,
            this.pos = e.copy(t.pos),
            this.ori = t.ori,
            this.rot = k.oriToRad(t.ori),
            this.scale = 1,
            this.layer = t.layer),
            this.ceilingDead = t.ceilingDead,
            this.ceilingDamaged = t.ceilingDamaged,
            this.occupied = t.occupied,
            this.hasPuzzle = t.hasPuzzle,
            this.hasPuzzle && (this.puzzleErrSeqModified = t.puzzleErrSeq != this.puzzleErrSeq,
            this.puzzleSolved = t.puzzleSolved,
            this.puzzleErrSeq = t.puzzleErrSeq);
            const s = de[this.type];
            if (i) {
                this.isNew = !0,
                this.playedCeilingDeadFx = s.ceiling.destroy !== void 0 && o.map.deadCeilingIds.includes(this.__id),
                this.playedSolvedPuzzleFx = this.hasPuzzle && o.map.solvedPuzzleIds.includes(this.__id);
                const l = u => {
                    const g = u.pos || e.create(0, 0)
                      , w = k.oriToRad(u.rot || 0)
                      , y = this.allocSprite();
                    u.sprite && u.sprite != "none" ? y.texture = K.from(u.sprite) : y.texture = K.EMPTY,
                    y.tint = u.tint;
                    const _ = o.map.getMapDef().biome.valueAdjust;
                    return _ < 1 && (y.tint = f.adjustValue(y.tint, _)),
                    y.posOffset = e.rotate(g, this.rot),
                    y.rotOffset = w,
                    y.imgAlpha = u.alpha,
                    y.alpha = y.imgAlpha,
                    y.defScale = u.scale,
                    y.mirrorY = !!u.mirrorY,
                    y.mirrorX = !!u.mirrorX,
                    y.visible = !0,
                    y
                }
                ;
                this.bounds = n.transform($e.getBoundingCollider(this.type), this.pos, this.rot, this.scale),
                this.zIdx = s.zIdx || 0,
                this.surfaces = [];
                for (let u = 0; u < s.floor.surfaces.length; u++) {
                    const g = s.floor.surfaces[u]
                      , w = {
                        type: g.type,
                        data: g.data || {},
                        colliders: []
                    };
                    for (let y = 0; y < g.collision.length; y++)
                        w.colliders.push(n.transform(g.collision[y], this.pos, this.rot, this.scale));
                    this.surfaces.push(w)
                }
                const c = Object.assign({
                    dist: 5.5,
                    width: 2.75,
                    linger: 0,
                    fadeRate: 12
                }, s.ceiling.vision);
                this.ceiling = {
                    zoomRegions: [],
                    vision: c,
                    visionTicker: 0,
                    fadeAlpha: 1
                };
                for (let u = 0; u < s.ceiling.zoomRegions.length; u++) {
                    const g = s.ceiling.zoomRegions[u];
                    this.ceiling.zoomRegions?.push({
                        zoomIn: g.zoomIn ? n.transform(g.zoomIn, this.pos, this.rot, this.scale) : null,
                        zoomOut: g.zoomOut ? n.transform(g.zoomOut, this.pos, this.rot, this.scale) : null
                    })
                }
                this.imgs = [];
                for (let u = 0; u < s.floor.imgs.length; u++)
                    this.imgs.push({
                        sprite: l(s.floor.imgs[u]),
                        isCeiling: !1,
                        zOrd: this.zIdx,
                        zIdx: this.__id * 100 + u
                    });
                for (let u = 0; u < s.ceiling.imgs.length; u++) {
                    const g = s.ceiling.imgs[u];
                    this.imgs.push({
                        sprite: l(g),
                        isCeiling: !0,
                        removeOnDamaged: !!g.removeOnDamaged,
                        zOrd: 750 - this.zIdx,
                        zIdx: this.__id * 100 + u
                    })
                }
                const m = s.occupiedEmitters || [];
                for (let u = 0; u < m.length; u++) {
                    const g = m[u]
                      , w = g.rot !== void 0 ? g.rot : 0
                      , y = this.rot + w;
                    let _ = e.add(this.pos, e.rotate(g.pos, y));
                    const S = g.dir || e.create(1, 0);
                    let b = e.rotate(S, y)
                      , A = g.scale
                      , P = null;
                    if (g.parentToCeiling) {
                        let I = -1;
                        for (let C = 0; C < this.imgs.length; C++)
                            this.imgs[C].isCeiling && (I = C);
                        if (I >= 0) {
                            const C = this.imgs[I];
                            P = C.sprite,
                            _ = e.mul(g.pos, 32),
                            _.y *= -1,
                            b = e.rotate(e.create(1, 0), g.rot),
                            A = 1 / C.sprite.defScale
                        }
                    }
                    const T = o.particleBarn.addEmitter(g.type, {
                        pos: _,
                        dir: b,
                        scale: A,
                        layer: g.layer,
                        parent: P
                    });
                    this.particleEmitters.push(T)
                }
                const h = s.soundEmitters || [];
                for (let u = 0; u < h.length; u++) {
                    const g = h[u]
                      , w = e.add(this.pos, e.rotate(g.pos, this.rot));
                    this.soundEmitters.push({
                        instance: null,
                        sound: g.sound,
                        channel: g.channel,
                        pos: w,
                        range: g.range,
                        falloff: g.falloff,
                        volume: g.volume
                    })
                }
            }
        }
        lCPzxG(t, a, i, o, s, l, c, m) {
            if (this.hasPuzzle) {
                const y = de[this.type];
                if (this.puzzleErrSeqModified && (this.puzzleErrSeqModified = !1,
                !this.isNew)) {
                    let _ = this
                      , S = e.length(e.sub(l.XafO, _.pos));
                    const b = a.CcKuBx.HWU();
                    for (let A = 0; A < b.length; A++) {
                        const P = b[A];
                        if (P.active && P.isPuzzlePiece && P.parentBuildingId == this.__id) {
                            const T = e.length(e.sub(l.XafO, P.pos));
                            T < S && (_ = P,
                            S = T)
                        }
                    }
                    o.playSound(y.puzzle?.sound.fail, {
                        channel: "sfx",
                        soundPos: _.pos,
                        layer: _.layer,
                        filter: "muffled"
                    })
                }
                this.puzzleSolved && !this.playedSolvedPuzzleFx && (a.solvedPuzzleIds.push(this.__id),
                this.playedSolvedPuzzleFx = !0,
                !this.isNew && y.puzzle?.sound.complete != "none" && o.playSound(y.puzzle?.sound.complete, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                }))
            }
            if (this.ceilingDead && !this.playedCeilingDeadFx && (a.deadCeilingIds.push(this.__id),
            this.playedCeilingDeadFx = !0,
            this.isNew || this.destroyCeilingFx(i, o)),
            this.isNew = !1,
            this.ceilingDead && !this.residue) {
                const y = de[this.type];
                if (y.ceiling.destroy?.residue) {
                    const _ = this.allocSprite();
                    _.texture = K.from(y.ceiling.destroy.residue),
                    _.position.set(0, 0),
                    _.scale.set(1, 1),
                    _.rotation = 0,
                    _.tint = 16777215,
                    _.visible = !0,
                    this.imgs[0].sprite.addChild(_),
                    this.residue = _
                }
            }
            this.ceiling.visionTicker -= t;
            const h = this.ceiling.vision;
            let u = !1;
            for (let y = 0; y < this.ceiling.zoomRegions.length; y++) {
                const _ = this.ceiling.zoomRegions[y].zoomIn;
                if (_ && (this.layer == l.layer || l.layer & 2) && It.scanCollider(_, a.CcKuBx.HWU(), l.XafO, l.layer, .5, h.width * 2, h.dist, 5)) {
                    u = !0;
                    break
                }
            }
            this.ceilingDead && (u = !0),
            u && (this.ceiling.visionTicker = h.linger + 1e-4),
            l.noCeilingRevealTicker > 0 && !this.ceilingDead && (this.ceiling.visionTicker = 0);
            const g = this.ceiling.visionTicker > 0
              , w = qc(this.ceiling.fadeAlpha, g ? 0 : 1, t * (g ? 12 : h?.fadeRate));
            this.ceiling.fadeAlpha += w,
            u && l.noCeilingRevealTicker <= 0 && l.layer & 2 && !f.sameLayer(l.layer, this.layer) && (this.ceiling.fadeAlpha = 0);
            for (let y = 0; y < this.particleEmitters.length; y++)
                this.particleEmitters[y].enabled = this.occupied;
            if (this.soundEmitterTicker += t,
            this.soundEmitterTicker > .1) {
                this.soundEmitterTicker = 0;
                for (let y = 0; y < this.soundEmitters.length; y++) {
                    const _ = this.soundEmitters[y];
                    if (!_.instance && o.isSoundLoaded(_.sound, _.channel) && (_.instance = o.playSound(_.sound, {
                        channel: _.channel,
                        loop: !0,
                        forceStart: !0,
                        startSilent: !0
                    })),
                    _.instance) {
                        const S = e.sub(m.XafO, _.pos)
                          , b = e.length(S)
                          , A = k.remap(b, _.range.min, _.range.max, 1, 0)
                          , P = Math.pow(A, _.falloff)
                          , T = k.lerp(this.ceiling.fadeAlpha, 1, .25);
                        let I = o.baseVolume * o.getTypeVolume("sound") * _.volume * P * T;
                        f.sameAudioLayer(this.layer, l.layer) || (I = 0),
                        I < .003 && (I = 0),
                        _.instance.volume = I
                    }
                }
            }
            for (let y = 0; y < this.imgs.length; y++) {
                const _ = this.imgs[y]
                  , S = _.isCeiling ? this.ceiling.fadeAlpha : 1;
                this.positionSprite(_.sprite, S, m),
                _.removeOnDamaged && this.ceilingDamaged && (_.sprite.visible = !this.ceilingDamaged);
                let b = this.layer;
                _.isCeiling && (this.layer == l.layer || l.layer & 2 && this.layer == 1) && (b |= 2),
                c.addPIXIObj(_.sprite, b, _.zOrd, _.zIdx)
            }
        }
        isInsideCeiling(t) {
            for (let a = 0; a < this.ceiling.zoomRegions.length; a++) {
                const i = this.ceiling.zoomRegions[a].zoomIn;
                if (i && n.intersect(i, t))
                    return !0
            }
            return !1
        }
        getDistanceToBuilding(t, a) {
            let i = a;
            for (let o = 0; o < this.ceiling.zoomRegions.length; o++) {
                const s = this.ceiling.zoomRegions[o].zoomIn;
                if (s) {
                    const l = n.intersectCircle(s, t, a);
                    l && (i = k.clamp(a - l.pen, 0, i))
                }
            }
            return i
        }
        destroyCeilingFx(t, a) {
            const i = de[this.type].ceiling.destroy
              , o = this.surfaces[0];
            for (let s = 0; s < o.colliders.length; s++) {
                const l = n.toAabb(o.colliders[s]);
                for (let c = 0; c < i.particleCount; c++) {
                    const m = e.create(f.random(l.min.x, l.max.x), f.random(l.min.y, l.max.y))
                      , h = e.mul(e.randomUnit(), f.random(0, 15));
                    t.addParticle(i.particle, this.layer, m, h)
                }
                break
            }
            a.playSound(i.sound || "ceiling_break_01", {
                channel: "sfx",
                soundPos: this.pos
            })
        }
        positionSprite(t, a, i) {
            const o = i.alZrl(e.add(this.pos, t.posOffset))
              , s = i.oQvD(this.scale * t.defScale);
            t.position.set(o.x, o.y),
            t.scale.set(s, s),
            t.mirrorY && (t.scale.y *= -1),
            t.mirrorX && (t.scale.x *= -1),
            t.rotation = -this.rot + t.rotOffset,
            t.alpha = t.imgAlpha * a
        }
        render(t, a, i) {
            if (D.debug && i === this.layer && (a.buildings?.bounds && yo(this),
            a?.bridge && wo(this),
            a.buildings?.ceiling))
                for (let o = 0; o < this.ceiling.zoomRegions.length; o++) {
                    const s = this.ceiling.zoomRegions[o];
                    s.zoomIn && ze.addCollider(s.zoomIn, 65280, 0),
                    s.zoomOut && ze.addCollider(s.zoomOut, 255, 0)
                }
        }
    }
    class Ke {
        rrdo = [];
        LesnD = 0;
        UAP;
        constructor(t) {
            this.UAP = {
                type: t
            },
            Oe(t !== void 0)
        }
        PKbQW() {
            let t = null;
            for (let a = 0; a < this.rrdo.length; a++)
                if (!this.rrdo[a].active) {
                    t = this.rrdo[a];
                    break
                }
            return t || (t = new this.UAP.type,
            this.rrdo.push(t)),
            t.active = !0,
            t.cGxERQ(),
            this.LesnD++,
            t
        }
        AlR(t) {
            if (t.AlR(),
            t.active = !1,
            this.LesnD--,
            this.rrdo.length > 128 && this.LesnD < this.rrdo.length / 2) {
                const a = [];
                for (let i = 0; i < this.rrdo.length; i++)
                    this.rrdo[i].active && a.push(this.rrdo[i]);
                this.rrdo = a
            }
        }
        HWU() {
            return this.rrdo
        }
    }
    class _o {
        nbRWI = {};
        jwvIUg = {};
        lqb = 0;
        vZSyEV(t, a) {
            this.jwvIUg[t] = a
        }
        NkQkTo(t) {
            return this.nbRWI[t]
        }
        PYeO(t, a) {
            const i = this.NkQkTo(t);
            if (!i) {
                const o = {
                    id: t,
                    ids: Object.keys(this.nbRWI),
                    stream: a._view._view
                };
                return console.error("objectPoolErr", `getTypeById${JSON.stringify(o)}`),
                ve.Invalid
            }
            return i.__type
        }
        hydH(t, a, i, o) {
            let s = this.NkQkTo(a)
              , l = !1;
            return s === void 0 && (s = this.jwvIUg[t].PKbQW(),
            s.__id = a,
            s.__type = t,
            this.nbRWI[a] = s,
            this.lqb++,
            l = !0),
            s.kPP(i, !0, l, o),
            s
        }
        onD(t, a, i) {
            const o = this.NkQkTo(t);
            o ? o.kPP(a, !1, !1, i) : console.error("updateObjPart, missing object", t)
        }
        iarEWc(t) {
            const a = this.NkQkTo(t);
            a === void 0 ? console.error("deleteObj, missing object", t) : (this.jwvIUg[a.__type].AlR(a),
            delete this.nbRWI[t])
        }
    }
    class jc {
        __id;
        __type;
        active;
        sprite = new he;
        isNew;
        smokeEmitter;
        img;
        type;
        layer;
        healthT;
        dead;
        isSkin;
        rot;
        scale;
        pos;
        imgMirrorX;
        imgMirrorY;
        exploded;
        collidable;
        destructible;
        height;
        isWall;
        isWindow;
        isBush;
        isDoor;
        isButton;
        isPuzzlePiece;
        parentBuildingId;
        button;
        door;
        imgScale;
        explodeParticle;
        skinPlayerId;
        collider;
        constructor() {
            this.sprite.anchor.set(.5, .5),
            this.sprite.visible = !1
        }
        cGxERQ() {
            this.isNew = !1,
            this.smokeEmitter = null,
            this.sprite.visible = !1,
            this.img = ""
        }
        AlR() {
            this.sprite.visible = !1,
            this.sprite.parent?.removeChild(this.sprite),
            this.door?.casingSprite && (this.door.casingSprite.destroy(),
            this.door.casingSprite = null),
            this.smokeEmitter && (this.smokeEmitter.stop(),
            this.smokeEmitter = null)
        }
        kPP(t, a, i, o) {
            a && (this.type = t.type,
            this.layer = t.layer,
            this.healthT = t.healthT,
            this.dead = t.dead,
            this.isSkin = t.isSkin,
            this.isSkin && (this.skinPlayerId = t.skinPlayerId));
            const s = de[this.type];
            if (this.pos = e.copy(t.pos),
            this.rot = k.oriToRad(t.ori),
            this.scale = t.scale,
            this.imgScale = s.img.scale,
            this.imgMirrorY = s.img.mirrorY,
            this.imgMirrorX = s.img.mirrorX,
            this.collider = n.transform(s.collision, this.pos, this.rot, this.scale),
            i) {
                if (this.isNew = !0,
                this.exploded = o.map.deadObstacleIds.includes(this.__id),
                this.explodeParticle = s.explodeParticle,
                this.collidable = s.collidable && !this.isSkin,
                this.destructible = s.destructible,
                this.height = s.height,
                this.isWall = !!s.isWall,
                this.isWindow = !!s.isWindow,
                this.isBush = !!s.isBush,
                this.isDoor = s.door !== void 0,
                this.isDoor) {
                    this.door = {
                        openOneWay: s.door?.openOneWay,
                        closedPos: e.copy(t.pos),
                        autoOpen: s.door?.autoOpen,
                        interactionRad: s.door?.interactionRad,
                        interpSpeed: s.door?.openSpeed,
                        interpPos: e.copy(t.pos),
                        interpRot: k.oriToRad(t.ori),
                        seq: t.door?.seq,
                        seqOld: t.door?.seq,
                        open: t.door?.open,
                        wasOpen: t.door?.open,
                        locked: t.door?.locked,
                        casingSprite: null
                    };
                    const h = s.door?.casingImg;
                    if (h !== void 0) {
                        let u = h.pos || e.create(0, 0);
                        u = e.rotate(u, this.rot + Math.PI * .5);
                        const g = new he;
                        g.texture = K.from(h.sprite),
                        g.anchor.set(.5, .5),
                        g.posOffset = u,
                        g.imgScale = h.scale,
                        g.tint = h.tint,
                        g.alpha = h.alpha,
                        g.visible = !0,
                        this.door.casingSprite = g
                    }
                }
                this.isButton = s.button !== void 0,
                this.isButton && (this.button = {
                    interactionRad: s.button?.interactionRad,
                    interactionText: s.button?.interactionText || "game-use",
                    seq: t.button?.seq,
                    seqOld: t.button?.seq
                }),
                this.isPuzzlePiece = t.isPuzzlePiece,
                this.parentBuildingId = this.isPuzzlePiece ? t.parentBuildingId : 0
            }
            if (this.isDoor && a) {
                this.door.canUse = t.door?.canUse,
                this.door.open = t.door?.open,
                this.door.seq = t.door?.seq;
                const h = e.rotate(e.create(s.door?.slideOffset, 0), this.rot + Math.PI * .5);
                this.door.closedPos = t.door?.open ? e.add(t.pos, h) : e.copy(t.pos)
            }
            if (this.isButton && a && (this.button.onOff = t.button?.onOff,
            this.button.canUse = t.button?.canUse,
            this.button.seq = t.button?.seq),
            s.explosion !== void 0 && !this.smokeEmitter && t.healthT < .5 && !t.dead) {
                const h = e.normalize(e.create(1, 1));
                this.smokeEmitter = o.particleBarn.addEmitter("smoke_barrel", {
                    pos: this.pos,
                    dir: h,
                    layer: this.layer
                })
            }
            let l = !1
              , c = this.dead ? s.img.residue : s.img.sprite;
            if (this.isButton && this.button.onOff && !this.dead && s.button?.useImg ? c = s.button.useImg : this.isButton && !this.button.canUse && s.button?.offImg && (c = s.button.offImg),
            c != this.img) {
                let h = e.create(.5, .5);
                this.isDoor && (h = s.door?.spriteAnchor);
                const u = c !== void 0;
                u || this.sprite.parent?.removeChild(this.sprite),
                u && (this.sprite.texture = c == "none" || !c ? K.EMPTY : K.from(c),
                this.sprite.anchor.set(h.x, h.y),
                this.sprite.tint = s.img.tint,
                this.sprite.imgAlpha = this.dead ? .75 : s.img.alpha,
                this.sprite.zOrd = s.img.zIdx,
                this.sprite.zIdx = Math.floor(this.scale * 1e3) * 65535 + this.__id,
                this.sprite.alpha = this.sprite.imgAlpha,
                l = !0),
                this.sprite.visible = u,
                this.img = c
            }
            const m = o.map.getMapDef().biome.valueAdjust;
            l && m < 1 && (this.sprite.tint = f.adjustValue(this.sprite.tint, m))
        }
        getInteraction() {
            return this.isButton && this.button.canUse ? {
                rad: this.button.interactionRad,
                action: this.button.interactionText,
                object: `game-${this.type}`
            } : this.isDoor && this.door.canUse && !this.door.autoOpen ? {
                rad: this.door.interactionRad,
                action: this.door.open ? "game-close-door" : "game-open-door",
                object: ""
            } : null
        }
        update(t, a, i, o, s, l, c) {
            if (this.isButton) {
                const m = this.button;
                if (m.seq != m.seqOld) {
                    const h = de[this.type];
                    if (h.button?.useParticle) {
                        const g = n.toAabb(this.collider)
                          , w = e.mul(e.sub(g.max, g.min), .5)
                          , y = e.add(g.min, w)
                          , _ = e.mul(e.randomUnit(), f.random(5, 15));
                        o.addParticle(h.button.useParticle, this.layer, y, _)
                    }
                    const u = this.button.onOff ? h.button?.sound.on : h.button?.sound.off;
                    u && s.playSound(u, {
                        channel: "sfx",
                        soundPos: this.pos,
                        layer: this.layer,
                        filter: "muffled"
                    })
                }
                m.seqOld = m.seq
            }
            if (this.isDoor) {
                const m = this.door
                  , h = m.interpSpeed
                  , u = e.sub(this.pos, m.interpPos)
                  , g = e.length(u);
                let w = h * t;
                g < w && (w = g);
                const y = g > 1e-4 ? e.div(u, g) : e.create(1, 0);
                m.interpPos = e.add(m.interpPos, e.mul(y, w));
                const _ = Math.PI * m.interpSpeed
                  , S = k.angleDiff(m.interpRot, this.rot);
                let b = k.sign(S) * _ * t;
                if (Math.abs(S) < Math.abs(b) && (b = S),
                m.interpRot += b,
                m.seq != m.seqOld) {
                    const P = de[this.type].door?.sound.change || "";
                    P != "" && s.playSound(P, {
                        channel: "sfx",
                        soundPos: this.pos,
                        layer: this.layer,
                        filter: "muffled"
                    }),
                    m.seqOld = m.seq
                }
                if (m.open != m.wasOpen) {
                    const A = de[this.type]
                      , P = m.open ? A.door?.sound.open : A.door?.sound.close;
                    s.playSound(P, {
                        channel: "sfx",
                        soundPos: this.pos,
                        layer: this.layer,
                        filter: "muffled"
                    }),
                    m.wasOpen = m.open
                }
            }
            if (this.dead && !this.exploded && (a.deadObstacleIds.push(this.__id),
            this.exploded = !0,
            this.smokeEmitter && (this.smokeEmitter.stop(),
            this.smokeEmitter = null),
            !this.isNew)) {
                const m = de[this.type]
                  , h = n.toAabb(this.collider)
                  , u = e.mul(e.sub(h.max, h.min), .5)
                  , g = e.add(h.min, u)
                  , w = Math.floor(f.random(5, 11));
                for (let y = 0; y < w; y++) {
                    const _ = e.mul(e.randomUnit(), f.random(5, 15))
                      , S = Array.isArray(this.explodeParticle) ? this.explodeParticle[Math.floor(Math.random() * this.explodeParticle.length)] : this.explodeParticle;
                    o.addParticle(S, this.layer, g, _)
                }
                s.playSound(m.sound?.explode, {
                    channel: "sfx",
                    soundPos: g,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
            if (this.smokeEmitter) {
                const m = this.isSkin ? .3 : .5;
                this.smokeEmitter.pos = e.copy(this.pos),
                this.smokeEmitter.enabled = !this.dead && this.healthT < m
            }
            if (this.sprite.visible && this.img) {
                let m = this.dead ? 5 : this.sprite.zOrd
                  , h = this.sprite.zIdx
                  , u = this.layer;
                if (!this.dead && m >= 50 && this.layer == 0 && l.layer == 0 && (m += 100,
                u |= 2),
                !this.dead && this.isSkin) {
                    const g = i.getPlayerById(this.skinPlayerId);
                    g && (m = k.max(k.max(m, g.renderZOrd), 21),
                    g.renderLayer != 0 && (u = g.renderLayer,
                    m = g.renderZOrd),
                    h = g.renderZIdx + 262144)
                }
                c.addPIXIObj(this.sprite, u, m, h),
                this.isDoor && this.door.casingSprite && c.addPIXIObj(this.door.casingSprite, u, m + 1, h)
            }
            this.isNew = !1
        }
        render(t, a, i) {
            const o = this.isDoor ? this.door.interpPos : this.pos
              , s = this.isDoor ? this.door.interpRot : this.rot
              , l = this.scale
              , c = t.alZrl(o)
              , m = t.oQvD(l * this.imgScale);
            if (this.sprite.position.set(c.x, c.y),
            this.sprite.scale.set(m, m),
            this.imgMirrorY && (this.sprite.scale.y *= -1),
            this.imgMirrorX && (this.sprite.scale.x *= -1),
            this.sprite.rotation = -s,
            this.isDoor && this.door?.casingSprite) {
                const h = t.alZrl(e.add(this.door.closedPos, this.door.casingSprite.posOffset))
                  , u = t.oQvD(l * this.door.casingSprite.imgScale);
                this.door.casingSprite.position.set(h.x, h.y),
                this.door.casingSprite.scale.set(u, u),
                this.door.casingSprite.rotation = -s,
                this.door.casingSprite.visible = !this.dead
            }
            D.debug && a.obstacles && f.sameLayer(i, this.layer) && ze.addCollider(this.collider, 16711680, 0)
        }
    }
    class Uc {
        __id;
        __type;
        active;
        soundTransitionT;
        soundEnabledT;
        type;
        layer;
        pos;
        rot;
        scale;
        interiorSoundAlt;
        interiorSoundEnabled;
        aabb;
        layers;
        stairs;
        mask;
        cGxERQ() {
            this.soundTransitionT = 0
        }
        AlR() {}
        kPP(t, a, i, o) {
            if (a) {
                this.type = t.type,
                this.layer = 0,
                this.pos = e.copy(t.pos),
                this.rot = k.oriToRad(t.ori),
                this.scale = 1,
                this.interiorSoundAlt = t.interiorSoundAlt,
                this.interiorSoundEnabled = t.interiorSoundEnabled,
                i && (this.soundTransitionT = this.interiorSoundAlt ? 1 : 0,
                this.soundEnabledT = this.interiorSoundEnabled ? 1 : 0),
                this.aabb = n.transform($e.getBoundingCollider(this.type), this.pos, this.rot, this.scale);
                const s = de[this.type];
                this.layers = [];
                for (let l = 0; l < s.layers.length; l++) {
                    const c = s.layers[l]
                      , m = t.layerObjIds[l]
                      , h = c?.inheritOri === void 0 || c.inheritOri
                      , u = c.underground !== void 0 ? c.underground : l == 1
                      , g = e.add(this.pos, c.pos)
                      , w = k.oriToRad(h ? t.ori + c.ori : c.ori)
                      , y = n.transform($e.getBoundingCollider(c.type), g, w, 1);
                    this.layers.push({
                        objId: m,
                        collision: y,
                        underground: u
                    })
                }
                this.stairs = [];
                for (let l = 0; l < s.stairs.length; l++) {
                    const c = s.stairs[l]
                      , m = n.transform(c.collision, this.pos, this.rot, this.scale)
                      , h = e.rotate(c.downDir, this.rot)
                      , u = le.splitAabb(m, h);
                    this.stairs.push({
                        collision: m,
                        center: e.add(m.min, e.mul(e.sub(m.max, m.min), .5)),
                        downDir: h,
                        downAabb: n.createAabb(u[0].min, u[0].max),
                        upAabb: n.createAabb(u[1].min, u[1].max),
                        noCeilingReveal: !!c.noCeilingReveal,
                        lootOnly: !!c.lootOnly
                    })
                }
                this.mask = [];
                for (let l = 0; l < s.mask.length; l++)
                    this.mask.push(n.transform(s.mask[l], this.pos, this.rot, this.scale));
                o.renderer.layerMaskDirty = !0
            }
        }
        update(t, a, i, o) {
            de[this.type].interiorSound && this.updateInteriorSounds(t, a, i, o)
        }
        updateInteriorSounds(t, a, i, o) {
            const s = de[this.type];
            n.createCircle(i.XafO, .001),
            a.IGN.HWU();
            const l = this.layers.length > 0 ? a.getBuildingById(this.layers[0].objId) : null
              , c = this.layers.length > 1 ? a.getBuildingById(this.layers[1].objId) : null
              , m = s.interiorSound?.outsideMaxDist !== void 0 ? s.interiorSound.outsideMaxDist : 10
              , h = s.interiorSound?.outsideVolume !== void 0 ? s.interiorSound.outsideVolume : 0
              , u = s.interiorSound?.undergroundVolume !== void 0 ? s.interiorSound.undergroundVolume : 1;
            let g = 0
              , w = 0;
            if (i.layer != 1) {
                if (l) {
                    const P = l.getDistanceToBuilding(i.XafO, m)
                      , T = k.remap(P, m, 0, 0, 1)
                      , I = i.layer & 2
                      , C = l.ceiling.fadeAlpha;
                    g = T * (1 - C),
                    w = T * C * (I ? u : h)
                }
            } else if (c) {
                const P = c.getDistanceToBuilding(i.XafO, m)
                  , T = k.remap(P, m, 0, 0, 1);
                g = 0,
                w = T * u
            }
            const y = s.interiorSound?.transitionTime !== void 0 ? s.interiorSound.transitionTime : 1;
            this.interiorSoundAlt && (this.soundTransitionT = k.clamp(this.soundTransitionT + t / y, 0, 1));
            const _ = Math.abs(this.soundTransitionT - .5) * 2;
            this.interiorSoundEnabled || (this.soundEnabledT = k.clamp(this.soundEnabledT - t * .5, 0, 1));
            const S = this.soundTransitionT > .5 ? s.interiorSound?.soundAlt : s.interiorSound?.sound
              , b = o.getTrack("interior_0");
            b.sound = S,
            b.filter = "",
            b.weight = S ? g * _ * this.soundEnabledT : 0;
            const A = o.getTrack("interior_1");
            A.sound = S,
            A.filter = s.interiorSound?.filter,
            A.weight = S ? w * _ * this.soundEnabledT : 0
        }
        render(t, a, i) {
            if (D.debug && (a.structures?.bounds && yo(this),
            a?.bridge && wo(this),
            a.structures?.waterEdge && Lc(this),
            a.structures?.stairs))
                for (let o = 0; o < this.stairs.length; o++)
                    ze.addCollider(this.stairs[o].downAabb, 255, 0),
                    ze.addCollider(this.stairs[o].upAabb, 65280, 0)
        }
        insideStairs(t) {
            for (let a = 0; a < this.stairs.length; a++)
                if (n.intersect(this.stairs[a]?.collision, t))
                    return !0;
            return !1
        }
        insideMask(t) {
            for (let a = 0; a < this.mask.length; a++)
                if (n.intersect(this.mask[a], t))
                    return !0;
            return !1
        }
    }
    function _t(r, t, a) {
        r.moveTo(t.x, t.y),
        r.lineTo(a.x, a.y)
    }
    function pt(r, t) {
        let a = t[0];
        r.moveTo(a.x, a.y);
        for (let i = 1; i < t.length; ++i)
            a = t[i],
            r.lineTo(a.x, a.y);
        r.closePath()
    }
    function _i(r, t, a) {
        const i = t.max.x - t.min.x
          , o = t.max.y - t.min.y
          , s = k.max(t.offsetDist, .001)
          , l = t.roughness
          , c = Math.round(i * l / s)
          , m = Math.round(o * l / s)
          , h = f.seededRand(a);
        pt(r, fo(t, c, m, s, h))
    }
    class bo {
        constructor(t) {
            this.decalBarn = t
        }
        display = {
            ground: new Re
        };
        mapName = "";
        mapDef = {};
        factionMode = !1;
        perkMode = !1;
        turkeyMode = !1;
        seed = 0;
        width = 0;
        height = 0;
        mapData = {
            places: [],
            objects: [],
            groundPatches: []
        };
        mapLoaded = !1;
        mapTexture = null;
        CcKuBx = new Ke(jc);
        IGN = new Ke(Fc);
        kXM = new Ke(Uc);
        deadObstacleIds = [];
        deadCeilingIds = [];
        solvedPuzzleIds = [];
        lootDropSfxIds = [];
        terrain = null;
        cameraEmitter = null;
        AlR() {
            const t = this.IGN.HWU();
            for (let a = 0; a < t.length; a++)
                t[a].AlR();
            this.mapTexture?.destroy(!0),
            this.display.ground.destroy({
                children: !0
            }),
            this.cameraEmitter?.stop(),
            this.cameraEmitter = null
        }
        resize(t, a) {
            this.renderMap(t, a)
        }
        loadMap(t, a, i, o) {
            this.mapName = t.mapName;
            const s = hr[this.mapName];
            if (!s)
                throw new Error(`Failed loading mapDef ${this.mapName}`);
            this.mapDef = f.cloneDeep(s),
            this.factionMode = !!this.mapDef.gameMode.factionMode,
            this.perkMode = !!this.mapDef.gameMode.perkMode,
            this.turkeyMode = !!this.mapDef.gameMode.turkeyMode,
            this.seed = t.seed,
            this.width = t.width,
            this.height = t.height,
            this.terrain = Rc(this.width, this.height, t.shoreInset, t.grassInset, t.rivers, this.seed),
            this.mapData = {
                places: t.places,
                objects: t.objects,
                groundPatches: t.groundPatches
            },
            this.mapLoaded = !0;
            const l = this.mapDef.biome.particles.camera;
            if (l) {
                const c = e.normalize(e.create(1, -1));
                this.cameraEmitter?.stop(),
                this.cameraEmitter = o.addEmitter(l, {
                    pos: e.create(0, 0),
                    dir: c,
                    layer: 99999
                })
            }
            this.display.ground.clear(),
            this.renderTerrain(this.display.ground, 2 / a.OGpt, i, !1)
        }
        getMapDef() {
            if (!this.mapLoaded)
                throw new Error("Map not loaded!");
            return this.mapDef
        }
        getMapTexture() {
            return this.mapTexture
        }
        lCPzxG(t, a, i, o, s, l, c, m, h, u) {
            const g = this.CcKuBx.HWU();
            for (let y = 0; y < g.length; y++) {
                const _ = g[y];
                _.active && (_.update(t, this, i, o, s, a, c),
                _.render(m, u, a.layer))
            }
            const w = this.IGN.HWU();
            for (let y = 0; y < w.length; y++) {
                const _ = w[y];
                _.active && (_.lCPzxG(t, this, o, s, l, a, c, m),
                _.render(m, u, a.layer))
            }
            for (let y = this.kXM.HWU(), _ = 0; _ < y.length; _++) {
                const S = y[_];
                S.active && (S.update(t, this, a, l),
                S.render(m, u, a.layer))
            }
            if (this.cameraEmitter) {
                this.cameraEmitter.pos = e.copy(m.XafO),
                this.cameraEmitter.enabled = !0;
                const y = 120
                  , _ = a.FKT() * 2.5;
                this.cameraEmitter.radius = k.min(_, y);
                const S = this.cameraEmitter.radius
                  , b = S * S / (y * y);
                this.cameraEmitter.rateMult = 1 / b;
                const A = a.layer == 0 ? 1 : 0;
                this.cameraEmitter.alpha = k.lerp(t * 6, this.cameraEmitter.alpha, A)
            }
        }
        renderTerrain(t, a, i, o) {
            const s = this.width
              , l = this.height
              , c = this.terrain
              , m = {
                x: 0,
                y: 0
            }
              , h = {
                x: s,
                y: 0
            }
              , u = {
                x: 0,
                y: l
            }
              , g = {
                x: s,
                y: l
            }
              , w = this.mapDef.biome.colors
              , y = this.mapData.groundPatches;
            t.beginFill(w.background),
            t.drawRect(-120, -120, s + 240, 120),
            t.drawRect(-120, l, s + 240, 120),
            t.drawRect(-120, -120, 120, l + 240),
            t.drawRect(s, -120, 120, l + 240),
            t.endFill(),
            t.beginFill(w.beach),
            pt(t, c?.shore),
            t.beginHole(),
            pt(t, c?.grass),
            t.endHole(),
            t.endFill(),
            i && (t.beginFill(w.grass),
            pt(t, c?.grass),
            t.endFill());
            for (let S = 0; S < y.length; S++) {
                const b = y[S];
                b.order == 0 && (!o || b.useAsMapShape) && (t.beginFill(b.color),
                _i(t, b, this.seed),
                t.endFill())
            }
            t.beginFill(w.riverbank);
            for (let S = 0; S < c.rivers.length; S++)
                pt(t, c.rivers[S].shorePoly);
            t.endFill(),
            t.beginFill(w.water);
            for (let S = 0; S < c.rivers.length; S++)
                pt(t, c.rivers[S].waterPoly);
            t.endFill(),
            t.beginFill(w.water),
            t.moveTo(u.x, u.y),
            t.lineTo(g.x, g.y),
            t.lineTo(h.x, h.y),
            t.lineTo(m.x, m.y),
            t.beginHole(),
            pt(t, c.shore),
            t.endHole(),
            t.closePath(),
            t.endFill();
            const _ = t;
            _.lineStyle(a, 0, .15);
            for (let S = 0; S <= s; S += F.map.gridSize)
                _t(_, {
                    x: S,
                    y: 0
                }, {
                    x: S,
                    y: l
                });
            for (let S = 0; S <= l; S += F.map.gridSize)
                _t(_, {
                    x: 0,
                    y: S
                }, {
                    x: s,
                    y: S
                });
            _.lineStyle(a, 0, 0);
            for (let S = 0; S < y.length; S++) {
                const b = y[S];
                b.order == 1 && (!o || b.useAsMapShape) && (t.beginFill(b.color),
                _i(t, b, this.seed),
                t.endFill())
            }
        }
        CCrkNK(t) {
            const a = t.alZrl(e.create(0, 0))
              , i = t.alZrl(e.create(1, 1))
              , o = e.sub(i, a);
            if (this.display.ground.position.set(a.x, a.y),
            this.display.ground.scale.set(o.x, o.y),
            D.debug)
                for (const s of this.terrain.rivers)
                    for (let l = 0; l < s.spline.points.length; l++) {
                        const c = s.spline.points[l];
                        ze.addCircle(c, 1, 16711680, 1);
                        let m = s.spline.points[l + 1];
                        m && ze.addLine(c, m, 16711680, 0)
                    }
        }
        getMinimapRender(t) {
            const a = de[t.type]
              , i = a.type == "building" ? 750 + (a.zIdx || 0) : a.img.zIdx || 0;
            let o = [];
            if (a.map?.shapes !== void 0)
                o = a.map?.shapes;
            else {
                let s = null;
                (s = a.type == "obstacle" ? a.collision : a.ceiling.zoomRegions.length > 0 && a.ceiling.zoomRegions[0].zoomIn ? a.ceiling.zoomRegions[0].zoomIn : $e.getBoundingCollider(t.type)) && o.push({
                    collider: n.copy(s),
                    scale: a.map?.scale || 1,
                    color: a.map?.color
                })
            }
            return {
                obj: t,
                zIdx: i,
                shapes: o
            }
        }
        renderMap(t, a) {
            if (this.mapLoaded) {
                const i = new ue
                  , o = new ue
                  , s = this.mapDef.biome.colors
                  , l = this.mapData.places
                  , c = this.mapData.objects;
                let m = D.screenHeight;
                D.mobile && (D.isLandscape || (m = D.screenWidth),
                m *= k.min(D.pixelRatio, 2));
                const h = this.height / m
                  , u = new Re;
                u.beginFill(s.grass),
                u.drawRect(0, 0, this.width, this.height),
                u.endFill(),
                this.renderTerrain(u, h, a, !0);
                const g = {
                    x: 0,
                    y: 0
                }
                  , w = {
                    x: this.width,
                    y: 0
                }
                  , y = {
                    x: 0,
                    y: this.height
                }
                  , _ = {
                    x: this.width,
                    y: this.height
                };
                u.lineStyle(h * 2, 0, 1),
                _t(u, g, y),
                _t(u, y, _),
                _t(u, _, w),
                _t(u, w, g),
                u.position.y = this.height,
                u.scale.y = -1,
                i.addChild(u);
                const S = [];
                for (let P = 0; P < c.length; P++) {
                    const T = c[P];
                    S.push(this.getMinimapRender(T))
                }
                S.sort( (P, T) => P.zIdx - T.zIdx);
                const b = new Re;
                for (let P = 0; P < S.length; P++) {
                    const T = S[P]
                      , I = T.obj;
                    for (let C = 0; C < T.shapes.length; C++) {
                        const q = T.shapes[C]
                          , E = n.transform(q.collider, I.pos, k.oriToRad(I.ori), I.scale)
                          , L = q.scale !== void 0 ? q.scale : 1;
                        switch (b.beginFill(q.color, 1),
                        E.type) {
                        case n.Type.Circle:
                            b.drawCircle(E.pos.x, this.height - E.pos.y, E.rad * L);
                            break;
                        case n.Type.Aabb:
                            {
                                let M = e.mul(e.sub(E.max, E.min), .5);
                                const O = e.add(E.min, M);
                                M = e.mul(M, L),
                                b.drawRect(O.x - M.x, this.height - O.y - M.y, M.x * 2, M.y * 2),
                                b.endFill()
                            }
                        }
                    }
                }
                i.addChild(b);
                const A = new ue;
                for (let P = 0; P < l.length; P++) {
                    const T = l[P]
                      , I = new qo({
                        fontFamily: "Arial",
                        fontSize: D.mobile ? 20 : 22,
                        fontWeight: "bold",
                        fill: ["#ffffff"],
                        stroke: "#000000",
                        strokeThickness: 1,
                        dropShadow: !0,
                        dropShadowColor: "#000000",
                        dropShadowBlur: 1,
                        dropShadowAngle: Math.PI / 3,
                        dropShadowDistance: 1,
                        wordWrap: !1,
                        align: "center"
                    })
                      , C = new Nt(T.name,I);
                    C.anchor.set(.5, .5),
                    C.x = T.pos.x * this.height / h,
                    C.y = T.pos.y * this.height / h,
                    C.alpha = .75,
                    A.addChild(C)
                }
                o.addChild(A),
                this.mapTexture ? this.mapTexture.resize(m, m) : this.mapTexture = Fo.create({
                    width: m,
                    height: m,
                    scaleMode: jo.LINEAR,
                    resolution: 1
                }),
                i.scale = new ua(m / this.height,m / this.height),
                t.render(i, {
                    renderTexture: this.mapTexture,
                    clear: !0
                }),
                t.render(o, {
                    renderTexture: this.mapTexture,
                    clear: !1
                }),
                i.destroy({
                    children: !0,
                    texture: !0,
                    baseTexture: !0
                }),
                o.destroy({
                    children: !0,
                    texture: !0,
                    baseTexture: !0
                })
            }
        }
        getGroundSurface(t, a) {
            const i = (u, g={}) => {
                if (u == "water") {
                    const w = this.getMapDef().biome.colors;
                    g.waterColor = g.waterColor !== void 0 ? g.waterColor : w.water,
                    g.rippleColor = g.rippleColor !== void 0 ? g.rippleColor : w.waterRipple
                }
                return {
                    type: u,
                    data: g
                }
            }
              , o = this.decalBarn.decalPool.HWU();
            for (let u = 0; u < o.length; u++) {
                const g = o[u];
                if (g.active && g.surface && f.sameLayer(g.layer, a) && n.intersectCircle(g.collider, t, 1e-4))
                    return i(g.surface.type, g.surface.data)
            }
            let s = null
              , l = 0;
            const c = a & 2
              , m = this.IGN.HWU();
            for (let u = 0; u < m.length; u++) {
                const g = m[u];
                if (g.active && g.zIdx >= l && (g.layer == a || c) && (g.layer != 1 || !c))
                    for (let w = 0; w < g.surfaces.length; w++) {
                        const y = g.surfaces[w];
                        for (let _ = 0; _ < y.colliders.length; _++)
                            if (n.intersectCircle(y.colliders[_], t, 1e-4)) {
                                l = g.zIdx,
                                s = y;
                                break
                            }
                    }
            }
            if (s)
                return i(s.type, s.data);
            let h = !1;
            if (a != 1) {
                const u = this.terrain?.rivers;
                for (let g = 0; g < u.length; g++) {
                    const w = u[g];
                    if (le.testPointAabb(t, w.aabb.min, w.aabb.max) && k.pointInsidePolygon(t, w.shorePoly) && (h = !0,
                    k.pointInsidePolygon(t, w.waterPoly)))
                        return i("water", {
                            river: w
                        })
                }
            }
            return i(k.pointInsidePolygon(t, this.terrain?.grass) ? h ? this.mapDef.biome.sound.riverShore : "grass" : k.pointInsidePolygon(t, this.terrain?.shore) ? "sand" : "water")
        }
        isInOcean(t) {
            return !k.pointInsidePolygon(t, this.terrain?.shore)
        }
        distanceToShore(t) {
            return k.distToPolygon(t, this.terrain?.shore)
        }
        insideStructureStairs(t) {
            const a = this.kXM.HWU();
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                if (o.active && o.insideStairs(t))
                    return !0
            }
            return !1
        }
        getBuildingById(t) {
            const a = this.IGN.HWU();
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                if (o.active && o.__id == t)
                    return o
            }
            return null
        }
        insideStructureMask(t) {
            const a = this.kXM.HWU();
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                if (o.active && o.insideMask(t))
                    return !0
            }
            return !1
        }
        insideBuildingCeiling(t, a) {
            const i = this.IGN.HWU();
            for (let o = 0; o < i.length; o++) {
                const s = i[o];
                if (s.active && (!a || s.ceiling.visionTicker > 0 && !s.ceilingDead) && s.isInsideCeiling(t))
                    return !0
            }
            return !1
        }
    }
    class Wc {
        __id;
        __type;
        active;
        sprite = new he;
        playedLandFx;
        landed;
        fallInstance;
        chuteDeployed;
        soundUpdateThrottle;
        pos;
        isNew;
        fallTicker;
        rad;
        constructor() {
            this.sprite.anchor.set(.5, .5),
            this.sprite.visible = !1
        }
        cGxERQ() {
            this.playedLandFx = !1,
            this.landed = !1,
            this.fallInstance = null,
            this.chuteDeployed = !1,
            this.soundUpdateThrottle = 0,
            this.pos = e.create(0, 0),
            this.isNew = !1,
            this.fallTicker = 0
        }
        AlR() {
            this.fallInstance?.stop(),
            this.fallInstance = null,
            this.sprite.visible = !1
        }
        kPP(t, a, i, o) {
            if (i) {
                this.isNew = !0,
                this.fallTicker = t.fallT * F.airdrop.fallTime;
                const s = o.map.getMapDef().biome.airdrop.airdropImg;
                this.sprite.texture = K.from(s)
            }
            a && (this.pos = e.copy(t.pos)),
            this.landed = t.landed
        }
    }
    class Nc {
        airdropPool = new Ke(Wc);
        AlR() {
            const t = this.airdropPool.HWU();
            for (let a = 0; a < t.length; a++)
                t[a].AlR()
        }
        lCPzxG(t, a, i, o, s, l, c) {
            const m = this.airdropPool.HWU();
            for (let h = 0; h < m.length; h++) {
                const u = m[h];
                if (!u.active)
                    continue;
                u.fallTicker += t;
                const g = k.clamp(u.fallTicker / F.airdrop.fallTime, 0, 1);
                let w = 0;
                if ((f.sameLayer(w, a.layer) || a.layer & 2) && (!(a.layer & 2) || !o.insideStructureMask(n.createCircle(u.pos, 1))) && (w |= 2),
                u.landed && !u.playedLandFx && (u.playedLandFx = !0,
                !u.isNew)) {
                    for (let A = 0; A < 10; A++) {
                        const P = e.randomUnit();
                        s.addParticle("airdropSmoke", w, u.pos, P)
                    }
                    const S = o.getGroundSurface(u.pos, w);
                    if (S.type == "water")
                        for (let A = 0; A < 12; A++) {
                            const P = e.add(u.pos, e.mul(e.randomUnit(), f.random(4.5, 6)));
                            s.addRippleParticle(P, w, S.data.rippleColor).setDelay(A * .075)
                        }
                    const b = S.type == "water" ? "airdrop_crash_02" : "airdrop_crash_01";
                    c.playSound(b, {
                        channel: "sfx",
                        soundPos: u.pos,
                        layer: w,
                        filter: "muffled"
                    }),
                    c.stopSound(u.fallInstance),
                    u.fallInstance = null
                }
                !u.chuteDeployed && g <= .1 && (c.playSound("airdrop_chute_01", {
                    channel: "sfx",
                    soundPos: u.pos,
                    layer: w,
                    rangeMult: 1.75
                }),
                u.chuteDeployed = !0),
                !u.landed && !u.fallInstance && (u.fallInstance = c.playSound("airdrop_fall_01", {
                    channel: "sfx",
                    soundPos: u.pos,
                    layer: w,
                    rangeMult: 1.75,
                    ignoreMinAllowable: !0,
                    offset: u.fallTicker
                })),
                u.fallInstance && u.soundUpdateThrottle < 0 ? (u.soundUpdateThrottle = .1,
                c.updateSound(u.fallInstance, "sfx", u.pos, {
                    layer: w,
                    rangeMult: 1.75,
                    ignoreMinAllowable: !0
                })) : u.soundUpdateThrottle -= t,
                u.rad = k.lerp((1 - g) ** 1.1, 5, 12),
                l.addPIXIObj(u.sprite, w, 1500, u.__id);
                const y = i.alZrl(u.pos)
                  , _ = i.oQvD(2 * u.rad / i.OGpt);
                u.sprite.position.set(y.x, y.y),
                u.sprite.scale.set(_, _),
                u.sprite.tint = 16776960,
                u.sprite.alpha = 1,
                u.sprite.visible = !u.landed,
                u.isNew = !1
            }
        }
    }
    function bi(r, t, a, i) {
        const o = Math.atan2(i.y, i.x);
        return {
            p0: e.add(a, e.rotate(r, o)),
            p1: e.add(a, e.rotate(t, o))
        }
    }
    function Gc(r, t, a, i, o) {
        Xt[r.bulletType].addFlare ? a.addFlare(r, i, o) : t.addBullet(r, i, o)
    }
    function ca(r, t, a, i, o, s, l) {
        const c = Math.floor(f.random(1, 2));
        let m = e.mul(i, 9.5);
        for (let h = 0; h < c; h++)
            m = e.rotate(m, (Math.random() - .5) * Math.PI / 3),
            s.addParticle(r, o, a, m);
        l.playGroup(t, {
            channel: "hits",
            soundPos: a,
            layer: o,
            filter: "muffled"
        })
    }
    class Vc {
        bullets = [];
        tracerColors = {};
        onMapLoad(t) {
            this.tracerColors = f.mergeDeep(F.tracerColors, t.getMapDef().biome.tracerColors)
        }
        addBullet(t, a, i) {
            let o = null;
            for (let _ = 0; _ < this.bullets.length; _++)
                if (!this.bullets[_].alive && !this.bullets[_].collided) {
                    o = this.bullets[_];
                    break
                }
            o || (o = {},
            o.alive = !1,
            o.container = new ue,
            o.container.pivot.set(14.5, 0),
            o.container.visible = !1,
            o.bulletTrail = he.from("player-bullet-trail-02.img"),
            o.bulletTrail.anchor.set(.5, .5),
            o.container.addChild(o.bulletTrail),
            this.bullets.push(o));
            const s = Xt[t.bulletType]
              , l = 1 + t.varianceT * s.variance
              , c = k.remap(t.distAdjIdx, 0, 16, -1, 1);
            let m = s.distance / Math.pow(F.bullet.reflectDistDecay, t.reflectCount);
            t.clipDistance && (m = t.distance),
            o.alive = !0,
            o.isNew = !0,
            o.collided = !1,
            o.scale = 1,
            o.playerId = t.playerId,
            o.startPos = e.copy(t.pos),
            o.pos = e.copy(t.pos),
            o.dir = e.copy(t.dir),
            o.layer = t.layer,
            o.speed = s.speed * l,
            o.distance = m * l + c,
            o.damageSelf = s.shrapnel || t.reflectCount > 0,
            o.reflectCount = t.reflectCount,
            o.reflectObjId = t.reflectObjId,
            o.whizHeard = !1;
            const h = Math.atan2(o.dir.x, o.dir.y);
            o.container.rotation = h - Math.PI / 2,
            o.layer = t.layer;
            const u = a.getPlayerById(o.playerId);
            u && u.layer & 2 && (o.layer |= 2);
            let g = s.tracerWidth;
            t.trailSmall && (g *= .5),
            t.trailThick && (g *= 2),
            o.bulletTrail.scale.set(.8, g),
            o.tracerLength = s.tracerLength,
            o.suppressed = !!s.suppressed;
            const w = this.tracerColors[s.tracerColor];
            let y = w.regular;
            t.trailSaturated ? y = w.chambered || w.saturated : u?.surface?.data.isBright && (y = w.saturated),
            o.bulletTrail.tint = y,
            o.tracerAlphaRate = w.alphaRate,
            o.tracerAlphaMin = w.alphaMin,
            o.bulletTrail.alpha = 1,
            o.reflectCount > 0 && (o.bulletTrail.alpha *= .5),
            o.container.visible = !0,
            i.addPIXIObj(o.container, o.layer, 20)
        }
        lCPzxG(t, a, i, o, s, l, c, m) {
            const h = a.playerPool.HWU();
            for (let u = 0; u < this.bullets.length; u++) {
                const g = this.bullets[u];
                if (g.collided && (g.scale = k.max(g.scale - t * 6, 0),
                g.scale <= 0 && (g.collided = !1,
                g.container.visible = !1)),
                g.alive) {
                    const w = g.distance - e.length(e.sub(g.startPos, g.pos))
                      , y = k.min(w, t * g.speed)
                      , _ = e.copy(g.pos);
                    if (g.pos = e.add(g.pos, e.mul(g.dir, y)),
                    !s.tuWDuv.veYmO && f.sameAudioLayer(s.layer, g.layer) && e.length(e.sub(o.XafO, g.pos)) < 7.5 && !g.whizHeard && g.playerId != s.__id && (m.playGroup("bullet_whiz", {
                        soundPos: g.pos,
                        fallOff: 4
                    }),
                    g.whizHeard = !0),
                    g.tracerAlphaRate && g.suppressed) {
                        const I = g.tracerAlphaRate;
                        g.bulletTrail.alpha = k.max(g.tracerAlphaMin, g.bulletTrail.alpha * I)
                    }
                    const S = []
                      , b = i.CcKuBx.HWU();
                    for (let I = 0; I < b.length; I++) {
                        const C = b[I];
                        if (C.active && !C.dead && f.sameLayer(C.layer, g.layer) && C.height >= F.bullet.height && (g.reflectCount <= 0 || C.__id != g.reflectObjId)) {
                            const q = n.intersectSegment(C.collider, _, g.pos);
                            q && S.push({
                                type: "obstacle",
                                obstacleType: C.type,
                                collidable: C.collidable,
                                point: q.point,
                                normal: q.normal
                            })
                        }
                    }
                    for (let I = 0; I < h.length; I++) {
                        const C = h[I];
                        if (C.active && !C.tuWDuv.veYmO && (f.sameLayer(C.tuWDuv.HuWH, g.layer) || C.tuWDuv.HuWH & 2) && (C.__id != g.playerId || g.damageSelf)) {
                            let q = null;
                            if (C.WXiuCh()) {
                                const L = C
                                  , M = L.zLcuUl()
                                  , O = bi(M.p0, M.p1, L.WIlWg, L.bOkc)
                                  , H = bi(M.p0, M.p1, L.XafO, L.HIXJp)
                                  , N = le.intersectSegmentSegment(_, g.pos, O.p0, O.p1)
                                  , Q = le.intersectSegmentSegment(_, g.pos, H.p0, H.p1) || N;
                                if (Q) {
                                    const W = e.normalize(e.perp(e.sub(H.p1, H.p0)));
                                    q = {
                                        point: Q.point,
                                        normal: W
                                    }
                                }
                            }
                            const E = le.intersectSegmentCircle(_, g.pos, C.XafO, C.AQGS);
                            if (E && (!q || e.length(e.sub(E.point, g.startPos)) < e.length(e.sub(q.point, g.startPos))) ? (S.push({
                                type: "player",
                                player: C,
                                point: E.point,
                                normal: E.normal,
                                layer: C.layer,
                                collidable: !0
                            }),
                            C.BkfiV("steelskin") && S.push({
                                type: "pan",
                                point: e.add(E.point, e.mul(E.normal, .1)),
                                normal: E.normal,
                                layer: C.layer,
                                collidable: !1
                            })) : q && S.push({
                                type: "pan",
                                point: q.point,
                                normal: q.normal,
                                layer: C.layer,
                                collidable: !0
                            }),
                            E || q)
                                break
                        }
                    }
                    for (let I = 0; I < S.length; I++) {
                        const C = S[I];
                        C.dist = e.length(e.sub(C.point, _))
                    }
                    S.sort( (I, C) => I.dist - C.dist);
                    let A = !1;
                    const P = a.getPlayerById(g.playerId);
                    P && (P.tuWDuv.veYmO || P.tuWDuv.SINId) && (A = !0);
                    let T = !1;
                    for (let I = 0; I < S.length; I++) {
                        const C = S[I];
                        if (C.type == "obstacle") {
                            const q = de[C?.obstacleType];
                            ca(q.hitParticle, q.sound.bullet, C.point, C.normal, g.layer, c, m),
                            T = C.collidable
                        } else if (C.type == "player") {
                            if (!A) {
                                const q = C.player;
                                if (i.turkeyMode && P?.BkfiV("turkey_shoot")) {
                                    const L = e.mul(e.randomUnit(), f.random(3, 6));
                                    c.addParticle("turkeyFeathersHit", q.layer, q.XafO, L)
                                }
                                const E = e.sub(C.point, q?.XafO);
                                E.y *= -1,
                                window.CrazyGames || c.addParticle("bloodSplat", q.layer, e.mul(E, o.OGpt), e.create(0, 0), 1, 1, q.container),
                                m.playGroup("player_bullet_hit", {
                                    soundPos: q.XafO,
                                    fallOff: 1,
                                    layer: q.layer,
                                    filter: "muffled"
                                })
                            }
                            T = C.collidable
                        } else
                            C.type == "pan" && (ca("barrelChip", U.pan.sound.bullet, C.point, C.normal, C.layer, c, m),
                            T = C.collidable);
                        if (T) {
                            g.pos = C.point;
                            break
                        }
                    }
                    if (!(g.layer & 2)) {
                        const I = i.kXM.HWU();
                        let C = g.layer;
                        for (let q = 0; q < I.length; q++) {
                            const E = I[q];
                            if (E.active) {
                                let L = !1
                                  , M = !1;
                                for (let O = 0; O < E.stairs.length; O++) {
                                    const H = E.stairs[O];
                                    if (!H?.lootOnly && n.intersectSegment(H?.collision, g.pos, _)) {
                                        L = !0;
                                        break
                                    }
                                }
                                for (let O = 0; O < E.mask.length; O++)
                                    if (n.intersectSegment(E.mask[O], g.pos, _)) {
                                        M = !0;
                                        break
                                    }
                                L && !M && (C |= 2)
                            }
                        }
                        C != g.layer && (g.layer = C,
                        l.addPIXIObj(g.container, g.layer, 20))
                    }
                    (T || k.eqAbs(w, y)) && (g.collided = !0,
                    g.alive = !1),
                    g.isNew = !1
                }
            }
        }
        createBulletHit(t, a, i) {
            const o = t.getPlayerById(a);
            o && i.playGroup("player_bullet_hit", {
                soundPos: o.XafO,
                fallOff: 1,
                layer: o.layer,
                filter: "muffled"
            })
        }
        CCrkNK(t, a) {
            t.oQvD(1);
            for (let i = 0; i < this.bullets.length; i++) {
                const o = this.bullets[i];
                if (o.alive || o.collided) {
                    const s = e.length(e.sub(o.pos, o.startPos))
                      , l = t.alZrl(o.pos);
                    o.container.position.set(l.x, l.y);
                    const c = t.oQvD(1)
                      , m = k.min(o.tracerLength * 15, s / 2);
                    o.container.scale.set(c * m * o.scale, c)
                }
            }
        }
    }
    function Hc() {
        const r = {
            fontFamily: "Arial",
            fontWeight: "bold",
            fontSize: D.pixelRatio > 1 ? 30 : 24,
            align: "center",
            fill: 16777215,
            stroke: 0,
            strokeThickness: 0,
            dropShadow: !0,
            dropShadowColor: "#000000",
            dropShadowBlur: 1,
            dropShadowAngle: Math.PI / 3,
            dropShadowDistance: 1
        }
          , t = new Nt("",r);
        return t.anchor.set(.5, .5),
        t.scale.set(.5, .5),
        t
    }
    class $c {
        __id;
        __type;
        active = !1;
        pos = e.create(0, 0);
        container = new ue;
        sprite = he.from("skull.img");
        nameText = Hc();
        nameTextSet;
        layer;
        playerId;
        constructor() {
            this.container.addChild(this.sprite),
            this.sprite.anchor.set(.5, .5),
            this.sprite.scale.set(.4, .4),
            this.sprite.tint = 5921370,
            this.nameText.anchor.set(.5, -1),
            this.nameText.tint = f.rgbToInt(f.hsvToRgb(0, 0, .5)),
            this.container.addChild(this.nameText),
            this.container.visible = this.sprite
        }
        cGxERQ() {}
        AlR() {
            this.container.visible = !1
        }
        kPP(t, a, i, o) {
            this.pos = e.copy(t.pos),
            a && (this.layer = t.layer,
            this.playerId = t.playerId),
            i && (this.nameTextSet = !1,
            this.container.visible = !0)
        }
    }
    class Xc {
        deadBodyPool = new Ke($c);
        lCPzxG(t, a, i, o, s, l) {
            const c = this.deadBodyPool.HWU();
            for (let m = 0; m < c.length; m++) {
                const h = c[m];
                if (h.active) {
                    h.nameTextSet || (h.nameText.text = a.getPlayerName(h.playerId, i.__id, !1),
                    h.nameTextSet = !0);
                    const u = n.createCircle(h.pos, 1)
                      , g = o.insideStructureStairs(u);
                    let w = h.layer
                      , y = 12;
                    h.layer == 0 && i.layer == 0 && g && (w |= 2,
                    y += 100),
                    l.addPIXIObj(h.container, w, y, h.__id);
                    const _ = s.alZrl(h.pos)
                      , S = s.oQvD(1);
                    h.container.position.set(_.x, _.y),
                    h.container.scale.set(S, S)
                }
            }
        }
        getDeadBodyById(t) {
            const a = this.deadBodyPool.HWU();
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                if (o.active && o.playerId == t)
                    return o
            }
            return null
        }
    }
    function Gr(r, t, a) {
        return r == 0 ? t : r == 1 ? a : f.lerpColor(r, t, a)
    }
    class Qc {
        __id;
        __type;
        active;
        decalRender = null;
        isNew;
        goreT;
        hasGore;
        type;
        pos;
        rot;
        scale;
        layer;
        goreKills;
        collider;
        surface;
        cGxERQ() {
            this.isNew = !1,
            this.goreT = 0
        }
        AlR() {
            this.decalRender && (this.decalRender.free(),
            this.decalRender = null)
        }
        kPP(t, a, i, o) {
            if (a) {
                const s = de[t.type];
                this.type = t.type,
                this.pos = e.copy(t.pos),
                this.rot = k.oriToRad(t.ori),
                this.scale = t.scale,
                this.layer = t.layer,
                this.goreKills = t.goreKills,
                this.collider = n.transform(s.collision, this.pos, this.rot, this.scale),
                this.surface = s.surface ? f.cloneDeep(s.surface) : null,
                this.hasGore = s.gore !== void 0,
                this.isNew = i,
                this.isNew && (this.decalRender = o.decalBarn.allocDecalRender(),
                this.decalRender.init(this, o.map, o.renderer))
            }
        }
        update(t, a) {
            if (this.hasGore) {
                const i = de[this.type];
                let o = k.delerp(this.goreKills, i.gore?.fade.start, i.gore?.fade.end);
                if (o = Math.pow(o, i.gore?.fade.pow),
                this.goreT = this.isNew ? o : k.lerp(t * i.gore?.fade.speed, this.goreT, o),
                i.gore?.tint !== void 0) {
                    const s = Gr(this.goreT, i.img.tint, i.gore.tint);
                    this.decalRender.setTint(s)
                }
                i.gore?.alpha !== void 0 && (this.decalRender.spriteAlpha = k.lerp(this.goreT, i.img.alpha, i.gore.alpha)),
                i.gore?.waterColor !== void 0 && this.surface && (this.surface.data.waterColor = Gr(this.goreT, i.surface?.data.waterColor, i.gore.waterColor)),
                i.gore?.rippleColor !== void 0 && this.surface && (this.surface.data.rippleColor = Gr(this.goreT, i.surface?.data.rippleColor, i.gore.rippleColor))
            }
            this.isNew = !1
        }
    }
    class Zc {
        sprite = new he;
        pos;
        rot;
        scale;
        layer;
        zIdx;
        zOrd;
        imgScale;
        spriteAlpha;
        valueAdjust;
        inWater;
        flicker;
        flickerMin;
        flickerMax;
        flickerTarget;
        flickerRate;
        flickerCooldown;
        active;
        deactivated;
        fadeout;
        fadeAlpha;
        constructor() {
            this.sprite.anchor.set(.5, .5),
            this.sprite.visible = !1
        }
        init(t, a, i) {
            const o = de[t.type];
            this.pos = e.copy(t.pos),
            this.rot = t.rot,
            this.scale = t.scale,
            this.layer = t.layer,
            this.zIdx = o.img.zIdx,
            this.zOrd = t.__id;
            const s = o.img;
            if (this.sprite.texture = K.from(s.sprite),
            this.sprite.alpha = 1,
            this.sprite.visible = !0,
            this.imgScale = o.img.scale,
            this.spriteAlpha = s.alpha,
            this.valueAdjust = s.ignoreAdjust ? 1 : a.getMapDef().biome.valueAdjust,
            this.setTint(s.tint),
            this.inWater = !1,
            o.height < .25) {
                const l = a.getGroundSurface(t.pos, t.layer);
                this.inWater = l.type == "water"
            }
            this.flicker = o.img.flicker,
            this.flicker && (this.flickerMin = o.img.flickerMin,
            this.flickerMax = o.img.flickerMax,
            this.flickerTarget = this.imgScale,
            this.flickerRate = o.img.flickerRate,
            this.flickerCooldown = 0),
            this.active = !0,
            this.deactivated = !1,
            this.fadeout = o.lifetime !== void 0,
            this.fadeAlpha = 1
        }
        free() {
            this.deactivated = !0
        }
        setTint(t) {
            this.valueAdjust < 1 && (t = f.adjustValue(t, this.valueAdjust)),
            this.sprite.tint = t
        }
        update(t, a, i) {
            this.deactivated && this.fadeout && (this.fadeAlpha = k.lerp(t * 3, this.fadeAlpha, 0),
            this.fadeAlpha < .01 && (this.fadeAlpha = 0)),
            this.deactivated && (!this.fadeout || k.eqAbs(this.fadeAlpha, 0)) && (this.sprite.visible = !1,
            this.active = !1),
            this.flicker && (this.flickerCooldown < 0 ? (this.flickerTarget = f.random(this.flickerMin, this.flickerMax),
            this.flickerCooldown = f.random(.05, this.flickerRate)) : (this.imgScale = k.lerp(this.flickerRate - this.flickerCooldown, this.imgScale, this.flickerTarget),
            this.flickerCooldown -= t));
            const o = a.alZrl(this.pos)
              , s = a.oQvD(this.scale * this.imgScale);
            this.sprite.position.set(o.x, o.y),
            this.sprite.scale.set(s, s),
            this.sprite.rotation = -this.rot,
            this.sprite.alpha = this.spriteAlpha * (this.inWater ? .3 : 1) * this.fadeAlpha,
            i.addPIXIObj(this.sprite, this.layer, this.zIdx, this.zOrd)
        }
    }
    class xo {
        decalPool = new Ke(Qc);
        decalRenders = [];
        allocDecalRender() {
            let t = null;
            for (let a = 0; a < this.decalRenders.length; a++) {
                const i = this.decalRenders[a];
                if (!i.active) {
                    t = i;
                    break
                }
            }
            return t || (t = new Zc,
            this.decalRenders.push(t)),
            t
        }
        lCPzxG(t, a, i, o) {
            const s = this.decalPool.HWU();
            for (let l = 0; l < s.length; l++) {
                const c = s[l];
                c.active && c.update(t)
            }
            for (let l = 0; l < this.decalRenders.length; l++) {
                const c = this.decalRenders[l];
                c.active && c.update(t, a, i)
            }
        }
        CCrkNK(t, a, i) {}
    }
    class Jc {
        active;
        pos;
        vel;
        layer;
        particle;
        ticker;
        colCount;
        constructor() {
            this.active = !1
        }
        init(t, a, i, o) {
            this.pos = e.copy(t),
            this.vel = e.copy(a),
            this.layer = i,
            this.particle = o,
            this.ticker = 0,
            this.colCount = 0,
            this.active = !0
        }
        update(t, a, i) {
            const o = e.copy(this.pos);
            this.pos = e.add(this.pos, e.mul(this.vel, t)),
            this.vel = e.mul(this.vel, 1 / (1 + t * 5));
            const s = []
              , l = a.CcKuBx.HWU();
            for (let h = 0; h < l.length; h++) {
                const u = l[h];
                u.active && !u.dead && f.sameLayer(this.layer, u.layer) && s.push(u.collider)
            }
            const c = i.playerPool.HWU();
            for (let h = 0; h < c.length; h++) {
                const u = c[h];
                u.active && !u.dead && f.sameLayer(this.layer, u.layer) && s.push(n.createCircle(u.XafO, u.AQGS, 0))
            }
            const m = [];
            for (let h = 0; h < s.length; h++) {
                const u = n.intersectSegment(s[h], o, this.pos);
                if (u) {
                    const g = e.length(e.sub(u.point, o));
                    m.push({
                        point: u.point,
                        normal: u.normal,
                        dist: g
                    })
                }
            }
            if (m.sort( (h, u) => h.dist - u.dist),
            m.length > 0) {
                const h = m[0]
                  , u = e.normalizeSafe(this.vel, e.create(1, 0))
                  , g = e.length(this.vel)
                  , w = e.sub(u, e.mul(h.normal, e.dot(h.normal, u) * 2))
                  , y = this.colCount++ > 0 ? .35 : 1;
                this.pos = e.add(h.point, e.mul(h.normal, .01)),
                this.vel = e.mul(w, g * y)
            }
            this.particle.pos = e.copy(this.pos),
            this.ticker += t,
            this.ticker >= this.particle.life && (this.particle.free(),
            this.active = !1)
        }
    }
    class Yc {
        active;
        type;
        done;
        pos;
        layer;
        ticker;
        lifetime;
        soundInstance;
        soundUpdateThrottle;
        constructor(t) {
            this.active = !1
        }
        init(t, a, i) {
            const o = Kr[t].explosionEffectType
              , s = xi[o];
            this.active = !0,
            this.done = !1,
            this.type = t,
            this.pos = e.copy(a),
            this.layer = i,
            this.ticker = 0,
            this.lifetime = s.lifetime,
            this.soundInstance = null,
            this.soundUpdateThrottle = 0
        }
        free() {
            this.active = !1
        }
        update(t, a, i, o, s, l) {
            const c = Kr[this.type].explosionEffectType
              , m = xi[c];
            if (this.ticker == 0) {
                let g = !0;
                if (this.type == "explosion_bomb_iron") {
                    const b = n.createCircle(this.pos, .5);
                    s.insideBuildingCeiling(b, !0) && (g = !1)
                }
                if (g && (m.burst.particle && i.addParticle(m.burst.particle, this.layer, this.pos, e.create(0, 0), m.burst.scale, 0, null),
                m.scatter))
                    for (let b = 0; b < m.scatter.count; b++) {
                        const A = i.addParticle(m.scatter.particle, this.layer, this.pos, e.create(0, 0), 1, 0, null)
                          , P = a.addPhysicsParticle()
                          , T = e.mul(e.randomUnit(), f.random(m.scatter.speed.min, m.scatter.speed.max));
                        P.init(this.pos, T, this.layer, A)
                    }
                const w = s.getGroundSurface(this.pos, this.layer)
                  , y = w.type == "water" ? m.burst.sound.water : m.burst.sound.grass;
                let _ = 0;
                m.burst.sound.detune != null && (_ = m.burst.sound.detune);
                let S = 1;
                if (m.burst.sound.volume != null && (S = m.burst.sound.volume),
                this.soundInstance = o.playSound(y, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled",
                    rangeMult: 2,
                    ignoreMinAllowable: !0,
                    detune: _,
                    volumeScale: S
                }),
                w.type == "water")
                    for (let b = 0; b < m.rippleCount; b++) {
                        const A = m.rippleCount * .5
                          , P = e.add(this.pos, e.mul(e.randomUnit(), f.random(0, A)));
                        i.addRippleParticle(P, this.layer, w.data.rippleColor).setDelay(b * .06)
                    }
            }
            if (this.soundInstance && this.soundUpdateThrottle < 0) {
                this.soundUpdateThrottle = .1;
                let g = 1;
                m.burst.sound.volume != null && (g = m.burst.sound.volume),
                o.updateSound(this.soundInstance, "sfx", this.pos, {
                    layer: this.layer,
                    filter: "muffled",
                    volumeScale: g
                })
            } else
                this.soundUpdateThrottle -= t;
            this.ticker += t;
            const h = k.min(this.ticker / m.shakeDur, 1)
              , u = k.lerp(h, m.shakeStr, 0);
            l.IsPrFh(this.pos, u),
            this.ticker >= this.lifetime && (this.active = !1)
        }
    }
    class Kc {
        explosions;
        physicsParticles;
        constructor() {
            this.explosions = [],
            this.physicsParticles = []
        }
        addExplosion(t, a, i) {
            let o = null;
            for (let s = 0; s < this.explosions.length; s++)
                if (!this.explosions[s].active) {
                    o = this.explosions[s];
                    break
                }
            o || (o = new Yc(this),
            this.explosions.push(o)),
            o.init(t, a, i)
        }
        addPhysicsParticle() {
            let t = null;
            for (let a = 0; a < this.physicsParticles.length; a++) {
                const i = this.physicsParticles[a];
                if (!i.active) {
                    t = i;
                    break
                }
            }
            return t || (t = new Jc,
            this.physicsParticles.push(t)),
            t
        }
        lCPzxG(t, a, i, o, s, l, c) {
            for (let m = 0; m < this.explosions.length; m++) {
                const h = this.explosions[m];
                h.active && (h.update(t, this, s, l, a, o),
                h.active || h.free())
            }
            for (let m = 0; m < this.physicsParticles.length; m++) {
                const h = this.physicsParticles[m];
                h.active && h.update(t, a, i)
            }
        }
    }
    const xi = {
        frag: {
            burst: {
                particle: "explosionBurst",
                scale: 1,
                sound: {
                    grass: "explosion_01",
                    water: "explosion_02"
                }
            },
            rippleCount: 10,
            shakeStr: .2,
            shakeDur: .35,
            lifetime: 2
        },
        smoke: {
            burst: {
                particle: "explosionBurst",
                scale: 0,
                sound: {
                    grass: "explosion_smoke_01",
                    water: "explosion_smoke_01"
                }
            },
            rippleCount: 10,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 6
        },
        strobe: {
            burst: {
                particle: "explosionBurst",
                scale: .25,
                sound: {
                    grass: "explosion_04",
                    water: "explosion_02"
                }
            },
            rippleCount: 3,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 2
        },
        barrel: {
            burst: {
                particle: "explosionBurst",
                scale: 1,
                sound: {
                    grass: "explosion_01",
                    water: "explosion_02"
                }
            },
            rippleCount: 10,
            shakeStr: .2,
            shakeDur: .35,
            lifetime: 2
        },
        usas: {
            burst: {
                particle: "explosionUSAS",
                scale: .75,
                sound: {
                    grass: "explosion_03",
                    water: "explosion_02"
                }
            },
            rippleCount: 10,
            shakeStr: .12,
            shakeDur: .25,
            lifetime: 1.25
        },
        rounds: {
            burst: {
                particle: "explosionRounds",
                scale: .32,
                sound: {
                    grass: "explosion_04",
                    water: "explosion_04",
                    detune: 500,
                    volume: .5
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 1
        },
        rounds_sg: {
            burst: {
                particle: "explosionRounds",
                scale: .32,
                sound: {
                    grass: "explosion_04",
                    water: "explosion_04",
                    detune: 500,
                    volume: .2
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 1
        },
        mirv: {
            burst: {
                particle: "explosionMIRV",
                scale: 1,
                sound: {
                    grass: "explosion_01",
                    water: "explosion_02"
                }
            },
            rippleCount: 10,
            shakeStr: .2,
            shakeDur: .35,
            lifetime: 2
        },
        mirv_mini: {
            burst: {
                particle: "explosionMIRV",
                scale: .75,
                sound: {
                    grass: "explosion_03",
                    water: "explosion_02"
                }
            },
            rippleCount: 3,
            shakeStr: .1,
            shakeDur: .2,
            lifetime: 1.25
        },
        martyr_nade: {
            burst: {
                particle: "explosionBurst",
                scale: .75,
                sound: {
                    grass: "explosion_03",
                    water: "explosion_02"
                }
            },
            rippleCount: 3,
            shakeStr: .1,
            shakeDur: .2,
            lifetime: 1.25
        },
        snowball: {
            burst: {
                particle: "",
                scale: .75,
                sound: {
                    grass: "snowball_01",
                    water: "frag_water_01"
                }
            },
            scatter: {
                particle: "snowball_impact",
                count: 5,
                speed: {
                    min: 5,
                    max: 25
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 1
        },
        snowball_heavy: {
            burst: {
                particle: "",
                scale: .75,
                sound: {
                    grass: "snowball_02",
                    water: "frag_water_01"
                }
            },
            scatter: {
                particle: "snowball_impact",
                count: 8,
                speed: {
                    min: 5,
                    max: 25
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 1
        },
        potato: {
            burst: {
                particle: "",
                scale: .75,
                sound: {
                    grass: "potato_01",
                    water: "frag_water_01"
                }
            },
            scatter: {
                particle: "potato_impact",
                count: 5,
                speed: {
                    min: 5,
                    max: 25
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 1
        },
        potato_heavy: {
            burst: {
                particle: "",
                scale: .75,
                sound: {
                    grass: "potato_02",
                    water: "frag_water_01"
                }
            },
            scatter: {
                particle: "potato_impact",
                count: 8,
                speed: {
                    min: 5,
                    max: 25
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: 1
        },
        potato_cannonball: {
            burst: {
                particle: "explosionPotato",
                scale: .75,
                sound: {
                    grass: "explosion_05",
                    water: "explosion_02"
                }
            },
            scatter: {
                particle: "potato_impact",
                count: 8,
                speed: {
                    min: 5,
                    max: 25
                }
            },
            rippleCount: 10,
            shakeStr: .12,
            shakeDur: .25,
            lifetime: 1.25
        },
        potato_smgshot: {
            burst: {
                particle: "",
                scale: .2,
                sound: {
                    grass: "potato_01",
                    water: "potato_02",
                    detune: 250,
                    volume: .5
                }
            },
            scatter: {
                particle: "potato_smg_impact",
                count: 2,
                speed: {
                    min: 5,
                    max: 25
                }
            },
            rippleCount: 1,
            shakeStr: 0,
            shakeDur: 0,
            lifetime: .5
        },
        bomb_iron: {
            burst: {
                particle: "explosionBomb",
                scale: 2,
                sound: {
                    grass: "explosion_01",
                    water: "explosion_02"
                }
            },
            rippleCount: 12,
            shakeStr: .25,
            shakeDur: .4,
            lifetime: 2
        }
    };
    class en {
        bullets = [];
        addFlare(t, a, i) {
            let o = null;
            for (let y = 0; y < this.bullets.length; y++)
                if (!this.bullets[y].alive && !this.bullets[y].collided) {
                    o = this.bullets[y];
                    break
                }
            o || (o = {},
            o.alive = !1,
            o.flareContainer = new ue,
            o.flareContainer.visible = !1,
            o.flare = he.from("part-flare-01.img"),
            o.flare.anchor.set(.5, .5),
            o.flareContainer.addChild(o.flare),
            o.trailContainer = new ue,
            o.trailContainer.visible = !1,
            o.trailContainer.pivot.set(14.5, 0),
            o.bulletTrail = he.from("player-bullet-trail-02.img"),
            o.bulletTrail.anchor.set(.5, .5),
            o.trailContainer.addChild(o.bulletTrail),
            this.bullets.push(o));
            const s = Xt[t.bulletType]
              , l = 1 + t.varianceT * s.variance
              , c = k.remap(t.distAdjIdx, 0, 32, -1, 1)
              , m = s.distance / Math.pow(F.bullet.reflectDistDecay, t.reflectCount);
            o.alive = !0,
            o.isNew = !0,
            o.collided = !1,
            o.flareScale = .01,
            o.trailScale = 1,
            o.timeAlive = 0,
            o.maxTimeAlive = 2.5,
            o.startPos = e.copy(t.pos),
            o.pos = e.copy(t.pos),
            o.dir = e.copy(t.dir),
            o.layer = t.layer,
            o.speed = s.speed * l,
            o.distance = m * l + c;
            const h = Math.atan2(o.dir.x, o.dir.y);
            o.flareContainer.rotation = h - Math.PI / 2,
            o.trailContainer.rotation = h - Math.PI / 2,
            o.layer = t.layer;
            const u = a.getPlayerById(o.playerId);
            u && u.layer & 2 && (o.layer |= 2);
            const g = F.tracerColors[s.tracerColor];
            let w = g.regular;
            u?.isOnBrightSurface && (w = g.saturated),
            o.bulletTrail.scale.set(.8, s.tracerWidth),
            o.tracerLength = s.tracerLength,
            o.bulletTrail.tint = w,
            o.tracerAlphaRate = g.alphaRate,
            o.tracerAlphaMin = g.alphaMin,
            o.bulletTrail.alpha = 1,
            o.flare.scale.set(1, 1),
            o.flare.tint = s.flareColor,
            o.flare.alpha = .8,
            o.maxFlareScale = s.maxFlareScale,
            o.smokeThrottle = 0,
            o.flareContainer.visible = !0,
            o.trailContainer.visible = !0
        }
        lCPzxG(t, a, i, o, s, l, c, m) {
            for (let h = 0; h < this.bullets.length; h++) {
                const u = this.bullets[h];
                if (u.collided && (u.flareScale = k.max(u.flareScale - t * .5, 0),
                u.flare.alpha = k.max(u.flare.alpha - t, 0),
                u.trailScale = k.max(u.trailScale - t * 6, 0),
                u.bulletTrail.alpha = k.max(u.bulletTrail.alpha - t, 0),
                u.pos = e.add(u.pos, e.mul(u.dir, t * u.speed)),
                u.flare.alpha <= 0 && (u.collided = !1,
                u.flareContainer.visible = !1,
                u.trailContainer.visible = !1)),
                u.alive) {
                    if (u.tracerAlphaRate) {
                        const _ = s.__id == u.playerId ? u.tracerAlphaRate : u.tracerAlphaRate * .9;
                        u.bulletTrail.alpha = k.max(u.tracerAlphaMin, u.bulletTrail.alpha * _)
                    }
                    u.timeAlive += t,
                    u.flareScale = k.easeOutExpo(u.timeAlive / u.maxTimeAlive) * u?.maxFlareScale,
                    u.smokeThrottle <= 0 ? u.smokeThrottle = .05 : u.smokeThrottle -= t;
                    const g = u.distance - e.length(e.sub(u.startPos, u.pos))
                      , w = k.min(g, t * u.speed);
                    u.pos = e.add(u.pos, e.mul(u.dir, w)),
                    k.eqAbs(g, w) && (u.collided = !0,
                    u.alive = !1);
                    let y = 0;
                    (f.sameLayer(y, s.layer) || s.layer & 2) && (!(s.layer & 2) || !i.insideStructureMask(n.createCircle(u.pos, 1))) && (y |= 2),
                    l.addPIXIObj(u.trailContainer, y, 1e3, 0),
                    l.addPIXIObj(u.flareContainer, y, 1e3, 1),
                    u.isNew = !1
                }
            }
        }
        CCrkNK(t) {
            for (let a = 0; a < this.bullets.length; a++) {
                const i = this.bullets[a];
                if (i.alive || i.collided) {
                    const o = t.alZrl(i.pos);
                    i.flareContainer.position.set(o.x, o.y);
                    const s = t.oQvD(1);
                    i.flareContainer.scale.set(s * i.flareScale, s * i.flareScale);
                    const l = e.length(e.sub(i.pos, i.startPos));
                    i.trailContainer.position.set(o.x, o.y);
                    const c = k.min(i.tracerLength * 15, l / 2);
                    i.trailContainer.scale.set(s * c * i.trailScale, s)
                }
            }
        }
    }
    class tn {
        __id;
        __type;
        active;
        ticker = 0;
        playDropSfx = !1;
        container = new he;
        sprite = new he;
        emitter = null;
        updatedData;
        pos;
        visualPosOld;
        posInterpTicker;
        isOld;
        layer;
        type;
        count;
        isPreloadedGun;
        ownerId;
        rad;
        imgScale;
        constructor() {
            this.container.anchor.set(.5, .5),
            this.container.scale.set(1, 1),
            this.sprite.anchor.set(.5, .5),
            this.sprite.scale.set(.8, .8),
            this.container.addChild(this.sprite)
        }
        cGxERQ() {
            this.updatedData = !1,
            this.visualPosOld = e.create(0, 0)
        }
        AlR() {
            this.container.visible = !1,
            this.emitter && (this.emitter.stop(),
            this.emitter = null)
        }
        kPP(t, a, i, o) {
            if (this.updatedData = !0,
            e.eq(t.pos, this.visualPosOld) || (this.visualPosOld = e.copy(i ? t.pos : this.pos),
            this.posInterpTicker = 0),
            this.pos = e.copy(t.pos),
            a && (this.layer = t.layer,
            this.type = t.type,
            this.count = t.count,
            this.isOld = t.isOld,
            this.isPreloadedGun = t.isPreloadedGun,
            this.ownerId = t.hasOwner ? t.ownerId : 0),
            i) {
                const s = U[this.type];
                this.ticker = 0,
                this.isOld && (this.ticker = 10),
                !this.isOld && s.sound.drop && !o.map.lootDropSfxIds.includes(this.__id) && (this.playDropSfx = !0),
                this.rad = F.lootRadius[s.type],
                this.imgScale = s.lootImg?.scale * 1.25;
                const l = s.lootImg.innerScale || .8;
                this.sprite.scale.set(l, l),
                this.sprite.texture = K.from(s.lootImg?.sprite),
                this.sprite.tint = s.lootImg?.tint,
                this.container.texture = s.lootImg.border ? K.from(s.lootImg.border) : K.EMPTY,
                this.isPreloadedGun && (this.container.texture = K.from("loot-circle-outer-06.img"));
                const c = U[s.ammo];
                c ? this.container.tint = c.lootImg.tintDark : s.lootImg.borderTint ? this.container.tint = s.lootImg.borderTint : this.container.tint = 0,
                s.type == "xp" && s.emitter && (this.emitter = o.particleBarn.addEmitter(s.emitter, {
                    pos: this.pos,
                    layer: this.layer
                })),
                this.sprite.rotation = s?.lootImg?.rot ? s.lootImg.rot : 0,
                this.sprite.scale.x = s.lootImg.mirror ? -l : l,
                this.container.visible = !0
            }
            (i || a) && o.renderer.addPIXIObj(this.container, this.layer, 13, this.__id)
        }
    }
    class rn {
        lootPool = new Ke(tn);
        closestLoot = null;
        lCPzxG(t, a, i, o, s, l) {
            this.closestLoot = null;
            let c = Number.MAX_VALUE;
            const m = this.lootPool.HWU();
            for (let h = 0; h < m.length; h++) {
                const u = m[h];
                if (u.active) {
                    if (f.sameLayer(u.layer, a.layer) && !a.tuWDuv.veYmO && (u.ownerId == 0 || u.ownerId == a.__id)) {
                        const b = u.pos
                          , A = D.touch ? a.AQGS + u.rad * F.player.touchLootRadMult : u.rad
                          , P = e.sub(a.XafO, b)
                          , T = e.lengthSqr(P);
                        T < A * A && T < c && (c = T,
                        this.closestLoot = u)
                    }
                    if (u.ticker += t,
                    u.playDropSfx) {
                        i.lootDropSfxIds.push(u.__id),
                        u.playDropSfx = !1;
                        const b = U[u.type];
                        o.playSound(b.sound?.drop, {
                            channel: "sfx",
                            soundPos: u.pos,
                            layer: u.layer,
                            filter: "muffled"
                        })
                    }
                    u.emitter && (u.emitter.pos = e.add(u.pos, e.create(0, .1)),
                    u.emitter.layer = u.layer);
                    const g = k.delerp(u.ticker, 0, 1)
                      , w = k.easeOutElastic(g, .75);
                    let y = u.pos;
                    if (s.mAXkNL) {
                        u.posInterpTicker += t;
                        const b = k.clamp(u.posInterpTicker / s.jAGEt, 0, 1);
                        y = e.lerp(b, u.visualPosOld, u.pos)
                    }
                    const _ = s.alZrl(y)
                      , S = s.oQvD(u.imgScale * w);
                    D.debug && l.loot && a.layer === u.layer && ze.addCircle(u.pos, u.rad, 16711680, 0),
                    u.container.position.set(_.x, _.y),
                    u.container.scale.set(S, S)
                }
            }
        }
        getClosestLoot() {
            return this.closestLoot
        }
    }
    class p {
        constructor(t, a) {
            this.min = t,
            this.max = a
        }
        getRandom() {
            return f.random(this.min, this.max)
        }
    }
    function Ue(r) {
        return r instanceof p ? r.getRandom() : r
    }
    function an(r) {
        return r instanceof Function ? r() : r
    }
    class Si {
        active = !1;
        ticker = 0;
        def = {};
        sprite = new he;
        hasParent = !1;
        pos;
        vel;
        rot;
        delay;
        life;
        drag;
        rotVel;
        rotDrag;
        scaleUseExp;
        scale;
        scaleEnd;
        scaleExp;
        alphaUseExp;
        alpha;
        alphaEnd;
        alphaExp;
        alphaIn;
        alphaInStart;
        alphaInEnd;
        emitterIdx;
        valueAdjust;
        constructor() {
            this.sprite.anchor.set(.5, .5),
            this.sprite.scale.set(1, 1),
            this.sprite.visible = !1
        }
        init(t, a, i, o, s, l, c, m, h, u) {
            const g = ga[a];
            this.active = !0,
            this.ticker = 0,
            m ? (this.hasParent = !0,
            m.addChild(this.sprite)) : (this.hasParent = !1,
            t.addPIXIObj(this.sprite, i, h)),
            this.pos = e.copy(o),
            this.vel = e.copy(s),
            this.rot = c,
            this.def = g,
            this.delay = 0,
            this.life = Ue(g.life),
            this.drag = Ue(g.drag),
            this.rotVel = Ue(g.rotVel) * (Math.random() < .5 ? -1 : 1),
            this.rotDrag = Ue(g.drag) / 2,
            this.scaleUseExp = g.scale.exp !== void 0,
            this.scale = Ue(g.scale.start) * l,
            this.scaleEnd = this.scaleUseExp ? 0 : Ue(g.scale?.end) * l,
            this.scaleExp = this.scaleUseExp ? g.scale.exp : 0,
            this.alphaUseExp = g.alpha.exp !== void 0,
            this.alpha = Ue(g.alpha.start),
            this.alphaEnd = this.alphaUseExp ? 0 : Ue(g.alpha?.end),
            this.alphaExp = this.alphaUseExp ? g.alpha.exp : 0,
            this.alphaIn = g.alphaIn !== void 0,
            this.alphaInStart = this.alphaIn ? Ue(g.alphaIn?.start) : 0,
            this.alphaInEnd = this.alphaIn ? Ue(g.alphaIn?.end) : 0,
            this.emitterIdx = -1;
            const w = Array.isArray(g.image) ? g.image[Math.floor(Math.random() * g.image.length)] : g.image;
            this.sprite.texture = K.from(w),
            this.sprite.visible = !1,
            this.valueAdjust = g.ignoreValueAdjust ? 1 : u,
            this.setColor(an(g.color))
        }
        free() {
            this.active = !1,
            this.sprite.visible = !1
        }
        setDelay(t) {
            this.delay = t
        }
        setColor(t) {
            this.valueAdjust < 1 && (t = f.adjustValue(t, this.valueAdjust)),
            this.sprite.tint = t
        }
    }
    class on {
        active = !1;
        enabled;
        type;
        pos;
        dir;
        scale;
        layer;
        duration;
        radius;
        ticker;
        nextSpawn;
        spawnCount;
        parent;
        alpha;
        rateMult;
        zOrd;
        init(t, a={}) {
            const i = ko[t];
            this.active = !0,
            this.enabled = !0,
            this.type = t,
            this.pos = a.pos ? e.copy(a.pos) : e.create(0, 0),
            this.dir = a.dir ? e.copy(a.dir) : e.create(0, 1),
            this.scale = a.scale !== void 0 ? a.scale : 1,
            this.layer = a.layer || 0,
            this.duration = a.duration !== void 0 ? a.duration : Number.MAX_VALUE,
            this.radius = a.radius !== void 0 ? a.radius : i.radius,
            this.ticker = 0,
            this.nextSpawn = 0,
            this.spawnCount = 0,
            this.parent = a.parent || null,
            this.alpha = 1,
            this.rateMult = a.rateMult !== void 0 ? a.rateMult : 1;
            const o = ga[i.particle];
            this.zOrd = i.zOrd !== void 0 ? i.zOrd : o.zOrd !== void 0 ? o.zOrd : 20
        }
        free() {
            this.active = !1
        }
        stop() {
            this.duration = this.ticker
        }
    }
    class So {
        constructor(t) {
            this.renderer = t;
            for (let a = 0; a < 256; a++)
                this.particles[a] = new Si
        }
        particles = [];
        emitters = [];
        valueAdjust = 1;
        onMapLoad(t) {
            this.valueAdjust = t.getMapDef().biome.valueAdjust
        }
        AlR() {
            for (let t = 0; t < this.particles.length; t++) {
                const a = this.particles[t].sprite;
                a.parent?.removeChild(a),
                a.destroy({
                    children: !0
                })
            }
        }
        addParticle(t, a, i, o, s, l, c, m) {
            let h = null;
            for (let u = 0; u < this.particles.length; u++)
                if (!this.particles[u].active) {
                    h = this.particles[u];
                    break
                }
            return h || (h = new Si,
            this.particles.push(h)),
            s = s !== void 0 ? s : 1,
            l = l !== void 0 ? l : Math.random() * Math.PI * 2,
            m = m !== void 0 ? m : ga[t].zOrd || 20,
            h.init(this.renderer, t, a, i, o, s, l, c, m, this.valueAdjust),
            h
        }
        addRippleParticle(t, a, i) {
            const o = this.addParticle("waterRipple", a, t, e.create(0, 0), 1, 0, null);
            return o.setColor(i),
            o
        }
        addEmitter(t, a={}) {
            let i = null;
            for (let o = 0; o < this.emitters.length; o++)
                if (!this.emitters[o].active) {
                    i = this.emitters[o];
                    break
                }
            return i || (i = new on,
            this.emitters.push(i)),
            i.init(t, a),
            i
        }
        lCPzxG(t, a, i) {
            for (let o = 0; o < this.emitters.length; o++) {
                const s = this.emitters[o];
                if (s.active && s.enabled) {
                    s.ticker += t,
                    s.nextSpawn -= t;
                    const l = ko[s.type];
                    for (; s.nextSpawn <= 0 && s.spawnCount < l.maxCount; ) {
                        const c = s.scale * s.radius
                          , m = e.add(s.pos, f.randomPointInCircle(c))
                          , h = e.rotate(s.dir, (Math.random() - .5) * l.angle)
                          , u = e.mul(h, Ue(l.speed))
                          , g = Ue(l.rot)
                          , w = this.addParticle(l.particle, s.layer, m, u, s.scale, g, s.parent, s.zOrd);
                        w.emitterIdx = o;
                        let y = Ue(l.rate);
                        if (l.maxRate) {
                            const _ = k.easeInExpo(k.min(1, s.ticker / l.maxElapsed))
                              , S = Ue(l.maxRate);
                            y = k.lerp(_, y, S)
                        }
                        s.nextSpawn += y * s.rateMult,
                        s.spawnCount++
                    }
                    s.ticker >= s.duration && s.free()
                }
            }
            for (let o = 0; o < this.particles.length; o++) {
                const s = this.particles[o];
                if (s.active && (s.ticker += t,
                s.ticker >= s.delay)) {
                    const l = k.min((s.ticker - s.delay) / s.life, 1);
                    s.vel = e.mul(s.vel, 1 / (1 + t * s.drag)),
                    s.pos = e.add(s.pos, e.mul(s.vel, t)),
                    s.rotVel *= 1 / (1 + t * s.rotDrag),
                    s.rot += s.rotVel * t,
                    s.scaleUseExp && (s.scale += t * s.scaleExp),
                    s.alphaUseExp && (s.alpha = k.max(s.alpha + t * s.alphaExp, 0));
                    const c = s.hasParent ? s.pos : a.alZrl(s.pos);
                    let m = s.scaleUseExp ? s.scale : k.remap(l, s.def.scale.lerp?.min, s.def.scale.lerp?.max, s.scale, s.scaleEnd)
                      , h = s.alphaUseExp ? s.alpha : k.remap(l, s.def.alpha.lerp?.min, s.def.alpha.lerp?.max, s.alpha, s.alphaEnd);
                    s.alphaIn && l < s.def.alphaIn?.lerp?.max && (h = k.remap(l, s.def.alphaIn?.lerp?.min, s.def.alphaIn?.lerp?.max, s.alphaInStart, s.alphaInEnd)),
                    s.emitterIdx >= 0 && (h *= this.emitters[s.emitterIdx].alpha),
                    s.hasParent || (m = a.oQvD(m)),
                    s.sprite.position.set(c.x, c.y),
                    s.sprite.scale.set(m, m),
                    s.sprite.rotation = s.rot,
                    s.sprite.alpha = h,
                    s.sprite.visible = !0,
                    l >= 1 && s.free()
                }
            }
        }
    }
    const ga = {
        archwayBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.2,.35),
                end: new p(.08,.12),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.06, .84, f.random(.46, .48)))
            }
        },
        bloodSplat: {
            image: ["part-splat-01.img", "part-splat-02.img", "part-splat-03.img"],
            life: .5,
            drag: 1,
            rotVel: 0,
            scale: {
                start: .04,
                end: new p(.15,.2),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(16711680, 1, f.random(.45, .8)))
            }
        },
        barrelPlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(3,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.08,.18),
                end: new p(.07,.17),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.09, .8, f.random(.66, .68)))
            }
        },
        barrelChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.01, .02, f.random(.38, .41)))
            }
        },
        barrelBreak: {
            image: ["part-spark-02.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.01, .02, f.random(.38, .41)))
            }
        },
        blackChip: {
            image: ["part-woodchip-01.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, .08, f.random(.16, .18)))
            }
        },
        blueChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.64, 1, f.random(.83, .85)))
            }
        },
        book: {
            image: ["part-book-01.img"],
            life: new p(1,1.5),
            drag: new p(3,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.09,.19),
                end: new p(.07,.17),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, .42, f.random(.72, .74)))
            }
        },
        bottleBrownChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,5),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.02,.04),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: 7878664
        },
        bottleBrownBreak: {
            image: ["part-spark-02.img"],
            life: new p(.4,.8),
            drag: new p(1,4),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.03,.06),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: .8,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 7878664
        },
        bottleBlueChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,5),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.02,.04),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: 19544
        },
        bottleWhiteBreak: {
            image: ["part-spark-02.img"],
            life: new p(.4,.8),
            drag: new p(1,4),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.03,.06),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: .75,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 16777215
        },
        bottleWhiteChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,5),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.02,.04),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: .75,
                end: 0,
                lerp: new p(.95,1)
            },
            color: 16777215
        },
        bottleBlueBreak: {
            image: ["part-spark-02.img"],
            life: new p(.4,.8),
            drag: new p(1,4),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.03,.06),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: .8,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 19544
        },
        brickChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, .71, f.random(.32, .34)))
            }
        },
        clothBreak: {
            image: ["part-cloth-01.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.95, 1)))
            }
        },
        clothHit: {
            image: ["part-cloth-01.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.95, 1)))
            }
        },
        depositBoxGreyBreak: {
            image: ["part-plate-01.img"],
            life: new p(.5,1),
            drag: new p(7,8),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.15,.25),
                end: new p(.12,.2),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.36, .38)))
            }
        },
        depositBoxGoldBreak: {
            image: ["part-plate-01.img"],
            life: new p(.5,1),
            drag: new p(6,8),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.2,.35),
                end: new p(.18,.25),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.11, .84, f.random(.64, .66)))
            }
        },
        glassChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,5),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: 8444415
        },
        glassPlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 8444415
        },
        goldChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.11, .84, f.random(.88, .9)))
            }
        },
        greenChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.4, .18, f.random(.5, .62)))
            }
        },
        greenPlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.08,.16),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 3884335
        },
        greenhouseBreak: {
            image: ["part-spark-02.img", "part-plate-01.img", "part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: .8,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 8444415
        },
        hutBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.1, .81, f.random(.78, .82)))
            }
        },
        leaf: {
            image: ["part-leaf-01.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.5, .75)))
            }
        },
        leafPrickly: {
            image: ["part-leaf-01sv.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.8, .85)))
            }
        },
        leafRiver: {
            image: ["part-leaf-02.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.5, .75)))
            }
        },
        lockerBreak: {
            image: ["part-plate-01.img"],
            life: new p(.5,1),
            drag: new p(7,8),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.15,.2),
                end: new p(.12,.15),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.1, .23, f.random(.51, .53)))
            }
        },
        ltgreenChip: {
            image: ["part-woodchip-01.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.2, .42, f.random(.38, .42)))
            }
        },
        outhouseChip: {
            image: ["part-woodchip-01.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, .57, f.random(.4, .46)))
            }
        },
        outhouseBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, .79, f.random(.52, .54)))
            }
        },
        outhousePlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, .57, f.random(.4, .46)))
            }
        },
        potChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.06, .84, f.random(.73, .77)))
            }
        },
        potBreak: {
            image: ["part-pot-01.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.06, .84, f.random(.73, .77)))
            }
        },
        potatoChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.075, .43, f.random(.48, .5)))
            }
        },
        potatoBreak: {
            image: ["part-pumpkin-01.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.075, .43, f.random(.48, .5)))
            }
        },
        pumpkinChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.07, 1, f.random(.98, 1)))
            }
        },
        pumpkinBreak: {
            image: ["part-pumpkin-01.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, 1, f.random(.95, .97)))
            }
        },
        squashChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.31, .86, f.random(.35, .36)))
            }
        },
        squashBreak: {
            image: ["part-pumpkin-01.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.31, .86, f.random(.35, .36)))
            }
        },
        redChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.98, 1, f.random(.52, .54)))
            }
        },
        redBreak: {
            image: ["part-spark-02.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.98, 1, f.random(.52, .54)))
            }
        },
        redPlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.02, 1, f.random(.26, .28)))
            }
        },
        rockChip: {
            image: ["map-stone-01.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.5, .75)))
            }
        },
        rockBreak: {
            image: ["map-stone-01.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.5, .75)))
            }
        },
        rockEyeChip: {
            image: ["map-stone-01.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.03,.06),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: 2696225
        },
        rockEyeBreak: {
            image: ["map-stone-01.img"],
            life: new p(.8,1),
            drag: new p(4,12),
            rotVel: 0,
            scale: {
                start: new p(.05,.1),
                end: new p(.03,.06),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 2696225
        },
        shackBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.1, .24, f.random(.38, .41)))
            }
        },
        shackGreenBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 5730406
        },
        tanChip: {
            image: ["part-woodchip-01.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.1, .35, f.random(.48, .52)))
            }
        },
        teahouseBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.6, .31, f.random(.42, .45)))
            }
        },
        teapavilionBreak: {
            image: ["part-panel-01.img"],
            life: new p(.5,1.5),
            drag: new p(1,5),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.25,.55),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, .8, f.random(.6, .62)))
            }
        },
        toiletBreak: {
            image: ["part-spark-02.img"],
            life: new p(.8,1),
            drag: new p(1,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.97, 0, f.random(.95, .97)))
            }
        },
        toiletMetalBreak: {
            image: ["part-spark-02.img"],
            life: new p(.8,1),
            drag: new p(4,5),
            rotVel: 0,
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.01, .02, f.random(.38, .41)))
            }
        },
        turkeyFeathersHit: {
            image: ["part-feather-01.img", "part-feather-02.img"],
            life: new p(1,1.5),
            drag: new p(1,10),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.12),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return 16777215
            }
        },
        turkeyFeathersDeath: {
            image: ["part-feather-01.img", "part-feather-02.img"],
            life: new p(1,1.5),
            drag: new p(1,10),
            rotVel: new p(0,Math.PI * 3),
            scale: {
                start: new p(.15,.25),
                end: new p(.12,.2),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return 16777215
            }
        },
        whiteChip: {
            image: ["part-spark-02.img"],
            life: .5,
            drag: new p(1,10),
            rotVel: 0,
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.97, 0, f.random(.95, .97)))
            }
        },
        whitePlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.97, 0, f.random(.95, .97)))
            }
        },
        windowBreak: {
            image: ["part-spark-02.img"],
            life: new p(.4,.8),
            drag: new p(1,4),
            rotVel: new p(Math.PI * 1,Math.PI * 6),
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: .8,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 8444415
        },
        woodChip: {
            image: ["part-woodchip-01.img"],
            life: new p(.5,1),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.04,.08),
                end: new p(.01,.02),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.05, 1, f.random(.35, .45)))
            }
        },
        woodLog: {
            image: ["part-log-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.05, 1, f.random(.35, .45)))
            }
        },
        woodPlank: {
            image: ["part-plank-01.img"],
            life: new p(1,1.5),
            drag: new p(1,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.1,.2),
                end: new p(.08,.18),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.05, 1, f.random(.25, .35)))
            }
        },
        woodShard: {
            image: ["part-spark-02.img"],
            life: new p(1,1.5),
            drag: new p(3,5),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: new p(.06,.15),
                end: new p(.02,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.05, 1, f.random(.25, .35)))
            }
        },
        "9mm": {
            image: ["part-shell-01.img"],
            life: new p(.5,.75),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .0625,
                end: .0325,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "9mm_cursed": {
            image: ["part-shell-01.img"],
            life: new p(.5,.75),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .0625,
                end: .0325,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "762mm": {
            image: ["part-shell-02.img"],
            life: new p(.75,1),
            drag: new p(1.5,2.5),
            rotVel: new p(Math.PI * 2.5,Math.PI * 2.5),
            scale: {
                start: .075,
                end: .045,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.925,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "556mm": {
            image: ["part-shell-04.img"],
            life: new p(.75,1),
            drag: new p(1.5,2.5),
            rotVel: new p(Math.PI * 2.5,Math.PI * 2.5),
            scale: {
                start: .075,
                end: .045,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.925,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "12gauge": {
            image: ["part-shell-03.img"],
            life: new p(.5,.75),
            drag: new p(1,2),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .1,
                end: .05,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "50AE": {
            image: ["part-shell-01.img"],
            life: new p(.5,.75),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .0625,
                end: .0325,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "308sub": {
            image: ["part-shell-05.img"],
            life: new p(.5,.75),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .0625,
                end: .0325,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        flare: {
            image: ["part-shell-03.img"],
            life: new p(.5,.75),
            drag: new p(1,2),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .1,
                end: .05,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        "45acp": {
            image: ["part-shell-01.img"],
            life: new p(.5,.75),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .07,
                end: .04,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        potato_ammo: {
            image: ["part-wedge-01.img"],
            life: new p(.5,.75),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 3,Math.PI * 3),
            scale: {
                start: .07,
                end: .04,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.95,1)
            },
            color: 16777215
        },
        bugle_ammo: {
            image: ["part-note-02.img"],
            life: new p(1.25,1.3),
            drag: new p(3,4),
            rotVel: new p(Math.PI * 1,Math.PI * 1),
            scale: {
                start: .1,
                end: .14,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.5,1)
            },
            color: 16767488
        },
        fragPin: {
            image: ["part-frag-pin-01.img"],
            life: new p(.5,.5),
            drag: new p(.9,1),
            rotVel: 0,
            scale: {
                start: .18,
                end: .14,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.5,1)
            },
            color: 16777215
        },
        fragLever: {
            image: ["part-frag-lever-01.img"],
            life: new p(.5,.5),
            drag: new p(.9,1),
            rotVel: Math.PI * 9,
            scale: {
                start: .18,
                end: .14,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.5,1)
            },
            color: 16777215
        },
        explosionBurst: {
            image: ["part-frag-burst-01.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.065, 1, f.random(.98, .99)))
            }
        },
        explosionMIRV: {
            image: ["part-frag-burst-01.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 1, f.random(.82, .84)))
            }
        },
        explosionSmoke: {
            image: ["part-smoke-01.img"],
            life: new p(2,3),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        explosionUSAS: {
            image: ["part-frag-burst-01.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, 1, f.random(.98, .99)))
            }
        },
        explosionRounds: {
            image: ["part-frag-burst-03.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.08, .7, f.random(.75, .8)))
            }
        },
        explosionBomb: {
            image: ["part-frag-burst-02.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 16777215
        },
        explosionPotato: {
            image: ["part-frag-burst-01.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 11363866
        },
        explosionPotatoSMG: {
            image: ["part-frag-burst-01.img"],
            life: .5,
            drag: 0,
            rotVel: 0,
            scale: {
                start: 1,
                end: 4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.75,1)
            },
            color: 12888074
        },
        airdropSmoke: {
            image: ["part-smoke-02.img", "part-smoke-03.img"],
            zOrd: 499,
            life: new p(1,1.5),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.67,.72),
                end: new p(.55,.61),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        airdropCrate01: {
            image: ["part-airdrop-01.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate01h: {
            image: ["part-airdrop-01h.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate01x: {
            image: ["part-airdrop-01x.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate02: {
            image: ["part-airdrop-02.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate02h: {
            image: ["part-airdrop-02h.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate02x: {
            image: ["part-airdrop-02x.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate03: {
            image: ["part-airdrop-03.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        airdropCrate04: {
            image: ["part-airdrop-04.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        classShell01a: {
            image: ["part-class-shell-01a.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        classShell01b: {
            image: ["part-class-shell-01b.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        classShell02a: {
            image: ["part-class-shell-02a.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        classShell02b: {
            image: ["part-class-shell-02b.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        classShell03a: {
            image: ["part-class-shell-03a.img"],
            life: new p(.85,1.15),
            drag: new p(2,2.25),
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        classShell03b: {
            image: ["part-class-shell-03b.img"],
            life: new p(.85,1.15),
            drag: new p(1.85,2.15),
            rotVel: new p(0,Math.PI * 2),
            scale: {
                start: .5,
                end: .4,
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16777215
        },
        cabinSmoke: {
            image: ["part-smoke-02.img", "part-smoke-03.img"],
            life: new p(3,3.25),
            drag: new p(.2,.22),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.2,.25),
                end: new p(.6,.65),
                lerp: new p(0,1)
            },
            alpha: {
                start: .7,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: .7,
                lerp: new p(0,.1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.69, .695)))
            }
        },
        bathhouseSteam: {
            image: ["part-smoke-02.img", "part-smoke-03.img"],
            life: new p(10,12),
            drag: new p(.04,.06),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.2,.25),
                end: new p(.9,.95),
                lerp: new p(0,1)
            },
            alpha: {
                start: .5,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: .5,
                lerp: new p(0,.1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.99, .995)))
            }
        },
        bunkerBubbles: {
            image: ["player-ripple-01.img"],
            zOrd: 10,
            life: new p(2.25,2.5),
            drag: new p(1.85,2.15),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.2,.25),
                end: new p(.65,.7),
                lerp: new p(0,1)
            },
            alpha: {
                start: .25,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.95, 1)))
            }
        },
        waterRipple: {
            image: ["player-ripple-01.img"],
            zOrd: 10,
            life: 1.75,
            drag: 0,
            rotVel: 0,
            scale: {
                start: .15,
                exp: .5
            },
            alpha: {
                start: 1,
                exp: -1
            },
            color: 11792639
        },
        leafAutumn: {
            image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.15),
                end: new p(.08,.11),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        leafHalloween: {
            image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.15),
                end: new p(.08,.11),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.5, .55)))
            },
            ignoreValueAdjust: !0
        },
        leafSpring: {
            image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.13,.15),
                end: new p(.08,.11),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        leafSummer: {
            image: ["part-leaf-06.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.15),
                end: new p(.08,.11),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.7, .95)))
            },
            ignoreValueAdjust: !0
        },
        leafPotato: {
            image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img", "part-potato-02.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.13,.15),
                end: new p(.08,.11),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        potato: {
            image: ["part-potato-02.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.13,.15),
                end: new p(.08,.11),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        snow: {
            image: ["part-snow-01.img"],
            life: new p(10,15),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.07,.12),
                end: new p(.05,.1),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        snowball_impact: {
            image: ["part-snow-01.img"],
            life: new p(.5,1),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.13,.23),
                end: new p(.07,.14),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        potato_impact: {
            image: ["part-potato-01.img"],
            life: new p(.5,1),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.13,.23),
                end: new p(.07,.14),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95)))
            }
        },
        potato_smg_impact: {
            image: ["part-potato-01.img"],
            life: new p(.5,1),
            drag: new p(0,0),
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.13,.23),
                end: new p(.07,.14),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.9,1)
            },
            color: 16770437
        },
        heal_basic: {
            image: ["part-heal-basic.img"],
            life: new p(.75,1),
            drag: .25,
            rotVel: 0,
            scale: {
                start: new p(.1,.12),
                end: new p(.05,.07),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        heal_heart: {
            image: ["part-heal-heart.img"],
            life: new p(.75,1),
            drag: .25,
            rotVel: 0,
            scale: {
                start: new p(.1,.12),
                end: new p(.05,.07),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        heal_moon: {
            image: ["part-heal-moon.img"],
            life: new p(.75,1),
            drag: .25,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.1,.12),
                end: new p(.05,.07),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        heal_tomoe: {
            image: ["part-heal-tomoe.img"],
            life: new p(.75,1),
            drag: .25,
            rotVel: new p(Math.PI * .5,Math.PI * 1),
            scale: {
                start: new p(.1,.12),
                end: new p(.05,.07),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(0, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        boost_basic: {
            image: ["part-boost-basic.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.3, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        boost_star: {
            image: ["part-boost-star.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.3, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        boost_naturalize: {
            image: ["part-boost-naturalize.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * .35,Math.PI * .7),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.3, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        boost_shuriken: {
            image: ["part-boost-shuriken.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * 1,Math.PI * 2),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.3, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        revive_basic: {
            image: ["part-heal-basic.img"],
            life: new p(.75,1),
            drag: .25,
            rotVel: 0,
            scale: {
                start: new p(.1,.12),
                end: new p(.05,.07),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.83, 1, f.random(.7, 1)))
            },
            ignoreValueAdjust: !0
        },
        leafStim: {
            image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
            life: new p(4,5),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.37, 1, f.random(.95, 1)))
            }
        },
        takedownStim: {
            image: ["part-takedown-01.img"],
            life: new p(4,5),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: 13107200
        },
        inspireStim: {
            image: ["part-note-01.img"],
            life: new p(4,5),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return f.rgbToInt(f.hsvToRgb(.13, 1, f.random(.98, 1)))
            }
        },
        xp_common: {
            image: ["part-boost-basic.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return Math.random() > .5 ? f.rgbToInt(f.hsvToRgb(.12, .97, f.random(.95, 1))) : f.rgbToInt(f.hsvToRgb(.16, 1, f.random(.95, 1)))
            },
            ignoreValueAdjust: !0
        },
        xp_rare: {
            image: ["part-boost-basic.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return Math.random() > .5 ? f.rgbToInt(f.hsvToRgb(.05, .94, f.random(.85, .88))) : f.rgbToInt(f.hsvToRgb(.06, .95, f.random(.95, 1)))
            },
            ignoreValueAdjust: !0
        },
        xp_mythic: {
            image: ["part-boost-basic.img"],
            life: new p(.75,1),
            drag: 0,
            rotVel: new p(Math.PI * .25,Math.PI * .5),
            scale: {
                start: new p(.12,.14),
                end: new p(.06,.08),
                lerp: new p(0,1)
            },
            alpha: {
                start: 1,
                end: 0,
                lerp: new p(.7,1)
            },
            alphaIn: {
                start: 0,
                end: 1,
                lerp: new p(0,.05)
            },
            color: function() {
                return Math.random() > .5 ? f.rgbToInt(f.hsvToRgb(0, .96, f.random(.91, .94))) : f.rgbToInt(f.hsvToRgb(.03, .95, f.random(.92, .95)))
            },
            ignoreValueAdjust: !0
        }
    }
      , ko = {
        smoke_barrel: {
            particle: "explosionSmoke",
            rate: new p(.2,.3),
            radius: 0,
            speed: new p(2,3),
            angle: Math.PI * .1,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        cabin_smoke_parent: {
            particle: "cabinSmoke",
            rate: new p(.72,.83),
            radius: 0,
            speed: new p(64,96),
            angle: Math.PI * .1,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        bathhouse_steam: {
            particle: "bathhouseSteam",
            rate: new p(2,3),
            radius: 1,
            speed: new p(1.5,2),
            angle: Math.PI * .1,
            maxCount: Number.MAX_VALUE
        },
        bunker_bubbles_01: {
            particle: "bunkerBubbles",
            rate: new p(.3,.325),
            radius: 0,
            speed: new p(1.6,1.8),
            angle: Math.PI * -2.2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        bunker_bubbles_02: {
            particle: "bunkerBubbles",
            rate: new p(.4,.425),
            radius: 0,
            speed: new p(1.6,1.8),
            angle: Math.PI * -2.2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        falling_leaf: {
            particle: "leafAutumn",
            rate: new p(.08,.12),
            radius: 120,
            speed: new p(2,3),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_leaf_halloween: {
            particle: "leafHalloween",
            rate: new p(.08,.12),
            radius: 120,
            speed: new p(2,3),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_leaf_spring: {
            particle: "leafSpring",
            rate: new p(.1,.14),
            radius: 120,
            speed: new p(2,3),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_leaf_summer: {
            particle: "leafSummer",
            rate: new p(.18,.24),
            radius: 120,
            speed: new p(1.4,2.4),
            angle: Math.PI * .2,
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_leaf_potato: {
            particle: "leafPotato",
            rate: new p(.1,.14),
            radius: 120,
            speed: new p(2,3),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_potato: {
            particle: "potato",
            rate: new p(.2,.24),
            radius: 120,
            speed: new p(2,3),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_snow_fast: {
            particle: "snow",
            rate: new p(.12,.17),
            maxRate: new p(.05,.07),
            maxElapsed: 240,
            radius: 70,
            speed: new p(1,1.5),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        falling_snow_slow: {
            particle: "snow",
            rate: new p(.08,.12),
            radius: 70,
            speed: new p(1,1.5),
            angle: Math.PI * .2,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE,
            zOrd: 999
        },
        heal_basic: {
            particle: "heal_basic",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        heal_heart: {
            particle: "heal_heart",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        heal_moon: {
            particle: "heal_moon",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        heal_tomoe: {
            particle: "heal_tomoe",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        boost_basic: {
            particle: "boost_basic",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        boost_star: {
            particle: "boost_star",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        boost_naturalize: {
            particle: "boost_naturalize",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        boost_shuriken: {
            particle: "boost_shuriken",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: new p(0,Math.PI * 2),
            maxCount: Number.MAX_VALUE
        },
        revive_basic: {
            particle: "revive_basic",
            rate: new p(.5,.55),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        windwalk: {
            particle: "leafStim",
            rate: new p(.1,.12),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        takedown: {
            particle: "takedownStim",
            rate: new p(.1,.12),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        inspire: {
            particle: "inspireStim",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        xp_common: {
            particle: "xp_common",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        xp_rare: {
            particle: "xp_rare",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        },
        xp_mythic: {
            particle: "xp_mythic",
            rate: new p(.3,.35),
            radius: 1.5,
            speed: new p(1,1.5),
            angle: 0,
            rot: 0,
            maxCount: Number.MAX_VALUE
        }
    }
      , sn = 1.25
      , na = .75
      , ln = .75
      , zo = 2;
    class cn {
        active = !1;
        sprite = new he;
        soundRangeMult;
        id;
        pos;
        planeDir;
        actionComplete;
        dirty;
        soundInstance;
        soundUpdateThrottle;
        alpha;
        renderAlpha;
        spriteUpdateTime;
        type;
        config;
        rad;
        planeSound;
        constructor() {
            this.sprite.anchor.set(.5, .5),
            this.sprite.visible = !1
        }
        cGxERQ(t, a) {
            switch (this.id = t.id,
            this.pos = e.copy(t.pos),
            this.planeDir = e.copy(t.planeDir),
            this.actionComplete = t.actionComplete,
            this.active = !0,
            this.dirty = !1,
            this.soundInstance = null,
            this.soundUpdateThrottle = 0,
            this.alpha = na,
            this.renderAlpha = 1,
            this.spriteUpdateTime = 0,
            this.type = t.action,
            this.config = this.type == F.Plane.Airdrop ? F.airdrop : F.airstrike,
            this.rad = this.config.planeRad,
            this.type) {
            case F.Plane.Airdrop:
                this.sprite.texture = K.from(a.getMapDef().biome.airdrop.planeImg),
                this.planeSound = a.getMapDef().biome.airdrop.planeSound;
                break;
            case F.Plane.Airstrike:
                this.sprite.texture = K.from("map-plane-02.img"),
                this.planeSound = "fighter_01"
            }
            this.sprite.visible = !0,
            this.sprite.rotation = Math.atan2(this.planeDir.x, this.planeDir.y)
        }
        AlR(t) {
            this.spriteUpdateTime >= zo && (this.soundInstance && (t.stopSound(this.soundInstance),
            this.soundInstance = null),
            this.sprite.visible = !1,
            this.active = !1)
        }
    }
    class nn {
        constructor(t) {
            this.container = t,
            t.addChild(this.gfx)
        }
        active = !1;
        pos = e.create(0, 0);
        rad = 0;
        duration = 0;
        ticker = 0;
        gfx = new Re;
        renderPos;
        renderRad;
        cGxERQ(t, a, i) {
            this.active = !0,
            this.pos = e.copy(t),
            this.rad = a,
            this.duration = i,
            this.ticker = 0,
            this.renderPos = e.create(0, 0),
            this.renderRad = 0,
            this.gfx.visible = !0
        }
        lCPzxG(t) {
            this.ticker += t,
            this.gfx.visible = !0,
            this.ticker >= this.duration && (this.gfx.visible = !1,
            this.active = !1)
        }
        render(t, a, i) {
            const o = t.getMapPosFromWorldPos(this.pos, a)
              , s = t.getMapPosFromWorldPos(e.add(this.pos, e.create(this.rad, 0)), a)
              , l = e.length(e.sub(s, o))
              , c = !e.eq(this.renderPos, o, 1e-4)
              , m = !k.eqAbs(this.renderRad, l, 1e-4);
            c && (this.renderPos = e.copy(o)),
            m && (this.renderRad = l),
            c && this.gfx.position.set(this.renderPos.x, this.renderPos.y),
            m && (this.gfx.clear(),
            this.gfx.lineStyle(1.5, 15400704),
            this.gfx.beginFill(15400704, .2),
            this.gfx.drawCircle(0, 0, this.renderRad),
            this.gfx.endFill());
            const h = k.smoothstep(this.ticker, 0, .5) * (1 - k.smoothstep(this.ticker, this.duration - .5, this.duration));
            this.gfx.alpha = h
        }
    }
    class mn {
        constructor(t) {
            this.audioManager = t
        }
        planes = [];
        airstrikeZones = [];
        airstrikeZoneContainer = new ue;
        AlR() {
            for (let t = 0; t < this.planes.length; t++)
                this.planes[t].AlR(this.audioManager)
        }
        updatePlanes(t, a) {
            for (let i = 0; i < this.planes.length; i++)
                this.planes[i].dirty = !0;
            for (let i = 0; i < t.length; i++) {
                const o = t[i];
                let s = null;
                for (let l = 0; l < this.planes.length; l++) {
                    const c = this.planes[l];
                    if (c.active && c.id == o.id) {
                        s = c;
                        break
                    }
                }
                s ||= this.addPlane(o, a),
                s.dirty = !1,
                s.actionComplete = o.actionComplete
            }
            for (let i = 0; i < this.planes.length; i++) {
                const o = this.planes[i];
                o.active && o.dirty && o.AlR(this.audioManager)
            }
        }
        addPlane(t, a) {
            let i = null;
            for (let o = 0; o < this.planes.length; o++)
                if (!this.planes[o].active) {
                    i = this.planes[o];
                    break
                }
            return i || (i = new cn,
            this.planes.push(i)),
            i.cGxERQ(t, a),
            i
        }
        createAirstrikeZone(t) {
            let a = null;
            for (let i = 0; i < this.airstrikeZones.length; i++)
                if (!this.airstrikeZones[i]) {
                    a = this.airstrikeZones[i];
                    break
                }
            return a || (a = new nn(this.airstrikeZoneContainer),
            this.airstrikeZones.push(a)),
            a.cGxERQ(t.pos, t.rad, t.duration),
            a
        }
        lCPzxG(t, a, i, o, s) {
            for (let l = 0; l < this.planes.length; l++) {
                const c = this.planes[l];
                if (c.active) {
                    let m = 0;
                    if ((f.sameLayer(m, i.layer) || i.layer & 2) && (!(i.layer & 2) || !o.insideStructureMask(n.createCircle(c.pos, 1))) && (m |= 2),
                    c.pos = e.add(c.pos, e.mul(c.planeDir, t * c.config.planeVel)),
                    c.actionComplete && (c.spriteUpdateTime = Math.min(c.spriteUpdateTime + t, zo),
                    c.rad = k.lerp(c.spriteUpdateTime, c.config.planeRad, c.config.planeRad * sn),
                    c.alpha = k.lerp(c.spriteUpdateTime, na, na * ln),
                    c.soundRangeMult = k.max(0, k.lerp(c.spriteUpdateTime, c.config.soundRangeMult, c.config.soundRangeMult - c.config.soundRangeDelta))),
                    c.soundInstance)
                        c.soundUpdateThrottle < 0 ? (this.audioManager.updateSound(c.soundInstance, "sfx", c.pos, {
                            layer: m,
                            rangeMult: c.config.soundRangeMult,
                            ignoreMinAllowable: !0,
                            fallOff: c.config.fallOff
                        }),
                        c.soundUpdateThrottle = .1) : c.soundUpdateThrottle -= t;
                    else {
                        const y = e.length(e.sub(i.XafO, c.pos))
                          , _ = c.config.soundRangeMax * c.config.soundRangeMult;
                        let S = 0;
                        if (c.type == F.Plane.Airstrike) {
                            const T = k.max(150, y);
                            S = (1 - k.clamp(k.max(0, T) / 800, 0, 1)) * 2.25
                        }
                        y < _ && (c.soundInstance = this.audioManager.playSound(c.planeSound, {
                            channel: "sfx",
                            soundPos: c.pos,
                            layer: m,
                            loop: !0,
                            rangeMult: 2.5,
                            ignoreMinAllowable: !0,
                            fallOff: c.config.fallOff,
                            offset: S
                        }))
                    }
                    s.addPIXIObj(c.sprite, m, 1501, c.id);
                    const h = a.alZrl(c.pos)
                      , u = a.oQvD(c.rad / a.OGpt)
                      , g = o.insideBuildingCeiling(n.createCircle(i.XafO, .01), !0);
                    let w = c.alpha;
                    i.layer == 1 ? w = 0 : (g || i.layer & 1) && (w = .15),
                    c.renderAlpha = k.lerp(t * 3, c.renderAlpha, w),
                    c.sprite.position.set(h.x, h.y),
                    c.sprite.scale.set(u, u),
                    c.sprite.tint = 16776960,
                    c.sprite.alpha = c.renderAlpha,
                    c.sprite.visible = !0
                }
            }
            for (let l = 0; l < this.airstrikeZones.length; l++) {
                const c = this.airstrikeZones[l];
                c.active && c.lCPzxG(t)
            }
        }
        renderAirstrikeZones(t, a, i) {
            for (let o = 0; o < this.airstrikeZones.length; o++) {
                const s = this.airstrikeZones[o];
                s.active && s.render(t, a, i)
            }
        }
    }
    function X(r, t) {
        return {
            time: r,
            bones: t
        }
    }
    function me(r, t, a) {
        return {
            time: r,
            fn: t,
            args: a
        }
    }
    class B {
        constructor(t=e.create(0, 0), a=0, i=e.create(0, 0)) {
            this.pivot = t,
            this.rot = a,
            this.pos = i,
            this.pivot = e.copy(t),
            this.rot = 0,
            this.pos = e.copy(i)
        }
        copy(t) {
            e.set(this.pivot, t.pivot),
            this.rot = t.rot,
            e.set(this.pos, t.pos)
        }
        rotate(t) {
            return this.rot = t,
            this
        }
        offset(t) {
            return this.pos = e.copy(t),
            this
        }
        static identity = new B(e.create(0, 0));
        static lerp(t, a, i) {
            const o = new B;
            return o.pos = e.lerp(t, a.pos, i.pos),
            o.rot = k.lerp(t, a.rot, i.rot),
            o.pivot = e.lerp(t, a.pivot, i.pivot),
            o
        }
    }
    var ut = (r => (r[r.HandL = 0] = "HandL",
    r[r.HandR = 1] = "HandR",
    r[r.FootL = 2] = "FootL",
    r[r.FootR = 3] = "FootR",
    r))(ut || {});
    Oe(Object.keys(ut).length % 2 == 0);
    const ki = {
        fists: {
            0: new B(e.create(14, -12.25)),
            1: new B(e.create(14, 12.25))
        },
        slash: {
            0: new B(e.create(18, -8.25)),
            1: new B(e.create(6, 20.25))
        },
        meleeTwoHanded: {
            0: new B(e.create(10.5, -14.25)),
            1: new B(e.create(18, 6.25))
        },
        meleeKatana: {
            0: new B(e.create(8.5, 13.25)),
            1: new B(e.create(-3, 17.75))
        },
        meleeNaginata: {
            0: new B(e.create(19, -7.25)),
            1: new B(e.create(8.5, 24.25))
        },
        machete: {
            0: new B(e.create(14, -12.25)),
            1: new B(e.create(1, 17.75))
        },
        rifle: {
            0: new B(e.create(28, 5.25)),
            1: new B(e.create(14, 1.75))
        },
        dualRifle: {
            0: new B(e.create(5.75, -16)),
            1: new B(e.create(5.75, 16))
        },
        bullpup: {
            0: new B(e.create(28, 5.25)),
            1: new B(e.create(24, 1.75))
        },
        launcher: {
            0: new B(e.create(20, 10)),
            1: new B(e.create(2, 22))
        },
        pistol: {
            0: new B(e.create(14, 1.75)),
            1: new B(e.create(14, 1.75))
        },
        dualPistol: {
            0: new B(e.create(15.75, -8.75)),
            1: new B(e.create(15.75, 8.75))
        },
        throwable: {
            0: new B(e.create(15.75, -9.625)),
            1: new B(e.create(15.75, 9.625))
        },
        downed: {
            0: new B(e.create(14, -12.25)),
            1: new B(e.create(14, 12.25)),
            2: new B(e.create(-15.75, -9)),
            3: new B(e.create(-15.75, 9))
        }
    }
      , Y = U
      , pn = {
        none: {
            keyframes: [],
            effects: []
        },
        fists: {
            keyframes: [X(0, {
                1: new B(e.create(14, 12.25))
            }), X(Y.fists.attack.damageTimes[0], {
                1: new B(e.create(29.75, 1.75))
            }), X(Y.fists.attack.cooldownTime, {
                1: new B(e.create(14, 12.25))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.fists.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        cut: {
            keyframes: [X(0, {
                1: new B(e.create(14, 12.25))
            }), X(Y.fists.attack.damageTimes[0] * .25, {
                1: new B(e.create(14, 12.25)).rotate(-Math.PI * .35)
            }), X(Y.fists.attack.damageTimes[0] * 1.25, {
                1: new B(e.create(14, 12.25)).rotate(Math.PI * .35)
            }), X(Y.fists.attack.cooldownTime, {
                1: new B(e.create(14, 12.25))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.fists.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        cutReverse: {
            keyframes: [X(0, {
                1: new B(e.create(1, 17.75))
            }), X(Y.fists.attack.damageTimes[0] * .4, {
                1: new B(e.create(25, 6.25)).rotate(Math.PI * .3)
            }), X(Y.fists.attack.damageTimes[0] * 1.4, {
                1: new B(e.create(25, 6.25)).rotate(-Math.PI * .5)
            }), X(Y.fists.attack.cooldownTime, {
                1: new B(e.create(1, 17.75))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.fists.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        thrust: {
            keyframes: [X(0, {
                1: new B(e.create(14, 12.25))
            }), X(Y.fists.attack.damageTimes[0] * .4, {
                1: new B(e.create(5, 12.25)).rotate(Math.PI * .1)
            }), X(Y.fists.attack.damageTimes[0] * 1.4, {
                1: new B(e.create(25, 6.25)).rotate(-Math.PI * 0)
            }), X(Y.fists.attack.cooldownTime, {
                1: new B(e.create(14, 12.25))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.fists.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        slash: {
            keyframes: [X(0, {
                0: new B(e.create(18, -8.25)),
                1: new B(e.create(6, 20.25))
            }), X(Y.fists.attack.damageTimes[0], {
                0: new B(e.create(6, -22.25)),
                1: new B(e.create(6, 20.25)).rotate(-Math.PI * .6)
            }), X(Y.fists.attack.cooldownTime, {
                0: new B(e.create(18, -8.25)),
                1: new B(e.create(6, 20.25)).rotate(0)
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.fists.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        hook: {
            keyframes: [X(0, {
                1: new B(e.create(14, 12.25))
            }), X(Y.hook.attack.damageTimes[0] * .25, {
                1: new B(e.create(14, 12.25)).rotate(Math.PI * .1)
            }), X(Y.hook.attack.damageTimes[0], {
                1: new B(e.create(24, 1.75))
            }), X(Y.hook.attack.damageTimes[0] + .05, {
                1: new B(e.create(14, 12.25)).rotate(Math.PI * -.3)
            }), X(Y.hook.attack.damageTimes[0] + .1, {
                1: new B(e.create(14, 12.25))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.hook.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        pan: {
            keyframes: [X(0, {
                1: new B(e.create(14, 12.25))
            }), X(.15, {
                1: new B(e.create(22, -8.25)).rotate(-Math.PI * .2)
            }), X(.25, {
                1: new B(e.create(28, -8.25)).rotate(Math.PI * .5)
            }), X(.55, {
                1: new B(e.create(14, 12.25))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.pan.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        axeSwing: {
            keyframes: [X(0, {
                0: new B(e.create(10.5, -14.25)),
                1: new B(e.create(18, 6.25))
            }), X(Y.woodaxe.attack.damageTimes[0] * .4, {
                0: new B(e.create(9, -14.25)).rotate(Math.PI * .4),
                1: new B(e.create(18, 6.25)).rotate(Math.PI * .4)
            }), X(Y.woodaxe.attack.damageTimes[0], {
                0: new B(e.create(9, -14.25)).rotate(-Math.PI * .4),
                1: new B(e.create(18, 6.25)).rotate(-Math.PI * .4)
            }), X(Y.woodaxe.attack.cooldownTime, {
                0: new B(e.create(10.5, -14.25)),
                1: new B(e.create(18, 6.25))
            })],
            effects: [me(Y.woodaxe.attack.damageTimes[0], "animPlaySound", {
                sound: "swing"
            }), me(Y.woodaxe.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        hammerSwing: {
            keyframes: [X(0, {
                0: new B(e.create(10.5, -14.25)),
                1: new B(e.create(18, 6.25))
            }), X(Y.stonehammer.attack.damageTimes[0] * .4, {
                0: new B(e.create(9, -14.25)).rotate(Math.PI * .4),
                1: new B(e.create(18, 6.25)).rotate(Math.PI * .4)
            }), X(Y.stonehammer.attack.damageTimes[0], {
                0: new B(e.create(9, -14.25)).rotate(-Math.PI * .4),
                1: new B(e.create(18, 6.25)).rotate(-Math.PI * .4)
            }), X(Y.stonehammer.attack.cooldownTime, {
                0: new B(e.create(10.5, -14.25)),
                1: new B(e.create(18, 6.25))
            })],
            effects: [me(Y.stonehammer.attack.damageTimes[0], "animPlaySound", {
                sound: "swing"
            }), me(Y.stonehammer.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        katanaSwing: {
            keyframes: [X(0, {
                0: new B(e.create(8.5, 13.25)),
                1: new B(e.create(-3, 17.75))
            }), X(Y.katana.attack.damageTimes[0] * .3, {
                0: new B(e.create(8.5, 13.25)).rotate(Math.PI * .2),
                1: new B(e.create(-3, 17.75)).rotate(Math.PI * .2)
            }), X(Y.katana.attack.damageTimes[0] * .9, {
                0: new B(e.create(8.5, 13.25)).rotate(-Math.PI * 1.2),
                1: new B(e.create(-3, 17.75)).rotate(-Math.PI * 1.2)
            }), X(Y.katana.attack.cooldownTime, {
                0: new B(e.create(8.5, 13.25)),
                1: new B(e.create(-3, 17.75))
            })],
            effects: [me(Y.katana.attack.damageTimes[0], "animPlaySound", {
                sound: "swing"
            }), me(Y.katana.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        naginataSwing: {
            keyframes: [X(0, {
                0: new B(e.create(19, -7.25)),
                1: new B(e.create(8.5, 24.25))
            }), X(Y.naginata.attack.damageTimes[0] * .3, {
                0: new B(e.create(19, -7.25)).rotate(Math.PI * .3),
                1: new B(e.create(8.5, 24.25)).rotate(Math.PI * .3)
            }), X(Y.naginata.attack.damageTimes[0] * .9, {
                0: new B(e.create(19, -7.25)).rotate(-Math.PI * .85),
                1: new B(e.create(8.5, 24.25)).rotate(-Math.PI * .85)
            }), X(Y.naginata.attack.cooldownTime, {
                0: new B(e.create(19, -7.25)),
                1: new B(e.create(8.5, 24.25))
            })],
            effects: [me(Y.naginata.attack.damageTimes[0], "animPlaySound", {
                sound: "swing"
            }), me(Y.naginata.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        sawSwing: {
            keyframes: [X(0, {
                1: new B(e.create(1, 17.75))
            }), X(Y.saw.attack.damageTimes[0] * .4, {
                1: new B(e.create(25, 6.25)).rotate(Math.PI * .3)
            }), X(Y.saw.attack.damageTimes[0], {
                1: new B(e.create(25, 6.25)).rotate(-Math.PI * .3)
            }), X(Y.saw.attack.damageTimes[1] - .1, {
                1: new B(e.create(25, 17.75)).rotate(-Math.PI * .25)
            }), X(Y.saw.attack.damageTimes[1] * .6, {
                1: new B(e.create(-36, 7.75)).rotate(-Math.PI * .25)
            }), X(Y.saw.attack.damageTimes[1] + .2, {
                1: new B(e.create(1, 17.75))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(.4, "animPlaySound", {
                sound: "swing"
            }), me(Y.saw.attack.damageTimes[0], "animMeleeCollision", {}), me(Y.saw.attack.damageTimes[1], "animMeleeCollision", {
                playerHit: "playerHit2"
            })]
        },
        cutReverseShort: {
            keyframes: [X(0, {
                1: new B(e.create(1, 17.75))
            }), X(Y.saw.attack.damageTimes[0] * .4, {
                1: new B(e.create(25, 6.25)).rotate(Math.PI * .3)
            }), X(Y.saw.attack.damageTimes[0], {
                1: new B(e.create(25, 6.25)).rotate(-Math.PI * .3)
            }), X(Y.fists.attack.cooldownTime, {
                1: new B(e.create(14, 17.75))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "swing"
            }), me(Y.fists.attack.damageTimes[0], "animMeleeCollision", {})]
        },
        cook: {
            keyframes: [X(0, {
                0: new B(e.create(15.75, -9.625)),
                1: new B(e.create(15.75, 9.625))
            }), X(.1, {
                0: new B(e.create(14, -1.75)),
                1: new B(e.create(14, 1.75))
            }), X(.3, {
                0: new B(e.create(14, -1.75)),
                1: new B(e.create(14, 1.75))
            }), X(.4, {
                0: new B(e.create(22.75, -1.75)),
                1: new B(e.create(1.75, 14))
            }), X(99999, {
                0: new B(e.create(22.75, -1.75)),
                1: new B(e.create(1.75, 14))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "pullPin"
            }), me(.1, "animSetThrowableState", {
                state: "cook"
            })]
        },
        throw: {
            keyframes: [X(0, {
                0: new B(e.create(22.75, -1.75)),
                1: new B(e.create(1.75, 14.175))
            }), X(.15, {
                0: new B(e.create(5.25, -15.75)),
                1: new B(e.create(29.75, 1.75))
            }), X(.15 + F.player.throwTime, {
                0: new B(e.create(15.75, -9.625)),
                1: new B(e.create(15.75, 9.625))
            })],
            effects: [me(0, "animPlaySound", {
                sound: "throwing"
            }), me(0, "animSetThrowableState", {
                state: "throwing"
            }), me(0, "animThrowableParticles", {})]
        },
        crawl_forward: {
            keyframes: [X(0, {
                0: new B(e.create(14, -12.25)),
                2: new B(e.create(-15.75, -9))
            }), X(F.player.crawlTime * .33, {
                0: new B(e.create(19.25, -10.5)),
                2: new B(e.create(-20.25, -9))
            }), X(F.player.crawlTime * .66, {
                0: new B(e.create(5.25, -15.75)),
                2: new B(e.create(-11.25, -9))
            }), X(F.player.crawlTime * 1, {
                0: new B(e.create(14, -12.25)),
                2: new B(e.create(-15.75, -9))
            })],
            effects: []
        },
        crawl_backward: {
            keyframes: [X(0, {
                0: new B(e.create(14, -12.25)),
                2: new B(e.create(-15.75, -9))
            }), X(F.player.crawlTime * .33, {
                0: new B(e.create(5.25, -15.75)),
                2: new B(e.create(-11.25, -9))
            }), X(F.player.crawlTime * .66, {
                0: new B(e.create(19.25, -10.5)),
                2: new B(e.create(-20.25, -9))
            }), X(F.player.crawlTime * 1, {
                0: new B(e.create(14, -12.25)),
                2: new B(e.create(-15.75, -9))
            })],
            effects: []
        },
        revive: {
            keyframes: [X(0, {
                0: new B(e.create(14, -12.25)),
                1: new B(e.create(14, 12.25))
            }), X(.2, {
                0: new B(e.create(24.5, -8.75)),
                1: new B(e.create(5.25, 21))
            }), X(.2 + F.player.reviveDuration, {
                0: new B(e.create(24.5, -8.75)),
                1: new B(e.create(5.25, 21))
            })],
            effects: []
        }
    }
      , vo = {
        "proj-frag-nopin-01.img": "proj-frag-nopin-02.img",
        "proj-frag-nopin-nolever-01.img": "proj-frag-nopin-nolever-02.img",
        "proj-frag-pin-01.img": "proj-frag-pin-02.img",
        "proj-mirv-mini-01.img": "proj-mirv-mini-02.img"
    };
    class un {
        __id;
        __type;
        active;
        isNew;
        container = new ue;
        trail = he.from("player-bullet-trail-02.img");
        sprite = new he;
        strobeSprite = null;
        layer;
        type;
        rad;
        pos;
        posOld;
        visualPosOld;
        posInterpTicker;
        posZ;
        posZOld;
        dir;
        imgScale;
        rot;
        rotVel;
        rotDrag;
        velZ;
        grounded;
        inWater;
        lastSoundObjId;
        playHitSfx;
        alwaysRenderOntop;
        strobeScale;
        strobeScaleMax;
        strobeTicker;
        strobeDir;
        strobeSpeed;
        constructor() {
            this.container.visible = !1,
            this.trail.anchor.set(1, .5),
            this.trail.scale.set(1, 1),
            this.trail.visible = !1,
            this.container.addChild(this.trail),
            this.sprite.anchor.set(.5, .5),
            this.container.addChild(this.sprite)
        }
        cGxERQ() {
            this.visualPosOld = e.create(0, 0),
            this.posInterpTicker = 0
        }
        AlR() {
            this.container.visible = !1,
            this.strobeSprite && (this.strobeSprite.visible = !1)
        }
        kPP(t, a, i, o) {
            if (a) {
                const s = U[t.type];
                this.layer = t.layer,
                this.type = t.type,
                this.rad = s.rad * .5
            }
            if (this.posOld = i ? e.copy(t.pos) : e.copy(this.pos),
            this.posZOld = i ? t.posZ : this.posZ,
            this.pos = e.copy(t.pos),
            e.eq(t.pos, this.visualPosOld) || (this.visualPosOld = e.copy(this.posOld),
            this.posInterpTicker = 0),
            this.posZ = t.posZ,
            this.dir = e.copy(t.dir),
            i) {
                const s = U[t.type]
                  , l = s.worldImg;
                this.imgScale = l.scale,
                this.rot = 0,
                this.rotVel = s.throwPhysics.spinVel,
                s.throwPhysics.randomizeSpinDir && Math.random() < .5 && (this.rotVel *= -1),
                this.rotDrag = s.throwPhysics.spinDrag * f.random(1, 2),
                this.velZ = 0,
                this.grounded = !1,
                this.inWater = !1,
                this.lastSoundObjId = 0,
                this.playHitSfx = !s.explodeOnImpact,
                this.alwaysRenderOntop = !1;
                let c = !0;
                if (this.type == "bomb_iron") {
                    this.alwaysRenderOntop = !0;
                    const h = n.createCircle(this.pos, .5);
                    o.map.insideBuildingCeiling(h, !0) && (c = !1)
                }
                let m = l.sprite;
                o.map.mapDef.gameMode.spookyKillSounds && (m = vo[m] || m),
                this.sprite.texture = K.from(m),
                this.sprite.tint = l.tint,
                this.sprite.alpha = 1,
                this.container.visible = c,
                t.type == "strobe" && (this.strobeSprite || (this.strobeSprite = new he,
                this.strobeSprite.texture = K.from("part-strobe-01.img"),
                this.strobeSprite.anchor.set(.5, .5),
                this.container.addChild(this.strobeSprite)),
                this.strobeSprite.scale.set(0, 0),
                this.strobeSprite.visible = !0,
                this.strobeScale = 0,
                this.strobeScaleMax = 12,
                this.strobeTicker = 0,
                this.strobeDir = 1,
                this.strobeSpeed = 1.25)
            }
        }
    }
    const hn = {
        grass: "frag_grass",
        sand: "frag_sand",
        water: "frag_water"
    };
    class dn {
        projectilePool = new Ke(un);
        lCPzxG(t, a, i, o, s, l, c) {
            const m = this.projectilePool.HWU();
            for (let h = 0; h < m.length; h++) {
                const u = m[h];
                if (u.active) {
                    const g = U[u.type];
                    let w = u.rotDrag;
                    u.inWater && (w *= 3),
                    u.rotVel *= 1 / (1 + t * w),
                    u.rot += u.rotVel * t;
                    const y = {
                        obj: null,
                        pen: 0
                    }
                      , _ = {
                        obj: null,
                        pen: 0
                    }
                      , S = n.createCircle(u.pos, u.rad)
                      , b = s.CcKuBx.HWU();
                    for (let Q = 0; Q < b.length; Q++) {
                        const W = b[Q];
                        if (W.active && !W.dead && f.sameLayer(W.layer, u.layer)) {
                            const G = n.intersect(W.collider, S);
                            if (G) {
                                const ee = W.height > u.posZ ? y : _;
                                G.pen > ee.pen && (!ee.obj || ee.obj.height <= W.height) && (ee.obj = W,
                                ee.pen = G.pen)
                            }
                        }
                    }
                    const A = e.div(e.sub(u.pos, u.posOld), t)
                      , P = e.length(A);
                    if (y.obj && y.obj.__id != u.lastSoundObjId && P > 7.5 && (u.lastSoundObjId = y.obj.__id,
                    u.playHitSfx)) {
                        const Q = e.mul(e.normalizeSafe(A, e.create(1, 0)), -1)
                          , W = de[y.obj.type];
                        ca(W.hitParticle, W.sound.bullet, u.pos, Q, u.layer, a, i)
                    }
                    const T = s.getGroundSurface(u.pos, u.layer);
                    u.posZ <= .01 && (!u.inWater && T.type == "water" && a.addRippleParticle(u.pos, u.layer, T.data.rippleColor),
                    u.inWater = T.type == "water");
                    const I = u.velZ;
                    if (u.velZ = (u.posZ - u.posZOld) / t,
                    !u.isNew && !u.grounded && u.velZ >= 0 && I < 0) {
                        const Q = {
                            fn: "playGroup",
                            channel: "hits",
                            name: ""
                        };
                        if (_.obj) {
                            if (u.lastSoundObjId != _.obj.__id) {
                                u.lastSoundObjId = _.obj.__id;
                                const W = de[_.obj.type];
                                Q.name = W.sound.bullet
                            }
                        } else
                            u.grounded = !0,
                            Q.name = hn[T.type],
                            Q.name === void 0 && (Q.name = `footstep_${T.type}`,
                            Q.fn = "playGroup",
                            Q.channel = "sfx");
                        Q.name && u.playHitSfx && i[Q.fn](Q.name, {
                            channel: Q.channel,
                            soundPos: u.pos,
                            layer: u.layer,
                            filter: "muffled"
                        })
                    }
                    if (u.type == "strobe" && u.strobeSprite && (u.strobeTicker = k.clamp(u.strobeTicker + t * u.strobeDir * u.strobeSpeed, 0, 1),
                    u.strobeScale = k.easeInExpo(u.strobeTicker) * u.strobeScaleMax,
                    u.strobeSprite.scale.set(u.strobeScale, u.strobeScale),
                    (u.strobeScale >= u.strobeScaleMax || u.strobeTicker <= 0) && (u.strobeDir *= -1)),
                    u.sprite.rotation = u.rot,
                    u.sprite.alpha = u.inWater ? .3 : 1,
                    g.trail) {
                        const Q = e.length(A)
                          , W = k.remap(Q, g.throwPhysics.speed * .25, g.throwPhysics.speed * 1, 0, 1) * k.remap(u.posZ, .1, F.projectile.maxHeight * .5, 0, 1);
                        u.trail.scale.set(g.trail.maxLength * W, g.trail.width),
                        u.trail.rotation = -Math.atan2(u.dir.y, u.dir.x),
                        u.trail.tint = g.trail.tint,
                        u.trail.alpha = g.trail.alpha * W,
                        u.trail.visible = !0
                    } else
                        u.trail.visible = !1;
                    let C = u.layer
                      , q = u.posZ < .25 ? 14 : 25;
                    const E = n.createCircle(u.pos, u.rad * 3)
                      , L = s.insideStructureStairs(E)
                      , M = s.insideStructureMask(E);
                    u.posZ >= .25 && L && (u.layer & 1) == (o.layer & 1) && (!M || !(o.layer & 2)) && (C |= 2,
                    q += 100),
                    u.alwaysRenderOntop && o.layer == 0 && (q = 1e3,
                    C |= 2),
                    l.addPIXIObj(u.container, C, q);
                    const O = u.imgScale * k.remap(u.posZ, 0, F.projectile.maxHeight, 1, 4.75);
                    let H = u.pos;
                    if (c.mAXkNL) {
                        u.posInterpTicker += t;
                        const Q = k.clamp(u.posInterpTicker / c.jAGEt, 0, 1);
                        H = e.lerp(Q, u.visualPosOld, u.pos)
                    }
                    const N = c.alZrl(H)
                      , $ = c.oQvD(O);
                    u.container.position.set(N.x, N.y),
                    u.container.scale.set($, $)
                }
            }
        }
    }
    function Io(r, t, a, i, o, s, l, c) {
        const m = U[r];
        if (m) {
            let h = e.rotate(o, t);
            m.particle.shellForward && (h = e.mul(o, m.particle.shellForward));
            let u = e.mul(h, a * 9.5);
            u = e.rotate(u, (Math.random() - .5) * Math.PI / 3);
            let g = e.add(i, e.mul(o, F.player.radius + m.particle.shellOffset));
            m.particle.shellOffsetY && (g = e.add(g, e.mul(h, m.particle.shellOffsetY))),
            m.particle.shellReverse && (u = e.mul(u, -1)),
            c.addParticle(m.ammo, s, g, u, m.particle.shellScale, -Math.atan2(h.y, h.x), null, l)
        }
    }
    class gn {
        shots = [];
        addShot(t) {
            let a = null;
            for (let s = 0; s < this.shots.length; s++)
                if (!this.shots[s].active) {
                    a = this.shots[s];
                    break
                }
            a || (a = {},
            this.shots.push(a));
            const i = t.shotSourceType
              , o = U[i];
            a.active = !0,
            a.pos = e.copy(t.pos),
            a.layer = t.layer,
            a.playerId = t.playerId,
            a.weaponType = i,
            a.offhand = t.shotOffhand,
            a.lastShot = t.lastShot,
            a.shotAlt = t.shotAlt,
            a.ticker = 0,
            a.pullDelay = o.pullDelay !== void 0 ? o.pullDelay * .45 : 0,
            a.splinter = t.splinter,
            a.trailSaturated = t.trailSaturated
        }
        lCPzxG(t, a, i, o, s) {
            for (let l = 0; l < this.shots.length; l++) {
                const c = this.shots[l];
                if (c.active) {
                    const m = U[c.weaponType];
                    if (c.ticker == 0) {
                        const h = i.getPlayerById(c.playerId);
                        let u = m.sound.shoot;
                        if (m.sound.shootTeam) {
                            const w = i.getPlayerInfo(c.playerId).teamId;
                            m.sound.shootTeam[w] && (u = m.sound.shootTeam[w])
                        }
                        c.lastShot && m.sound.shootLast && (u = m.sound.shootLast),
                        c.shotAlt && m.sound.shootAlt && (u = m.sound.shootAlt);
                        let g = 0;
                        if (c.trailSaturated && !m.ignoreDetune ? g = 300 : c.splinter && (g = -300),
                        s.playSound(u, {
                            channel: c.playerId == a ? "activePlayer" : "otherPlayers",
                            soundPos: c.pos,
                            layer: h ? h.layer : c.layer,
                            filter: "muffled",
                            fallOff: m.sound.fallOff ? m.sound.fallOff : 0,
                            detune: g,
                            volumeScale: c.splinter ? .75 : 1
                        }),
                        c.splinter && s.playSound(u, {
                            channel: c.playerId == a ? "activePlayer" : "otherPlayers",
                            soundPos: c.pos,
                            layer: h ? h.layer : c.layer,
                            filter: "muffled",
                            fallOff: m.sound.fallOff ? m.sound.fallOff : 0,
                            detune: 1200,
                            delay: 30,
                            volumeScale: .75
                        }),
                        h) {
                            if (h.__id == a && m.fireMode == "single" && m.pullDelay) {
                                const S = h.sUpm.kgyV[h.sUpm.nUn].ammo > 0 ? m.sound.cycle : m.sound.pull;
                                s.stopSound(h.cycleSoundInstance),
                                h.cycleSoundInstance = s.playSound(S)
                            }
                            const w = c.offhand || !m.isDual
                              , y = !c.offhand || !m.isDual;
                            h.addRecoil(m.worldImg.recoil, w, y),
                            h.fireDelay = m.fireDelay
                        }
                    }
                    if (c.ticker += t,
                    c.ticker >= c.pullDelay) {
                        const h = i.getPlayerById(c.playerId);
                        h && !h.tuWDuv.veYmO && h.tuWDuv.bmrW == c.weaponType && m.caseTiming == "shoot" && Io(c.weaponType, Math.PI / 2 * -1, 1, h.tuWDuv.XafO, h.tuWDuv.HIXJp, h.renderLayer, h.renderZOrd + 1, o),
                        c.active = !1
                    }
                }
            }
        }
    }
    const zi = .1;
    function fn(r, t) {
        if (r.length != t.length)
            return !1;
        for (let a = 0; a < r.length; a++)
            if (r[a].type != t[a].type)
                return !1;
        return !0
    }
    function yn() {
        const r = {
            fontFamily: "Arial",
            fontWeight: "bold",
            fontSize: D.pixelRatio > 1 ? 30 : 22,
            align: "center",
            fill: 65535,
            stroke: 0,
            strokeThickness: 0,
            dropShadow: !0,
            dropShadowColor: "#000000",
            dropShadowBlur: 1,
            dropShadowAngle: Math.PI / 3,
            dropShadowDistance: 1
        }
          , t = new Nt("",r);
        return t.anchor.set(.5, .5),
        t.scale.set(.5, .5),
        t.position.set(0, 30),
        t.visible = !1,
        t
    }
    function _e() {
        const r = new he;
        return r.texture = K.EMPTY,
        r.anchor.set(.5, .5),
        r.scale.set(1, 1),
        r.tint = 16777215,
        r.visible = !1,
        r
    }
    const wn = Object.values(F.scopeZoomRadius.desktop)
      , _n = Object.values(F.scopeZoomRadius.mobile);
    class vi {
        gunBarrel = _e();
        gunMag = _e();
        container = new ue;
        magTop = !1;
        constructor() {
            this.container.addChild(this.gunBarrel),
            this.container.addChild(this.gunMag),
            this.container.rotation = Math.PI * .5,
            this.container.visible = !1
        }
        setVisible(t) {
            this.container.visible = t
        }
        setType(t, a) {
            const i = U[t]
              , o = i.worldImg;
            if (this.gunBarrel.texture = K.from(o.sprite),
            this.gunBarrel.anchor.set(.5, 1),
            this.gunBarrel.position.set(0, 0),
            this.gunBarrel.scale.set(o.scale.x * .5 / a, o.scale.y * .5 / a),
            this.gunBarrel.tint = o.tint,
            this.gunBarrel.visible = !0,
            o.magImg) {
                const l = o.magImg;
                this.gunMag.texture = K.from(l.sprite),
                this.gunMag.anchor.set(.5, .5),
                this.gunMag.position.set(l.pos.x / a, l.pos.y / a),
                this.gunMag.scale.set(.25 / a, .25 / a),
                this.gunMag.tint = 16777215,
                this.gunMag.visible = !0,
                l.top ? this.container.addChild(this.gunMag) : this.container.addChildAt(this.gunMag, 0)
            } else
                this.gunMag.visible = !1;
            this.magTop = o.magImg?.top;
            const s = i.isDual ? e.create(-5.95, 0) : e.create(-4.25, -1.75);
            o.gunOffset && (s.x += o.gunOffset.x,
            s.y += o.gunOffset.y),
            this.container.position.set(s.x, s.y)
        }
    }
    class bn {
        __id;
        __type;
        active;
        bodySprite = _e();
        chestSprite = _e();
        flakSprite = _e();
        steelskinSprite = _e();
        helmetSprite = _e();
        visorSprite = _e();
        backpackSprite = _e();
        handLSprite = _e();
        handRSprite = _e();
        footLSprite = _e();
        footRSprite = _e();
        hipSprite = _e();
        gunLSprites = new vi;
        gunRSprites = new vi;
        objectLSprite = _e();
        objectRSprite = _e();
        meleeSprite = _e();
        bodySubmergeSprite = _e();
        handLSubmergeSprite = _e();
        handRSubmergeSprite = _e();
        footLSubmergeSprite = _e();
        footRSubmergeSprite = _e();
        bodyEffectSprite = _e();
        patchSprite = _e();
        handLContainer = new ue;
        handRContainer = new ue;
        footLContainer = new ue;
        footRContainer = new ue;
        bodyContainer = new ue;
        container = new ue;
        nameText = yn();
        auraContainer = new ue;
        auraCircle = _e();
        bones = [];
        anim = {
            type: Se.None,
            data: {},
            seq: -1,
            ticker: 0,
            bones: []
        };
        perks = [];
        perkTypes = [];
        perksDirty = !1;
        surface = null;
        wasInWater = !1;
        weapTypeOld = "";
        visualsDirty = !1;
        stepDistance = 0;
        zoomFast = !1;
        playedDryFire = !1;
        lastSwapIdx = -1;
        hasteSeq = -1;
        cycleSoundInstance = null;
        actionSoundInstance = null;
        useItemEmitter = null;
        hasteEmitter = null;
        passiveHealEmitter = null;
        downed = !1;
        wasDowned = !1;
        bleedTicker = 0;
        submersion = 0;
        gunRecoilL = 0;
        gunRecoilR = 0;
        fireDelay = 0;
        throwableState = "equip";
        lastThrowablePickupSfxTicker = 0;
        isNearDoorError = !1;
        doorErrorTicker = 0;
        noCeilingRevealTicker = 0;
        frozenTicker = 0;
        updateFrozenImage = !0;
        viewAabb = {
            min: e.create(0, 0),
            max: e.create(0, 0)
        };
        auraViewFade = 0;
        auraPulseTicker = 0;
        auraPulseDir = 1;
        renderLayer = 0;
        renderZOrd = 18;
        renderZIdx = 0;
        QBughF;
        tuWDuv;
        sUpm;
        throwableStatePrev;
        AQGS = F.player.radius;
        YClq;
        XafO = e.create(0, 0);
        WIlWg = e.create(0, 0);
        HIXJp = e.create(1, 0);
        bOkc = e.create(1, 0);
        eCcoC = e.create(0, 0);
        Cdu = e.create(0, 0);
        bba = e.create(0, 0);
        hNgE = e.create(0, 0);
        posInterpTicker = 0;
        dirInterpolationTicker = 0;
        layer = 0;
        isLoadoutAvatar = !1;
        playActionStartSfx = !0;
        isNew;
        wasInsideObstacle;
        insideObstacleType;
        lastInsideObstacleTime;
        dead;
        gunSwitchCooldown;
        constructor() {
            this.bodySprite.addChild(this.bodySubmergeSprite),
            this.handLSprite.addChild(this.handLSubmergeSprite),
            this.handRSprite.addChild(this.handRSubmergeSprite),
            this.footLSprite.addChild(this.footLSubmergeSprite),
            this.footRSprite.addChild(this.footRSubmergeSprite),
            this.handLContainer.addChild(this.gunLSprites.container),
            this.handLContainer.addChild(this.handLSprite),
            this.handLContainer.addChild(this.objectLSprite),
            this.handRContainer.addChild(this.gunRSprites.container),
            this.handRContainer.addChild(this.meleeSprite),
            this.handRContainer.addChild(this.handRSprite),
            this.handRContainer.addChild(this.objectRSprite),
            this.footLContainer.addChild(this.footLSprite),
            this.footRContainer.addChild(this.footRSprite),
            this.bodyContainer.addChild(this.footLContainer),
            this.bodyContainer.addChild(this.footRContainer),
            this.bodyContainer.addChild(this.backpackSprite),
            this.bodyContainer.addChild(this.bodySprite),
            this.bodyContainer.addChild(this.chestSprite),
            this.bodyContainer.addChild(this.flakSprite),
            this.bodyContainer.addChild(this.steelskinSprite),
            this.bodyContainer.addChild(this.hipSprite),
            this.bodyContainer.addChild(this.patchSprite),
            this.bodyContainer.addChild(this.bodyEffectSprite),
            this.bodyContainer.addChild(this.handLContainer),
            this.bodyContainer.addChild(this.handRContainer),
            this.bodyContainer.addChild(this.visorSprite),
            this.bodyContainer.addChild(this.helmetSprite),
            this.container.addChild(this.bodyContainer),
            this.container.addChild(this.nameText),
            this.auraContainer.addChild(this.auraCircle),
            this.initSubmergeSprites();
            const t = Object.keys(ut).length;
            for (let a = 0; a < t; a++)
                this.bones.push(new B),
                this.anim.bones.push({
                    weight: 0,
                    pose: new B
                });
            this.throwableStatePrev = this.throwableState,
            this.YClq = this.AQGS,
            this.eCcoC = e.create(0, 0),
            this.Cdu = e.create(0, 0),
            this.bba = e.create(0, 0),
            this.hNgE = e.create(0, 0),
            this.posInterpTicker = 0,
            this.dirInterpolationTicker = 0
        }
        cGxERQ() {
            this.isNew = !1,
            this.wasInsideObstacle = !1,
            this.insideObstacleType = "",
            this.lastInsideObstacleTime = 0,
            this.lastSwapIdx = -1,
            this.hasteSeq = -1,
            this.actionSoundInstance = null,
            this.QBughF = {
                type: ge.None,
                seq: -1,
                seqOld: -1,
                item: "",
                skin: "",
                targetId: 0,
                time: 0,
                duration: 0,
                throttleCount: 0,
                throttleTicker: 0
            },
            this.tuWDuv = {
                XafO: e.create(0, 0),
                HIXJp: e.create(1, 0),
                FPkARU: "",
                pFAn: "",
                Mkgknh: "",
                FUoWEd: "",
                bmrW: "fists",
                HuWH: 0,
                veYmO: !1,
                SINId: !1,
                eazWr: Se.None,
                YCudD: 0,
                zTTm: ge.None,
                uCIr: 0,
                bOPa: !1,
                VAvYs: !1,
                cOtF: !1,
                EFqwdz: 0,
                iTow: tt.None,
                IDAA: 0,
                lCJgV: "",
                Sls: 1,
                COS: "",
                Rwf: []
            },
            this.sUpm = {
                hBh: F.player.health,
                JTYv: 0,
                HRgEki: 0,
                gMB: "",
                nUn: 0,
                MZQxFy: {},
                kgyV: [],
                TdSuL: 0
            },
            this.playAnim(Se.None, -1)
        }
        AlR() {
            this.container.visible = !1,
            this.auraContainer.visible = !1,
            this.useItemEmitter && (this.useItemEmitter.stop(),
            this.useItemEmitter = null),
            this.hasteEmitter && (this.hasteEmitter.stop(),
            this.hasteEmitter = null),
            this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
            this.passiveHealEmitter = null)
        }
        kPP(t, a, i, o) {
            e.eq(t.pos, this.Cdu) || (this.Cdu = e.copy(i ? t.pos : this.XafO),
            this.posInterpTicker = 0),
            e.eq(t.dir, this.hNgE) || (this.hNgE = e.copy(i ? t.dir : this.HIXJp),
            this.dirInterpolationTicker = 0),
            this.tuWDuv.XafO = e.copy(t.pos),
            this.tuWDuv.HIXJp = e.copy(t.dir),
            a && (this.tuWDuv.FPkARU = t.outfit,
            this.tuWDuv.pFAn = t.backpack,
            this.tuWDuv.Mkgknh = t.helmet,
            this.tuWDuv.FUoWEd = t.chest,
            this.tuWDuv.bmrW = t.activeWeapon,
            this.tuWDuv.HuWH = t.layer,
            this.tuWDuv.veYmO = t.dead,
            this.tuWDuv.SINId = t.downed,
            this.tuWDuv.eazWr = t.animType,
            this.tuWDuv.YCudD = t.animSeq,
            this.tuWDuv.zTTm = t.actionType,
            this.tuWDuv.uCIr = t.actionSeq,
            this.tuWDuv.bOPa = t.wearingPan,
            this.tuWDuv.VAvYs = t.healEffect,
            this.tuWDuv.cOtF = t.frozen,
            this.tuWDuv.EFqwdz = t.frozenOri,
            this.tuWDuv.iTow = t.hasteType,
            this.tuWDuv.IDAA = t.hasteSeq,
            this.tuWDuv.lCJgV = t.actionItem,
            this.tuWDuv.Sls = t.scale,
            this.tuWDuv.COS = t.role,
            (i || !fn(this.tuWDuv.Rwf, t.perks)) && (this.perksDirty = !0),
            this.tuWDuv.Rwf = t.perks,
            t.animSeq != this.anim.seq && this.playAnim(t.animType, t.animSeq),
            this.QBughF.type = t.actionType,
            this.QBughF.seq = t.actionSeq,
            this.QBughF.item = t.actionItem,
            this.visualsDirty = !0),
            i && (this.isNew = !0,
            this.renderLayer = this.tuWDuv.HuWH,
            this.renderZOrd = 18,
            this.renderZIdx = this.__id)
        }
        cqhV(t, a) {
            const i = this.sUpm.gMB;
            if (t.healthDirty && (this.sUpm.hBh = t.health),
            t.boostDirty && (this.sUpm.HRgEki = t.boost),
            t.zoomDirty && (this.sUpm.JTYv = t.zoom,
            this.zoomFast = !1),
            t.actionDirty && (this.QBughF.time = t.action.time,
            this.QBughF.duration = t.action.duration,
            this.QBughF.targetId = t.action.targetId),
            t.inventoryDirty) {
                this.sUpm.gMB = t.scope,
                this.sUpm.MZQxFy = {};
                for (const o in F.bagSizes)
                    F.bagSizes.hasOwnProperty(o) && (this.sUpm.MZQxFy[o] = t.inventory[o])
            }
            if (t.weapsDirty) {
                this.sUpm.nUn = t.curWeapIdx,
                this.sUpm.kgyV = [];
                for (let o = 0; o < F.WeaponSlot.Count; o++) {
                    const s = {
                        type: t.weapons[o].type,
                        ammo: t.weapons[o].ammo
                    };
                    this.sUpm.kgyV.push(s)
                }
            }
            t.spectatorCountDirty && (this.sUpm.TdSuL = t.spectatorCount),
            this.sUpm.gMB != i && (this.zoomFast = !0)
        }
        FKT() {
            let t = this.sUpm.JTYv;
            if (D.mobile) {
                const a = wn.indexOf(t);
                a !== -1 && (t = _n[a])
            }
            return t
        }
        gWq() {
            return this.tuWDuv.Mkgknh ? U[this.tuWDuv.Mkgknh].level : 0
        }
        eUC() {
            return this.tuWDuv.FUoWEd ? U[this.tuWDuv.FUoWEd].level : 0
        }
        dju() {
            return U[this.tuWDuv.pFAn].level
        }
        UeRS() {
            return U[this.tuWDuv.bmrW].type
        }
        tOyQwq(t) {
            return this.sUpm.kgyV[t].type !== ""
        }
        getMeleeCollider() {
            const t = U[this.tuWDuv.bmrW]
              , a = Math.atan2(this.HIXJp.y, this.HIXJp.x)
              , i = e.add(t.attack.offset, e.mul(e.create(1, 0), this.tuWDuv.Sls - 1))
              , o = e.add(this.XafO, e.rotate(i, a))
              , s = t.attack.rad;
            return n.createCircle(o, s, 0)
        }
        WXiuCh() {
            return this.tuWDuv.bOPa || this.tuWDuv.bmrW == "pan" && this.currentAnim() != Se.Melee
        }
        zLcuUl() {
            const t = this.tuWDuv.bOPa ? "unequipped" : "equipped";
            return U.pan.reflectSurface?.[t]
        }
        canInteract(t) {
            return !this.tuWDuv.veYmO && (!t.perkMode || this.tuWDuv.COS)
        }
        yNue(t, a, i) {
            for (let o = 0; o < this.perks.length; o++)
                this.perks[o].isNew = !1;
            if (this.perksDirty) {
                if (t && !a) {
                    for (let s = 0; s < this.tuWDuv.Rwf.length; s++) {
                        const l = this.tuWDuv.Rwf[s];
                        this.perks.findIndex(c => c.type == l.type) === -1 && i.addRareLootMessage(l.type)
                    }
                    for (let s = 0; s < this.perks.length; s++) {
                        const l = this.perks[s];
                        this.tuWDuv.Rwf.findIndex(c => c.type == l.type) === -1 && i.removeRareLootMessage(l.type)
                    }
                }
                const o = [];
                for (let s = 0; s < this.tuWDuv.Rwf.length; s++) {
                    const l = this.tuWDuv.Rwf[s]
                      , c = this.perks.findIndex(m => m.type == l.type) === -1;
                    o.push({
                        type: l.type,
                        droppable: l.droppable,
                        isNew: c && !this.isNew
                    })
                }
                this.perks = o,
                this.perkTypes = [];
                for (let s = 0; s < this.tuWDuv.Rwf.length; s++)
                    this.perkTypes.push(this.tuWDuv.Rwf[s].type);
                this.perksDirty = !1
            }
        }
        BkfiV(t) {
            return this.perkTypes.includes(t)
        }
        lCPzxG(t, a, i, o, s, l, c, m, h, u, g, w, y) {
            const _ = U[this.tuWDuv.bmrW],
                  S = this.__id == u,
                  b = a.getPlayerById(u);
        
            this.WIlWg = e.copy(this.XafO);
            this.bOkc = e.copy(this.HIXJp);
            this.XafO = e.copy(this.tuWDuv.XafO);
            this.HIXJp = e.copy(this.tuWDuv.HIXJp);
        
            if (window.isInterpolation && (Math.abs(this.XafO.x - this.WIlWg.x) <= 10 && Math.abs(this.XafO.y - this.WIlWg.y) <= 10)) {
                // Movement Interpolation
                this.XafO.x += (this.WIlWg.x - this.XafO.x) * 0.5;
                this.XafO.y += (this.WIlWg.y - this.XafO.y) * 0.5;
            }
        
            this.layer = this.tuWDuv.HuWH;
            this.downed = this.tuWDuv.SINId;
            this.AQGS = this.tuWDuv.Sls * F.player.radius;
        
            if (c.mAXkNL) {
                this.posInterpTicker += t;
                const W = k.clamp(this.posInterpTicker / c.jAGEt, 0, 1);
                this.eCcoC = e.lerp(W, this.Cdu, this.XafO);
                this.dirInterpolationTicker += t;
                const G = k.clamp(this.dirInterpolationTicker / c.jAGEt, 0, 1);
                this.bba = e.lerp(G, this.hNgE, this.HIXJp);
            } else {
                this.eCcoC = e.copy(this.XafO);
                this.bba = e.copy(this.HIXJp);
            }
        
            if (!k.eqAbs(this.AQGS, this.YClq)) {
                const W = this.AQGS - this.YClq;
                let G = Math.abs(W) > 1e-4 ? W * t * 6 : W;
                this.isNew && (G = W);
                this.YClq += G;
                this.visualsDirty = !0;
            }    
            if (S) {
                const W = c.QmZuG(e.create(c.llqJG, 0))
                  , G = e.sub(W, c.XafO);
                this.viewAabb.min = e.sub(c.XafO, G),
                this.viewAabb.max = e.add(c.XafO, G)
            }
            this.yNue(S, y, h);
            const A = this.weapTypeOld != this.tuWDuv.bmrW;
            this.weapTypeOld = this.tuWDuv.bmrW,
            this.lastThrowablePickupSfxTicker -= t,
            this.noCeilingRevealTicker -= t;
            const P = a.getPlayerInfo(u).groupId
              , T = a.getPlayerInfo(this.__id)
              , I = T.groupId == P;
            this.nameText.text = T.name,
            this.nameText.visible = !S && I;
            let C = null
              , q = null;
            const E = i.CcKuBx.HWU();
            for (let W = 0; W < E.length; W++) {
                const G = E[W];
                if (G.active && !G.dead && G.layer == this.tuWDuv.HuWH) {
                    if (G.isBush) {
                        const ee = this.AQGS * .25;
                        n.intersectCircle(G.collider, this.XafO, ee) && (C = G)
                    } else if (G.isDoor) {
                        const ee = this.AQGS + .25
                          , fe = e.sub(G.pos, this.XafO)
                          , we = e.rotate(e.create(1, 0), G.rot);
                        n.intersectCircle(G.collider, this.XafO, ee) && (G.door.locked || G.door.openOneWay && e.dot(fe, we) < 0) && (q = G)
                    }
                }
            }
            const L = C != null;
            if (L && (this.insideObstacleType = C?.type),
            this.lastInsideObstacleTime -= t,
            this.wasInsideObstacle != L && this.lastInsideObstacleTime < 0 && !this.isNew) {
                const W = de[this.insideObstacleType];
                this.lastInsideObstacleTime = .2,
                o.playSound(W?.sound.enter, {
                    channel: "sfx",
                    soundPos: this.XafO,
                    fallOff: 1,
                    layer: this.layer,
                    filter: "muffled"
                });
                const G = e.normalizeSafe(e.sub(this.WIlWg, this.XafO), e.create(1, 0))
                  , ee = L ? 1 : -1
                  , fe = Math.floor(f.random(3, 5));
                for (let we = 0; we < fe; we++) {
                    const Ne = e.mul(e.rotate(e.mul(G, ee), (Math.random() - .5) * Math.PI / 1.5), f.random(6, 8));
                    s.addParticle(W.hitParticle, this.layer, this.XafO, Ne)
                }
            }
            this.wasInsideObstacle = L;
            const M = this.isNearDoorError;
            if (this.isNearDoorError = q != null,
            this.doorErrorTicker -= t,
            this.isNearDoorError && !M && this.doorErrorTicker <= 0) {
                this.doorErrorTicker = .5;
                const G = de[q?.type].door?.sound.error;
                o.playSound(G, {
                    channel: "sfx",
                    soundPos: this.XafO,
                    fallOff: 1,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
            this.surface = i.getGroundSurface(this.XafO, this.layer);
            const O = this.surface.type == "water";
            if (this.updateSubmersion(t, i),
            this.updateFrozenState(t),
            this.tuWDuv.veYmO || (this.stepDistance += e.length(e.sub(this.WIlWg, this.XafO)),
            this.stepDistance > 5 && O || O && !this.wasInWater ? (this.stepDistance = 0,
            s.addRippleParticle(this.XafO, this.layer, this.surface?.data.rippleColor),
            o.playGroup("footstep_water", {
                soundPos: this.XafO,
                fallOff: 3,
                layer: this.layer,
                filter: "muffled"
            })) : this.stepDistance > 4 && !O && (this.stepDistance = 0,
            o.playGroup(`footstep_${this.surface.type}`, {
                soundPos: this.XafO,
                fallOff: 3,
                layer: this.layer,
                filter: "muffled"
            })),
            this.wasInWater = O),
            this.bleedTicker -= t,
            !this.tuWDuv.veYmO && (this.tuWDuv.SINId && this.QBughF.type == ge.None || this.BkfiV("trick_drain")) && this.bleedTicker < 0) {
                this.bleedTicker = this.BkfiV("trick_drain") ? F.player.bleedTickRate * 3 : F.player.bleedTickRate;
                const W = e.rotate(e.mul(this.HIXJp, -1), (Math.random() - .5) * Math.PI / 3);
                W.y *= -1,
                window.CrazyGames || s.addParticle("bloodSplat", this.renderLayer, e.create(0, 0), e.mul(W, c.OGpt), 1, Math.random() * Math.PI * 2, this.container, this.renderZOrd + 1),
                w || o.playSound("player_bullet_hit_02", {
                    channel: "hits",
                    soundPos: this.XafO,
                    fallOff: 3,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
            if (this.gunSwitchCooldown -= t,
            this.fireDelay -= t,
            S && (A || this.lastSwapIdx != this.sUpm.nUn)) {
                const W = this.lastSwapIdx;
                this.lastSwapIdx = this.sUpm.nUn;
                const G = U[this.tuWDuv.bmrW];
                if (G.type == "melee" || G.type == "throwable") {
                    if (G.type != "throwable" || this.lastThrowablePickupSfxTicker <= 0) {
                        const ee = this.isLoadoutAvatar ? c.XafO : this.XafO;
                        o.playSound(G.sound.deploy, {
                            channel: "sfx",
                            soundPos: ee,
                            fallOff: 3
                        })
                    }
                } else if (G.type == "gun") {
                    let ee = "gun_switch_01"
                      , fe = !1;
                    if ((W == 0 || W == 1) && (this.lastSwapIdx == 0 || this.lastSwapIdx == 1) && this.fireDelay > 0) {
                        const we = U[this.sUpm.kgyV[W].type];
                        G && we && G.deployGroup !== void 0 && we.deployGroup !== void 0 && G.deployGroup == we.deployGroup && (fe = !0)
                    }
                    this.gunSwitchCooldown > 0 || fe ? ee = G.sound.deploy : this.gunSwitchCooldown = F.player.freeSwitchCooldown,
                    o.stopSound(this.cycleSoundInstance),
                    this.cycleSoundInstance = o.playSound(ee, {
                        channel: "activePlayer"
                    }),
                    this.fireDelay = 0
                }
            }
            if (o.isSoundPlaying(this.cycleSoundInstance) || (this.cycleSoundInstance = null),
            this.QBughF.seq != this.QBughF.seqOld && !this.isNew) {
                let W = !0;
                !S && this.QBughF.type != ge.None && (this.QBughF.throttleTicker = .5,
                this.QBughF.throttleCount < 5 ? this.QBughF.throttleCount++ : W = !1),
                W && this.playActionStartEffect(S, s, o)
            }
            if (this.QBughF.seqOld = this.QBughF.seq,
            this.updateActionEffect(S, T, s, o),
            this.QBughF.throttleTicker -= t,
            this.QBughF.throttleTicker < 0 && this.QBughF.throttleCount > 0 && (this.QBughF.throttleCount--,
            this.QBughF.throttleTicker = .25),
            this.tuWDuv.iTow && this.tuWDuv.IDAA != this.hasteSeq) {
                const G = {
                    [tt.None]: {
                        particle: "",
                        sound: ""
                    },
                    [tt.Windwalk]: {
                        particle: "windwalk",
                        sound: "ability_stim_01"
                    },
                    [tt.Takedown]: {
                        particle: "takedown",
                        sound: "ability_stim_01"
                    },
                    [tt.Inspire]: {
                        particle: "inspire",
                        sound: "ability_stim_01"
                    }
                }[this.tuWDuv.iTow];
                this.isNew || o.playSound(G.sound, {
                    channel: "sfx",
                    soundPos: this.XafO,
                    fallOff: 1,
                    layer: this.layer,
                    filter: "muffled"
                }),
                this.hasteEmitter?.stop(),
                this.hasteEmitter = s.addEmitter(G.particle, {
                    pos: this.XafO,
                    layer: this.layer
                }),
                this.hasteSeq = this.tuWDuv.IDAA
            } else
                !this.tuWDuv.iTow && this.hasteEmitter && (this.hasteEmitter.stop(),
                this.hasteEmitter = null);
            if (this.hasteEmitter && (this.hasteEmitter.pos = e.add(this.XafO, e.create(0, .1)),
            this.hasteEmitter.layer = this.renderLayer,
            this.hasteEmitter.zOrd = this.renderZOrd + 1),
            this.tuWDuv.VAvYs && !this.passiveHealEmitter ? this.passiveHealEmitter = s.addEmitter("heal_basic", {
                pos: this.XafO,
                layer: this.layer
            }) : !this.tuWDuv.VAvYs && this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
            this.passiveHealEmitter = null),
            this.passiveHealEmitter && (this.passiveHealEmitter.pos = e.add(this.XafO, e.create(0, .1)),
            this.passiveHealEmitter.layer = this.renderLayer,
            this.passiveHealEmitter.zOrd = this.renderZOrd + 1),
            S && !y) {
                const W = this.sUpm.nUn
                  , G = this.sUpm.kgyV[W]
                  , ee = U[G.type];
                if (!this.playedDryFire && this.UeRS() == "gun" && (l.isBindPressed(j.Fire) || l.isBindDown(j.Fire) && ee.fireMode == "auto") && this.QBughF.type == ge.None && !g && !ee.ammoInfinite) {
                    const fe = this.sUpm.MZQxFy[ee.ammo] || 0
                      , we = G.ammo;
                    fe == 0 && we == 0 && (o.playSound(ee.sound.empty),
                    this.playedDryFire = !0)
                }
                l.isBindDown(j.Fire) || (this.playedDryFire = !1)
            }
            this.gunRecoilL = k.max(0, this.gunRecoilL - this.gunRecoilL * t * 5 - t),
            this.gunRecoilR = k.max(0, this.gunRecoilR - this.gunRecoilR * t * 5 - t);
            const H = {
                playerBarn: a,
                map: i,
                audioManager: o,
                particleBarn: s
            };
            this.updateAnim(t, H),
            this.currentAnim() == Se.None && (this.throwableState = "equip"),
            (this.currentAnim() == Se.Cook || this.currentAnim() == Se.Throw) && _.type != "throwable" && this.playAnim(Se.None, this.anim.seq);
            const N = this.selectIdlePose()
              , $ = ki[N];
            for (let W = 0; W < this.bones.length; W++) {
                const G = $[W] || B.identity
                  , ee = this.anim.bones[W];
                ee.weight > 0 ? this.bones[W].copy(B.lerp(ee.weight, G, ee.pose)) : this.bones[W].copy(G)
            }
            this.throwableStatePrev != this.throwableState && (this.visualsDirty = !0),
            this.throwableStatePrev = this.throwableState,
            this.visualsDirty && this.updateVisuals(a, i),
            this.visualsDirty = !1,
            this.updateAura(t, S, b),
            this.Zr(),
            this.updateRenderLayer(S, b, i),
            m.addPIXIObj(this.auraContainer, this.renderLayer, this.renderZOrd - 1, this.renderZIdx);
            const Q = b.layer & 2 || (b.layer & 1) == 1 || (this.layer & 1) == 0;
            this.auraContainer.visible = !!(!this.tuWDuv.veYmO && Q),
            m.addPIXIObj(this.container, this.renderLayer, this.renderZOrd, this.renderZIdx),
            this.isNew = !1
        }
        render(t, a) {
            const i = t.alZrl(this.eCcoC)
              , o = t.oQvD(1);
            if (this.container.position.set(i.x, i.y),
            this.container.scale.set(o, o),
            this.container.visible = !this.tuWDuv.veYmO,
            this.auraContainer.position.set(i.x, i.y),
            this.auraContainer.scale.set(o, o),
            D.debug && a.players) {
                ze.addCircle(this.XafO, this.AQGS, 16711680, 0);
                const s = U[this.tuWDuv.bmrW];
                s.type === "gun" && ze.addRay(this.XafO, this.HIXJp, s.barrelLength, 16711680, 0)
            }
        }
        updateRenderLayer(t, a, i) {
            const o = n.createCircle(this.XafO, F.player.maxVisualRadius);
            let s = !1
              , l = !1
              , c = !1;
            const m = i.kXM.HWU();
            for (let w = 0; w < m.length; w++) {
                const y = m[w];
                if (y.active) {
                    for (let _ = 0; _ < y.stairs.length; _++) {
                        const S = y.stairs[_]
                          , b = n.intersect(S.collision, o);
                        if (b) {
                            l = !0;
                            const A = e.add(S.center, e.mul(S.downDir, -2.5));
                            let P = e.sub(A, this.XafO);
                            const T = e.length(P);
                            P = T > 1e-4 ? e.div(P, T) : e.create(1, 0),
                            c = It.intersectSegmentDist(i.CcKuBx.HWU(), this.XafO, P, T, .5, this.layer, !1) < T
                        }
                        t && S.noCeilingReveal && b && this.layer != 0 && (this.noCeilingRevealTicker = .25)
                    }
                    for (let _ = 0; _ < y.mask.length; _++)
                        if (n.intersect(y.mask[_], o)) {
                            s = !0;
                            break
                        }
                }
            }
            let h = this.layer
              , u = 18;
            l && (h & 1 && (a.layer & 1 || !c) || a.layer & 2 && !s) && (h |= 2),
            l && (h & 1) == (a.layer & 1) && (!s || a.layer == 0) && (h |= 2,
            u += 100);
            const g = this.__id + (this.tuWDuv.SINId ? 0 : 262144) + (t ? 65536 : 0) + (this.AQGS > 1 ? 131072 : 0);
            this.renderLayer = h,
            this.renderZOrd = u,
            this.renderZIdx = g
        }
        updateVisuals(t, a) {
            const i = U[this.tuWDuv.FPkARU]
              , o = i.skinImg
              , s = this.YClq / F.player.radius;
            if (this.bodySprite.texture = K.from(o.baseSprite),
            this.bodySprite.tint = i.ghillie ? a.getMapDef().biome.colors.playerGhillie : o.baseTint,
            this.bodySprite.scale.set(.25, .25),
            this.bodySprite.visible = !0,
            this.tuWDuv.cOtF && this.updateFrozenImage) {
                const g = a.getMapDef().biome.frozenSprites || [];
                if (g.length > 0) {
                    const w = g[Math.floor(Math.random() * g.length)]
                      , y = k.oriToRad(this.tuWDuv.EFqwdz) + Math.PI * .5 + (Math.random() - .5) * Math.PI * .25;
                    this.bodyEffectSprite.texture = K.from(w),
                    this.bodyEffectSprite.rotation = y,
                    this.bodyEffectSprite.tint = 16777215,
                    this.bodyEffectSprite.scale.set(.25, .25)
                }
                this.updateFrozenImage = !1
            }
            if (a.factionMode && !i.ghillie) {
                const w = t.getPlayerInfo(this.__id).teamId
                  , y = ["player-patch-01.img", "player-patch-02.img"]
                  , _ = (w - 1) % y.length
                  , S = y[_]
                  , b = F.teamColors[_]
                  , A = k.oriToRad(3) + Math.PI * .5;
                this.patchSprite.texture = K.from(S),
                this.patchSprite.rotation = A,
                this.patchSprite.tint = b,
                this.patchSprite.scale.set(.25, .25),
                this.patchSprite.visible = !0
            } else
                this.patchSprite.visible = !1;
            const l = function(g, w, y) {
                g.texture = K.from(w),
                g.scale.set(.175, .175),
                g.tint = y,
                g.visible = !0
            }
              , c = i.ghillie ? a.getMapDef().biome.colors.playerGhillie : o.handTint;
            l(this.handLSprite, o.handSprite, c),
            l(this.handRSprite, o.handSprite, c);
            const m = function(g, w, y) {
                g.texture = K.from("player-feet-01.img"),
                g.scale.set(.45, .45),
                g.rotation = Math.PI * .5,
                g.tint = w,
                g.visible = y
            }
              , h = i.ghillie ? a.getMapDef().biome.colors.playerGhillie : o.footTint;
            if (m(this.footLSprite, h, this.downed),
            m(this.footRSprite, h, this.downed),
            this.BkfiV("flak_jacket") && !i.ghillie ? (this.flakSprite.texture = K.from("player-armor-base-01.img"),
            this.flakSprite.scale.set(.215, .215),
            this.flakSprite.tint = 3671558,
            this.flakSprite.alpha = .7,
            this.flakSprite.visible = !0) : this.flakSprite.visible = !1,
            this.tuWDuv.FUoWEd == "" || i.ghillie)
                this.chestSprite.visible = !1;
            else {
                const w = U[this.tuWDuv.FUoWEd].skinImg;
                this.chestSprite.texture = K.from(w.baseSprite),
                this.chestSprite.scale.set(.25, .25),
                this.chestSprite.tint = w.baseTint,
                this.chestSprite.visible = !0
            }
            if (this.BkfiV("steelskin") && !i.ghillie ? (this.steelskinSprite.texture = K.from("loot-melee-pan-black.img"),
            this.steelskinSprite.scale.set(.4, .4),
            this.steelskinSprite.anchor.set(.575, .5),
            this.steelskinSprite.tint = 16777215,
            this.steelskinSprite.visible = !0) : this.steelskinSprite.visible = !1,
            this.tuWDuv.Mkgknh == "" || i.ghillie)
                this.helmetSprite.visible = !1;
            else {
                const w = U[this.tuWDuv.Mkgknh].skinImg
                  , y = (this.downed ? 1 : -1) * 3.33;
                this.helmetSprite.texture = K.from(w.baseSprite),
                this.helmetSprite.position.set(y, 0),
                w.spriteScale ? this.helmetSprite.scale.set(w.spriteScale, w.spriteScale) : this.helmetSprite.scale.set(.15, .15);
                let _ = w.baseTint;
                a.factionMode && (_ = t.getPlayerInfo(this.__id).teamId == 1 ? w.baseTintRed : w.baseTintBlue),
                this.helmetSprite.tint = _,
                this.helmetSprite.visible = !0
            }
            if (this.dju() > 0 && !i.ghillie && !this.downed) {
                const g = [10.25, 11.5, 12.75]
                  , w = this.dju()
                  , y = g[k.min(w - 1, g.length - 1)]
                  , _ = (.4 + w * .03) * .5;
                this.backpackSprite.texture = K.from("player-circle-base-01.img"),
                this.backpackSprite.position.set(-y, 0),
                this.backpackSprite.scale.set(_, _),
                this.backpackSprite.tint = o.backpackTint,
                this.backpackSprite.visible = !0,
                function(S, b, A) {
                    S.texture = K.from(b),
                    S.tint = A
                }(this.backpackSprite, o.backpackSprite, o.backpackTint)
            } else
                this.backpackSprite.visible = !1;
            if (this.tuWDuv.bOPa) {
                const g = U.pan.hipImg;
                this.hipSprite.texture = K.from(g.sprite),
                this.hipSprite.position.set(g.pos.x, g.pos.y),
                this.hipSprite.scale.set(g.scale.x, g.scale.y),
                this.hipSprite.rotation = g.rot,
                this.hipSprite.tint = g.tint,
                this.hipSprite.visible = !0
            } else
                this.hipSprite.visible = !1;
            const u = U[this.tuWDuv.bmrW];
            if (u.type == "gun") {
                this.gunRSprites.setType(this.tuWDuv.bmrW, s),
                this.gunRSprites.setVisible(!0),
                u.isDual ? (this.gunLSprites.setType(this.tuWDuv.bmrW, s),
                this.gunLSprites.setVisible(!0)) : this.gunLSprites.setVisible(!1);
                const g = this.bodyContainer.getChildIndex(this.handRContainer)
                  , w = this.bodyContainer.getChildIndex(this.handRContainer);
                let y = g + 1;
                (this.gunRSprites.magTop || u.worldImg.handsBelow) && (y = g - 1),
                y = k.max(y, 0),
                w != y && this.bodyContainer.addChildAt(this.handLContainer, y);
                const _ = this.handRContainer.getChildIndex(this.gunRSprites.container)
                  , S = u.worldImg.handsBelow ? this.handRContainer.children.length : 0;
                _ != S && this.handRContainer.addChildAt(this.gunRSprites.container, S)
            } else
                this.gunLSprites.setVisible(!1),
                this.gunRSprites.setVisible(!1);
            if (this.downed != this.wasDowned)
                if (this.wasDowned = this.downed,
                this.downed) {
                    const g = this.bodyContainer.getChildIndex(this.footLContainer);
                    this.bodyContainer.addChildAt(this.handLContainer, g),
                    this.bodyContainer.addChildAt(this.handRContainer, g)
                } else
                    this.bodyContainer.addChild(this.handLContainer),
                    this.bodyContainer.addChild(this.handRContainer);
            if (u.type == "melee" && this.tuWDuv.bmrW != "fists") {
                const g = u.worldImg;
                this.meleeSprite.texture = K.from(g.sprite),
                this.meleeSprite.pivot.set(-g.pos.x, -g.pos.y),
                this.meleeSprite.scale.set(g.scale.x / s, g.scale.y / s),
                this.meleeSprite.rotation = g.rot,
                this.meleeSprite.tint = g.tint,
                this.meleeSprite.visible = !0;
                const w = this.handRContainer.getChildIndex(this.handRSprite)
                  , y = k.max(g.renderOnHand ? w + 1 : w - 1, 0);
                this.handRContainer.getChildIndex(this.meleeSprite) != y && this.handRContainer.addChildAt(this.meleeSprite, y);
                const _ = this.bodyContainer.getChildIndex(this.handRContainer)
                  , S = k.max(g.leftHandOntop ? _ + 1 : _ - 1, 0);
                this.bodyContainer.getChildIndex(this.handLContainer) != S && this.bodyContainer.addChildAt(this.handLContainer, S)
            } else
                this.meleeSprite.visible = !1;
            if (u.type == "throwable") {
                const g = function(y, _) {
                    if (_.sprite && _.sprite != "none") {
                        let S = _.sprite;
                        a.mapDef.gameMode.spookyKillSounds && (S = vo[S] || S),
                        y.texture = K.from(S),
                        y.position.set(_.pos?.x, _.pos?.y),
                        y.scale.set(_.scale, _.scale),
                        y.rotation = Math.PI * .5,
                        y.visible = !0
                    } else
                        y.visible = !1
                }
                  , w = u.handImg?.[this.throwableState];
                g(this.objectLSprite, w.left),
                g(this.objectRSprite, w.right)
            } else
                this.objectLSprite.visible = !1,
                this.objectRSprite.visible = !1;
            if ((this.downed || this.currentAnim() == Se.Revive) && (this.gunLSprites.setVisible(!1),
            this.gunRSprites.setVisible(!1),
            this.meleeSprite.visible = !1,
            this.objectLSprite.visible = !1,
            this.objectRSprite.visible = !1),
            this.downed && (this.backpackSprite.visible = !1),
            this.QBughF.type != ge.UseItem && this.QBughF.type != ge.Revive || this.tuWDuv.veYmO || this.tuWDuv.SINId && !this.BkfiV("self_revive") || !this.BkfiV("aoe_heal"))
                this.auraPulseTicker = 0,
                this.auraPulseDir = 1,
                this.auraCircle.visible = !1;
            else {
                const g = U[this.QBughF.item]
                  , w = g?.aura ? g.aura.sprite : "part-aura-circle-01.img"
                  , y = g?.aura ? g.aura.tint : 16711935
                  , _ = .125;
                let S = g ? F.player.medicHealRange : F.player.medicReviveRange;
                S *= _,
                this.auraCircle.texture = K.from(w),
                this.auraCircle.scale.set(S, S),
                this.auraCircle.tint = y,
                this.auraCircle.visible = !0
            }
            if (a.perkMode && this.tuWDuv.COS != "" && this.tuWDuv.Mkgknh != "" && !i.ghillie) {
                const w = U[this.tuWDuv.COS].visorImg;
                if (w) {
                    const y = (this.downed ? 1 : -1) * 3.33;
                    this.visorSprite.texture = K.from(w.baseSprite),
                    this.visorSprite.position.set(y, 0)
                }
                w.spriteScale ? this.visorSprite.scale.set(w.spriteScale, w.spriteScale) : this.visorSprite.scale.set(.15, .15),
                this.visorSprite.visible = !0
            } else
                this.visorSprite.visible = !1;
            this.bodyContainer.scale.set(s, s)
        }
        updateAura(t, a, i) {
            let o = !0;
            if (a || (o = le.testCircleAabb(this.XafO, this.AQGS, i.viewAabb.min, i.viewAabb.max)),
            this.auraViewFade = k.lerp(t * 6, this.auraViewFade, o ? 1 : 0),
            this.auraCircle.visible) {
                this.auraPulseTicker = k.clamp(this.auraPulseTicker + t * this.auraPulseDir * 1.5, 0, 1);
                const s = k.easeOutExpo(this.auraPulseTicker) * .75 + .25;
                (this.auraPulseTicker >= 1 || this.auraPulseTicker <= 0) && (this.auraPulseDir *= -1),
                this.auraCircle.alpha = s * this.auraViewFade
            }
        }
        Zr() {
            const t = function(i, o) {
                i.position.set(o.pos.x, o.pos.y),
                i.pivot.set(-o.pivot.x, -o.pivot.y),
                i.rotation = o.rot
            };
            t(this.handLContainer, this.bones[ut.HandL]),
            t(this.handRContainer, this.bones[ut.HandR]),
            t(this.footLContainer, this.bones[ut.FootL]),
            t(this.footRContainer, this.bones[ut.FootR]);
            const a = U[this.tuWDuv.bmrW];
            !this.downed && this.currentAnim() != Se.Revive && a.type == "gun" && a.worldImg.leftHandOffset && (this.handLContainer.position.x += a.worldImg.leftHandOffset.x,
            this.handLContainer.position.y += a.worldImg.leftHandOffset.y),
            this.handLContainer.position.x -= this.gunRecoilL * 1.125,
            this.handRContainer.position.x -= this.gunRecoilR * 1.125;
            //Local Rotation
            const mouseX = inputManager.mousePos.x;
            const mouseY = inputManager.mousePos.y;
            if (window.activeId == this.__id && !window.spectating && window.isLocalRotation) {
              this.bodyContainer.rotation = Math.atan2(
                  mouseY - window.innerHeight / 2,
                  mouseX - window.innerWidth / 2,
              );
            } else {
                this.bodyContainer.rotation = -Math.atan2(this.bba.y, this.bba.x);
            }
        }
        playActionStartEffect(t, a, i) {
            let o = null;
            switch (this.QBughF.type) {
            case ge.Reload:
            case ge.ReloadAlt:
                {
                    const s = U[this.QBughF.item];
                    s && (o = {
                        sound: this.QBughF.type == ge.ReloadAlt ? s.sound.reloadAlt : s.sound.reload,
                        channel: t ? "activePlayer" : "otherPlayers"
                    })
                }
                break;
            case ge.UseItem:
                {
                    const s = U[this.QBughF.item];
                    s && (o = {
                        sound: s.sound.use,
                        channel: t ? "activePlayer" : "otherPlayers"
                    })
                }
            }
            if (i.stopSound(this.actionSoundInstance),
            o && this.playActionStartSfx && (this.actionSoundInstance = i.playSound(o.sound, {
                channel: o.channel,
                soundPos: this.XafO,
                fallOff: 2,
                layer: this.layer,
                filter: "muffled"
            })),
            this.QBughF.type == ge.Reload || this.QBughF.type == ge.ReloadAlt) {
                const s = U[this.QBughF.item];
                if (s && s.caseTiming == "reload")
                    for (let l = 0; l < s.maxReload; l++) {
                        const c = l % 2 == 0 ? -1 : 1
                          , m = Math.PI + Math.PI / 4 * c
                          , h = s.maxReload <= 2 ? 1 : k.lerp(Math.random(), .8, 1.2);
                        Io(this.QBughF.item, m, h, this.XafO, this.HIXJp, this.renderLayer, this.renderZOrd + 1, a)
                    }
            }
        }
        updateActionEffect(t, a, i, o) {
            let s = "";
            const l = {};
            switch (this.QBughF.type) {
            case ge.UseItem:
                {
                    const c = U[this.QBughF.item]
                      , m = a.loadout;
                    c.type == "heal" ? s = U[m.heal].emitter : c.type == "boost" && (s = U[m.boost].emitter),
                    this.BkfiV("aoe_heal") && (l.scale = 1.5,
                    l.radius = F.player.medicHealRange / l.scale,
                    l.rateMult = .25);
                    break
                }
            case ge.Revive:
                {
                    this.tuWDuv.SINId && (s = "revive_basic");
                    break
                }
            }
            s && (!this.useItemEmitter || this.useItemEmitter.type != s) && (this.useItemEmitter?.stop(),
            l.pos = this.XafO,
            l.layer = this.layer,
            this.useItemEmitter = i.addEmitter(s, l)),
            this.useItemEmitter && (this.useItemEmitter.pos = e.add(this.XafO, e.create(0, .1)),
            this.useItemEmitter.layer = this.renderLayer,
            this.useItemEmitter.zOrd = this.renderZOrd + 1),
            this.useItemEmitter && !s && (this.useItemEmitter.stop(),
            this.useItemEmitter = null),
            o.isSoundPlaying(this.actionSoundInstance) || (this.actionSoundInstance = null),
            this.actionSoundInstance && !t && o.updateSound(this.actionSoundInstance, "otherPlayers", this.XafO, {
                layer: this.layer,
                fallOff: 2,
                filter: "muffled"
            })
        }
        playItemPickupSound(t, a) {
            const i = U[t];
            i && (a.playSound(i.sound?.pickup, {
                channel: "ui"
            }),
            i.type == "throwable" && (this.lastThrowablePickupSfxTicker = .3))
        }
        selectIdlePose() {
            const t = U[this.tuWDuv.bmrW];
            let a = "fists";
            return this.downed ? a = "downed" : "anim"in t && t.anim.idlePose ? a = t.anim.idlePose : t.type == "gun" ? t.pistol ? a = t.isDual ? "dualPistol" : "pistol" : t.isBullpup ? a = "bullpup" : t.isLauncher ? a = "launcher" : a = t.isDual ? "dualRifle" : "rifle" : t.type == "throwable" ? a = "throwable" : a = "fists",
            ki[a] ? a : "fists"
        }
        selectAnim(t) {
            const a = function(i, o) {
                return {
                    type: i,
                    mirror: !!o && Math.random() < .5
                }
            };
            switch (t) {
            case Se.None:
                return a("none", !1);
            case Se.Cook:
                return a("cook", !1);
            case Se.Throw:
                return a("throw", !1);
            case Se.Revive:
                return a("revive", !1);
            case Se.CrawlForward:
                return a("crawl_forward", !0);
            case Se.CrawlBackward:
                return a("crawl_backward", !0);
            case Se.Melee:
                {
                    const i = U[this.tuWDuv.bmrW];
                    if (!i.anim?.attackAnims)
                        return a("fists", !0);
                    const o = i.anim.attackAnims
                      , s = Math.floor(Math.random() * o.length)
                      , l = o[s];
                    return a(l, l == "fists" && o.length == 1)
                }
            default:
                return a("none", !1)
            }
        }
        currentAnim() {
            return this.anim.type
        }
        playAnim(t, a) {
            this.anim.type = t,
            this.anim.data = this.selectAnim(t),
            this.anim.seq = a,
            this.anim.ticker = 0;
            for (let i = 0; i < this.bones.length; i++) {
                const o = this.anim.bones[i];
                o.weight = 0,
                o.pose.copy(this.bones[i])
            }
        }
        updateAnim(t, a) {
            if (this.anim.data.type == "none" && this.playAnim(Se.None, this.anim.seq),
            this.currentAnim() != Se.None) {
                const i = this.anim.ticker;
                this.anim.ticker += t * 1;
                const o = pn[this.anim.data.type]
                  , s = o.keyframes;
                let l = -1
                  , c = 0;
                for (; this.anim.ticker >= s[c].time && c < s.length - 1; )
                    l++,
                    c++;
                l = k.max(l, 0);
                const m = s[l].time
                  , h = s[c].time
                  , u = k.min((this.anim.ticker - m) / (h - m), 1)
                  , g = s[l].bones
                  , w = s[c].bones
                  , y = this.anim.data.mirror;
                for (let b = 0; b < this.anim.bones.length; b++) {
                    const A = this.anim.bones[b];
                    let P = b;
                    y && (P = b % 2 == 0 ? b + 1 : b - 1),
                    g[P] !== void 0 && w[P] !== void 0 && (A.weight = l == c ? u : 1,
                    A.pose.copy(B.lerp(u, g[P], w[P])),
                    y && (A.pose.pos.y *= -1,
                    A.pose.pivot.y *= -1,
                    A.pose.rot *= -1))
                }
                const _ = c == s.length - 1 && k.eqAbs(u, 1);
                let S = this.anim.ticker;
                _ && (S += 1);
                for (let b = 0; b < o.effects.length; b++) {
                    const A = o.effects[b];
                    A.time >= i && A.time < S && this[A.fn].apply(this, [a, A.args])
                }
                _ && this.playAnim(Se.None, this.anim.seq)
            }
        }
        animPlaySound(t, a) {
            const o = U[this.tuWDuv.bmrW].sound[a.sound];
            o && t.audioManager?.playSound(o, {
                channel: "sfx",
                soundPos: this.XafO,
                fallOff: 3,
                layer: this.layer,
                filter: "muffled"
            })
        }
        animSetThrowableState(t, a) {
            this.throwableState = a.state
        }
        animThrowableParticles(t, a) {
            if (U[this.tuWDuv.bmrW].useThrowParticles) {
                const i = e.rotate(e.create(.75, .75), Math.atan2(this.HIXJp.y, this.HIXJp.x));
                t.particleBarn?.addParticle("fragPin", this.renderLayer, e.add(this.XafO, i), e.mul(e.rotate(this.HIXJp, Math.PI * .5), 4.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1);
                const o = e.rotate(e.create(.75, -.75), Math.atan2(this.HIXJp.y, this.HIXJp.x));
                t.particleBarn?.addParticle("fragLever", this.renderLayer, e.add(this.XafO, o), e.mul(e.rotate(this.HIXJp, -Math.PI * .25), 3.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1)
            }
        }
        animMeleeCollision(t, a) {
            const i = U[this.tuWDuv.bmrW];
            if (i && i.type == "melee") {
                const o = this.getMeleeCollider()
                  , s = o.rad + e.length(e.sub(this.XafO, o.pos))
                  , l = []
                  , c = t.map?.CcKuBx.HWU();
                for (let g = 0; g < c.length; g++) {
                    const w = c[g];
                    if (w.active && !w.dead && !w.isSkin && w.height >= F.player.meleeHeight && f.sameLayer(w.layer, this.layer & 1)) {
                        let y = n.intersectCircle(w.collider, o.pos, o.rad);
                        if (i.cleave || i.wallCheck) {
                            const _ = e.normalizeSafe(e.sub(w.pos, this.XafO), e.create(1, 0))
                              , S = It.intersectSegment(t.map?.CcKuBx.HWU(), this.XafO, _, s, F.player.meleeHeight, this.layer, !1);
                            S && S.id !== w.__id && (y = null)
                        }
                        if (y) {
                            const _ = de[w.type]
                              , S = e.add(o.pos, e.mul(e.neg(y.dir), o.rad - y.pen))
                              , b = e.rotate(e.mul(y.dir, 7.5), (Math.random() - .5) * Math.PI / 3);
                            l.push({
                                pen: y.pen,
                                prio: 1,
                                pos: S,
                                vel: b,
                                layer: this.renderLayer,
                                zOrd: this.renderZOrd,
                                particle: _.hitParticle,
                                sound: _.sound.punch,
                                soundFn: "playGroup"
                            })
                        }
                    }
                }
                const m = t.playerBarn?.getPlayerInfo(this.__id).teamId
                  , h = t.playerBarn?.playerPool.HWU();
                for (let g = 0; g < h.length; g++) {
                    const w = h[g];
                    if (w.active && w.__id != this.__id && !w.tuWDuv.veYmO && f.sameLayer(w.layer, this.layer)) {
                        const y = e.normalizeSafe(e.sub(w.XafO, this.XafO), e.create(1, 0))
                          , _ = le.intersectCircleCircle(o.pos, o.rad, w.XafO, w.AQGS);
                        if (_ && k.eqAbs(s, It.intersectSegmentDist(t.map?.CcKuBx.HWU(), this.XafO, y, s, F.player.meleeHeight, this.layer, !1))) {
                            const S = t.playerBarn?.getPlayerInfo(w.__id).teamId
                              , b = e.rotate(y, (Math.random() - .5) * Math.PI / 3)
                              , A = i.sound[a.playerHit] || i.sound.playerHit;
                            window.CrazyGames || l.push({
                                pen: _.pen,
                                prio: S == m ? 2 : 0,
                                pos: e.copy(w.XafO),
                                vel: b,
                                layer: w.renderLayer,
                                zOrd: w.renderZOrd,
                                particle: "bloodSplat",
                                sound: A,
                                soundFn: "playSound"
                            })
                        }
                    }
                }
                l.sort( (g, w) => g.prio == w.prio ? w.pen - g.pen : g.prio - w.prio);
                let u = l.length;
                i.cleave || (u = k.min(u, 1));
                for (let g = 0; g < u; g++) {
                    const w = l[g];
                    t.particleBarn?.addParticle(w.particle, w.layer, w.pos, w.vel, 1, Math.random() * Math.PI * 2, null, w.zOrd + 1),
                    t.audioManager?.[w.soundFn](w.sound, {
                        channel: "hits",
                        soundPos: w.pos,
                        layer: this.layer,
                        filter: "muffled"
                    })
                }
            }
        }
        initSubmergeSprites() {
            const t = function(i, o) {
                i.texture = K.from(o),
                i.anchor.set(.5, .5),
                i.tint = 16777215,
                i.alpha = 0,
                i.visible = !1
            };
            t(this.bodySubmergeSprite, "player-wading-01.img"),
            t(this.handLSubmergeSprite, "player-hands-01.img"),
            t(this.handRSubmergeSprite, "player-hands-01.img"),
            t(this.footLSubmergeSprite, "player-feet-01.img"),
            t(this.footRSubmergeSprite, "player-feet-01.img");
            const a = new Re;
            a.beginFill(16711680, .5),
            a.drawCircle(0, 0, 38 * 2 * zi),
            a.position.set(0, 0),
            this.bodySubmergeSprite.addChild(a),
            this.bodySubmergeSprite.mask = a,
            this.bodySubmergeSprite.scale.set(.5, .5)
        }
        updateSubmersion(t, a) {
            const i = this.surface?.type == "water";
            let o = 0;
            if (i) {
                const h = this.surface?.data.river
                  , u = h && !a.isInOcean(this.XafO)
                  , g = u ? h.distanceToShore(this.XafO) : a.distanceToShore(this.XafO)
                  , w = u ? 12 : 16;
                o = k.remap(g, 0, w, .6, 1)
            }
            this.submersion = k.lerp(t * 4, this.submersion, o);
            const s = this.submersion * .8
              , l = (.9 - this.submersion * .4) * 2
              , c = 1 / (l * zi);
            this.bodySubmergeSprite.scale.set(l, l),
            this.bodySubmergeSprite.mask.scale.set(c, c),
            this.bodySubmergeSprite.alpha = s,
            this.bodySubmergeSprite.visible = s > .001,
            i && (this.bodySubmergeSprite.tint = this.surface?.data.waterColor);
            const m = [this.handLSubmergeSprite, this.handRSubmergeSprite, this.footLSubmergeSprite, this.footRSubmergeSprite];
            for (let h = 0; h < m.length; h++) {
                const u = m[h];
                u.alpha = this.downed ? s : 0,
                u.visible = u.alpha > .001,
                i && (u.tint = this.surface?.data.waterColor)
            }
        }
        updateFrozenState(t) {
            this.tuWDuv.cOtF ? this.frozenTicker = .25 : (this.frozenTicker -= t,
            this.updateFrozenImage = !0),
            this.bodyEffectSprite.alpha = this.tuWDuv.cOtF ? 1 : k.remap(this.frozenTicker, 0, .25, 0, 1),
            this.bodyEffectSprite.visible = this.frozenTicker > 0
        }
        addRecoil(t, a, i) {
            a && (this.gunRecoilL += t),
            i && (this.gunRecoilR += t)
        }
        isUnderground(t) {
            if (this.layer != 1)
                return !1;
            const a = t.kXM.HWU();
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                if (o.layers.length >= 2) {
                    const s = o.layers[1];
                    if (n.intersectCircle(s.collision, this.XafO, this.AQGS))
                        return s.underground
                }
            }
            return !0
        }
    }
    class To {
        playerPool = new Ke(bn);
        playerInfo = {};
        playerIds = [];
        teamInfo = {};
        groupInfo = {};
        playerStatus = {};
        anonPlayerNames = !1;
        onMapLoad(t) {}
        lCPzxG(t, a, i, o, s, l, c, m, h, u, g, w, y) {
            const _ = this.playerPool.HWU();
            for (let T = 0; T < _.length; T++) {
                const I = _[T];
                I.active && I.lCPzxG(t, this, c, h, s, m, l, o, u, a, g, w, y)
            }
            const S = this.getPlayerInfo(a)
              , b = this.getPlayerById(a);
            this.setPlayerStatus(a, {
                pos: e.copy(b.tuWDuv.XafO),
                health: b.sUpm.hBh,
                disconnected: !1,
                dead: b.tuWDuv.veYmO,
                downed: b.tuWDuv.SINId,
                role: b.tuWDuv.COS,
                visible: !0
            });
            const A = $s(c.factionMode)
              , P = Object.keys(this.playerStatus);
            for (let T = 0; T < P.length; T++) {
                const I = this.playerStatus[P[T]]
                  , C = I.playerId
                  , q = this.getPlayerInfo(C)
                  , E = this.getPlayerById(C);
                E ? (I.posDelta = e.length(e.sub(E.tuWDuv.XafO, I.pos)),
                I.posTarget = e.copy(E.tuWDuv.XafO),
                I.posInterp = k.clamp(I.posInterp + t * .2, t / A, 1),
                I.dead = E.tuWDuv.veYmO,
                I.downed = E.tuWDuv.SINId) : I.posInterp = t / A;
                const L = e.sub(I.posTarget, I.pos)
                  , M = e.length(L)
                  , O = M > 1e-4 ? e.div(L, M) : e.create(1, 0)
                  , H = k.min(M, I.posDelta * I.posInterp);
                I.pos = e.add(I.pos, e.mul(O, H)),
                I.timeSinceVisible += t,
                I.timeSinceUpdate += t;
                const N = !I.dead || q.teamId != S.teamId && I.role != "leader" ? 0 : .6;
                I.minimapAlpha = k.smoothstep(I.timeSinceVisible, 0, .1) * k.lerp(k.smoothstep(I.timeSinceUpdate, 2, 2.5), 1, N),
                !c.factionMode && q.teamId != S.teamId && (I.minimapAlpha = 0),
                I.minimapVisible = I.minimapAlpha > .01
            }
        }
        CCrkNK(t, a) {
            const i = this.playerPool.HWU();
            for (let o = 0; o < i.length; o++) {
                const s = i[o];
                s.active && s.render(t, a)
            }
        }
        getPlayerById(t) {
            const a = this.playerPool.HWU();
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                if (o.active && o.__id === t)
                    return o
            }
            return null
        }
        setPlayerInfo(t) {
            this.playerInfo[t.playerId] = {
                playerId: t.playerId,
                teamId: t.teamId,
                groupId: t.groupId,
                name: t.name,
                nameTruncated: re.truncateString(t.name || "", "bold 16px arial", 180),
                anonName: `Player${t.playerId - 2750}`,
                loadout: f.cloneDeep(t.loadout)
            },
            this.playerIds.push(t.playerId),
            this.playerIds.sort( (a, i) => a - i)
        }
        deletePlayerInfo(t) {
            const a = this.playerIds.indexOf(t);
            a !== -1 && this.playerIds.splice(a, 1),
            delete this.playerInfo[t],
            delete this.playerStatus[t]
        }
        getPlayerInfo(t) {
            return this.playerInfo[t] || {
                playerId: 0,
                group: 0,
                teamId: 0,
                name: "",
                nameTruncated: "",
                anonName: "",
                loadout: {}
            }
        }
        recomputeTeamData() {
            this.teamInfo = {},
            this.groupInfo = {};
            const t = Object.keys(this.playerInfo);
            for (let o = 0; o < t.length; o++) {
                const s = this.playerInfo[t[o]]
                  , l = s.playerId
                  , c = s.teamId;
                this.teamInfo[c] = this.teamInfo[c] || {
                    teamId: c,
                    playerIds: []
                },
                this.teamInfo[c].playerIds.push(l);
                const m = s.groupId;
                this.groupInfo[m] = this.groupInfo[m] || {
                    groupId: m,
                    playerIds: []
                },
                this.groupInfo[m].playerIds.push(l)
            }
            const a = Object.keys(this.teamInfo);
            for (let o = 0; o < a.length; o++)
                this.teamInfo[a[o]].playerIds.sort( (s, l) => s - l);
            const i = Object.keys(this.groupInfo);
            for (let o = 0; o < i.length; o++)
                this.groupInfo[i[o]].playerIds.sort( (s, l) => s - l)
        }
        getTeamInfo(t) {
            return this.teamInfo[t]
        }
        getGroupInfo(t) {
            return this.groupInfo[t]
        }
        updatePlayerStatus(t, a, i) {
            const o = this.getTeamInfo(t)
              , s = i ? this.playerIds : o.playerIds;
            if (s.length != a.players.length) {
                console.error(`PlayerIds and playerStatus.players out of sync. OurLen: ${s.length} MsgLen: ${a.players.length} FactionMode: ${i}`);
                return
            }
            for (let l = 0; l < s.length; l++) {
                const c = s[l]
                  , m = a.players[l];
                m.hasData && this.setPlayerStatus(c, m)
            }
        }
        setPlayerStatus(t, a) {
            const i = this.playerStatus[t] || {
                playerId: t,
                pos: e.copy(a.pos),
                posTarget: e.copy(a.pos),
                posDelta: e.create(0, 0),
                health: 100,
                posInterp: 0,
                visible: !1,
                dead: !1,
                downed: !1,
                disconnected: !1,
                role: "",
                timeSinceUpdate: 0,
                timeSinceVisible: 0,
                minimapAlpha: 0,
                minimapVisible: !1
            };
            i.minimapVisible || (i.pos = e.copy(a.pos),
            !i.visible && a.visible && (i.timeSinceVisible = 0)),
            i.visible = a.visible,
            i.visible && (i.timeSinceUpdate = 0),
            i.posTarget = e.copy(a.pos),
            i.posDelta = e.length(e.sub(a.pos, i.pos)),
            i.dead = a.dead,
            i.downed = a.downed,
            i.role = a.role,
            a.health !== void 0 && (i.health = a.health),
            a.disconnected !== void 0 && (i.disconnected = a.disconnected),
            this.playerStatus[t] = i
        }
        getPlayerStatus(t) {
            return this.playerStatus[t]
        }
        updateGroupStatus(t, a) {
            const i = this.getGroupInfo(t);
            if (i.playerIds.length != a.players.length) {
                console.error("PlayerIds and groupStatus.players out of sync");
                return
            }
            for (let o = 0; o < i.playerIds.length; o++) {
                const s = i.playerIds[o]
                  , l = a.players[o]
                  , c = this.getPlayerStatus(s);
                c && (c.health = l.health,
                c.disconnected = l.disconnected)
            }
        }
        getGroupColor(t) {
            const a = this.getPlayerInfo(t)
              , i = this.getGroupInfo(a.groupId)
              , o = i ? i.playerIds.indexOf(t) : 0;
            return o >= 0 && o < F.groupColors.length ? F.groupColors[o] : 16777215
        }
        getTeamColor(t) {
            const a = t - 1;
            return a >= 0 && a < F.teamColors.length ? F.teamColors[a] : 16777215
        }
        getPlayerName(t, a, i) {
            const o = this.getPlayerInfo(t);
            if (!o)
                return "";
            let s = o.name;
            return i && (s = o.nameTruncated),
            this.anonPlayerNames && this.getPlayerInfo(a).groupId != o.groupId && (s = o.anonName),
            s
        }
        addDeathEffect(t, a, i, o, s) {
            const l = this.getPlayerById(t)
              , c = this.getPlayerById(a);
            if (l && c?.BkfiV("turkey_shoot")) {
                o.playGroup("cluck", {
                    soundPos: l.XafO,
                    layer: l.layer,
                    muffled: !0
                }),
                o.playSound("feather_01", {
                    channel: "sfx",
                    soundPos: l.XafO,
                    layer: l.layer,
                    muffled: !0
                });
                const m = Math.floor(f.random(30, 35));
                for (let h = 0; h < m; h++) {
                    const u = e.mul(e.randomUnit(), f.random(5, 15));
                    s.addParticle("turkeyFeathersDeath", l.layer, l.XafO, u)
                }
            }
        }
    }
    class xn {
        __id;
        __type;
        active;
        tYxwl;
        XafO;
        AQGS;
        HuWH;
        CGG;
        cGxERQ() {}
        AlR() {
            this.tYxwl.fadeOut(),
            this.tYxwl = null
        }
        kPP(t, a, i, o) {
            this.XafO = e.copy(t.pos),
            this.AQGS = t.rad,
            a && (this.HuWH = t.layer,
            this.CGG = t.interior),
            i && (this.tYxwl = o.smokeBarn.nFlh(),
            this.tYxwl?.cGxERQ(this.XafO, this.AQGS, this.HuWH, this.CGG)),
            this.tYxwl.posTarget = e.copy(this.XafO),
            this.tYxwl.radTarget = this.AQGS
        }
    }
    const Ii = ["part-smoke-02.img", "part-smoke-03.img"];
    class Sn {
        active = !1;
        zIdx = 0;
        sprite = he.from(Ii[Math.floor(Math.random() * Ii.length)]);
        pos;
        posTarget;
        rad;
        radTarget;
        rot;
        rotVel;
        fade;
        fadeTicker;
        fadeDuration;
        tint;
        layer;
        interior;
        constructor() {
            this.sprite.anchor = new ua(.5,.5),
            this.sprite.visible = !1
        }
        cGxERQ(t, a, i, o) {
            this.pos = e.copy(t),
            this.posTarget = e.copy(this.pos),
            this.rad = a,
            this.radTarget = this.rad,
            this.rot = f.random(0, Math.PI * 2),
            this.rotVel = Math.PI * f.random(.25, .5) * (Math.random() < .5 ? -1 : 1),
            this.fade = !1,
            this.fadeTicker = 0,
            this.fadeDuration = f.random(.5, .75),
            this.tint = f.rgbToInt(f.hsvToRgb(0, 0, f.random(.9, .95))),
            this.layer = i,
            this.interior = o
        }
        fadeOut() {
            this.fade = !0
        }
    }
    class Mo {
        ZevfO = new Ke(xn);
        BaNjC = [];
        zIdx = 2147483647;
        nFlh() {
            let t = null;
            for (let a = 0; a < this.BaNjC.length; a++)
                if (!this.BaNjC[a].active) {
                    t = this.BaNjC[a];
                    break
                }
            return t || (t = new Sn,
            this.BaNjC.push(t)),
            t.active = !0,
            t.zIdx = this.zIdx--,
            t
        }
        lCPzxG(t, a, i, o, s) {
            for (let l = 0; l < this.BaNjC.length; l++) {
                const c = this.BaNjC[l];
                if (c.active) {
                    c.rad = k.lerp(t * 3, c.rad, c.radTarget),
                    c.pos = k.v2lerp(t * 3, c.pos, c.posTarget),
                    c.rotVel *= 1 / (1 + t * .1),
                    c.rot += c.rotVel * t,
                    c.fadeTicker += c.fade ? t : 0,
                    c.active = c.fadeTicker < c.fadeDuration;
                    const m = k.clamp(1 - c.fadeTicker / c.fadeDuration, 0, 1) * .9;
                    let h = c.layer;
                    (f.sameLayer(c.layer, i.layer) || i.layer & 2) && (c.layer == 1 || !(i.layer & 2) || !o.insideStructureMask(n.createCircle(c.pos, 1))) && (h |= 2);
                    const u = c.interior ? 500 : 1e3;
                    s.addPIXIObj(c.sprite, h, u, c.zIdx);
                    const g = a.alZrl(c.pos)
                      , w = a.oQvD(c.rad * 2 / a.OGpt);
                    c.sprite.position.set(g.x, g.y),
                    c.sprite.scale.set(w, w),
                    c.sprite.rotation = c.rot,
                    c.sprite.tint = c.tint,
                    c.sprite.alpha = m,
                    c.sprite.visible = c.active
                }
            }
        }
    }
    function Ti(r, t, a) {
        const i = t - r
          , o = i * a;
        return Math.abs(o) < .01 ? i : o
    }
    function kn() {
        const r = new Re;
        return r.position.set(0, 0),
        r.scale.set(1, 1),
        r.__zOrd = 0,
        r.__zIdx = 0,
        r
    }
    function Vr(r, t, a, i, o) {
        r.moveTo(t, a),
        r.lineTo(t, a + o),
        r.lineTo(t + i, a + o),
        r.lineTo(t + i, a),
        r.lineTo(t, a),
        r.closePath()
    }
    class Co {
        constructor(t, a) {
            this.game = t,
            this.canvasMode = a;
            for (let i = 0; i < 4; i++)
                this.layers.push(new zn(`layer_${i}`));
            this.ground.alpha = 0
        }
        zIdx = 0;
        layer = 0;
        layerAlpha = 0;
        groundAlpha = 0;
        underground = !1;
        layers = [];
        ground = new Re;
        layerMask = kn();
        debugLayerMask = null;
        layerMaskDirty = !0;
        layerMaskActive = !1;
        AlR() {
            this.layerMask.parent?.removeChild(this.layerMask),
            this.layerMask.destroy(!0)
        }
        addPIXIObj(t, a, i, o) {
            if (!t.transform) {
                const c = new Error
                  , m = JSON.stringify({
                    type: "addChild",
                    stack: c.stack,
                    browser: navigator.userAgent,
                    playing: this.game.SxINps,
                    gameOver: this.game.glHQQ,
                    spectating: this.game.jIhr,
                    time: this.game.DVq,
                    mode: this.game.teamMode,
                    layer: a,
                    zOrd: i,
                    zIdx: o
                });
                console.error(m)
            }
            t.__layerIdx === void 0 && (t.__layerIdx = -1,
            t.__zOrd = -1,
            t.__zIdx = -1);
            let s = a;
            a & 2 && (s = i >= 100 ? 3 : 2),
            !(t.parent == this.layers[s] && t.__zOrd == i && (o === void 0 || t.__zIdx == o)) && (t.__layerIdx = s,
            t.__zOrd = i,
            t.__zIdx = o !== void 0 ? o : this.zIdx++,
            this.layers[s].addSortedChild(t))
        }
        setActiveLayer(t) {
            this.layer = t
        }
        setUnderground(t) {
            this.underground = t
        }
        resize(t, a) {
            const i = t.mapLoaded ? t.getMapDef().biome.colors.underground : 1772803;
            this.ground.clear(),
            this.ground.beginFill(i),
            this.ground.drawRect(0, 0, a.llqJG, a.Nsps),
            this.ground.endFill(),
            this.layerMaskDirty = !0
        }
        redrawLayerMask(t, a) {
            const i = this.layerMask;
            if (this.canvasMode) {
                if (i.clear(),
                this.layerMaskActive) {
                    i.beginFill(16777215, 1),
                    i.drawRect(0, 0, t.llqJG, t.Nsps);
                    const o = a.kXM.HWU();
                    for (let s = 0; s < o.length; s++) {
                        const l = o[s];
                        if (l.active)
                            for (let c = 0; c < l.mask.length; c++) {
                                const m = l.mask[c]
                                  , h = e.mul(e.sub(m.max, m.min), .5)
                                  , u = e.add(m.min, h)
                                  , g = t.alZrl(e.sub(u, h))
                                  , w = t.alZrl(e.add(u, h));
                                i.drawRect(g.x, g.y, w.x - g.x, w.y - g.y)
                            }
                    }
                    i.endFill()
                }
            } else {
                if (this.layerMaskDirty) {
                    this.layerMaskDirty = !1,
                    i.clear(),
                    i.beginFill(16777215, 1),
                    Vr(i, 0, 0, 1024, 1024);
                    const l = a.kXM.HWU();
                    for (let c = 0; c < l.length; c++) {
                        const m = l[c];
                        if (m.active)
                            for (let h = 0; h < m.mask.length; h++) {
                                const u = m.mask[h]
                                  , g = e.mul(e.sub(u.max, u.min), .5)
                                  , w = e.add(u.min, g)
                                  , y = w.x - g.x
                                  , _ = w.y - g.y
                                  , S = g.x * 2
                                  , b = g.y * 2;
                                i.beginHole(),
                                Vr(i, y, _, S, b),
                                i.endHole()
                            }
                    }
                    i.endFill()
                }
                const o = t.alZrl(e.create(0, 0))
                  , s = t.dFeFi(1);
                i.position.set(o.x, o.y),
                i.scale.set(s, -s)
            }
        }
        redrawDebugLayerMask(t, a) {
            const i = this.debugLayerMask;
            i.clear(),
            i.beginFill(16711935, 1);
            const o = a.kXM.HWU();
            for (let c = 0; c < o.length; c++) {
                const m = o[c];
                if (m.active)
                    for (let h = 0; h < m.mask.length; h++) {
                        const u = m.mask[h]
                          , g = e.mul(e.sub(u.max, u.min), .5)
                          , w = e.add(u.min, g)
                          , y = w.x - g.x
                          , _ = w.y - g.y
                          , S = g.x * 2
                          , b = g.y * 2;
                        Vr(i, y, _, S, b)
                    }
            }
            i.endFill();
            const s = t.alZrl(e.create(0, 0));
            t.alZrl(e.create(1, 0));
            const l = t.dFeFi(1);
            i.position.set(s.x, s.y),
            i.scale.set(l, -l)
        }
        lCPzxG(t, a, i, o) {
            const s = this.layer > 0 ? 1 : 0;
            this.layerAlpha += Ti(this.layerAlpha, s, t * 12);
            const l = this.layer == 1 && this.underground ? 1 : 0;
            this.groundAlpha += Ti(this.groundAlpha, l, t * 12),
            this.layers[0].alpha = 1,
            this.layers[1].alpha = this.layerAlpha,
            this.layers[2].alpha = 1,
            this.layers[3].alpha = 1,
            this.ground.alpha = this.groundAlpha,
            this.layers[0].visible = this.groundAlpha < 1,
            this.layers[1].visible = this.layerAlpha > 0,
            this.ground.visible = this.groundAlpha > 0,
            this.redrawLayerMask(a, i);
            const c = this.layer == 0;
            c && !this.layerMaskActive ? (this.layers[2].mask = this.layerMask,
            this.layers[2].addChild(this.layerMask),
            this.layerMaskActive = !0) : !c && this.layerMaskActive && (this.layers[2].mask = null,
            this.layers[2].removeChild(this.layerMask),
            this.layerMaskActive = !1);
            for (let m = 0; m < this.layers.length; m++)
                this.layers[m].checkSort()
        }
    }
    class zn extends ue {
        constructor(t="") {
            super(),
            this.debugName = t
        }
        dirty = !0;
        addSortedChild(t) {
            this.addChild(t),
            this.dirty = !0
        }
        checkSort() {
            return this.dirty ? (this.children.sort( (t, a) => t.__zOrd == a.__zOrd ? t.__zIdx - a.__zIdx : t.__zOrd - a.__zOrd),
            this.dirty = !1,
            !0) : !1
        }
    }
    const rr = 2
      , Mi = 1e-5;
    class vn {
        constructor(t, a) {
            this.input = t,
            this.config = a;
            const i = function(m, h) {
                const u = he.from("pad.img");
                return u.anchor.set(.5, .5),
                u.scale.set(1, 1),
                u.alpha = .2,
                u.visible = !1,
                u.tint = h,
                m.addChild(u),
                u
            }
              , o = () => ({
                touched: !1,
                centerPos: e.create(0, 0),
                touchPos: e.create(0, 0),
                centerSprite: i(this.container, 0),
                touchSprite: i(this.container, 16777215)
            });
            this.touchPads = [o(), o()];
            const s = function(m) {
                return ["locked", "anywhere"].includes(m) ? m : "anywhere"
            }
              , l = s(a.get("touchMoveStyle"))
              , c = s(a.get("touchAimStyle"));
            this.setMoveStyle(l),
            this.setAimStyle(c),
            this.setTouchAimLine(!!a.get("touchAimLine")),
            this.init()
        }
        container = new ue;
        lineSprites = new In;
        padScaleBase = 1;
        padScaleDown = .6;
        padScalePos = .25;
        moveDetected = !1;
        shotDetected = !1;
        shotDetectedOld = !1;
        touchingAim = !1;
        display = !0;
        moveStyle = "locked";
        aimStyle = "locked";
        touchAimLine = !0;
        touchPads;
        playerMovement = {
            left: !1,
            right: !1,
            up: !1,
            down: !1,
            moveLen: 0
        };
        analogMovement = {
            toMoveDir: e.create(1, 0),
            toMoveLen: 0
        };
        aimMovement = {
            toAimDir: e.create(1, 0),
            toAimLen: 0
        };
        leftLockedPadCenter = e.create(0, 0);
        rightLockedPadCenter = e.create(0, 0);
        padPosBase = 48;
        padPosRange = 0;
        movePadDetectMult = 1;
        shotPadDetectMult = 1.075;
        turnDirCooldown = .5;
        turnDirTicker = 0;
        mobileOffsetLandscape = 25;
        mobileOffsetPortrait = 100;
        lockedPadOffsetLandscape = e.create(126, 100);
        lockedPadOffsetPortrait = e.create(96, 160);
        lockedPadOffsetYLandscapeSafari = 120;
        lockedPadOffsetYPortraitSafari = 240;
        getTouchMovement(t) {
            return this.getMovement(t)
        }
        getAimMovement(t, a) {
            const i = t.sUpm.nUn == F.WeaponSlot.Throwable;
            return this.getAim(i, a)
        }
        setAimDir(t) {
            this.aimMovement.toAimDir = e.copy(t)
        }
        getMovement(t) {
            let a = null, i = null, o = !1, s;
            this.moveDetected = !1;
            for (let c = 0; c < this.input.touches.length; c++) {
                const m = this.input.touches[c];
                if (!m.isDead && this.isLeftSideTouch(m.posDown.x, t)) {
                    const h = this.moveStyle == "anywhere" ? m.posDown : this.leftLockedPadCenter
                      , u = e.sub(m.pos, h)
                      , g = e.length(u);
                    if (g > rr) {
                        const w = (g - rr) / (this.padPosRange / this.movePadDetectMult - rr);
                        s = w > Mi ? e.div(u, w) : this.analogMovement.toMoveDir,
                        this.analogMovement = {
                            toMoveDir: e.create(s.x, s.y * -1),
                            toMoveLen: w
                        },
                        this.moveDetected = !0
                    }
                    i = this.getConstrainedPos(h, m.pos, g),
                    a = h,
                    o = !0;
                    break
                }
            }
            const l = this.touchPads[0];
            return l.touched = o,
            o && this.moveStyle == "anywhere" ? l.centerPos = e.copy(a) : l.centerPos = e.copy(this.leftLockedPadCenter),
            l.touchPos.x = o ? i.x : this.leftLockedPadCenter.x,
            l.touchPos.y = o ? i.y : this.leftLockedPadCenter.y,
            this.analogMovement
        }
        getAim(t, a) {
            let i = !1, o = null, s = null, l;
            for (let m = 0; m < this.input.touches.length; m++) {
                const h = this.input.touches[m];
                if (!h.isDead && !this.isLeftSideTouch(h.posDown.x, a)) {
                    const u = this.aimStyle == "anywhere" ? h.posDown : this.rightLockedPadCenter
                      , g = e.sub(h.pos, u)
                      , w = e.length(g);
                    if (w > rr) {
                        const y = e.sub(h.pos, u)
                          , _ = e.length(y);
                        l = _ > Mi ? e.div(y, _) : this.aimMovement.toAimDir,
                        this.aimMovement = {
                            toAimDir: e.create(l.x, l.y * -1),
                            toAimLen: _
                        }
                    } else
                        this.aimMovement.toAimLen = 0;
                    s = this.getConstrainedPos(u, h.pos, w),
                    o = u,
                    i = !0;
                    break
                }
            }
            this.shotDetectedOld = this.shotDetected,
            this.shotDetected = this.aimMovement.toAimLen > this.padPosRange / this.shotPadDetectMult && i,
            this.touchingAim = i,
            t && this.shotDetectedOld && i && (this.shotDetected = !0);
            const c = this.touchPads[1];
            return c.touched = i,
            i && this.aimStyle == "anywhere" ? c.centerPos = e.copy(o) : c.centerPos = e.copy(this.rightLockedPadCenter),
            c.touchPos.x = i ? s.x : this.rightLockedPadCenter.x,
            c.touchPos.y = i ? s.y : this.rightLockedPadCenter.y,
            {
                aimMovement: this.aimMovement,
                touched: c.touched
            }
        }
        lCPzxG(t, a, i, o, s) {
            for (let l = 0; l < this.touchPads.length; l++) {
                const c = this.touchPads[l];
                c.centerSprite.position.x = c.centerPos.x,
                c.centerSprite.position.y = c.centerPos.y,
                c.centerSprite.scale.x = this.padScaleBase * this.padScaleDown,
                c.centerSprite.scale.y = this.padScaleBase * this.padScaleDown,
                c.centerSprite.visible = D.touch && this.display,
                c.touchSprite.position.x = c.touchPos.x,
                c.touchSprite.position.y = c.touchPos.y,
                c.touchSprite.scale.x = this.padScaleBase * this.padScalePos,
                c.touchSprite.scale.y = this.padScaleBase * this.padScalePos,
                c.touchSprite.visible = D.touch && this.display
            }
            this.lineSprites.update(this, a, i, o, s)
        }
        isLeftSideTouch(t, a) {
            return t < a.llqJG * .5
        }
        getConstrainedPos(t, a, i) {
            if (i <= this.padPosRange)
                return a;
            const o = a.x - t.x
              , s = a.y - t.y
              , l = Math.atan2(s, o);
            return e.create(Math.cos(l) * this.padPosRange + t.x, Math.sin(l) * this.padPosRange + t.y)
        }
        getConstrainedPosDown(t, a, i) {
            const o = e.normalizeSafe(a);
            return e.add(t, e.mul(o, Math.max(0, i - this.padPosRange)))
        }
        toggleMoveStyle() {
            this.setMoveStyle(this.moveStyle == "locked" ? "anywhere" : "locked")
        }
        setMoveStyle(t) {
            this.moveStyle = t,
            this.config.set("touchMoveStyle", t);
            const a = document.getElementById("btn-game-move-style");
            a && (this.moveStyle == "locked" ? (a.classList.remove("unlocked-on-icon"),
            a.classList.add("locked-on-icon")) : (a.classList.remove("locked-on-icon"),
            a.classList.add("unlocked-on-icon")))
        }
        toggleAimStyle() {
            this.setAimStyle(this.aimStyle == "locked" ? "anywhere" : "locked")
        }
        setAimStyle(t) {
            this.aimStyle = t,
            this.config.set("touchAimStyle", t);
            const a = document.getElementById("btn-game-aim-style");
            this.aimStyle == "locked" ? (a.classList.remove("unlocked-on-icon"),
            a.classList.add("locked-on-icon")) : (a.classList.remove("locked-on-icon"),
            a.classList.add("unlocked-on-icon"))
        }
        toggleAimLine() {
            this.setTouchAimLine(!this.touchAimLine)
        }
        setTouchAimLine(t) {
            this.touchAimLine = t,
            this.config.set("touchAimLine", this.touchAimLine);
            const a = document.getElementById("btn-game-aim-line");
            this.touchAimLine ? (a.classList.remove("aim-line-off-icon"),
            a.classList.add("aim-line-on-icon")) : (a.classList.remove("aim-line-on-icon"),
            a.classList.add("aim-line-off-icon"))
        }
        init() {
            this.resize()
        }
        resize() {
            const t = D.isLandscape
              , a = this.lockedPadOffsetLandscape
              , i = this.lockedPadOffsetPortrait;
            D.tablet && (a.x = a.x * 1,
            i.x = i.x * 1.25);
            const o = e.create(a.x, a.y)
              , s = e.create(i.x, i.y)
              , l = e.create(D.screenWidth - a.x, a.y)
              , c = e.create(D.screenWidth - i.x, i.y);
            if (D.os == "ios")
                if (D.model == "iphonex")
                    o.x = o.x + 56,
                    l.x = l.x - 56,
                    o.y = o.y * .9,
                    l.y = l.y * .9;
                else {
                    let u = this.lockedPadOffsetYLandscapeSafari
                      , g = this.lockedPadOffsetYPortraitSafari;
                    D.tablet && (u *= 1,
                    g *= 1),
                    o.y = u,
                    s.y = g,
                    l.y = u,
                    c.y = g
                }
            this.padScaleBase = t ? 1 : .8,
            this.padPosRange = this.padPosBase * this.padScaleBase;
            const m = t ? o : s;
            this.leftLockedPadCenter = e.create(m.x, D.screenHeight - m.y);
            const h = t ? l : c;
            this.rightLockedPadCenter = e.create(h.x, D.screenHeight - h.y),
            this.setMobileStyling(t)
        }
        setMobileStyling(t) {
            if (D.touch && (d("#btn-touch-styles").find(".btn-game-container").css("display", "inline-block"),
            d("#ui-emote-button").css("display", "block")),
            D.uiLayout == D.UiLayout.Sm ? (d("#ui-map-wrapper").addClass("ui-map-wrapper-mobile").removeClass("ui-map-wrapper-desktop"),
            d("#ui-settings-container-mobile").css("display", "block"),
            d("#ui-settings-container-desktop").css("display", "none"),
            d("#ui-right-center").addClass("ui-right-center-mobile").removeClass("ui-right-center-desktop"),
            d("#ui-leaderboard-wrapper").css("display", "none"),
            d("#big-map-close").css("display", "block"),
            d("#ui-game-menu").removeClass("ui-game-menu-desktop"),
            d("#btn-game-tabs").css("display", "none"),
            d("#ui-game-tab-settings").removeClass("ui-game-tab-settings-desktop"),
            d(".ui-ability-key").css("display", "none")) : (d("#ui-map-wrapper").removeClass("ui-map-wrapper-mobile").addClass("ui-map-wrapper-desktop"),
            d("#ui-settings-container-mobile").css("display", "none"),
            d("#ui-settings-container-desktop").css("display", "block"),
            d("#ui-right-center").removeClass("ui-right-center-mobile").addClass("ui-right-center-desktop"),
            d("#ui-leaderboard-wrapper").css("display", "block"),
            d("#big-map-close").css("display", "none"),
            d("#ui-game-menu").addClass("ui-game-menu-desktop"),
            d("#btn-game-tabs").css("display", "flex"),
            d("#ui-game-tab-settings").addClass("ui-game-tab-settings-desktop"),
            d(".ui-ability-key").css("display", "block")),
            D.tablet && (t ? (D.os == "ios" ? (d("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-browser"),
            d("#ui-right-center").addClass("ui-right-center-tablet-ipad-browser")) : (d("#ui-bottom-right").addClass("ui-bottom-right-tablet"),
            d("#ui-right-center").addClass("ui-right-center-tablet")),
            d("#ui-bottom-center-left").addClass("ui-bottom-center-left-tablet"),
            d("#ui-bottom-center-right").addClass("ui-bottom-center-right-tablet"),
            d("#ui-top-left").addClass("ui-top-left-tablet"),
            d("#ui-spectate-options-wrapper").addClass("ui-spectate-options-wrapper-tablet"),
            d("#ui-killfeed-wrapper").addClass("ui-killfeed-wrapper-tablet"),
            d("#ui-kill-leader-wrapper").css("right", 144)) : (d("#ui-bottom-left").removeClass("ui-bottom-left-tablet"),
            d("#ui-bottom-right").removeClass("ui-bottom-right-tablet"),
            d("#ui-right-center").removeClass("ui-right-center-tablet"),
            d("#ui-bottom-center-right").removeClass("ui-bottom-center-right-tablet"),
            d("#ui-top-left").removeClass("ui-top-left-tablet"),
            d("#ui-spectate-options-wrapper").removeClass("ui-spectate-options-wrapper-tablet"),
            d("#ui-killfeed-wrapper-wrapper").removeClass("ui-killfeed-wrapper-tablet"))),
            D.os == "ios")
                if (D.model == "iphonex") {
                    const a = D.isLandscape ? "99%" : "90%"
                      , i = D.isLandscape ? 0 : 32;
                    d("#ui-game").css({
                        height: a,
                        top: i
                    }),
                    d("#ui-stats-contents").css({
                        transform: "translate(-50%) scale(0.95)",
                        "transform-origin": "top"
                    }),
                    t ? d("#ui-game").css({
                        left: "50%",
                        transform: "translateX(-50%)",
                        width: "93%"
                    }) : d("#ui-game").css({
                        left: "",
                        transform: "",
                        width: ""
                    })
                } else if (window.navigator.standalone && !D.tablet)
                    d("#ui-game").css({
                        height: "95%"
                    });
                else {
                    let a = D.isLandscape ? "86%" : "82%";
                    D.tablet && (a = "100%"),
                    d("#ui-game").css({
                        height: a
                    }),
                    d("#ui-right-center, #ui-top-center-scopes-wrapper, #ui-top-center, #ui-menu-display").css({
                        "margin-top": 6
                    })
                }
            D.tablet || t ? (d("#ui-loot-50AE").insertBefore("#ui-loot-556mm"),
            d("#ui-loot-9mm").insertBefore("#ui-loot-556mm"),
            d("#ui-loot-308sub").insertBefore("#ui-loot-556mm"),
            d("#ui-loot-12gauge").insertBefore("#ui-loot-556mm"),
            d("#ui-loot-flare").insertBefore("#ui-loot-556mm"),
            d("#ui-loot-762mm").insertBefore("#ui-loot-556mm"),
            d("#ui-loot-45acp").insertBefore("#ui-loot-556mm")) : (d("#ui-loot-9mm").insertBefore("#ui-loot-45acp"),
            d("#ui-loot-12gauge").insertBefore("#ui-loot-45acp"),
            d("#ui-loot-762mm").insertBefore("#ui-loot-45acp"),
            d("#ui-loot-556mm").insertBefore("#ui-loot-45acp"),
            d("#ui-loot-50AE").insertBefore("#ui-loot-45acp"),
            d("#ui-loot-308sub").insertBefore("#ui-loot-45acp"),
            d("#ui-loot-flare").insertBefore("#ui-loot-45acp"))
        }
        hideAll() {
            this.display = !1
        }
    }
    class In {
        container = new ue;
        dots = [];
        constructor() {
            this.container.visible = !1
        }
        createDot() {
            const t = new he;
            return t.texture = K.from("dot.img"),
            t.anchor.set(.5, .5),
            t.position.set(0, 0),
            t.scale.set(1, 1),
            t.tint = 16777215,
            t.alpha = 1,
            t.visible = !1,
            t
        }
        update(t, a, i, o, s) {
            const l = D.touch && t.touchingAim && t.touchAimLine;
            if (l) {
                const c = a.tuWDuv.bmrW
                  , m = U[c];
                let h = 30;
                if (m.type == "gun") {
                    const q = Xt[m.bulletType].distance;
                    h = m.barrelLength + q
                }
                const u = a.FKT()
                  , g = Math.sqrt(u * 1.414 * u);
                h = k.min(h, g);
                const w = e.copy(a.XafO);
                let y = e.add(w, e.mul(a.HIXJp, h));
                const _ = i.CcKuBx.HWU();
                for (let q = 0; q < _.length; q++) {
                    const E = _[q];
                    if (E.active && !E.dead && E.height >= F.bullet.height && E.collidable && !E.isWindow && f.sameLayer(a.layer, E.layer) && (m.type != "throwable" || E.height > F.projectile.maxHeight)) {
                        const L = n.intersectSegment(E.collider, w, y);
                        if (L) {
                            const M = e.length(e.sub(L.point, w));
                            M < h && (h = M,
                            y = L.point)
                        }
                    }
                }
                const S = 3.5
                  , b = 1.5
                  , A = e.length(e.sub(y, w))
                  , P = Math.max(Math.ceil((A - S) / b), 0);
                for (; this.dots.length < P; ) {
                    const q = this.createDot();
                    this.container.addChild(q),
                    this.dots.push(q)
                }
                for (let q = 0; q < this.dots.length; q++) {
                    const E = this.dots[q]
                      , L = S + q * b
                      , M = e.add(a.XafO, e.mul(a.HIXJp, L))
                      , O = 1 / 32 * .375;
                    E.position.set(M.x, M.y),
                    E.scale.set(O, O),
                    E.visible = q < P
                }
                const T = o.alZrl(e.create(0, 0))
                  , I = o.alZrl(e.create(1, 1))
                  , C = e.sub(I, T);
                this.container.position.set(T.x, T.y),
                this.container.scale.set(C.x, C.y),
                this.container.alpha = .3,
                s.addPIXIObj(this.container, a.layer, 19, 0)
            }
            this.container.visible = l
        }
    }
    class Tn {
        constructor(t) {
            this.mapSpriteBarn = t
        }
        mapIndicators = [];
        idToMapIdicator = {};
        updateIndicatorData(t) {
            for (let a = 0; a < t.length; a++) {
                const i = t[a];
                i.dead ? this.removeIndicator(i.id) : this.updateIndicator(i)
            }
        }
        addIndicator(t) {
            const a = {
                id: t.id,
                type: t.type,
                pos: e.copy(t.pos),
                equipped: t.equipped,
                mapSprite: this.mapSpriteBarn.addSprite(),
                pulseSprite: this.mapSpriteBarn.addSprite(),
                pulseScale: .5,
                pulseScaleMin: .5,
                pulseScaleMax: 1,
                pulseTicker: 0,
                pulseDir: 1,
                pulseSpeed: .3
            };
            return this.mapIndicators.push(a),
            this.idToMapIdicator[t.id] = a,
            a
        }
        removeIndicator(t) {
            for (let a = 0; a < this.mapIndicators.length; a++) {
                const i = this.mapIndicators[a];
                if (i.id == t) {
                    i.mapSprite.free(),
                    i.pulseSprite.free(),
                    this.mapIndicators.splice(a, 1),
                    delete this.idToMapIdicator[t];
                    break
                }
            }
        }
        updateIndicator(t) {
            let a = this.idToMapIdicator[t.id];
            a ||= this.addIndicator(t),
            a.pos = e.copy(t.pos),
            a.equipped = t.equipped;
            const i = U[a.type]
              , o = (D.uiLayout == D.UiLayout.Sm ? .15 : .2) * 1.25
              , s = a.equipped ? 655350 : 1
              , l = a.mapSprite;
            if (l.pos = e.copy(a.pos),
            l.scale = o,
            l.alpha = 1,
            l.zOrder = s,
            l.visible = !0,
            l.sprite.texture = K.from(i.mapIndicator?.sprite),
            l.sprite.tint = i.mapIndicator?.tint ?? 16777215,
            i.mapIndicator?.pulse) {
                const c = a.pulseSprite;
                c.pos = e.copy(a.pos),
                c.scale = 1,
                c.zOrder = s - 1,
                c.visible = !0,
                c.sprite.texture = K.from("part-pulse-01.img"),
                c.sprite.tint = i.mapIndicator.pulseTint
            }
        }
        updateIndicatorPulses(t) {
            for (let a = 0; a < this.mapIndicators.length; a++) {
                const i = this.mapIndicators[a];
                i.pulseTicker = k.clamp(i.pulseTicker + t * i.pulseDir * i.pulseSpeed, i.pulseScaleMin, 1),
                i.pulseScale = i.pulseTicker * i.pulseScaleMax,
                (i.pulseScale >= i.pulseScaleMax || i.pulseTicker <= i.pulseScaleMin) && (i.pulseDir *= -1),
                i.pulseSprite.scale = i.pulseScale,
                i.pulseSprite.visible = i.equipped
            }
        }
    }
    class Mn extends he {
        __zOrder = -1;
        constructor() {
            super()
        }
    }
    class Cn {
        active = !1;
        retained = !0;
        sprite = new Mn;
        pos = e.create(0, 0);
        scale = 1;
        alpha = 1;
        visible = !0;
        pulse = !1;
        lifetime = 0;
        ticker = 0;
        zOrder = 0;
        constructor() {
            this.sprite.anchor.set(.5, .5),
            this.sprite.scale.set(1, 1),
            this.sprite.visible = !1
        }
        init() {
            this.active = !0,
            this.retained = !0,
            this.pos = e.create(0, 0),
            this.scale = 1,
            this.alpha = 1,
            this.pulse = !1,
            this.visible = !0,
            this.lifetime = Number.MAX_VALUE,
            this.ticker = 0,
            this.zOrder = 0
        }
        free() {
            this.active = !1,
            this.sprite.visible = !1
        }
        release() {
            this.retained = !1
        }
    }
    class Pn {
        container = new ue;
        mapSprites = [];
        free() {
            for (let t = 0; t < this.mapSprites.length; t++) {
                const a = this.mapSprites[t].sprite;
                a.parent?.removeChild(a),
                a.destroy({
                    children: !0
                })
            }
        }
        addSprite() {
            let t = null;
            for (let a = 0; a < this.mapSprites.length; a++)
                if (!this.mapSprites[a].active) {
                    t = this.mapSprites[a];
                    break
                }
            return t || (t = new Cn,
            this.mapSprites.push(t),
            this.container.addChild(t.sprite)),
            t.init(),
            t
        }
        update(t, a, i) {
            let o = !1;
            for (let s = 0; s < this.mapSprites.length; s++) {
                const l = this.mapSprites[s];
                if (l.active) {
                    l.zOrder != l.sprite.__zOrder && (l.sprite.__zOrder = l.zOrder,
                    o = !0),
                    l.ticker += t,
                    l.pulse && (l.scale += t / 2.5);
                    const c = a.getMapPosFromWorldPos(l.pos, i)
                      , m = l.scale
                      , h = k.smoothstep(l.ticker, 0, .1) * (1 - k.smoothstep(l.ticker, l.lifetime - .5, l.lifetime));
                    l.sprite.position.set(c.x, c.y),
                    l.sprite.scale.set(m, m),
                    l.sprite.alpha = l.alpha * h,
                    l.sprite.visible = l.visible && l.sprite.alpha > 1e-4,
                    l.ticker >= l.lifetime && !l.retained && l.free()
                }
            }
            o && this.container.children.sort( (s, l) => s.__zOrder - l.__zOrder)
        }
    }
    const ar = 24;
    class An {
        container = new ue;
        timerBackground = he.from("timer-background.img");
        counterText = new Nt;
        gfx = new Re;
        labelText = new Nt;
        screenScaleFactor = 1;
        mobileOffset = 0;
        active = !1;
        label = "";
        elapsed = 0;
        duration = 0;
        constructor() {
            this.container.visible = !1,
            this.timerBackground.anchor.set(.5, .5),
            this.timerBackground.scale.set(1, 1),
            this.container.addChild(this.timerBackground),
            this.container.addChild(this.gfx),
            this.counterText.anchor.set(.5, .5),
            this.counterText.style = {
                fontFamily: "Roboto Condensed, Arial, sans-serif",
                fontWeight: "bold",
                fontSize: ar,
                align: "center",
                fill: 16777215,
                stroke: 0,
                strokeThickness: 3
            },
            this.container.addChild(this.counterText),
            this.labelText.anchor.set(.5, .5),
            this.labelText.style = {
                fontFamily: "Roboto Condensed, Arial, sans-serif",
                fontWeight: "100",
                fontSize: ar,
                align: "center",
                fill: 16777215
            },
            this.container.addChild(this.labelText)
        }
        destroy() {
            this.container.removeChild(this.timerBackground),
            this.timerBackground.destroy({
                children: !0
            }),
            this.container.destroy({
                children: !0,
                texture: !0
            })
        }
        start(t, a, i) {
            this.active = !0,
            this.label = t,
            this.elapsed = a,
            this.duration = i
        }
        stop() {
            this.active = !1
        }
        resize(t, a) {
            this.screenScaleFactor = a,
            D.uiLayout == D.UiLayout.Sm ? (D.tablet || this.container.scale.set(.5, .5),
            this.mobileOffset = D.isLandscape ? t.mobileOffsetLandscape : t.mobileOffsetPortrait) : (this.container.scale.set(1, 1),
            this.mobileOffset = 0)
        }
        update(t, a) {
            if (!this.active) {
                this.container.visible = !1;
                return
            }
            this.elapsed = k.min(this.elapsed + t, this.duration);
            const i = 56 + this.label.length * ar * .45
              , o = ar * 1.5
              , s = 0 - i / 2
              , l = 87.5 - o / 2
              , c = k.min(this.elapsed / this.duration, 1) * Math.PI * 2 - Math.PI * .5;
            this.gfx.clear(),
            this.gfx.beginFill(0, .5),
            this.gfx.drawRoundedRect(s, l, i, o, 5),
            this.gfx.endFill(),
            this.gfx.lineStyle(6, 16777215),
            this.gfx.arc(0, 0, 35, -Math.PI * .5, c, !1),
            this.counterText.text = k.max(0, this.duration - this.elapsed).toFixed(1),
            this.labelText.position.y = 87.5,
            this.labelText.text = this.label,
            this.container.position.set(a.llqJG / 2, a.Nsps / 3 * this.screenScaleFactor + this.mobileOffset),
            this.container.visible = !0
        }
    }
    function Ci(r) {
        const t = Math.floor(r / 3600)
          , a = Math.floor(r / 60) % 60
          , i = Math.floor(r) % 60;
        let o = "";
        return t > 0 && (o += `${t}h `),
        (t > 0 || a > 0) && (o += `${a}m `),
        o += `${i}s`
    }
    function Hr(r, t, a, i) {
        const o = r + (t - r) / a * i;
        return Math.floor(o)
    }
    class qt {
        constructor(t, a, i) {
            this.r = t,
            this.g = a,
            this.b = i
        }
        getColors() {
            return {
                r: this.r,
                g: this.g,
                b: this.b
            }
        }
    }
    class Dn {
        constructor(t, a, i, o, s, l, c, m, h) {
            this.game = t,
            this.audioManager = a,
            this.particleBarn = i,
            this.planeBarn = o,
            this.localization = s,
            this.canvasMode = l,
            this.touch = c,
            this.inputBinds = m,
            this.inputBindUi = h,
            this.game = t,
            this.particleBarn = i,
            this.localization = s,
            this.touch = c,
            this.inputBinds = m,
            this.inputBindUi = h,
            this.roleMenuConfirm.on("click", y => {
                y.stopPropagation(),
                this.roleSelected = this.roleDisplayed,
                this.setRoleMenuActive(!1)
            }
            ),
            d("#ui-map-wrapper").css("display", "block"),
            d("#ui-team").css("display", "block"),
            d(".ui-map-expand").on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            d(".ui-map-expand").on("click", y => {
                D.touch ? this.bigmapDisplayed || this.displayMapLarge() : D.uiLayout == D.UiLayout.Lg && this.displayMapLarge(this.bigmapDisplayed)
            }
            ),
            d("#ui-map-minimize").on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            d("#ui-map-minimize").on("click", y => {
                y.stopPropagation(),
                this.toggleMiniMap()
            }
            ),
            d("#ui-menu-display").on("click", y => {
                y.stopPropagation(),
                this.toggleEscMenu()
            }
            ),
            this.moveStyleButton.on("touchstart", () => {
                c.toggleMoveStyle()
            }
            ),
            this.aimStyleButton.on("touchstart", () => {
                c.toggleAimStyle()
            }
            ),
            this.aimLineButton.on("touchstart", () => {
                c.toggleAimLine()
            }
            ),
            this.onTouchScreen = y => {
                y.target?.id == "cvs" && this.toggleEscMenu(!0)
            }
            ,
            d(document).on("touchstart", this.onTouchScreen),
            this.bigmapClose = d("#big-map-close"),
            this.bigmapClose.on("touchend", y => {
                y.stopPropagation(),
                this.displayMapLarge(!0)
            }
            ),
            this.bigmapClose.on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            this.bigmapClose.on("click", y => {
                y.stopPropagation(),
                this.displayMapLarge(!0)
            }
            ),
            this.gameTabBtns.on("click", y => {
                this.setCurrentGameTab(d(y.target).data("tab"))
            }
            ),
            this.setCurrentGameTab(this.currentGameTab),
            this.fullScreenButton.on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            this.fullScreenButton.on("click", () => {
                re.toggleFullScreen(),
                this.toggleEscMenu()
            }
            ),
            D.os == "ios",
            D.touch,
            this.resumeButton.on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            this.resumeButton.on("click", () => {
                this.toggleEscMenu()
            }
            ),
            D.touch && this.resumeButton.css("display", "none"),
            d("#btn-spectate-quit").on("click", () => {
                this.quitGame()
            }
            ),
            d("#btn-game-quit").on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            d("#btn-game-quit").on("click", () => {
                this.game.dYQsO = !0,
                this.game.WXej = 1,
                this.quitGame()
            }
            ),
            this.specStatsButton.on("click", () => {
                this.toggleLocalStats()
            }
            ),
            this.specNextButton.on("click", () => {
                this.specNext = !0
            }
            ),
            this.specPrevButton.on("click", () => {
                this.specPrev = !0
            }
            ),
            this.interactionElems.css("pointer-events", "auto"),
            this.interactionElems.on("touchstart", y => {
                y.stopPropagation(),
                this.interactionTouched = !0
            }
            ),
            this.reloadElems.css("pointer-events", "auto"),
            this.reloadElems.on("touchstart", y => {
                y.stopPropagation(),
                this.reloadTouched = !0
            }
            ),
            this.gasRenderer = new ho(l,0),
            this.resetWeapSlotStyling = () => {
                this.weapDraggedDiv && (this.weapSwitches.css({
                    left: "",
                    top: ""
                }),
                d("#ui-game").css({
                    "pointer-events": ""
                })),
                this.weapDraggedDiv = null,
                this.weapDragging = !1,
                this.weapDropped = !1,
                this.weapSwitches.hasClass("ui-weapon-dragged") && this.weapSwitches.removeClass("ui-weapon-dragged"),
                this.weapNoSwitches.hasClass("ui-outline-hover") || this.weapNoSwitches.addClass("ui-outline-hover")
            }
            ,
            D.touch || (this.weapSwitches.on("mousedown", y => {
                const _ = y.currentTarget;
                y.button == 0 && (this.weapDraggedDiv = d(_),
                this.weapDraggedId = d(_).data("slot"))
            }
            ),
            d("#ui-game").on("mousemove", y => {
                this.weapDraggedDiv && !this.weapDropped && (this.weapDragging ? (this.weapDraggedDiv.css({
                    left: y.pageX - 80,
                    top: y.pageY - 30
                }),
                this.weapDraggedDiv.addClass("ui-weapon-dragged")) : (d("#ui-game").css({
                    "pointer-events": "initial"
                }),
                this.weapNoSwitches.removeClass("ui-outline-hover"),
                this.weapDragging = !0))
            }
            ),
            d("#ui-game, #ui-weapon-id-1, #ui-weapon-id-2").on("mouseup", y => {
                y.button == 0 && this.weapDraggedDiv != null && (this.weapSwitches.each( () => {
                    const _ = d(y.currentTarget).data("slot");
                    d(y.currentTarget).is(":hover") && this.weapDraggedId != _ && (this.swapWeapSlots = !0,
                    this.weapDropped = !0)
                }
                ),
                this.swapWeapSlots || this.resetWeapSlotStyling())
            }
            )),
            this.mapIndicatorBarn = new Tn(this.mapSpriteBarn),
            this.container.mask = new Re,
            this.display = {
                gas: this.gasRenderer.display,
                gasSafeZone: this.gasSafeZoneRenderer.display,
                airstrikeZones: o.airstrikeZoneContainer,
                mapSprites: this.mapSpriteBarn.container,
                teammates: new ue,
                player: new ue,
                border: new Re
            },
            this.mapSprite.anchor = new ua(.5,.5),
            this.container.addChild(this.mapSprite),
            this.container.addChild(this.display.gas),
            this.container.addChild(this.display.gasSafeZone),
            this.container.addChild(this.display.airstrikeZones),
            this.container.addChild(this.display.mapSprites),
            this.container.addChild(this.display.teammates),
            this.container.addChild(this.display.player),
            this.container.addChild(this.display.border);
            const u = this.getMinimapMargin()
              , g = this.getMinimapSize();
            this.minimapPos = e.create(u + g / 2, t.kPOw.Nsps - g / 2 - u),
            this.muteButtonImage = this.muteButton.find("img");
            const w = this.audioManager.mute;
            this.muteButtonImage.attr("src", w ? this.muteOffImg : this.muteOnImg),
            this.muteButton.on("mousedown", y => {
                y.stopPropagation()
            }
            ),
            this.muteButton.on("click", y => {
                let _ = this.audioManager.muteToggle();
                this.muteButtonImage.attr("src", _ ? this.muteOffImg : this.muteOnImg),
                _ = null
            }
            ),
            this.teamMemberHealthBarWidth = parseInt(d(".ui-team-member-health").find(".ui-bar-inner").css("width"));
            for (let y = 0; y < 4; y++) {
                const _ = this.topLeft
                  , S = y;
                this.teamSelectors.push({
                    teamNameHtml: "",
                    groupId: d(_).find(`[data-id=${S}]`),
                    groupIdDisplayed: !1,
                    teamName: d(_).find(`[data-id=${S}]`).find(".ui-team-member-name"),
                    teamIcon: d(_).find(`[data-id=${S}]`).find(".ui-team-member-icon"),
                    teamStatus: d(_).find(`[data-id=${S}]`).find(".ui-team-member-status"),
                    teamHealthInner: d(_).find(`[data-id=${S}]`).find(".ui-health-actual"),
                    teamColor: d(_).find(`[data-id=${S}]`).find(".ui-team-member-color"),
                    playerId: 0,
                    prevHealth: 0,
                    prevStatus: {
                        disconnected: !1,
                        dead: !1,
                        downed: !1,
                        role: ""
                    },
                    indicators: {
                        main: {
                            elem: d("#ui-team-indicators").find(`.ui-indicator-main[data-id=${S}]`),
                            displayed: !1
                        }
                    }
                })
            }
            this.init()
        }
        MzMpx = new An;
        gameElem = d("#ui-game");
        statsMain = d("#ui-stats");
        statsElem = d("#ui-stats-bg");
        statsContentsContainer = d("#ui-stats-contents");
        statsContents = d("#ui-stats-contents-inner");
        statsHeader = d("#ui-stats-header");
        statsInfoBox = d("#ui-stats-info-box");
        statsOptions = d("#ui-stats-options");
        statsAds = d(".ui-stats-ad-container");
        statsLogo = d("#ui-stats-logo");
        escMenuElem = d("#ui-game-menu");
        escMenuDisplayed = !1;
        roleMenuElemWrapper = d("#ui-role-menu-wrapper");
        roleMenuElem = d("#ui-role-menu");
        roleMenuFooterEnterElem = d("#ui-role-footer-enter");
        roleMenuFooterHtml = "";
        roleMenuActive = !1;
        roleMenuDisplayed = !1;
        roleMenuTicker = 0;
        roleDisplayed = "";
        roleSelected = "";
        roleMenuConfirm = d("#ui-role-footer-enter");
        roleMenuInst = null;
        topLeft = d("#ui-top-left");
        waitingForPlayers = !0;
        waitingText = d("#ui-waiting-text");
        spectating = !1;
        prevSpectatorCount = 0;
        spectatorCount = 0;
        spectatorCounterDisplayed = !1;
        spectatorCounterContainer = d("#ui-spec-counter");
        spectatorCounter = d("#ui-spec-counter-number");
        spectateMode = d(".ui-spectate-mode");
        spectatedPlayerText = d("#ui-spectate-text");
        spectatedPlayerName = "";
        spectatedPlayerId = 0;
        spectateModeStats = d("#ui-spectate-stats");
        spectateModeStatsData = d("#ui-spectate-stats-data");
        spectateOptionsWrapper = d("#ui-spectate-options-wrapper");
        rightCenter = d("#ui-right-center");
        leaderboardAlive = d("#ui-leaderboard-alive");
        playersAlive = d(".js-ui-players-alive");
        leaderboardAliveFaction = d("#ui-leaderboard-alive-faction");
        playersAliveRed = d(".js-ui-players-alive-red");
        playersAliveBlue = d(".js-ui-players-alive-blue");
        playersAliveRedCounter = 0;
        playersAliveBlueCounter = 0;
        playerKills = d(".js-ui-player-kills");
        announcement = d("#ui-announcement");
        killLeaderName = d("#ui-kill-leader-name");
        killLeaderCount = d("#ui-kill-leader-count");
        mapContainer = d("#ui-map-container");
        mapContainerBottom = 52;
        mapInfo = d("#ui-map-info");
        mapInfoBottom = 218;
        gasState = {};
        gasIcon = d("#ui-gas-icon");
        gasTimer = d("#ui-gas-timer");
        mapMinimizeButton = d("#ui-map-minimize");
        menuDisplayButton = d("#ui-menu-display");
        bottomCenterRight = d("#ui-bottom-center-right");
        actionSeq = -1;
        displayMapDirty = !1;
        displayMapClear = !1;
        gameTabs = d(".ui-game-tab");
        gameTabBtns = d(".btn-game-tab-select");
        gameKeybindBtns = d(".btn-keybind-desc");
        currentGameTab = "settings";
        onTouchScreen;
        bigmap = d("#big-map");
        bigmapCollision = d("#big-map-collision");
        bigmapClose = d("#big-map-close");
        moveStyleButton = d("#btn-game-move-style");
        aimLineButton = d("#btn-game-aim-line");
        aimStyleButton = d("#btn-game-aim-style");
        fullScreenButton = d("#btn-game-fullscreen");
        resumeButton = d("#btn-game-resume");
        specStatsButton = d("#btn-spectate-view-stats");
        specBegin = !1;
        specNext = !1;
        specPrev = !1;
        specNextButton = d("#btn-spectate-next-player");
        specPrevButton = d("#btn-spectate-prev-player");
        interactionElems = d("#ui-interaction-press, #ui-interaction");
        interactionTouched = !1;
        reloadElems = d("#ui-current-clip, #ui-remaining-ammo, #ui-reload-button-container");
        reloadTouched = !1;
        flairElems = d(".ui-health-flair");
        flairId = 0;
        healthRed = new qt(255,0,0);
        healthDarkpink = new qt(255,45,45);
        healthLightpink = new qt(255,112,112);
        healthWhite = new qt(255,255,255);
        healthGrey = new qt(179,179,179);
        minimapDisplayed = !0;
        visibilityMode = 0;
        hudVisible = !0;
        gasRenderer;
        gasSafeZoneRenderer = new ec;
        sentAdStatus = !1;
        frame = 0;
        weapsDirty = !1;
        weapSwitches = d("#ui-weapon-id-1, #ui-weapon-id-2");
        weapNoSwitches = d("#ui-weapon-id-3, #ui-weapon-id-4");
        weapDraggedId = 0;
        swapWeapSlots = !1;
        weapDraggedDiv = null;
        weapDragging = !1;
        weapDropped = !1;
        mapSpriteBarn = new Pn;
        mapIndicatorBarn;
        playerMapSprites = [];
        playerPingSprites = {};
        container = new ue;
        resetWeapSlotStyling;
        display;
        mapSprite = new he(K.EMPTY);
        bigmapDisplayed = !1;
        screenScaleFactor = 1;
        minimapPos;
        dead = !1;
        muteButton = d("#ui-mute-ingame");
        muteButtonImage;
        muteOffImg = "audio-off.img";
        muteOnImg = "audio-on.img";
        displayingStats = !1;
        teamMemberHealthBarWidth;
        teamMemberHeight = 48;
        groupPlayerCount = 0;
        teamSelectors = [];
        displayOldMapSprites = !1;
        AlR() {
            this.gasRenderer.free(),
            this.clearUI(),
            this.roleMenuConfirm.off("click"),
            d(".ui-role-option").off("click"),
            d(".ui-map-expand").off("mousedown"),
            d(".ui-map-expand").off("click"),
            d("#ui-map-minimize").off("mousedown"),
            d("#ui-map-minimize").off("click"),
            d("#ui-menu-display").off("click"),
            this.moveStyleButton.off("touchstart"),
            this.aimStyleButton.off("touchstart"),
            this.aimLineButton.off("touchstart"),
            d(document).off("touchstart", this.onTouchScreen),
            this.bigmapClose.off("touchend"),
            this.bigmapClose.off("mousedown"),
            this.bigmapClose.off("click"),
            this.gameTabBtns.off("click"),
            this.fullScreenButton.off("mousedown"),
            this.fullScreenButton.off("click"),
            this.resumeButton.off("mousedown"),
            this.resumeButton.off("click"),
            d("#btn-spectate-quit").off("click"),
            d("#btn-game-quit").off("mousedown"),
            d("#btn-game-quit").off("click"),
            this.specStatsButton.off("click"),
            this.specNextButton.off("click"),
            this.specPrevButton.off("click"),
            this.interactionElems.off("touchstart"),
            this.reloadElems.off("touchstart"),
            this.weapSwitches.off("mousedown"),
            d("#ui-game").off("mousemove"),
            d("#ui-game").off("mouseup"),
            d("#ui-weapon-id-1").off("mouseup"),
            d("#ui-weapon-id-2").off("mouseup"),
            this.muteButton.off("mousedown"),
            this.muteButton.off("click"),
            d(".ui-team-member-health").find(".ui-bar-inner").css("width", this.teamMemberHealthBarWidth),
            d("#ui-center").off("mouseenter mouseleave"),
            this.inputBinds.menuHovered = !1,
            this.hudVisible || this.cycleHud(),
            this.MzMpx.destroy(),
            this.clearStatsElems(),
            this.setRoleMenuActive(!1),
            this.init()
        }
        init() {
            d(".js-ui-map-hidden").css("display", "block"),
            d("#ui-map-counter-default").css("display", "inline-block"),
            d("#ui-map-counter-faction").css("display", "none"),
            this.flairElems.css("display", "none"),
            this.clearStatsElems(),
            this.setSpectating(!1),
            this.updateSpectatorCountDisplay(!0),
            this.resetWeapSlotStyling(),
            this.dead = !1;
            for (let t = 0; t < this.teamSelectors.length; t++)
                this.teamSelectors[t].teamColor.removeAttr("style")
        }
        onMapLoad(t, a) {
            this.resize(t, a);
            const i = t.getMapDef().gameMode.killLeaderEnabled;
            d("#ui-kill-leader-container").css("display", i ? "block" : "none"),
            D.mobile || d("#ui-killfeed-wrapper").css("top", i ? "60px" : "12px")
        }
        lCPzxG(t, a, i, o, s, l, c, m, h) {
            const u = a;
            this.weapsDirty && this.resetWeapSlotStyling(),
            this.weapsDirty = !1,
            this.mapIndicatorBarn.updateIndicatorPulses(t);
            const g = k.max(Math.floor(o.duration * (1 - o.circleT)), 0)
              , w = {
                mode: o.mode,
                time: g
            };
            if (this.gasState.mode != w.mode || this.gasState.time != w.time) {
                this.gasState = w;
                const T = this.gasState.mode == jt.Moving;
                this.mapInfo.removeClass("icon-pulse"),
                this.gasIcon.removeClass("gas-icon"),
                this.gasIcon.removeClass("danger-icon"),
                T && this.mapInfo.addClass("icon-pulse"),
                this.gasIcon.addClass(T ? "danger-icon" : "gas-icon");
                const I = Math.floor(this.gasState.time / 60)
                  , q = `0${this.gasState.time % 60}`.slice(-2);
                this.gasTimer.html(`${I}:${q}`)
            }
            if (this.spectatorCount = a.sUpm.TdSuL,
            this.updateSpectatorCountDisplay(!1),
            a.tuWDuv.veYmO && !this.dead && (this.dead = !0,
            this.MzMpx.stop()),
            (u.downed || this.dead) && this.resetWeapSlotStyling(),
            this.actionSeq != a.QBughF.seq && (this.actionSeq = a.QBughF.seq,
            this.MzMpx.stop(),
            a.QBughF.type != ge.None && !this.displayingStats)) {
                let T = ""
                  , I = ""
                  , C = "";
                switch (a.QBughF.type) {
                case ge.Reload:
                case ge.ReloadAlt:
                    U[a.QBughF.item] && (I = this.localization.translate("game-reloading"));
                    break;
                case ge.UseItem:
                    U[a.QBughF.item] && (I = this.localization.translate("game-using"),
                    C = this.localization.translate(`game-${a.QBughF.item}`));
                    break;
                case ge.Revive:
                    {
                        const q = l.getPlayerInfo(a.QBughF.targetId).name;
                        I = this.localization.translate("game-reviving"),
                        C = u.downed ? "" : q;
                        break
                    }
                }
                (I != "" || C != "") && (this.localization.translate("word-order") == "svo" ? (T += I || "",
                T += C ? ` ${C}` : "") : this.localization.translate("word-order") == "sov" && (T += C ? `${C} ` : "",
                T += I ? ` ${I}` : ""),
                this.MzMpx.start(T, a.QBughF.time, a.QBughF.duration))
            }
            this.bigmapDisplayed || (this.mapSprite.x = this.minimapPos.x + this.mapSprite.width / 2 - a.eCcoC.x / i.width * this.mapSprite.width,
            this.mapSprite.y = this.minimapPos.y - this.mapSprite.height / 2 + a.eCcoC.y / i.height * this.mapSprite.height);
            const y = e.create(c.llqJG * .5 / c.CZsM(), c.Nsps * .5 / c.CZsM())
              , _ = {
                min: e.sub(c.XafO, y),
                max: e.add(c.XafO, y)
            }
              , S = l.getPlayerInfo(a.__id).groupId
              , b = l.getGroupInfo(S);
            if (!b) {
                const T = {
                    playerId: a.__id,
                    groupId: S,
                    spectating: this.spectating,
                    playing: this.game.DVq,
                    groupInfo: l.groupInfo
                };
                console.error(`badTeamInfo_1: ${JSON.stringify(T)}`)
            }
            const A = D.uiLayout == D.UiLayout.Sm
              , P = b.playerIds.length;
            for (let T = 0; T < P; T++) {
                const I = this.teamSelectors[T]
                  , C = b.playerIds[T]
                  , q = l.getPlayerInfo(C)
                  , E = C == u.__id
                  , L = l.getPlayerStatus(C);
                if (L && m > We.Solo) {
                    I.groupIdDisplayed || (I.groupId.css("display", "block"),
                    I.groupIdDisplayed = !0),
                    this.updateTeam(T, re.htmlEscape(q.name), L.health, {
                        disconnected: L.disconnected,
                        dead: L.dead,
                        downed: L.downed,
                        role: L.role
                    }, q.playerId, q.teamId, l);
                    for (const M in I.indicators)
                        if (I.indicators.hasOwnProperty(M)) {
                            const O = I.indicators[M]
                              , H = O.elem;
                            let N = !0;
                            if ((!E || O.displayAll) && !h) {
                                const $ = L.pos
                                  , Q = e.normalizeSafe(e.sub($, c.XafO), e.create(1, 0))
                                  , W = le.intersectRayAabb(c.XafO, Q, _.min, _.max)
                                  , G = Math.atan2(Q.y, -Q.x) + Math.PI * .5
                                  , ee = c.alZrl(W)
                                  , fe = le.testCircleAabb($, F.player.radius, _.min, _.max);
                                if (!L.dead && !fe) {
                                    let we = 32
                                      , Ne = `translate(-50%, -50%) rotate(${G}rad)`;
                                    A && (we = 16,
                                    Ne += " scale(0.5)"),
                                    N = !1,
                                    H.css({
                                        left: k.clamp(ee.x, we, c.llqJG - we),
                                        top: k.clamp(ee.y, we, c.Nsps - we - 0),
                                        transform: Ne
                                    }),
                                    O.displayed || (H.css("display", "block"),
                                    O.displayed = !0)
                                }
                            }
                            N && O.displayed && (H.css("display", "none"),
                            O.displayed = !1)
                        }
                }
            }
            for (let T = P; T < this.teamSelectors.length; T++) {
                const I = this.teamSelectors[T];
                for (const C in I.indicators)
                    if (I.indicators.hasOwnProperty(C)) {
                        const q = I.indicators[C];
                        q.displayed && (q.elem.css("display", "none"),
                        q.displayed = !1)
                    }
                I.groupIdDisplayed && (I.groupId.css("display", "none"),
                I.groupIdDisplayed = !1)
            }
            if (i.factionMode) {
                const T = l.getPlayerInfo(u.__id);
                if (this.flairId != T.teamId) {
                    this.flairId = T.teamId;
                    const I = this.flairId == 1 ? "red" : "blue";
                    this.flairElems.css({
                        display: "block",
                        "background-image": `url(../img/gui/player-patch-${I}.svg)`
                    })
                }
            }
            if (m > We.Solo && this.groupPlayerCount != P && D.uiLayout == D.UiLayout.Lg ? (this.groupPlayerCount = P,
            this.spectateOptionsWrapper.css({
                top: this.groupPlayerCount * this.teamMemberHeight + 12
            })) : m == We.Solo && this.spectateOptionsWrapper.css({
                top: 12
            }),
            this.updatePlayerMapSprites(t, a, l, i),
            this.mapSpriteBarn.update(t, this, i),
            this.MzMpx.update(t, c),
            this.roleMenuActive) {
                this.roleMenuTicker -= t;
                const T = Math.ceil(this.roleMenuTicker)
                  , I = `${this.localization.translate("game-enter-game")} (${T})`;
                I != this.roleMenuFooterHtml && (this.roleMenuFooterEnterElem.html(I),
                this.roleMenuFooterHtml = I),
                !this.roleMenuInst && this.audioManager.isSoundLoaded("ambient_lab_01", "ambient") && (this.roleMenuInst = this.audioManager.playSound("ambient_lab_01", {
                    channel: "ambient"
                })),
                this.roleMenuTicker <= 0 && (this.roleSelected = this.roleDisplayed,
                this.setRoleMenuActive(!1))
            }
        }
        updatePlayerMapSprites(t, a, i, o) {
            const s = i.getPlayerInfo(a.__id);
            let l = 0;
            const c = (h, u, g, w, y, _, S) => {
                if (l >= this.playerMapSprites.length) {
                    const A = this.mapSpriteBarn.addSprite();
                    this.playerMapSprites.push(A)
                }
                const b = this.playerMapSprites[l++];
                b.pos = e.copy(h),
                b.scale = u,
                b.alpha = g,
                b.visible = w,
                b.zOrder = y,
                b.sprite.texture = K.from(_),
                b.sprite.tint = S
            }
              , m = Object.keys(i.playerStatus);
            for (let h = 0; h < m.length; h++) {
                const u = i.playerStatus[m[h]]
                  , g = u.playerId
                  , w = i.getPlayerInfo(g)
                  , y = w.groupId == s.groupId;
                let _ = 65535 + g * 2;
                g == s.playerId && (_ += 65535 * 2);
                const S = da[u.role]
                  , b = S?.mapIcon;
                b && (_ += 65535);
                let A = "player-map-inner.img";
                b && (A = S.mapIcon.alive),
                u.dead ? (A = "skull-outlined.img",
                b && (A = S.mapIcon.dead)) : u.downed && (A = y ? "player-map-inner.img" : "player-map-downed.img");
                let P = y ? i.getGroupColor(g) : i.getTeamColor(w.teamId);
                o.factionMode && b && (P = i.getTeamColor(w.teamId));
                const T = D.uiLayout == D.UiLayout.Sm ? .15 : .2;
                let I = T;
                if (I = y ? u.dead ? T * 1.5 : b ? T * 1.25 : T * 1 : u.dead || u.downed || b ? T * 1.25 : T * .75,
                c(u.pos, I, u.minimapAlpha, u.minimapVisible, _, A, P),
                y) {
                    const C = D.uiLayout == D.UiLayout.Sm ? .25 : .3
                      , q = u.minimapVisible && !b;
                    c(u.pos, C, u.minimapAlpha, q, _ - 1, "player-map-outer.img", 16777215)
                }
            }
            for (let h = this.playerMapSprites.length - 1; h >= l; h--)
                this.playerMapSprites[h].visible = !1
        }
        getMinimapMargin() {
            return D.uiLayout == D.UiLayout.Sm ? 4 : 16
        }
        getMinimapSize() {
            return D.uiLayout == D.UiLayout.Sm ? 192 : 256
        }
        getMinimapBorderWidth() {
            return D.uiLayout == D.UiLayout.Sm ? 1 : 4
        }
        createPing(t, a, i, o, s, l) {
            const c = zt[t];
            if (c) {
                const m = (u, g) => {
                    const w = this.mapSpriteBarn.addSprite();
                    return w.pos = e.copy(a),
                    w.scale = u,
                    w.lifetime = c.mapLife,
                    w.pulse = !1,
                    w.zOrder = 100,
                    w.sprite.texture = K.from(c.mapTexture),
                    w.sprite.tint = g,
                    w
                }
                  , h = u => {
                    const g = this.mapSpriteBarn.addSprite();
                    return g.pos = e.copy(a),
                    g.scale = 0,
                    g.lifetime = c.pingLife,
                    g.pulse = !0,
                    g.zOrder = 99,
                    g.sprite.texture = K.from("ping-map-pulse.img"),
                    g.sprite.tint = u,
                    g
                }
                ;
                if (c.mapEvent) {
                    const u = (D.uiLayout == D.UiLayout.Sm ? .15 : .2) * 1.5;
                    m(u, c.tint).release(),
                    h(c.tint).release()
                } else {
                    let u = 16777215;
                    const g = s.getPlayerInfo(o)
                      , w = s.getPlayerInfo(i)
                      , y = s.getPlayerStatus(i);
                    g && w && y && (y.role == "leader" ? u = 65280 : g.groupId == w.groupId ? u = s.getGroupColor(i) : u = s.getTeamColor(w.teamId)),
                    this.playerPingSprites[i] || (this.playerPingSprites[i] = []);
                    const _ = this.playerPingSprites[i];
                    for (let P = 0; P < _.length; P++)
                        _[P].free();
                    const S = D.uiLayout == D.UiLayout.Sm ? .15 : .2
                      , b = m(S, u)
                      , A = h(u);
                    _.push(b),
                    _.push(A)
                }
            }
        }
        updateMapSprite(t, a, i, o) {
            t.displayed && (t.life != null && (t.life -= o,
            t.displayed = t.life > 0,
            t.maxLife - t.life < .1 ? a.alpha = (t.maxLife - t.life) / .1 : t.life < .5 ? a.alpha = k.max(t.life / .5, 0) : a.alpha = 1),
            t.pulse && t.displayed && (t.scale = t.scale + o / 2.5,
            a.scale.set(t.scale, t.scale)),
            a.visible = i && a.alpha > 0)
        }
        updateMapIndicators(t) {
            this.mapIndicatorBarn.updateIndicatorData(t)
        }
        getMapPosFromWorldPos(t, a) {
            const i = this.mapSprite.x - this.mapSprite.width / 2 + t.x / a.width * this.mapSprite.width
              , o = this.mapSprite.y + this.mapSprite.height / 2 - t.y / a.height * this.mapSprite.height;
            return e.create(i, o)
        }
        getWorldPosFromMapPos(t, a, i) {
            let o = !1;
            if (this.bigmapDisplayed) {
                const s = (i.llqJG - this.mapSprite.width) / 2;
                let l = (i.Nsps - this.mapSprite.height) / 2;
                D.uiLayout == D.UiLayout.Sm && !D.isLandscape && (l = 0),
                o = t.x > s && t.x < i.llqJG - s && t.y > l && t.y < i.Nsps - l
            } else if (this.minimapDisplayed) {
                const s = this.getMinimapSize()
                  , l = this.getMinimapMargin()
                  , m = (s * this.screenScaleFactor + l) * .5;
                o = t.x > this.minimapPos.x - m && t.x < this.minimapPos.x + m && t.y > this.minimapPos.y - m && t.y < this.minimapPos.y + m
            }
            if (o) {
                const s = e.create(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y + this.mapSprite.height / 2)
                  , l = (t.x - s.x) / this.mapSprite.width * a.width
                  , c = (s.y - t.y) / this.mapSprite.height * a.height;
                return e.create(l, c)
            }
            return !1
        }
        hideAll() {
            this.gameElem.css("display", "none")
        }
        showAll() {
            this.gameElem.css("display", "block")
        }
        setLocalKills(t) {
            this.playerKills.html(t)
        }
        removeAds() {
            if (window.CrazyGames)
                window.CrazyGames.SDK.banner.clearAllBanners();
            else {
                if (!window.aiptag)
                    return;
                const t = ["728x90", "300x250_2"];
                for (let a = 0; a < t.length; a++) {
                    const i = t[a];
                    window.aiptag.cmd.display.push( () => {
                        window.aipDisplayTag.destroy(`survev-io_${i}`)
                    }
                    )
                }
            }
        }
        refreshMainPageAds() {
            const t = ["728x90"];
            if (window.CrazyGames)
                for (let a = 0; a < t.length; a++) {
                    const i = t[a]
                      , o = i.split("x").map(Number);
                    ia(`survev-io_${i}`, o[0], o[1])
                }
            if (window.aiptag)
                for (let a = 0; a < t.length; a++) {
                    const i = t[a];
                    window.aiptag.cmd.display.push( () => {
                        window.aipDisplayTag.display(`survev-io_${i}`)
                    }
                    )
                }
        }
        clearUI() {
            this.MzMpx.stop(),
            this.curAction = {
                type: ge.None
            },
            this.displayMapLarge(!0),
            this.displayMiniMap(),
            this.clearStatsElems(),
            this.clearTeamUI(),
            this.toggleEscMenu(!0),
            this.toggleLocalStats(!0),
            this.visibilityMode = 0,
            this.spectatorCount = 0,
            this.setLocalKills(0)
        }
        beginSpectating() {
            this.specBegin = !0
        }
        hideStats() {
            this.displayingStats = !1,
            this.statsMain.css("display", "none"),
            this.statsElem.stop().css({
                display: "none",
                opacity: 0
            }),
            this.statsContents.stop().hide()
        }
        teamModeToString(t) {
            const a = {
                unknown: "game-rank",
                [We.Solo]: "game-solo-rank",
                [We.Duo]: "game-duo-rank",
                [We.Squad]: "game-squad-rank"
            }
              , i = a[t] || a.unknown;
            return this.localization.translate(i)
        }
        getTitleVictoryText(t, a) {
            if (t)
                return `${this.spectatedPlayerName} ${this.localization.translate("game-won-the-game")}`;
            let i = "game-chicken";
            return a.turkeyMode && (i = "game-turkey"),
            this.localization.translate(i)
        }
        getTitleDefeatText(t, a) {
            return a ? `${this.spectatedPlayerName} ${this.localization.translate("game-player-died")}.` : t > We.Solo ? this.localization.translate("game-team-eliminated") : `${this.localization.translate("game-You")} ${this.localization.translate("game-you-died")}.`
        }
        getOverviewElems(t, a, i, o) {
            if (o) {
                const s = this.localization.translate("game-red-team")
                  , l = this.localization.translate("game-blue-team");
                return `<div class="ui-stats-header-right ui-stats-header-red-team"><span class="ui-stats-header-stat">${s} </span><span class="ui-stats-header-value">${this.playersAliveRedCounter}</span></div><div class="ui-stats-header-left ui-stats-header-blue-team"><span class="ui-stats-header-stat">${l} </span><span class="ui-stats-header-value">${this.playersAliveBlueCounter}</span></div>`
            }
            return t == We.Solo ? `<div><span class="ui-stats-header-stat">${this.teamModeToString(t)} </span><span class="ui-stats-header-value">#${a}</span></div>` : `<div class="ui-stats-header-right"><span class="ui-stats-header-stat">${this.teamModeToString(t)} </span><span class="ui-stats-header-value">#${a}</span></div><div class="ui-stats-header-left"><span class="ui-stats-header-stat">${this.localization.translate("game-team-kills")} </span><span class="ui-stats-header-value">${i}</span></div>`
        }
        quitGame() {
            this.game.glHQQ = !0,
            this.refreshMainPageAds(),
            this.game.onQuit(),
            this.game.respawns.push(performance.now())
        }
        showStats(t, a, i, o, s, l, c, m, h, u, g, w) {
            if (!m || a == l || s) {
                this.toggleEscMenu(!0),
                this.displayingStats = !0,
                this.MzMpx.stop(),
                this.displayMapLarge(!0),
                this.clearStatsElems(),
                this.setSpectating(!1, c),
                this.removeAds(),
                this.statsMain.css("display", "block"),
                this.statsLogo.css("display", "block"),
                this.statsContentsContainer.css({
                    top: ""
                }),
                this.statsInfoBox.css({
                    height: ""
                });
                const _ = l == o ? 1750 : 2500;
                this.setBannerAd(_, w);
                const S = l == o || m && o == a
                  , b = m && l != a
                  , A = S ? this.getTitleVictoryText(b, g.getMapDef().gameMode) : this.getTitleDefeatText(c, b);
                let P = 0;
                for (let $ = 0; $ < t.length; $++)
                    P += t[$].kills;
                const T = this.getOverviewElems(c, i, P, g.getMapDef().gameMode.factionMode)
                  , I = d("<div/>").append(d("<div/>", {
                    class: "ui-stats-header-title",
                    html: A
                })).append(d("<div/>", {
                    class: "ui-stats-header-overview",
                    html: T
                }));
                this.statsHeader.html(I);
                const C = ($, Q) => d("<div/>", {
                    class: "ui-stats-info"
                }).append(d("<div/>", {
                    html: $
                })).append(d("<div/>", {
                    html: Q
                }))
                  , q = D.uiLayout != D.UiLayout.Sm || D.tablet ? 250 : 125;
                let E = 0;
                E -= (t.length - 1) * q / 2,
                E -= (t.length - 1) * 10;
                for (let $ = 0; $ < t.length; $++) {
                    const Q = t[$]
                      , W = h.getPlayerInfo(Q.playerId)
                      , G = Ci(Q.timeAlive);
                    let ee = "ui-stats-info-player";
                    ee += Q.dead ? " ui-stats-info-status" : "";
                    const fe = (we => d("<div/>", {
                        class: we
                    }))(ee);
                    if (fe.css("left", E),
                    fe.append(d("<div/>", {
                        class: "ui-stats-info-player-name",
                        html: re.htmlEscape(W.name)
                    })),
                    fe.append(C(this.localization.translate("game-kills"), `${Q.kills}`)).append(C(this.localization.translate("game-damage-dealt"), Q.damageDealt)).append(C(this.localization.translate("game-damage-taken"), Q.damageTaken)).append(C(this.localization.translate("game-survived"), G)),
                    g.getMapDef().gameMode.factionMode && s)
                        switch ($) {
                        case 1:
                            fe.append(d("<div/>", {
                                class: "ui-stats-info-player-badge ui-stats-info-player-red-leader"
                            }));
                            break;
                        case 2:
                            fe.append(d("<div/>", {
                                class: "ui-stats-info-player-badge ui-stats-info-player-blue-leader"
                            }));
                            break;
                        case 3:
                            {
                                const we = W.teamId == 1 ? "ui-stats-info-player-red-ribbon" : "ui-stats-info-player-blue-ribbon";
                                fe.append(d("<div/>", {
                                    class: `ui-stats-info-player-badge ${we}`
                                }))
                            }
                        }
                    this.statsInfoBox.append(fe),
                    E += 10
                }
                const L = d("<a/>", {
                    class: "ui-stats-restart btn-green btn-darken menu-option",
                    html: this.localization.translate("game-play-new-game")
                });
                if (L.on("click", () => {
                    this.quitGame()
                }
                ),
                this.statsOptions.append(L),
                s || this.waitingForPlayers)
                    L.css({
                        width: D.uiLayout != D.UiLayout.Sm || D.tablet ? 225 : 130
                    });
                else {
                    L.css({
                        left: D.uiLayout != D.UiLayout.Sm || D.tablet ? -72 : -46
                    });
                    const $ = d("<a/>", {
                        class: "btn-green btn-darken menu-option ui-stats-spectate",
                        html: this.localization.translate("game-spectate")
                    });
                    $.on("click", this.beginSpectating.bind(this)),
                    this.statsOptions.append($)
                }
                let M = 0;
                const O = 500
                  , H = 250 / k.max(1, t.length)
                  , N = 750 / k.max(1, t.length);
                this.statsInfoBox.children().each( ($, Q) => {
                    const W = d(Q);
                    W.css("opacity", 0),
                    W.delay(_ + N + (M + $) * H).animate({
                        opacity: 1
                    }, O, () => {
                        W.children().each( (G, ee) => {
                            d(ee).delay(G * H).animate({
                                opacity: 1
                            }, O)
                        }
                        )
                    }
                    ),
                    W.children().each( (G, ee) => {
                        d(ee).css("opacity", 0),
                        M++
                    }
                    ),
                    M++
                }
                ),
                this.statsOptions.children().each( ($, Q) => {
                    const W = d(Q);
                    W.hide();
                    const G = _ + N + (M + $) * H + 500;
                    W.delay(G).fadeIn(O),
                    M++
                }
                ),
                this.statsElem.stop(),
                this.statsElem.css("display", "block"),
                this.statsElem.delay(_).animate({
                    opacity: 1
                }, 1e3),
                this.statsContents.stop(),
                this.statsContents.css("display", "block"),
                this.statsContents.delay(_).animate({
                    opacity: 1
                }, 1e3)
            }
        }
        clearStatsElems() {
            this.statsHeader.empty(),
            this.statsInfoBox.empty(),
            this.statsOptions.empty(),
            this.statsAds.css("display", "none"),
            this.statsContents.stop(),
            this.statsContents.css({
                display: "none",
                opacity: 0
            }),
            this.statsElem.stop(),
            this.statsElem.css({
                display: "none",
                opacity: 0
            }),
            this.statsMain.css("display", "none")
        }
        showTeamAd(t, a) {
            this.toggleEscMenu(!0),
            this.displayMapLarge(!0),
            this.clearStatsElems(),
            this.statsMain.css("display", "block"),
            this.statsLogo.css("display", "none"),
            this.MzMpx.stop(),
            this.displayingStats = !0,
            this.statsHeader.html(( () => {
                let l = this.localization.translate("game-You");
                l += " ",
                l += this.localization.translate("game-you-died"),
                l += ".";
                let c = `<div><span class="ui-stats-header-stat">${this.localization.translate("game-kills")} </span>`;
                return c += `<span class="ui-stats-header-value">${t.kills}</span></div>`,
                d("<div/>", {
                    class: ""
                }).append(d("<div/>", {
                    class: "ui-stats-header-title",
                    html: l
                })).append(d("<div/>", {
                    class: "ui-stats-header-overview",
                    html: c
                }))
            }
            )()),
            this.statsContentsContainer.css({
                top: "10%"
            }),
            this.statsInfoBox.css({
                height: 0
            });
            const i = d("<a/>", {
                class: "ui-stats-restart btn-green btn-darken menu-option",
                html: this.localization.translate("game-play-new-game")
            });
            i.on("click", () => {
                this.quitGame()
            }
            ),
            this.statsOptions.append(i),
            i.css({
                left: D.uiLayout != D.UiLayout.Sm || D.tablet ? -72 : -46
            });
            const o = d("<a/>", {
                class: "btn-green btn-darken menu-option ui-stats-spectate",
                html: this.localization.translate("game-spectate")
            });
            o.on("click", this.beginSpectating.bind(this)),
            this.statsOptions.append(o);
            let s = 0;
            this.statsOptions.children().each( (l, c) => {
                const m = d(c);
                m.hide();
                const h = 4100 + (s + l) * 300 + 300;
                m.delay(h).fadeIn(750),
                s++
            }
            ),
            this.statsElem.stop(),
            this.statsElem.css("display", "block"),
            this.statsElem.delay(2500).animate({
                opacity: 1
            }, 1e3),
            this.statsContents.stop(),
            this.statsContents.css("display", "block"),
            this.statsContents.delay(2500).animate({
                opacity: 1
            }, 1e3)
        }
        setBannerAd(t, a) {
            if (!window.aiptag)
                return;
            let i = Math.max(t - 150, 0);
            setTimeout( () => {
                d("#ui-stats-ad-container-desktop").css("display", "inline-block"),
                window.aiptag.cmd.display.push( () => {
                    window.aipDisplayTag.display("survev-io_300x250_2")
                }
                ),
                a.hideKillMessage()
            }
            , i)
        }
        setSpectateTarget(t, a, i, o) {
            if (t != this.spectatedPlayerId) {
                this.setSpectating(!0, i);
                const s = o.getPlayerName(t, a, !1);
                this.spectatedPlayerId = t,
                this.spectatedPlayerName = re.htmlEscape(s),
                this.spectatedPlayerText.find("#spectate-player").html(this.spectatedPlayerName),
                this.actionSeq = -1,
                this.MzMpx.stop()
            }
        }
        setSpectating(t, a) {
            if (this.spectating != t)
                if (this.spectating = t,
                this.spectating) {
                    this.spectateMode.css("display", "block"),
                    d(".ui-zoom").removeClass("ui-zoom-hover");
                    const i = a == We.Solo;
                    this.specPrevButton.css("display", i ? "none" : "block"),
                    this.specNextButton.css("display", i ? "none" : "block"),
                    this.hideStats()
                } else
                    this.spectateMode.css("display", "none"),
                    d(".ui-zoom").addClass("ui-zoom-hover")
        }
        setLocalStats(t) {
            const a = {
                kills: this.localization.translate("game-kills"),
                damageDealt: this.localization.translate("game-damage-dealt"),
                damageTaken: this.localization.translate("game-damage-taken"),
                timeAlive: this.localization.translate("game-survived")
            };
            this.spectateModeStatsData.empty();
            for (const i in a)
                if (a.hasOwnProperty(i)) {
                    const o = a[i]
                      , s = i == "timeAlive" ? Ci(t[i]) : t[i]
                      , l = `<tr><td class="ui-spectate-stats-category">${o}</td><td class="ui-spectate-stats-value">${s}</td></tr>`;
                    this.spectateModeStatsData.append(l)
                }
        }
        toggleLocalStats(t=!1) {
            const a = this.spectateModeStats.css("display") == "none" && !t;
            this.spectateModeStats.css("display", a ? "inline-block" : "none"),
            this.specStatsButton.html(a ? this.localization.translate("game-hide-match-stats") : this.localization.translate("game-view-match-stats"))
        }
        updatePlayersAlive(t) {
            this.playersAlive.html(t),
            this.leaderboardAlive.css("display", "block"),
            this.leaderboardAliveFaction.css("display", "none")
        }
        updatePlayersAliveRed(t) {
            this.playersAliveRed.html(t),
            this.playersAliveRedCounter = t,
            this.leaderboardAlive.css("display", "none"),
            this.leaderboardAliveFaction.css("display", "block"),
            d("#ui-map-counter-default").css("display", "none"),
            d("#ui-map-counter-faction").css("display", "inline-block")
        }
        updatePlayersAliveBlue(t) {
            this.playersAliveBlue.html(t),
            this.playersAliveBlueCounter = t,
            this.leaderboardAlive.css("display", "none"),
            this.leaderboardAliveFaction.css("display", "block"),
            d("#ui-map-counter-default").css("display", "none"),
            d("#ui-map-counter-faction").css("display", "inline-block")
        }
        updateKillLeader(t, a, i, o) {
            const s = t != 0
              , l = o?.sniperMode ? this.localization.translate("game-waiting-for-hunted") : this.localization.translate("game-waiting-for-new-leader");
            this.killLeaderName.html(s ? a : l),
            this.killLeaderCount.html(s ? i : 0)
        }
        displayMapLarge(t) {
            this.bigmapDisplayed = !t && !this.bigmapDisplayed,
            this.bigmapDisplayed ? this.container.alpha = 1 : this.container.alpha = this.minimapDisplayed ? 1 : 0;
            let a = D.uiLayout == D.UiLayout.Sm ? ".js-ui-mobile-map-hidden" : "js-ui-desktop-map-hidden";
            a += ", .js-ui-map-hidden",
            d(this.visibilityMode == 2 ? ".js-ui-hud-show" : a).css("display", this.bigmapDisplayed ? "none" : "block"),
            d(".js-ui-map-show").css("display", this.bigmapDisplayed ? "block" : "none"),
            this.updateSpectatorCountDisplay(!0),
            this.redraw(this.game.kPOw)
        }
        updateSpectatorCountDisplay(t) {
            const a = !this.bigmapDisplayed && this.spectatorCount > 0;
            t = t || this.spectatorCount > 0 && !this.spectatorCounterDisplayed || this.spectatorCount == 0 && this.spectatorCounterDisplayed,
            this.spectatorCount != this.prevSpectatorCount && (this.spectatorCounter.html(this.spectatorCount),
            this.prevSpectatorCount = this.spectatorCount),
            t && (this.spectatorCounterContainer.css("display", a ? "block" : "none"),
            this.spectatorCounterDisplayed = a)
        }
        toggleMiniMap() {
            this.minimapDisplayed ? this.hideMiniMap() : this.displayMiniMap()
        }
        cycleVisibilityMode() {
            if (!this.bigmapDisplayed)
                switch (this.visibilityMode) {
                case 0:
                    this.hideMiniMap(),
                    this.visibilityMode = 1;
                    break;
                case 1:
                    this.displayMiniMap(),
                    this.visibilityMode = 0
                }
        }
        cycleHud() {
            this.gameElem.css("display") == "none" ? (this.gameElem.css("display", "block"),
            this.displayMiniMap(),
            this.hudVisible = !0) : (this.gameElem.css("display", "none"),
            this.hideMiniMap(),
            this.hudVisible = !1)
        }
        hideMiniMap() {
            this.bigmapDisplayed || (this.minimapDisplayed = !1,
            this.container.alpha = 0,
            this.mapInfo.css("bottom", "auto"),
            this.spectatorCounterContainer.css({
                bottom: 6,
                left: 98
            }))
        }
        displayMiniMap() {
            if (!this.bigmapDisplayed) {
                const t = D.uiLayout == D.UiLayout.Sm;
                this.minimapDisplayed = !0,
                this.container.alpha = 1,
                this.mapInfo.css("bottom", this.mapInfoBottom),
                this.spectatorCounterContainer.css({
                    bottom: t ? 0 : 218,
                    left: t ? 0 : 6
                })
            }
        }
        displayAnnouncement(t) {
            t && (this.announcement.html(t),
            this.announcement.fadeIn(400, () => {
                setTimeout( () => {
                    this.announcement.fadeOut(800)
                }
                , 3e3)
            }
            ))
        }
        displayGasAnnouncement(t, a) {
            let i = "";
            switch (t) {
            case jt.Waiting:
                {
                    i = this.localization.translate("game-red-zone-advances");
                    const o = Math.floor(a / 60)
                      , s = a - o * 60;
                    i += o > 1 ? ` ${o} ${this.localization.translate("game-minutes")}` : "",
                    i += o == 1 ? ` ${o} ${this.localization.translate("game-minute")}` : "",
                    i += s > 0 ? ` ${Math.floor(s)} ${this.localization.translate("game-seconds")}` : "";
                    break
                }
            case jt.Moving:
                i = this.localization.translate("game-red-zone-advancing");
                break
            }
            this.displayAnnouncement(i)
        }
        setWaitingForPlayers(t) {
            this.waitingForPlayers = t,
            this.waitingText.css("display", t ? "block" : "none")
        }
        CCrkNK(t, a, i, o, s, l) {
            const c = a.getCircle(1)
              , m = this.getMapPosFromWorldPos(c.pos, o)
              , h = this.getMapPosFromWorldPos(e.add(c.pos, e.create(c.rad, 0)), o)
              , u = e.length(e.sub(h, m));
            this.gasRenderer.render(m, u, a.isActive());
            const g = a.circleNew
              , w = this.getMapPosFromWorldPos(g.pos, o)
              , y = this.getMapPosFromWorldPos(e.add(g.pos, e.create(g.rad, 0)), o)
              , _ = e.length(e.sub(y, w))
              , S = this.getMapPosFromWorldPos(t, o)
              , b = a.isActive()
              , A = a.isActive() && !this.bigmapDisplayed;
            this.gasSafeZoneRenderer.render(w, _, S, b, A),
            s.renderAirstrikeZones(this, o, l)
        }
        updateHealthBar(t, a, i, o) {
            const s = t;
            let l = o.health * .01 * s;
            l = o.dead ? 0 : k.max(l, 1),
            a.css("width", l),
            l > 0 && i?.css("width", l);
            const c = o.health;
            let m = this.healthRed
              , h = this.healthDarkpink;
            if (c > 25) {
                if (o.downed)
                    a.css({
                        backgroundColor: "red"
                    });
                else {
                    k.eqAbs(c, 100, .2) ? (m = this.healthGrey,
                    h = this.healthGrey) : k.eqAbs(c, 75, .2) || c >= 75 ? (m = this.healthWhite,
                    h = this.healthWhite) : (m = this.healthDarkpink,
                    h = this.healthLightpink);
                    const u = m.getColors()
                      , g = h.getColors()
                      , w = Hr(u.r, g.r, 45, c)
                      , y = Hr(u.g, g.g, 45, c)
                      , _ = Hr(u.b, g.b, 45, c);
                    a.css({
                        backgroundColor: `rgba(${w},${y},${_},1)`
                    })
                }
                a.removeClass("ui-bar-danger")
            } else
                a.addClass("ui-bar-danger")
        }
        updateTeam(t, a, i, o, s, l, c) {
            const m = this.teamSelectors[t].groupId
              , h = this.teamSelectors[t].teamName
              , u = this.teamSelectors[t].prevHealth
              , g = this.teamSelectors[t].prevStatus
              , w = o.dead != g.dead || o.disconnected != g.disconnected || o.downed != g.downed || o.role != g.role;
            if (this.teamSelectors[t].playerId != s || i != u || w) {
                const y = this.teamSelectors[t].teamStatus
                  , _ = this.teamSelectors[t].teamHealthInner;
                this.teamSelectors[t].playerId = s,
                this.teamSelectors[t].teamNameHtml = a,
                h.html(a),
                this.updateHealthBar(this.teamMemberHealthBarWidth, _, null, {
                    health: i,
                    dead: o.dead,
                    downed: o.downed
                }),
                w && (y.attr("class", "ui-team-member-status"),
                o.disconnected ? y.addClass("ui-team-member-status-disconnected") : o.dead ? y.addClass("ui-team-member-status-dead") : o.downed && y.addClass("ui-team-member-status-downed").addClass("icon-pulse"),
                h.css("opacity", o.disconnected || o.dead ? .3 : 1)),
                m.css("display", "block"),
                this.teamSelectors[t].prevStatus = o,
                this.teamSelectors[t].prevHealth = i
            }
        }
        clearTeamUI() {
            d(".ui-team-member").css("display", "none"),
            d(".ui-team-indicator").css("display", "none"),
            d(".ui-team-member-name").removeAttr("style"),
            d(".ui-team-member-status").removeAttr("style"),
            d(".ui-team-member-status").removeClass("ui-team-member-status-downed ui-team-member-status-dead ui-team-member-status-disconnected icon-pulse"),
            this.teamSelectors = []
        }
        resize(t, a) {
            this.screenScaleFactor = D.uiLayout == D.UiLayout.Sm ? .5626 : k.min(1, k.clamp(a.llqJG / 1280, .75, 1) * k.clamp(a.Nsps / 1024, .75, 1)),
            this.MzMpx.resize(this.touch, this.screenScaleFactor),
            this.gasRenderer.resize(),
            this.mapSprite.texture = t.getMapTexture();
            const i = k.min(1, k.min(a.llqJG / 1200, a.Nsps / 900));
            this.roleMenuElem.css("transform", `translateX(-50%) translateY(-50%) scale(${i})`),
            this.redraw(a)
        }
        redraw(t) {
            const a = t.llqJG
              , i = t.Nsps
              , o = this.getMinimapMargin();
            let s = 0
              , l = 0;
            D.model == "iphonex" && (D.isLandscape ? s += 28 : l += 32);
            const c = this.getMinimapSize()
              , m = this.getMinimapBorderWidth()
              , h = D.uiLayout == D.UiLayout.Sm;
            if (this.display.border.clear(),
            this.container.mask?.clear(),
            this.bigmapDisplayed) {
                const u = k.min(a, i);
                this.mapSprite.width = u,
                this.mapSprite.height = u,
                this.mapSprite.x = a / 2,
                this.mapSprite.y = i / 2,
                this.mapSprite.alpha = 1,
                this.container.mask.beginFill(16777215, 1),
                this.container.mask.drawRect(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y - this.mapSprite.height / 2, this.mapSprite.width, this.mapSprite.height),
                this.container.mask.endFill(),
                D.touch && this.bigmapCollision.css({
                    width: i,
                    height: a
                })
            } else {
                const u = this.screenScaleFactor * 1600 / 1.2
                  , g = c * this.screenScaleFactor;
                this.mapSprite.width = u,
                this.mapSprite.height = u,
                this.mapSprite.alpha = .8;
                let w = {
                    zoom: this.screenScaleFactor
                };
                document.body && ("WebkitTransform"in document.body.style ? w = {
                    "-webkit-transform": `scale(${this.screenScaleFactor})`
                } : "transform"in document.body.style && (w = {
                    transform: `scale(${this.screenScaleFactor})`
                })),
                this.mapContainer.css(w),
                this.mapContainer.css("bottom", this.mapContainerBottom * this.screenScaleFactor);
                const y = h ? g / 2 + o : i - g / 2 - o;
                this.minimapPos.x = o + g / 2 + s,
                this.minimapPos.y = y + l,
                this.display.border.lineStyle(m, 0),
                this.display.border.beginFill(0, 0);
                const _ = h ? o + m / 2 : i - g - o + m / 2;
                this.display.border.drawRect(o + m / 2 + s, _ + l, g - m, g - m),
                this.display.border.endFill();
                const S = h ? o : i - g - o;
                this.container.mask.beginFill(16777215, 1),
                this.container.mask.drawRect(o + s, S - .5 + l, g, g),
                this.container.mask.endFill()
            }
        }
        toggleEscMenu(t=!1) {
            this.displayingStats || (this.escMenuDisplayed || t ? (this.escMenuDisplayed = !1,
            this.escMenuElem.css("display", "none"),
            this.setCurrentGameTab("settings"),
            d("#ui-center").off("mouseenter mouseleave"),
            this.inputBinds.menuHovered = !1,
            this.roleMenuActive && this.displayRoleMenu()) : this.bigmapDisplayed ? this.displayMapLarge(!0) : (this.visibilityMode == 2 && this.cycleVisibilityMode(),
            this.escMenuDisplayed = !0,
            this.escMenuElem.css("display", "block"),
            d("#ui-center").hover( () => {
                this.inputBinds.menuHovered = !0
            }
            , () => {
                this.inputBinds.menuHovered = !1
            }
            ),
            this.inputBinds.menuHovered = !1,
            this.roleMenuActive && this.hideRoleMenu()))
        }
        setCurrentGameTab(t) {
            this.currentGameTab = t,
            this.gameTabs.css("display", "none"),
            this.gameTabBtns.removeClass("btn-game-menu-selected"),
            d(`#ui-game-tab-${this.currentGameTab}`).css("display", "block"),
            d(`#btn-game-${this.currentGameTab}`).addClass("btn-game-menu-selected"),
            this.currentGameTab == "keybinds" ? this.inputBindUi.refresh() : this.inputBindUi.cancelBind()
        }
        setRoleMenuActive(t) {
            this.roleMenuActive = t,
            this.roleMenuActive ? (this.roleMenuTicker = 20,
            this.displayRoleMenu()) : (this.roleMenuInst && (this.audioManager.stopSound(this.roleMenuInst),
            this.roleMenuInst = null),
            this.hideRoleMenu())
        }
        displayRoleMenu() {
            this.roleMenuElemWrapper.css("display", "block")
        }
        hideRoleMenu() {
            this.roleMenuElemWrapper.css("display", "none")
        }
        setRoleMenuOptions(t, a) {
            d("#ui-role-header").html("");
            for (let o = 0; o < a.length; o++) {
                const s = a[o]
                  , l = U[s]
                  , c = d("<div/>", {
                    class: "ui-role-option",
                    "data-role": s
                });
                c.css({
                    "background-image": `url('${l.guiImg}')`
                }),
                d("#ui-role-header").append(c)
            }
            d(".ui-role-option").on("click", o => {
                o.stopPropagation();
                const s = d(o.currentTarget);
                this.setRoleMenuInfo(s.data("role"))
            }
            );
            let i = a[0];
            a.includes(t) && (i = t),
            this.setRoleMenuInfo(i)
        }
        setRoleMenuInfo(t) {
            const a = U[t];
            d(".ui-role-option").css({
                "background-size": 132,
                opacity: .5
            }),
            d("#ui-role-header").find(`[data-role=${t}]`).css({
                "background-size": 164,
                opacity: 1
            });
            const i = d("<div/>", {
                class: "ui-role-body-left"
            })
              , o = d("<div/>", {
                class: "ui-role-body-name"
            })
              , s = d("<div/>", {
                class: "ui-role-body-image"
            })
              , l = this.localization.translate(`game-${t}`);
            o.html(l),
            s.css({
                "background-image": `url('${a.guiImg}')`
            });
            const c = a.color ? re.colorToHexString(a.color) : "default";
            this.roleMenuElem.css("border-color", c),
            i.append(o).append(s);
            const m = d("<div/>", {
                class: "ui-role-body-right"
            })
              , h = a.perks;
            for (let u = 0; u < h.length; u++) {
                const g = h[u]
                  , w = d("<div/>", {
                    class: "ui-role-body-perk"
                })
                  , y = d("<div/>", {
                    class: "ui-role-body-perk-image-wrapper"
                }).append(d("<div/>", {
                    class: "ui-role-body-perk-image-icon"
                }))
                  , _ = d("<div/>", {
                    class: "ui-role-body-perk-name"
                })
                  , S = re.getSvgFromGameType(g instanceof Function ? g() : g);
                y.find(".ui-role-body-perk-image-icon").css({
                    "background-image": `url('${S}')`
                });
                const b = this.localization.translate(`game-${g}`);
                _.html(b),
                w.append(y).append(_),
                m.append(w)
            }
            d("#ui-role-body").html("").append(i).append(m),
            this.roleDisplayed = t
        }
    }
    const Po = 6
      , Pi = .75 * 1e3
      , Ao = 3
      , On = {
        [F.WeaponSlot.Primary]: j.EquipPrimary,
        [F.WeaponSlot.Secondary]: j.EquipSecondary,
        [F.WeaponSlot.Melee]: j.EquipMelee,
        [F.WeaponSlot.Throwable]: j.EquipThrowable
    };
    function se(r) {
        return document.getElementById(r)
    }
    function Ai(r) {
        return r.button == 0
    }
    function Di(r) {
        return "which"in r ? r.which == 3 : r.button == 2
    }
    function ma(r, t, a) {
        if (r instanceof Array)
            for (let i = 0; i < r.length; i++)
                ma(r[i], a !== void 0 ? t[a] : t, i);
        else if (r instanceof Object) {
            const i = Object.keys(r);
            for (let o = 0; o < i.length; o++) {
                const s = i[o];
                ma(r[s], a !== void 0 ? t[a] : t, s)
            }
        } else
            t[a] = r
    }
    function pa(r, t, a) {
        if (t instanceof Array) {
            const i = [];
            for (let o = 0; o < t.length; o++)
                i[o] = pa(r[o], t[o], a);
            return i
        }
        if (t instanceof Object) {
            const i = {}
              , o = Object.keys(t);
            for (let s = 0; s < o.length; s++) {
                const l = o[s];
                i[l] = pa(r[l], t[l], a)
            }
            return i
        }
        return r != t || a
    }
    function Do() {
        const r = Object.keys(U)
          , t = [];
        for (let a = 0; a < r.length; a++) {
            const i = r[a]
              , o = U[i];
            !o.hideUi && (o.type == "heal" || o.type == "boost" || o.type == "ammo") && t.push(i)
        }
        return t
    }
    class Oi {
        mobile = !1;
        touch = !1;
        rareLootMessage = {
            lootType: "",
            ticker: 0,
            duration: 0,
            opacity: 0
        };
        pickupMessage = {
            message: "",
            ticker: 0,
            duration: 0,
            opacity: 0
        };
        killMessage = {
            text: "",
            count: "",
            ticker: 0,
            duration: 0,
            opacity: 0
        };
        killFeed = Array.from({
            length: Po
        }, () => ({
            text: "",
            color: "#000000",
            offset: 0,
            opacity: 0,
            ticker: Number.MAX_VALUE
        }));
        ammo = {
            current: 0,
            remaining: 0,
            displayCurrent: !1,
            displayRemaining: !1
        };
        interaction = {
            type: 0,
            text: "",
            key: "",
            usable: !1
        };
        weapons = Array.from({
            length: F.WeaponSlot.Count
        }, (t, a) => ({
            slot: a,
            type: "",
            ammo: 0,
            equipped: !1,
            selectable: !1,
            opacity: 0,
            width: 0,
            ticker: 0,
            bind: On[a],
            bindStr: ""
        }));
        scopes = ta.map(t => ({
            type: t,
            visible: !1,
            equipped: !1,
            selectable: !1
        }));
        loot = Do().map(t => ({
            type: t,
            count: 0,
            maximum: 0,
            selectable: !1,
            width: 0,
            ticker: 0
        }));
        perks = Array.from({
            length: Ao
        }, () => ({
            type: "",
            droppable: !1,
            width: 0,
            ticker: 0,
            pulse: !1
        }));
        gear = ea.map(t => ({
            type: t,
            item: "",
            selectable: !1,
            width: 0,
            ticker: 0,
            rot: 0
        }));
        health = F.player.health;
        boost = 0;
        downed = !1
    }
    class En {
        constructor(t, a) {
            this.localization = t,
            this.inputBinds = a;
            const i = this;
            for (let c = 0; c < Po; c++) {
                const m = `ui-killfeed-${c}`;
                let h = se(m);
                if (!h) {
                    h = document.createElement("div"),
                    h.id = m,
                    h.classList.add("killfeed-div");
                    const u = document.createElement("div");
                    u.classList.add("killfeed-text"),
                    h.appendChild(u),
                    this.dom.killFeed.div.appendChild(h)
                }
                this.dom.killFeed.lines.push({
                    line: h,
                    text: h.firstElementChild
                })
            }
            for (let c = 0; c < F.WeaponSlot.Count; c++) {
                const m = se(`ui-weapon-id-${c + 1}`)
                  , h = {
                    div: m,
                    type: m.getElementsByClassName("ui-weapon-name")[0],
                    number: m.getElementsByClassName("ui-weapon-number")[0],
                    image: m.getElementsByClassName("ui-weapon-image")[0],
                    ammo: m.getElementsByClassName("ui-weapon-ammo-counter")[0]
                };
                this.dom.weapons.push(h)
            }
            for (let c = 0; c < ta.length; c++) {
                const m = ta[c]
                  , h = {
                    scopeType: m,
                    div: se(`ui-scope-${m}`)
                };
                this.dom.scopes.push(h)
            }
            for (let c = Do(), m = 0; m < c.length; m++) {
                const h = c[m]
                  , u = se(`ui-loot-${h}`);
                if (u) {
                    const g = {
                        lootType: h,
                        div: u,
                        count: u.getElementsByClassName("ui-loot-count")[0],
                        image: u.getElementsByClassName("ui-loot-image")[0],
                        overlay: u.getElementsByClassName("ui-loot-overlay")[0]
                    };
                    this.dom.loot.push(g)
                }
            }
            for (let c = 0; c < ea.length; c++) {
                const m = ea[c]
                  , h = se(`ui-armor-${m}`)
                  , u = {
                    gearType: m,
                    div: h,
                    level: h.getElementsByClassName("ui-armor-level")[0],
                    image: h.getElementsByClassName("ui-armor-image")[0]
                };
                this.dom.gear.push(u)
            }
            for (let c = 0; c < Ao; c++) {
                const m = se(`ui-perk-${c}`)
                  , h = {
                    perkType: "",
                    div: m,
                    divTitle: m.getElementsByClassName("tooltip-title")[0],
                    divDesc: m.getElementsByClassName("tooltip-desc")[0],
                    image: m.getElementsByClassName("ui-armor-image")[0]
                };
                this.dom.perks.push(h)
            }
            const o = (c, m, h) => {
                this.eventListeners.push({
                    event: c,
                    elem: m,
                    fn: h
                }),
                m.addEventListener(c, h)
            }
              , s = (c, m, h, u) => {
                this.itemActions.push({
                    action: c,
                    type: m,
                    data: h,
                    div: u,
                    actionQueued: !1,
                    actionTime: 0
                })
            }
            ;
            for (let c = 0; c < this.dom.weapons.length; c++)
                s("use", "weapon", c, this.dom.weapons[c].div),
                s("drop", "weapon", c, this.dom.weapons[c].div);
            for (let c = 0; c < this.dom.scopes.length; c++) {
                const m = this.dom.scopes[c];
                s("use", "scope", m.scopeType, m.div),
                m.scopeType != "1xscope" && s("drop", "loot", m.scopeType, m.div)
            }
            for (let c = 0; c < this.dom.loot.length; c++) {
                const m = this.dom.loot[c]
                  , h = U[m.lootType];
                (h.type == "heal" || h.type == "boost") && s("use", "loot", m.lootType, m.div),
                s("drop", "loot", m.lootType, m.div)
            }
            for (let c = 0; c < this.dom.gear.length; c++) {
                const m = this.dom.gear[c];
                m.gearType != "backpack" && s("drop", "loot", m.gearType, m.div)
            }
            for (let c = 0; c < this.dom.perks.length; c++)
                s("drop", "perk", c, this.dom.perks[c].div);
            for (let c = 0; c < this.itemActions.length; c++) {
                const m = this.itemActions[c];
                o("mousedown", m.div, h => {
                    (m.action == "use" && Ai(h) || m.action == "drop" && Di(h)) && (h.stopPropagation(),
                    m.actionQueued = !0)
                }
                ),
                o("mouseup", m.div, h => {
                    m.actionQueued && (m.action == "use" && Ai(h) || m.action == "drop" && Di(h)) && (h.stopPropagation(),
                    this.pushAction(m),
                    m.actionQueued = !1)
                }
                ),
                o("touchstart", m.div, h => {
                    h.changedTouches.length > 0 && (h.stopPropagation(),
                    m.actionQueued = !0,
                    m.actionTime = new Date().getTime(),
                    m.touchOsId = h.changedTouches[0].identifier)
                }
                ),
                o("touchend", m.div, h => {
                    new Date().getTime() - m.actionTime < Pi && m.actionQueued && m.action == "use" && this.pushAction(m),
                    m.actionQueued = !1
                }
                ),
                o("touchcancel", m.div, h => {
                    m.actionQueued = !1
                }
                )
            }
            const l = document.getElementById("cvs");
            this.clearQueuedItemActions = () => {
                for (let c = 0; c < this.itemActions.length; c++)
                    this.itemActions[c].actionQueued = !1;
                D.touch && l.focus()
            }
            ,
            window.addEventListener("mouseup", this.clearQueuedItemActions),
            window.addEventListener("focus", this.clearQueuedItemActions),
            this.onKeyUp = c => {
                const m = c.which || c.keyCode
                  , h = i.inputBinds.getBind(j.Fullscreen);
                h && m == h.code && re.toggleFullScreen()
            }
            ,
            window.addEventListener("keyup", this.onKeyUp)
        }
        oldState = new Oi;
        newState = new Oi;
        frameCount = 0;
        dom = {
            debugButton: se("ui-debug-button"),
            emoteButton: se("ui-emote-button"),
            menu: {
                touchStyles: se("btn-touch-styles"),
                aimLine: se("btn-game-aim-line")
            },
            rareLootMessage: {
                icon: se("ui-perk-message-image-icon"),
                imageWrapper: se("ui-perk-message-image-wrapper"),
                wrapper: se("ui-perk-message-wrapper"),
                name: se("ui-perk-message-name"),
                desc: se("ui-perk-message-acquired")
            },
            pickupMessage: se("ui-pickup-message"),
            killMessage: {
                div: se("ui-kills"),
                text: se("ui-kill-text"),
                count: se("ui-kill-count")
            },
            killFeed: {
                div: se("ui-killfeed-contents"),
                lines: []
            },
            weapons: [],
            ammo: {
                current: se("ui-current-clip"),
                remaining: se("ui-remaining-ammo"),
                reloadButton: se("ui-reload-button-container")
            },
            interaction: {
                div: se("ui-interaction"),
                key: se("ui-interaction-press"),
                text: se("ui-interaction-description")
            },
            health: {
                inner: se("ui-health-actual"),
                depleted: se("ui-health-depleted")
            },
            boost: {
                div: se("ui-boost-counter"),
                bars: [se("ui-boost-counter-0").firstElementChild, se("ui-boost-counter-1").firstElementChild, se("ui-boost-counter-2").firstElementChild, se("ui-boost-counter-3").firstElementChild]
            },
            scopes: [],
            loot: [],
            gear: [],
            perks: []
        };
        rareLootMessageQueue = [];
        uiEvents = [];
        eventListeners = [];
        clearQueuedItemActions;
        onKeyUp;
        itemActions = [];
        AlR() {
            for (let t = 0; t < this.eventListeners.length; t++) {
                const a = this.eventListeners[t];
                a.elem.removeEventListener(a.event, a.fn)
            }
            window.removeEventListener("focus", this.clearQueuedItemActions),
            window.removeEventListener("mouseup", this.clearQueuedItemActions),
            window.removeEventListener("keyup", this.onKeyUp)
        }
        pushAction(t) {
            this.uiEvents.push({
                action: t.action,
                type: t.type,
                data: t.data
            })
        }
        flushInput() {
            this.uiEvents = []
        }
        lCPzxG(t, a, i, o, s, l, c) {
            const m = this.newState;
            if (m.mobile = D.mobile,
            m.touch = D.touch,
            m.touch)
                for (let L = 0; L < this.itemActions.length; L++) {
                    const M = this.itemActions[L];
                    if (M.actionQueued && M.action == "drop") {
                        const O = new Date().getTime();
                        O - M.actionTime >= Pi && (this.pushAction(M),
                        M.actionTime = O,
                        M.actionQueued = !1)
                    }
                }
            if (m.rareLootMessage.ticker >= m.rareLootMessage.duration && this.rareLootMessageQueue.length > 0) {
                const L = this.rareLootMessageQueue.shift();
                m.rareLootMessage.lootType = L,
                m.rareLootMessage.ticker = 0,
                m.rareLootMessage.duration = this.rareLootMessageQueue.length > 0 ? 2 : 4,
                m.rareLootMessage.opacity = 0
            }
            m.rareLootMessage.ticker += t;
            const h = m.rareLootMessage.ticker
              , u = m.rareLootMessage.duration;
            m.rareLootMessage.opacity = 1 - k.smoothstep(h, u - .2, u),
            m.pickupMessage.ticker += t;
            const g = m.pickupMessage.ticker
              , w = m.pickupMessage.duration;
            m.pickupMessage.opacity = k.smoothstep(g, 0, .2) * (1 - k.smoothstep(g, w, w + .2)) * (1 - m.rareLootMessage.opacity),
            m.killMessage.ticker += t;
            const y = m.killMessage.ticker
              , _ = m.killMessage.duration;
            m.killMessage.opacity = (1 - k.smoothstep(y, _ - .2, _)) * (1 - m.rareLootMessage.opacity);
            let S = 0;
            for (let L = 0; L < m.killFeed.length; L++) {
                const M = m.killFeed[L];
                M.ticker += t;
                const O = M.ticker;
                M.offset = S,
                M.opacity = k.smoothstep(O, 0, .25) * (1 - k.smoothstep(O, 6, 6.5)),
                S += k.min(O / .25, 1),
                D.mobile && (M.opacity = O < 6.5 ? 1 : 0)
            }
            m.health = a.tuWDuv.veYmO ? 0 : k.max(a.sUpm.hBh, 1),
            m.boost = a.sUpm.HRgEki,
            m.downed = a.tuWDuv.SINId;
            let b = 0
              , A = null
              , P = !0;
            if (a.canInteract(l)) {
                let L = null
                  , M = 0;
                const O = l.CcKuBx.HWU();
                for (let $ = 0; $ < O.length; $++) {
                    const Q = O[$];
                    if (Q.active && !Q.dead && f.sameLayer(Q.layer, a.layer)) {
                        const W = Q.getInteraction();
                        if (W) {
                            const G = n.intersectCircle(Q.collider, a.tuWDuv.XafO, W.rad + a.AQGS);
                            G && G.pen >= M && (L = Q,
                            M = G.pen)
                        }
                    }
                }
                L && (b = 4,
                A = L,
                P = !0);
                const H = s.getClosestLoot();
                if (H && !a.tuWDuv.SINId) {
                    const $ = U[H.type]
                      , Q = a.tOyQwq(F.WeaponSlot.Primary)
                      , W = a.tOyQwq(F.WeaponSlot.Secondary)
                      , G = Q && W
                      , ee = $.type != "gun" || !G || a.UeRS() == "gun";
                    let fe = !1;
                    (m.touch && $.type == "helmet" && a.gWq() == $.level && H.type != a.tuWDuv.Mkgknh || $.type == "chest" && a.eUC() == $.level && H.type != a.tuWDuv.FUoWEd) && (fe = !0),
                    (ee || D.uiLayout == D.UiLayout.Sm) && (b = 2,
                    A = H),
                    P = ee && (!m.touch || $.type == "gun" || $.type == "melee" || $.type == "outfit" || $.type == "perk" || fe)
                }
                const N = a.BkfiV("self_revive");
                if (a.QBughF.type == ge.None && (!a.tuWDuv.SINId || N)) {
                    const $ = o.getPlayerInfo(a.__id).teamId
                      , Q = o.playerPool.HWU();
                    for (let W = 0; W < Q.length; W++) {
                        const G = Q[W];
                        if (G.active) {
                            const ee = o.getPlayerInfo(G.__id).teamId;
                            (G.__id != a.__id || N) && $ == ee && G.tuWDuv.SINId && !G.tuWDuv.veYmO && G.QBughF.type != ge.Revive && e.length(e.sub(G.tuWDuv.XafO, a.tuWDuv.XafO)) < F.player.reviveRange && f.sameLayer(G.layer, a.layer) && (b = 3,
                            A = G,
                            P = !0)
                        }
                    }
                }
                a.QBughF.type == ge.Revive && a.tuWDuv.SINId && !N && (b = 0,
                A = null,
                P = !1),
                (a.QBughF.type == ge.UseItem || a.QBughF.type == ge.Revive && (!a.tuWDuv.SINId || N)) && !i && (b = 1,
                A = null,
                P = !0)
            }
            m.interaction.type = b,
            m.interaction.text = this.getInteractionText(b, A, a),
            m.interaction.key = this.getInteractionKey(b),
            m.interaction.usable = P && !i;
            for (let L = 0; L < a.sUpm.kgyV.length; L++) {
                const M = a.sUpm.kgyV[L]
                  , O = m.weapons[L];
                O.type = M.type,
                O.ammo = M.ammo,
                L == F.WeaponSlot.Throwable && (O.ammo = a.sUpm.MZQxFy[M.type] || 0);
                const H = O.equipped;
                O.equipped = L == a.sUpm.nUn,
                O.selectable = (M.type != "" || L == 0 || L == 1) && !i;
                const N = O.equipped ? 1 : .6
                  , $ = N - O.opacity
                  , Q = k.min($, k.sign($) * t / .15);
                O.opacity = k.clamp(O.opacity + Q, 0, 1),
                D.mobile && (O.opacity = N),
                O.type == "bugle" && O.ammo == 0 && (O.opacity = .25),
                O.ticker += t,
                (!O.equipped || !H) && (O.ticker = 0),
                this.frameCount < 2 && (O.ticker = 1);
                const W = k.min(O.ticker / .09, Math.PI)
                  , G = Math.sin(W);
                O.width = G < .001 ? 0 : G,
                D.mobile && (O.width = 0);
                const ee = c.getBind(O.bind);
                O.bindStr = ee ? ee.toString() : ""
            }
            const T = m.weapons[a.sUpm.nUn]
              , I = U[T.type]
              , C = T.ammo
              , q = I.type == "gun" ? I.ammoInfinite || a.BkfiV("endless_ammo") && !I.ignoreEndlessAmmo ? Number.MAX_VALUE : a.sUpm.MZQxFy[I.ammo] : 0;
            m.ammo.current = C,
            m.ammo.remaining = q,
            m.ammo.displayCurrent = I.type != "melee",
            m.ammo.displayRemaining = q > 0;
            for (let L = 0; L < m.scopes.length; L++) {
                const M = m.scopes[L];
                M.visible = a.sUpm.MZQxFy[M.type] > 0,
                M.equipped = M.visible && a.sUpm.gMB == M.type,
                M.selectable = M.visible && !i
            }
            for (let L = a.dju(), M = 0; M < m.loot.length; M++) {
                const O = m.loot[M]
                  , H = O.count;
                O.count = a.sUpm.MZQxFy[O.type] || 0,
                O.maximum = F.bagSizes[O.type][L],
                O.selectable = O.count > 0 && !i,
                O.count > H && (O.ticker = 0),
                this.frameCount < 2 && (O.ticker = 1),
                O.ticker += t;
                const N = k.min(O.ticker / .05, Math.PI)
                  , $ = Math.sin(N);
                O.width = $ < .001 ? 0 : $,
                D.mobile && (O.width = 0)
            }
            for (let L = 0; L < m.gear.length; L++) {
                const M = m.gear[L];
                let O = "";
                M.type == "chest" ? O = a.tuWDuv.FUoWEd : M.type == "helmet" ? O = a.tuWDuv.Mkgknh : M.type == "backpack" && (O = a.tuWDuv.pFAn) == "backpack00" && (O = "");
                const H = M.item;
                M.item = O,
                M.selectable = O != "" && !i,
                H != M.item && (M.ticker = 0),
                this.frameCount < 2 && (M.ticker = 1),
                M.ticker += t;
                const N = k.min(M.ticker / .05, Math.PI)
                  , $ = Math.sin(N);
                M.width = $ < .001 ? 0 : $,
                D.mobile && (M.width = 0)
            }
            for (let L = 0; L < m.perks.length; L++) {
                const M = m.perks[L];
                if (a.perks.length > L) {
                    const O = a.perks[L];
                    M.type = O.type,
                    M.droppable = O.droppable,
                    O.isNew && (M.ticker = 0),
                    this.frameCount < 2 && (M.ticker = 1),
                    M.ticker += t;
                    const H = k.min(M.ticker / .05, Math.PI)
                      , N = Math.sin(H);
                    M.width = N < .001 ? 0 : N,
                    D.mobile && (M.width = 0),
                    M.pulse = !D.mobile && M.ticker < 4
                } else
                    M.type = ""
            }
            const E = pa(this.oldState, this.newState, this.frameCount++ == 0);
            this.render(E, this.newState),
            ma(this.newState, this.oldState)
        }
        render(t, a) {
            const i = this.dom;
            if (t.touch && (i.interaction.key.style.backgroundImage = a.touch ? "url('img/gui/tap.svg')" : "none",
            a.touch && (i.interaction.key.innerHTML = ""),
            i.menu.touchStyles.style.display = a.touch ? "flex" : "none",
            i.menu.aimLine.style.display = a.touch ? "block" : "none",
            i.ammo.reloadButton.style.display = a.touch ? "block" : "none",
            i.emoteButton.style.display = a.touch ? "block" : "none",
            i.debugButton && (i.debugButton.style.display = a.touch ? "block" : "none")),
            t.rareLootMessage.lootType) {
                const o = a.rareLootMessage.lootType
                  , s = U[o];
                if (s && s.type == "xp") {
                    const h = this.localization.translate("game-xp-drop-desc");
                    i.rareLootMessage.desc.innerHTML = `+${s.xp} ${h}`
                } else
                    i.rareLootMessage.desc.innerHTML = "";
                const l = s?.lootImg?.border ? `url(img/loot/${s.lootImg.border.slice(0, -4)}.svg)` : "none";
                i.rareLootMessage.imageWrapper.style.backgroundImage = l;
                const c = re.getSvgFromGameType(o);
                i.rareLootMessage.icon.style.backgroundImage = c ? `url('${c}')` : "none";
                const m = this.localization.translate(`game-${o}`);
                i.rareLootMessage.name.innerHTML = m
            }
            t.rareLootMessage.opacity && (i.rareLootMessage.wrapper.style.opacity = String(a.rareLootMessage.opacity)),
            t.pickupMessage.message && (i.pickupMessage.innerHTML = a.pickupMessage.message),
            t.pickupMessage.opacity && (i.pickupMessage.style.opacity = String(a.pickupMessage.opacity)),
            (t.killMessage.text || t.killMessage.count) && (i.killMessage.text.innerHTML = a.killMessage.text,
            i.killMessage.count.innerHTML = a.killMessage.count),
            t.killMessage.opacity && (i.killMessage.div.style.opacity = String(a.killMessage.opacity));
            for (let o = 0; o < t.killFeed.length; o++) {
                const s = t.killFeed[o]
                  , l = i.killFeed.lines[o]
                  , c = a.killFeed[o];
                if (s.text && (l.text.innerHTML = c.text),
                s.offset) {
                    const m = D.uiLayout != D.UiLayout.Sm || D.tablet ? 35 : 15;
                    l.line.style.top = `${Math.floor(c.offset * m)}px`
                }
                s.color && (l.text.style.color = c.color),
                s.opacity && (l.line.style.opacity = String(c.opacity))
            }
            if (t.health || t.downed) {
                const o = [{
                    health: 100,
                    color: [179, 179, 179]
                }, {
                    health: 100,
                    color: [255, 255, 255]
                }, {
                    health: 75,
                    color: [255, 255, 255]
                }, {
                    health: 75,
                    color: [255, 158, 158]
                }, {
                    health: 25,
                    color: [255, 82, 82]
                }, {
                    health: 25,
                    color: [255, 0, 0]
                }, {
                    health: 0,
                    color: [255, 0, 0]
                }];
                let s = 0;
                const l = Math.ceil(a.health);
                for (; o[s].health > l && s < o.length - 1; )
                    s++;
                const c = o[k.max(s - 1, 0)]
                  , m = o[s]
                  , h = k.delerp(a.health, c.health, m.health);
                let u = [Math.floor(k.lerp(h, c.color[0], m.color[0])), Math.floor(k.lerp(h, c.color[1], m.color[1])), Math.floor(k.lerp(h, c.color[2], m.color[2]))];
                a.downed && (u = [255, 0, 0]),
                i.health.inner.style.backgroundColor = `rgba(${u[0]}, ${u[1]}, ${u[2]}, 1.0)`,
                i.health.inner.style.width = `${a.health}%`,
                i.health.depleted.style.width = `${a.health}%`,
                i.health.depleted.style.display = a.health > 0 ? "block" : "none",
                a.health > 25 ? i.health.inner.classList.remove("ui-bar-danger") : i.health.inner.classList.add("ui-bar-danger")
            }
            if (t.boost) {
                const o = F.player.boostBreakpoints;
                let s = 0;
                for (let l = 0; l < o.length; l++)
                    s += o[l];
                for (let l = a.boost / 100, c = 0; c < i.boost.bars.length; c++) {
                    const m = o[c] / s
                      , h = k.clamp(l / m, 0, 1);
                    l = k.max(l - m, 0),
                    i.boost.bars[c].style.width = `${h * 100}%`
                }
                i.boost.div.style.opacity = String(a.boost == 0 ? 0 : 1)
            }
            t.interaction.type && (i.interaction.div.style.display = a.interaction.type == 0 ? "none" : "flex"),
            t.interaction.text && (i.interaction.text.innerHTML = a.interaction.text),
            t.interaction.key && (i.interaction.key.innerHTML = a.touch ? "" : a.interaction.key,
            i.interaction.key.className = i.interaction.key.innerHTML.length > 1 ? "ui-interaction-small" : "ui-interaction-large"),
            t.interaction.usable && (i.interaction.key.style.display = a.interaction.usable ? "block" : "none");
            for (let o = 0; o < t.weapons.length; o++) {
                const s = t.weapons[o]
                  , l = i.weapons[o]
                  , c = a.weapons[o];
                if (s.type) {
                    let m = ""
                      , h = "";
                    const u = U[c.type];
                    u && (m = this.localization.translate(`game-hud-${c.type}`) || this.localization.translate(`game-${c.type}`),
                    h = re.getCssTransformFromGameType(c.type)),
                    l.type.innerHTML = m,
                    l.image.src = re.getSvgFromGameType(c.type),
                    l.image.style.display = u ? "inline" : "none",
                    l.image.style.transform = h
                }
                if (s.equipped && (l.div.style.backgroundColor = c.equipped ? "rgba(0, 0, 0, 0.4)" : "rgba(0, 0, 0, 0)"),
                s.selectable && (l.div.style.pointerEvents = c.type != "" || c.selectable ? "auto" : "none"),
                s.width) {
                    const m = k.lerp(c.width, 83.33, 100);
                    l.div.style.width = `${m}%`
                }
                s.opacity && (l.div.style.opacity = String(c.opacity)),
                s.ammo && l.ammo && (l.ammo.innerHTML = String(c.ammo),
                l.ammo.style.display = c.ammo > 0 ? "block" : "none"),
                s.bindStr && (l.number.innerHTML = c.bindStr[0] || "")
            }
            if (t.ammo.current) {
                const o = a.ammo.current;
                i.ammo.current.innerHTML = String(o),
                i.ammo.current.style.color = o > 0 ? "white" : "red"
            }
            if (t.ammo.remaining) {
                const o = a.ammo.remaining;
                i.ammo.remaining.innerHTML = String(o == Number.MAX_VALUE ? "&#8734;" : o),
                i.ammo.remaining.style.color = o != 0 ? "white" : "red"
            }
            t.ammo.displayCurrent && (i.ammo.current.style.opacity = String(a.ammo.displayCurrent ? 1 : 0)),
            t.ammo.displayRemaining && (i.ammo.remaining.style.opacity = String(a.ammo.displayRemaining ? 1 : 0),
            i.ammo.reloadButton.style.opacity = String(a.ammo.displayRemaining ? 1 : 0));
            for (let o = 0; o < t.scopes.length; o++) {
                const s = t.scopes[o]
                  , l = i.scopes[o]
                  , c = a.scopes[o];
                s.visible && (c.visible ? l.div.classList.remove("ui-hidden") : l.div.classList.add("ui-hidden")),
                s.equipped && (c.equipped ? (l.div.classList.add("ui-zoom-active"),
                l.div.classList.remove("ui-zoom-inactive")) : (l.div.classList.remove("ui-zoom-active"),
                l.div.classList.add("ui-zoom-inactive"))),
                s.selectable && (l.div.style.pointerEvents = c.selectable ? "auto" : "none")
            }
            for (let o = 0; o < t.loot.length; o++) {
                const s = t.loot[o]
                  , l = i.loot[o]
                  , c = a.loot[o];
                if (s && l && c) {
                    if ((s.count || s.maximum) && (l.count.innerHTML = String(c.count),
                    l.div.style.opacity = String(U[l.lootType].special && c.count == 0 ? 0 : c.count > 0 ? 1 : .25),
                    l.div.style.color = c.count == c.maximum ? "#ff9900" : "#ffffff"),
                    s.width) {
                        const m = 1 + c.width * .33
                          , h = `scale(${m}, ${m})`;
                        l.image.style.transform = h,
                        l.overlay && (l.overlay.style.transform = h)
                    }
                    s.selectable && (l.div.style.pointerEvents = c.selectable ? "auto" : "none")
                }
            }
            for (let o = 0; o < t.gear.length; o++) {
                const s = t.gear[o]
                  , l = i.gear[o]
                  , c = a.gear[o];
                if (s.item) {
                    const m = c.item ? U[c.item] : null
                      , h = m ? m.level : 0;
                    l.div.style.display = m ? "block" : "none",
                    l.level.innerHTML = this.localization.translate(`game-level-${h}`),
                    l.level.style.color = h >= 3 ? "#ff9900" : "#ffffff",
                    l.image.src = re.getSvgFromGameType(c.item)
                }
                if (s.selectable && (l.div.style.pointerEvents = c.selectable ? "auto" : "none"),
                s.width) {
                    const m = 1 + c.width * .33;
                    let h = `scale(${m}, ${m})`;
                    const u = U[c.item];
                    u?.lootImg.rot !== void 0 && (h += ` rotate(${u.lootImg.rot}rad)`),
                    l.image.style.transform = h
                }
            }
            for (let o = 0; o < t.perks.length; o++) {
                const s = t.perks[o]
                  , l = i.perks[o]
                  , c = a.perks[o];
                if (s.type && (l.perkType = c.type,
                l.divTitle.innerHTML = this.localization.translate(`game-${c.type}`),
                l.divDesc.innerHTML = this.localization.translate(`game-${c.type}-desc`),
                l.div.style.display = c.type ? "block" : "none",
                l.image.src = c.type ? re.getSvgFromGameType(c.type) : ""),
                s.droppable && (c.droppable ? (l.div.classList.add("ui-outline-hover"),
                l.div.classList.remove("ui-perk-no-drop")) : (l.div.classList.remove("ui-outline-hover"),
                l.div.classList.add("ui-perk-no-drop"))),
                s.pulse && (c.pulse ? l.div.classList.add("ui-perk-pulse") : l.div.classList.remove("ui-perk-pulse")),
                s.width) {
                    const m = 1 + c.width * .33;
                    l.image.style.transform = `scale(${m}, ${m})`
                }
            }
        }
        displayPickupMessage(t) {
            const a = this.newState.pickupMessage;
            a.message = this.getPickupMessageText(t),
            a.ticker = 0,
            a.duration = 3
        }
        displayKillMessage(t, a) {
            const i = this.newState.killMessage;
            i.text = t,
            i.count = a,
            i.ticker = 0,
            i.duration = 7
        }
        hideKillMessage() {
            this.newState.killMessage.ticker = k.max(this.newState.killMessage.ticker, this.newState.killMessage.duration - .2)
        }
        addRareLootMessage(t, a) {
            a && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration,
            this.rareLootMessageQueue = []),
            this.rareLootMessageQueue.push(t)
        }
        removeRareLootMessage(t) {
            const a = this.rareLootMessageQueue.indexOf(t);
            a >= 0 && this.rareLootMessageQueue.splice(a, 1),
            this.newState.rareLootMessage.lootType == t && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration)
        }
        getRareLootMessageText(t) {
            return U[t] ? `Acquired perk: ${this.localization.translate(`game-${t}`)}` : ""
        }
        addKillFeedMessage(t, a) {
            const i = this.newState.killFeed
              , o = i[i.length - 1];
            o.text = t,
            o.color = a,
            o.ticker = 0,
            i.sort( (s, l) => s.ticker - l.ticker)
        }
        getKillFeedText(t, a, i, o, s) {
            switch (o) {
            case st.Player:
                return `${a} ${this.localization.translate(s ? "game-knocked-out" : "game-killed")} ${t} ${this.localization.translate("game-with")} ${this.localization.translate(`game-${i}`)}`;
            case st.Bleeding:
                {
                    const l = this.localization.translate(a ? "game-finally-killed" : "game-finally-bled-out");
                    return a ? `${a} ${l} ${t}` : `${t} ${l}`
                }
            case st.Gas:
                {
                    let l, c;
                    return s ? (l = this.localization.translate("game-the-red-zone"),
                    c = this.localization.translate("game-knocked-out")) : c = this.localization.translate(a ? "game-finally-killed" : "game-died-outside"),
                    l ? `${l} ${c} ${t}` : `${t} ${c}`
                }
            case st.Airdrop:
                {
                    const l = de[i]
                      , c = this.localization.translate("game-the-air-drop")
                      , m = s ? this.localization.translate("game-knocked-out") : l && !l.airdropCrate ? this.localization.translate("game-killed") : this.localization.translate("game-crushed");
                    return `${c} ${m} ${t}`
                }
            case st.Airstrike:
                {
                    const l = this.localization.translate(s ? "game-knocked-out" : "game-killed");
                    return a ? `${a} ${l} ${t} ${this.localization.translate("game-with")} ${this.localization.translate("game-an-air-strike")}` : `${this.localization.translate("game-the-air-strike")} ${l} ${t}`
                }
            default:
                return ""
            }
        }
        getKillFeedColor(t, a, i, o) {
            return o ? "#efeeee" : t == a ? "#d1777c" : t == i ? "#00bfff" : "#efeeee"
        }
        getRoleKillFeedColor(t, a, i) {
            const o = U[t];
            return o?.killFeed?.color ? o.killFeed.color : re.colorToHexString(i.getTeamColor(a))
        }
        getRoleTranslation(t, a) {
            let i = `game-${t}`;
            return t == "leader" && (i = a == 1 ? "game-red-leader" : "game-blue-leader"),
            this.localization.translate(i)
        }
        getRoleAnnouncementText(t, a) {
            return `${this.localization.translate("game-youve-been-promoted-to")} ${this.getRoleTranslation(t, a)}!`
        }
        getRoleAssignedKillFeedText(t, a, i) {
            const o = this.getRoleTranslation(t, a);
            return `${i} ${this.localization.translate("game-promoted-to")} ${o}!`
        }
        getRoleKilledKillFeedText(t, a, i) {
            const o = this.getRoleTranslation(t, a);
            return i ? `${i} ${this.localization.translate("game-killed")} ${o}!` : `${o} ${this.localization.translate("game-is-dead")}!`
        }
        getKillText(t, a, i, o, s, l, c, m, h) {
            const u = o && !s
              , g = h ? t : this.localization.translate("game-you").toUpperCase()
              , w = u ? "game-knocked-out" : i ? "game-killed" : "game-finally-killed"
              , y = this.localization.translate(w)
              , _ = l ? h ? this.localization.translate("game-themselves") : this.localization.translate("game-yourself").toUpperCase() : a
              , S = this.localization.translate(m == F.DamageType.Airstrike ? "game-an-air-strike" : `game-${c}`)
              , b = this.localization.translate("game-with");
            return S && (i || u) ? `${g} ${y} ${_} ${b} ${S}` : `${g} ${y} ${_}`
        }
        getKillCountText(t) {
            return `${t} ${this.localization.translate(t != 1 ? "game-kills" : "game-kill")}`
        }
        getDownedText(t, a, i, o, s) {
            const l = s ? a : this.localization.translate("game-you").toUpperCase();
            let c = t;
            c || (o == F.DamageType.Gas ? c = this.localization.translate("game-the-red-zone") : o == F.DamageType.Airdrop ? c = this.localization.translate("game-the-air-drop") : o == F.DamageType.Airstrike && (c = this.localization.translate("game-the-air-strike")));
            let m = this.localization.translate(`game-${i}`);
            t && o == F.DamageType.Airstrike && (m = this.localization.translate("game-an-air-strike"));
            const h = this.localization.translate("game-with");
            return m ? `${c} knocked ${l} out ${h} ${m}` : `${c} knocked ${l} out`
        }
        getPickupMessageText(t) {
            const a = {
                [ot.Full]: "game-not-enough-space",
                [ot.AlreadyOwned]: "game-item-already-owned",
                [ot.AlreadyEquipped]: "game-item-already-equipped",
                [ot.BetterItemEquipped]: "game-better-item-equipped",
                [ot.GunCannotFire]: "game-gun-cannot-fire"
            }
              , i = a[t] || a[ot.Full];
            return this.localization.translate(i)
        }
        getInteractionText(t, a, i) {
            switch (t) {
            case 0:
                return "";
            case 1:
                return this.localization.translate("game-cancel");
            case 3:
                return a && i && a == i && i.BkfiV("self_revive") ? this.localization.translate("game-revive-self") : this.localization.translate("game-revive-teammate");
            case 4:
                {
                    const o = a.getInteraction();
                    return `${this.localization.translate(o.action)} ${this.localization.translate(o.object)}`
                }
            case 2:
                {
                    const o = a;
                    let s = this.localization.translate(`game-${o.type}`) || o.type;
                    return o.count > 1 && (s += ` (${o.count})`),
                    s
                }
            default:
                return ""
            }
        }
        getInteractionKey(t) {
            let a = null;
            switch (t) {
            case 1:
                a = this.inputBinds.getBind(j.Cancel);
                break;
            case 2:
                a = this.inputBinds.getBind(j.Loot) || this.inputBinds.getBind(j.Interact);
                break;
            case 4:
                a = this.inputBinds.getBind(j.Use) || this.inputBinds.getBind(j.Interact);
                break;
            case 3:
                a = this.inputBinds.getBind(j.Revive) || this.inputBinds.getBind(j.Interact);
                break;
            case 0:
            default:
                a = this.inputBinds.getBind(j.Use)
            }
            return a ? a.toString() : "<Unbound>"
        }
    }
    function Bn() {
        const r = {
            "ui-loot-bandage": "img/loot/loot-medical-bandage.svg",
            "ui-loot-healthkit": "img/loot/loot-medical-healthkit.svg",
            "ui-loot-soda": "img/loot/loot-medical-soda.svg",
            "ui-loot-painkiller": "img/loot/loot-medical-pill.svg",
            "ui-loot-9mm": "img/loot/loot-ammo-box.svg",
            "ui-loot-12gauge": "img/loot/loot-ammo-box.svg",
            "ui-loot-762mm": "img/loot/loot-ammo-box.svg",
            "ui-loot-556mm": "img/loot/loot-ammo-box.svg",
            "ui-loot-50AE": "img/loot/loot-ammo-box.svg",
            "ui-loot-308sub": "img/loot/loot-ammo-box.svg",
            "ui-loot-flare": "img/loot/loot-ammo-box.svg",
            "ui-loot-45acp": "img/loot/loot-ammo-box.svg"
        };
        for (const [t,a] of Object.entries(r))
            se(t).getElementsByClassName("ui-loot-image")[0].src = a;
        se("mag-glass-white").src = "img/gui/mag-glass.svg",
        se("ui-minimize-img").src = "img/gui/minimize.svg"
    }
    class Rn {
        constructor(t, a, i, o, s, l, c, m, h, u, g, w) {
            this.KvtYYS = t,
            this.FbEJ = a,
            this.KMArtr = i,
            this.eDRHC = o,
            this.Wzuza = s,
            this.IVozI = l,
            this.mnIY = c,
            this.LHb = m,
            this.dYFGjj = h,
            this.respawns = u,
            this.onJoin = g,
            this.onQuit = w,
            this.KvtYYS = t,
            this.FbEJ = a,
            this.LHb = m,
            this.KMArtr = i,
            this.eDRHC = o,
            this.Wzuza = s,
            this.IVozI = l,
            this.mnIY = c,
            this.dYFGjj = h
        }
        initialized = !1;
        teamMode = We.Solo;
        victoryMusic = null;
        egnBcb = null;
        connecting = !1;
        connected = !1;
        DAor;
        kPOw;
        WdDJ;
        stQvM;
        ipWa;
        erjBtm;
        bJy;
        AIv;
        cmDwi;
        XKw;
        xccaRn;
        PTCs;
        IHijSN;
        jTI;
        Yshfll;
        lLm;
        YDkd;
        OYGn;
        ULknZU;
        RvDLcL;
        tJLDU;
        wQzxe;
        HdT;
        iuhtMQ;
        dYQsO;
        WXej;
        Amq;
        SxINps;
        glHQQ;
        jIhr;
        uhNakF;
        uFDm;
        DVq;
        UattX;
        sHyB;
        Tjkysi;
        kWe;
        Fzk;
        baWXDd;
        gvdQ;
        hWOP;
        seq;
        seqInFlight;
        seqSendTime;
        pings;
        debugPingTime;
        lastUpdateTime;
        updateIntervals;
        tryJoinGame(t, a, i, o, s) {
            if (!this.connecting && !this.connected && !this.initialized) {
                this.egnBcb && (this.egnBcb.onerror = function() {}
                ,
                this.egnBcb.onopen = function() {}
                ,
                this.egnBcb.onmessage = function() {}
                ,
                this.egnBcb.onclose = function() {}
                ,
                this.egnBcb.close(),
                this.egnBcb = null),
                this.connecting = !0,
                this.connected = !1;
                try {
                    this.egnBcb = new WebSocket(t),
                    this.egnBcb.binaryType = "arraybuffer",
                    this.egnBcb.onerror = l => {
                        this.egnBcb?.close()
                    }
                    ,
                    this.egnBcb.onopen = () => {
                        this.connecting = !1,
                        this.connected = !0;
                        const l = this.eDRHC.get("playerName")
                          , c = new Os;
                        c.protocol = F.protocolVersion,
                        c.matchPriv = a,
                        c.loadoutPriv = i,
                        c.questPriv = o,
                        c.name = l,
                        c.useTouch = D.touch,
                        c.isMobile = D.mobile || window.mobile,
                        c.bot = !1,
                        c.loadout = this.eDRHC.get("loadout"),
                        this.SMLP(ke.Join, c, 8192)
                    }
                    ,
                    this.egnBcb.onmessage = l => {
                        const c = new ti(l.data);
                        for (; ; ) {
                            const m = c.deserializeMsgType();
                            if (m == ke.None)
                                break;
                            this.smFqZG(m, c.getStream())
                        }
                    }
                    ,
                    this.egnBcb.onclose = () => {
                        const l = this.OYGn?.displayingStats
                          , c = this.connecting
                          , m = this.connected;
                        if (this.connecting = !1,
                        this.connected = !1,
                        c)
                            s();
                        else if (m && !this.glHQQ && !l) {
                            const h = this.Amq || "index-host-closed";
                            this.onQuit(h)
                        }
                    }
                } catch (l) {
                    console.error(l),
                    this.connecting = !1,
                    this.connected = !1,
                    s()
                }
            }
        }
        init() {
            this.iuhtMQ = this.KvtYYS.renderer.type == cr.CANVAS,
            this.DAor = new vn(this.Wzuza,this.eDRHC),
            this.kPOw = new uo,
            this.WdDJ = new Co(this,this.iuhtMQ),
            this.stQvM = new So(this.WdDJ),
            this.ipWa = new xo,
            this.erjBtm = new bo(this.ipWa),
            this.bJy = new To,
            this.AIv = new Vc,
            this.cmDwi = new en,
            this.XKw = new dn,
            this.xccaRn = new Kc,
            this.PTCs = new mn(this.FbEJ),
            this.IHijSN = new Nc,
            this.jTI = new Mo,
            this.Yshfll = new Xc,
            this.lLm = new rn,
            this.YDkd = new tc(this.iuhtMQ),
            this.OYGn = new Dn(this,this.FbEJ,this.stQvM,this.PTCs,this.KMArtr,this.iuhtMQ,this.DAor,this.IVozI,this.mnIY),
            this.ULknZU = new En(this.KMArtr,this.IVozI),
            this.RvDLcL = new Kl(this.FbEJ,this.OYGn,this.bJy,this.kPOw,this.erjBtm),
            this.tJLDU = new gn;
            const t = {
                [ve.Player]: this.bJy.playerPool,
                [ve.Obstacle]: this.erjBtm.CcKuBx,
                [ve.Loot]: this.lLm.lootPool,
                [ve.DeadBody]: this.Yshfll.deadBodyPool,
                [ve.Building]: this.erjBtm.IGN,
                [ve.Structure]: this.erjBtm.kXM,
                [ve.Decal]: this.ipWa.decalPool,
                [ve.Projectile]: this.XKw.projectilePool,
                [ve.Smoke]: this.jTI.ZevfO,
                [ve.Airdrop]: this.IHijSN.airdropPool
            };
            this.wQzxe = new _o;
            for (const i in t)
                t.hasOwnProperty(i) && this.wQzxe.vZSyEV(i, t[i]);
            this.HdT = new Re;
            const a = [this.erjBtm.display.ground, this.WdDJ.layers[0], this.WdDJ.ground, this.WdDJ.layers[1], this.WdDJ.layers[2], this.WdDJ.layers[3], this.HdT, this.YDkd.gasRenderer.display, this.DAor.container, this.RvDLcL.container, this.OYGn.container, this.OYGn.MzMpx.container, this.RvDLcL.indContainer];
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                o && (o.interactiveChildren = !1,
                this.KvtYYS.stage.addChild(o))
            }
            this.Amq = "",
            this.SxINps = !1,
            this.glHQQ = !1,
            this.jIhr = !1,
            this.uhNakF = 0,
            this.uFDm = new Ja,
            this.DVq = 0,
            this.UattX = 0,
            this.dYQsO = !1,
            this.WXej = 0,
            this.sHyB = 0,
            this.Tjkysi = 0,
            this.kWe = null,
            this.Fzk = !1,
            this.baWXDd = 1,
            this.gvdQ = 1,
            this.hWOP = !1,
            this.seq = 0,
            this.seqInFlight = !1,
            this.seqSendTime = 0,
            this.pings = [],
            this.updateIntervals = [],
            this.lastUpdateTime = 0,
            this.debugPingTime = 0,
            this.kPOw.azYM(this.eDRHC.get("screenShake")),
            this.kPOw.meP(this.eDRHC.get("interpolation")),
            this.bJy.anonPlayerNames = this.eDRHC.get("anonPlayerNames"),
            this.initialized = !0
        }
        free() {
            if (this.egnBcb && (this.egnBcb.onmessage = function() {}
            ,
            this.egnBcb.close(),
            this.egnBcb = null),
            this.connecting = !1,
            this.connected = !1,
            this.initialized)
                for (this.initialized = !1,
                this.dYQsO = !1,
                this.WXej = 0,
                this.RvDLcL.AlR(),
                this.ULknZU.AlR(),
                this.OYGn.AlR(),
                this.YDkd.AlR(),
                this.IHijSN.AlR(),
                this.PTCs.AlR(),
                this.erjBtm.AlR(),
                this.stQvM.AlR(),
                this.WdDJ.AlR(),
                this.Wzuza.AlR(),
                this.FbEJ.stopAll(); this.KvtYYS.stage.children.length > 0; ) {
                    const t = this.KvtYYS.stage.children[0];
                    this.KvtYYS.stage.removeChild(t),
                    t.destroy({
                        children: !0
                    })
                }
        }
        warnPageReload() {
            return this.initialized && this.SxINps && !this.jIhr && !this.OYGn.displayingStats
        }
        update(t) {
            //global variables
            window.activeId = this.Tjkysi;
            window.spectating = this.jIhr;
            const a = this.jTI.BaNjC
              , i = {};
            this.SxINps && (this.DVq += t),
            this.bJy.lCPzxG(t, this.Tjkysi, this.teamMode, this.WdDJ, this.stQvM, this.kPOw, this.erjBtm, this.IVozI, this.FbEJ, this.ULknZU, this.RvDLcL.wheelKeyTriggered, this.OYGn.displayingStats, this.jIhr),
            this.updateAmbience(),
            this.kPOw.XafO = e.copy(this.kWe.eCcoC),
            this.kPOw.DKGKye();
            const o = this.kWe.FKT()
              , s = k.min(this.kPOw.llqJG, this.kPOw.Nsps)
              , l = k.max(this.kPOw.llqJG, this.kPOw.Nsps)
              , c = k.max(s * (16 / 9), l);
            this.kPOw.baWXDd = c * .5 / (o * this.kPOw.OGpt);
            const m = this.kWe.zoomFast ? 3 : 2
              , h = this.kWe.zoomFast ? 3 : 1.4
              , u = this.kPOw.baWXDd > this.kPOw.JTYv ? m : h;
            this.kPOw.JTYv = k.lerp(t * u, this.kPOw.JTYv, this.kPOw.baWXDd),
            this.FbEJ.cameraPos = e.copy(this.kPOw.XafO),
            this.Wzuza.keyPressed(J.Escape) && this.OYGn.toggleEscMenu(),
            (this.IVozI.isBindPressed(j.ToggleMap) || this.Wzuza.keyPressed(J.G) && !this.IVozI.isKeyBound(J.G)) && this.OYGn.displayMapLarge(!1),
            this.IVozI.isBindPressed(j.CycleUIMode) && this.OYGn.cycleVisibilityMode(),
            (this.IVozI.isBindPressed(j.HideUI) || this.Wzuza.keyPressed(J.Escape) && !this.OYGn.hudVisible) && this.OYGn.cycleHud();
            const g = this.kWe.XafO
              , w = e.create(this.kWe.XafO.x + (this.Wzuza.mousePos.x - this.kPOw.llqJG * .5) / this.kPOw.CZsM(), this.kWe.XafO.y + (this.kPOw.Nsps * .5 - this.Wzuza.mousePos.y) / this.kPOw.CZsM())
              , y = e.sub(w, g);
            let _ = e.length(y)
              , S = _ > 1e-5 ? e.div(y, _) : e.create(1, 0);
            this.RvDLcL.wheelDisplayed && (_ = this.uFDm.toMouseLen,
            S = this.uFDm.toMouseDir);
            const b = new Ja;
            if (b.seq = this.seq,
            !this.jIhr) {
                if (D.touch) {
                    const M = this.DAor.getTouchMovement(this.kPOw)
                      , O = this.DAor.getAimMovement(this.kWe, this.kPOw);
                    let H = e.copy(O.aimMovement.toAimDir);
                    if (this.DAor.turnDirTicker -= t,
                    this.DAor.moveDetected && !O.touched) {
                        const Q = e.normalizeSafe(M.toMoveDir, e.create(1, 0))
                          , W = this.DAor.turnDirTicker < 0 ? Q : O.aimMovement.toAimDir;
                        this.DAor.setAimDir(W),
                        H = W
                    }
                    O.touched && (this.DAor.turnDirTicker = this.DAor.turnDirCooldown),
                    this.DAor.moveDetected ? (b.touchMoveDir = e.normalizeSafe(M.toMoveDir, e.create(1, 0)),
                    b.touchMoveLen = Math.round(k.clamp(M.toMoveLen, 0, 1) * 255)) : b.touchMoveLen = 0,
                    b.touchMoveActive = !0;
                    const N = O.aimMovement.toAimLen
                      , $ = k.clamp(N / this.DAor.padPosRange, 0, 1) * F.player.throwableMaxMouseDist;
                    b.toMouseLen = $,
                    b.toMouseDir = H
                } else
                    b.moveLeft = this.IVozI.isBindDown(j.MoveLeft) || this.Wzuza.keyDown(J.Left) && !this.IVozI.isKeyBound(J.Left),
                    b.moveRight = this.IVozI.isBindDown(j.MoveRight) || this.Wzuza.keyDown(J.Right) && !this.IVozI.isKeyBound(J.Right),
                    b.moveUp = this.IVozI.isBindDown(j.MoveUp) || this.Wzuza.keyDown(J.Up) && !this.IVozI.isKeyBound(J.Up),
                    b.moveDown = this.IVozI.isBindDown(j.MoveDown) || this.Wzuza.keyDown(J.Down) && !this.IVozI.isKeyBound(J.Down),
                    b.toMouseDir = e.copy(S),
                    b.toMouseLen = _;
                b.touchMoveDir = e.normalizeSafe(b.touchMoveDir, e.create(1, 0)),
                b.touchMoveLen = k.clamp(b.touchMoveLen, 0, 255),
                b.toMouseDir = e.normalizeSafe(b.toMouseDir, e.create(1, 0)),
                b.toMouseLen = k.clamp(b.toMouseLen, 0, ae.MouseMaxDist),
                b.shootStart = this.IVozI.isBindPressed(j.Fire) || this.DAor.shotDetected,
                b.shootHold = this.IVozI.isBindDown(j.Fire) || this.DAor.shotDetected,
                b.portrait = this.kPOw.llqJG < this.kPOw.Nsps;
                const E = [j.Reload, j.Revive, j.Use, j.Loot, j.Cancel, j.EquipPrimary, j.EquipSecondary, j.EquipThrowable, j.EquipMelee, j.EquipNextWeap, j.EquipPrevWeap, j.EquipLastWeap, j.EquipOtherGun, j.EquipPrevScope, j.EquipNextScope, j.StowWeapons];
                for (let M = 0; M < E.length; M++) {
                    const O = E[M];
                    this.IVozI.isBindPressed(O) && b.addInput(O)
                }
                if (this.IVozI.isBindPressed(j.Interact)) {
                    const M = []
                      , O = [j.Revive, j.Use, j.Loot];
                    for (let H = 0; H < O.length; H++) {
                        const N = O[H];
                        this.IVozI.getBind(N) || M.push(N)
                    }
                    if (M.length == O.length)
                        b.addInput(j.Interact);
                    else
                        for (let H = 0; H < M.length; H++)
                            b.addInput(M[H])
                }
                (this.IVozI.isBindPressed(j.SwapWeapSlots) || this.OYGn.swapWeapSlots) && (b.addInput(j.SwapWeapSlots),
                this.kWe.gunSwitchCooldown = 0),
                this.OYGn.reloadTouched && b.addInput(j.Reload),
                this.OYGn.interactionTouched && (b.addInput(j.Interact),
                b.addInput(j.Cancel));
                for (let M = 0; M < this.ULknZU.uiEvents.length; M++) {
                    const O = this.ULknZU.uiEvents[M];
                    if (O.action == "use")
                        if (O.type == "weapon") {
                            const N = {
                                [St.Primary]: j.EquipPrimary,
                                [St.Secondary]: j.EquipSecondary,
                                [St.Melee]: j.EquipMelee,
                                [St.Throwable]: j.EquipThrowable
                            }[O.data];
                            N && b.addInput(N)
                        } else
                            b.useItem = O.data
                }
                this.IVozI.isBindPressed(j.UseBandage) ? b.useItem = "bandage" : this.IVozI.isBindPressed(j.UseHealthKit) ? b.useItem = "healthkit" : this.IVozI.isBindPressed(j.UseSoda) ? b.useItem = "soda" : this.IVozI.isBindPressed(j.UsePainkiller) && (b.useItem = "painkiller");
                let L = !1;
                for (let M = 0; M < this.ULknZU.uiEvents.length; M++) {
                    const O = this.ULknZU.uiEvents[M];
                    if (O.action == "drop") {
                        const H = new ll;
                        if (O.type == "weapon") {
                            const N = O.data
                              , $ = this.kWe.sUpm.kgyV;
                            H.item = $[N].type,
                            H.weapIdx = N
                        } else if (O.type == "perk") {
                            const N = O.data
                              , $ = this.kWe.tuWDuv.Rwf
                              , Q = $.length > N ? $[N] : null;
                            Q?.droppable && (H.item = Q.type)
                        } else {
                            const N = O.data == "helmet" ? this.kWe.tuWDuv.Mkgknh : O.data == "chest" ? this.kWe.tuWDuv.FUoWEd : O.data;
                            H.item = N
                        }
                        H.item != "" && (this.SMLP(ke.DropItem, H, 128),
                        H.item != "fists" && (L = !0))
                    }
                }
                if (L && this.FbEJ.playSound("loot_drop_01", {
                    channel: "ui"
                }),
                this.OYGn.roleSelected) {
                    const M = new ml;
                    M.role = this.OYGn.roleSelected,
                    this.SMLP(ke.PerkModeRoleSelect, M, 128),
                    this.eDRHC.set("perkModeRole", M.role)
                }
            }
            const A = this.OYGn.specBegin
              , P = this.OYGn.specNext || this.jIhr && this.Wzuza.keyPressed(J.Right)
              , T = this.OYGn.specPrev || this.jIhr && this.Wzuza.keyPressed(J.Left)
              , I = this.Wzuza.keyPressed(J.Right) || this.Wzuza.keyPressed(J.Left);
            if (A || this.jIhr && P || T) {
                const E = new sl;
                E.specBegin = A,
                E.specNext = P,
                E.specPrev = T,
                E.specForce = I,
                this.SMLP(ke.Spectate, E, 128)
            }
            this.OYGn.specBegin = !1,
            this.OYGn.specNext = !1,
            this.OYGn.specPrev = !1,
            this.OYGn.reloadTouched = !1,
            this.OYGn.interactionTouched = !1,
            this.OYGn.swapWeapSlots = !1,
            this.OYGn.roleSelected = "";
            let C = !1;
            for (const E in b)
                if (b.hasOwnProperty(E)) {
                    if (E == "inputs")
                        C = b[E].length > 0;
                    else if (E == "toMouseDir" || E == "touchMoveDir") {
                        const L = k.clamp(e.dot(b[E], this.uFDm[E]), -1, 1);
                        C = k.rad2deg(Math.acos(L)) > .1
                    } else
                        E == "toMouseLen" ? C = Math.abs(this.uFDm[E] - b[E]) > .5 : E == "shootStart" ? C = b[E] || b[E] != this.uFDm[E] : this.uFDm[E] != b[E] && (C = !0);
                    if (C)
                        break
                }
            this.uhNakF -= t,
            (C || this.uhNakF < 0) && (this.seqInFlight || (this.seq = (this.seq + 1) % 256,
            this.seqSendTime = Date.now(),
            this.seqInFlight = !0,
            b.seq = this.seq),
            this.SMLP(ke.Input, b, 128),
            this.uhNakF = 1,
            this.uFDm = b),
            this.ULknZU.flushInput(),
            this.erjBtm.lCPzxG(t, this.kWe, this.bJy, this.stQvM, this.FbEJ, this.LHb, this.WdDJ, this.kPOw, a, i),
            this.lLm.lCPzxG(t, this.kWe, this.erjBtm, this.FbEJ, this.kPOw, i),
            this.AIv.lCPzxG(t, this.bJy, this.erjBtm, this.kPOw, this.kWe, this.WdDJ, this.stQvM, this.FbEJ),
            this.cmDwi.lCPzxG(t, this.bJy, this.erjBtm, this.kPOw, this.kWe, this.WdDJ, this.stQvM, this.FbEJ),
            this.XKw.lCPzxG(t, this.stQvM, this.FbEJ, this.kWe, this.erjBtm, this.WdDJ, this.kPOw),
            this.xccaRn.lCPzxG(t, this.erjBtm, this.bJy, this.kPOw, this.stQvM, this.FbEJ, i),
            this.IHijSN.lCPzxG(t, this.kWe, this.kPOw, this.erjBtm, this.stQvM, this.WdDJ, this.FbEJ),
            this.PTCs.lCPzxG(t, this.kPOw, this.kWe, this.erjBtm, this.WdDJ),
            this.jTI.lCPzxG(t, this.kPOw, this.kWe, this.erjBtm, this.WdDJ),
            this.tJLDU.lCPzxG(t, this.Tjkysi, this.bJy, this.stQvM, this.FbEJ),
            this.stQvM.lCPzxG(t, this.kPOw, i),
            this.Yshfll.lCPzxG(t, this.bJy, this.kWe, this.erjBtm, this.kPOw, this.WdDJ),
            this.ipWa.lCPzxG(t, this.kPOw, this.WdDJ, i),
            this.OYGn.lCPzxG(t, this.kWe, this.erjBtm, this.YDkd, this.lLm, this.bJy, this.kPOw, this.teamMode, this.erjBtm.factionMode),
            this.ULknZU.lCPzxG(t, this.kWe, this.jIhr, this.bJy, this.lLm, this.erjBtm, this.IVozI),
            this.RvDLcL.lCPzxG(t, this.sHyB, this.kWe, this.teamMode, this.Yshfll, this.erjBtm, this.WdDJ, this.Wzuza, this.IVozI, this.jIhr),
            this.DAor.lCPzxG(t, this.kWe, this.erjBtm, this.kPOw, this.WdDJ),
            this.WdDJ.lCPzxG(t, this.kPOw, this.erjBtm, i);
            for (let E = 0; E < this.RvDLcL.newPings.length; E++) {
                const L = this.RvDLcL.newPings[E]
                  , M = new Ya;
                M.type = L.type,
                M.pos = L.pos,
                M.isPing = !0,
                this.SMLP(ke.Emote, M, 128)
            }
            this.RvDLcL.newPings = [];
            for (let E = 0; E < this.RvDLcL.newEmotes.length; E++) {
                const L = this.RvDLcL.newEmotes[E]
                  , M = new Ya;
                M.type = L.type,
                M.pos = L.pos,
                M.isPing = !1,
                this.SMLP(ke.Emote, M, 128)
            }
            this.RvDLcL.newEmotes = [];
            const q = Date.now();
            if (q > this.debugPingTime) {
                let E = function(N, $) {
                    return (" ".repeat($) + N).slice(-7)
                };
                this.debugPingTime = q + 2e4;
                const L = this.pings.sort( (N, $) => N - $)
                  , M = L.length;
                if (M > 0) {
                    const N = L[Math.floor(M * .5)]
                      , $ = L[Math.floor(M * .95)]
                      , Q = L[M - 1];
                    console.log("Ping     min:", E(L[0].toFixed(2), 7), "med:", E(N.toFixed(2), 7), "p95:", E($.toFixed(2), 7), "max:", E(Q.toFixed(2), 7))
                }
                this.pings = [];
                const O = this.updateIntervals.sort( (N, $) => N - $)
                  , H = O.length;
                if (H > 0) {
                    const N = O[Math.floor(H * .5)]
                      , $ = O[Math.floor(H * .95)]
                      , Q = O[H - 1];
                    console.log("Interval min:", E(O[0].toFixed(2), 7), "med:", E(N.toFixed(2), 7), "p95:", E($.toFixed(2), 7), "max:", E(Q.toFixed(2), 7))
                }
                this.updateIntervals = []
            }
            this.CCrkNK(t, i)
        }
        CCrkNK(t, a) {
            const i = this.erjBtm.mapLoaded ? this.erjBtm.getMapDef().biome.colors.grass : 8433481;
            this.KvtYYS.renderer.background.color = i,
            this.bJy.CCrkNK(this.kPOw, a),
            this.AIv.CCrkNK(this.kPOw, a),
            this.cmDwi.CCrkNK(this.kPOw),
            this.ipWa.CCrkNK(this.kPOw, a, this.kWe.layer),
            this.erjBtm.CCrkNK(this.kPOw),
            this.YDkd.CCrkNK(t, this.kPOw),
            this.OYGn.CCrkNK(this.kWe.XafO, this.YDkd, this.kPOw, this.erjBtm, this.PTCs, a),
            this.RvDLcL.CCrkNK(this.kPOw),
            D.debug && ze.CCrkNK(this.kPOw, this.HdT),
            ze.flush()
        }
        updateAmbience() {
            const t = this.kWe.XafO;
            let a = 0
              , i = 0
              , o = 1;
            if (this.erjBtm.isInOcean(t))
                a = 1,
                i = 0,
                o = 0;
            else {
                const s = this.erjBtm.distanceToShore(t);
                a = k.delerp(s, 50, 0),
                i = 0;
                for (let l = 0; l < this.erjBtm.terrain.rivers.length; l++) {
                    const c = this.erjBtm.terrain?.rivers[l]
                      , m = c.spline.getClosestTtoPoint(t)
                      , h = c.spline.getPos(m)
                      , u = e.length(e.sub(h, t))
                      , g = c.waterWidth + 2
                      , w = k.delerp(u, 30 + g, g)
                      , y = k.clamp(c.waterWidth / 8, .25, 1);
                    i = k.max(w * y, i)
                }
                this.kWe.layer == 1 && (i = 0),
                o = 1
            }
            this.LHb.getTrack("wind").weight = o,
            this.LHb.getTrack("river").weight = i,
            this.LHb.getTrack("waves").weight = a
        }
        resize() {
            this.kPOw.llqJG = D.screenWidth,
            this.kPOw.Nsps = D.screenHeight,
            this.erjBtm.resize(this.KvtYYS.renderer, this.iuhtMQ),
            this.YDkd.resize(),
            this.OYGn.resize(this.erjBtm, this.kPOw),
            this.DAor.resize(),
            this.WdDJ.resize(this.erjBtm, this.kPOw)
        }
        hpqvD(t) {
            const a = {
                audioManager: this.FbEJ,
                renderer: this.WdDJ,
                particleBarn: this.stQvM,
                map: this.erjBtm,
                smokeBarn: this.jTI,
                decalBarn: this.ipWa
            };
            t.activePlayerIdDirty && (this.Tjkysi = t.activePlayerId);
            for (let s = 0; s < t.playerInfos.length; s++)
                this.bJy.setPlayerInfo(t.playerInfos[s]);
            for (let s = 0; s < t.deletedPlayerIds.length; s++) {
                const l = t.deletedPlayerIds[s];
                this.bJy.deletePlayerInfo(l)
            }
            if ((t.playerInfos.length > 0 || t.deletedPlayerIds.length > 0) && this.bJy.recomputeTeamData(),
            t.playerStatusDirty) {
                const s = this.bJy.getPlayerInfo(this.Tjkysi).teamId;
                this.bJy.updatePlayerStatus(s, t.playerStatus, this.erjBtm.factionMode)
            }
            if (t.groupStatusDirty) {
                const s = this.bJy.getPlayerInfo(this.Tjkysi).groupId;
                this.bJy.updateGroupStatus(s, t.groupStatus)
            }
            for (let s = 0; s < t.delObjIds.length; s++)
                this.wQzxe.iarEWc(t.delObjIds[s]);
            for (let s = 0; s < t.fullObjects.length; s++) {
                const l = t.fullObjects[s];
                this.wQzxe.hydH(l.__type, l.__id, l, a)
            }
            for (let s = 0; s < t.partObjects.length; s++) {
                const l = t.partObjects[s];
                this.wQzxe.onD(l.__id, l, a)
            }
            this.jIhr = this.Tjkysi != this.sHyB,
            this.kWe = this.bJy.getPlayerById(this.Tjkysi),
            this.kWe.cqhV(t.activePlayerData, this.bJy),
            t.activePlayerData.weapsDirty && (this.OYGn.weapsDirty = !0),
            this.jIhr && (this.OYGn.setSpectateTarget(this.Tjkysi, this.sHyB, this.teamMode, this.bJy),
            this.DAor.hideAll()),
            this.kWe.layer = this.kWe.tuWDuv.HuWH,
            this.WdDJ.setActiveLayer(this.kWe.layer),
            this.FbEJ.activeLayer = this.kWe.layer;
            const i = this.kWe.isUnderground(this.erjBtm);
            this.WdDJ.setUnderground(i),
            this.FbEJ.underground = i,
            t.gasDirty && this.YDkd.setFullState(t.gasT, t.gasData, this.erjBtm, this.OYGn),
            t.gasTDirty && this.YDkd.setProgress(t.gasT);
            for (let s = 0; s < t.bullets.length; s++) {
                const l = t.bullets[s];
                Gc(l, this.AIv, this.cmDwi, this.bJy, this.WdDJ),
                l.shotFx && this.tJLDU.addShot(l)
            }
            for (let s = 0; s < t.explosions.length; s++) {
                const l = t.explosions[s];
                this.xccaRn.addExplosion(l.type, l.pos, l.layer)
            }
            for (let s = 0; s < t.emotes.length; s++) {
                const l = t.emotes[s];
                l.isPing ? this.RvDLcL.addPing(l, this.erjBtm.factionMode) : this.RvDLcL.addEmote(l)
            }
            this.PTCs.updatePlanes(t.planes, this.erjBtm);
            for (let s = 0; s < t.airstrikeZones.length; s++)
                this.PTCs.createAirstrikeZone(t.airstrikeZones[s]);
            if (this.OYGn.updateMapIndicators(t.mapIndicators),
            t.killLeaderDirty) {
                const s = re.htmlEscape(this.bJy.getPlayerName(t.killLeaderId, this.Tjkysi, !0));
                this.OYGn.updateKillLeader(t.killLeaderId, s, t.killLeaderKills, this.erjBtm.getMapDef().gameMode)
            }
            const o = Date.now();
            if (this.UattX++,
            t.ack == this.seq && this.seqInFlight) {
                this.seqInFlight = !1;
                const s = o - this.seqSendTime;
                this.pings.push(s)
            }
            if (this.lastUpdateTime > 0) {
                const s = o - this.lastUpdateTime;
                this.kPOw.jAGEt = s / 1e3,
                this.updateIntervals.push(s)
            }
            this.lastUpdateTime = o
        }
        smFqZG(t, a) {
            switch (t) {
            case ke.Joined:
                {
                    const i = new Bs;
                    i.deserialize(a),
                    this.onJoin(),
                    this.teamMode = i.teamMode,
                    this.sHyB = i.playerId,
                    this.Fzk = !0,
                    this.RvDLcL.updateEmoteWheel(i.emotes),
                    i.started || this.OYGn.setWaitingForPlayers(!0),
                    this.OYGn.removeAds(),
                    this.victoryMusic && (this.victoryMusic.stop(),
                    this.victoryMusic = null),
                    document.hasFocus() || this.FbEJ.playSound("notification_start_01", {
                        channel: "ui"
                    }),
                    this.eDRHC.get("ENV") === "CrazyGames" ? window.CrazyGames.SDK.game.gameplayStart() : this.eDRHC.get("ENV") === "POKI" && window.PokiSDK.gameplayStart();
                    break
                }
            case ke.Map:
                {
                    const i = new ol;
                    if (i.deserialize(a),
                    this.erjBtm.loadMap(i, this.kPOw, this.iuhtMQ, this.stQvM),
                    this.dYFGjj.loadMapAssets(this.erjBtm.mapName),
                    this.erjBtm.renderMap(this.KvtYYS.renderer, this.iuhtMQ),
                    this.bJy.onMapLoad(this.erjBtm),
                    this.AIv.onMapLoad(this.erjBtm),
                    this.stQvM.onMapLoad(this.erjBtm),
                    this.OYGn.onMapLoad(this.erjBtm, this.kPOw),
                    this.erjBtm.perkMode) {
                        const o = this.eDRHC.get("perkModeRole");
                        this.OYGn.setRoleMenuOptions(o, this.erjBtm.getMapDef().gameMode.perkModeRoles),
                        this.OYGn.setRoleMenuActive(!0)
                    } else
                        this.OYGn.setRoleMenuActive(!1);
                    break
                }
            case ke.Update:
                {
                    const i = new Hs;
                    i.deserialize(a, this.wQzxe),
                    this.SxINps = !0,
                    this.hpqvD(i);
                    break
                }
            case ke.Kill:
                {
                    const i = new Xs;
                    i.deserialize(a);
                    const o = i.itemSourceType || i.mapSourceType
                      , s = this.bJy.getPlayerInfo(this.Tjkysi).teamId
                      , l = i.downed && !i.killed || i.damageType == F.DamageType.Gas || i.damageType == F.DamageType.Bleeding || i.damageType == F.DamageType.Airdrop
                      , c = this.bJy.getPlayerInfo(i.targetId)
                      , m = this.bJy.getPlayerInfo(i.killCreditId)
                      , h = l ? m : this.bJy.getPlayerInfo(i.killerId);
                    let u = this.bJy.getPlayerName(c.playerId, this.Tjkysi, !0)
                      , g = this.bJy.getPlayerName(m.playerId, this.Tjkysi, !0)
                      , w = this.bJy.getPlayerName(h.playerId, this.Tjkysi, !0);
                    if (u = re.htmlEscape(u),
                    g = re.htmlEscape(g),
                    w = re.htmlEscape(w),
                    i.killCreditId == this.Tjkysi) {
                        const S = i.killerId == this.Tjkysi
                          , b = i.killerId == i.targetId || i.killCreditId == i.targetId
                          , A = this.ULknZU.getKillText(g, u, S, i.downed, i.killed, b, o, i.damageType, this.jIhr)
                          , P = i.killed && !b ? this.ULknZU.getKillCountText(i.killerKills) : "";
                        this.ULknZU.displayKillMessage(A, P)
                    } else if (i.targetId == this.Tjkysi && i.downed && !i.killed) {
                        const S = this.ULknZU.getDownedText(g, u, o, i.damageType, this.jIhr);
                        this.ULknZU.displayKillMessage(S, "")
                    }
                    i.killCreditId == this.sHyB && i.killed && this.OYGn.setLocalKills(i.killerKills);
                    const y = this.ULknZU.getKillFeedText(u, h.teamId ? w : "", o, i.damageType, i.downed && !i.killed)
                      , _ = this.ULknZU.getKillFeedColor(s, c.teamId, m.teamId, this.erjBtm.factionMode);
                    this.ULknZU.addKillFeedMessage(y, _),
                    i.killed && this.bJy.addDeathEffect(i.targetId, i.killerId, o, this.FbEJ, this.stQvM),
                    i.damageType == F.DamageType.Player && this.AIv.createBulletHit(this.bJy, i.targetId, this.FbEJ);
                    break
                }
            case ke.RoleAnnouncement:
                {
                    const i = new cl;
                    i.deserialize(a);
                    const o = da[i.role];
                    if (!o)
                        break;
                    const s = this.bJy.getPlayerInfo(i.playerId)
                      , l = re.htmlEscape(this.bJy.getPlayerName(i.playerId, this.Tjkysi, !0));
                    if (i.assigned) {
                        if (o.sound?.assign && (i.role == "kill_leader" && this.erjBtm.getMapDef().gameMode.spookyKillSounds ? this.FbEJ.playGroup("kill_leader_assigned", {
                            channel: "ui"
                        }) : (i.role == "kill_leader" || !this.erjBtm.perkMode || this.sHyB == i.playerId) && this.FbEJ.playSound(o.sound.assign, {
                            channel: "ui"
                        })),
                        this.erjBtm.perkMode && this.sHyB == i.playerId && this.OYGn.setRoleMenuActive(!1),
                        o.killFeed?.assign) {
                            const c = this.ULknZU.getRoleAssignedKillFeedText(i.role, s.teamId, l)
                              , m = this.ULknZU.getRoleKillFeedColor(i.role, s.teamId, this.bJy);
                            this.ULknZU.addKillFeedMessage(c, m)
                        }
                        if (o.announce && this.sHyB == i.playerId) {
                            const c = this.ULknZU.getRoleAnnouncementText(i.role, s.teamId);
                            this.OYGn.displayAnnouncement(c.toUpperCase())
                        }
                    } else if (i.killed) {
                        if (o.killFeed?.dead) {
                            let c = re.htmlEscape(this.bJy.getPlayerName(i.killerId, this.Tjkysi, !0));
                            i.playerId == i.killerId && (c = "");
                            const m = this.ULknZU.getRoleKilledKillFeedText(i.role, s.teamId, c)
                              , h = this.ULknZU.getRoleKillFeedColor(i.role, s.teamId, this.bJy);
                            this.ULknZU.addKillFeedMessage(m, h)
                        }
                        o.sound?.dead && (this.erjBtm.getMapDef().gameMode.spookyKillSounds ? this.FbEJ.playGroup("kill_leader_dead", {
                            channel: "ui"
                        }) : this.FbEJ.playSound(o.sound.dead, {
                            channel: "ui"
                        }))
                    }
                    break
                }
            case ke.PlayerStats:
                {
                    const i = new aa;
                    i.deserialize(a),
                    this.OYGn.setLocalStats(i.playerStats),
                    this.OYGn.showTeamAd(i.playerStats, this.ULknZU);
                    break
                }
            case ke.Stats:
                {
                    a.readString();
                    break
                }
            case ke.GameOver:
                {
                    const i = new Qs;
                    i.deserialize(a),
                    this.glHQQ = i.gameOver;
                    const o = this.bJy.getPlayerInfo(this.sHyB).teamId;
                    for (let s = 0; s < i.playerStats.length; s++) {
                        const l = i.playerStats[s];
                        if (l.playerId == this.sHyB) {
                            this.OYGn.setLocalStats(l);
                            break
                        }
                    }
                    this.OYGn.showStats(i.playerStats, i.teamId, i.teamRank, i.winningTeamId, i.gameOver, o, this.teamMode, this.jIhr, this.bJy, this.FbEJ, this.erjBtm, this.ULknZU),
                    o == i.winningTeamId && (this.victoryMusic = this.FbEJ.playSound("menu_music", {
                        channel: "music",
                        delay: 1300,
                        forceStart: !0
                    })),
                    this.DAor.hideAll();
                    break
                }
            case ke.Pickup:
                {
                    const i = new Zs;
                    if (i.deserialize(a),
                    i.type == ot.Success && i.item) {
                        this.kWe.playItemPickupSound(i.item, this.FbEJ);
                        const o = U[i.item];
                        o && o.type == "xp" && this.ULknZU.addRareLootMessage(i.item, !0)
                    } else
                        this.ULknZU.displayPickupMessage(i.type);
                    break
                }
            case ke.UpdatePass:
                {
                    new hl().deserialize(a),
                    this.dYQsO = !0,
                    this.WXej = 0;
                    break
                }
            case ke.AliveCounts:
                {
                    const i = new nl;
                    i.deserialize(a),
                    i.teamAliveCounts.length == 1 ? this.OYGn.updatePlayersAlive(i.teamAliveCounts[0]) : i.teamAliveCounts.length >= 2 && (this.OYGn.updatePlayersAliveRed(i.teamAliveCounts[0]),
                    this.OYGn.updatePlayersAliveBlue(i.teamAliveCounts[1]));
                    break
                }
            case ke.Disconnect:
                {
                    const i = new Es;
                    i.deserialize(a),
                    this.Amq = i.reason
                }
            }
        }
        SMLP(t, a, i) {
            const o = i || 128
              , s = new ti(new ArrayBuffer(o));
            s.serializeMsg(t, a),
            this.OPRa(s)
        }
        OPRa(t) {
            if (this.egnBcb && this.egnBcb.readyState == this.egnBcb.OPEN)
                try {
                    this.egnBcb.send(t.getBuffer())
                } catch (a) {
                    console.error("sendMessageException", a),
                    this.egnBcb.close()
                }
        }
    }
    const Ln = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];
    function Ei(r) {
        let t = 0;
        for (let a = 0; a < r.length; a++) {
            const i = r[a];
            t = (Ln[(t ^ i) & 255] ^ t >> 8) & 65535
        }
        return t
    }
    function ne(r, t) {
        return {
            name: r,
            defaultValue: t
        }
    }
    function be(r) {
        return new Zt(lt.Key,r)
    }
    function Bi(r) {
        return new Zt(lt.MouseButton,r)
    }
    function Ri(r) {
        return new Zt(lt.MouseWheel,r)
    }
    const Wt = {
        [j.MoveLeft]: ne("Move Left", be(J.A)),
        [j.MoveRight]: ne("Move Right", be(J.D)),
        [j.MoveUp]: ne("Move Up", be(J.W)),
        [j.MoveDown]: ne("Move Down", be(J.S)),
        [j.Fire]: ne("Fire", Bi(sa.Left)),
        [j.Reload]: ne("Reload", be(J.R)),
        [j.Cancel]: ne("Cancel", be(J.X)),
        [j.Interact]: ne("Interact", be(J.F)),
        [j.Revive]: ne("Revive", null),
        [j.Use]: ne("Open/Use", null),
        [j.Loot]: ne("Loot", null),
        [j.EquipPrimary]: ne("Equip Primary", be(J.One)),
        [j.EquipSecondary]: ne("Equip Secondary", be(J.Two)),
        [j.EquipMelee]: ne("Equip Melee", be(J.Three)),
        [j.EquipThrowable]: ne("Equip Throwable", be(J.Four)),
        [j.EquipNextWeap]: ne("Equip Next Weapon", Ri(la.Down)),
        [j.EquipPrevWeap]: ne("Equip Previous Weapon", Ri(la.Up)),
        [j.EquipLastWeap]: ne("Equip Last Weapon", be(J.Q)),
        [j.StowWeapons]: ne("Stow Weapons", be(J.E)),
        [j.EquipPrevScope]: ne("Equip Previous Scope", null),
        [j.EquipNextScope]: ne("Equip Next Scope", null),
        [j.UseBandage]: ne("Use Bandage", be(J.Seven)),
        [j.UseHealthKit]: ne("Use Med Kit", be(J.Eight)),
        [j.UseSoda]: ne("Use Soda", be(J.Nine)),
        [j.UsePainkiller]: ne("Use Pills", be(J.Zero)),
        [j.SwapWeapSlots]: ne("Switch Gun Slots", be(J.T)),
        [j.ToggleMap]: ne("Toggle Map", be(J.M)),
        [j.CycleUIMode]: ne("Toggle Minimap", be(J.V)),
        [j.EmoteMenu]: ne("Emote Menu", Bi(sa.Right)),
        [j.TeamPingMenu]: ne("Team Ping Hold", be(J.C)),
        [j.EquipOtherGun]: ne("Equip Other Gun", null),
        [j.Fullscreen]: ne("Full Screen", be(J.L)),
        [j.HideUI]: ne("Hide UI", null),
        [j.TeamPingSingle]: ne("Team Ping Menu", null)
    };
    class qn {
        constructor(t, a) {
            this.input = t,
            this.config = a,
            this.input = t,
            this.config = a,
            this.loadBinds()
        }
        binds = [];
        boundKeys = {};
        menuHovered = !1;
        toArray() {
            const t = new ArrayBuffer(this.binds.length * 2 + 1)
              , a = new Sa.BitStream(t);
            a.writeUint8(1);
            for (let l = 0; l < this.binds.length; l++) {
                const c = this.binds[l]
                  , m = c ? c.type : 0
                  , h = c ? c.code : 0;
                a.writeBits(m & 3, 2),
                a.writeUint8(h & 255)
            }
            const i = new Uint8Array(t,0,a.byteIndex)
              , o = Ei(i)
              , s = new Uint8Array(i.length + 2);
            return s.set(i),
            s[s.length - 2] = o >> 8 & 255,
            s[s.length - 1] = o & 255,
            s
        }
        fromArray(t) {
            let a = new Uint8Array(t);
            if (!a || a.length < 3)
                return !1;
            const i = a[a.length - 2] << 8 | a[a.length - 1];
            if (a = a.slice(0, a.length - 2),
            Ei(a) != i)
                return !1;
            const o = new ArrayBuffer(a.length)
              , s = new Uint8Array(o);
            for (let m = 0; m < a.length; m++)
                s[m] = a[m];
            const l = new Sa.BitStream(o)
              , c = l.readUint8();
            this.clearAllBinds();
            for (let m = 0; l.length - l.index >= 10; ) {
                const h = m++
                  , u = l.readBits(2)
                  , g = l.readUint8();
                h >= 0 && h < j.Count && u != lt.None && this.setBind(h, u != 0 ? new Zt(u,g) : null)
            }
            return c < 1 && (this.upgradeBinds(c),
            this.saveBinds()),
            !0
        }
        toBase64() {
            return ka.fromByteArray(this.toArray())
        }
        fromBase64(t) {
            let a = !1;
            try {
                a = this.fromArray(ka.toByteArray(t))
            } catch (i) {
                console.error("Error", i)
            }
            return a
        }
        saveBinds() {
            this.config.set("binds", this.toBase64())
        }
        loadBinds() {
            this.fromBase64(this.config.get("binds") || "") || (this.loadDefaultBinds(),
            this.saveBinds())
        }
        upgradeBinds(t) {
            const a = [];
            for (let i = 0; i < a.length; i++) {
                const o = a[i]
                  , s = Wt[o].defaultValue;
                for (let l = 0; l < this.binds.length && !this.binds[l]?.equals(s); l++)
                    ;
                this.setBind(o, s)
            }
        }
        clearAllBinds() {
            for (let t = 0; t < j.Count; t++)
                this.binds[t] = null;
            this.boundKeys = {}
        }
        setBind(t, a) {
            if (a)
                for (let o = 0; o < this.binds.length; o++)
                    this.binds[o]?.equals(a) && (this.binds[o] = null);
            const i = this.binds[t];
            i && i.type == lt.Key && (this.boundKeys[i.code] = null),
            this.binds[t] = a,
            a && a.type == lt.Key && (this.boundKeys[a.code] = !0)
        }
        getBind(t) {
            return this.binds[t]
        }
        preventMenuBind(t) {
            return t && this.menuHovered && (t.type == 2 || t.type == 3)
        }
        isKeyBound(t) {
            return this.boundKeys[t]
        }
        isBindPressed(t) {
            const a = this.binds[t];
            return !this.preventMenuBind(a) && a && this.input.isInputValuePressed(a)
        }
        isBindReleased(t) {
            const a = this.binds[t];
            return !this.preventMenuBind(a) && a && this.input.isInputValueReleased(a)
        }
        isBindDown(t) {
            const a = this.binds[t];
            return !this.preventMenuBind(a) && a && this.input.isInputValueDown(a)
        }
        loadDefaultBinds() {
            this.clearAllBinds();
            const t = Object.keys(Wt);
            for (let a = 0; a < t.length; a++) {
                const i = t[a]
                  , o = Wt[i];
                this.setBind(parseInt(i), o.defaultValue)
            }
        }
    }
    class Fn {
        constructor(t, a) {
            this.input = t,
            this.inputBinds = a,
            this.input = t,
            this.inputBinds = a,
            d(".js-btn-keybind-restore").on("click", () => {
                this.inputBinds.loadDefaultBinds(),
                this.inputBinds.saveBinds(),
                this.refresh()
            }
            )
        }
        cancelBind() {
            this.input.captureNextInput(null)
        }
        refresh() {
            const t = Object.keys(Wt)
              , a = this.inputBinds.binds
              , i = d(".js-keybind-list");
            i.empty();
            for (let o = 0; o < t.length; o++) {
                const s = t[o]
                  , l = Wt[s]
                  , c = a[s]
                  , m = d("<a/>", {
                    class: "btn-game-menu btn-darken btn-keybind-desc",
                    text: l.name
                })
                  , h = d("<div/>", {
                    class: "btn-keybind-display",
                    text: c ? c.toString() : ""
                });
                m.on("click", u => {
                    const g = d(u.target);
                    g.addClass("btn-keybind-desc-selected"),
                    this.input.captureNextInput( (w, y) => {
                        w.preventDefault(),
                        w.stopPropagation();
                        const _ = [J.Control, J.Shift, J.Alt, J.Windows, J.ContextMenu, J.F1, J.F2, J.F3, J.F4, J.F5, J.F6, J.F7, J.F8, J.F9, J.F10, J.F11, J.F12];
                        if (y.type == lt.Key && _.includes(y.code))
                            return !1;
                        if (g.removeClass("btn-keybind-desc-selected"),
                        !y.equals(be(J.Escape))) {
                            let S = y;
                            y.equals(be(J.Backspace)) && (S = null),
                            this.inputBinds.setBind(parseInt(s), S),
                            this.inputBinds.saveBinds(),
                            this.refresh()
                        }
                        return !0
                    }
                    )
                }
                ),
                i.append(d("<div/>", {
                    class: "ui-keybind-container"
                }).append(m).append(h))
            }
            d("#keybind-link").html(this.inputBinds.toBase64())
        }
    }
    var $r = [{
        region: "na",
        zone: "na",
        url: "usr.mathsiscoolfun.com:8001",
        https: !0
    }, {
        region: "eu",
        zone: "eu",
        url: "eur.mathsiscoolfun.com:8001",
        https: !0
    }, {
        region: "asia",
        zone: "asia",
        url: "asr.mathsiscoolfun.com:8001",
        https: !0
    }, {
        region: "sa",
        zone: "sa",
        url: "sa.mathsiscoolfun.com:8001",
        https: !0
    }];
    class jn {
        ptcDataBuf = new ArrayBuffer(1);
        tests = $r.map(t => ({
            region: t.region,
            zone: t.zone,
            url: t.url,
            https: t.https,
            ping: 9999,
            active: !1,
            complete: !1,
            ws: null,
            sendDelay: 0,
            sendTime: 0,
            sendCount: 0,
            recvCount: 0,
            recvCountMax: 6,
            retryCount: 0,
            retryCountMax: 1
        }));
        testsStarted = 0;
        testsCompleted = 0;
        printSummary = !0;
        start(t) {
            if ("WebSocket"in window) {
                let a = 0;
                for (let i = 0; i < this.tests.length; i++) {
                    const o = this.tests[i];
                    !o.active && !o.complete && t.includes(o.region) && (o.active = !0,
                    this.testsStarted++,
                    a++)
                }
                a > 0 && (this.printSummary = !0)
            }
        }
        update(t) {
            const a = o => {
                o.active = !1,
                o.complete = !0,
                this.testsCompleted++
            }
              , i = function(o) {
                o.ws && (o.ws.close(),
                o.ws = null),
                o.complete || o.retryCount++ >= o.retryCountMax && a(o)
            };
            for (let o = 0; o < this.tests.length; o++) {
                const s = this.tests[o];
                if (!s.active)
                    return "continue";
                if (!s.ws) {
                    const l = new WebSocket(`ws${s.https ? "s" : ""}://${s.url}/ptc`);
                    l.binaryType = "arraybuffer",
                    l.onopen = function() {}
                    ,
                    l.onmessage = function(c) {
                        const m = (Date.now() - s.sendTime) / 1e3;
                        s.ping = Math.min(s.ping, m),
                        s.recvCount++,
                        s.sendDelay = .125
                    }
                    ,
                    l.onerror = function(c) {
                        i(s)
                    }
                    ,
                    l.onclose = function() {
                        i(s)
                    }
                    ,
                    s.ws = l,
                    s.sendDelay = 0,
                    s.sendCount = 0,
                    s.recvCount = 0
                }
                if (s.ws.readyState == s.ws.OPEN) {
                    if (s.sendDelay -= t,
                    s.sendCount == s.recvCount && s.sendDelay < 0) {
                        s.sendTime = Date.now(),
                        s.sendCount++;
                        try {
                            s.ws.send(this.ptcDataBuf)
                        } catch {
                            s.ws.close()
                        }
                    }
                    s.recvCount >= s.recvCountMax && (a(s),
                    s.ws.close())
                }
            }
            if (this.printSummary && this.isComplete()) {
                const o = this.tests.sort( (s, l) => s.ping - l.ping);
                console.log("Ping test results"),
                console.log("----------------------------------------");
                for (let s = 0; s < o.length; s++) {
                    const l = o[s];
                    console.log("region", l.region, "zone  ", l.zone, "ping  ", l.ping)
                }
                this.printSummary = !1
            }
        }
        isComplete() {
            return this.testsCompleted == this.testsStarted && this.testsStarted > 0
        }
        getRegionList() {
            const t = [];
            for (let a = 0; a < $r.length; a++) {
                const i = $r[a].region;
                t.includes(i) || t.push(i)
            }
            return t
        }
        getRegion() {
            return this.tests.sort( (t, a) => t.ping - a.ping),
            this.tests[0].region
        }
        getZones(t) {
            const a = this.tests.sort( (o, s) => o.ping - s.ping)
              , i = [];
            for (let o = 0; o < a.length; o++) {
                const s = a[o];
                s.region == t && i.push(s.zone)
            }
            return i
        }
    }
    const Un = "https://survev.io/assets/cobalt-0-100-Df0tyq7G.png",
          Wn = "https://survev.io/assets/cobalt-0-50-BzZK-69k.png",
          Nn = "https://survev.io/assets/desert-0-100-CcFxaZpx.png",
          Gn = "https://survev.io/assets/desert-0-50-H7rp-TXz.png",
          Vn = "https://survev.io/assets/faction-0-100-CjOcvSr8.png",
          Hn = "https://survev.io/assets/faction-0-50-Bfqg9Qu0.png",
          $n = "https://survev.io/assets/gradient-0-100-BWziP7KR.png",
          Xn = "https://survev.io/assets/gradient-0-50-bTGcoPWw.png",
          Qn = "https://survev.io/assets/halloween-0-100-6GI11Ci5.png",
          Zn = "https://survev.io/assets/halloween-0-50-CaXpbqBI.png",
          Jn = "https://survev.io/assets/loadout-0-100-Cx3DIbRl.png",
          Yn = "https://survev.io/assets/loadout-0-50-DhXwN0VF.png",
          Kn = "https://survev.io/assets/main-0-100-BauU3jKx.png",
          em = "https://survev.io/assets/main-0-50-DzJmCPH8.png",
          tm = "https://survev.io/assets/potato-0-100-nGUFFLN9.png",
          rm = "https://survev.io/assets/potato-0-50-BEPNaxbA.png",
          am = "https://survev.io/assets/savannah-0-100-HMmAClDQ.png",
          im = "https://survev.io/assets/savannah-0-50-bytEgcs1.png",
          om = "https://survev.io/assets/shared-0-100-UDUisNiW.png",
          sm = "https://survev.io/assets/shared-0-50-DUWZj4Qy.png",
          lm = "https://survev.io/assets/shared-1-100-DyOGRdAe.png",
          cm = "https://survev.io/assets/shared-1-50-CW16zb35.png",
          nm = "https://survev.io/assets/shared-2-100-DvljS7Xt.png",
          mm = "https://survev.io/assets/shared-2-50-17VHz3Sl.png",
          pm = "https://survev.io/assets/snow-0-100-Wkw_7etL.png",
          um = "https://survev.io/assets/snow-0-50-DFXrUIAG.png",
          hm = "https://survev.io/assets/woods-0-100-D64cFzl2.png",
          dm = "https://survev.io/assets/woods-0-50-DQZ4isPk.png",
        gm = JSON.parse('[{"meta":{"image":"cobalt-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1490,"y":1811,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":1811,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1829,"h":353},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1829,"h":353},"sourceSize":{"w":1830,"h":354}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":726,"y":3067,"w":610,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":610,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1434,"y":2863,"w":219,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":219,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3297,"w":704,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":254},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":3555,"w":704,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":322,"w":704,"h":252},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":2010,"y":2092,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":2797,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1835,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1418,"y":3067,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1740,"y":2863,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1740,"y":3187,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":1740,"y":3421,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1434,"y":2555,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":712,"y":2055,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1814,"y":2092,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2,"y":3811,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":2064,"y":2924,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2055,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1142,"y":1811,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3343,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1490,"y":2092,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":3177,"y":1546,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1870,"y":2446,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":710,"y":3297,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":359,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":726,"y":2555,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":3177,"y":934,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1904,"y":3421,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1904,"y":3187,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":1418,"y":3679,"w":512,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":352},"sourceSize":{"w":512,"h":352}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":1701,"y":934,"w":1472,"h":1154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":96,"y":127,"w":1472,"h":1154},"sourceSize":{"w":1664,"h":1408}},"map-class-crate-03.img":{"frame":{"x":1870,"y":2720,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":134,"h":134},"sourceSize":{"w":148,"h":148}},"map-class-crate-assault.img":{"frame":{"x":2101,"y":3270,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-demo.img":{"frame":{"x":2194,"y":2348,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-healer.img":{"frame":{"x":2194,"y":2494,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-res-01.img":{"frame":{"x":1012,"y":2403,"w":125,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":15,"w":125,"h":128},"sourceSize":{"w":148,"h":148}},"map-class-crate-scout.img":{"frame":{"x":1934,"y":3625,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-sniper.img":{"frame":{"x":1934,"y":3771,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-tank.img":{"frame":{"x":1934,"y":3917,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-shell-01a.img":{"frame":{"x":712,"y":2403,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-01b.img":{"frame":{"x":862,"y":2403,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02a.img":{"frame":{"x":688,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02b.img":{"frame":{"x":838,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03a.img":{"frame":{"x":988,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03b.img":{"frame":{"x":1138,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1340,"y":3067,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1701,"y":359,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1765,"y":359,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-stone-01cb.img":{"frame":{"x":2101,"y":3122,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-03cb.img":{"frame":{"x":406,"y":3811,"w":278,"h":278},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":278,"h":278},"sourceSize":{"w":288,"h":288}},"map-stone-res-01cb.img":{"frame":{"x":3343,"y":804,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02cb.img":{"frame":{"x":2064,"y":2720,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-tree-03cb.img":{"frame":{"x":2142,"y":2092,"w":254,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":254,"h":252},"sourceSize":{"w":256,"h":256}},"part-class-shell-01a.img":{"frame":{"x":1490,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-01b.img":{"frame":{"x":1814,"y":2446,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-02a.img":{"frame":{"x":1582,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-02b.img":{"frame":{"x":2008,"y":2720,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-03a.img":{"frame":{"x":1674,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-03b.img":{"frame":{"x":2008,"y":2788,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}}}}]')
      , fm = [{
        meta: {
            image: "desert-0-100.png",
            size: {
                w: 4096,
                h: 4096
            },
            scale: 1
        },
        frames: {
            "map-archway-res-01.img": {
                frame: {
                    x: 2253,
                    y: 1242,
                    w: 359,
                    h: 91
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 2,
                    w: 359,
                    h: 91
                },
                sourceSize: {
                    w: 360,
                    h: 96
                }
            },
            "map-building-archway-ceiling-01.img": {
                frame: {
                    x: 3421,
                    y: 648,
                    w: 672,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 672,
                    h: 128
                },
                sourceSize: {
                    w: 672,
                    h: 128
                }
            },
            "map-building-greenhouse-ceiling-02.img": {
                frame: {
                    x: 3421,
                    y: 780,
                    w: 400,
                    h: 624
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 400,
                    h: 624
                },
                sourceSize: {
                    w: 400,
                    h: 624
                }
            },
            "map-building-greenhouse-floor-02.img": {
                frame: {
                    x: 2616,
                    y: 2,
                    w: 832,
                    h: 642
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 832,
                    h: 642
                },
                sourceSize: {
                    w: 834,
                    h: 642
                }
            },
            "map-building-saloon-ceiling-01.img": {
                frame: {
                    x: 3452,
                    y: 2,
                    w: 625,
                    h: 624
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 625,
                    h: 624
                },
                sourceSize: {
                    w: 656,
                    h: 656
                }
            },
            "map-building-saloon-ceiling-02.img": {
                frame: {
                    x: 1774,
                    y: 1146,
                    w: 192,
                    h: 160
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 192,
                    h: 160
                },
                sourceSize: {
                    w: 192,
                    h: 160
                }
            },
            "map-building-saloon-cellar-01.img": {
                frame: {
                    x: 2,
                    y: 1318,
                    w: 1056,
                    h: 672
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 1056,
                    h: 672
                },
                sourceSize: {
                    w: 1056,
                    h: 672
                }
            },
            "map-building-saloon-floor-01.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 1312,
                    h: 1312
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 1312,
                    h: 1312
                },
                sourceSize: {
                    w: 1312,
                    h: 1312
                }
            },
            "map-bunker-chrys-chamber-ceiling-01.img": {
                frame: {
                    x: 1318,
                    y: 938,
                    w: 448,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 448,
                    h: 272
                },
                sourceSize: {
                    w: 448,
                    h: 272
                }
            },
            "map-bunker-chrys-chamber-floor-01a.img": {
                frame: {
                    x: 3246,
                    y: 1426,
                    w: 161,
                    h: 148
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 34,
                    y: 32,
                    w: 161,
                    h: 148
                },
                sourceSize: {
                    w: 228,
                    h: 180
                }
            },
            "map-bunker-chrys-chamber-floor-01b.img": {
                frame: {
                    x: 1062,
                    y: 1318,
                    w: 931,
                    h: 627
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 931,
                    h: 627
                },
                sourceSize: {
                    w: 932,
                    h: 628
                }
            },
            "map-bunker-chrys-compartment-ceiling-01a.img": {
                frame: {
                    x: 3982,
                    y: 2162,
                    w: 112,
                    h: 192
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 192
                },
                sourceSize: {
                    w: 112,
                    h: 192
                }
            },
            "map-bunker-chrys-compartment-ceiling-01b.img": {
                frame: {
                    x: 2253,
                    y: 870,
                    w: 354,
                    h: 368
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 2,
                    w: 354,
                    h: 368
                },
                sourceSize: {
                    w: 356,
                    h: 372
                }
            },
            "map-bunker-chrys-compartment-ceiling-02a.img": {
                frame: {
                    x: 1318,
                    y: 1214,
                    w: 224,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 224,
                    h: 96
                },
                sourceSize: {
                    w: 224,
                    h: 96
                }
            },
            "map-bunker-chrys-compartment-ceiling-02b.img": {
                frame: {
                    x: 3246,
                    y: 1592,
                    w: 352,
                    h: 258
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 0,
                    w: 352,
                    h: 258
                },
                sourceSize: {
                    w: 356,
                    h: 260
                }
            },
            "map-bunker-chrys-compartment-ceiling-03a.img": {
                frame: {
                    x: 1546,
                    y: 1214,
                    w: 224,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 224,
                    h: 96
                },
                sourceSize: {
                    w: 224,
                    h: 96
                }
            },
            "map-bunker-chrys-compartment-ceiling-03b.img": {
                frame: {
                    x: 3602,
                    y: 1592,
                    w: 352,
                    h: 306
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 352,
                    h: 306
                },
                sourceSize: {
                    w: 356,
                    h: 308
                }
            },
            "map-bunker-chrys-compartment-floor-01a.img": {
                frame: {
                    x: 3825,
                    y: 780,
                    w: 228,
                    h: 611
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 32,
                    w: 228,
                    h: 611
                },
                sourceSize: {
                    w: 228,
                    h: 644
                }
            },
            "map-bunker-chrys-compartment-floor-01c.img": {
                frame: {
                    x: 2616,
                    y: 648,
                    w: 801,
                    h: 774
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 801,
                    h: 774
                },
                sourceSize: {
                    w: 804,
                    h: 804
                }
            },
            "map-bunker-chrys-compartment-floor-02a.img": {
                frame: {
                    x: 1997,
                    y: 1426,
                    w: 771,
                    h: 628
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 771,
                    h: 628
                },
                sourceSize: {
                    w: 772,
                    h: 628
                }
            },
            "map-bunker-chrys-compartment-floor-02c.img": {
                frame: {
                    x: 3421,
                    y: 1408,
                    w: 516,
                    h: 180
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 16,
                    y: 0,
                    w: 516,
                    h: 180
                },
                sourceSize: {
                    w: 548,
                    h: 180
                }
            },
            "map-bunker-chrys-compartment-floor-03a.img": {
                frame: {
                    x: 1844,
                    y: 2,
                    w: 768,
                    h: 864
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 768,
                    h: 864
                },
                sourceSize: {
                    w: 768,
                    h: 864
                }
            },
            "map-bunker-generic-ceiling-02.img": {
                frame: {
                    x: 3064,
                    y: 1922,
                    w: 160,
                    h: 230
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 230
                },
                sourceSize: {
                    w: 160,
                    h: 230
                }
            },
            "map-bunker-generic-floor-03.img": {
                frame: {
                    x: 3818,
                    y: 2162,
                    w: 160,
                    h: 230
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 230
                },
                sourceSize: {
                    w: 160,
                    h: 230
                }
            },
            "map-bunker-statue-chamber-floor-01.img": {
                frame: {
                    x: 1997,
                    y: 870,
                    w: 252,
                    h: 542
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 32,
                    w: 252,
                    h: 542
                },
                sourceSize: {
                    w: 256,
                    h: 576
                }
            },
            "map-bush-05.img": {
                frame: {
                    x: 3064,
                    y: 2156,
                    w: 140,
                    h: 140
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 140,
                    h: 140
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-bush-res-05.img": {
                frame: {
                    x: 1770,
                    y: 938,
                    w: 56,
                    h: 50
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 44,
                    y: 47,
                    w: 56,
                    h: 50
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-case-meteor-01.img": {
                frame: {
                    x: 3208,
                    y: 2288,
                    w: 140,
                    h: 102
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 140,
                    h: 102
                },
                sourceSize: {
                    w: 140,
                    h: 102
                }
            },
            "map-case-meteor-res-01.img": {
                frame: {
                    x: 3958,
                    y: 1543,
                    w: 128,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 13,
                    y: 10,
                    w: 128,
                    h: 115
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-chest-03d.img": {
                frame: {
                    x: 3352,
                    y: 2288,
                    w: 140,
                    h: 102
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 140,
                    h: 102
                },
                sourceSize: {
                    w: 140,
                    h: 102
                }
            },
            "map-complex-warehouse-floor-05.img": {
                frame: {
                    x: 1318,
                    y: 2,
                    w: 522,
                    h: 932
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1008,
                    w: 522,
                    h: 932
                },
                sourceSize: {
                    w: 1296,
                    h: 2048
                }
            },
            "map-crate-02f.img": {
                frame: {
                    x: 3941,
                    y: 1395,
                    w: 144,
                    h: 144
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 144
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-crate-18.img": {
                frame: {
                    x: 3228,
                    y: 2140,
                    w: 144,
                    h: 144
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 144
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-crate-22.img": {
                frame: {
                    x: 3376,
                    y: 2140,
                    w: 144,
                    h: 144
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 144
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-planter-06.img": {
                frame: {
                    x: 1844,
                    y: 870,
                    w: 144,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 272
                },
                sourceSize: {
                    w: 144,
                    h: 272
                }
            },
            "map-planter-07.img": {
                frame: {
                    x: 3958,
                    y: 1784,
                    w: 100,
                    h: 100
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 100,
                    h: 100
                },
                sourceSize: {
                    w: 100,
                    h: 100
                }
            },
            "map-planter-res-02.img": {
                frame: {
                    x: 3982,
                    y: 2358,
                    w: 76,
                    h: 134
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 5,
                    y: 1,
                    w: 76,
                    h: 134
                },
                sourceSize: {
                    w: 86,
                    h: 136
                }
            },
            "map-planter-res-03.img": {
                frame: {
                    x: 2253,
                    y: 1337,
                    w: 82,
                    h: 74
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 6,
                    w: 82,
                    h: 74
                },
                sourceSize: {
                    w: 86,
                    h: 86
                }
            },
            "map-statue-03.img": {
                frame: {
                    x: 3246,
                    y: 1854,
                    w: 288,
                    h: 282
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 67,
                    y: 67,
                    w: 288,
                    h: 282
                },
                sourceSize: {
                    w: 416,
                    h: 416
                }
            },
            "map-statue-04.img": {
                frame: {
                    x: 2772,
                    y: 1922,
                    w: 288,
                    h: 282
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 67,
                    y: 67,
                    w: 288,
                    h: 282
                },
                sourceSize: {
                    w: 416,
                    h: 416
                }
            },
            "map-stone-03b.img": {
                frame: {
                    x: 3538,
                    y: 2034,
                    w: 276,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 6,
                    y: 8,
                    w: 276,
                    h: 272
                },
                sourceSize: {
                    w: 288,
                    h: 288
                }
            },
            "map-stone-06.img": {
                frame: {
                    x: 3538,
                    y: 1902,
                    w: 288,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 288,
                    h: 128
                },
                sourceSize: {
                    w: 288,
                    h: 128
                }
            },
            "map-stone-res-01b.img": {
                frame: {
                    x: 3958,
                    y: 1662,
                    w: 118,
                    h: 118
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 118,
                    h: 118
                },
                sourceSize: {
                    w: 120,
                    h: 120
                }
            },
            "map-tree-05c.img": {
                frame: {
                    x: 2772,
                    y: 1426,
                    w: 470,
                    h: 492
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 21,
                    y: 10,
                    w: 470,
                    h: 492
                },
                sourceSize: {
                    w: 512,
                    h: 512
                }
            },
            "map-tree-06.img": {
                frame: {
                    x: 3830,
                    y: 1902,
                    w: 256,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 256,
                    h: 256
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            }
        }
    }]
      , ym = [{
        meta: {
            image: "faction-0-100.png",
            size: {
                w: 4096,
                h: 4096
            },
            scale: 1
        },
        frames: {
            "map-airdrop-03.img": {
                frame: {
                    x: 3770,
                    y: 1461,
                    w: 256,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 256,
                    h: 256
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-airdrop-04.img": {
                frame: {
                    x: 3770,
                    y: 1721,
                    w: 256,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 256,
                    h: 256
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-building-bridge-xlg-floor.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 2464,
                    h: 960
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 2464,
                    h: 960
                },
                sourceSize: {
                    w: 2464,
                    h: 960
                }
            },
            "map-building-greenhouse-ceiling-01.img": {
                frame: {
                    x: 1712,
                    y: 2020,
                    w: 401,
                    h: 314
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 401,
                    h: 314
                },
                sourceSize: {
                    w: 404,
                    h: 316
                }
            },
            "map-building-greenhouse-floor-01.img": {
                frame: {
                    x: 774,
                    y: 966,
                    w: 832,
                    h: 641
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 832,
                    h: 641
                },
                sourceSize: {
                    w: 834,
                    h: 642
                }
            },
            "map-bunker-chrys-chamber-ceiling-01.img": {
                frame: {
                    x: 1712,
                    y: 1744,
                    w: 448,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 448,
                    h: 272
                },
                sourceSize: {
                    w: 448,
                    h: 272
                }
            },
            "map-bunker-chrys-chamber-floor-01a.img": {
                frame: {
                    x: 750,
                    y: 1887,
                    w: 161,
                    h: 148
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 34,
                    y: 32,
                    w: 161,
                    h: 148
                },
                sourceSize: {
                    w: 228,
                    h: 180
                }
            },
            "map-bunker-chrys-chamber-floor-01b.img": {
                frame: {
                    x: 2,
                    y: 2054,
                    w: 931,
                    h: 627
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 931,
                    h: 627
                },
                sourceSize: {
                    w: 932,
                    h: 628
                }
            },
            "map-bunker-chrys-compartment-ceiling-01a.img": {
                frame: {
                    x: 166,
                    y: 3833,
                    w: 112,
                    h: 192
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 192
                },
                sourceSize: {
                    w: 112,
                    h: 192
                }
            },
            "map-bunker-chrys-compartment-ceiling-01b.img": {
                frame: {
                    x: 2,
                    y: 2685,
                    w: 354,
                    h: 368
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 2,
                    w: 354,
                    h: 368
                },
                sourceSize: {
                    w: 356,
                    h: 372
                }
            },
            "map-bunker-chrys-compartment-ceiling-02a.img": {
                frame: {
                    x: 522,
                    y: 1834,
                    w: 224,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 224,
                    h: 96
                },
                sourceSize: {
                    w: 224,
                    h: 96
                }
            },
            "map-bunker-chrys-compartment-ceiling-02b.img": {
                frame: {
                    x: 2,
                    y: 3057,
                    w: 352,
                    h: 258
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 0,
                    w: 352,
                    h: 258
                },
                sourceSize: {
                    w: 356,
                    h: 260
                }
            },
            "map-bunker-chrys-compartment-ceiling-03a.img": {
                frame: {
                    x: 522,
                    y: 1934,
                    w: 224,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 224,
                    h: 96
                },
                sourceSize: {
                    w: 224,
                    h: 96
                }
            },
            "map-bunker-chrys-compartment-ceiling-03b.img": {
                frame: {
                    x: 2,
                    y: 3319,
                    w: 352,
                    h: 306
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 352,
                    h: 306
                },
                sourceSize: {
                    w: 356,
                    h: 308
                }
            },
            "map-bunker-chrys-compartment-floor-01a.img": {
                frame: {
                    x: 3770,
                    y: 2,
                    w: 228,
                    h: 611
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 32,
                    w: 228,
                    h: 611
                },
                sourceSize: {
                    w: 228,
                    h: 644
                }
            },
            "map-bunker-chrys-compartment-floor-01b.img": {
                frame: {
                    x: 1610,
                    y: 966,
                    w: 801,
                    h: 774
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 801,
                    h: 774
                },
                sourceSize: {
                    w: 804,
                    h: 804
                }
            },
            "map-bunker-chrys-compartment-floor-02a.img": {
                frame: {
                    x: 937,
                    y: 1744,
                    w: 771,
                    h: 628
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 771,
                    h: 628
                },
                sourceSize: {
                    w: 772,
                    h: 628
                }
            },
            "map-bunker-chrys-compartment-floor-02b.img": {
                frame: {
                    x: 2,
                    y: 1834,
                    w: 516,
                    h: 180
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 16,
                    y: 0,
                    w: 516,
                    h: 180
                },
                sourceSize: {
                    w: 548,
                    h: 180
                }
            },
            "map-bunker-chrys-compartment-floor-03a.img": {
                frame: {
                    x: 2,
                    y: 966,
                    w: 768,
                    h: 864
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 768,
                    h: 864
                },
                sourceSize: {
                    w: 768,
                    h: 864
                }
            },
            "map-bunker-generic-ceiling-02.img": {
                frame: {
                    x: 2,
                    y: 3629,
                    w: 160,
                    h: 230
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 230
                },
                sourceSize: {
                    w: 160,
                    h: 230
                }
            },
            "map-bunker-generic-floor-03.img": {
                frame: {
                    x: 2,
                    y: 3863,
                    w: 160,
                    h: 230
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 230
                },
                sourceSize: {
                    w: 160,
                    h: 230
                }
            },
            "map-chest-03f.img": {
                frame: {
                    x: 282,
                    y: 3981,
                    w: 140,
                    h: 102
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 140,
                    h: 102
                },
                sourceSize: {
                    w: 140,
                    h: 102
                }
            },
            "map-complex-warehouse-floor-01.img": {
                frame: {
                    x: 4030,
                    y: 1461,
                    w: 60,
                    h: 224
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 60,
                    h: 224
                },
                sourceSize: {
                    w: 60,
                    h: 224
                }
            },
            "map-complex-warehouse-floor-02.img": {
                frame: {
                    x: 4002,
                    y: 2,
                    w: 60,
                    h: 528
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 60,
                    h: 528
                },
                sourceSize: {
                    w: 60,
                    h: 528
                }
            },
            "map-complex-warehouse-floor-03.img": {
                frame: {
                    x: 4030,
                    y: 1689,
                    w: 60,
                    h: 224
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 60,
                    h: 224
                },
                sourceSize: {
                    w: 60,
                    h: 224
                }
            },
            "map-complex-warehouse-floor-04.img": {
                frame: {
                    x: 2470,
                    y: 2,
                    w: 1296,
                    h: 2048
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 1296,
                    h: 2048
                },
                sourceSize: {
                    w: 1296,
                    h: 2048
                }
            },
            "map-crate-02f.img": {
                frame: {
                    x: 282,
                    y: 3833,
                    w: 144,
                    h: 144
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 144
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-crate-12.img": {
                frame: {
                    x: 3770,
                    y: 1981,
                    w: 240,
                    h: 240
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 240,
                    h: 240
                },
                sourceSize: {
                    w: 240,
                    h: 240
                }
            },
            "map-crate-13.img": {
                frame: {
                    x: 2117,
                    y: 2030,
                    w: 240,
                    h: 240
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 240,
                    h: 240
                },
                sourceSize: {
                    w: 240,
                    h: 240
                }
            },
            "map-crate-22.img": {
                frame: {
                    x: 358,
                    y: 3057,
                    w: 144,
                    h: 144
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 144
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-planter-01.img": {
                frame: {
                    x: 774,
                    y: 1611,
                    w: 144,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 272
                },
                sourceSize: {
                    w: 144,
                    h: 272
                }
            },
            "map-planter-02.img": {
                frame: {
                    x: 3770,
                    y: 1185,
                    w: 144,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 272
                },
                sourceSize: {
                    w: 144,
                    h: 272
                }
            },
            "map-planter-03.img": {
                frame: {
                    x: 3918,
                    y: 1185,
                    w: 144,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 272
                },
                sourceSize: {
                    w: 144,
                    h: 272
                }
            },
            "map-planter-04.img": {
                frame: {
                    x: 2361,
                    y: 2030,
                    w: 100,
                    h: 100
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 100,
                    h: 100
                },
                sourceSize: {
                    w: 100,
                    h: 100
                }
            },
            "map-planter-05.img": {
                frame: {
                    x: 426,
                    y: 3981,
                    w: 100,
                    h: 100
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 100,
                    h: 100
                },
                sourceSize: {
                    w: 100,
                    h: 100
                }
            },
            "map-planter-res-01.img": {
                frame: {
                    x: 4014,
                    y: 1981,
                    w: 76,
                    h: 134
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 5,
                    y: 1,
                    w: 76,
                    h: 134
                },
                sourceSize: {
                    w: 86,
                    h: 136
                }
            },
            "map-statue-01.img": {
                frame: {
                    x: 2164,
                    y: 1744,
                    w: 282,
                    h: 282
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 67,
                    y: 67,
                    w: 282,
                    h: 282
                },
                sourceSize: {
                    w: 416,
                    h: 416
                }
            },
            "map-statue-top-01.img": {
                frame: {
                    x: 3770,
                    y: 617,
                    w: 279,
                    h: 142
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 131,
                    y: 133,
                    w: 279,
                    h: 142
                },
                sourceSize: {
                    w: 416,
                    h: 416
                }
            },
            "map-statue-top-02.img": {
                frame: {
                    x: 3770,
                    y: 763,
                    w: 279,
                    h: 142
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 131,
                    y: 133,
                    w: 279,
                    h: 142
                },
                sourceSize: {
                    w: 416,
                    h: 416
                }
            },
            "map-stone-03f.img": {
                frame: {
                    x: 3770,
                    y: 909,
                    w: 276,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 6,
                    y: 8,
                    w: 276,
                    h: 272
                },
                sourceSize: {
                    w: 288,
                    h: 288
                }
            },
            "map-stone-res-02f.img": {
                frame: {
                    x: 166,
                    y: 3629,
                    w: 200,
                    h: 200
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 200,
                    h: 200
                },
                sourceSize: {
                    w: 200,
                    h: 200
                }
            }
        }
    }]
      , wm = [{
        meta: {
            image: "gradient-0-100.png",
            size: {
                w: 1024,
                h: 1024
            },
            scale: 1
        },
        frames: {
            "map-barrel-res-01.img": {
                frame: {
                    x: 2,
                    y: 264,
                    w: 227,
                    h: 218
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 15,
                    y: 20,
                    w: 227,
                    h: 218
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-building-club-gradient-01.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 234,
                    h: 258
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 33,
                    y: 9,
                    w: 234,
                    h: 258
                },
                sourceSize: {
                    w: 292,
                    h: 280
                }
            },
            "map-building-mansion-gradient-01.img": {
                frame: {
                    x: 240,
                    y: 2,
                    w: 234,
                    h: 204
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 7,
                    y: 8,
                    w: 234,
                    h: 204
                },
                sourceSize: {
                    w: 248,
                    h: 220
                }
            },
            "map-bush-01.img": {
                frame: {
                    x: 770,
                    y: 280,
                    w: 126,
                    h: 130
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 8,
                    y: 7,
                    w: 126,
                    h: 130
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-bush-01cb.img": {
                frame: {
                    x: 630,
                    y: 2,
                    w: 142,
                    h: 142
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 142,
                    h: 142
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-bush-03.img": {
                frame: {
                    x: 478,
                    y: 2,
                    w: 148,
                    h: 152
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 0,
                    w: 148,
                    h: 152
                },
                sourceSize: {
                    w: 152,
                    h: 152
                }
            },
            "map-bush-04.img": {
                frame: {
                    x: 776,
                    y: 146,
                    w: 136,
                    h: 130
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 7,
                    y: 9,
                    w: 136,
                    h: 130
                },
                sourceSize: {
                    w: 150,
                    h: 150
                }
            },
            "map-bush-04cb.img": {
                frame: {
                    x: 630,
                    y: 148,
                    w: 136,
                    h: 130
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 7,
                    y: 10,
                    w: 136,
                    h: 130
                },
                sourceSize: {
                    w: 150,
                    h: 150
                }
            },
            "map-light-01.img": {
                frame: {
                    x: 776,
                    y: 2,
                    w: 140,
                    h: 140
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 140,
                    h: 140
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-plane-01.img": {
                frame: {
                    x: 233,
                    y: 264,
                    w: 180,
                    h: 200
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 38,
                    y: 11,
                    w: 180,
                    h: 200
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-plane-02.img": {
                frame: {
                    x: 417,
                    y: 210,
                    w: 84,
                    h: 170
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 86,
                    y: 2,
                    w: 84,
                    h: 170
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            }
        }
    }]
      , _m = [{
        meta: {
            image: "halloween-0-100.png",
            size: {
                w: 2048,
                h: 2048
            },
            scale: 1
        },
        frames: {
            "map-airdrop-01h.img": {
                frame: {
                    x: 710,
                    y: 1e3,
                    w: 160,
                    h: 160
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 160
                },
                sourceSize: {
                    w: 160,
                    h: 160
                }
            },
            "map-airdrop-02h.img": {
                frame: {
                    x: 710,
                    y: 1164,
                    w: 160,
                    h: 160
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 160
                },
                sourceSize: {
                    w: 160,
                    h: 160
                }
            },
            "map-bunker-eye-chamber-ceiling-01.img": {
                frame: {
                    x: 2,
                    y: 1350,
                    w: 320,
                    h: 544
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 320,
                    h: 544
                },
                sourceSize: {
                    w: 320,
                    h: 544
                }
            },
            "map-bunker-eye-chamber-floor-01a.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 704,
                    h: 1344
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 32,
                    w: 704,
                    h: 1344
                },
                sourceSize: {
                    w: 704,
                    h: 1376
                }
            },
            "map-bunker-eye-chamber-floor-01b.img": {
                frame: {
                    x: 326,
                    y: 1674,
                    w: 192,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 192,
                    h: 256
                },
                sourceSize: {
                    w: 192,
                    h: 256
                }
            },
            "map-bunker-eye-compartment-ceiling-01.img": {
                frame: {
                    x: 326,
                    y: 1350,
                    w: 320,
                    h: 320
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 320,
                    h: 320
                },
                sourceSize: {
                    w: 320,
                    h: 320
                }
            },
            "map-bunker-eye-compartment-floor-01.img": {
                frame: {
                    x: 710,
                    y: 2,
                    w: 704,
                    h: 704
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 704,
                    h: 704
                },
                sourceSize: {
                    w: 704,
                    h: 704
                }
            },
            "map-bush-06.img": {
                frame: {
                    x: 650,
                    y: 1350,
                    w: 190,
                    h: 188
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 2,
                    w: 190,
                    h: 188
                },
                sourceSize: {
                    w: 192,
                    h: 192
                }
            },
            "map-bush-07sp.img": {
                frame: {
                    x: 152,
                    y: 1898,
                    w: 135,
                    h: 143
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 6,
                    y: 0,
                    w: 135,
                    h: 143
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-bush-res-06.img": {
                frame: {
                    x: 1934,
                    y: 296,
                    w: 50,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 47,
                    y: 48,
                    w: 50,
                    h: 48
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-crate-11h.img": {
                frame: {
                    x: 2,
                    y: 1898,
                    w: 146,
                    h: 146
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 146,
                    h: 146
                },
                sourceSize: {
                    w: 148,
                    h: 148
                }
            },
            "map-pumpkin-01.img": {
                frame: {
                    x: 866,
                    y: 710,
                    w: 140,
                    h: 140
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 140,
                    h: 140
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-pumpkin-02.img": {
                frame: {
                    x: 866,
                    y: 854,
                    w: 140,
                    h: 140
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 140,
                    h: 140
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-pumpkin-03.img": {
                frame: {
                    x: 291,
                    y: 1934,
                    w: 95,
                    h: 97
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 22,
                    y: 25,
                    w: 95,
                    h: 97
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-pumpkin-res-01.img": {
                frame: {
                    x: 1010,
                    y: 710,
                    w: 135,
                    h: 132
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 8,
                    w: 135,
                    h: 132
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-pumpkin-res-03.img": {
                frame: {
                    x: 1934,
                    y: 210,
                    w: 86,
                    h: 82
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 5,
                    y: 9,
                    w: 86,
                    h: 82
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-tree-04h.img": {
                frame: {
                    x: 1934,
                    y: 2,
                    w: 112,
                    h: 112
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 112
                },
                sourceSize: {
                    w: 112,
                    h: 112
                }
            },
            "map-tree-05.img": {
                frame: {
                    x: 1418,
                    y: 516,
                    w: 490,
                    h: 480
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 11,
                    y: 17,
                    w: 490,
                    h: 480
                },
                sourceSize: {
                    w: 512,
                    h: 512
                }
            },
            "map-tree-07.img": {
                frame: {
                    x: 522,
                    y: 1674,
                    w: 256,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 256,
                    h: 256
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-tree-08.img": {
                frame: {
                    x: 1418,
                    y: 2,
                    w: 512,
                    h: 510
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 512,
                    h: 510
                },
                sourceSize: {
                    w: 512,
                    h: 512
                }
            },
            "map-web-01.img": {
                frame: {
                    x: 710,
                    y: 710,
                    w: 152,
                    h: 158
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 152,
                    h: 158
                },
                sourceSize: {
                    w: 152,
                    h: 160
                }
            },
            "part-airdrop-01h.img": {
                frame: {
                    x: 1934,
                    y: 118,
                    w: 88,
                    h: 88
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 4,
                    y: 4,
                    w: 88,
                    h: 88
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "part-airdrop-02h.img": {
                frame: {
                    x: 390,
                    y: 1934,
                    w: 80,
                    h: 80
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 80
                },
                sourceSize: {
                    w: 80,
                    h: 80
                }
            }
        }
    }]
      , bm = JSON.parse('[{"meta":{"image":"loadout-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"acorn.img":{"frame":{"x":1220,"y":3184,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"ammo-12gauge.img":{"frame":{"x":2158,"y":1172,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-308sub.img":{"frame":{"x":2161,"y":1030,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-45acp.img":{"frame":{"x":2172,"y":879,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-50AE.img":{"frame":{"x":2212,"y":750,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-556mm.img":{"frame":{"x":2327,"y":621,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-762mm.img":{"frame":{"x":2400,"y":492,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-9mm.img":{"frame":{"x":2405,"y":350,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-box.img":{"frame":{"x":1801,"y":2955,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-flare.img":{"frame":{"x":1801,"y":3071,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"audio-off.img":{"frame":{"x":2089,"y":2520,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"audio-on.img":{"frame":{"x":2185,"y":2520,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"baguette.img":{"frame":{"x":2656,"y":670,"w":98,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":98,"h":98},"sourceSize":{"w":128,"h":128}},"bugle-final-blue.img":{"frame":{"x":1812,"y":2700,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-final-red.img":{"frame":{"x":1865,"y":2517,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-blue.img":{"frame":{"x":1237,"y":3029,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-red.img":{"frame":{"x":1237,"y":3304,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bullets.img":{"frame":{"x":2,"y":3657,"w":86,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":86,"h":124},"sourceSize":{"w":128,"h":128}},"campfire.img":{"frame":{"x":2079,"y":623,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"candy-corn.img":{"frame":{"x":322,"y":3542,"w":104,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":122},"sourceSize":{"w":128,"h":128}},"cattle.img":{"frame":{"x":1158,"y":3604,"w":118,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":118,"h":112},"sourceSize":{"w":128,"h":128}},"checked.img":{"frame":{"x":2455,"y":1734,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"chick.img":{"frame":{"x":1916,"y":2818,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"chicken-dinner.img":{"frame":{"x":1501,"y":1854,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"chicken.img":{"frame":{"x":2409,"y":258,"w":106,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":23,"w":106,"h":82},"sourceSize":{"w":128,"h":128}},"close.img":{"frame":{"x":1237,"y":1190,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"cobalt.img":{"frame":{"x":876,"y":2576,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":42,"h":42},"sourceSize":{"w":48,"h":48}},"coconut.img":{"frame":{"x":1992,"y":2720,"w":110,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":110,"h":90},"sourceSize":{"w":128,"h":128}},"cog.img":{"frame":{"x":773,"y":3507,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"copy.img":{"frame":{"x":1748,"y":3602,"w":88,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":16,"w":88,"h":96},"sourceSize":{"w":128,"h":128}},"crab.img":{"frame":{"x":2619,"y":824,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":100,"h":100},"sourceSize":{"w":128,"h":128}},"crosshair.img":{"frame":{"x":1662,"y":3720,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"crown.img":{"frame":{"x":465,"y":3228,"w":54,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":54,"h":46},"sourceSize":{"w":64,"h":64}},"cupcake.img":{"frame":{"x":338,"y":3412,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"danger.img":{"frame":{"x":1186,"y":3720,"w":118,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":118,"h":108},"sourceSize":{"w":128,"h":128}},"dc.img":{"frame":{"x":1237,"y":3424,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"donut.img":{"frame":{"x":615,"y":3660,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"dot.img":{"frame":{"x":375,"y":3123,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":32,"h":32},"sourceSize":{"w":36,"h":36}},"down.img":{"frame":{"x":560,"y":3478,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"egg.img":{"frame":{"x":560,"y":3354,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"eggplant.img":{"frame":{"x":2442,"y":737,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"emote-circle-outer.img":{"frame":{"x":767,"y":330,"w":252,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":252,"h":254},"sourceSize":{"w":256,"h":256}},"emote-medical-healthkit.img":{"frame":{"x":1199,"y":3480,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"emote.img":{"frame":{"x":430,"y":3538,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"eye.img":{"frame":{"x":804,"y":1970,"w":128,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":128,"h":82},"sourceSize":{"w":128,"h":128}},"face-alien.img":{"frame":{"x":2029,"y":236,"w":124,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":125},"sourceSize":{"w":128,"h":128}},"face-angel-treat.img":{"frame":{"x":1509,"y":1669,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"face-angry.img":{"frame":{"x":2144,"y":494,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-bandaged.img":{"frame":{"x":2149,"y":365,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-dab.img":{"frame":{"x":222,"y":1856,"w":144,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":144,"h":98},"sourceSize":{"w":144,"h":144}},"face-disappoint.img":{"frame":{"x":2157,"y":236,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-happy.img":{"frame":{"x":2084,"y":751,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-headshot.img":{"frame":{"x":134,"y":2169,"w":127,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":24,"w":127,"h":88},"sourceSize":{"w":128,"h":128}},"face-heart.img":{"frame":{"x":2199,"y":622,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-imp-trick.img":{"frame":{"x":1373,"y":1988,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-imp.img":{"frame":{"x":134,"y":2261,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":126,"h":124},"sourceSize":{"w":128,"h":128}},"face-joy.img":{"frame":{"x":2272,"y":493,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-monocle.img":{"frame":{"x":2277,"y":364,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-picasso.img":{"frame":{"x":2159,"y":2,"w":122,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":122,"h":124},"sourceSize":{"w":128,"h":128}},"face-poo.img":{"frame":{"x":418,"y":2228,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"face-sad.img":{"frame":{"x":2285,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sob.img":{"frame":{"x":2285,"y":130,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sunglass.img":{"frame":{"x":2,"y":2905,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-thinking.img":{"frame":{"x":1501,"y":2094,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-upsidedown.img":{"frame":{"x":2,"y":3033,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"fish.img":{"frame":{"x":1097,"y":1942,"w":128,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":128,"h":92},"sourceSize":{"w":128,"h":128}},"flag-albania.img":{"frame":{"x":1633,"y":1801,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-algeria.img":{"frame":{"x":1765,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-argentina.img":{"frame":{"x":1897,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-australia.img":{"frame":{"x":1511,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-austria.img":{"frame":{"x":1366,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-azerbaijan.img":{"frame":{"x":1224,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belarus.img":{"frame":{"x":1765,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belgium.img":{"frame":{"x":1897,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bolivia.img":{"frame":{"x":1511,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":1366,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-brazil.img":{"frame":{"x":1224,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-canada.img":{"frame":{"x":1765,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-chile.img":{"frame":{"x":1897,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-china.img":{"frame":{"x":1511,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-colombia.img":{"frame":{"x":1366,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-croatia.img":{"frame":{"x":1152,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-czech-republic.img":{"frame":{"x":1765,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-denmark.img":{"frame":{"x":1897,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-dominican-republic.img":{"frame":{"x":1511,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ecuador.img":{"frame":{"x":1366,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-egypt.img":{"frame":{"x":1116,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-estonia.img":{"frame":{"x":1765,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-finland.img":{"frame":{"x":1897,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-france.img":{"frame":{"x":1023,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-georgia.img":{"frame":{"x":1023,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-germany.img":{"frame":{"x":1028,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-greece.img":{"frame":{"x":1155,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-guatemala.img":{"frame":{"x":1155,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-honduras.img":{"frame":{"x":1116,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hong-kong.img":{"frame":{"x":1160,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hungary.img":{"frame":{"x":1287,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-india.img":{"frame":{"x":1287,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-indonesia.img":{"frame":{"x":1237,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-israel.img":{"frame":{"x":1248,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-italy.img":{"frame":{"x":1292,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-japan.img":{"frame":{"x":1419,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-kazakhstan.img":{"frame":{"x":1419,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-latvia.img":{"frame":{"x":1366,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-lithuania.img":{"frame":{"x":1369,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-malaysia.img":{"frame":{"x":1380,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-mexico.img":{"frame":{"x":1424,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-moldova.img":{"frame":{"x":1551,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-morocco.img":{"frame":{"x":1551,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-netherlands.img":{"frame":{"x":1408,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-new-zealand.img":{"frame":{"x":1498,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-norway.img":{"frame":{"x":1501,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-peru.img":{"frame":{"x":1512,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-philippines.img":{"frame":{"x":1556,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-portugal.img":{"frame":{"x":1683,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-republic-of-poland.img":{"frame":{"x":1511,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-romania.img":{"frame":{"x":1540,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-russia.img":{"frame":{"x":1630,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-serbia.img":{"frame":{"x":1633,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-singapore.img":{"frame":{"x":1644,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-slovakia.img":{"frame":{"x":1688,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-south-korea.img":{"frame":{"x":1815,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-spain.img":{"frame":{"x":1641,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-sweden.img":{"frame":{"x":1643,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-switzerland.img":{"frame":{"x":1672,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-taiwan.img":{"frame":{"x":1762,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-thailand.img":{"frame":{"x":1765,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-trinidad-and-tobago.img":{"frame":{"x":1776,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-turkey.img":{"frame":{"x":1820,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ukraine.img":{"frame":{"x":1908,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-arab-emirates.img":{"frame":{"x":1897,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-kingdom.img":{"frame":{"x":1894,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-states-of-america.img":{"frame":{"x":1804,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-uruguay.img":{"frame":{"x":1775,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-venezuela.img":{"frame":{"x":1907,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-vietnam.img":{"frame":{"x":1773,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flex.img":{"frame":{"x":1328,"y":3149,"w":109,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":109,"h":116},"sourceSize":{"w":128,"h":128}},"forest.img":{"frame":{"x":2159,"y":130,"w":120,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":15,"w":120,"h":98},"sourceSize":{"w":128,"h":128}},"gas.img":{"frame":{"x":1333,"y":2898,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"gg.img":{"frame":{"x":1765,"y":2060,"w":114,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":28,"w":114,"h":72},"sourceSize":{"w":128,"h":128}},"ghost-base.img":{"frame":{"x":1329,"y":3029,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"globe.img":{"frame":{"x":1411,"y":2537,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"gun-awc-01.img":{"frame":{"x":2,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-awc-02.img":{"frame":{"x":51,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-bugle-01.img":{"frame":{"x":762,"y":1549,"w":64,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":89,"w":64,"h":143},"sourceSize":{"w":96,"h":232}},"gun-deagle-01.img":{"frame":{"x":314,"y":2733,"w":40,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":108,"w":40,"h":124},"sourceSize":{"w":56,"h":232}},"gun-dp28-top-01.img":{"frame":{"x":553,"y":1401,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":70,"h":70}},"gun-famas-01.img":{"frame":{"x":646,"y":908,"w":36,"h":166},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":42,"w":36,"h":166},"sourceSize":{"w":48,"h":208}},"gun-garand-01.img":{"frame":{"x":988,"y":2,"w":32,"h":212},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":20,"w":32,"h":212},"sourceSize":{"w":48,"h":232}},"gun-groza-01.img":{"frame":{"x":222,"y":1706,"w":37,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":62,"w":37,"h":146},"sourceSize":{"w":48,"h":208}},"gun-grozas-01.img":{"frame":{"x":605,"y":717,"w":37,"h":189},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":19,"w":37,"h":189},"sourceSize":{"w":48,"h":208}},"gun-long-01.img":{"frame":{"x":692,"y":717,"w":28,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":184},"sourceSize":{"w":28,"h":184}},"gun-m249-bot-01.img":{"frame":{"x":2372,"y":1218,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":40},"sourceSize":{"w":72,"h":40}},"gun-m249-top-01.img":{"frame":{"x":462,"y":508,"w":36,"h":214},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":18,"w":36,"h":214},"sourceSize":{"w":56,"h":232}},"gun-m4a1-01.img":{"frame":{"x":646,"y":717,"w":42,"h":187},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":42,"h":187},"sourceSize":{"w":48,"h":196}},"gun-med-01.img":{"frame":{"x":692,"y":905,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-mp220-01.img":{"frame":{"x":306,"y":1958,"w":38,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":38,"h":128},"sourceSize":{"w":40,"h":128}},"gun-ots38-01.img":{"frame":{"x":1152,"y":162,"w":34,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":132,"w":34,"h":100},"sourceSize":{"w":56,"h":232}},"gun-p30l-01.img":{"frame":{"x":724,"y":717,"w":31,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":112,"w":31,"h":120},"sourceSize":{"w":56,"h":232}},"gun-pkp-bot-01.img":{"frame":{"x":947,"y":2696,"w":76,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":44},"sourceSize":{"w":76,"h":44}},"gun-pkp-top-01.img":{"frame":{"x":500,"y":726,"w":34,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":40,"w":34,"h":192},"sourceSize":{"w":56,"h":232}},"gun-potato-cannon-01.img":{"frame":{"x":796,"y":44,"w":56,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":248},"sourceSize":{"w":56,"h":248}},"gun-potato-smg-01.img":{"frame":{"x":100,"y":726,"w":99,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":38,"w":99,"h":210},"sourceSize":{"w":176,"h":248}},"gun-potato-smg-top-01.img":{"frame":{"x":302,"y":4029,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":64,"h":64},"sourceSize":{"w":80,"h":80}},"gun-qbb97-bot-01.img":{"frame":{"x":830,"y":1664,"w":60,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":28},"sourceSize":{"w":64,"h":32}},"gun-saiga-01.img":{"frame":{"x":943,"y":842,"w":40,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":40,"h":174},"sourceSize":{"w":48,"h":196}},"gun-scarssr-01.img":{"frame":{"x":924,"y":2,"w":60,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":248},"sourceSize":{"w":60,"h":248}},"gun-scorpion-01.img":{"frame":{"x":457,"y":804,"w":39,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":39,"h":198},"sourceSize":{"w":48,"h":208}},"gun-short-01.img":{"frame":{"x":382,"y":592,"w":28,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":96},"sourceSize":{"w":28,"h":96}},"gun-usas-01.img":{"frame":{"x":415,"y":592,"w":41,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":24,"w":41,"h":208},"sourceSize":{"w":56,"h":232}},"gun-vss-01.img":{"frame":{"x":415,"y":804,"w":38,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":38,"h":208},"sourceSize":{"w":48,"h":208}},"hamburger.img":{"frame":{"x":650,"y":2041,"w":128,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":128,"h":104},"sourceSize":{"w":128,"h":128}},"hatchet.img":{"frame":{"x":189,"y":2863,"w":44,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":44,"h":38},"sourceSize":{"w":48,"h":48}},"heart.img":{"frame":{"x":2,"y":3161,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"hide.img":{"frame":{"x":2026,"y":1190,"w":128,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":128,"h":106},"sourceSize":{"w":128,"h":128}},"ice-cream.img":{"frame":{"x":353,"y":3283,"w":66,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":31,"y":3,"w":66,"h":122},"sourceSize":{"w":128,"h":128}},"indicator.img":{"frame":{"x":1248,"y":398,"w":90,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":0,"w":90,"h":128},"sourceSize":{"w":128,"h":128}},"keyboard.img":{"frame":{"x":817,"y":4032,"w":104,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":33,"w":104,"h":62},"sourceSize":{"w":128,"h":128}},"leek.img":{"frame":{"x":2443,"y":608,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"link.img":{"frame":{"x":2029,"y":1058,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loadout-boost.img":{"frame":{"x":1280,"y":3588,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-crosshair.img":{"frame":{"x":1952,"y":776,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loadout-emote.img":{"frame":{"x":2,"y":3785,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loadout-heal.img":{"frame":{"x":1437,"y":3018,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-kill-icon.img":{"frame":{"x":693,"y":3914,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-melee.img":{"frame":{"x":226,"y":3287,"w":123,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":123,"h":121},"sourceSize":{"w":128,"h":128}},"loadout-outfit.img":{"frame":{"x":1176,"y":2305,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loadout-player-icon.img":{"frame":{"x":1973,"y":2490,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"lock.img":{"frame":{"x":762,"y":1696,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"logo-caduceus.img":{"frame":{"x":1633,"y":1933,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-chrysanthemum.img":{"frame":{"x":1905,"y":1586,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-cloud.img":{"frame":{"x":1905,"y":1700,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-conch.img":{"frame":{"x":1765,"y":1718,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-crossing.img":{"frame":{"x":1897,"y":1814,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-egg.img":{"frame":{"x":1765,"y":1832,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hatchet.img":{"frame":{"x":1897,"y":1928,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hydra.img":{"frame":{"x":1501,"y":1980,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-meteor.img":{"frame":{"x":1765,"y":1946,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-storm.img":{"frame":{"x":1633,"y":2047,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-surviv.img":{"frame":{"x":518,"y":1982,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-swine.img":{"frame":{"x":1947,"y":662,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-twins.img":{"frame":{"x":1936,"y":1322,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loot-ammo-box.img":{"frame":{"x":154,"y":2037,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-chest-01.img":{"frame":{"x":643,"y":3167,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-02.img":{"frame":{"x":697,"y":3041,"w":76,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":4,"w":76,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-03.img":{"frame":{"x":1308,"y":3710,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-circle-outer-01.img":{"frame":{"x":370,"y":1836,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-02.img":{"frame":{"x":413,"y":1686,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-03.img":{"frame":{"x":263,"y":1706,"w":146,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":146,"h":126},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-04.img":{"frame":{"x":946,"y":1372,"w":140,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":140,"h":133},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-05.img":{"frame":{"x":546,"y":1475,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-06.img":{"frame":{"x":518,"y":1834,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-helmet-01.img":{"frame":{"x":2029,"y":1932,"w":112,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":13,"w":112,"h":102},"sourceSize":{"w":128,"h":128}},"loot-helmet-02.img":{"frame":{"x":1641,"y":1718,"w":118,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":26,"w":118,"h":76},"sourceSize":{"w":128,"h":128}},"loot-helmet-03.img":{"frame":{"x":1510,"y":4006,"w":112,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":21,"w":112,"h":86},"sourceSize":{"w":128,"h":128}},"loot-medical-bandage.img":{"frame":{"x":1368,"y":2617,"w":106,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":6,"w":106,"h":116},"sourceSize":{"w":128,"h":128}},"loot-medical-healthkit.img":{"frame":{"x":1250,"y":3954,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-heart.img":{"frame":{"x":715,"y":2909,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-pill.img":{"frame":{"x":824,"y":2802,"w":118,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":19,"w":118,"h":90},"sourceSize":{"w":128,"h":128}},"loot-medical-soda.img":{"frame":{"x":130,"y":3415,"w":60,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":9,"w":60,"h":110},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-rugged.img":{"frame":{"x":1136,"y":2300,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-woodland.img":{"frame":{"x":1338,"y":3832,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bonesaw-healer.img":{"frame":{"x":158,"y":1817,"w":60,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":10,"w":60,"h":155},"sourceSize":{"w":168,"h":168}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":136,"y":1321,"w":54,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":81,"y":22,"w":54,"h":155},"sourceSize":{"w":192,"h":192}},"loot-melee-bowie-frontier.img":{"frame":{"x":1372,"y":3954,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-vintage.img":{"frame":{"x":1378,"y":3832,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-crowbar-recon.img":{"frame":{"x":967,"y":1020,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-crowbar-scout.img":{"frame":{"x":987,"y":842,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-fireaxe.img":{"frame":{"x":136,"y":1480,"w":150,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":150,"h":76},"sourceSize":{"w":152,"h":76}},"loot-melee-hook-silver.img":{"frame":{"x":1505,"y":2769,"w":42,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":25,"w":42,"h":78},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-burnished.img":{"frame":{"x":72,"y":550,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-rugged.img":{"frame":{"x":195,"y":989,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-drowned.img":{"frame":{"x":442,"y":1475,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-prismatic.img":{"frame":{"x":1099,"y":1264,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-rugged.img":{"frame":{"x":1228,"y":1402,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":947,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-orchid.img":{"frame":{"x":232,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-rusted.img":{"frame":{"x":2,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana.img":{"frame":{"x":232,"y":550,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-knuckles-heroic.img":{"frame":{"x":955,"y":1310,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-knuckles-rusted.img":{"frame":{"x":693,"y":4036,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-kukri-sniper.img":{"frame":{"x":329,"y":1110,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-kukri-trad.img":{"frame":{"x":1024,"y":2,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-machete-taiga.img":{"frame":{"x":405,"y":1016,"w":44,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":3,"w":44,"h":164},"sourceSize":{"w":168,"h":168}},"loot-melee-naginata.img":{"frame":{"x":508,"y":2,"w":345,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":14,"w":345,"h":38},"sourceSize":{"w":350,"h":54}},"loot-melee-pan-black-side.img":{"frame":{"x":322,"y":3668,"w":19,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":55,"y":7,"w":19,"h":113},"sourceSize":{"w":128,"h":128}},"loot-melee-pan-black.img":{"frame":{"x":839,"y":2896,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":21,"w":118,"h":86},"sourceSize":{"w":128,"h":128}},"loot-melee-sledgehammer.img":{"frame":{"x":2,"y":1977,"w":148,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":58},"sourceSize":{"w":148,"h":58}},"loot-melee-spade-assault.img":{"frame":{"x":194,"y":1321,"w":54,"h":150},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":53,"y":5,"w":54,"h":150},"sourceSize":{"w":160,"h":160}},"loot-melee-stonehammer.img":{"frame":{"x":154,"y":1977,"w":148,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":148,"h":56},"sourceSize":{"w":148,"h":60}},"loot-melee-warhammer-tank.img":{"frame":{"x":508,"y":330,"w":255,"h":131},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":255,"h":131},"sourceSize":{"w":264,"h":152}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":252,"y":1422,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-melee-woodaxe.img":{"frame":{"x":290,"y":1480,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-pack-00.img":{"frame":{"x":901,"y":2986,"w":90,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":5,"w":90,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-01.img":{"frame":{"x":1407,"y":2737,"w":94,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":6,"w":94,"h":116},"sourceSize":{"w":128,"h":128}},"loot-pack-02.img":{"frame":{"x":1418,"y":3954,"w":88,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":5,"w":88,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-03.img":{"frame":{"x":1920,"y":2372,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-aoe-heal.img":{"frame":{"x":265,"y":2248,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-45.img":{"frame":{"x":662,"y":3291,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-9mm.img":{"frame":{"x":767,"y":3165,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-assault.img":{"frame":{"x":777,"y":3017,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-broken-arrow.img":{"frame":{"x":2068,"y":1300,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-chambered.img":{"frame":{"x":817,"y":3908,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-endless-ammo.img":{"frame":{"x":2513,"y":843,"w":102,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":15,"w":102,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-explosive.img":{"frame":{"x":2078,"y":2604,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-fabricate.img":{"frame":{"x":825,"y":2622,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-perk-field-medic.img":{"frame":{"x":2104,"y":2038,"w":98,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":11,"w":98,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-final-bugle.img":{"frame":{"x":1888,"y":2060,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-firepower.img":{"frame":{"x":396,"y":2359,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-flak-jacket.img":{"frame":{"x":2144,"y":2274,"w":102,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":105},"sourceSize":{"w":128,"h":128}},"loot-perk-gotw.img":{"frame":{"x":2,"y":2039,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-halloween-mystery.img":{"frame":{"x":836,"y":3724,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-hotw.img":{"frame":{"x":450,"y":3409,"w":106,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":106,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-hunted.img":{"frame":{"x":362,"y":2745,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-inspiration.img":{"frame":{"x":1453,"y":2857,"w":115,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":115,"h":116},"sourceSize":{"w":128,"h":128}},"loot-perk-leadership.img":{"frame":{"x":2,"y":2165,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-martyrdom.img":{"frame":{"x":2237,"y":1778,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"loot-perk-rare-potato.img":{"frame":{"x":362,"y":2871,"w":90,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":3,"w":90,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger.img":{"frame":{"x":2145,"y":1932,"w":108,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":14,"w":108,"h":100},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger_adv.img":{"frame":{"x":876,"y":2498,"w":118,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":27,"w":118,"h":74},"sourceSize":{"w":128,"h":128}},"loot-perk-self-revive.img":{"frame":{"x":1511,"y":1586,"w":126,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":31,"w":126,"h":66},"sourceSize":{"w":128,"h":128}},"loot-perk-small-arms.img":{"frame":{"x":2277,"y":995,"w":107,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":107,"h":111},"sourceSize":{"w":128,"h":128}},"loot-perk-splinter.img":{"frame":{"x":2,"y":3913,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-steelskin.img":{"frame":{"x":1134,"y":3184,"w":82,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":5,"w":82,"h":117},"sourceSize":{"w":128,"h":128}},"loot-perk-takedown.img":{"frame":{"x":2338,"y":1644,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-targeting.img":{"frame":{"x":122,"y":3913,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-12g.img":{"frame":{"x":773,"y":3399,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-556.img":{"frame":{"x":786,"y":3273,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-762.img":{"frame":{"x":891,"y":3125,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-9mm.img":{"frame":{"x":863,"y":3507,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-super.img":{"frame":{"x":264,"y":2379,"w":126,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":19,"w":126,"h":90},"sourceSize":{"w":128,"h":128}},"loot-perk-tree-climbing.img":{"frame":{"x":1626,"y":3945,"w":94,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":94,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-chatty.img":{"frame":{"x":2288,"y":866,"w":110,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":10,"w":110,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-drain.img":{"frame":{"x":946,"y":2744,"w":118,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":22,"w":118,"h":83},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-m9.img":{"frame":{"x":863,"y":3615,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-nothing.img":{"frame":{"x":2357,"y":1516,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-size.img":{"frame":{"x":2367,"y":1374,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-turkey_shoot.img":{"frame":{"x":2251,"y":1532,"w":102,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":102,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-windwalk.img":{"frame":{"x":1109,"y":3481,"w":86,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":86,"h":119},"sourceSize":{"w":128,"h":128}},"loot-scope-00.img":{"frame":{"x":936,"y":1974,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-01.img":{"frame":{"x":782,"y":2056,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-02.img":{"frame":{"x":1068,"y":2038,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-03.img":{"frame":{"x":914,"y":2106,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-04.img":{"frame":{"x":348,"y":1984,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-shirt-01.img":{"frame":{"x":1296,"y":2305,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitBase.img":{"frame":{"x":1321,"y":3424,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCamo.img":{"frame":{"x":1329,"y":3269,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":1441,"y":3138,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":1557,"y":2977,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":1400,"y":3540,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":1441,"y":3385,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":1449,"y":3254,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDev.img":{"frame":{"x":1561,"y":3093,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitHeaven.img":{"frame":{"x":1408,"y":3656,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":1520,"y":3501,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitLumber.img":{"frame":{"x":1561,"y":3370,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitMod.img":{"frame":{"x":1569,"y":3209,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParma.img":{"frame":{"x":1424,"y":3772,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":1528,"y":3617,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRed.img":{"frame":{"x":1640,"y":3486,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":1681,"y":3325,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":1411,"y":2421,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitTurkey.img":{"frame":{"x":1416,"y":2248,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWheat.img":{"frame":{"x":1478,"y":2537,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWhite.img":{"frame":{"x":1531,"y":2364,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWoodland.img":{"frame":{"x":1536,"y":2224,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag-egg.img":{"frame":{"x":2467,"y":1218,"w":94,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":11,"w":94,"h":106},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag.img":{"frame":{"x":2610,"y":943,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"loot-throwable-mirv.img":{"frame":{"x":1992,"y":2604,"w":82,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":8,"w":82,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-potato.img":{"frame":{"x":600,"y":2680,"w":92,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":12,"w":92,"h":104},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke-egg.img":{"frame":{"x":1979,"y":2178,"w":82,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":82,"h":114},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke.img":{"frame":{"x":375,"y":2997,"w":84,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":84,"h":122},"sourceSize":{"w":128,"h":128}},"loot-throwable-snowball.img":{"frame":{"x":2,"y":2811,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"loot-throwable-strobe.img":{"frame":{"x":376,"y":3794,"w":104,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":23,"w":104,"h":89},"sourceSize":{"w":128,"h":128}},"loot-weapon-ak.img":{"frame":{"x":897,"y":3381,"w":102,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":4,"w":102,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-an94.img":{"frame":{"x":130,"y":3785,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-awc.img":{"frame":{"x":456,"y":2871,"w":122,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":122,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-bar.img":{"frame":{"x":120,"y":2389,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-blr.img":{"frame":{"x":1505,"y":2653,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-bugle.img":{"frame":{"x":463,"y":2996,"w":122,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":7,"w":122,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45-dual.img":{"frame":{"x":250,"y":2473,"w":120,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":120,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45.img":{"frame":{"x":910,"y":3233,"w":96,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":4,"w":96,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle-dual.img":{"frame":{"x":480,"y":2096,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle.img":{"frame":{"x":1996,"y":2042,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-dp28.img":{"frame":{"x":2,"y":2421,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-famas.img":{"frame":{"x":961,"y":2831,"w":112,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":112,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-fists.img":{"frame":{"x":2250,"y":2262,"w":74,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":74,"h":79},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":1643,"y":134,"w":110,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":110,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun.img":{"frame":{"x":1598,"y":2480,"w":82,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":82,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-garand.img":{"frame":{"x":1510,"y":3888,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":112,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock-dual.img":{"frame":{"x":465,"y":3114,"w":122,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":122,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock.img":{"frame":{"x":222,"y":3542,"w":90,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":9,"w":90,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-groza.img":{"frame":{"x":2347,"y":1754,"w":104,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":14,"w":104,"h":100},"sourceSize":{"w":128,"h":128}},"loot-weapon-grozas.img":{"frame":{"x":120,"y":2515,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-hk416.img":{"frame":{"x":1127,"y":3357,"w":106,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":106,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-l86.img":{"frame":{"x":941,"y":3848,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1014.img":{"frame":{"x":2,"y":2551,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1100.img":{"frame":{"x":1063,"y":3753,"w":119,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":119,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911-dual.img":{"frame":{"x":612,"y":2149,"w":128,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":128,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911.img":{"frame":{"x":948,"y":3723,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":4,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1a1.img":{"frame":{"x":204,"y":3657,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-m249.img":{"frame":{"x":523,"y":3228,"w":116,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":116,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m39.img":{"frame":{"x":488,"y":2663,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m4a1.img":{"frame":{"x":678,"y":2310,"w":116,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m870.img":{"frame":{"x":947,"y":2576,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-cursed.img":{"frame":{"x":941,"y":3972,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-dual.img":{"frame":{"x":744,"y":2188,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9.img":{"frame":{"x":1068,"y":2696,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r-dual.img":{"frame":{"x":286,"y":2116,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r.img":{"frame":{"x":1643,"y":266,"w":100,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":0,"w":100,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-mac10.img":{"frame":{"x":2448,"y":1626,"w":103,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":103,"h":104},"sourceSize":{"w":128,"h":128}},"loot-weapon-mk12.img":{"frame":{"x":582,"y":2789,"w":114,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":114,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-mkg45.img":{"frame":{"x":2029,"y":365,"w":116,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-model94.img":{"frame":{"x":998,"y":2430,"w":118,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":109},"sourceSize":{"w":128,"h":128}},"loot-weapon-mosin.img":{"frame":{"x":1069,"y":2543,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp220.img":{"frame":{"x":1544,"y":3733,"w":114,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":114,"h":106},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp5.img":{"frame":{"x":1648,"y":3602,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38-dual.img":{"frame":{"x":526,"y":2403,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38.img":{"frame":{"x":2029,"y":1814,"w":90,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":7,"w":90,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38-dual.img":{"frame":{"x":1643,"y":398,"w":105,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":105,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38.img":{"frame":{"x":1043,"y":3972,"w":81,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":4,"w":81,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l-dual.img":{"frame":{"x":248,"y":3785,"w":124,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":124,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l.img":{"frame":{"x":2123,"y":1704,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-pkp.img":{"frame":{"x":250,"y":3901,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-cannon.img":{"frame":{"x":589,"y":2915,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-smg.img":{"frame":{"x":2029,"y":494,"w":111,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":111,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-qbb97.img":{"frame":{"x":987,"y":3505,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-saiga.img":{"frame":{"x":368,"y":3901,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scar.img":{"frame":{"x":1651,"y":2340,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-scarssr.img":{"frame":{"x":130,"y":2905,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-scorpion.img":{"frame":{"x":130,"y":3031,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scout.img":{"frame":{"x":1136,"y":2422,"w":118,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-spas12.img":{"frame":{"x":2037,"y":1586,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-sv98.img":{"frame":{"x":700,"y":2680,"w":121,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":121,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-svd.img":{"frame":{"x":374,"y":2485,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ump9.img":{"frame":{"x":995,"y":2953,"w":114,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":114,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-usas.img":{"frame":{"x":751,"y":2498,"w":121,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":121,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector.img":{"frame":{"x":2137,"y":1549,"w":110,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":110,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector45.img":{"frame":{"x":1077,"y":2818,"w":104,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":5,"w":104,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-vss.img":{"frame":{"x":246,"y":2603,"w":108,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":108,"h":126},"sourceSize":{"w":128,"h":128}},"loot-xp-bone-01.img":{"frame":{"x":2156,"y":1416,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-xp-book-01.img":{"frame":{"x":1168,"y":2663,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-02.img":{"frame":{"x":1191,"y":2536,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-03.img":{"frame":{"x":1015,"y":3075,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-04.img":{"frame":{"x":1113,"y":2940,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-05.img":{"frame":{"x":1185,"y":2785,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-06.img":{"frame":{"x":1268,"y":2658,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-compass-01.img":{"frame":{"x":1695,"y":3821,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":96,"h":96},"sourceSize":{"w":128,"h":128}},"loot-xp-donut-01.img":{"frame":{"x":2328,"y":737,"w":110,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":110,"h":110},"sourceSize":{"w":128,"h":128}},"loot-xp-glasses-01.img":{"frame":{"x":2467,"y":1484,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"loot-xp-stump-01.img":{"frame":{"x":1115,"y":3062,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"mag-glass.img":{"frame":{"x":1216,"y":3832,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"minimize.img":{"frame":{"x":1801,"y":3320,"w":95,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":95,"h":95},"sourceSize":{"w":128,"h":128}},"mobile-gas.img":{"frame":{"x":1072,"y":1647,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":13}},"movement.img":{"frame":{"x":2181,"y":2154,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"news.img":{"frame":{"x":2123,"y":1820,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"ok.img":{"frame":{"x":1128,"y":3876,"w":84,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":5,"w":84,"h":118},"sourceSize":{"w":128,"h":128}},"pad.img":{"frame":{"x":203,"y":726,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":208},"sourceSize":{"w":208,"h":208}},"part-airdrop-01.img":{"frame":{"x":1763,"y":3702,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-01x.img":{"frame":{"x":1760,"y":3441,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-02.img":{"frame":{"x":2,"y":1157,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-02x.img":{"frame":{"x":457,"y":1006,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-03.img":{"frame":{"x":2,"y":1653,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"part-airdrop-04.img":{"frame":{"x":1683,"y":530,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"part-aura-circle-01.img":{"frame":{"x":508,"y":44,"w":284,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":284,"h":282},"sourceSize":{"w":288,"h":288}},"part-blossom-01.img":{"frame":{"x":2358,"y":1262,"w":105,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":105,"h":108},"sourceSize":{"w":128,"h":128}},"part-blossom-02.img":{"frame":{"x":2229,"y":1665,"w":105,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":105,"h":109},"sourceSize":{"w":128,"h":128}},"part-blossom-03.img":{"frame":{"x":1689,"y":3204,"w":115,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":115,"h":112},"sourceSize":{"w":128,"h":128}},"part-blossom-04.img":{"frame":{"x":1797,"y":2838,"w":115,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":115,"h":113},"sourceSize":{"w":128,"h":128}},"part-book-01.img":{"frame":{"x":1008,"y":984,"w":104,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":3,"w":104,"h":138},"sourceSize":{"w":144,"h":144}},"part-boost-basic.img":{"frame":{"x":1213,"y":2907,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"part-boost-naturalize.img":{"frame":{"x":130,"y":3287,"w":92,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":2,"w":92,"h":124},"sourceSize":{"w":128,"h":128}},"part-boost-shuriken.img":{"frame":{"x":1656,"y":2161,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"part-boost-star.img":{"frame":{"x":1285,"y":2780,"w":118,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":118,"h":114},"sourceSize":{"w":128,"h":128}},"part-cloth-01.img":{"frame":{"x":2308,"y":1992,"w":70,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":72},"sourceSize":{"w":72,"h":72}},"part-feather-01.img":{"frame":{"x":1003,"y":3357,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-feather-02.img":{"frame":{"x":1010,"y":3233,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-flare-01.img":{"frame":{"x":2199,"y":2383,"w":92,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":92,"h":92},"sourceSize":{"w":100,"h":100}},"part-frag-burst-01.img":{"frame":{"x":1840,"y":3611,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-02.img":{"frame":{"x":1860,"y":3419,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-03.img":{"frame":{"x":460,"y":726,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"part-frag-lever-01.img":{"frame":{"x":591,"y":3167,"w":48,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":44,"w":48,"h":40},"sourceSize":{"w":128,"h":128}},"part-frag-pin-01.img":{"frame":{"x":418,"y":2116,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"part-heal-basic.img":{"frame":{"x":1572,"y":2769,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-heart.img":{"frame":{"x":1625,"y":2600,"w":116,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":12,"w":116,"h":114},"sourceSize":{"w":128,"h":128}},"part-heal-moon.img":{"frame":{"x":1684,"y":2460,"w":112,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":112,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-tomoe.img":{"frame":{"x":591,"y":3041,"w":102,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":102,"h":122},"sourceSize":{"w":128,"h":128}},"part-leaf-01.img":{"frame":{"x":600,"y":2570,"w":122,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":122,"h":106},"sourceSize":{"w":128,"h":128}},"part-leaf-01sv.img":{"frame":{"x":2372,"y":1110,"w":108,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":12,"w":108,"h":104},"sourceSize":{"w":128,"h":128}},"part-leaf-02.img":{"frame":{"x":2388,"y":974,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":108,"h":108},"sourceSize":{"w":128,"h":128}},"part-leaf-03.img":{"frame":{"x":1759,"y":2277,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-04.img":{"frame":{"x":1677,"y":2889,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-05.img":{"frame":{"x":1692,"y":2718,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-06.img":{"frame":{"x":1745,"y":2580,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-log-01.img":{"frame":{"x":210,"y":3159,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"part-note-01.img":{"frame":{"x":101,"y":2775,"w":84,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":84,"h":126},"sourceSize":{"w":128,"h":128}},"part-note-02.img":{"frame":{"x":1023,"y":307,"w":88,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":88,"h":128},"sourceSize":{"w":128,"h":128}},"part-panel-01.img":{"frame":{"x":800,"y":1374,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plank-01.img":{"frame":{"x":809,"y":1226,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plate-01.img":{"frame":{"x":814,"y":1834,"w":138,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":138,"h":132},"sourceSize":{"w":144,"h":144}},"part-pot-01.img":{"frame":{"x":974,"y":1509,"w":94,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":4,"w":94,"h":136},"sourceSize":{"w":144,"h":144}},"part-potato-01.img":{"frame":{"x":1900,"y":3286,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-potato-02.img":{"frame":{"x":1060,"y":3629,"w":94,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":94,"h":120},"sourceSize":{"w":128,"h":128}},"part-pulse-01.img":{"frame":{"x":1902,"y":3187,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-pumpkin-01.img":{"frame":{"x":2484,"y":1086,"w":106,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":106,"h":94},"sourceSize":{"w":128,"h":128}},"part-shell-01.img":{"frame":{"x":1348,"y":1402,"w":56,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":133},"sourceSize":{"w":56,"h":133}},"part-shell-02.img":{"frame":{"x":538,"y":717,"w":63,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":190},"sourceSize":{"w":63,"h":190}},"part-shell-03.img":{"frame":{"x":724,"y":842,"w":63,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":180},"sourceSize":{"w":63,"h":180}},"part-shell-04.img":{"frame":{"x":2,"y":989,"w":55,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":55,"h":164},"sourceSize":{"w":55,"h":164}},"part-shell-05.img":{"frame":{"x":857,"y":2,"w":63,"h":260},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":260},"sourceSize":{"w":63,"h":260}},"part-smoke-01.img":{"frame":{"x":2382,"y":1934,"w":68,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":68,"h":66},"sourceSize":{"w":72,"h":72}},"part-smoke-02.img":{"frame":{"x":508,"y":465,"w":254,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":254,"h":248},"sourceSize":{"w":256,"h":256}},"part-smoke-03.img":{"frame":{"x":766,"y":588,"w":253,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":253,"h":250},"sourceSize":{"w":256,"h":256}},"part-snow-01.img":{"frame":{"x":2435,"y":1858,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"part-spark-01.img":{"frame":{"x":1800,"y":2397,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-spark-02.img":{"frame":{"x":1681,"y":3009,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-splat-01.img":{"frame":{"x":2029,"y":2,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":126,"h":124},"sourceSize":{"w":144,"h":144}},"part-splat-02.img":{"frame":{"x":1373,"y":1854,"w":124,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":8,"w":124,"h":130},"sourceSize":{"w":144,"h":144}},"part-splat-03.img":{"frame":{"x":338,"y":3159,"w":123,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":6,"w":123,"h":120},"sourceSize":{"w":144,"h":144}},"part-strobe-01.img":{"frame":{"x":1724,"y":3921,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-takedown-01.img":{"frame":{"x":2029,"y":130,"w":126,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":13,"w":126,"h":102},"sourceSize":{"w":128,"h":128}},"part-wedge-01.img":{"frame":{"x":100,"y":550,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"part-woodchip-01.img":{"frame":{"x":822,"y":1022,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"pass.img":{"frame":{"x":1200,"y":2045,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"pilgrim-hat.img":{"frame":{"x":2285,"y":258,"w":120,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":120,"h":88},"sourceSize":{"w":128,"h":128}},"pineapple.img":{"frame":{"x":1920,"y":2635,"w":68,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":68,"h":112},"sourceSize":{"w":128,"h":128}},"ping-border.img":{"frame":{"x":398,"y":1538,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"ping-indicator.img":{"frame":{"x":1023,"y":439,"w":88,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":60,"w":88,"h":68},"sourceSize":{"w":128,"h":128}},"ping-map-airdrop.img":{"frame":{"x":2037,"y":1704,"w":74,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":10,"w":74,"h":106},"sourceSize":{"w":128,"h":128}},"ping-map-airstrike.img":{"frame":{"x":166,"y":1706,"w":44,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":13,"w":44,"h":103},"sourceSize":{"w":128,"h":128}},"ping-map-coming.img":{"frame":{"x":1643,"y":2,"w":112,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":128},"sourceSize":{"w":128,"h":256}},"ping-map-danger.img":{"frame":{"x":1284,"y":266,"w":40,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":40,"h":128},"sourceSize":{"w":128,"h":128}},"ping-map-help.img":{"frame":{"x":2552,"y":718,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":502,"h":502},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":502,"h":502},"sourceSize":{"w":512,"h":512}},"ping-map-unlock.img":{"frame":{"x":1063,"y":3876,"w":60,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":25,"w":60,"h":78},"sourceSize":{"w":128,"h":128}},"ping-map-woods-king.img":{"frame":{"x":1572,"y":2889,"w":92,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":22,"w":92,"h":84},"sourceSize":{"w":128,"h":128}},"ping-part-circle-auto-highlight.img":{"frame":{"x":998,"y":2543,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":29,"h":29},"sourceSize":{"w":29,"h":29}},"ping-part-circle-auto-outer.img":{"frame":{"x":373,"y":1110,"w":28,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":28,"h":26},"sourceSize":{"w":28,"h":28}},"ping-part-circle-auto.img":{"frame":{"x":2367,"y":1484,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":28},"sourceSize":{"w":28,"h":28}},"ping-part-circle-highlight.img":{"frame":{"x":894,"y":1664,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-circle.img":{"frame":{"x":373,"y":1140,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-eighth-highlight.img":{"frame":{"x":1865,"y":2635,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-eighth.img":{"frame":{"x":1321,"y":3540,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-quarter-highlight.img":{"frame":{"x":1375,"y":1669,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-part-quarter.img":{"frame":{"x":1024,"y":162,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-team-airdrop.img":{"frame":{"x":1046,"y":2170,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airstrike.img":{"frame":{"x":876,"y":2238,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-coming.img":{"frame":{"x":1330,"y":2118,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-danger.img":{"frame":{"x":1176,"y":2175,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-help.img":{"frame":{"x":1006,"y":2300,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-unlock.img":{"frame":{"x":548,"y":2273,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"player-armor-base-01.img":{"frame":{"x":555,"y":1253,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-base-01.img":{"frame":{"x":1072,"y":1509,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-02.img":{"frame":{"x":1090,"y":1310,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitDC.img":{"frame":{"x":1099,"y":1126,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitHeaven.img":{"frame":{"x":1097,"y":1804,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitLumber.img":{"frame":{"x":1099,"y":1647,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitParmaPrestige.img":{"frame":{"x":1210,"y":1448,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitSpetsnaz.img":{"frame":{"x":1228,"y":1264,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitTurkey.img":{"frame":{"x":1235,"y":1785,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitWheat.img":{"frame":{"x":1237,"y":1586,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-bullet-trail-02.img":{"frame":{"x":1008,"y":1126,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"player-bullet-trail-03.img":{"frame":{"x":1028,"y":926,"w":35,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":35,"h":54},"sourceSize":{"w":36,"h":56}},"player-circle-base-01.img":{"frame":{"x":674,"y":1078,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-circle-base-02.img":{"frame":{"x":666,"y":1771,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-emote.img":{"frame":{"x":2028,"y":2296,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-feet-01.img":{"frame":{"x":777,"y":3125,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-feet-02.img":{"frame":{"x":72,"y":670,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-gui.img":{"frame":{"x":2065,"y":2160,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-hands-01.img":{"frame":{"x":2308,"y":2068,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-hands-02.img":{"frame":{"x":2359,"y":1858,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-helmet-bugler.img":{"frame":{"x":116,"y":2645,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-forest.img":{"frame":{"x":791,"y":842,"w":148,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":176},"sourceSize":{"w":176,"h":176}},"player-helmet-grenadier.img":{"frame":{"x":2,"y":2681,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-01.img":{"frame":{"x":956,"y":1834,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-02.img":{"frame":{"x":958,"y":1664,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-leader.img":{"frame":{"x":798,"y":2368,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-lieutenant.img":{"frame":{"x":897,"y":2368,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-marksman.img":{"frame":{"x":652,"y":2440,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-medic.img":{"frame":{"x":488,"y":2533,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-moon.img":{"frame":{"x":561,"y":1623,"w":117,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":16,"w":117,"h":144},"sourceSize":{"w":176,"h":176}},"player-helmet-potato.img":{"frame":{"x":358,"y":2615,"w":97,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":97,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-recon.img":{"frame":{"x":215,"y":2733,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-king-woods.img":{"frame":{"x":814,"y":1696,"w":140,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":140,"h":134},"sourceSize":{"w":148,"h":148}},"player-map-downed.img":{"frame":{"x":1424,"y":3888,"w":72,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":72,"h":62},"sourceSize":{"w":72,"h":72}},"player-map-inner.img":{"frame":{"x":1888,"y":2178,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-map-outer.img":{"frame":{"x":662,"y":3399,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-mash-01.img":{"frame":{"x":988,"y":218,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-mash-02.img":{"frame":{"x":404,"y":1391,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-mash-03.img":{"frame":{"x":373,"y":1184,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-medic.img":{"frame":{"x":712,"y":3784,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":120,"h":120},"sourceSize":{"w":148,"h":148}},"player-patch-01.img":{"frame":{"x":1681,"y":3129,"w":116,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":71},"sourceSize":{"w":160,"h":160}},"player-patch-02.img":{"frame":{"x":1116,"y":1058,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-blue.img":{"frame":{"x":856,"y":266,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":50,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-red.img":{"frame":{"x":1258,"y":2421,"w":116,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":44,"w":116,"h":72},"sourceSize":{"w":160,"h":160}},"player-ripple-01.img":{"frame":{"x":955,"y":1166,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":140,"h":140},"sourceSize":{"w":142,"h":142}},"player-snow-01.img":{"frame":{"x":218,"y":592,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-snow-02.img":{"frame":{"x":525,"y":1169,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-snow-03.img":{"frame":{"x":499,"y":1091,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-star.img":{"frame":{"x":252,"y":1276,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"player-the-hunted.img":{"frame":{"x":830,"y":1520,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"player-visor-assault.img":{"frame":{"x":2477,"y":1328,"w":102,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":68,"y":36,"w":102,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-demo.img":{"frame":{"x":1626,"y":3843,"w":65,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":39,"w":65,"h":98},"sourceSize":{"w":176,"h":176}},"player-visor-healer.img":{"frame":{"x":2565,"y":1184,"w":63,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":95,"y":36,"w":63,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-scout.img":{"frame":{"x":130,"y":3159,"w":76,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":77,"y":26,"w":76,"h":124},"sourceSize":{"w":176,"h":176}},"player-visor-sniper.img":{"frame":{"x":2262,"y":1404,"w":101,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":34,"w":101,"h":108},"sourceSize":{"w":176,"h":176}},"player-visor-tank.img":{"frame":{"x":2185,"y":1288,"w":71,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":32,"w":71,"h":112},"sourceSize":{"w":176,"h":176}},"player-wading-01.img":{"frame":{"x":232,"y":938,"w":169,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":169,"h":168},"sourceSize":{"w":172,"h":172}},"police.img":{"frame":{"x":258,"y":2863,"w":100,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":2,"w":100,"h":123},"sourceSize":{"w":128,"h":128}},"potato.img":{"frame":{"x":2553,"y":570,"w":100,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":16,"w":100,"h":96},"sourceSize":{"w":128,"h":128}},"proj-bomb-iron-01.img":{"frame":{"x":2,"y":550,"w":66,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":1,"w":66,"h":158},"sourceSize":{"w":160,"h":160}},"proj-frag-nopin-01.img":{"frame":{"x":485,"y":3794,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-02.img":{"frame":{"x":502,"y":3664,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":556,"y":3535,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":485,"y":3919,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-01.img":{"frame":{"x":579,"y":3919,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-02.img":{"frame":{"x":598,"y":3789,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-part.img":{"frame":{"x":561,"y":1771,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"proj-martyrdom-01.img":{"frame":{"x":247,"y":3031,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"proj-mirv-mini-01.img":{"frame":{"x":488,"y":2789,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-mini-02.img":{"frame":{"x":1408,"y":1454,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-nopin-nolever.img":{"frame":{"x":682,"y":1623,"w":76,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":76,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-nopin.img":{"frame":{"x":694,"y":1401,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-pin.img":{"frame":{"x":703,"y":1226,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-potato-01.img":{"frame":{"x":2260,"y":1288,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-potato-02.img":{"frame":{"x":2274,"y":1146,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-smoke-nopin-nolever.img":{"frame":{"x":318,"y":1538,"w":76,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":7,"w":76,"h":146},"sourceSize":{"w":160,"h":160}},"proj-smoke-nopin.img":{"frame":{"x":1068,"y":2,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-smoke-pin.img":{"frame":{"x":2,"y":1817,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-snowball-01.img":{"frame":{"x":2500,"y":946,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-snowball-02.img":{"frame":{"x":2089,"y":2410,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-strobe-armed.img":{"frame":{"x":1235,"y":1923,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-arming.img":{"frame":{"x":666,"y":1919,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-unarmed.img":{"frame":{"x":404,"y":1262,"w":147,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":25,"w":147,"h":125},"sourceSize":{"w":160,"h":160}},"proj-wedge-01.img":{"frame":{"x":159,"y":550,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"pumpkin-play.img":{"frame":{"x":2477,"y":1436,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"pumpkin.img":{"frame":{"x":1776,"y":2136,"w":108,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":108,"h":114},"sourceSize":{"w":128,"h":128}},"question.img":{"frame":{"x":2594,"y":1056,"w":68,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":13,"w":68,"h":102},"sourceSize":{"w":128,"h":128}},"quit.img":{"frame":{"x":987,"y":3629,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":28,"w":68,"h":72},"sourceSize":{"w":128,"h":128}},"rainbow.img":{"frame":{"x":650,"y":3478,"w":119,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":119,"h":120},"sourceSize":{"w":128,"h":128}},"reload.img":{"frame":{"x":92,"y":3657,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"resume.img":{"frame":{"x":694,"y":1549,"w":64,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":31,"w":64,"h":66},"sourceSize":{"w":128,"h":128}},"ribbon-blue.img":{"frame":{"x":2206,"y":2036,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"ribbon-red.img":{"frame":{"x":2257,"y":1884,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"role-assault.img":{"frame":{"x":500,"y":922,"w":130,"h":165},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":165},"sourceSize":{"w":176,"h":176}},"role-demo.img":{"frame":{"x":61,"y":989,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-healer.img":{"frame":{"x":195,"y":1110,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-scout.img":{"frame":{"x":61,"y":1155,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-sniper.img":{"frame":{"x":2,"y":1321,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-tank.img":{"frame":{"x":2,"y":1487,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"salt.img":{"frame":{"x":2,"y":3287,"w":124,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":124,"h":118},"sourceSize":{"w":128,"h":128}},"santa-hat.img":{"frame":{"x":2039,"y":1436,"w":113,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":113,"h":109},"sourceSize":{"w":128,"h":128}},"skull-leader.img":{"frame":{"x":1808,"y":3187,"w":90,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":90,"h":95},"sourceSize":{"w":96,"h":96}},"skull-outlined.img":{"frame":{"x":2382,"y":2004,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"skull-team.img":{"frame":{"x":822,"y":1166,"w":48,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":56},"sourceSize":{"w":64,"h":64}},"skull.img":{"frame":{"x":739,"y":3602,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"sleepy.img":{"frame":{"x":2,"y":3409,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":124,"h":116},"sourceSize":{"w":128,"h":128}},"snowflake.img":{"frame":{"x":2,"y":2291,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"snowman.img":{"frame":{"x":423,"y":3283,"w":96,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":3,"w":96,"h":122},"sourceSize":{"w":128,"h":128}},"star-blue.img":{"frame":{"x":1373,"y":1724,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star-red.img":{"frame":{"x":1375,"y":1539,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star.img":{"frame":{"x":166,"y":1560,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"submit.img":{"frame":{"x":1840,"y":3541,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"surviv.img":{"frame":{"x":376,"y":3668,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"tap.img":{"frame":{"x":1879,"y":2254,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"target.img":{"frame":{"x":1291,"y":2497,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"teabag.img":{"frame":{"x":2402,"y":851,"w":107,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":19,"w":107,"h":91},"sourceSize":{"w":128,"h":128}},"thumbs-up.img":{"frame":{"x":2,"y":3529,"w":104,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":104,"h":124},"sourceSize":{"w":128,"h":128}},"timer-background.img":{"frame":{"x":2289,"y":2144,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"timer.img":{"frame":{"x":2040,"y":908,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"tombstone.img":{"frame":{"x":222,"y":3415,"w":112,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":112,"h":123},"sourceSize":{"w":128,"h":128}},"trash.img":{"frame":{"x":110,"y":3529,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"trunk.img":{"frame":{"x":2516,"y":466,"w":106,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":14,"w":106,"h":100},"sourceSize":{"w":128,"h":128}},"turkey-animal.img":{"frame":{"x":700,"y":2802,"w":120,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":103},"sourceSize":{"w":128,"h":128}},"unlock.img":{"frame":{"x":250,"y":4029,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"whale.img":{"frame":{"x":1128,"y":3998,"w":118,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":118,"h":94},"sourceSize":{"w":128,"h":128}}}}]')
      , xm = JSON.parse('[{"meta":{"image":"main-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-greenhouse-ceiling-01.img":{"frame":{"x":710,"y":3733,"w":401,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":401,"h":314},"sourceSize":{"w":404,"h":316}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":1811,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":3641,"y":2922,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1918,"y":3333,"w":161,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":161,"h":148},"sourceSize":{"w":228,"h":180}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2841,"y":934,"w":931,"h":627},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":931,"h":627},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1662,"y":3871,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":2473,"y":1178,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1462,"y":3399,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1439,"y":3609,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1690,"y":3399,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1462,"y":3089,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3863,"y":2307,"w":228,"h":611},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":228,"h":611},"sourceSize":{"w":228,"h":644}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":838,"y":1811,"w":801,"h":774},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":801,"h":774},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":2456,"w":771,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":771,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":2447,"y":2631,"w":516,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":0,"w":516,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1701,"y":1178,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1058,"y":3089,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":1701,"y":934,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1829,"h":353},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1829,"h":353},"sourceSize":{"w":1830,"h":354}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2447,"y":2433,"w":610,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":610,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1439,"y":3871,"w":219,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":219,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3832,"w":704,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":254},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2447,"y":2177,"w":704,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":322,"w":704,"h":252},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1701,"y":359,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":777,"y":2589,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1835,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":3776,"y":804,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-floor-01.img":{"frame":{"x":2021,"y":2706,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1255,"y":3089,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":2239,"y":3766,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":3641,"y":3198,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1697,"y":2706,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1501,"y":2706,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1058,"y":3333,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1818,"y":3054,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":3341,"y":1565,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2,"y":3088,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3343,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1115,"y":3609,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1643,"y":2046,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1795,"y":3506,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":350,"y":3089,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":359,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3155,"y":2307,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":2473,"y":1565,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":2379,"y":3506,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-complex-warehouse-floor-01.img":{"frame":{"x":2379,"y":2706,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":3061,"y":2433,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2967,"y":2631,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-planter-01.img":{"frame":{"x":1795,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":1943,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-03.img":{"frame":{"x":2091,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-04.img":{"frame":{"x":1462,"y":3499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-05.img":{"frame":{"x":1566,"y":3499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-01.img":{"frame":{"x":1818,"y":3252,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-tree-07sp.img":{"frame":{"x":2119,"y":3506,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08sp.img":{"frame":{"x":3125,"y":2819,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}}}}]')
      , Sm = [{
        meta: {
            image: "potato-0-100.png",
            size: {
                w: 2048,
                h: 2048
            },
            scale: 1
        },
        frames: {
            "map-building-shilo-ceiling-01.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 960,
                    h: 768
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 960,
                    h: 768
                },
                sourceSize: {
                    w: 960,
                    h: 768
                }
            },
            "map-building-shilo-floor-01.img": {
                frame: {
                    x: 966,
                    y: 2,
                    w: 960,
                    h: 768
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 960,
                    h: 768
                },
                sourceSize: {
                    w: 960,
                    h: 768
                }
            },
            "map-potato-01.img": {
                frame: {
                    x: 1930,
                    y: 89,
                    w: 72,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 72,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-potato-02.img": {
                frame: {
                    x: 1930,
                    y: 163,
                    w: 72,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 72,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-potato-03.img": {
                frame: {
                    x: 1930,
                    y: 237,
                    w: 72,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 72,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-potato-res-01.img": {
                frame: {
                    x: 1930,
                    y: 2,
                    w: 85,
                    h: 83
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 29,
                    y: 36,
                    w: 85,
                    h: 83
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            }
        }
    }]
      , km = [{
        meta: {
            image: "savannah-0-100.png",
            size: {
                w: 2048,
                h: 2048
            },
            scale: 1
        },
        frames: {
            "map-brush-01sv.img": {
                frame: {
                    x: 326,
                    y: 1373,
                    w: 186,
                    h: 184
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 4,
                    w: 186,
                    h: 184
                },
                sourceSize: {
                    w: 192,
                    h: 192
                }
            },
            "map-brush-02sv.img": {
                frame: {
                    x: 369,
                    y: 1024,
                    w: 182,
                    h: 184
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 5,
                    y: 4,
                    w: 182,
                    h: 184
                },
                sourceSize: {
                    w: 192,
                    h: 192
                }
            },
            "map-brush-res-02sv.img": {
                frame: {
                    x: 433,
                    y: 1967,
                    w: 62,
                    h: 62
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 17,
                    y: 17,
                    w: 62,
                    h: 62
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-building-perch-ceiling.img": {
                frame: {
                    x: 2,
                    y: 1024,
                    w: 363,
                    h: 345
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 14,
                    y: 23,
                    w: 363,
                    h: 345
                },
                sourceSize: {
                    w: 400,
                    h: 384
                }
            },
            "map-building-perch-floor.img": {
                frame: {
                    x: 578,
                    y: 418,
                    w: 400,
                    h: 320
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 400,
                    h: 320
                },
                sourceSize: {
                    w: 400,
                    h: 320
                }
            },
            "map-bunker-generic-ceiling-02.img": {
                frame: {
                    x: 26,
                    y: 1633,
                    w: 160,
                    h: 230
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 230
                },
                sourceSize: {
                    w: 160,
                    h: 230
                }
            },
            "map-bunker-generic-floor-03.img": {
                frame: {
                    x: 190,
                    y: 1633,
                    w: 160,
                    h: 230
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 230
                },
                sourceSize: {
                    w: 160,
                    h: 230
                }
            },
            "map-bush-01sv.img": {
                frame: {
                    x: 206,
                    y: 1867,
                    w: 140,
                    h: 140
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 140,
                    h: 140
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-bush-res-01sv.img": {
                frame: {
                    x: 206,
                    y: 2011,
                    w: 44,
                    h: 34
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 50,
                    y: 55,
                    w: 44,
                    h: 34
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-complex-warehouse-floor-01.img": {
                frame: {
                    x: 2,
                    y: 794,
                    w: 60,
                    h: 224
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 60,
                    h: 224
                },
                sourceSize: {
                    w: 60,
                    h: 224
                }
            },
            "map-complex-warehouse-floor-02.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 60,
                    h: 528
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 60,
                    h: 528
                },
                sourceSize: {
                    w: 60,
                    h: 528
                }
            },
            "map-complex-warehouse-floor-03.img": {
                frame: {
                    x: 262,
                    y: 1373,
                    w: 60,
                    h: 224
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 60,
                    h: 224
                },
                sourceSize: {
                    w: 60,
                    h: 224
                }
            },
            "map-crate-21.img": {
                frame: {
                    x: 369,
                    y: 1212,
                    w: 144,
                    h: 144
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 144
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-perch-res-01.img": {
                frame: {
                    x: 26,
                    y: 1867,
                    w: 176,
                    h: 158
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 40,
                    y: 49,
                    w: 176,
                    h: 158
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-propane-01.img": {
                frame: {
                    x: 350,
                    y: 1867,
                    w: 96,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 96,
                    h: 96
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-stone-07.img": {
                frame: {
                    x: 66,
                    y: 514,
                    w: 504,
                    h: 506
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 4,
                    y: 3,
                    w: 504,
                    h: 506
                },
                sourceSize: {
                    w: 512,
                    h: 512
                }
            },
            "map-stone-res-07.img": {
                frame: {
                    x: 578,
                    y: 2,
                    w: 410,
                    h: 412
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 5,
                    y: 4,
                    w: 410,
                    h: 412
                },
                sourceSize: {
                    w: 420,
                    h: 420
                }
            },
            "map-tree-03sv.img": {
                frame: {
                    x: 2,
                    y: 1373,
                    w: 256,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 256,
                    h: 256
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-tree-12.img": {
                frame: {
                    x: 66,
                    y: 2,
                    w: 508,
                    h: 508
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 508,
                    h: 508
                },
                sourceSize: {
                    w: 512,
                    h: 512
                }
            },
            "map-tree-res-12.img": {
                frame: {
                    x: 350,
                    y: 1967,
                    w: 79,
                    h: 71
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 8,
                    y: 13,
                    w: 79,
                    h: 71
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-wall-03-grassy-res.img": {
                frame: {
                    x: 2,
                    y: 1889,
                    w: 20,
                    h: 92
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 22,
                    y: 2,
                    w: 20,
                    h: 92
                },
                sourceSize: {
                    w: 64,
                    h: 96
                }
            },
            "map-wall-03-grassy.img": {
                frame: {
                    x: 354,
                    y: 1561,
                    w: 34,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 15,
                    y: 0,
                    w: 34,
                    h: 96
                },
                sourceSize: {
                    w: 64,
                    h: 96
                }
            },
            "map-wall-08-grassy-res.img": {
                frame: {
                    x: 2,
                    y: 1633,
                    w: 20,
                    h: 252
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 22,
                    y: 2,
                    w: 20,
                    h: 252
                },
                sourceSize: {
                    w: 64,
                    h: 256
                }
            },
            "map-wall-08-grassy.img": {
                frame: {
                    x: 2,
                    y: 534,
                    w: 45,
                    h: 256
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 0,
                    w: 45,
                    h: 256
                },
                sourceSize: {
                    w: 64,
                    h: 256
                }
            }
        }
    }]
      , zm = JSON.parse('[{"meta":{"image":"shared-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-barrel-03.img":{"frame":{"x":2182,"y":4056,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-04.img":{"frame":{"x":2275,"y":4056,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-res-03.img":{"frame":{"x":2368,"y":4040,"w":76,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":86,"w":76,"h":52},"sourceSize":{"w":144,"h":144}},"map-bathhouse-pool-01.img":{"frame":{"x":1076,"y":3536,"w":38,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":63},"sourceSize":{"w":38,"h":63}},"map-bookshelf-01.img":{"frame":{"x":506,"y":4014,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bookshelf-02.img":{"frame":{"x":734,"y":4014,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bottle-01.img":{"frame":{"x":1269,"y":3590,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-02.img":{"frame":{"x":1357,"y":3588,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-03.img":{"frame":{"x":1393,"y":3588,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-04.img":{"frame":{"x":2638,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-05.img":{"frame":{"x":2674,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-building-bank-floor-01.img":{"frame":{"x":2118,"y":1224,"w":1696,"h":802},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1696,"h":802},"sourceSize":{"w":1696,"h":802}},"map-building-bank-window-res-01.img":{"frame":{"x":3758,"y":3067,"w":44,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":55,"w":44,"h":43},"sourceSize":{"w":144,"h":144}},"map-building-barn-basement-stairs.img":{"frame":{"x":3758,"y":2579,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":1574,"w":1600,"h":1088},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1600,"h":1088},"sourceSize":{"w":1600,"h":1088}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":1606,"y":2030,"w":1432,"h":1592},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1432,"h":1592},"sourceSize":{"w":1432,"h":1592}},"map-building-boarded-window-01.img":{"frame":{"x":3947,"y":1097,"w":44,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":44,"h":113},"sourceSize":{"w":48,"h":128}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":1770,"y":1942,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":74},"sourceSize":{"w":148,"h":76}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":2666,"w":1442,"h":866},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1442,"h":866},"sourceSize":{"w":1442,"h":866}},"map-building-container-ceiling-01.img":{"frame":{"x":3574,"y":2030,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-floor-01.img":{"frame":{"x":3574,"y":2579,"w":180,"h":531},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":531},"sourceSize":{"w":180,"h":536}},"map-building-container-open-floor.img":{"frame":{"x":3818,"y":1224,"w":180,"h":684},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":180,"h":684},"sourceSize":{"w":180,"h":692}},"map-building-dock-floor-01b.img":{"frame":{"x":3818,"y":1912,"w":162,"h":663},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":162,"h":663},"sourceSize":{"w":162,"h":664}},"map-building-hut-floor-02.img":{"frame":{"x":3947,"y":2,"w":130,"h":767},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":130,"h":767},"sourceSize":{"w":136,"h":768}},"map-building-mansion-floor-01b.img":{"frame":{"x":2118,"y":2,"w":1825,"h":1218},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1825,"h":1218},"sourceSize":{"w":1826,"h":1218}},"map-building-mansion-floor-01d.img":{"frame":{"x":2640,"y":3626,"w":1089,"h":186},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1089,"h":186},"sourceSize":{"w":1090,"h":194}},"map-building-police-ceiling-01.img":{"frame":{"x":3042,"y":3114,"w":1008,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1008,"h":480},"sourceSize":{"w":1008,"h":480}},"map-building-police-ceiling-02.img":{"frame":{"x":3042,"y":2030,"w":528,"h":1080},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":528,"h":1080},"sourceSize":{"w":528,"h":1080}},"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":2112,"h":1568},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":2112,"h":1568},"sourceSize":{"w":2112,"h":1568}},"map-building-porch-01.img":{"frame":{"x":3574,"y":2507,"w":128,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":64},"sourceSize":{"w":128,"h":64}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":1606,"y":1574,"w":496,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":496,"h":192},"sourceSize":{"w":496,"h":192}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":3626,"w":1394,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":42,"w":1394,"h":384},"sourceSize":{"w":1520,"h":432}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":1400,"y":3626,"w":1236,"h":410},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":27,"w":1236,"h":410},"sourceSize":{"w":1304,"h":464}},"map-bunker-conch-floor-01.img":{"frame":{"x":3328,"y":3816,"w":580,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":580,"h":252},"sourceSize":{"w":600,"h":256}},"map-bunker-vent-01.img":{"frame":{"x":401,"y":3536,"w":82,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":82,"h":84},"sourceSize":{"w":84,"h":84}},"map-bunker-vent-02.img":{"frame":{"x":3912,"y":3960,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bush-res-01.img":{"frame":{"x":2582,"y":4040,"w":52,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":48,"w":52,"h":48},"sourceSize":{"w":144,"h":144}},"map-bush-res-02.img":{"frame":{"x":1118,"y":3536,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":45,"w":59,"h":60},"sourceSize":{"w":144,"h":144}},"map-bush-res-04.img":{"frame":{"x":1323,"y":3536,"w":48,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":48,"h":46},"sourceSize":{"w":54,"h":54}},"map-candle-01.img":{"frame":{"x":1269,"y":3536,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":50,"h":50},"sourceSize":{"w":52,"h":52}},"map-club-bar-01.img":{"frame":{"x":3758,"y":2030,"w":54,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":480},"sourceSize":{"w":54,"h":480}},"map-column-01.img":{"frame":{"x":972,"y":3536,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-couch-01.img":{"frame":{"x":3758,"y":2967,"w":288,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":96},"sourceSize":{"w":288,"h":96}},"map-couch-res-01.img":{"frame":{"x":317,"y":3536,"w":80,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":80,"h":86},"sourceSize":{"w":96,"h":96}},"map-crate-mil-01.img":{"frame":{"x":3574,"y":2414,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-decal-club-02.img":{"frame":{"x":3912,"y":3598,"w":100,"h":358},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":100,"h":358},"sourceSize":{"w":104,"h":360}},"map-decal-oil-04.img":{"frame":{"x":2524,"y":4040,"w":54,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":54,"h":48},"sourceSize":{"w":64,"h":64}},"map-decal-oil-05.img":{"frame":{"x":1181,"y":3536,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"map-decal-oil-06.img":{"frame":{"x":122,"y":3536,"w":94,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":21,"w":94,"h":86},"sourceSize":{"w":128,"h":128}},"map-deposit-box-01.img":{"frame":{"x":1158,"y":4014,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-deposit-box-02.img":{"frame":{"x":1606,"y":1942,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-door-01.img":{"frame":{"x":1578,"y":3466,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-drawers-res.img":{"frame":{"x":3706,"y":2514,"w":93,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":93,"h":57},"sourceSize":{"w":96,"h":64}},"map-fire-ext-01.img":{"frame":{"x":575,"y":3536,"w":83,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":83,"h":65},"sourceSize":{"w":84,"h":70}},"map-fire-ext-res.img":{"frame":{"x":1219,"y":3536,"w":46,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":8,"w":46,"h":56},"sourceSize":{"w":84,"h":70}},"map-gun-mount-01.img":{"frame":{"x":1322,"y":4040,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-gun-mount-02.img":{"frame":{"x":1618,"y":4040,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-03.img":{"frame":{"x":1750,"y":4040,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-04.img":{"frame":{"x":1922,"y":1942,"w":128,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":56},"sourceSize":{"w":128,"h":56}},"map-gun-mount-05.img":{"frame":{"x":1470,"y":4040,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-locker-01.img":{"frame":{"x":1882,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-02.img":{"frame":{"x":1982,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-03.img":{"frame":{"x":2082,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-piano-01.img":{"frame":{"x":262,"y":4014,"w":240,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":75},"sourceSize":{"w":240,"h":75}},"map-pipes-01.img":{"frame":{"x":1448,"y":3318,"w":90,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":288},"sourceSize":{"w":90,"h":288}},"map-pipes-03.img":{"frame":{"x":2640,"y":3816,"w":684,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":684,"h":236},"sourceSize":{"w":684,"h":236}},"map-pipes-04.img":{"frame":{"x":1448,"y":2666,"w":88,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":352},"sourceSize":{"w":88,"h":352}},"map-pot-res-01.img":{"frame":{"x":662,"y":3536,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":80,"h":80},"sourceSize":{"w":144,"h":144}},"map-potato-res.img":{"frame":{"x":910,"y":3536,"w":58,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":58,"h":68},"sourceSize":{"w":96,"h":96}},"map-power-box-01.img":{"frame":{"x":834,"y":3536,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-recorder-03.img":{"frame":{"x":2054,"y":1942,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-recorder-04.img":{"frame":{"x":746,"y":3536,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-saloon-bar-01.img":{"frame":{"x":1540,"y":2666,"w":54,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":324},"sourceSize":{"w":54,"h":324}},"map-screen-01.img":{"frame":{"x":2,"y":4040,"w":256,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":48},"sourceSize":{"w":256,"h":48}},"map-screen-res-01.img":{"frame":{"x":2,"y":3536,"w":116,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":116,"h":58},"sourceSize":{"w":124,"h":58}},"map-snow-07.img":{"frame":{"x":1606,"y":1770,"w":496,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":12,"w":496,"h":168},"sourceSize":{"w":512,"h":192}},"map-squash-res-01.img":{"frame":{"x":487,"y":3536,"w":84,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":84,"h":82},"sourceSize":{"w":96,"h":96}},"map-switch-01.img":{"frame":{"x":4020,"y":2502,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-switch-02.img":{"frame":{"x":4020,"y":2540,"w":30,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":32},"sourceSize":{"w":30,"h":34}},"map-switch-03.img":{"frame":{"x":1323,"y":3588,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-towelrack-01.img":{"frame":{"x":962,"y":4014,"w":192,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":192,"h":76},"sourceSize":{"w":192,"h":96}},"map-tree-res-01.img":{"frame":{"x":1375,"y":3536,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-vending-res.img":{"frame":{"x":220,"y":3536,"w":93,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":93,"h":82},"sourceSize":{"w":108,"h":94}},"map-wall-01-rounded.img":{"frame":{"x":2710,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-wall-02-5-rounded.img":{"frame":{"x":798,"y":3536,"w":32,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":80},"sourceSize":{"w":32,"h":80}},"map-wall-02-rounded.img":{"frame":{"x":4002,"y":1841,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-02.img":{"frame":{"x":1040,"y":3536,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-04-cobalt.img":{"frame":{"x":3733,"y":3626,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-04-stone.img":{"frame":{"x":3777,"y":3626,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-05-rounded.img":{"frame":{"x":3821,"y":3626,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-06-rounded.img":{"frame":{"x":4052,"y":3873,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-06.img":{"frame":{"x":3860,"y":3598,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-08-rounded.img":{"frame":{"x":3984,"y":2300,"w":32,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":256},"sourceSize":{"w":32,"h":256}},"map-wall-09-rounded.img":{"frame":{"x":1448,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-09.img":{"frame":{"x":1484,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-10-rounded.img":{"frame":{"x":4002,"y":1517,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-10.img":{"frame":{"x":3947,"y":773,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-11-rounded.img":{"frame":{"x":4016,"y":3598,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-11.img":{"frame":{"x":4002,"y":1161,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-12-rounded.img":{"frame":{"x":4054,"y":3097,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-12.img":{"frame":{"x":4054,"y":3485,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-13-rounded.img":{"frame":{"x":4054,"y":2257,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-13.img":{"frame":{"x":4054,"y":2677,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-14-rounded.img":{"frame":{"x":4054,"y":1353,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-14.img":{"frame":{"x":4054,"y":1805,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-18.img":{"frame":{"x":4054,"y":773,"w":32,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":576},"sourceSize":{"w":32,"h":576}},"map-wall-glass-10.img":{"frame":{"x":1540,"y":2994,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-glass-12-2.img":{"frame":{"x":3984,"y":1912,"w":64,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":384},"sourceSize":{"w":64,"h":384}},"map-wall-glass-12.img":{"frame":{"x":4002,"y":773,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-glass-9.img":{"frame":{"x":1542,"y":3318,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-outhouse-bot.img":{"frame":{"x":2,"y":3598,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":24}},"map-wall-outhouse-side.img":{"frame":{"x":4020,"y":2300,"w":24,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":198},"sourceSize":{"w":24,"h":198}},"map-wall-outhouse-top.img":{"frame":{"x":3652,"y":3598,"w":204,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":204,"h":24},"sourceSize":{"w":204,"h":24}},"map-wall-shack-bot.img":{"frame":{"x":3406,"y":3598,"w":242,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":242,"h":24},"sourceSize":{"w":242,"h":24}},"map-wall-shack-left.img":{"frame":{"x":1578,"y":3240,"w":24,"h":222},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":222},"sourceSize":{"w":24,"h":222}},"map-wall-shack-right.img":{"frame":{"x":1578,"y":2994,"w":24,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":242},"sourceSize":{"w":24,"h":242}},"map-wall-shack-top.img":{"frame":{"x":3042,"y":3598,"w":360,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":24},"sourceSize":{"w":360,"h":24}},"map-woodpile-res-01.img":{"frame":{"x":2448,"y":4040,"w":72,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":22,"w":72,"h":52},"sourceSize":{"w":96,"h":96}}}},{"meta":{"image":"shared-1-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bed-01.img":{"frame":{"x":3954,"y":3558,"w":96,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":216},"sourceSize":{"w":96,"h":216}},"map-bed-res-01.img":{"frame":{"x":3990,"y":3778,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-building-bank-ceiling-02.img":{"frame":{"x":3225,"y":2,"w":556,"h":888},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":50,"w":556,"h":888},"sourceSize":{"w":556,"h":940}},"map-building-bank-floor-02.img":{"frame":{"x":3220,"y":894,"w":864,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":448},"sourceSize":{"w":1088,"h":448}},"map-building-bank-window-01.img":{"frame":{"x":2116,"y":602,"w":56,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":104},"sourceSize":{"w":56,"h":104}},"map-building-barn-ceiling-01.img":{"frame":{"x":2,"y":2622,"w":1200,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1200,"h":624},"sourceSize":{"w":1200,"h":624}},"map-building-barn-ceiling-02.img":{"frame":{"x":1714,"y":2430,"w":416,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":144},"sourceSize":{"w":416,"h":144}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":1304,"h":919},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1304,"h":919},"sourceSize":{"w":1304,"h":920}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":3250,"w":1112,"h":728},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":1112,"h":728},"sourceSize":{"w":1112,"h":729}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":1118,"y":3250,"w":1088,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":1088,"h":544},"sourceSize":{"w":1088,"h":576}},"map-building-bridge-lg-floor.img":{"frame":{"x":2210,"y":2,"w":1011,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1011,"h":704},"sourceSize":{"w":1012,"h":708}},"map-building-bridge-md-floor.img":{"frame":{"x":1310,"y":2,"w":896,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":368},"sourceSize":{"w":896,"h":368}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":3174,"y":1594,"w":912,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":576},"sourceSize":{"w":912,"h":576}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":1626,"w":1216,"h":992},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1216,"h":992},"sourceSize":{"w":1216,"h":992}},"map-building-club-ceiling-01b.img":{"frame":{"x":2922,"y":3298,"w":177,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":242},"sourceSize":{"w":178,"h":242}},"map-building-club-floor-01d.img":{"frame":{"x":1530,"y":3798,"w":322,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":322,"h":193},"sourceSize":{"w":322,"h":194}},"map-building-club-floor-01h.img":{"frame":{"x":1856,"y":3798,"w":321,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":321,"h":289},"sourceSize":{"w":322,"h":290}},"map-building-container-ceiling-02.img":{"frame":{"x":3770,"y":3558,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-house-floor-01.img":{"frame":{"x":1310,"y":710,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-floor-02.img":{"frame":{"x":2210,"y":2430,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-window-01.img":{"frame":{"x":3900,"y":1479,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-house-window-res-01.img":{"frame":{"x":4034,"y":1478,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-mansion-ceiling.img":{"frame":{"x":3174,"y":2174,"w":912,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":912,"h":800},"sourceSize":{"w":1024,"h":864}},"map-building-mansion-cellar-01c.img":{"frame":{"x":3604,"y":1346,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":354,"h":129},"sourceSize":{"w":354,"h":130}},"map-building-mansion-floor-01a.img":{"frame":{"x":1310,"y":374,"w":802,"h":317},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":802,"h":317},"sourceSize":{"w":802,"h":322}},"map-building-panicroom-ceiling.img":{"frame":{"x":3785,"y":2,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-panicroom-floor.img":{"frame":{"x":3785,"y":390,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-saferoom-ceiling.img":{"frame":{"x":2210,"y":3298,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-saferoom-floor.img":{"frame":{"x":2566,"y":3298,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-shack-ceiling-03.img":{"frame":{"x":1118,"y":3798,"w":408,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":0,"w":408,"h":288},"sourceSize":{"w":432,"h":336}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":1206,"y":2622,"w":934,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":934,"h":608},"sourceSize":{"w":960,"h":640}},"map-building-teahouse-floor-01.img":{"frame":{"x":3174,"y":2978,"w":896,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":576},"sourceSize":{"w":896,"h":576}},"map-building-teahouse-floor-02.img":{"frame":{"x":3577,"y":3994,"w":128,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":88},"sourceSize":{"w":128,"h":88}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":2210,"y":3558,"w":832,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":832,"h":432},"sourceSize":{"w":832,"h":432}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":3046,"y":3558,"w":720,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":432},"sourceSize":{"w":720,"h":432}},"map-building-warehouse-floor-01.img":{"frame":{"x":1222,"y":1626,"w":1000,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1000,"h":800},"sourceSize":{"w":1000,"h":800}},"map-building-warehouse-floor-02.img":{"frame":{"x":2226,"y":1594,"w":880,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":880,"h":800},"sourceSize":{"w":880,"h":800}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":3220,"y":1346,"w":380,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":380,"h":180},"sourceSize":{"w":380,"h":180}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":1222,"y":2430,"w":488,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":176},"sourceSize":{"w":488,"h":176}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":2274,"y":710,"w":942,"h":880},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":0,"w":942,"h":880},"sourceSize":{"w":992,"h":880}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":925,"w":1270,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":1270,"h":697},"sourceSize":{"w":1280,"h":704}},"map-case-basement-01.img":{"frame":{"x":2,"y":3982,"w":148,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":112},"sourceSize":{"w":148,"h":112}},"map-case-deagle-01.img":{"frame":{"x":3604,"y":1479,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-deagle-02.img":{"frame":{"x":3752,"y":1479,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-flare-01.img":{"frame":{"x":450,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-hatchet-01.img":{"frame":{"x":594,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-01.img":{"frame":{"x":738,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-02.img":{"frame":{"x":882,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-control-panel-01.img":{"frame":{"x":3785,"y":778,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-02.img":{"frame":{"x":154,"y":3982,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-04.img":{"frame":{"x":3933,"y":778,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-05.img":{"frame":{"x":302,"y":3982,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-06.img":{"frame":{"x":1530,"y":3995,"w":192,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":94},"sourceSize":{"w":192,"h":94}},"map-couch-02.img":{"frame":{"x":2181,"y":3994,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-crate-06.img":{"frame":{"x":3081,"y":3994,"w":164,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":100},"sourceSize":{"w":164,"h":100}},"map-crate-mil-02.img":{"frame":{"x":2377,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-03.img":{"frame":{"x":2553,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-04.img":{"frame":{"x":2729,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-05.img":{"frame":{"x":2905,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-decal-flyer-01.img":{"frame":{"x":1276,"y":1578,"w":36,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":36,"h":44},"sourceSize":{"w":48,"h":48}},"map-door-02.img":{"frame":{"x":2116,"y":374,"w":80,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":224},"sourceSize":{"w":80,"h":224}},"map-door-03.img":{"frame":{"x":1026,"y":3982,"w":32,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":112},"sourceSize":{"w":32,"h":112}},"map-door-04.img":{"frame":{"x":4034,"y":1346,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"map-door-05.img":{"frame":{"x":2181,"y":3798,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-door-slot-01.img":{"frame":{"x":3110,"y":1594,"w":38,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":134},"sourceSize":{"w":38,"h":134}},"map-door-slot-02.img":{"frame":{"x":4054,"y":3558,"w":38,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":136},"sourceSize":{"w":38,"h":136}},"map-drawers-01.img":{"frame":{"x":3249,"y":3994,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-drawers-02.img":{"frame":{"x":3413,"y":3994,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-oven-01.img":{"frame":{"x":1726,"y":3995,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-recorder-01.img":{"frame":{"x":2134,"y":2430,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-saloon-bar-02.img":{"frame":{"x":3110,"y":1996,"w":54,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":92},"sourceSize":{"w":54,"h":92}},"map-toilet-03.img":{"frame":{"x":3103,"y":3298,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-toilet-04.img":{"frame":{"x":3103,"y":3400,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-wall-03-rounded.img":{"frame":{"x":3709,"y":3994,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-03.img":{"frame":{"x":1062,"y":3982,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-04-rounded.img":{"frame":{"x":3110,"y":1732,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-04.img":{"frame":{"x":3110,"y":1864,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-05.img":{"frame":{"x":3954,"y":3778,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-07-rounded.img":{"frame":{"x":3962,"y":1346,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wall-07.img":{"frame":{"x":3998,"y":1346,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wheel-03.img":{"frame":{"x":3770,"y":3942,"w":312,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":149},"sourceSize":{"w":312,"h":156}}}},{"meta":{"image":"shared-2-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-airdrop-01.img":{"frame":{"x":890,"y":3184,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02.img":{"frame":{"x":2047,"y":3924,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-barrel-01.img":{"frame":{"x":3097,"y":150,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-02.img":{"frame":{"x":3153,"y":2,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-res-02.img":{"frame":{"x":2517,"y":3270,"w":130,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":130,"h":127},"sourceSize":{"w":144,"h":144}},"map-bathhouse-column-01.img":{"frame":{"x":2553,"y":2732,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bathrocks-01.img":{"frame":{"x":821,"y":2524,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-bed-02.img":{"frame":{"x":2755,"y":2118,"w":176,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":216},"sourceSize":{"w":176,"h":216}},"map-bed-res-02.img":{"frame":{"x":2624,"y":1888,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-bollard-01.img":{"frame":{"x":2539,"y":3984,"w":112,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":112,"h":108},"sourceSize":{"w":144,"h":144}},"map-building-bank-ceiling-01.img":{"frame":{"x":598,"y":2628,"w":505,"h":552},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":48,"w":505,"h":552},"sourceSize":{"w":506,"h":600}},"map-building-bank-ceiling-03.img":{"frame":{"x":2009,"y":2470,"w":216,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":192,"w":216,"h":360},"sourceSize":{"w":216,"h":552}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":2009,"y":2834,"w":304,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":304,"h":192},"sourceSize":{"w":304,"h":208}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1447,"y":2317,"w":164,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":164,"h":192},"sourceSize":{"w":164,"h":208}},"map-building-barn-basement-floor-01.img":{"frame":{"x":2,"y":1510,"w":663,"h":470},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":663,"h":470},"sourceSize":{"w":664,"h":472}},"map-building-barn-basement-floor-02.img":{"frame":{"x":1675,"y":2,"w":375,"h":470},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":375,"h":470},"sourceSize":{"w":376,"h":472}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":2329,"y":2080,"w":225,"h":290},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":290},"sourceSize":{"w":226,"h":290}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":2,"y":3348,"w":567,"h":343},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":567,"h":343},"sourceSize":{"w":568,"h":344}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":2483,"y":2,"w":258,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":258,"h":193},"sourceSize":{"w":258,"h":194}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":615,"y":1984,"w":536,"h":536},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":536,"h":536},"sourceSize":{"w":536,"h":536}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":2745,"y":2,"w":256,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":224},"sourceSize":{"w":256,"h":224}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":2,"y":3695,"w":512,"h":336},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":336},"sourceSize":{"w":512,"h":336}},"map-building-club-ceiling-01a.img":{"frame":{"x":871,"y":584,"w":737,"h":593},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":737,"h":593},"sourceSize":{"w":738,"h":594}},"map-building-club-ceiling-01c.img":{"frame":{"x":1581,"y":3490,"w":400,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":400,"h":433},"sourceSize":{"w":402,"h":434}},"map-building-club-floor-01a.img":{"frame":{"x":2755,"y":1888,"w":225,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":226},"sourceSize":{"w":226,"h":226}},"map-building-club-floor-01b.img":{"frame":{"x":2659,"y":1062,"w":194,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":193},"sourceSize":{"w":194,"h":194}},"map-building-club-floor-01e.img":{"frame":{"x":1612,"y":584,"w":353,"h":482},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":482},"sourceSize":{"w":354,"h":482}},"map-building-club-floor-01f.img":{"frame":{"x":2370,"y":1656,"w":194,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":130},"sourceSize":{"w":194,"h":130}},"map-building-club-floor-01g.img":{"frame":{"x":871,"y":2,"w":800,"h":578},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":800,"h":578},"sourceSize":{"w":802,"h":578}},"map-building-club-vault-ceiling.img":{"frame":{"x":2834,"y":1441,"w":160,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":176},"sourceSize":{"w":160,"h":176}},"map-building-container-ceiling-03.img":{"frame":{"x":1965,"y":1070,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-05.img":{"frame":{"x":1969,"y":476,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-open-ceiling-01.img":{"frame":{"x":2054,"y":2,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":156,"w":180,"h":380},"sourceSize":{"w":180,"h":692}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1155,"y":2317,"w":288,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":192},"sourceSize":{"w":288,"h":192}},"map-building-dock-floor-01a.img":{"frame":{"x":2211,"y":3924,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":160,"h":160},"sourceSize":{"w":160,"h":162}},"map-building-house-ceiling.img":{"frame":{"x":733,"y":1181,"w":720,"h":648},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":648},"sourceSize":{"w":720,"h":648}},"map-building-hut-ceiling-01.img":{"frame":{"x":1065,"y":3698,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-02.img":{"frame":{"x":1623,"y":2317,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-03.img":{"frame":{"x":1663,"y":1689,"w":379,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":379,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-floor-01.img":{"frame":{"x":1581,"y":3038,"w":448,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":448,"h":448},"sourceSize":{"w":512,"h":512}},"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":865,"h":801},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":865,"h":801},"sourceSize":{"w":866,"h":802}},"map-building-mansion-cellar-01b.img":{"frame":{"x":2528,"y":2374,"w":225,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":230},"sourceSize":{"w":226,"h":230}},"map-building-mansion-floor-01c.img":{"frame":{"x":2624,"y":1656,"w":225,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":228},"sourceSize":{"w":226,"h":228}},"map-building-outhouse-ceiling.img":{"frame":{"x":2477,"y":314,"w":272,"h":225},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":272,"h":225},"sourceSize":{"w":400,"h":316}},"map-building-outhouse-floor.img":{"frame":{"x":2238,"y":2,"w":241,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":80,"y":4,"w":241,"h":308},"sourceSize":{"w":400,"h":316}},"map-building-police-ceiling-03.img":{"frame":{"x":1155,"y":1833,"w":504,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":480},"sourceSize":{"w":504,"h":480}},"map-building-police-floor-02.img":{"frame":{"x":2,"y":1984,"w":609,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":65,"w":609,"h":640},"sourceSize":{"w":610,"h":1570}},"map-building-shack-ceiling-01.img":{"frame":{"x":1663,"y":2086,"w":315,"h":207},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":315,"h":207},"sourceSize":{"w":315,"h":255}},"map-building-shack-ceiling-02.img":{"frame":{"x":2033,"y":3290,"w":240,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":192},"sourceSize":{"w":240,"h":240}},"map-building-shack-floor-01.img":{"frame":{"x":1623,"y":2714,"w":382,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":20,"w":382,"h":320},"sourceSize":{"w":420,"h":340}},"map-building-shack-floor-02.img":{"frame":{"x":2149,"y":860,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-building-shack-floor-03.img":{"frame":{"x":2,"y":2936,"w":568,"h":408},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":568,"h":408},"sourceSize":{"w":576,"h":448}},"map-building-teahouse-res-01.img":{"frame":{"x":2149,"y":1184,"w":282,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":115,"y":152,"w":282,"h":208},"sourceSize":{"w":512,"h":512}},"map-building-vault-ceiling.img":{"frame":{"x":2046,"y":1454,"w":320,"h":337},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":337},"sourceSize":{"w":432,"h":337}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":573,"y":3348,"w":488,"h":560},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":560},"sourceSize":{"w":488,"h":560}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":1985,"y":3490,"w":400,"h":430},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":430},"sourceSize":{"w":400,"h":448}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":2153,"y":386,"w":320,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":304},"sourceSize":{"w":320,"h":304}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":2,"y":807,"w":727,"h":699},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":727,"h":699},"sourceSize":{"w":738,"h":706}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":2677,"y":858,"w":192,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":179},"sourceSize":{"w":194,"h":180}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":2558,"y":2072,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-01.img":{"frame":{"x":2046,"y":1795,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-02.img":{"frame":{"x":2229,"y":2470,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":2,"y":2628,"w":592,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":112,"w":592,"h":304},"sourceSize":{"w":592,"h":416}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":2746,"y":543,"w":192,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-storm-floor-02.img":{"frame":{"x":2005,"y":2086,"w":320,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":380},"sourceSize":{"w":320,"h":384}},"map-bunker-vent-03.img":{"frame":{"x":733,"y":807,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bush-01f.img":{"frame":{"x":2533,"y":2991,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bush-07.img":{"frame":{"x":3090,"y":526,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-bush-07x.img":{"frame":{"x":2533,"y":3125,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-case-chrys-01.img":{"frame":{"x":1399,"y":3038,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-case-flare-res-01.img":{"frame":{"x":2473,"y":1062,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-hatchet-res-01.img":{"frame":{"x":2553,"y":2864,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-ring-01.img":{"frame":{"x":2528,"y":2608,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-chest-03.img":{"frame":{"x":1675,"y":476,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chimney-01.img":{"frame":{"x":2621,"y":3526,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":120,"h":118},"sourceSize":{"w":120,"h":120}},"map-chute-01.img":{"frame":{"x":2317,"y":2755,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-control-panel-03.img":{"frame":{"x":921,"y":2524,"w":96,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":94},"sourceSize":{"w":96,"h":94}},"map-couch-03.img":{"frame":{"x":2659,"y":1259,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-crate-01.img":{"frame":{"x":2998,"y":1441,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02.img":{"frame":{"x":3009,"y":1177,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02sv.img":{"frame":{"x":3011,"y":1008,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03.img":{"frame":{"x":2942,"y":426,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-04.img":{"frame":{"x":1879,"y":3927,"w":164,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":164},"sourceSize":{"w":164,"h":164}},"map-crate-05.img":{"frame":{"x":2389,"y":3744,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":124,"h":124},"sourceSize":{"w":124,"h":124}},"map-crate-07.img":{"frame":{"x":2949,"y":230,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-08.img":{"frame":{"x":3005,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-09.img":{"frame":{"x":2942,"y":574,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-10.img":{"frame":{"x":2873,"y":856,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-11.img":{"frame":{"x":2853,"y":1621,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-14.img":{"frame":{"x":929,"y":1833,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-14a.img":{"frame":{"x":2477,"y":543,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-20.img":{"frame":{"x":2655,"y":3984,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":108},"sourceSize":{"w":108,"h":108}},"map-crate-res-01.img":{"frame":{"x":3025,"y":870,"w":138,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":138,"h":129},"sourceSize":{"w":144,"h":144}},"map-crate-res-03.img":{"frame":{"x":1447,"y":3927,"w":216,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":216,"h":154},"sourceSize":{"w":216,"h":156}},"map-decal-club-01.img":{"frame":{"x":1612,"y":1070,"w":100,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":115,"w":100,"h":106},"sourceSize":{"w":104,"h":360}},"map-decal-initiative.img":{"frame":{"x":2647,"y":3401,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"map-decal-oil-01.img":{"frame":{"x":2637,"y":543,"w":86,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":86,"h":122},"sourceSize":{"w":128,"h":128}},"map-decal-oil-02.img":{"frame":{"x":727,"y":2524,"w":90,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":90,"h":100},"sourceSize":{"w":128,"h":128}},"map-decal-oil-03.img":{"frame":{"x":2329,"y":2374,"w":88,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":18,"w":88,"h":92},"sourceSize":{"w":128,"h":128}},"map-grill-01.img":{"frame":{"x":1819,"y":476,"w":120,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":102},"sourceSize":{"w":128,"h":128}},"map-hedgehog-01.img":{"frame":{"x":2753,"y":230,"w":192,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":192},"sourceSize":{"w":192,"h":192}},"map-hut-res-01.img":{"frame":{"x":2293,"y":3030,"w":236,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":130,"y":136,"w":236,"h":236},"sourceSize":{"w":512,"h":512}},"map-outhouse-res.img":{"frame":{"x":2857,"y":1041,"w":150,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":125,"y":42,"w":150,"h":132},"sourceSize":{"w":400,"h":312}},"map-pipes-02.img":{"frame":{"x":2277,"y":3290,"w":236,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":236,"h":172},"sourceSize":{"w":238,"h":172}},"map-pipes-05.img":{"frame":{"x":1969,"y":860,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":192}},"map-pot-01.img":{"frame":{"x":2585,"y":199,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-02.img":{"frame":{"x":2953,"y":1773,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-03.img":{"frame":{"x":2753,"y":426,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-04.img":{"frame":{"x":3157,"y":1156,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-05.img":{"frame":{"x":3159,"y":1003,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-recorder-02.img":{"frame":{"x":1021,"y":2524,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-refrigerator-01.img":{"frame":{"x":733,"y":1081,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-sandbags-01.img":{"frame":{"x":669,"y":1833,"w":256,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":146},"sourceSize":{"w":256,"h":148}},"map-sandbags-02.img":{"frame":{"x":1447,"y":3698,"w":114,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":114,"h":146},"sourceSize":{"w":148,"h":148}},"map-shack-res-01.img":{"frame":{"x":518,"y":3912,"w":305,"h":181},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":49,"w":305,"h":181},"sourceSize":{"w":420,"h":340}},"map-shack-res-02.img":{"frame":{"x":827,"y":3912,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-shack-res-03.img":{"frame":{"x":2435,"y":1184,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-silo-01.img":{"frame":{"x":1457,"y":1181,"w":504,"h":504},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":504,"h":504},"sourceSize":{"w":512,"h":512}},"map-smoke-res.img":{"frame":{"x":2834,"y":1259,"w":171,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":39,"w":171,"h":178},"sourceSize":{"w":256,"h":256}},"map-squash-01.img":{"frame":{"x":2517,"y":3744,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":124,"h":116},"sourceSize":{"w":144,"h":144}},"map-stairs-broken-01.img":{"frame":{"x":2746,"y":724,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-stand-01.img":{"frame":{"x":2621,"y":3648,"w":80,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":90},"sourceSize":{"w":80,"h":90}},"map-stone-01.img":{"frame":{"x":2389,"y":3466,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-stone-03.img":{"frame":{"x":2345,"y":1795,"w":275,"h":273},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":275,"h":273},"sourceSize":{"w":289,"h":289}},"map-stone-04.img":{"frame":{"x":3025,"y":722,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-05.img":{"frame":{"x":3090,"y":378,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-res-01.img":{"frame":{"x":2651,"y":3259,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02.img":{"frame":{"x":2630,"y":1364,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-04.img":{"frame":{"x":2539,"y":3864,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"map-stone-res-06.img":{"frame":{"x":1107,"y":3038,"w":288,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":128},"sourceSize":{"w":288,"h":128}},"map-stove-01.img":{"frame":{"x":1667,"y":3927,"w":208,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":208,"h":162},"sourceSize":{"w":224,"h":176}},"map-stove-02.img":{"frame":{"x":1716,"y":1070,"w":98,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":98,"h":105},"sourceSize":{"w":112,"h":112}},"map-table-01.img":{"frame":{"x":1457,"y":1689,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02.img":{"frame":{"x":2454,"y":694,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03.img":{"frame":{"x":2375,"y":3924,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-res.img":{"frame":{"x":733,"y":945,"w":131,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":131,"h":132},"sourceSize":{"w":144,"h":144}},"map-toilet-01.img":{"frame":{"x":2910,"y":724,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-02.img":{"frame":{"x":2521,"y":3612,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-res-01.img":{"frame":{"x":2483,"y":199,"w":98,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":98,"h":108},"sourceSize":{"w":128,"h":128}},"map-toilet-res-02.img":{"frame":{"x":2063,"y":860,"w":80,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":17,"w":80,"h":94},"sourceSize":{"w":128,"h":128}},"map-tree-03.img":{"frame":{"x":2370,"y":1396,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-04.img":{"frame":{"x":3009,"y":1325,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-07su.img":{"frame":{"x":2033,"y":3030,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08f.img":{"frame":{"x":1065,"y":3184,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08su.img":{"frame":{"x":1107,"y":2524,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-09.img":{"frame":{"x":3125,"y":1325,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-res-02.img":{"frame":{"x":1818,"y":1070,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-vat-01.img":{"frame":{"x":2389,"y":3612,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":128,"h":128},"sourceSize":{"w":144,"h":144}},"map-vat-02.img":{"frame":{"x":2473,"y":858,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-vat-res.img":{"frame":{"x":2535,"y":3401,"w":108,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":11,"w":108,"h":121},"sourceSize":{"w":144,"h":144}},"map-vending-soda-01.img":{"frame":{"x":615,"y":2524,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-wheel-01.img":{"frame":{"x":574,"y":3184,"w":312,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":156},"sourceSize":{"w":312,"h":156}},"map-wheel-02.img":{"frame":{"x":2153,"y":694,"w":297,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":297,"h":149},"sourceSize":{"w":312,"h":156}},"map-woodpile-01.img":{"frame":{"x":2853,"y":1773,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}}}}]')
      , vm = JSON.parse('[{"meta":{"image":"snow-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-airdrop-01x.img":{"frame":{"x":3889,"y":3182,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02x.img":{"frame":{"x":774,"y":2656,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":3405,"y":870,"w":400,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":624},"sourceSize":{"w":400,"h":624}},"map-building-greenhouse-floor-02.img":{"frame":{"x":2569,"y":870,"w":832,"h":642},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":642},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":774,"y":2380,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":2195,"y":2023,"w":161,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":161,"h":148},"sourceSize":{"w":228,"h":180}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1701,"y":2,"w":931,"h":627},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":931,"h":627},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3953,"y":2830,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":3035,"y":2318,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":3408,"y":746,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2195,"y":2484,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":3035,"y":2176,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":3393,"y":2318,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3809,"y":2,"w":228,"h":611},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":228,"h":611},"sourceSize":{"w":228,"h":644}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":1701,"y":1245,"w":801,"h":774},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":801,"h":774},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1454,"w":771,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":771,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":774,"y":2196,"w":516,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":0,"w":516,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2636,"y":2,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":2955,"y":2690,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":3119,"y":2690,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":2195,"y":2176,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":3749,"y":2318,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1487,"y":1454,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2631,"y":2176,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":3691,"y":3066,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":777,"y":1454,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":3408,"y":2,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3310,"y":1516,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":2631,"y":2452,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":2506,"y":1516,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":3393,"y":2628,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":2086,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1487,"y":2023,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1701,"y":633,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":3283,"y":2902,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bush-01x.img":{"frame":{"x":1632,"y":2535,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2360,"y":2023,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chute-01x.img":{"frame":{"x":3717,"y":2830,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-complex-warehouse-floor-01.img":{"frame":{"x":710,"y":2618,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":710,"y":2086,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2569,"y":633,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-crate-01x.img":{"frame":{"x":166,"y":2730,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-crate-02x.img":{"frame":{"x":1484,"y":2535,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03x.img":{"frame":{"x":477,"y":2730,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-planter-06.img":{"frame":{"x":1294,"y":2196,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-07.img":{"frame":{"x":3283,"y":2690,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-02.img":{"frame":{"x":2551,"y":2484,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-res-03.img":{"frame":{"x":4009,"y":2666,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snow-01.img":{"frame":{"x":3809,"y":1329,"w":212,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":41,"w":212,"h":174},"sourceSize":{"w":256,"h":256}},"map-snow-02.img":{"frame":{"x":1487,"y":1808,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":24,"w":208,"h":208},"sourceSize":{"w":256,"h":256}},"map-snow-03.img":{"frame":{"x":3756,"y":617,"w":312,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":7,"w":312,"h":178},"sourceSize":{"w":360,"h":192}},"map-snow-04.img":{"frame":{"x":3283,"y":2794,"w":100,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":100,"h":98},"sourceSize":{"w":128,"h":128}},"map-snow-05.img":{"frame":{"x":3636,"y":746,"w":90,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":12,"w":90,"h":104},"sourceSize":{"w":128,"h":128}},"map-snow-06.img":{"frame":{"x":3889,"y":3066,"w":178,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":178,"h":112},"sourceSize":{"w":192,"h":128}},"map-snowball-res.img":{"frame":{"x":2955,"y":2452,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":70,"h":70},"sourceSize":{"w":96,"h":96}},"map-stone-01x.img":{"frame":{"x":322,"y":2730,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-stone-03x.img":{"frame":{"x":3809,"y":799,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-stone-res-01x.img":{"frame":{"x":1102,"y":2656,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02x.img":{"frame":{"x":3487,"y":2902,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-table-01x.img":{"frame":{"x":938,"y":2656,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02x.img":{"frame":{"x":3717,"y":2666,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2,"y":2730,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-tree-10.img":{"frame":{"x":1226,"y":2472,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":3809,"y":1075,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}}}}]')
      , Im = JSON.parse('[{"meta":{"image":"woods-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-pavilion-ceiling-01.img":{"frame":{"x":710,"y":2646,"w":623,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":623,"h":608},"sourceSize":{"w":640,"h":640}},"map-building-pavilion-floor-01.img":{"frame":{"x":735,"y":1945,"w":576,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":576,"h":576},"sourceSize":{"w":576,"h":576}},"map-building-pavilion-res-01.img":{"frame":{"x":2107,"y":2510,"w":178,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":167,"y":162,"w":178,"h":188},"sourceSize":{"w":512,"h":512}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":937,"y":3258,"w":320,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":544},"sourceSize":{"w":320,"h":544}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":704,"h":1344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":1344},"sourceSize":{"w":704,"h":1376}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":1777,"y":3509,"w":192,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":256},"sourceSize":{"w":192,"h":256}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":1831,"y":1928,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":2646,"w":704,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":704},"sourceSize":{"w":704,"h":704}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":1261,"y":3772,"w":416,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":304},"sourceSize":{"w":416,"h":304}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":1945,"w":729,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":729,"h":697},"sourceSize":{"w":738,"h":706}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1624,"y":1640,"w":193,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":193,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":1716,"y":2861,"w":226,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":226,"h":368},"sourceSize":{"w":226,"h":385}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":904,"y":1443,"w":512,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":400},"sourceSize":{"w":512,"h":400}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":1315,"y":1847,"w":512,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":496},"sourceSize":{"w":512,"h":496}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":3680,"w":608,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":304},"sourceSize":{"w":608,"h":304}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":710,"y":2,"w":1184,"h":925},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1184,"h":925},"sourceSize":{"w":1184,"h":928}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":1350,"w":898,"h":591},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":898,"h":591},"sourceSize":{"w":898,"h":594}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":3354,"w":672,"h":322},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":672,"h":322},"sourceSize":{"w":690,"h":322}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":678,"y":3354,"w":255,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":255,"h":656},"sourceSize":{"w":258,"h":674}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":1681,"y":3772,"w":382,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":382,"h":210},"sourceSize":{"w":401,"h":210}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":1337,"y":2861,"w":375,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":375,"h":226},"sourceSize":{"w":386,"h":226}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":904,"y":931,"w":732,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":732,"h":508},"sourceSize":{"w":738,"h":514}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":937,"y":3806,"w":194,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":21,"w":194,"h":280},"sourceSize":{"w":194,"h":306}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":1640,"y":931,"w":380,"h":509},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":21,"w":380,"h":509},"sourceSize":{"w":386,"h":530}},"map-bush-01x.img":{"frame":{"x":2057,"y":3112,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bush-06.img":{"frame":{"x":1946,"y":2764,"w":190,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":190,"h":188},"sourceSize":{"w":192,"h":192}},"map-bush-07sp.img":{"frame":{"x":2310,"y":1928,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2,"y":3988,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-crate-01x.img":{"frame":{"x":1946,"y":2956,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-crate-02x.img":{"frame":{"x":2275,"y":2233,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03x.img":{"frame":{"x":2155,"y":2081,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-19.img":{"frame":{"x":2307,"y":2081,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-planter-06.img":{"frame":{"x":710,"y":931,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-07.img":{"frame":{"x":146,"y":3988,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-02.img":{"frame":{"x":1629,"y":3091,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-res-03.img":{"frame":{"x":250,"y":4014,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snowball-res.img":{"frame":{"x":336,"y":4014,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":70,"h":70},"sourceSize":{"w":96,"h":96}},"map-stone-01x.img":{"frame":{"x":2155,"y":1928,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-stone-03x.img":{"frame":{"x":1777,"y":3233,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-stone-res-01x.img":{"frame":{"x":1135,"y":3866,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02x.img":{"frame":{"x":1420,"y":1640,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-table-01x.img":{"frame":{"x":710,"y":1207,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02x.img":{"frame":{"x":1337,"y":3091,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2111,"y":2252,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-tree-05.img":{"frame":{"x":1831,"y":1444,"w":490,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":490,"h":480},"sourceSize":{"w":512,"h":512}},"map-tree-07.img":{"frame":{"x":1973,"y":3509,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-07sp.img":{"frame":{"x":2067,"y":3769,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08.img":{"frame":{"x":1261,"y":3258,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08sp.img":{"frame":{"x":1337,"y":2347,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-10.img":{"frame":{"x":1853,"y":2252,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":1853,"y":2510,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}},"map-tree-switch-01.img":{"frame":{"x":735,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-02.img":{"frame":{"x":851,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-03.img":{"frame":{"x":967,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-04.img":{"frame":{"x":1083,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-woodpile-02.img":{"frame":{"x":1420,"y":1444,"w":384,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":192},"sourceSize":{"w":384,"h":192}},"map-woodpile-res-02.img":{"frame":{"x":1135,"y":3806,"w":121,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":121,"h":56},"sourceSize":{"w":128,"h":64}}}}]')
      , Tm = {
        cobalt: gm,
        desert: fm,
        faction: ym,
        gradient: wm,
        halloween: _m,
        loadout: bm,
        main: xm,
        potato: Sm,
        savannah: km,
        shared: zm,
        snow: vm,
        woods: Im
    }
      , Mm = JSON.parse('[{"meta":{"image":"cobalt-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-ceiling-01.img":{"frame":{"x":750,"y":910,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":910,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":366,"y":1542,"w":305,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":305,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":722,"y":1440,"w":109,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":109,"h":96},"sourceSize":{"w":115,"h":97}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":1659,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":1790,"w":352,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":161,"w":352,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":877,"y":1616,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1407,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":920,"y":2,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":714,"y":1542,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-floor-01.img":{"frame":{"x":942,"y":1230,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":133,"y":1920,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":217,"y":1920,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":722,"y":1284,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":877,"y":1440,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":914,"y":1051,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":359,"y":1034,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1041,"y":1513,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":1034,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":574,"y":910,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1676,"y":2,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":750,"y":1051,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1593,"y":778,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1014,"y":1051,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":358,"y":1659,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":182,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":366,"y":1284,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1593,"y":470,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":359,"y":1174,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1041,"y":1394,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":714,"y":1850,"w":256,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":176},"sourceSize":{"w":256,"h":176}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":853,"y":470,"w":736,"h":577},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":63,"w":736,"h":577},"sourceSize":{"w":832,"h":704}},"map-class-crate-03.img":{"frame":{"x":1088,"y":1614,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":67,"h":67},"sourceSize":{"w":74,"h":74}},"map-class-crate-assault.img":{"frame":{"x":1183,"y":1187,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-demo.img":{"frame":{"x":1255,"y":1110,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-healer.img":{"frame":{"x":1183,"y":1262,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-res-01.img":{"frame":{"x":853,"y":182,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":62,"h":64},"sourceSize":{"w":74,"h":74}},"map-class-crate-scout.img":{"frame":{"x":974,"y":1836,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-sniper.img":{"frame":{"x":1031,"y":1759,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-tank.img":{"frame":{"x":974,"y":1911,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-shell-01a.img":{"frame":{"x":877,"y":1772,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-01b.img":{"frame":{"x":954,"y":1759,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02a.img":{"frame":{"x":1106,"y":1190,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02b.img":{"frame":{"x":1178,"y":1110,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03a.img":{"frame":{"x":1106,"y":1267,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03b.img":{"frame":{"x":1141,"y":1344,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-complex-warehouse-floor-01.img":{"frame":{"x":675,"y":1542,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1997,"y":778,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":301,"y":1920,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-stone-01cb.img":{"frame":{"x":1141,"y":1421,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-03cb.img":{"frame":{"x":945,"y":1616,"w":139,"h":139},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":139,"h":139},"sourceSize":{"w":144,"h":144}},"map-stone-res-01cb.img":{"frame":{"x":974,"y":1986,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02cb.img":{"frame":{"x":463,"y":1174,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-tree-03cb.img":{"frame":{"x":2,"y":1920,"w":127,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":127,"h":126},"sourceSize":{"w":128,"h":128}},"part-class-shell-01a.img":{"frame":{"x":750,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-01b.img":{"frame":{"x":1014,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-02a.img":{"frame":{"x":798,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-02b.img":{"frame":{"x":1044,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-03a.img":{"frame":{"x":846,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-03b.img":{"frame":{"x":1074,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}}}}]')
      , Cm = [{
        meta: {
            image: "desert-0-50.png",
            size: {
                w: 2048,
                h: 2048
            },
            scale: .5
        },
        frames: {
            "map-archway-res-01.img": {
                frame: {
                    x: 1003,
                    y: 646,
                    w: 179,
                    h: 45
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 179,
                    h: 45
                },
                sourceSize: {
                    w: 180,
                    h: 48
                }
            },
            "map-building-archway-ceiling-01.img": {
                frame: {
                    x: 927,
                    y: 438,
                    w: 336,
                    h: 64
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 336,
                    h: 64
                },
                sourceSize: {
                    w: 336,
                    h: 64
                }
            },
            "map-building-greenhouse-ceiling-02.img": {
                frame: {
                    x: 1735,
                    y: 2,
                    w: 200,
                    h: 312
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 200,
                    h: 312
                },
                sourceSize: {
                    w: 200,
                    h: 312
                }
            },
            "map-building-greenhouse-floor-02.img": {
                frame: {
                    x: 1315,
                    y: 2,
                    w: 416,
                    h: 321
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 416,
                    h: 321
                },
                sourceSize: {
                    w: 417,
                    h: 321
                }
            },
            "map-building-saloon-ceiling-01.img": {
                frame: {
                    x: 1719,
                    y: 327,
                    w: 312,
                    h: 312
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 312,
                    h: 312
                },
                sourceSize: {
                    w: 328,
                    h: 328
                }
            },
            "map-building-saloon-ceiling-02.img": {
                frame: {
                    x: 1939,
                    y: 121,
                    w: 96,
                    h: 80
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 96,
                    h: 80
                },
                sourceSize: {
                    w: 96,
                    h: 80
                }
            },
            "map-building-saloon-cellar-01.img": {
                frame: {
                    x: 2,
                    y: 662,
                    w: 528,
                    h: 336
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 528,
                    h: 336
                },
                sourceSize: {
                    w: 528,
                    h: 336
                }
            },
            "map-building-saloon-floor-01.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 656,
                    h: 656
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 656,
                    h: 656
                },
                sourceSize: {
                    w: 656,
                    h: 656
                }
            },
            "map-bunker-chrys-chamber-ceiling-01.img": {
                frame: {
                    x: 924,
                    y: 506,
                    w: 224,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 224,
                    h: 136
                },
                sourceSize: {
                    w: 224,
                    h: 136
                }
            },
            "map-bunker-chrys-chamber-floor-01a.img": {
                frame: {
                    x: 1939,
                    y: 205,
                    w: 80,
                    h: 74
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 17,
                    y: 16,
                    w: 80,
                    h: 74
                },
                sourceSize: {
                    w: 114,
                    h: 90
                }
            },
            "map-bunker-chrys-chamber-floor-01b.img": {
                frame: {
                    x: 534,
                    y: 662,
                    w: 465,
                    h: 313
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 465,
                    h: 313
                },
                sourceSize: {
                    w: 466,
                    h: 314
                }
            },
            "map-bunker-chrys-compartment-ceiling-01a.img": {
                frame: {
                    x: 1631,
                    y: 837,
                    w: 56,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 56,
                    h: 96
                },
                sourceSize: {
                    w: 56,
                    h: 96
                }
            },
            "map-bunker-chrys-compartment-ceiling-01b.img": {
                frame: {
                    x: 1837,
                    y: 918,
                    w: 177,
                    h: 184
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 177,
                    h: 184
                },
                sourceSize: {
                    w: 178,
                    h: 186
                }
            },
            "map-bunker-chrys-compartment-ceiling-02a.img": {
                frame: {
                    x: 662,
                    y: 566,
                    w: 112,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 48
                },
                sourceSize: {
                    w: 112,
                    h: 48
                }
            },
            "map-bunker-chrys-compartment-ceiling-02b.img": {
                frame: {
                    x: 1631,
                    y: 952,
                    w: 176,
                    h: 129
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 176,
                    h: 129
                },
                sourceSize: {
                    w: 178,
                    h: 130
                }
            },
            "map-bunker-chrys-compartment-ceiling-03a.img": {
                frame: {
                    x: 778,
                    y: 566,
                    w: 112,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 48
                },
                sourceSize: {
                    w: 112,
                    h: 48
                }
            },
            "map-bunker-chrys-compartment-ceiling-03b.img": {
                frame: {
                    x: 1392,
                    y: 968,
                    w: 176,
                    h: 153
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 176,
                    h: 153
                },
                sourceSize: {
                    w: 178,
                    h: 154
                }
            },
            "map-bunker-chrys-compartment-floor-01a.img": {
                frame: {
                    x: 1719,
                    y: 643,
                    w: 114,
                    h: 305
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 16,
                    w: 114,
                    h: 305
                },
                sourceSize: {
                    w: 114,
                    h: 322
                }
            },
            "map-bunker-chrys-compartment-floor-01c.img": {
                frame: {
                    x: 1315,
                    y: 327,
                    w: 400,
                    h: 387
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 400,
                    h: 387
                },
                sourceSize: {
                    w: 402,
                    h: 402
                }
            },
            "map-bunker-chrys-compartment-floor-02a.img": {
                frame: {
                    x: 1003,
                    y: 718,
                    w: 385,
                    h: 314
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 385,
                    h: 314
                },
                sourceSize: {
                    w: 386,
                    h: 314
                }
            },
            "map-bunker-chrys-compartment-floor-02c.img": {
                frame: {
                    x: 662,
                    y: 472,
                    w: 258,
                    h: 90
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 8,
                    y: 0,
                    w: 258,
                    h: 90
                },
                sourceSize: {
                    w: 274,
                    h: 90
                }
            },
            "map-bunker-chrys-compartment-floor-03a.img": {
                frame: {
                    x: 927,
                    y: 2,
                    w: 384,
                    h: 432
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 384,
                    h: 432
                },
                sourceSize: {
                    w: 384,
                    h: 432
                }
            },
            "map-bunker-generic-ceiling-02.img": {
                frame: {
                    x: 1631,
                    y: 718,
                    w: 80,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 115
                },
                sourceSize: {
                    w: 80,
                    h: 115
                }
            },
            "map-bunker-generic-floor-03.img": {
                frame: {
                    x: 1939,
                    y: 2,
                    w: 80,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 115
                },
                sourceSize: {
                    w: 80,
                    h: 115
                }
            },
            "map-bunker-statue-chamber-floor-01.img": {
                frame: {
                    x: 1837,
                    y: 643,
                    w: 126,
                    h: 271
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 16,
                    w: 126,
                    h: 271
                },
                sourceSize: {
                    w: 128,
                    h: 288
                }
            },
            "map-bush-05.img": {
                frame: {
                    x: 534,
                    y: 979,
                    w: 70,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 70,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-bush-res-05.img": {
                frame: {
                    x: 2018,
                    y: 871,
                    w: 28,
                    h: 25
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 22,
                    y: 23,
                    w: 28,
                    h: 25
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-case-meteor-01.img": {
                frame: {
                    x: 608,
                    y: 979,
                    w: 70,
                    h: 51
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 70,
                    h: 51
                },
                sourceSize: {
                    w: 70,
                    h: 51
                }
            },
            "map-case-meteor-res-01.img": {
                frame: {
                    x: 756,
                    y: 979,
                    w: 64,
                    h: 57
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 6,
                    y: 5,
                    w: 64,
                    h: 57
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-chest-03d.img": {
                frame: {
                    x: 682,
                    y: 979,
                    w: 70,
                    h: 51
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 70,
                    h: 51
                },
                sourceSize: {
                    w: 70,
                    h: 51
                }
            },
            "map-complex-warehouse-floor-05.img": {
                frame: {
                    x: 662,
                    y: 2,
                    w: 261,
                    h: 466
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 504,
                    w: 261,
                    h: 466
                },
                sourceSize: {
                    w: 648,
                    h: 1024
                }
            },
            "map-crate-02f.img": {
                frame: {
                    x: 1967,
                    y: 643,
                    w: 72,
                    h: 72
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 72
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-crate-18.img": {
                frame: {
                    x: 1967,
                    y: 719,
                    w: 72,
                    h: 72
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 72
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-crate-22.img": {
                frame: {
                    x: 1967,
                    y: 795,
                    w: 72,
                    h: 72
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 72
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-planter-06.img": {
                frame: {
                    x: 1186,
                    y: 574,
                    w: 72,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 136
                },
                sourceSize: {
                    w: 72,
                    h: 136
                }
            },
            "map-planter-07.img": {
                frame: {
                    x: 1572,
                    y: 968,
                    w: 50,
                    h: 50
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 50,
                    h: 50
                },
                sourceSize: {
                    w: 50,
                    h: 50
                }
            },
            "map-planter-res-02.img": {
                frame: {
                    x: 2e3,
                    y: 1246,
                    w: 38,
                    h: 67
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 0,
                    w: 38,
                    h: 67
                },
                sourceSize: {
                    w: 43,
                    h: 68
                }
            },
            "map-planter-res-03.img": {
                frame: {
                    x: 1267,
                    y: 438,
                    w: 41,
                    h: 37
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 3,
                    w: 41,
                    h: 37
                },
                sourceSize: {
                    w: 43,
                    h: 43
                }
            },
            "map-statue-03.img": {
                frame: {
                    x: 1572,
                    y: 1085,
                    w: 144,
                    h: 141
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 33,
                    y: 33,
                    w: 144,
                    h: 141
                },
                sourceSize: {
                    w: 208,
                    h: 208
                }
            },
            "map-statue-04.img": {
                frame: {
                    x: 1720,
                    y: 1106,
                    w: 144,
                    h: 141
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 33,
                    y: 33,
                    w: 144,
                    h: 141
                },
                sourceSize: {
                    w: 208,
                    h: 208
                }
            },
            "map-stone-03b.img": {
                frame: {
                    x: 1868,
                    y: 1106,
                    w: 138,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 4,
                    w: 138,
                    h: 136
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-stone-06.img": {
                frame: {
                    x: 1152,
                    y: 506,
                    w: 144,
                    h: 64
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 144,
                    h: 64
                },
                sourceSize: {
                    w: 144,
                    h: 64
                }
            },
            "map-stone-res-01b.img": {
                frame: {
                    x: 608,
                    y: 1034,
                    w: 59,
                    h: 59
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 59,
                    h: 59
                },
                sourceSize: {
                    w: 60,
                    h: 60
                }
            },
            "map-tree-05c.img": {
                frame: {
                    x: 1392,
                    y: 718,
                    w: 235,
                    h: 246
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 10,
                    y: 5,
                    w: 235,
                    h: 246
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-tree-06.img": {
                frame: {
                    x: 1868,
                    y: 1246,
                    w: 128,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 128,
                    h: 128
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            }
        }
    }]
      , Pm = [{
        meta: {
            image: "faction-0-50.png",
            size: {
                w: 2048,
                h: 2048
            },
            scale: .5
        },
        frames: {
            "map-airdrop-03.img": {
                frame: {
                    x: 1890,
                    y: 741,
                    w: 128,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 128,
                    h: 128
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-airdrop-04.img": {
                frame: {
                    x: 1890,
                    y: 873,
                    w: 128,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 128,
                    h: 128
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-building-bridge-xlg-floor.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 1232,
                    h: 480
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 1232,
                    h: 480
                },
                sourceSize: {
                    w: 1232,
                    h: 480
                }
            },
            "map-building-greenhouse-ceiling-01.img": {
                frame: {
                    x: 860,
                    y: 1017,
                    w: 200,
                    h: 157
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 200,
                    h: 157
                },
                sourceSize: {
                    w: 202,
                    h: 158
                }
            },
            "map-building-greenhouse-floor-01.img": {
                frame: {
                    x: 390,
                    y: 486,
                    w: 416,
                    h: 320
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 416,
                    h: 320
                },
                sourceSize: {
                    w: 417,
                    h: 321
                }
            },
            "map-bunker-chrys-chamber-ceiling-01.img": {
                frame: {
                    x: 860,
                    y: 877,
                    w: 224,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 224,
                    h: 136
                },
                sourceSize: {
                    w: 224,
                    h: 136
                }
            },
            "map-bunker-chrys-chamber-floor-01a.img": {
                frame: {
                    x: 380,
                    y: 950,
                    w: 80,
                    h: 74
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 17,
                    y: 16,
                    w: 80,
                    h: 74
                },
                sourceSize: {
                    w: 114,
                    h: 90
                }
            },
            "map-bunker-chrys-chamber-floor-01b.img": {
                frame: {
                    x: 2,
                    y: 1030,
                    w: 465,
                    h: 313
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 465,
                    h: 313
                },
                sourceSize: {
                    w: 466,
                    h: 314
                }
            },
            "map-bunker-chrys-compartment-ceiling-01a.img": {
                frame: {
                    x: 106,
                    y: 1944,
                    w: 56,
                    h: 96
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 56,
                    h: 96
                },
                sourceSize: {
                    w: 56,
                    h: 96
                }
            },
            "map-bunker-chrys-compartment-ceiling-01b.img": {
                frame: {
                    x: 2,
                    y: 1347,
                    w: 177,
                    h: 184
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 177,
                    h: 184
                },
                sourceSize: {
                    w: 178,
                    h: 186
                }
            },
            "map-bunker-chrys-compartment-ceiling-02a.img": {
                frame: {
                    x: 264,
                    y: 922,
                    w: 112,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 48
                },
                sourceSize: {
                    w: 112,
                    h: 48
                }
            },
            "map-bunker-chrys-compartment-ceiling-02b.img": {
                frame: {
                    x: 2,
                    y: 1535,
                    w: 176,
                    h: 129
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 176,
                    h: 129
                },
                sourceSize: {
                    w: 178,
                    h: 130
                }
            },
            "map-bunker-chrys-compartment-ceiling-03a.img": {
                frame: {
                    x: 264,
                    y: 974,
                    w: 112,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 112,
                    h: 48
                },
                sourceSize: {
                    w: 112,
                    h: 48
                }
            },
            "map-bunker-chrys-compartment-ceiling-03b.img": {
                frame: {
                    x: 2,
                    y: 1668,
                    w: 176,
                    h: 153
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 176,
                    h: 153
                },
                sourceSize: {
                    w: 178,
                    h: 154
                }
            },
            "map-bunker-chrys-compartment-floor-01a.img": {
                frame: {
                    x: 1890,
                    y: 2,
                    w: 114,
                    h: 305
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 16,
                    w: 114,
                    h: 305
                },
                sourceSize: {
                    w: 114,
                    h: 322
                }
            },
            "map-bunker-chrys-compartment-floor-01b.img": {
                frame: {
                    x: 810,
                    y: 486,
                    w: 400,
                    h: 387
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 400,
                    h: 387
                },
                sourceSize: {
                    w: 402,
                    h: 402
                }
            },
            "map-bunker-chrys-compartment-floor-02a.img": {
                frame: {
                    x: 471,
                    y: 877,
                    w: 385,
                    h: 314
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 385,
                    h: 314
                },
                sourceSize: {
                    w: 386,
                    h: 314
                }
            },
            "map-bunker-chrys-compartment-floor-02b.img": {
                frame: {
                    x: 2,
                    y: 922,
                    w: 258,
                    h: 90
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 8,
                    y: 0,
                    w: 258,
                    h: 90
                },
                sourceSize: {
                    w: 274,
                    h: 90
                }
            },
            "map-bunker-chrys-compartment-floor-03a.img": {
                frame: {
                    x: 2,
                    y: 486,
                    w: 384,
                    h: 432
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 384,
                    h: 432
                },
                sourceSize: {
                    w: 384,
                    h: 432
                }
            },
            "map-bunker-generic-ceiling-02.img": {
                frame: {
                    x: 2,
                    y: 1825,
                    w: 80,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 115
                },
                sourceSize: {
                    w: 80,
                    h: 115
                }
            },
            "map-bunker-generic-floor-03.img": {
                frame: {
                    x: 86,
                    y: 1825,
                    w: 80,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 115
                },
                sourceSize: {
                    w: 80,
                    h: 115
                }
            },
            "map-chest-03f.img": {
                frame: {
                    x: 466,
                    y: 810,
                    w: 70,
                    h: 51
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 70,
                    h: 51
                },
                sourceSize: {
                    w: 70,
                    h: 51
                }
            },
            "map-complex-warehouse-floor-01.img": {
                frame: {
                    x: 2014,
                    y: 1005,
                    w: 30,
                    h: 112
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 30,
                    h: 112
                },
                sourceSize: {
                    w: 30,
                    h: 112
                }
            },
            "map-complex-warehouse-floor-02.img": {
                frame: {
                    x: 2008,
                    y: 2,
                    w: 30,
                    h: 264
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 30,
                    h: 264
                },
                sourceSize: {
                    w: 30,
                    h: 264
                }
            },
            "map-complex-warehouse-floor-03.img": {
                frame: {
                    x: 2014,
                    y: 1121,
                    w: 30,
                    h: 112
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 30,
                    h: 112
                },
                sourceSize: {
                    w: 30,
                    h: 112
                }
            },
            "map-complex-warehouse-floor-04.img": {
                frame: {
                    x: 1238,
                    y: 2,
                    w: 648,
                    h: 1024
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 648,
                    h: 1024
                },
                sourceSize: {
                    w: 648,
                    h: 1024
                }
            },
            "map-crate-02f.img": {
                frame: {
                    x: 166,
                    y: 1944,
                    w: 72,
                    h: 72
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 72
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-crate-12.img": {
                frame: {
                    x: 1890,
                    y: 1005,
                    w: 120,
                    h: 120
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 120,
                    h: 120
                },
                sourceSize: {
                    w: 120,
                    h: 120
                }
            },
            "map-crate-13.img": {
                frame: {
                    x: 1064,
                    y: 1022,
                    w: 120,
                    h: 120
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 120,
                    h: 120
                },
                sourceSize: {
                    w: 120,
                    h: 120
                }
            },
            "map-crate-22.img": {
                frame: {
                    x: 170,
                    y: 1825,
                    w: 72,
                    h: 72
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 72
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-planter-01.img": {
                frame: {
                    x: 390,
                    y: 810,
                    w: 72,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 136
                },
                sourceSize: {
                    w: 72,
                    h: 136
                }
            },
            "map-planter-02.img": {
                frame: {
                    x: 1890,
                    y: 601,
                    w: 72,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 136
                },
                sourceSize: {
                    w: 72,
                    h: 136
                }
            },
            "map-planter-03.img": {
                frame: {
                    x: 1966,
                    y: 601,
                    w: 72,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 136
                },
                sourceSize: {
                    w: 72,
                    h: 136
                }
            },
            "map-planter-04.img": {
                frame: {
                    x: 540,
                    y: 810,
                    w: 50,
                    h: 50
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 50,
                    h: 50
                },
                sourceSize: {
                    w: 50,
                    h: 50
                }
            },
            "map-planter-05.img": {
                frame: {
                    x: 594,
                    y: 810,
                    w: 50,
                    h: 50
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 50,
                    h: 50
                },
                sourceSize: {
                    w: 50,
                    h: 50
                }
            },
            "map-planter-res-01.img": {
                frame: {
                    x: 1188,
                    y: 1022,
                    w: 38,
                    h: 67
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 0,
                    w: 38,
                    h: 67
                },
                sourceSize: {
                    w: 43,
                    h: 68
                }
            },
            "map-statue-01.img": {
                frame: {
                    x: 1088,
                    y: 877,
                    w: 141,
                    h: 141
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 33,
                    y: 33,
                    w: 141,
                    h: 141
                },
                sourceSize: {
                    w: 208,
                    h: 208
                }
            },
            "map-statue-top-01.img": {
                frame: {
                    x: 1890,
                    y: 311,
                    w: 139,
                    h: 71
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 65,
                    y: 66,
                    w: 139,
                    h: 71
                },
                sourceSize: {
                    w: 208,
                    h: 208
                }
            },
            "map-statue-top-02.img": {
                frame: {
                    x: 1890,
                    y: 386,
                    w: 139,
                    h: 71
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 65,
                    y: 66,
                    w: 139,
                    h: 71
                },
                sourceSize: {
                    w: 208,
                    h: 208
                }
            },
            "map-stone-03f.img": {
                frame: {
                    x: 1890,
                    y: 461,
                    w: 138,
                    h: 136
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 4,
                    w: 138,
                    h: 136
                },
                sourceSize: {
                    w: 144,
                    h: 144
                }
            },
            "map-stone-res-02f.img": {
                frame: {
                    x: 2,
                    y: 1944,
                    w: 100,
                    h: 100
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 100,
                    h: 100
                },
                sourceSize: {
                    w: 100,
                    h: 100
                }
            }
        }
    }]
      , Am = [{
        meta: {
            image: "gradient-0-50.png",
            size: {
                w: 512,
                h: 512
            },
            scale: .5
        },
        frames: {
            "map-barrel-res-01.img": {
                frame: {
                    x: 2,
                    y: 135,
                    w: 113,
                    h: 109
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 7,
                    y: 10,
                    w: 113,
                    h: 109
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-building-club-gradient-01.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 117,
                    h: 129
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 16,
                    y: 4,
                    w: 117,
                    h: 129
                },
                sourceSize: {
                    w: 146,
                    h: 140
                }
            },
            "map-building-mansion-gradient-01.img": {
                frame: {
                    x: 123,
                    y: 2,
                    w: 117,
                    h: 102
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 4,
                    w: 117,
                    h: 102
                },
                sourceSize: {
                    w: 124,
                    h: 110
                }
            },
            "map-bush-01.img": {
                frame: {
                    x: 123,
                    y: 239,
                    w: 63,
                    h: 65
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 4,
                    y: 3,
                    w: 63,
                    h: 65
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-bush-01cb.img": {
                frame: {
                    x: 48,
                    y: 248,
                    w: 71,
                    h: 71
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 71,
                    h: 71
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-bush-03.img": {
                frame: {
                    x: 2,
                    y: 337,
                    w: 74,
                    h: 76
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 74,
                    h: 76
                },
                sourceSize: {
                    w: 76,
                    h: 76
                }
            },
            "map-bush-04.img": {
                frame: {
                    x: 76,
                    y: 417,
                    w: 68,
                    h: 65
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 4,
                    w: 68,
                    h: 65
                },
                sourceSize: {
                    w: 75,
                    h: 75
                }
            },
            "map-bush-04cb.img": {
                frame: {
                    x: 80,
                    y: 323,
                    w: 68,
                    h: 65
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 5,
                    w: 68,
                    h: 65
                },
                sourceSize: {
                    w: 75,
                    h: 75
                }
            },
            "map-light-01.img": {
                frame: {
                    x: 2,
                    y: 417,
                    w: 70,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 70,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-plane-01.img": {
                frame: {
                    x: 119,
                    y: 135,
                    w: 90,
                    h: 100
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 19,
                    y: 5,
                    w: 90,
                    h: 100
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-plane-02.img": {
                frame: {
                    x: 2,
                    y: 248,
                    w: 42,
                    h: 85
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 43,
                    y: 1,
                    w: 42,
                    h: 85
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            }
        }
    }]
      , Dm = [{
        meta: {
            image: "halloween-0-50.png",
            size: {
                w: 1024,
                h: 1024
            },
            scale: .5
        },
        frames: {
            "map-airdrop-01h.img": {
                frame: {
                    x: 358,
                    y: 505,
                    w: 80,
                    h: 80
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 80
                },
                sourceSize: {
                    w: 80,
                    h: 80
                }
            },
            "map-airdrop-02h.img": {
                frame: {
                    x: 358,
                    y: 589,
                    w: 80,
                    h: 80
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 80
                },
                sourceSize: {
                    w: 80,
                    h: 80
                }
            },
            "map-bunker-eye-chamber-ceiling-01.img": {
                frame: {
                    x: 2,
                    y: 678,
                    w: 160,
                    h: 272
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 272
                },
                sourceSize: {
                    w: 160,
                    h: 272
                }
            },
            "map-bunker-eye-chamber-floor-01a.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 352,
                    h: 672
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 16,
                    w: 352,
                    h: 672
                },
                sourceSize: {
                    w: 352,
                    h: 688
                }
            },
            "map-bunker-eye-chamber-floor-01b.img": {
                frame: {
                    x: 166,
                    y: 842,
                    w: 96,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 96,
                    h: 128
                },
                sourceSize: {
                    w: 96,
                    h: 128
                }
            },
            "map-bunker-eye-compartment-ceiling-01.img": {
                frame: {
                    x: 166,
                    y: 678,
                    w: 160,
                    h: 160
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 160,
                    h: 160
                },
                sourceSize: {
                    w: 160,
                    h: 160
                }
            },
            "map-bunker-eye-compartment-floor-01.img": {
                frame: {
                    x: 358,
                    y: 2,
                    w: 352,
                    h: 352
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 352,
                    h: 352
                },
                sourceSize: {
                    w: 352,
                    h: 352
                }
            },
            "map-bush-06.img": {
                frame: {
                    x: 330,
                    y: 678,
                    w: 95,
                    h: 94
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 1,
                    w: 95,
                    h: 94
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-bush-07sp.img": {
                frame: {
                    x: 515,
                    y: 358,
                    w: 67,
                    h: 71
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 3,
                    y: 0,
                    w: 67,
                    h: 71
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-bush-res-06.img": {
                frame: {
                    x: 974,
                    y: 95,
                    w: 25,
                    h: 24
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 23,
                    y: 24,
                    w: 25,
                    h: 24
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-crate-11h.img": {
                frame: {
                    x: 438,
                    y: 358,
                    w: 73,
                    h: 73
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 73,
                    h: 73
                },
                sourceSize: {
                    w: 74,
                    h: 74
                }
            },
            "map-pumpkin-01.img": {
                frame: {
                    x: 586,
                    y: 358,
                    w: 70,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 70,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-pumpkin-02.img": {
                frame: {
                    x: 586,
                    y: 432,
                    w: 70,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 70,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-pumpkin-03.img": {
                frame: {
                    x: 2,
                    y: 974,
                    w: 47,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 11,
                    y: 12,
                    w: 47,
                    h: 48
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-pumpkin-res-01.img": {
                frame: {
                    x: 438,
                    y: 435,
                    w: 67,
                    h: 66
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 4,
                    w: 67,
                    h: 66
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-pumpkin-res-03.img": {
                frame: {
                    x: 974,
                    y: 50,
                    w: 43,
                    h: 41
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 4,
                    w: 43,
                    h: 41
                },
                sourceSize: {
                    w: 48,
                    h: 48
                }
            },
            "map-tree-04h.img": {
                frame: {
                    x: 963,
                    y: 261,
                    w: 56,
                    h: 56
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 56,
                    h: 56
                },
                sourceSize: {
                    w: 56,
                    h: 56
                }
            },
            "map-tree-05.img": {
                frame: {
                    x: 714,
                    y: 261,
                    w: 245,
                    h: 240
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 5,
                    y: 8,
                    w: 245,
                    h: 240
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-tree-07.img": {
                frame: {
                    x: 266,
                    y: 842,
                    w: 128,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 128,
                    h: 128
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-tree-08.img": {
                frame: {
                    x: 714,
                    y: 2,
                    w: 256,
                    h: 255
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 256,
                    h: 255
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-web-01.img": {
                frame: {
                    x: 358,
                    y: 358,
                    w: 76,
                    h: 79
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 76,
                    h: 79
                },
                sourceSize: {
                    w: 76,
                    h: 80
                }
            },
            "part-airdrop-01h.img": {
                frame: {
                    x: 974,
                    y: 2,
                    w: 44,
                    h: 44
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 44,
                    h: 44
                },
                sourceSize: {
                    w: 48,
                    h: 48
                }
            },
            "part-airdrop-02h.img": {
                frame: {
                    x: 53,
                    y: 974,
                    w: 40,
                    h: 40
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 40,
                    h: 40
                },
                sourceSize: {
                    w: 40,
                    h: 40
                }
            }
        }
    }]
      , Om = JSON.parse('[{"meta":{"image":"loadout-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"acorn.img":{"frame":{"x":657,"y":1796,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-12gauge.img":{"frame":{"x":943,"y":1143,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-308sub.img":{"frame":{"x":989,"y":1082,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-45acp.img":{"frame":{"x":985,"y":1203,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-50AE.img":{"frame":{"x":1003,"y":1142,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-556mm.img":{"frame":{"x":991,"y":1263,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-762mm.img":{"frame":{"x":1045,"y":1202,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-9mm.img":{"frame":{"x":1037,"y":1323,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-box.img":{"frame":{"x":1051,"y":1262,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-flare.img":{"frame":{"x":952,"y":1764,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"audio-off.img":{"frame":{"x":966,"y":2004,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"audio-on.img":{"frame":{"x":1016,"y":2004,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"baguette.img":{"frame":{"x":1347,"y":1938,"w":49,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":49,"h":49},"sourceSize":{"w":64,"h":64}},"bugle-final-blue.img":{"frame":{"x":869,"y":1285,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-final-red.img":{"frame":{"x":887,"y":1191,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-blue.img":{"frame":{"x":657,"y":1858,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-red.img":{"frame":{"x":703,"y":1673,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bullets.img":{"frame":{"x":68,"y":1602,"w":43,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":43,"h":62},"sourceSize":{"w":64,"h":64}},"campfire.img":{"frame":{"x":2,"y":1367,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"candy-corn.img":{"frame":{"x":133,"y":1668,"w":52,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":61},"sourceSize":{"w":64,"h":64}},"cattle.img":{"frame":{"x":534,"y":1626,"w":59,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":56},"sourceSize":{"w":64,"h":64}},"checked.img":{"frame":{"x":1041,"y":899,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"chick.img":{"frame":{"x":955,"y":1700,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"chicken-dinner.img":{"frame":{"x":529,"y":745,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"chicken.img":{"frame":{"x":258,"y":1403,"w":53,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":53,"h":41},"sourceSize":{"w":64,"h":64}},"close.img":{"frame":{"x":1001,"y":979,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"cobalt.img":{"frame":{"x":486,"y":1087,"w":21,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":21,"h":21},"sourceSize":{"w":24,"h":24}},"coconut.img":{"frame":{"x":136,"y":1214,"w":55,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":9,"w":55,"h":45},"sourceSize":{"w":64,"h":64}},"cog.img":{"frame":{"x":865,"y":1022,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"copy.img":{"frame":{"x":1376,"y":1886,"w":44,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":44,"h":48},"sourceSize":{"w":64,"h":64}},"crab.img":{"frame":{"x":1341,"y":1771,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":50},"sourceSize":{"w":64,"h":64}},"crosshair.img":{"frame":{"x":1383,"y":1991,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"crown.img":{"frame":{"x":490,"y":427,"w":27,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":27,"h":23},"sourceSize":{"w":32,"h":32}},"cupcake.img":{"frame":{"x":181,"y":1602,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"danger.img":{"frame":{"x":593,"y":1556,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"dc.img":{"frame":{"x":133,"y":1733,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"donut.img":{"frame":{"x":329,"y":1274,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"dot.img":{"frame":{"x":457,"y":856,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":16,"h":16},"sourceSize":{"w":18,"h":18}},"down.img":{"frame":{"x":1076,"y":649,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"egg.img":{"frame":{"x":336,"y":1468,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"eggplant.img":{"frame":{"x":1131,"y":1871,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"emote-circle-outer.img":{"frame":{"x":2,"y":257,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"emote-medical-healthkit.img":{"frame":{"x":502,"y":1890,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"emote.img":{"frame":{"x":239,"y":1578,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"eye.img":{"frame":{"x":242,"y":1019,"w":64,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":64,"h":41},"sourceSize":{"w":64,"h":64}},"face-alien.img":{"frame":{"x":1159,"y":203,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-angel-treat.img":{"frame":{"x":668,"y":287,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-angry.img":{"frame":{"x":1173,"y":136,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-bandaged.img":{"frame":{"x":1186,"y":2,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-dab.img":{"frame":{"x":242,"y":966,"w":72,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":72,"h":49},"sourceSize":{"w":72,"h":72}},"face-disappoint.img":{"frame":{"x":1186,"y":68,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-happy.img":{"frame":{"x":2,"y":1433,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-headshot.img":{"frame":{"x":263,"y":324,"w":63,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":63,"h":44},"sourceSize":{"w":64,"h":64}},"face-heart.img":{"frame":{"x":2,"y":1499,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-imp-trick.img":{"frame":{"x":206,"y":1132,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-imp.img":{"frame":{"x":1101,"y":475,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":62},"sourceSize":{"w":64,"h":64}},"face-joy.img":{"frame":{"x":2,"y":1565,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-monocle.img":{"frame":{"x":2,"y":1631,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-picasso.img":{"frame":{"x":2,"y":1697,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"face-poo.img":{"frame":{"x":1110,"y":407,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"face-sad.img":{"frame":{"x":2,"y":1763,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sob.img":{"frame":{"x":67,"y":1697,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sunglass.img":{"frame":{"x":2,"y":1829,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-thinking.img":{"frame":{"x":129,"y":1147,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-upsidedown.img":{"frame":{"x":2,"y":1895,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"fish.img":{"frame":{"x":556,"y":810,"w":64,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":64,"h":46},"sourceSize":{"w":64,"h":64}},"flag-albania.img":{"frame":{"x":556,"y":860,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-algeria.img":{"frame":{"x":593,"y":928,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-argentina.img":{"frame":{"x":679,"y":73,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-australia.img":{"frame":{"x":683,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-austria.img":{"frame":{"x":679,"y":141,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-azerbaijan.img":{"frame":{"x":717,"y":209,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belarus.img":{"frame":{"x":747,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belgium.img":{"frame":{"x":751,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bolivia.img":{"frame":{"x":747,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":600,"y":634,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-brazil.img":{"frame":{"x":659,"y":565,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-canada.img":{"frame":{"x":693,"y":465,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-chile.img":{"frame":{"x":600,"y":702,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-china.img":{"frame":{"x":704,"y":355,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-colombia.img":{"frame":{"x":736,"y":277,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-croatia.img":{"frame":{"x":785,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-czech-republic.img":{"frame":{"x":815,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-denmark.img":{"frame":{"x":815,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-dominican-republic.img":{"frame":{"x":819,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ecuador.img":{"frame":{"x":887,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-egypt.img":{"frame":{"x":955,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-estonia.img":{"frame":{"x":883,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-finland.img":{"frame":{"x":951,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-france.img":{"frame":{"x":883,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-georgia.img":{"frame":{"x":951,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-germany.img":{"frame":{"x":624,"y":770,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-greece.img":{"frame":{"x":624,"y":838,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-guatemala.img":{"frame":{"x":661,"y":906,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-honduras.img":{"frame":{"x":668,"y":633,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hong-kong.img":{"frame":{"x":668,"y":701,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hungary.img":{"frame":{"x":727,"y":533,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-india.img":{"frame":{"x":761,"y":423,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-indonesia.img":{"frame":{"x":772,"y":345,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-israel.img":{"frame":{"x":804,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-italy.img":{"frame":{"x":853,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-japan.img":{"frame":{"x":921,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-kazakhstan.img":{"frame":{"x":692,"y":769,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-latvia.img":{"frame":{"x":692,"y":837,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-lithuania.img":{"frame":{"x":729,"y":905,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-malaysia.img":{"frame":{"x":872,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-mexico.img":{"frame":{"x":940,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-moldova.img":{"frame":{"x":736,"y":601,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-morocco.img":{"frame":{"x":736,"y":669,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-netherlands.img":{"frame":{"x":795,"y":491,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-new-zealand.img":{"frame":{"x":829,"y":413,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-norway.img":{"frame":{"x":840,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-peru.img":{"frame":{"x":908,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-philippines.img":{"frame":{"x":897,"y":410,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-portugal.img":{"frame":{"x":897,"y":478,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-republic-of-poland.img":{"frame":{"x":863,"y":546,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-romania.img":{"frame":{"x":931,"y":546,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-russia.img":{"frame":{"x":760,"y":737,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-serbia.img":{"frame":{"x":760,"y":805,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-singapore.img":{"frame":{"x":804,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-slovakia.img":{"frame":{"x":797,"y":873,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-south-korea.img":{"frame":{"x":797,"y":941,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-spain.img":{"frame":{"x":872,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-sweden.img":{"frame":{"x":940,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-switzerland.img":{"frame":{"x":865,"y":682,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-taiwan.img":{"frame":{"x":933,"y":682,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-thailand.img":{"frame":{"x":828,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-trinidad-and-tobago.img":{"frame":{"x":896,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-turkey.img":{"frame":{"x":865,"y":818,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ukraine.img":{"frame":{"x":933,"y":818,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-arab-emirates.img":{"frame":{"x":865,"y":886,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-kingdom.img":{"frame":{"x":865,"y":954,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-states-of-america.img":{"frame":{"x":933,"y":886,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-uruguay.img":{"frame":{"x":933,"y":954,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-venezuela.img":{"frame":{"x":989,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-vietnam.img":{"frame":{"x":729,"y":973,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flex.img":{"frame":{"x":723,"y":1556,"w":54,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":54,"h":58},"sourceSize":{"w":64,"h":64}},"forest.img":{"frame":{"x":370,"y":1402,"w":60,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":60,"h":49},"sourceSize":{"w":64,"h":64}},"gas.img":{"frame":{"x":662,"y":1920,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"gg.img":{"frame":{"x":869,"y":1346,"w":57,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":14,"w":57,"h":36},"sourceSize":{"w":64,"h":64}},"ghost-base.img":{"frame":{"x":728,"y":1493,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"globe.img":{"frame":{"x":478,"y":603,"w":31,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":31},"sourceSize":{"w":32,"h":32}},"gun-awc-01.img":{"frame":{"x":403,"y":25,"w":22,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":113},"sourceSize":{"w":30,"h":118}},"gun-awc-02.img":{"frame":{"x":429,"y":136,"w":22,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":113},"sourceSize":{"w":30,"h":118}},"gun-bugle-01.img":{"frame":{"x":430,"y":454,"w":32,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":44,"w":32,"h":71},"sourceSize":{"w":48,"h":116}},"gun-deagle-01.img":{"frame":{"x":317,"y":514,"w":20,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":54,"w":20,"h":62},"sourceSize":{"w":28,"h":116}},"gun-dp28-top-01.img":{"frame":{"x":500,"y":2011,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":35},"sourceSize":{"w":35,"h":35}},"gun-famas-01.img":{"frame":{"x":263,"y":496,"w":18,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":21,"w":18,"h":83},"sourceSize":{"w":24,"h":104}},"gun-garand-01.img":{"frame":{"x":380,"y":170,"w":16,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":16,"h":106},"sourceSize":{"w":24,"h":116}},"gun-groza-01.img":{"frame":{"x":167,"y":756,"w":18,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":31,"w":18,"h":73},"sourceSize":{"w":24,"h":104}},"gun-grozas-01.img":{"frame":{"x":365,"y":388,"w":18,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":18,"h":94},"sourceSize":{"w":24,"h":104}},"gun-long-01.img":{"frame":{"x":453,"y":258,"w":14,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":92},"sourceSize":{"w":14,"h":92}},"gun-m249-bot-01.img":{"frame":{"x":70,"y":1190,"w":36,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":20},"sourceSize":{"w":36,"h":20}},"gun-m249-top-01.img":{"frame":{"x":403,"y":142,"w":18,"h":107},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":18,"h":107},"sourceSize":{"w":28,"h":116}},"gun-m4a1-01.img":{"frame":{"x":387,"y":388,"w":21,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":21,"h":93},"sourceSize":{"w":24,"h":98}},"gun-med-01.img":{"frame":{"x":553,"y":1126,"w":14,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":62},"sourceSize":{"w":14,"h":62}},"gun-mp220-01.img":{"frame":{"x":965,"y":410,"w":19,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":64},"sourceSize":{"w":20,"h":64}},"gun-ots38-01.img":{"frame":{"x":369,"y":1587,"w":17,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":66,"w":17,"h":50},"sourceSize":{"w":28,"h":116}},"gun-p30l-01.img":{"frame":{"x":639,"y":1114,"w":15,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":56,"w":15,"h":60},"sourceSize":{"w":28,"h":116}},"gun-pkp-bot-01.img":{"frame":{"x":1032,"y":783,"w":38,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":22},"sourceSize":{"w":38,"h":22}},"gun-pkp-top-01.img":{"frame":{"x":309,"y":388,"w":17,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":20,"w":17,"h":96},"sourceSize":{"w":28,"h":116}},"gun-potato-cannon-01.img":{"frame":{"x":468,"y":2,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-potato-smg-01.img":{"frame":{"x":400,"y":253,"w":49,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":49,"h":105},"sourceSize":{"w":88,"h":124}},"gun-potato-smg-top-01.img":{"frame":{"x":1049,"y":1091,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":32,"h":32},"sourceSize":{"w":40,"h":40}},"gun-qbb97-bot-01.img":{"frame":{"x":381,"y":638,"w":30,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":30,"h":14},"sourceSize":{"w":32,"h":16}},"gun-saiga-01.img":{"frame":{"x":330,"y":423,"w":20,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":20,"h":87},"sourceSize":{"w":24,"h":98}},"gun-scarssr-01.img":{"frame":{"x":468,"y":130,"w":30,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":124},"sourceSize":{"w":30,"h":124}},"gun-scorpion-01.img":{"frame":{"x":286,"y":388,"w":19,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":19,"h":99},"sourceSize":{"w":24,"h":104}},"gun-short-01.img":{"frame":{"x":586,"y":171,"w":14,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":48},"sourceSize":{"w":14,"h":48}},"gun-usas-01.img":{"frame":{"x":371,"y":280,"w":20,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":12,"w":20,"h":104},"sourceSize":{"w":28,"h":116}},"gun-vss-01.img":{"frame":{"x":263,"y":388,"w":19,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":19,"h":104},"sourceSize":{"w":24,"h":104}},"hamburger.img":{"frame":{"x":154,"y":1023,"w":64,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":64,"h":52},"sourceSize":{"w":64,"h":64}},"hatchet.img":{"frame":{"x":182,"y":1579,"w":22,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":22,"h":19},"sourceSize":{"w":24,"h":24}},"heart.img":{"frame":{"x":2,"y":1961,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"hide.img":{"frame":{"x":70,"y":1065,"w":64,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":53},"sourceSize":{"w":64,"h":64}},"ice-cream.img":{"frame":{"x":182,"y":1514,"w":33,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":33,"h":61},"sourceSize":{"w":64,"h":64}},"indicator.img":{"frame":{"x":394,"y":1004,"w":45,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":45,"h":64},"sourceSize":{"w":64,"h":64}},"keyboard.img":{"frame":{"x":784,"y":1520,"w":52,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":16,"w":52,"h":31},"sourceSize":{"w":64,"h":64}},"leek.img":{"frame":{"x":1122,"y":1986,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"link.img":{"frame":{"x":2,"y":1073,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loadout-boost.img":{"frame":{"x":555,"y":1686,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"loadout-crosshair.img":{"frame":{"x":443,"y":1019,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loadout-emote.img":{"frame":{"x":115,"y":1602,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-heal.img":{"frame":{"x":705,"y":1858,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loadout-kill-icon.img":{"frame":{"x":389,"y":1455,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"loadout-melee.img":{"frame":{"x":271,"y":1513,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loadout-outfit.img":{"frame":{"x":703,"y":1735,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loadout-player-icon.img":{"frame":{"x":1010,"y":1696,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"lock.img":{"frame":{"x":723,"y":1618,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"logo-caduceus.img":{"frame":{"x":661,"y":974,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-chrysanthemum.img":{"frame":{"x":797,"y":1009,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-cloud.img":{"frame":{"x":593,"y":996,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-conch.img":{"frame":{"x":661,"y":1033,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-crossing.img":{"frame":{"x":729,"y":1041,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-egg.img":{"frame":{"x":522,"y":999,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hatchet.img":{"frame":{"x":590,"y":1055,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hydra.img":{"frame":{"x":658,"y":1092,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-meteor.img":{"frame":{"x":964,"y":750,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-storm.img":{"frame":{"x":1001,"y":682,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-surviv.img":{"frame":{"x":86,"y":1006,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-swine.img":{"frame":{"x":2,"y":1014,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-twins.img":{"frame":{"x":318,"y":1010,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loot-ammo-box.img":{"frame":{"x":976,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-chest-01.img":{"frame":{"x":571,"y":1177,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-02.img":{"frame":{"x":433,"y":1518,"w":38,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":2,"w":38,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-03.img":{"frame":{"x":595,"y":1749,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-circle-outer-01.img":{"frame":{"x":229,"y":674,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-02.img":{"frame":{"x":231,"y":750,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-03.img":{"frame":{"x":188,"y":833,"w":73,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":73,"h":63},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-04.img":{"frame":{"x":383,"y":806,"w":70,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":66},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-05.img":{"frame":{"x":305,"y":580,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-06.img":{"frame":{"x":354,"y":486,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-helmet-01.img":{"frame":{"x":1059,"y":1551,"w":56,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":56,"h":51},"sourceSize":{"w":64,"h":64}},"loot-helmet-02.img":{"frame":{"x":795,"y":559,"w":59,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":13,"w":59,"h":38},"sourceSize":{"w":64,"h":64}},"loot-helmet-03.img":{"frame":{"x":396,"y":1221,"w":56,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":56,"h":43},"sourceSize":{"w":64,"h":64}},"loot-medical-bandage.img":{"frame":{"x":662,"y":1982,"w":53,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":53,"h":58},"sourceSize":{"w":64,"h":64}},"loot-medical-healthkit.img":{"frame":{"x":617,"y":1677,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-heart.img":{"frame":{"x":406,"y":1650,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-pill.img":{"frame":{"x":547,"y":1946,"w":59,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":9,"w":59,"h":45},"sourceSize":{"w":64,"h":64}},"loot-medical-soda.img":{"frame":{"x":775,"y":1798,"w":30,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":30,"h":55},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-rugged.img":{"frame":{"x":863,"y":481,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":2,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-woodland.img":{"frame":{"x":561,"y":1377,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":2,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bonesaw-healer.img":{"frame":{"x":71,"y":763,"w":30,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":5,"w":30,"h":77},"sourceSize":{"w":84,"h":84}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":105,"y":763,"w":27,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":11,"w":27,"h":77},"sourceSize":{"w":96,"h":96}},"loot-melee-bowie-frontier.img":{"frame":{"x":561,"y":1440,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bowie-vintage.img":{"frame":{"x":566,"y":1305,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-crowbar-recon.img":{"frame":{"x":265,"y":826,"w":18,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":18,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-crowbar-scout.img":{"frame":{"x":541,"y":427,"w":18,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":18,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-fireaxe.img":{"frame":{"x":109,"y":844,"w":75,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":75,"h":38},"sourceSize":{"w":76,"h":38}},"loot-melee-hook-silver.img":{"frame":{"x":473,"y":1193,"w":21,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":12,"w":21,"h":39},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-burnished.img":{"frame":{"x":287,"y":826,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-rugged.img":{"frame":{"x":719,"y":1982,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-drowned.img":{"frame":{"x":506,"y":327,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-prismatic.img":{"frame":{"x":580,"y":294,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-rugged.img":{"frame":{"x":374,"y":2023,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":457,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-orchid.img":{"frame":{"x":2,"y":480,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-rusted.img":{"frame":{"x":263,"y":170,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana.img":{"frame":{"x":257,"y":193,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-knuckles-heroic.img":{"frame":{"x":634,"y":465,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-knuckles-rusted.img":{"frame":{"x":25,"y":892,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-kukri-sniper.img":{"frame":{"x":588,"y":2,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-kukri-trad.img":{"frame":{"x":86,"y":892,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-machete-taiga.img":{"frame":{"x":531,"y":2,"w":22,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":22,"h":82},"sourceSize":{"w":84,"h":84}},"loot-melee-naginata.img":{"frame":{"x":257,"y":2,"w":172,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":172,"h":19},"sourceSize":{"w":175,"h":27}},"loot-melee-pan-black-side.img":{"frame":{"x":455,"y":136,"w":9,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":9,"h":56},"sourceSize":{"w":64,"h":64}},"loot-melee-pan-black.img":{"frame":{"x":547,"y":1995,"w":59,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":59,"h":43},"sourceSize":{"w":64,"h":64}},"loot-melee-sledgehammer.img":{"frame":{"x":502,"y":223,"w":74,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":29},"sourceSize":{"w":74,"h":29}},"loot-melee-spade-assault.img":{"frame":{"x":136,"y":763,"w":27,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":27,"h":75},"sourceSize":{"w":80,"h":80}},"loot-melee-stonehammer.img":{"frame":{"x":86,"y":974,"w":74,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":74,"h":28},"sourceSize":{"w":74,"h":30}},"loot-melee-warhammer-tank.img":{"frame":{"x":2,"y":388,"w":127,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":127,"h":65},"sourceSize":{"w":132,"h":76}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":164,"y":961,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-melee-woodaxe.img":{"frame":{"x":164,"y":992,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-pack-00.img":{"frame":{"x":583,"y":1368,"w":45,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":2,"w":45,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-01.img":{"frame":{"x":724,"y":1920,"w":47,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":47,"h":58},"sourceSize":{"w":64,"h":64}},"loot-pack-02.img":{"frame":{"x":591,"y":1305,"w":44,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":44,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-03.img":{"frame":{"x":908,"y":1447,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-aoe-heal.img":{"frame":{"x":2,"y":1196,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-45.img":{"frame":{"x":498,"y":1193,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-9mm.img":{"frame":{"x":453,"y":1450,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-assault.img":{"frame":{"x":310,"y":1923,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-broken-arrow.img":{"frame":{"x":952,"y":1824,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-chambered.img":{"frame":{"x":310,"y":1979,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-endless-ammo.img":{"frame":{"x":1321,"y":1886,"w":51,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":51,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-explosive.img":{"frame":{"x":1063,"y":1755,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-fabricate.img":{"frame":{"x":627,"y":1241,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-field-medic.img":{"frame":{"x":961,"y":1884,"w":49,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":49,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-final-bugle.img":{"frame":{"x":929,"y":1386,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-firepower.img":{"frame":{"x":69,"y":1214,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-flak-jacket.img":{"frame":{"x":1235,"y":1719,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-gotw.img":{"frame":{"x":965,"y":478,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-halloween-mystery.img":{"frame":{"x":356,"y":1832,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-hotw.img":{"frame":{"x":190,"y":1732,"w":53,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":53,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-hunted.img":{"frame":{"x":247,"y":1732,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-inspiration.img":{"frame":{"x":767,"y":1857,"w":57,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":57,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-leadership.img":{"frame":{"x":1008,"y":274,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-martyrdom.img":{"frame":{"x":1122,"y":1745,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"loot-perk-rare-potato.img":{"frame":{"x":249,"y":1643,"w":45,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":45,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger.img":{"frame":{"x":1119,"y":1503,"w":54,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":54,"h":50},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger_adv.img":{"frame":{"x":195,"y":1338,"w":59,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":13,"w":59,"h":37},"sourceSize":{"w":64,"h":64}},"loot-perk-self-revive.img":{"frame":{"x":2,"y":1263,"w":63,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":15,"w":63,"h":33},"sourceSize":{"w":64,"h":64}},"loot-perk-small-arms.img":{"frame":{"x":1070,"y":1686,"w":53,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":53,"h":55},"sourceSize":{"w":64,"h":64}},"loot-perk-splinter.img":{"frame":{"x":134,"y":1448,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-steelskin.img":{"frame":{"x":735,"y":1982,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-takedown.img":{"frame":{"x":1179,"y":1980,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-targeting.img":{"frame":{"x":192,"y":1382,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-12g.img":{"frame":{"x":380,"y":1763,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-556.img":{"frame":{"x":442,"y":1706,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-762.img":{"frame":{"x":470,"y":1582,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-9mm.img":{"frame":{"x":470,"y":1638,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-super.img":{"frame":{"x":136,"y":1266,"w":63,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":63,"h":45},"sourceSize":{"w":64,"h":64}},"loot-perk-tree-climbing.img":{"frame":{"x":1400,"y":1938,"w":47,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":47,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-chatty.img":{"frame":{"x":1014,"y":1873,"w":55,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":55,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-drain.img":{"frame":{"x":565,"y":1885,"w":59,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":11,"w":59,"h":41},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-m9.img":{"frame":{"x":475,"y":1506,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-nothing.img":{"frame":{"x":1176,"y":1800,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-size.img":{"frame":{"x":1188,"y":1857,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-turkey_shoot.img":{"frame":{"x":1122,"y":1442,"w":51,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":51,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-windwalk.img":{"frame":{"x":635,"y":1178,"w":43,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":43,"h":59},"sourceSize":{"w":64,"h":64}},"loot-scope-00.img":{"frame":{"x":988,"y":410,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-01.img":{"frame":{"x":999,"y":543,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-02.img":{"frame":{"x":1044,"y":339,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-03.img":{"frame":{"x":1008,"y":611,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-04.img":{"frame":{"x":222,"y":1064,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-shirt-01.img":{"frame":{"x":775,"y":1919,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitBase.img":{"frame":{"x":780,"y":1979,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCamo.img":{"frame":{"x":751,"y":1618,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":781,"y":1555,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":765,"y":1678,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":813,"y":1615,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":775,"y":1738,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":827,"y":1675,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDev.img":{"frame":{"x":828,"y":1798,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitHeaven.img":{"frame":{"x":828,"y":1858,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":837,"y":1918,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitLumber.img":{"frame":{"x":837,"y":1735,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitMod.img":{"frame":{"x":842,"y":1978,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParma.img":{"frame":{"x":890,"y":1795,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":890,"y":1855,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRed.img":{"frame":{"x":899,"y":1915,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":904,"y":1975,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":747,"y":1340,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitTurkey.img":{"frame":{"x":763,"y":1266,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWheat.img":{"frame":{"x":747,"y":1400,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWhite.img":{"frame":{"x":784,"y":1460,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWoodland.img":{"frame":{"x":843,"y":1520,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag-egg.img":{"frame":{"x":1235,"y":1914,"w":47,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":5,"w":47,"h":53},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag.img":{"frame":{"x":1333,"y":1831,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"loot-throwable-mirv.img":{"frame":{"x":966,"y":1944,"w":41,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":41,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-potato.img":{"frame":{"x":1245,"y":1834,"w":46,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":46,"h":52},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke-egg.img":{"frame":{"x":964,"y":1447,"w":41,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":41,"h":57},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke.img":{"frame":{"x":298,"y":1643,"w":42,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":42,"h":61},"sourceSize":{"w":64,"h":64}},"loot-throwable-snowball.img":{"frame":{"x":991,"y":1323,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"loot-throwable-strobe.img":{"frame":{"x":1176,"y":1557,"w":52,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":52,"h":44},"sourceSize":{"w":64,"h":64}},"loot-weapon-ak.img":{"frame":{"x":456,"y":1249,"w":51,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":51,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-an94.img":{"frame":{"x":68,"y":1763,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-awc.img":{"frame":{"x":304,"y":1577,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-bar.img":{"frame":{"x":69,"y":1279,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-blr.img":{"frame":{"x":875,"y":1580,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-bugle.img":{"frame":{"x":254,"y":1797,"w":61,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":61,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45-dual.img":{"frame":{"x":2,"y":1300,"w":60,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45.img":{"frame":{"x":456,"y":1313,"w":48,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle-dual.img":{"frame":{"x":138,"y":1079,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle.img":{"frame":{"x":967,"y":1508,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-dp28.img":{"frame":{"x":203,"y":1271,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-famas.img":{"frame":{"x":597,"y":1812,"w":56,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-fists.img":{"frame":{"x":943,"y":1203,"w":37,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":37,"h":39},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":70,"y":1122,"w":55,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun.img":{"frame":{"x":889,"y":1640,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-garand.img":{"frame":{"x":925,"y":1252,"w":56,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock-dual.img":{"frame":{"x":312,"y":1708,"w":61,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":61,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock.img":{"frame":{"x":1071,"y":1813,"w":45,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":4,"w":45,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-groza.img":{"frame":{"x":1210,"y":1605,"w":52,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":52,"h":50},"sourceSize":{"w":64,"h":64}},"loot-weapon-grozas.img":{"frame":{"x":264,"y":1271,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-hk416.img":{"frame":{"x":586,"y":1431,"w":53,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":53,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-l86.img":{"frame":{"x":498,"y":1377,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1014.img":{"frame":{"x":136,"y":1315,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1100.img":{"frame":{"x":632,"y":1368,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911-dual.img":{"frame":{"x":2,"y":1132,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911.img":{"frame":{"x":508,"y":1313,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1a1.img":{"frame":{"x":68,"y":1829,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m249.img":{"frame":{"x":344,"y":1641,"w":58,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m39.img":{"frame":{"x":298,"y":1858,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m4a1.img":{"frame":{"x":66,"y":1344,"w":58,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m870.img":{"frame":{"x":602,"y":1494,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-cursed.img":{"frame":{"x":511,"y":1249,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-dual.img":{"frame":{"x":1033,"y":478,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9.img":{"frame":{"x":643,"y":1431,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r-dual.img":{"frame":{"x":1067,"y":541,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r.img":{"frame":{"x":1056,"y":407,"w":50,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":50,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-mac10.img":{"frame":{"x":1286,"y":1775,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":51,"h":52},"sourceSize":{"w":64,"h":64}},"loot-weapon-mk12.img":{"frame":{"x":319,"y":1767,"w":57,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-mkg45.img":{"frame":{"x":68,"y":1895,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-model94.img":{"frame":{"x":656,"y":1556,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"loot-weapon-mosin.img":{"frame":{"x":665,"y":1494,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp220.img":{"frame":{"x":930,"y":1313,"w":57,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":57,"h":53},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp5.img":{"frame":{"x":985,"y":1370,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38-dual.img":{"frame":{"x":1019,"y":70,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38.img":{"frame":{"x":1009,"y":1431,"w":45,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38-dual.img":{"frame":{"x":290,"y":1069,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38.img":{"frame":{"x":517,"y":1441,"w":40,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":40,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l-dual.img":{"frame":{"x":68,"y":1961,"w":62,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":62,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l.img":{"frame":{"x":1011,"y":1944,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-pkp.img":{"frame":{"x":129,"y":1763,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-cannon.img":{"frame":{"x":258,"y":1338,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-smg.img":{"frame":{"x":129,"y":1829,"w":55,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":55,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-qbb97.img":{"frame":{"x":564,"y":1241,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-saiga.img":{"frame":{"x":130,"y":1895,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scar.img":{"frame":{"x":899,"y":1702,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-scarssr.img":{"frame":{"x":188,"y":1829,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-scorpion.img":{"frame":{"x":134,"y":1961,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scout.img":{"frame":{"x":660,"y":1614,"w":59,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-spas12.img":{"frame":{"x":911,"y":1022,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-sv98.img":{"frame":{"x":374,"y":1896,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-svd.img":{"frame":{"x":1023,"y":2,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ump9.img":{"frame":{"x":639,"y":1304,"w":57,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":57,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-usas.img":{"frame":{"x":414,"y":1819,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector.img":{"frame":{"x":1058,"y":1383,"w":55,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector45.img":{"frame":{"x":647,"y":1733,"w":52,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-vss.img":{"frame":{"x":1082,"y":2,"w":54,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":63},"sourceSize":{"w":64,"h":64}},"loot-xp-bone-01.img":{"frame":{"x":1097,"y":1322,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-xp-book-01.img":{"frame":{"x":682,"y":1151,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-02.img":{"frame":{"x":690,"y":1214,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-03.img":{"frame":{"x":734,"y":1100,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-04.img":{"frame":{"x":610,"y":1930,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-05.img":{"frame":{"x":695,"y":1367,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-06.img":{"frame":{"x":695,"y":1430,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-compass-01.img":{"frame":{"x":1435,"y":1990,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":48,"h":48},"sourceSize":{"w":64,"h":64}},"loot-xp-donut-01.img":{"frame":{"x":1094,"y":1606,"w":55,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":55},"sourceSize":{"w":64,"h":64}},"loot-xp-glasses-01.img":{"frame":{"x":1237,"y":1659,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"loot-xp-stump-01.img":{"frame":{"x":700,"y":1277,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"mag-glass.img":{"frame":{"x":597,"y":1614,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"minimize.img":{"frame":{"x":1451,"y":1929,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":47,"h":47},"sourceSize":{"w":64,"h":64}},"mobile-gas.img":{"frame":{"x":354,"y":423,"w":7,"h":6},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":7,"h":6},"sourceSize":{"w":7,"h":6}},"movement.img":{"frame":{"x":1179,"y":1722,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"news.img":{"frame":{"x":1012,"y":1815,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"ok.img":{"frame":{"x":551,"y":1822,"w":42,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":42,"h":59},"sourceSize":{"w":64,"h":64}},"pad.img":{"frame":{"x":263,"y":216,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":104,"h":104},"sourceSize":{"w":104,"h":104}},"part-airdrop-01.img":{"frame":{"x":1387,"y":1825,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-01x.img":{"frame":{"x":1424,"y":1877,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-02.img":{"frame":{"x":228,"y":514,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-02x.img":{"frame":{"x":2,"y":846,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-03.img":{"frame":{"x":2,"y":930,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"part-airdrop-04.img":{"frame":{"x":346,"y":1069,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"part-aura-circle-01.img":{"frame":{"x":257,"y":25,"w":142,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":141},"sourceSize":{"w":144,"h":144}},"part-blossom-01.img":{"frame":{"x":1066,"y":1987,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":52,"h":54},"sourceSize":{"w":64,"h":64}},"part-blossom-02.img":{"frame":{"x":1120,"y":1813,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":52,"h":54},"sourceSize":{"w":64,"h":64}},"part-blossom-03.img":{"frame":{"x":928,"y":1083,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"part-blossom-04.img":{"frame":{"x":963,"y":1022,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"part-book-01.img":{"frame":{"x":449,"y":876,"w":52,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":52,"h":69},"sourceSize":{"w":72,"h":72}},"part-boost-basic.img":{"frame":{"x":742,"y":1163,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"part-boost-naturalize.img":{"frame":{"x":194,"y":1960,"w":46,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":46,"h":62},"sourceSize":{"w":64,"h":64}},"part-boost-shuriken.img":{"frame":{"x":934,"y":1640,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"part-boost-star.img":{"frame":{"x":786,"y":1100,"w":59,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":57},"sourceSize":{"w":64,"h":64}},"part-cloth-01.img":{"frame":{"x":1039,"y":859,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"part-feather-01.img":{"frame":{"x":374,"y":1959,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-feather-02.img":{"frame":{"x":438,"y":1883,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-flare-01.img":{"frame":{"x":1001,"y":809,"w":46,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":46,"h":46},"sourceSize":{"w":50,"h":50}},"part-frag-burst-01.img":{"frame":{"x":1078,"y":721,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-02.img":{"frame":{"x":1078,"y":758,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-03.img":{"frame":{"x":624,"y":906,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"part-frag-lever-01.img":{"frame":{"x":2,"y":2026,"w":24,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":22,"w":24,"h":20},"sourceSize":{"w":64,"h":64}},"part-frag-pin-01.img":{"frame":{"x":336,"y":1532,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"part-heal-basic.img":{"frame":{"x":804,"y":1161,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-heart.img":{"frame":{"x":849,"y":1068,"w":58,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":58,"h":57},"sourceSize":{"w":64,"h":64}},"part-heal-moon.img":{"frame":{"x":809,"y":1326,"w":56,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-tomoe.img":{"frame":{"x":315,"y":1403,"w":51,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":51,"h":61},"sourceSize":{"w":64,"h":64}},"part-leaf-01.img":{"frame":{"x":377,"y":1706,"w":61,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":61,"h":53},"sourceSize":{"w":64,"h":64}},"part-leaf-01sv.img":{"frame":{"x":1073,"y":1872,"w":54,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":54,"h":52},"sourceSize":{"w":64,"h":64}},"part-leaf-02.img":{"frame":{"x":1120,"y":1928,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"part-leaf-03.img":{"frame":{"x":809,"y":1388,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-04.img":{"frame":{"x":846,"y":1450,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-05.img":{"frame":{"x":905,"y":1512,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-06.img":{"frame":{"x":937,"y":1574,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-log-01.img":{"frame":{"x":232,"y":1894,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"part-note-01.img":{"frame":{"x":1140,"y":2,"w":42,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":42,"h":63},"sourceSize":{"w":64,"h":64}},"part-note-02.img":{"frame":{"x":377,"y":1072,"w":44,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":64},"sourceSize":{"w":64,"h":64}},"part-panel-01.img":{"frame":{"x":466,"y":454,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plank-01.img":{"frame":{"x":490,"y":352,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plate-01.img":{"frame":{"x":449,"y":949,"w":69,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":69,"h":66},"sourceSize":{"w":72,"h":72}},"part-pot-01.img":{"frame":{"x":505,"y":856,"w":47,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":47,"h":68},"sourceSize":{"w":72,"h":72}},"part-potato-01.img":{"frame":{"x":1049,"y":1054,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-potato-02.img":{"frame":{"x":438,"y":1947,"w":47,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":47,"h":60},"sourceSize":{"w":64,"h":64}},"part-pulse-01.img":{"frame":{"x":1062,"y":1017,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-pumpkin-01.img":{"frame":{"x":1236,"y":1971,"w":53,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":53,"h":47},"sourceSize":{"w":64,"h":64}},"part-shell-01.img":{"frame":{"x":636,"y":294,"w":28,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":66},"sourceSize":{"w":28,"h":66}},"part-shell-02.img":{"frame":{"x":330,"y":324,"w":31,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":95},"sourceSize":{"w":31,"h":95}},"part-shell-03.img":{"frame":{"x":471,"y":258,"w":31,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":90},"sourceSize":{"w":31,"h":90}},"part-shell-04.img":{"frame":{"x":557,"y":2,"w":27,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":82},"sourceSize":{"w":27,"h":82}},"part-shell-05.img":{"frame":{"x":433,"y":2,"w":31,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":130},"sourceSize":{"w":31,"h":130}},"part-smoke-01.img":{"frame":{"x":1024,"y":1017,"w":34,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":33},"sourceSize":{"w":36,"h":36}},"part-smoke-02.img":{"frame":{"x":132,"y":257,"w":127,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":127,"h":124},"sourceSize":{"w":128,"h":128}},"part-smoke-03.img":{"frame":{"x":133,"y":385,"w":126,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":125},"sourceSize":{"w":128,"h":128}},"part-snow-01.img":{"frame":{"x":1039,"y":979,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-spark-01.img":{"frame":{"x":825,"y":1223,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-spark-02.img":{"frame":{"x":866,"y":1129,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-splat-01.img":{"frame":{"x":1112,"y":338,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":62},"sourceSize":{"w":72,"h":72}},"part-splat-02.img":{"frame":{"x":651,"y":218,"w":62,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":62,"h":65},"sourceSize":{"w":72,"h":72}},"part-splat-03.img":{"frame":{"x":323,"y":1338,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":61,"h":60},"sourceSize":{"w":72,"h":72}},"part-strobe-01.img":{"frame":{"x":1077,"y":973,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-takedown-01.img":{"frame":{"x":1127,"y":271,"w":63,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":63,"h":51},"sourceSize":{"w":64,"h":64}},"part-wedge-01.img":{"frame":{"x":286,"y":491,"w":27,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":27,"h":85},"sourceSize":{"w":31,"h":90}},"part-woodchip-01.img":{"frame":{"x":443,"y":638,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"pass.img":{"frame":{"x":486,"y":1126,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"pilgrim-hat.img":{"frame":{"x":388,"y":1338,"w":60,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":60,"h":44},"sourceSize":{"w":64,"h":64}},"pineapple.img":{"frame":{"x":996,"y":1636,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":0,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"ping-border.img":{"frame":{"x":229,"y":598,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"ping-indicator.img":{"frame":{"x":704,"y":423,"w":44,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":30,"w":44,"h":34},"sourceSize":{"w":64,"h":64}},"ping-map-airdrop.img":{"frame":{"x":610,"y":1993,"w":37,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":5,"w":37,"h":53},"sourceSize":{"w":64,"h":64}},"ping-map-airstrike.img":{"frame":{"x":828,"y":818,"w":22,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":22,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-coming.img":{"frame":{"x":511,"y":1058,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":64},"sourceSize":{"w":64,"h":128}},"ping-map-danger.img":{"frame":{"x":828,"y":682,"w":20,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":20,"h":64},"sourceSize":{"w":64,"h":64}},"ping-map-help.img":{"frame":{"x":1293,"y":1946,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":251,"h":251},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":251,"h":251},"sourceSize":{"w":256,"h":256}},"ping-map-unlock.img":{"frame":{"x":444,"y":1762,"w":30,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":12,"w":30,"h":39},"sourceSize":{"w":64,"h":64}},"ping-map-woods-king.img":{"frame":{"x":1293,"y":2001,"w":46,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":11,"w":46,"h":42},"sourceSize":{"w":64,"h":64}},"ping-part-circle-auto-highlight.img":{"frame":{"x":285,"y":580,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto-outer.img":{"frame":{"x":412,"y":454,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto.img":{"frame":{"x":341,"y":562,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-highlight.img":{"frame":{"x":356,"y":1896,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-circle.img":{"frame":{"x":1023,"y":1551,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-eighth-highlight.img":{"frame":{"x":319,"y":1832,"w":25,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":25,"h":21},"sourceSize":{"w":64,"h":64}},"ping-part-eighth.img":{"frame":{"x":700,"y":1340,"w":25,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":25,"h":21},"sourceSize":{"w":64,"h":64}},"ping-part-quarter-highlight.img":{"frame":{"x":430,"y":529,"w":44,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":25},"sourceSize":{"w":64,"h":64}},"ping-part-quarter.img":{"frame":{"x":565,"y":398,"w":44,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":25},"sourceSize":{"w":64,"h":64}},"ping-team-airdrop.img":{"frame":{"x":272,"y":1137,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-airstrike.img":{"frame":{"x":195,"y":1199,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-coming.img":{"frame":{"x":339,"y":1140,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-danger.img":{"frame":{"x":262,"y":1204,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-help.img":{"frame":{"x":406,"y":1154,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-unlock.img":{"frame":{"x":329,"y":1207,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"player-armor-base-01.img":{"frame":{"x":307,"y":732,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-base-01.img":{"frame":{"x":522,"y":928,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-02.img":{"frame":{"x":517,"y":603,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitDC.img":{"frame":{"x":552,"y":500,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitHeaven.img":{"frame":{"x":563,"y":427,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitLumber.img":{"frame":{"x":565,"y":327,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitParmaPrestige.img":{"frame":{"x":580,"y":223,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitSpetsnaz.img":{"frame":{"x":608,"y":84,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitTurkey.img":{"frame":{"x":612,"y":2,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitWheat.img":{"frame":{"x":529,"y":674,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-bullet-trail-02.img":{"frame":{"x":134,"y":1514,"w":17,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":17,"h":18},"sourceSize":{"w":18,"h":18}},"player-bullet-trail-03.img":{"frame":{"x":315,"y":1468,"w":17,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":17,"h":27},"sourceSize":{"w":18,"h":28}},"player-circle-base-01.img":{"frame":{"x":367,"y":656,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-circle-base-02.img":{"frame":{"x":307,"y":808,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-emote.img":{"frame":{"x":1034,"y":1627,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-feet-01.img":{"frame":{"x":70,"y":1014,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-feet-02.img":{"frame":{"x":206,"y":1079,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-gui.img":{"frame":{"x":1023,"y":1492,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-hands-01.img":{"frame":{"x":1051,"y":809,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-hands-02.img":{"frame":{"x":1001,"y":939,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-helmet-bugler.img":{"frame":{"x":1019,"y":137,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-forest.img":{"frame":{"x":412,"y":362,"w":74,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":88},"sourceSize":{"w":88,"h":88}},"player-helmet-grenadier.img":{"frame":{"x":1057,"y":204,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-01.img":{"frame":{"x":457,"y":712,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":68,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-02.img":{"frame":{"x":457,"y":784,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":68,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-leader.img":{"frame":{"x":1070,"y":137,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-lieutenant.img":{"frame":{"x":1076,"y":271,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-marksman.img":{"frame":{"x":1108,"y":204,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-medic.img":{"frame":{"x":1084,"y":69,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-moon.img":{"frame":{"x":305,"y":656,"w":58,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":58,"h":72},"sourceSize":{"w":88,"h":88}},"player-helmet-potato.img":{"frame":{"x":1121,"y":136,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-recon.img":{"frame":{"x":1135,"y":69,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-king-woods.img":{"frame":{"x":506,"y":256,"w":70,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":70,"h":67},"sourceSize":{"w":74,"h":74}},"player-map-downed.img":{"frame":{"x":254,"y":1858,"w":36,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":36,"h":31},"sourceSize":{"w":36,"h":36}},"player-map-inner.img":{"frame":{"x":825,"y":1285,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-map-outer.img":{"frame":{"x":1076,"y":609,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-mash-01.img":{"frame":{"x":502,"y":177,"w":80,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":42},"sourceSize":{"w":80,"h":80}},"player-mash-02.img":{"frame":{"x":318,"y":966,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":72,"h":40},"sourceSize":{"w":80,"h":80}},"player-mash-03.img":{"frame":{"x":151,"y":674,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-medic.img":{"frame":{"x":434,"y":1386,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":60,"h":60},"sourceSize":{"w":74,"h":74}},"player-patch-01.img":{"frame":{"x":438,"y":2011,"w":58,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":58,"h":35},"sourceSize":{"w":80,"h":80}},"player-patch-02.img":{"frame":{"x":319,"y":928,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-blue.img":{"frame":{"x":636,"y":364,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":25,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-red.img":{"frame":{"x":742,"y":1226,"w":58,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":22,"w":58,"h":36},"sourceSize":{"w":80,"h":80}},"player-ripple-01.img":{"frame":{"x":478,"y":529,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":71,"h":71}},"player-snow-01.img":{"frame":{"x":25,"y":846,"w":80,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":42},"sourceSize":{"w":80,"h":80}},"player-snow-02.img":{"frame":{"x":319,"y":884,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":72,"h":40},"sourceSize":{"w":80,"h":80}},"player-snow-03.img":{"frame":{"x":151,"y":715,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-star.img":{"frame":{"x":110,"y":886,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"player-the-hunted.img":{"frame":{"x":383,"y":732,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"player-visor-assault.img":{"frame":{"x":1290,"y":1715,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":18,"w":51,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-demo.img":{"frame":{"x":1347,"y":1991,"w":32,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":19,"w":32,"h":49},"sourceSize":{"w":88,"h":88}},"player-visor-healer.img":{"frame":{"x":1286,"y":1890,"w":31,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":18,"w":31,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-scout.img":{"frame":{"x":190,"y":1894,"w":38,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":38,"y":13,"w":38,"h":62},"sourceSize":{"w":88,"h":88}},"player-visor-sniper.img":{"frame":{"x":1066,"y":1929,"w":50,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":17,"w":50,"h":54},"sourceSize":{"w":88,"h":88}},"player-visor-tank.img":{"frame":{"x":1083,"y":1443,"w":35,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":16,"w":35,"h":56},"sourceSize":{"w":88,"h":88}},"player-wading-01.img":{"frame":{"x":2,"y":503,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":84,"h":84},"sourceSize":{"w":86,"h":86}},"police.img":{"frame":{"x":196,"y":1448,"w":50,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":50,"h":61},"sourceSize":{"w":64,"h":64}},"potato.img":{"frame":{"x":395,"y":876,"w":50,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":50,"h":48},"sourceSize":{"w":64,"h":64}},"proj-bomb-iron-01.img":{"frame":{"x":571,"y":88,"w":33,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":0,"w":33,"h":79},"sourceSize":{"w":80,"h":80}},"proj-frag-nopin-01.img":{"frame":{"x":489,"y":1947,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-02.img":{"frame":{"x":478,"y":1762,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":506,"y":1694,"w":45,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":502,"y":1826,"w":45,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-01.img":{"frame":{"x":536,"y":1758,"w":55,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-02.img":{"frame":{"x":534,"y":1562,"w":55,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-part.img":{"frame":{"x":747,"y":1460,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"proj-martyrdom-01.img":{"frame":{"x":244,"y":1960,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"proj-mirv-mini-01.img":{"frame":{"x":1032,"y":741,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-mini-02.img":{"frame":{"x":1069,"y":679,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-nopin-nolever.img":{"frame":{"x":381,"y":562,"w":38,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":38,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-nopin.img":{"frame":{"x":423,"y":562,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-pin.img":{"frame":{"x":394,"y":928,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-potato-01.img":{"frame":{"x":1117,"y":1382,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-potato-02.img":{"frame":{"x":1012,"y":1755,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-smoke-nopin-nolever.img":{"frame":{"x":189,"y":756,"w":38,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":38,"h":73},"sourceSize":{"w":80,"h":80}},"proj-smoke-nopin.img":{"frame":{"x":71,"y":599,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-smoke-pin.img":{"frame":{"x":71,"y":681,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-snowball-01.img":{"frame":{"x":1127,"y":1665,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-snowball-02.img":{"frame":{"x":1153,"y":1606,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-strobe-armed.img":{"frame":{"x":608,"y":155,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-arming.img":{"frame":{"x":588,"y":571,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-unarmed.img":{"frame":{"x":242,"y":900,"w":73,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":12,"w":73,"h":62},"sourceSize":{"w":80,"h":80}},"proj-wedge-01.img":{"frame":{"x":500,"y":2,"w":27,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":27,"h":85},"sourceSize":{"w":31,"h":90}},"pumpkin-play.img":{"frame":{"x":736,"y":737,"w":20,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":20,"h":21},"sourceSize":{"w":24,"h":24}},"pumpkin.img":{"frame":{"x":871,"y":1386,"w":54,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":54,"h":57},"sourceSize":{"w":64,"h":64}},"question.img":{"frame":{"x":1295,"y":1831,"w":34,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":6,"w":34,"h":51},"sourceSize":{"w":64,"h":64}},"quit.img":{"frame":{"x":1001,"y":859,"w":34,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":34,"h":36},"sourceSize":{"w":64,"h":64}},"rainbow.img":{"frame":{"x":393,"y":1274,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"reload.img":{"frame":{"x":124,"y":1536,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"resume.img":{"frame":{"x":1083,"y":1503,"w":32,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":15,"w":32,"h":33},"sourceSize":{"w":64,"h":64}},"ribbon-blue.img":{"frame":{"x":1184,"y":1663,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"ribbon-red.img":{"frame":{"x":1233,"y":1778,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"role-assault.img":{"frame":{"x":502,"y":91,"w":65,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":82},"sourceSize":{"w":88,"h":88}},"role-demo.img":{"frame":{"x":90,"y":514,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-healer.img":{"frame":{"x":2,"y":591,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-scout.img":{"frame":{"x":159,"y":514,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-sniper.img":{"frame":{"x":2,"y":676,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-tank.img":{"frame":{"x":2,"y":761,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"salt.img":{"frame":{"x":68,"y":1411,"w":62,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":59},"sourceSize":{"w":64,"h":64}},"santa-hat.img":{"frame":{"x":999,"y":1569,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"skull-leader.img":{"frame":{"x":1487,"y":1980,"w":45,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":45,"h":47},"sourceSize":{"w":48,"h":48}},"skull-outlined.img":{"frame":{"x":843,"y":1580,"w":26,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":26,"h":30},"sourceSize":{"w":32,"h":32}},"skull-team.img":{"frame":{"x":552,"y":571,"w":24,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":24,"h":28},"sourceSize":{"w":32,"h":32}},"skull.img":{"frame":{"x":406,"y":1587,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"sleepy.img":{"frame":{"x":68,"y":1474,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"snowflake.img":{"frame":{"x":425,"y":1087,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"snowman.img":{"frame":{"x":219,"y":1513,"w":48,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":61},"sourceSize":{"w":64,"h":64}},"star-blue.img":{"frame":{"x":623,"y":498,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star-red.img":{"frame":{"x":634,"y":398,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star.img":{"frame":{"x":151,"y":599,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"submit.img":{"frame":{"x":1041,"y":936,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"surviv.img":{"frame":{"x":250,"y":1448,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"tap.img":{"frame":{"x":188,"y":900,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"target.img":{"frame":{"x":713,"y":1795,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"teabag.img":{"frame":{"x":1119,"y":1557,"w":53,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":53,"h":45},"sourceSize":{"w":64,"h":64}},"thumbs-up.img":{"frame":{"x":68,"y":1536,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"timer-background.img":{"frame":{"x":1001,"y":899,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"timer.img":{"frame":{"x":571,"y":1114,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"tombstone.img":{"frame":{"x":189,"y":1667,"w":56,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":61},"sourceSize":{"w":64,"h":64}},"trash.img":{"frame":{"x":134,"y":1382,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"trunk.img":{"frame":{"x":1178,"y":1926,"w":53,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":53,"h":50},"sourceSize":{"w":64,"h":64}},"turkey-animal.img":{"frame":{"x":369,"y":1532,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"unlock.img":{"frame":{"x":628,"y":1875,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"whale.img":{"frame":{"x":539,"y":1505,"w":59,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":59,"h":47},"sourceSize":{"w":64,"h":64}}}}]')
      , Em = JSON.parse('[{"meta":{"image":"main-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-greenhouse-ceiling-01.img":{"frame":{"x":968,"y":1362,"w":200,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":157},"sourceSize":{"w":202,"h":158}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":910,"w":416,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":320},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2,"y":1905,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1586,"y":1095,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":80,"h":74},"sourceSize":{"w":114,"h":90}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1425,"y":470,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":853,"y":182,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1241,"y":594,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":306,"y":1997,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":789,"y":1707,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":422,"y":1997,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":789,"y":1840,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1894,"y":2,"w":114,"h":305},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":305},"sourceSize":{"w":114,"h":322}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":422,"y":910,"w":400,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1234,"w":385,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":385,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":1676,"y":376,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":853,"y":594,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1894,"y":602,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":853,"y":470,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2,"y":1804,"w":305,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":305,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":606,"y":1933,"w":109,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":109,"h":96},"sourceSize":{"w":115,"h":97}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":1230,"y":1095,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1586,"y":1190,"w":352,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":161,"w":352,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1942,"y":1369,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1552,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":920,"y":2,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":366,"y":1674,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-floor-01.img":{"frame":{"x":969,"y":1883,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1280,"y":1550,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1364,"y":1550,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":748,"y":1362,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":969,"y":1707,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1942,"y":1190,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":748,"y":1523,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1133,"y":1689,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":391,"y":1301,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1676,"y":2,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1677,"y":787,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":952,"y":1523,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":826,"y":1030,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1116,"y":1550,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1230,"y":1226,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":182,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1586,"y":1320,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1241,"y":787,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1448,"y":1550,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-complex-warehouse-floor-01.img":{"frame":{"x":538,"y":1933,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":2012,"y":2,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":572,"y":1933,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-planter-01.img":{"frame":{"x":230,"y":1905,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":1942,"y":1525,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-03.img":{"frame":{"x":1938,"y":311,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-04.img":{"frame":{"x":311,"y":1804,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-05.img":{"frame":{"x":311,"y":1858,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-01.img":{"frame":{"x":1852,"y":2,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-tree-07sp.img":{"frame":{"x":1894,"y":470,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08sp.img":{"frame":{"x":529,"y":1674,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}}}}]')
      , Bm = [{
        meta: {
            image: "potato-0-50.png",
            size: {
                w: 1024,
                h: 1024
            },
            scale: .5
        },
        frames: {
            "map-building-shilo-ceiling-01.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 480,
                    h: 384
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 480,
                    h: 384
                },
                sourceSize: {
                    w: 480,
                    h: 384
                }
            },
            "map-building-shilo-floor-01.img": {
                frame: {
                    x: 486,
                    y: 2,
                    w: 480,
                    h: 384
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 480,
                    h: 384
                },
                sourceSize: {
                    w: 480,
                    h: 384
                }
            },
            "map-potato-01.img": {
                frame: {
                    x: 970,
                    y: 47,
                    w: 36,
                    h: 35
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 36,
                    h: 35
                },
                sourceSize: {
                    w: 36,
                    h: 36
                }
            },
            "map-potato-02.img": {
                frame: {
                    x: 970,
                    y: 86,
                    w: 36,
                    h: 35
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 36,
                    h: 35
                },
                sourceSize: {
                    w: 36,
                    h: 36
                }
            },
            "map-potato-03.img": {
                frame: {
                    x: 970,
                    y: 125,
                    w: 36,
                    h: 35
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 36,
                    h: 35
                },
                sourceSize: {
                    w: 36,
                    h: 36
                }
            },
            "map-potato-res-01.img": {
                frame: {
                    x: 970,
                    y: 2,
                    w: 42,
                    h: 41
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 14,
                    y: 18,
                    w: 42,
                    h: 41
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            }
        }
    }]
      , Rm = [{
        meta: {
            image: "savannah-0-50.png",
            size: {
                w: 1024,
                h: 1024
            },
            scale: .5
        },
        frames: {
            "map-brush-01sv.img": {
                frame: {
                    x: 36,
                    y: 260,
                    w: 93,
                    h: 92
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 2,
                    w: 93,
                    h: 92
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-brush-02sv.img": {
                frame: {
                    x: 133,
                    y: 260,
                    w: 91,
                    h: 92
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 91,
                    h: 92
                },
                sourceSize: {
                    w: 96,
                    h: 96
                }
            },
            "map-brush-res-02sv.img": {
                frame: {
                    x: 228,
                    y: 312,
                    w: 31,
                    h: 31
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 8,
                    y: 8,
                    w: 31,
                    h: 31
                },
                sourceSize: {
                    w: 48,
                    h: 48
                }
            },
            "map-building-perch-ceiling.img": {
                frame: {
                    x: 759,
                    y: 166,
                    w: 181,
                    h: 172
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 7,
                    y: 11,
                    w: 181,
                    h: 172
                },
                sourceSize: {
                    w: 200,
                    h: 192
                }
            },
            "map-building-perch-floor.img": {
                frame: {
                    x: 759,
                    y: 2,
                    w: 200,
                    h: 160
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 200,
                    h: 160
                },
                sourceSize: {
                    w: 200,
                    h: 160
                }
            },
            "map-bunker-generic-ceiling-02.img": {
                frame: {
                    x: 294,
                    y: 259,
                    w: 80,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 115
                },
                sourceSize: {
                    w: 80,
                    h: 115
                }
            },
            "map-bunker-generic-floor-03.img": {
                frame: {
                    x: 378,
                    y: 259,
                    w: 80,
                    h: 115
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 80,
                    h: 115
                },
                sourceSize: {
                    w: 80,
                    h: 115
                }
            },
            "map-bush-01sv.img": {
                frame: {
                    x: 682,
                    y: 288,
                    w: 70,
                    h: 70
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 70,
                    h: 70
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-bush-res-01sv.img": {
                frame: {
                    x: 963,
                    y: 134,
                    w: 22,
                    h: 17
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 25,
                    y: 27,
                    w: 22,
                    h: 17
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-complex-warehouse-floor-01.img": {
                frame: {
                    x: 989,
                    y: 132,
                    w: 30,
                    h: 112
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 30,
                    h: 112
                },
                sourceSize: {
                    w: 30,
                    h: 112
                }
            },
            "map-complex-warehouse-floor-02.img": {
                frame: {
                    x: 2,
                    y: 2,
                    w: 30,
                    h: 264
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 30,
                    h: 264
                },
                sourceSize: {
                    w: 30,
                    h: 264
                }
            },
            "map-complex-warehouse-floor-03.img": {
                frame: {
                    x: 944,
                    y: 166,
                    w: 30,
                    h: 112
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 30,
                    h: 112
                },
                sourceSize: {
                    w: 30,
                    h: 112
                }
            },
            "map-crate-21.img": {
                frame: {
                    x: 682,
                    y: 212,
                    w: 72,
                    h: 72
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 72,
                    h: 72
                },
                sourceSize: {
                    w: 72,
                    h: 72
                }
            },
            "map-perch-res-01.img": {
                frame: {
                    x: 2,
                    y: 356,
                    w: 88,
                    h: 79
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 20,
                    y: 24,
                    w: 88,
                    h: 79
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-propane-01.img": {
                frame: {
                    x: 228,
                    y: 260,
                    w: 48,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 48,
                    h: 48
                },
                sourceSize: {
                    w: 48,
                    h: 48
                }
            },
            "map-stone-07.img": {
                frame: {
                    x: 294,
                    y: 2,
                    w: 252,
                    h: 253
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 1,
                    w: 252,
                    h: 253
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-stone-res-07.img": {
                frame: {
                    x: 550,
                    y: 2,
                    w: 205,
                    h: 206
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 2,
                    y: 2,
                    w: 205,
                    h: 206
                },
                sourceSize: {
                    w: 210,
                    h: 210
                }
            },
            "map-tree-03sv.img": {
                frame: {
                    x: 550,
                    y: 212,
                    w: 128,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 0,
                    y: 0,
                    w: 128,
                    h: 128
                },
                sourceSize: {
                    w: 128,
                    h: 128
                }
            },
            "map-tree-12.img": {
                frame: {
                    x: 36,
                    y: 2,
                    w: 254,
                    h: 254
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 1,
                    w: 254,
                    h: 254
                },
                sourceSize: {
                    w: 256,
                    h: 256
                }
            },
            "map-tree-res-12.img": {
                frame: {
                    x: 978,
                    y: 248,
                    w: 39,
                    h: 35
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 4,
                    y: 6,
                    w: 39,
                    h: 35
                },
                sourceSize: {
                    w: 48,
                    h: 48
                }
            },
            "map-wall-03-grassy-res.img": {
                frame: {
                    x: 280,
                    y: 260,
                    w: 10,
                    h: 46
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 11,
                    y: 1,
                    w: 10,
                    h: 46
                },
                sourceSize: {
                    w: 32,
                    h: 48
                }
            },
            "map-wall-03-grassy.img": {
                frame: {
                    x: 1003,
                    y: 2,
                    w: 17,
                    h: 48
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 7,
                    y: 0,
                    w: 17,
                    h: 48
                },
                sourceSize: {
                    w: 32,
                    h: 48
                }
            },
            "map-wall-08-grassy-res.img": {
                frame: {
                    x: 989,
                    y: 2,
                    w: 10,
                    h: 126
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 11,
                    y: 1,
                    w: 10,
                    h: 126
                },
                sourceSize: {
                    w: 32,
                    h: 128
                }
            },
            "map-wall-08-grassy.img": {
                frame: {
                    x: 963,
                    y: 2,
                    w: 22,
                    h: 128
                },
                rotated: !1,
                trimmed: !0,
                spriteSourceSize: {
                    x: 1,
                    y: 0,
                    w: 22,
                    h: 128
                },
                sourceSize: {
                    w: 32,
                    h: 128
                }
            }
        }
    }]
      , Lm = JSON.parse('[{"meta":{"image":"shared-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-barrel-03.img":{"frame":{"x":701,"y":2029,"w":44,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":17},"sourceSize":{"w":44,"h":17}},"map-barrel-04.img":{"frame":{"x":749,"y":2029,"w":44,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":17},"sourceSize":{"w":44,"h":17}},"map-bookshelf-01.img":{"frame":{"x":930,"y":978,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bookshelf-02.img":{"frame":{"x":2,"y":1775,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bottle-01.img":{"frame":{"x":835,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-02.img":{"frame":{"x":855,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-03.img":{"frame":{"x":875,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-04.img":{"frame":{"x":895,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-05.img":{"frame":{"x":915,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-building-bank-floor-01.img":{"frame":{"x":1062,"y":615,"w":848,"h":401},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":848,"h":401},"sourceSize":{"w":848,"h":401}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":790,"w":800,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":544},"sourceSize":{"w":800,"h":544}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":806,"y":1020,"w":716,"h":796},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":716,"h":796},"sourceSize":{"w":716,"h":796}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":302,"y":1775,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":37},"sourceSize":{"w":74,"h":38}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":1338,"w":721,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":721,"h":433},"sourceSize":{"w":721,"h":433}},"map-building-container-floor-01.img":{"frame":{"x":1794,"y":1020,"w":90,"h":265},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":265},"sourceSize":{"w":90,"h":268}},"map-building-container-open-floor.img":{"frame":{"x":1914,"y":615,"w":90,"h":342},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":90,"h":342},"sourceSize":{"w":90,"h":346}},"map-building-dock-floor-01b.img":{"frame":{"x":1914,"y":961,"w":81,"h":331},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":81,"h":331},"sourceSize":{"w":81,"h":332}},"map-building-hut-floor-02.img":{"frame":{"x":1978,"y":2,"w":65,"h":383},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":65,"h":383},"sourceSize":{"w":68,"h":384}},"map-building-mansion-floor-01b.img":{"frame":{"x":1062,"y":2,"w":912,"h":609},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":609},"sourceSize":{"w":913,"h":609}},"map-building-mansion-floor-01d.img":{"frame":{"x":1325,"y":1820,"w":544,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":544,"h":93},"sourceSize":{"w":545,"h":97}},"map-building-police-ceiling-01.img":{"frame":{"x":1526,"y":1564,"w":504,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":240},"sourceSize":{"w":504,"h":240}},"map-building-police-ceiling-02.img":{"frame":{"x":1526,"y":1020,"w":264,"h":540},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":264,"h":540},"sourceSize":{"w":264,"h":540}},"map-building-police-ceiling-03.img":{"frame":{"x":1794,"y":1296,"w":252,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":252,"h":240},"sourceSize":{"w":252,"h":240}},"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":1056,"h":784},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1056,"h":784},"sourceSize":{"w":1056,"h":784}},"map-building-porch-01.img":{"frame":{"x":380,"y":1775,"w":64,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":32},"sourceSize":{"w":64,"h":32}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":806,"y":790,"w":248,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":248,"h":96},"sourceSize":{"w":248,"h":96}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":1820,"w":697,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":21,"w":697,"h":192},"sourceSize":{"w":760,"h":216}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":703,"y":1820,"w":618,"h":205},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":13,"w":618,"h":205},"sourceSize":{"w":652,"h":232}},"map-bunker-conch-floor-01.img":{"frame":{"x":1671,"y":1917,"w":290,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":290,"h":126},"sourceSize":{"w":300,"h":128}},"map-club-bar-01.img":{"frame":{"x":2008,"y":681,"w":27,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":240},"sourceSize":{"w":27,"h":240}},"map-decal-club-02.img":{"frame":{"x":727,"y":1338,"w":50,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":50,"h":179},"sourceSize":{"w":52,"h":180}},"map-deposit-box-01.img":{"frame":{"x":1965,"y":2004,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-deposit-box-02.img":{"frame":{"x":218,"y":1775,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-door-02.img":{"frame":{"x":727,"y":1701,"w":40,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":112},"sourceSize":{"w":40,"h":112}},"map-door-03.img":{"frame":{"x":2028,"y":617,"w":16,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":56},"sourceSize":{"w":16,"h":56}},"map-gun-mount-01.img":{"frame":{"x":549,"y":2016,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-gun-mount-02.img":{"frame":{"x":448,"y":1775,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-03.img":{"frame":{"x":516,"y":1775,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-04.img":{"frame":{"x":584,"y":1775,"w":64,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":28},"sourceSize":{"w":64,"h":28}},"map-gun-mount-05.img":{"frame":{"x":625,"y":2016,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-piano-01.img":{"frame":{"x":806,"y":978,"w":120,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":37},"sourceSize":{"w":120,"h":37}},"map-pipes-03.img":{"frame":{"x":1325,"y":1917,"w":342,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":342,"h":118},"sourceSize":{"w":342,"h":118}},"map-pipes-04.img":{"frame":{"x":727,"y":1521,"w":44,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":176},"sourceSize":{"w":44,"h":176}},"map-pipes-05.img":{"frame":{"x":1889,"y":1808,"w":45,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":96},"sourceSize":{"w":45,"h":96}},"map-screen-01.img":{"frame":{"x":186,"y":2016,"w":128,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":24},"sourceSize":{"w":128,"h":24}},"map-screen-res-01.img":{"frame":{"x":652,"y":1775,"w":58,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":58,"h":29},"sourceSize":{"w":62,"h":29}},"map-snow-07.img":{"frame":{"x":806,"y":890,"w":248,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":248,"h":84},"sourceSize":{"w":256,"h":96}},"map-switch-01.img":{"frame":{"x":797,"y":2029,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-switch-02.img":{"frame":{"x":935,"y":2029,"w":15,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":16},"sourceSize":{"w":15,"h":17}},"map-switch-03.img":{"frame":{"x":816,"y":2029,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-towelrack-01.img":{"frame":{"x":118,"y":1775,"w":96,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":96,"h":38},"sourceSize":{"w":96,"h":48}},"map-wall-01-rounded.img":{"frame":{"x":954,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-wall-02-5-rounded.img":{"frame":{"x":1888,"y":1248,"w":16,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":40},"sourceSize":{"w":16,"h":40}},"map-wall-06-rounded.img":{"frame":{"x":1938,"y":1808,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-07-rounded.img":{"frame":{"x":771,"y":1701,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-09-rounded.img":{"frame":{"x":1999,"y":1137,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-10-rounded.img":{"frame":{"x":2028,"y":1121,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-11-rounded.img":{"frame":{"x":781,"y":1338,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-11.img":{"frame":{"x":781,"y":1518,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-12-rounded.img":{"frame":{"x":2028,"y":925,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-12.img":{"frame":{"x":1965,"y":1808,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-13-rounded.img":{"frame":{"x":1978,"y":389,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-13.img":{"frame":{"x":2008,"y":925,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-14-rounded.img":{"frame":{"x":2028,"y":389,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-14.img":{"frame":{"x":1888,"y":1020,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-18.img":{"frame":{"x":2008,"y":389,"w":16,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":288},"sourceSize":{"w":16,"h":288}},"map-wall-glass-12-2.img":{"frame":{"x":1985,"y":1808,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-glass-12.img":{"frame":{"x":2021,"y":1808,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-outhouse-bot.img":{"frame":{"x":448,"y":1801,"w":36,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":12},"sourceSize":{"w":36,"h":12}},"map-wall-outhouse-side.img":{"frame":{"x":1873,"y":1808,"w":12,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":99},"sourceSize":{"w":12,"h":99}},"map-wall-outhouse-top.img":{"frame":{"x":443,"y":2029,"w":102,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":102,"h":12},"sourceSize":{"w":102,"h":12}},"map-wall-shack-bot.img":{"frame":{"x":318,"y":2029,"w":121,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":121,"h":12},"sourceSize":{"w":121,"h":12}},"map-wall-shack-left.img":{"frame":{"x":2034,"y":1665,"w":12,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":111},"sourceSize":{"w":12,"h":111}},"map-wall-shack-right.img":{"frame":{"x":2034,"y":1540,"w":12,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":121},"sourceSize":{"w":12,"h":121}},"map-wall-shack-top.img":{"frame":{"x":2,"y":2029,"w":180,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":12},"sourceSize":{"w":180,"h":12}}}},{"meta":{"image":"shared-1-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-barrel-res-03.img":{"frame":{"x":1726,"y":2019,"w":38,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":43,"w":38,"h":26},"sourceSize":{"w":72,"h":72}},"map-bathhouse-pool-01.img":{"frame":{"x":536,"y":2001,"w":19,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":31},"sourceSize":{"w":19,"h":31}},"map-bed-res-01.img":{"frame":{"x":1974,"y":1874,"w":44,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":44,"h":79},"sourceSize":{"w":48,"h":96}},"map-bed-res-02.img":{"frame":{"x":1974,"y":1957,"w":44,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":44,"h":79},"sourceSize":{"w":48,"h":96}},"map-building-bank-ceiling-02.img":{"frame":{"x":1619,"y":2,"w":278,"h":444},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":25,"w":278,"h":444},"sourceSize":{"w":278,"h":470}},"map-building-bank-floor-02.img":{"frame":{"x":1594,"y":1498,"w":432,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":224},"sourceSize":{"w":544,"h":224}},"map-building-bank-window-res-01.img":{"frame":{"x":833,"y":2017,"w":22,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":27,"w":22,"h":21},"sourceSize":{"w":72,"h":72}},"map-building-barn-basement-stairs.img":{"frame":{"x":1901,"y":2,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-barn-ceiling-01.img":{"frame":{"x":2,"y":1317,"w":600,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":600,"h":312},"sourceSize":{"w":600,"h":312}},"map-building-barn-ceiling-02.img":{"frame":{"x":862,"y":1221,"w":208,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":72},"sourceSize":{"w":208,"h":72}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":652,"h":459},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":652,"h":459},"sourceSize":{"w":652,"h":460}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":1633,"w":556,"h":364},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":556,"h":364},"sourceSize":{"w":556,"h":364}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":562,"y":1633,"w":544,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":544,"h":272},"sourceSize":{"w":544,"h":288}},"map-building-bridge-lg-floor.img":{"frame":{"x":1110,"y":2,"w":505,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":505,"h":352},"sourceSize":{"w":506,"h":354}},"map-building-bridge-md-floor.img":{"frame":{"x":658,"y":2,"w":448,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":184},"sourceSize":{"w":448,"h":184}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":1110,"y":1657,"w":456,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":456,"h":288},"sourceSize":{"w":456,"h":288}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":817,"w":608,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":496},"sourceSize":{"w":608,"h":496}},"map-building-club-floor-01d.img":{"frame":{"x":937,"y":1949,"w":161,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":96},"sourceSize":{"w":161,"h":97}},"map-building-club-floor-01g.img":{"frame":{"x":1570,"y":1726,"w":400,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":289},"sourceSize":{"w":401,"h":289}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1422,"y":1949,"w":144,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":96},"sourceSize":{"w":144,"h":96}},"map-building-house-floor-01.img":{"frame":{"x":658,"y":358,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-house-floor-02.img":{"frame":{"x":1110,"y":1221,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-mansion-ceiling.img":{"frame":{"x":1118,"y":802,"w":456,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":456,"h":400},"sourceSize":{"w":512,"h":432}},"map-building-mansion-cellar-01c.img":{"frame":{"x":756,"y":1949,"w":177,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":64},"sourceSize":{"w":177,"h":65}},"map-building-mansion-floor-01a.img":{"frame":{"x":658,"y":190,"w":401,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":401,"h":158},"sourceSize":{"w":401,"h":161}},"map-building-panicroom-ceiling.img":{"frame":{"x":1901,"y":198,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-saferoom-ceiling.img":{"frame":{"x":1617,"y":670,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-saferoom-floor.img":{"frame":{"x":1797,"y":670,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":606,"y":1317,"w":467,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":467,"h":304},"sourceSize":{"w":480,"h":320}},"map-building-teahouse-floor-01.img":{"frame":{"x":1594,"y":802,"w":448,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":288},"sourceSize":{"w":448,"h":288}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":1617,"y":450,"w":416,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":216},"sourceSize":{"w":416,"h":216}},"map-building-warehouse-floor-01.img":{"frame":{"x":614,"y":817,"w":500,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":500,"h":400},"sourceSize":{"w":500,"h":400}},"map-building-warehouse-floor-02.img":{"frame":{"x":1594,"y":1094,"w":440,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":440,"h":400},"sourceSize":{"w":440,"h":400}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":562,"y":1949,"w":190,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":190,"h":90},"sourceSize":{"w":190,"h":90}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":614,"y":1221,"w":244,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":88},"sourceSize":{"w":244,"h":88}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":1142,"y":358,"w":471,"h":440},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":0,"w":471,"h":440},"sourceSize":{"w":496,"h":440}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":465,"w":635,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":635,"h":348},"sourceSize":{"w":640,"h":352}},"map-bush-res-01.img":{"frame":{"x":1839,"y":2019,"w":26,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":24,"w":26,"h":24},"sourceSize":{"w":72,"h":72}},"map-bush-res-02.img":{"frame":{"x":756,"y":1909,"w":29,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":22,"w":29,"h":30},"sourceSize":{"w":72,"h":72}},"map-bush-res-04.img":{"frame":{"x":1898,"y":2019,"w":24,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":24,"h":23},"sourceSize":{"w":27,"h":27}},"map-candle-01.img":{"frame":{"x":1869,"y":2019,"w":25,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":25,"h":25},"sourceSize":{"w":26,"h":26}},"map-column-01.img":{"frame":{"x":680,"y":1909,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-couch-01.img":{"frame":{"x":1901,"y":394,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":48}},"map-crate-mil-01.img":{"frame":{"x":2,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-02.img":{"frame":{"x":92,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-03.img":{"frame":{"x":182,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-04.img":{"frame":{"x":272,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-05.img":{"frame":{"x":362,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-decal-flyer-01.img":{"frame":{"x":859,"y":2017,"w":18,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":18,"h":22},"sourceSize":{"w":24,"h":24}},"map-decal-oil-04.img":{"frame":{"x":1808,"y":2019,"w":27,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":27,"h":24},"sourceSize":{"w":32,"h":32}},"map-decal-oil-05.img":{"frame":{"x":2017,"y":770,"w":17,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":17,"h":28},"sourceSize":{"w":32,"h":32}},"map-door-01.img":{"frame":{"x":1578,"y":802,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-05.img":{"frame":{"x":1578,"y":870,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-slot-01.img":{"frame":{"x":2022,"y":1974,"w":19,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":67},"sourceSize":{"w":19,"h":67}},"map-door-slot-02.img":{"frame":{"x":1087,"y":190,"w":19,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":68},"sourceSize":{"w":19,"h":68}},"map-drawers-01.img":{"frame":{"x":452,"y":2001,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-drawers-res.img":{"frame":{"x":756,"y":2017,"w":46,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":46,"h":28},"sourceSize":{"w":48,"h":32}},"map-fire-ext-01.img":{"frame":{"x":562,"y":1909,"w":41,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":41,"h":32},"sourceSize":{"w":42,"h":35}},"map-fire-ext-res.img":{"frame":{"x":806,"y":2017,"w":23,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":4,"w":23,"h":28},"sourceSize":{"w":42,"h":35}},"map-locker-01.img":{"frame":{"x":1570,"y":2019,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-locker-02.img":{"frame":{"x":1622,"y":2019,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-locker-03.img":{"frame":{"x":1674,"y":2019,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-pipes-01.img":{"frame":{"x":1974,"y":1726,"w":45,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":144},"sourceSize":{"w":45,"h":144}},"map-potato-res.img":{"frame":{"x":647,"y":1909,"w":29,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":7,"w":29,"h":34},"sourceSize":{"w":48,"h":48}},"map-power-box-01.img":{"frame":{"x":607,"y":1909,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-saloon-bar-01.img":{"frame":{"x":1077,"y":1221,"w":27,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":162},"sourceSize":{"w":27,"h":162}},"map-tree-res-01.img":{"frame":{"x":1926,"y":2019,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":24},"sourceSize":{"w":24,"h":24}},"map-wall-02-rounded.img":{"frame":{"x":716,"y":1909,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-02.img":{"frame":{"x":736,"y":1909,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-04-cobalt.img":{"frame":{"x":1077,"y":1535,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-04-rounded.img":{"frame":{"x":1570,"y":1657,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wall-04-stone.img":{"frame":{"x":1063,"y":190,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-05-rounded.img":{"frame":{"x":1063,"y":274,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-05.img":{"frame":{"x":1083,"y":274,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-06.img":{"frame":{"x":2017,"y":670,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-07.img":{"frame":{"x":1997,"y":670,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-08-rounded.img":{"frame":{"x":1977,"y":670,"w":16,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":128},"sourceSize":{"w":16,"h":128}},"map-wall-09.img":{"frame":{"x":2023,"y":1826,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-10.img":{"frame":{"x":2030,"y":1498,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-10.img":{"frame":{"x":2030,"y":1662,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-9.img":{"frame":{"x":1077,"y":1387,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wheel-01.img":{"frame":{"x":1102,"y":1949,"w":156,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":78},"sourceSize":{"w":156,"h":78}},"map-wheel-03.img":{"frame":{"x":1262,"y":1949,"w":156,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":74},"sourceSize":{"w":156,"h":78}},"map-woodpile-res-01.img":{"frame":{"x":1768,"y":2019,"w":36,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":36,"h":26},"sourceSize":{"w":48,"h":48}}}},{"meta":{"image":"shared-2-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-airdrop-01.img":{"frame":{"x":1486,"y":622,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02.img":{"frame":{"x":1725,"y":1563,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-barrel-01.img":{"frame":{"x":1975,"y":1655,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-02.img":{"frame":{"x":78,"y":1191,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-res-02.img":{"frame":{"x":152,"y":1266,"w":65,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":65,"h":63},"sourceSize":{"w":72,"h":72}},"map-bathhouse-column-01.img":{"frame":{"x":145,"y":1333,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-bathrocks-01.img":{"frame":{"x":548,"y":1383,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-bed-01.img":{"frame":{"x":1382,"y":1188,"w":48,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":108},"sourceSize":{"w":48,"h":108}},"map-bed-02.img":{"frame":{"x":763,"y":1143,"w":88,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":108},"sourceSize":{"w":88,"h":108}},"map-bollard-01.img":{"frame":{"x":550,"y":1325,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":56,"h":54},"sourceSize":{"w":72,"h":72}},"map-building-bank-ceiling-01.img":{"frame":{"x":1058,"y":2,"w":252,"h":276},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":24,"w":252,"h":276},"sourceSize":{"w":253,"h":300}},"map-building-bank-ceiling-03.img":{"frame":{"x":1197,"y":926,"w":108,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":96,"w":108,"h":180},"sourceSize":{"w":108,"h":276}},"map-building-bank-window-01.img":{"frame":{"x":1009,"y":649,"w":28,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":52},"sourceSize":{"w":28,"h":52}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":451,"y":1050,"w":152,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":152,"h":96},"sourceSize":{"w":152,"h":104}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1064,"y":1255,"w":82,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":82,"h":96},"sourceSize":{"w":82,"h":104}},"map-building-barn-basement-floor-01.img":{"frame":{"x":366,"y":655,"w":331,"h":235},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":331,"h":235},"sourceSize":{"w":332,"h":236}},"map-building-barn-basement-floor-02.img":{"frame":{"x":1846,"y":247,"w":187,"h":235},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":187,"h":235},"sourceSize":{"w":188,"h":236}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":1608,"y":1091,"w":112,"h":145},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":145},"sourceSize":{"w":113,"h":145}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":805,"y":302,"w":283,"h":171},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":283,"h":171},"sourceSize":{"w":284,"h":172}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":1309,"y":1088,"w":129,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":129,"h":96},"sourceSize":{"w":129,"h":97}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":1314,"y":2,"w":268,"h":268},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":268,"h":268},"sourceSize":{"w":268,"h":268}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":1158,"y":1110,"w":128,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":112},"sourceSize":{"w":128,"h":112}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":805,"y":477,"w":256,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":168},"sourceSize":{"w":256,"h":168}},"map-building-boarded-window-01.img":{"frame":{"x":967,"y":1143,"w":22,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":22,"h":56},"sourceSize":{"w":24,"h":64}},"map-building-club-ceiling-01a.img":{"frame":{"x":438,"y":2,"w":368,"h":296},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":368,"h":296},"sourceSize":{"w":369,"h":297}},"map-building-club-ceiling-01b.img":{"frame":{"x":1290,"y":1188,"w":88,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":121},"sourceSize":{"w":89,"h":121}},"map-building-club-ceiling-01c.img":{"frame":{"x":1846,"y":486,"w":200,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":216},"sourceSize":{"w":201,"h":217}},"map-building-club-floor-01a.img":{"frame":{"x":1928,"y":1470,"w":112,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":113},"sourceSize":{"w":113,"h":113}},"map-building-club-floor-01b.img":{"frame":{"x":963,"y":1255,"w":97,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":96},"sourceSize":{"w":97,"h":97}},"map-building-club-floor-01e.img":{"frame":{"x":1846,"y":2,"w":176,"h":241},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":241},"sourceSize":{"w":177,"h":241}},"map-building-club-floor-01f.img":{"frame":{"x":810,"y":1309,"w":97,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":65},"sourceSize":{"w":97,"h":65}},"map-building-club-floor-01h.img":{"frame":{"x":666,"y":979,"w":160,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":144},"sourceSize":{"w":161,"h":145}},"map-building-club-vault-ceiling.img":{"frame":{"x":1486,"y":530,"w":80,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":88},"sourceSize":{"w":80,"h":88}},"map-building-container-ceiling-01.img":{"frame":{"x":1009,"y":905,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-02.img":{"frame":{"x":1103,"y":905,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-03.img":{"frame":{"x":1545,"y":739,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-05.img":{"frame":{"x":1639,"y":739,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-open-ceiling-01.img":{"frame":{"x":1350,"y":894,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":78,"w":90,"h":190},"sourceSize":{"w":90,"h":346}},"map-building-dock-floor-01a.img":{"frame":{"x":1636,"y":1624,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":80,"h":80},"sourceSize":{"w":80,"h":81}},"map-building-house-ceiling.img":{"frame":{"x":2,"y":655,"w":360,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":324},"sourceSize":{"w":360,"h":324}},"map-building-house-window-01.img":{"frame":{"x":1041,"y":649,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-house-window-res-01.img":{"frame":{"x":1524,"y":1314,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-hut-ceiling-01.img":{"frame":{"x":1774,"y":706,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-02.img":{"frame":{"x":1293,"y":530,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-03.img":{"frame":{"x":1009,"y":705,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-floor-01.img":{"frame":{"x":1065,"y":477,"w":224,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":224,"h":224},"sourceSize":{"w":256,"h":256}},"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":432,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":400},"sourceSize":{"w":433,"h":401}},"map-building-mansion-cellar-01b.img":{"frame":{"x":1524,"y":1372,"w":112,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":115},"sourceSize":{"w":113,"h":115}},"map-building-mansion-floor-01c.img":{"frame":{"x":1928,"y":1352,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":114},"sourceSize":{"w":113,"h":114}},"map-building-outhouse-ceiling.img":{"frame":{"x":1865,"y":1236,"w":136,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":136,"h":112},"sourceSize":{"w":200,"h":158}},"map-building-outhouse-floor.img":{"frame":{"x":1608,"y":933,"w":120,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":2,"w":120,"h":154},"sourceSize":{"w":200,"h":158}},"map-building-panicroom-floor.img":{"frame":{"x":1202,"y":730,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-police-floor-02.img":{"frame":{"x":701,"y":655,"w":304,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":304,"h":320},"sourceSize":{"w":305,"h":785}},"map-building-shack-ceiling-01.img":{"frame":{"x":290,"y":1050,"w":157,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":157,"h":103},"sourceSize":{"w":157,"h":127}},"map-building-shack-ceiling-02.img":{"frame":{"x":1158,"y":1226,"w":120,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":96},"sourceSize":{"w":120,"h":120}},"map-building-shack-ceiling-03.img":{"frame":{"x":1092,"y":282,"w":204,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":204,"h":144},"sourceSize":{"w":216,"h":168}},"map-building-shack-floor-01.img":{"frame":{"x":1350,"y":730,"w":191,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":191,"h":160},"sourceSize":{"w":210,"h":170}},"map-building-shack-floor-02.img":{"frame":{"x":830,"y":979,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-shack-floor-03.img":{"frame":{"x":2,"y":983,"w":284,"h":204},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":284,"h":204},"sourceSize":{"w":288,"h":224}},"map-building-teahouse-floor-02.img":{"frame":{"x":288,"y":1280,"w":64,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":44},"sourceSize":{"w":64,"h":44}},"map-building-teahouse-res-01.img":{"frame":{"x":1872,"y":1128,"w":141,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":57,"y":76,"w":141,"h":104},"sourceSize":{"w":256,"h":256}},"map-building-vault-ceiling.img":{"frame":{"x":1444,"y":933,"w":160,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":168},"sourceSize":{"w":216,"h":168}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":2,"y":406,"w":360,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":216},"sourceSize":{"w":360,"h":216}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":810,"y":2,"w":244,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":280},"sourceSize":{"w":244,"h":280}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":1570,"y":520,"w":200,"h":215},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":215},"sourceSize":{"w":200,"h":224}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":994,"y":1099,"w":160,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":152},"sourceSize":{"w":160,"h":152}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":438,"y":302,"w":363,"h":349},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":363,"h":349},"sourceSize":{"w":369,"h":353}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":1150,"y":1326,"w":96,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":89},"sourceSize":{"w":97,"h":90}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":1828,"y":1352,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-01.img":{"frame":{"x":1897,"y":984,"w":147,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":147,"h":140},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-02.img":{"frame":{"x":451,"y":1150,"w":147,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":147,"h":140},"sourceSize":{"w":160,"h":144}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":366,"y":894,"w":296,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":56,"w":296,"h":152},"sourceSize":{"w":296,"h":208}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":1250,"y":1403,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bunker-storm-floor-02.img":{"frame":{"x":1733,"y":906,"w":160,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":190},"sourceSize":{"w":160,"h":192}},"map-bunker-vent-01.img":{"frame":{"x":1187,"y":430,"w":41,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":41,"h":42},"sourceSize":{"w":42,"h":42}},"map-bunker-vent-02.img":{"frame":{"x":366,"y":483,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bunker-vent-03.img":{"frame":{"x":1774,"y":595,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bush-01f.img":{"frame":{"x":78,"y":1321,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-07.img":{"frame":{"x":1774,"y":520,"w":67,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":67,"h":71},"sourceSize":{"w":72,"h":72}},"map-bush-07x.img":{"frame":{"x":221,"y":1280,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-case-basement-01.img":{"frame":{"x":1886,"y":1731,"w":74,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":56},"sourceSize":{"w":74,"h":56}},"map-case-chrys-01.img":{"frame":{"x":1967,"y":706,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-case-deagle-01.img":{"frame":{"x":290,"y":983,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-deagle-02.img":{"frame":{"x":989,"y":1355,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-flare-01.img":{"frame":{"x":1450,"y":1434,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-flare-res-01.img":{"frame":{"x":356,"y":1280,"w":64,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":64,"h":57},"sourceSize":{"w":72,"h":72}},"map-case-hatchet-01.img":{"frame":{"x":228,"y":1225,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-hatchet-res-01.img":{"frame":{"x":288,"y":1328,"w":64,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":64,"h":57},"sourceSize":{"w":72,"h":72}},"map-case-ring-01.img":{"frame":{"x":1967,"y":770,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-chest-01.img":{"frame":{"x":302,"y":1225,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-02.img":{"frame":{"x":376,"y":1225,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-03.img":{"frame":{"x":78,"y":1266,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chimney-01.img":{"frame":{"x":78,"y":1452,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":59},"sourceSize":{"w":60,"h":60}},"map-chute-01.img":{"frame":{"x":1404,"y":1314,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-control-panel-01.img":{"frame":{"x":1065,"y":1355,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-02.img":{"frame":{"x":989,"y":1413,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-03.img":{"frame":{"x":480,"y":1416,"w":48,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":47},"sourceSize":{"w":48,"h":47}},"map-control-panel-04.img":{"frame":{"x":1065,"y":1414,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-05.img":{"frame":{"x":1141,"y":1419,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-06.img":{"frame":{"x":1350,"y":1434,"w":96,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":47},"sourceSize":{"w":96,"h":47}},"map-couch-02.img":{"frame":{"x":1350,"y":1485,"w":96,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":48},"sourceSize":{"w":96,"h":48}},"map-couch-03.img":{"frame":{"x":397,"y":1418,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-couch-res-01.img":{"frame":{"x":1143,"y":430,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"map-crate-01.img":{"frame":{"x":2,"y":1809,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02.img":{"frame":{"x":2,"y":1731,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02sv.img":{"frame":{"x":2,"y":1638,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03.img":{"frame":{"x":2,"y":1537,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-04.img":{"frame":{"x":1639,"y":1538,"w":82,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":82},"sourceSize":{"w":82,"h":82}},"map-crate-05.img":{"frame":{"x":1640,"y":1372,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":62,"h":62},"sourceSize":{"w":62,"h":62}},"map-crate-06.img":{"frame":{"x":1550,"y":1584,"w":82,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":50},"sourceSize":{"w":82,"h":50}},"map-crate-07.img":{"frame":{"x":2,"y":1433,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-08.img":{"frame":{"x":2,"y":1325,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-09.img":{"frame":{"x":2,"y":1225,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-10.img":{"frame":{"x":1964,"y":1731,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-11.img":{"frame":{"x":911,"y":1355,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-14.img":{"frame":{"x":1893,"y":1655,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-14a.img":{"frame":{"x":1804,"y":1680,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-20.img":{"frame":{"x":339,"y":1396,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":54},"sourceSize":{"w":54,"h":54}},"map-crate-res-01.img":{"frame":{"x":1977,"y":1587,"w":69,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":69,"h":64},"sourceSize":{"w":72,"h":72}},"map-crate-res-03.img":{"frame":{"x":855,"y":1143,"w":108,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":77},"sourceSize":{"w":108,"h":78}},"map-decal-club-01.img":{"frame":{"x":78,"y":1515,"w":50,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":57,"w":50,"h":53},"sourceSize":{"w":52,"h":180}},"map-decal-initiative.img":{"frame":{"x":424,"y":1294,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"map-decal-oil-01.img":{"frame":{"x":144,"y":1401,"w":43,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":43,"h":61},"sourceSize":{"w":64,"h":64}},"map-decal-oil-02.img":{"frame":{"x":610,"y":1376,"w":45,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":7,"w":45,"h":50},"sourceSize":{"w":64,"h":64}},"map-decal-oil-03.img":{"frame":{"x":721,"y":1410,"w":44,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":44,"h":46},"sourceSize":{"w":64,"h":64}},"map-decal-oil-06.img":{"frame":{"x":1092,"y":430,"w":47,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":47,"h":43},"sourceSize":{"w":64,"h":64}},"map-door-04.img":{"frame":{"x":1250,"y":1326,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"map-drawers-02.img":{"frame":{"x":1809,"y":1563,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-grill-01.img":{"frame":{"x":356,"y":1341,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"map-hedgehog-01.img":{"frame":{"x":1450,"y":1491,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-hut-res-01.img":{"frame":{"x":1706,"y":1324,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":68,"w":118,"h":118},"sourceSize":{"w":256,"h":256}},"map-outhouse-res.img":{"frame":{"x":1967,"y":834,"w":75,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":62,"y":21,"w":75,"h":66},"sourceSize":{"w":200,"h":156}},"map-oven-01.img":{"frame":{"x":254,"y":1453,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-pipes-02.img":{"frame":{"x":1282,"y":1313,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":118,"h":86},"sourceSize":{"w":119,"h":86}},"map-pot-01.img":{"frame":{"x":195,"y":1531,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-02.img":{"frame":{"x":132,"y":1538,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-03.img":{"frame":{"x":78,"y":1572,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-04.img":{"frame":{"x":721,"y":1359,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-05.img":{"frame":{"x":772,"y":1378,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-res-01.img":{"frame":{"x":659,"y":1415,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":40,"h":40},"sourceSize":{"w":72,"h":72}},"map-recorder-01.img":{"frame":{"x":1309,"y":926,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-02.img":{"frame":{"x":1733,"y":792,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-03.img":{"frame":{"x":1544,"y":1314,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-recorder-04.img":{"frame":{"x":449,"y":1418,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-refrigerator-01.img":{"frame":{"x":610,"y":1325,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-saloon-bar-02.img":{"frame":{"x":1893,"y":1537,"w":27,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":46},"sourceSize":{"w":27,"h":46}},"map-sandbags-01.img":{"frame":{"x":1442,"y":1105,"w":128,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":73},"sourceSize":{"w":128,"h":74}},"map-sandbags-02.img":{"frame":{"x":366,"y":406,"w":57,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":57,"h":73},"sourceSize":{"w":74,"h":74}},"map-shack-res-01.img":{"frame":{"x":607,"y":1127,"w":152,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":24,"w":152,"h":90},"sourceSize":{"w":210,"h":170}},"map-shack-res-02.img":{"frame":{"x":1640,"y":1446,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":34,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-shack-res-03.img":{"frame":{"x":1754,"y":1471,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":34,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-silo-01.img":{"frame":{"x":1314,"y":274,"w":252,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":252,"h":252},"sourceSize":{"w":256,"h":256}},"map-smoke-res.img":{"frame":{"x":1550,"y":1491,"w":85,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":19,"w":85,"h":89},"sourceSize":{"w":128,"h":128}},"map-squash-01.img":{"frame":{"x":78,"y":1390,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":62,"h":58},"sourceSize":{"w":72,"h":72}},"map-squash-res-01.img":{"frame":{"x":1232,"y":430,"w":42,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":42,"h":41},"sourceSize":{"w":48,"h":48}},"map-stairs-broken-01.img":{"frame":{"x":1893,"y":1587,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-stand-01.img":{"frame":{"x":2005,"y":1287,"w":40,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":45},"sourceSize":{"w":40,"h":45}},"map-stone-01.img":{"frame":{"x":153,"y":1191,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-stone-03.img":{"frame":{"x":1724,"y":1184,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":137,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-04.img":{"frame":{"x":2,"y":1885,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-05.img":{"frame":{"x":2,"y":1961,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-res-01.img":{"frame":{"x":191,"y":1417,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02.img":{"frame":{"x":602,"y":1221,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-04.img":{"frame":{"x":488,"y":1294,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"map-stone-res-06.img":{"frame":{"x":290,"y":1157,"w":144,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":64},"sourceSize":{"w":144,"h":64}},"map-stove-01.img":{"frame":{"x":855,"y":1224,"w":104,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":104,"h":81},"sourceSize":{"w":112,"h":88}},"map-stove-02.img":{"frame":{"x":668,"y":1359,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":49,"h":52},"sourceSize":{"w":56,"h":56}},"map-table-01.img":{"frame":{"x":1809,"y":1612,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02.img":{"frame":{"x":1724,"y":1100,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03.img":{"frame":{"x":1720,"y":1647,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-table-res.img":{"frame":{"x":366,"y":554,"w":65,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":65,"h":66},"sourceSize":{"w":72,"h":72}},"map-toilet-01.img":{"frame":{"x":607,"y":1050,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-02.img":{"frame":{"x":1868,"y":1471,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-03.img":{"frame":{"x":810,"y":1255,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-04.img":{"frame":{"x":1733,"y":739,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-res-01.img":{"frame":{"x":142,"y":1480,"w":49,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":49,"h":54},"sourceSize":{"w":64,"h":64}},"map-toilet-res-02.img":{"frame":{"x":2005,"y":1236,"w":40,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":40,"h":47},"sourceSize":{"w":64,"h":64}},"map-tree-03.img":{"frame":{"x":1442,"y":1182,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-04.img":{"frame":{"x":488,"y":1356,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-07su.img":{"frame":{"x":1574,"y":1240,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08f.img":{"frame":{"x":1586,"y":2,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08su.img":{"frame":{"x":1586,"y":261,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-09.img":{"frame":{"x":420,"y":1358,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-res-02.img":{"frame":{"x":312,"y":1454,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-vat-01.img":{"frame":{"x":213,"y":1349,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":64,"h":64},"sourceSize":{"w":72,"h":72}},"map-vat-02.img":{"frame":{"x":706,"y":1255,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-vat-res.img":{"frame":{"x":281,"y":1389,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":5,"w":54,"h":60},"sourceSize":{"w":72,"h":72}},"map-vending-res.img":{"frame":{"x":911,"y":1309,"w":46,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":46,"h":41},"sourceSize":{"w":54,"h":47}},"map-vending-soda-01.img":{"frame":{"x":195,"y":1480,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-wall-03-rounded.img":{"frame":{"x":967,"y":1203,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-03.img":{"frame":{"x":2026,"y":2,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-04.img":{"frame":{"x":1293,"y":430,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wheel-02.img":{"frame":{"x":1897,"y":906,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":148,"h":74},"sourceSize":{"w":156,"h":78}},"map-woodpile-01.img":{"frame":{"x":253,"y":1504,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}}}}]')
      , qm = JSON.parse('[{"meta":{"image":"snow-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-airdrop-01x.img":{"frame":{"x":1805,"y":1602,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02x.img":{"frame":{"x":1889,"y":1602,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":1709,"y":438,"w":200,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":312},"sourceSize":{"w":200,"h":312}},"map-building-greenhouse-floor-02.img":{"frame":{"x":1289,"y":438,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":358,"y":1197,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":840,"y":1276,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":80,"h":74},"sourceSize":{"w":114,"h":90}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":853,"y":2,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1989,"y":395,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1528,"y":1166,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1710,"y":376,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1104,"y":1251,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1889,"y":1259,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1709,"y":1166,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1913,"y":2,"w":114,"h":305},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":305},"sourceSize":{"w":114,"h":322}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":853,"y":627,"w":400,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":730,"w":385,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":385,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":358,"y":1103,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1322,"y":2,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1617,"y":1354,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1617,"y":1473,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1104,"y":1095,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1709,"y":1323,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":620,"y":1103,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1324,"y":1095,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":462,"y":1337,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":391,"y":730,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1710,"y":2,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1661,"y":763,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1324,"y":1235,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1257,"y":763,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1873,"y":1323,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":1048,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":748,"y":1018,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":853,"y":319,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1701,"y":1499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bush-01x.img":{"frame":{"x":1805,"y":1499,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":1973,"y":1678,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chute-01x.img":{"frame":{"x":720,"y":1276,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-complex-warehouse-floor-01.img":{"frame":{"x":586,"y":1197,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":748,"y":730,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2015,"y":1462,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-crate-01x.img":{"frame":{"x":840,"y":1354,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-crate-02x.img":{"frame":{"x":1973,"y":1602,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03x.img":{"frame":{"x":1008,"y":1354,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-planter-06.img":{"frame":{"x":1913,"y":395,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-07.img":{"frame":{"x":782,"y":793,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-02.img":{"frame":{"x":1188,"y":1018,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-res-03.img":{"frame":{"x":2005,"y":1259,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snow-01.img":{"frame":{"x":1913,"y":666,"w":106,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":20,"w":106,"h":87},"sourceSize":{"w":128,"h":128}},"map-snow-02.img":{"frame":{"x":586,"y":1313,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"map-snow-03.img":{"frame":{"x":1889,"y":1166,"w":156,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":156,"h":89},"sourceSize":{"w":180,"h":96}},"map-snow-04.img":{"frame":{"x":782,"y":847,"w":50,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":49},"sourceSize":{"w":64,"h":64}},"map-snow-05.img":{"frame":{"x":1826,"y":376,"w":45,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":45,"h":52},"sourceSize":{"w":64,"h":64}},"map-snow-06.img":{"frame":{"x":1528,"y":1095,"w":89,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":89,"h":56},"sourceSize":{"w":96,"h":64}},"map-snowball-res.img":{"frame":{"x":1284,"y":1251,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-stone-01x.img":{"frame":{"x":1008,"y":1276,"w":75,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":75,"h":74},"sourceSize":{"w":80,"h":80}},"map-stone-03x.img":{"frame":{"x":1873,"y":1462,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":782,"y":730,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02x.img":{"frame":{"x":358,"y":1337,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-table-01x.img":{"frame":{"x":1104,"y":1018,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02x.img":{"frame":{"x":1886,"y":311,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":924,"y":1276,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-tree-10.img":{"frame":{"x":1913,"y":535,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1488,"y":1354,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":125,"h":125},"sourceSize":{"w":128,"h":128}}}}]')
      , Fm = JSON.parse('[{"meta":{"image":"woods-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-pavilion-ceiling-01.img":{"frame":{"x":358,"y":1329,"w":311,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":311,"h":304},"sourceSize":{"w":320,"h":320}},"map-building-pavilion-floor-01.img":{"frame":{"x":370,"y":977,"w":288,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":288},"sourceSize":{"w":288,"h":288}},"map-building-pavilion-res-01.img":{"frame":{"x":1039,"y":1618,"w":89,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":83,"y":81,"w":89,"h":94},"sourceSize":{"w":256,"h":256}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":473,"y":1637,"w":160,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":272},"sourceSize":{"w":160,"h":272}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":352,"h":672},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":672},"sourceSize":{"w":352,"h":688}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":960,"y":1769,"w":96,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":128},"sourceSize":{"w":96,"h":128}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":922,"y":970,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":1329,"w":352,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":352},"sourceSize":{"w":352,"h":352}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":673,"y":1441,"w":208,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":152},"sourceSize":{"w":208,"h":152}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":977,"w":364,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":364,"h":348},"sourceSize":{"w":369,"h":353}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1002,"y":1526,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":885,"y":1441,"w":113,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":113,"h":184},"sourceSize":{"w":113,"h":192}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":455,"y":726,"w":256,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":200},"sourceSize":{"w":256,"h":200}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":662,"y":930,"w":256,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":248},"sourceSize":{"w":256,"h":248}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":1850,"w":304,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":304,"h":152},"sourceSize":{"w":304,"h":152}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":358,"y":2,"w":592,"h":462},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":592,"h":462},"sourceSize":{"w":592,"h":464}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":678,"w":449,"h":295},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":449,"h":295},"sourceSize":{"w":449,"h":297}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":1685,"w":336,"h":161},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":336,"h":161},"sourceSize":{"w":345,"h":161}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":342,"y":1685,"w":127,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":127,"h":328},"sourceSize":{"w":129,"h":337}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":473,"y":1913,"w":191,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":191,"h":105},"sourceSize":{"w":200,"h":105}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":668,"y":1896,"w":187,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":187,"h":113},"sourceSize":{"w":193,"h":113}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":455,"y":468,"w":366,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":366,"h":254},"sourceSize":{"w":369,"h":257}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":859,"y":1896,"w":97,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":97,"h":140},"sourceSize":{"w":97,"h":153}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":825,"y":468,"w":190,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":190,"h":254},"sourceSize":{"w":193,"h":265}},"map-bush-01x.img":{"frame":{"x":1207,"y":1450,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-06.img":{"frame":{"x":1065,"y":1134,"w":95,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":95,"h":94},"sourceSize":{"w":96,"h":96}},"map-bush-07sp.img":{"frame":{"x":1132,"y":1610,"w":67,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":67,"h":71},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":370,"y":1269,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-crate-01x.img":{"frame":{"x":1131,"y":1370,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-crate-02x.img":{"frame":{"x":1131,"y":1450,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03x.img":{"frame":{"x":1086,"y":1048,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-19.img":{"frame":{"x":1060,"y":1716,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-planter-06.img":{"frame":{"x":358,"y":468,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-07.img":{"frame":{"x":863,"y":826,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-02.img":{"frame":{"x":1186,"y":1526,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-res-03.img":{"frame":{"x":933,"y":1397,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snowball-res.img":{"frame":{"x":673,"y":1597,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-stone-01x.img":{"frame":{"x":1086,"y":970,"w":75,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":75,"h":74},"sourceSize":{"w":80,"h":80}},"map-stone-03x.img":{"frame":{"x":897,"y":1629,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":897,"y":1769,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02x.img":{"frame":{"x":1064,"y":1266,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-table-01x.img":{"frame":{"x":358,"y":608,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02x.img":{"frame":{"x":715,"y":826,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":1102,"y":1526,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-tree-05.img":{"frame":{"x":922,"y":726,"w":245,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":245,"h":240},"sourceSize":{"w":256,"h":256}},"map-tree-07.img":{"frame":{"x":960,"y":1901,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-07sp.img":{"frame":{"x":933,"y":1134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08.img":{"frame":{"x":637,"y":1637,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08sp.img":{"frame":{"x":673,"y":1182,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-10.img":{"frame":{"x":933,"y":1266,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1002,"y":1397,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":125,"h":125},"sourceSize":{"w":128,"h":128}},"map-tree-switch-01.img":{"frame":{"x":444,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-02.img":{"frame":{"x":504,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-03.img":{"frame":{"x":564,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-04.img":{"frame":{"x":897,"y":1832,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-woodpile-02.img":{"frame":{"x":715,"y":726,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-woodpile-res-02.img":{"frame":{"x":2,"y":2017,"w":60,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":28},"sourceSize":{"w":64,"h":32}}}}]')
      , jm = {
        cobalt: Mm,
        desert: Cm,
        faction: Pm,
        gradient: Am,
        halloween: Dm,
        loadout: Om,
        main: Em,
        potato: Bm,
        savannah: Rm,
        shared: Lm,
        snow: qm,
        woods: Fm
    }
      , Li = {
        low: jm,
        high: Tm
    };
    function Um(r, t) {
        const i = K.from(t).baseTexture;
        let o = 0;
        return i.valid || (i.on("loaded", s => {
            console.log("Loaded texture", t),
            r.prepare.upload(s)
        }
        ),
        i.on("error", s => {
            console.log("BaseTex load error, retrying", t),
            o++ <= 3 && setTimeout( () => {
                s.source && (s.updateSourceImage(""),
                s.updateSourceImage(t.substring(5, t.length)))
            }
            , (o - 1) * 1e3)
        }
        )),
        i
    }
    const Wm = Object.assign({
        "../atlas-builder/out/cobalt-0-100.png": Un,
        "../atlas-builder/out/cobalt-0-50.png": Wn,
        "../atlas-builder/out/desert-0-100.png": Nn,
        "../atlas-builder/out/desert-0-50.png": Gn,
        "../atlas-builder/out/faction-0-100.png": Vn,
        "../atlas-builder/out/faction-0-50.png": Hn,
        "../atlas-builder/out/gradient-0-100.png": $n,
        "../atlas-builder/out/gradient-0-50.png": Xn,
        "../atlas-builder/out/halloween-0-100.png": Qn,
        "../atlas-builder/out/halloween-0-50.png": Zn,
        "../atlas-builder/out/loadout-0-100.png": Jn,
        "../atlas-builder/out/loadout-0-50.png": Yn,
        "../atlas-builder/out/main-0-100.png": Kn,
        "../atlas-builder/out/main-0-50.png": em,
        "../atlas-builder/out/potato-0-100.png": tm,
        "../atlas-builder/out/potato-0-50.png": rm,
        "../atlas-builder/out/savannah-0-100.png": am,
        "../atlas-builder/out/savannah-0-50.png": im,
        "../atlas-builder/out/shared-0-100.png": om,
        "../atlas-builder/out/shared-0-50.png": sm,
        "../atlas-builder/out/shared-1-100.png": lm,
        "../atlas-builder/out/shared-1-50.png": cm,
        "../atlas-builder/out/shared-2-100.png": nm,
        "../atlas-builder/out/shared-2-50.png": mm,
        "../atlas-builder/out/snow-0-100.png": pm,
        "../atlas-builder/out/snow-0-50.png": um,
        "../atlas-builder/out/woods-0-100.png": hm,
        "../atlas-builder/out/woods-0-50.png": dm
    })
      , Oo = {};
    for (const [r,t] of Object.entries(Wm)) {
        const a = r.split("/").at(-1);
        Oo[a] = t
    }
    function Nm(r, t) {
        const a = Um(r, Oo[t.meta.image])
          , i = new Uo(a,t);
        return i.resolution = a.resolution,
        i.parse(),
        i
    }
    function Gm(r, t) {
        let a = Math.min(window.screen.width, window.screen.height)
          , i = Math.max(window.screen.width, window.screen.height);
        a *= window.devicePixelRatio,
        i *= window.devicePixelRatio;
        const o = i < 1366 && a < 768;
        let s = t.get("highResTex") ? "high" : "low";
        if ((o || D.mobile && !D.tablet || r.type == cr.CANVAS) && (s = "low"),
        r.type == cr.WEBGL) {
            const l = r.gl;
            l.getParameter(l.MAX_TEXTURE_SIZE) < 4096 && (s = "low")
        }
        return console.log("TextureRes", s, "screenDims", window.screen.width, window.screen.height),
        s
    }
    class Vm {
        constructor(t, a, i) {
            this.renderer = t,
            this.audioManager = a,
            this.config = i,
            this.textureRes = Gm(this.renderer, this.config),
            t.prepare.limiter.maxItemsPerFrame = 1
        }
        atlases = {};
        loadTicker = 0;
        loaded = !1;
        textureRes;
        mapName;
        preloadMap;
        isAtlasLoaded(t) {
            return this.atlases[t]?.loaded
        }
        atlasTexturesLoaded(t) {
            if (!this.isAtlasLoaded(t))
                return !1;
            const a = this.atlases[t];
            for (let i = 0; i < a.spritesheets.length; i++)
                if (!a.spritesheets[i].baseTexture.valid)
                    return !1;
            return !0
        }
        loadAtlas(t) {
            if (this.isAtlasLoaded(t))
                return;
            console.log("Load atlas", t),
            this.atlases[t] = this.atlases[t] || {
                loaded: !1,
                spritesheets: []
            };
            const i = (Li[this.textureRes] || Li.low)[t];
            for (let o = 0; o < i.length; o++) {
                const s = Nm(this.renderer, i[o]);
                this.atlases[t].spritesheets.push(s)
            }
            this.atlases[t].loaded = !0
        }
        unloadAtlas(t) {
            if (!this.isAtlasLoaded(t))
                return;
            console.log("Unload atlas", t);
            const a = this.atlases[t];
            for (let i = 0; i < a.spritesheets.length; i++)
                a.spritesheets[i].destroy(!0);
            a.loaded = !1,
            a.spritesheets = []
        }
        loadMapAssets(t) {
            console.log("Load map", t);
            const a = hr[t];
            if (!a)
                throw new Error(`Failed loading mapDef ${this.mapName}`);
            const i = a.assets.atlases
              , o = Object.keys(this.atlases);
            for (let s = 0; s < o.length; s++) {
                const l = o[s];
                i.includes(l) || this.unloadAtlas(l)
            }
            for (let s = 0; s < i.length; s++) {
                const l = i[s];
                this.isAtlasLoaded(l) || this.loadAtlas(l)
            }
            setTimeout( () => {
                this.audioManager.preloadSounds();
                const s = a.assets.audio;
                for (let l = 0; l < s.length; l++) {
                    const c = s[l];
                    let m = je.Sounds[c.channel];
                    if (!m) {
                        const g = je.Channels[c.channel];
                        m = je.Sounds[g.list]
                    }
                    const h = m[c.name]
                      , u = {
                        canCoalesce: h.canCoalesce,
                        channels: h.maxInstances,
                        volume: h.volume
                    };
                    this.audioManager.loadSound({
                        name: c.name,
                        channel: c.channel,
                        path: h.path,
                        options: u
                    })
                }
            }
            , 0)
        }
        update(t) {
            if (!this.loaded) {
                this.loadTicker += t;
                let a = !this.preloadMap;
                const i = Object.keys(this.atlases);
                for (let o = 0; o < i.length; o++) {
                    const s = i[o];
                    this.atlasTexturesLoaded(s) || (a = !1)
                }
                this.audioManager.allLoaded() || (a = !1),
                a && (console.log("Resource load complete", this.loadTicker.toFixed(2)),
                this.loaded = !0)
            }
        }
    }
    var qi = {
        na: {
            https: !0,
            address: "usr.mathsiscoolfun.com:8001",
            l10n: "index-north-america"
        },
        eu: {
            https: !0,
            address: "eur.mathsiscoolfun.com:8001",
            l10n: "index-europe"
        },
        asia: {
            https: !0,
            address: "asr.mathsiscoolfun.com:8001",
            l10n: "index-asia"
        },
        sa: {
            https: !0,
            address: "sa.mathsiscoolfun.com:8001",
            l10n: "index-south-america"
        }
    };
    class Hm {
        constructor(t, a) {
            this.config = t,
            this.localization = a,
            this.config = t,
            this.localization = a
        }
        info = {};
        loaded = !1;
        load() {
            const t = this.localization.getLocale()
              , a = Qt.resolveUrl(`/api/site_info?language=${t}`)
              , i = d("#server-opts")
              , o = d("#team-server-opts");
            for (const s in qi) {
                const l = qi[s]
                  , c = this.localization.translate(l.l10n)
                  , m = `<option value='${s}' data-l10n='${l.l10n}' data-label='${c}'>${c}</option>`;
                i.append(m),
                o.append(m)
            }
            d.ajax(a).done( (s, l) => {
                this.info = s || {},
                this.loaded = !0,
                this.updatePageFromInfo()
            }
            )
        }
        getGameModeStyles() {
            const t = {
                [We.Solo]: "solo",
                [We.Duo]: "duo",
                [We.Squad]: "squad"
            }
              , a = []
              , i = this.info.modes || [];
            for (let o = 0; o < i.length; o++) {
                const s = i[o]
                  , l = (hr[s.mapName] || hr.main).desc
                  , c = l.buttonText ? l.buttonText : t[s.teamMode];
                a.push({
                    icon: l.icon,
                    buttonCss: l.buttonCss,
                    buttonText: c,
                    enabled: s.enabled
                })
            }
            return a
        }
        updatePageFromInfo() {
            if (this.loaded) {
                const t = this.getGameModeStyles();
                for (let m = 0; m < t.length; m++) {
                    const h = t[m]
                      , u = `index-play-${h.buttonText}`
                      , g = d(`#btn-start-mode-${m}`);
                    g.data("l10n", u),
                    g.html(this.localization.translate(u)),
                    (h.icon || h.buttonCss) && (m == 0 ? g.addClass("btn-custom-mode-no-indent") : g.addClass("btn-custom-mode-main"),
                    g.addClass(h.buttonCss),
                    g.css({
                        "background-image": `url(${h.icon})`
                    }));
                    const w = d(`#btn-team-queue-mode-${m}`);
                    if (w.length) {
                        const y = `index-${h.buttonText}`;
                        w.data("l10n", y),
                        w.html(this.localization.translate(y)),
                        h.icon && (w.addClass("btn-custom-mode-select"),
                        w.css({
                            "background-image": `url(${h.icon})`
                        }))
                    }
                    h.enabled || g.addClass("btn-disabled-main")
                }
                const a = this.info.pops;
                if (a) {
                    const m = Object.keys(a);
                    for (let h = 0; h < m.length; h++) {
                        const u = m[h]
                          , g = a[u]
                          , w = d("#server-opts").children(`option[value="${u}"]`)
                          , y = this.localization.translate("index-players");
                        w.text(`${w.data("label")} [${g.playerCount} ${y}]`)
                    }
                }
                let i = !1;
                const o = d("#featured-streamers")
                  , s = d(".streamer-list");
                if (!D.mobile && this.info.twitch) {
                    s.empty();
                    for (let m = 0; m < this.info.twitch.length; m++) {
                        const h = this.info.twitch[m]
                          , u = d("#featured-streamer-template").clone();
                        u.attr("class", "featured-streamer streamer-tooltip").attr("id", "");
                        const g = u.find("a")
                          , w = this.localization.translate(h.viewers == 1 ? "index-viewer" : "index-viewers");
                        g.html(`${h.name} <span>${h.viewers} ${w}</span>`),
                        g.css("background-image", `url(${h.img})`),
                        g.attr("href", h.url),
                        s.append(u),
                        i = !0
                    }
                }
                o.css("visibility", i ? "visible" : "hidden");
                const l = d("#featured-youtuber")
                  , c = this.info.youtube;
                c && d(".btn-youtuber").attr("href", this.info.youtube.link).html(this.info.youtube.name),
                l.css("display", c ? "block" : "none")
            }
        }
    }
    function Eo(r) {
        const t = {
            width: 64,
            height: 64
        };
        return {
            width: Math.round(t.width * Number(r.size) / 4) * 4,
            height: Math.round(t.height * Number(r.size) / 4) * 4
        }
    }
    function Bo(r) {
        const t = nr[r.type]
          , a = Eo(r)
          , i = f.rgbToHex(f.intToRgb(r.color))
          , o = r.stroke;
        let s = t.code.replace(/white/g, i);
        return s = s.replace(/stroke-width=".5"/g, `stroke-width="${o}"`),
        s = s.replace(/width="64"/g, `width="${a.width}"`),
        s = s.replace(/height="64"/g, `height="${a.height}"`),
        `url('data:image/svg+xml;utf8,${s = s.replace(/#/g, "%23")}')`
    }
    function $m(r) {
        const t = Eo(r);
        return `${Bo(r)} ${t.width / 2} ${t.height / 2}, crosshair`
    }
    const Ft = {
        getCursorURL: function(r) {
            return Bo(r)
        },
        setElemCrosshair: function(r, t) {
            let a = "crosshair";
            const i = nr[t.type];
            i && (a = i.cursor ? i.cursor : $m(t)),
            r.css({
                cursor: a
            })
        },
        setGameCrosshair: function(r) {
            Ft.setElemCrosshair(d("#game-area-wrapper"), r);
            const t = nr[r.type]
              , a = !t || t.cursor ? "pointer" : "inherit";
            d(".ui-zoom, .ui-medical, .ui-settings-button, .ui-weapon-switch").css({
                cursor: a
            })
        }
    };
    class Be {
        constructor(t) {
            this.selector = t,
            t.find(".close").click(a => {
                this.hide()
            }
            ),
            this.modalCloseListener = a => {
                d(a.target).closest(".modal-close").length == 0 && (d(a.target).is(this.selector) || !this.checkSelector) && (a.stopPropagation(),
                this.hide())
            }
        }
        checkSelector = !0;
        skipFade = !1;
        visible = !1;
        onShowFn = function() {}
        ;
        onHideFn = function() {}
        ;
        modalCloseListener;
        onShow(t) {
            this.onShowFn = t
        }
        onHide(t) {
            this.onHideFn = t
        }
        isVisible() {
            return this.visible
        }
        show(t) {
            this.visible || (this.visible = !0,
            this.selector.finish(),
            this.selector.css("display", "block"),
            this.onShowFn(),
            t || d(document).on("click touchend", this.modalCloseListener))
        }
        hide() {
            this.visible && (this.visible = !1,
            this.skipFade ? this.selector.css("display", "none") : this.selector.fadeOut(200),
            this.onHideFn(),
            d(document).off("click touchend", this.modalCloseListener))
        }
    }
    function Fi(r) {
        const t = {
            [Te.Top]: "customize-emote-top",
            [Te.Right]: "customize-emote-right",
            [Te.Bottom]: "customize-emote-bottom",
            [Te.Left]: "customize-emote-left",
            [Te.Win]: "customize-emote-win",
            [Te.Death]: "customize-emote-death"
        }
          , a = t[r] || t[Te.Top];
        return d(`#${a}`)
    }
    function ir(r) {
        return function(t, a) {
            const i = U[t.type].rarity || 0
              , o = U[a.type].rarity || 0;
            return i == 0 && o == 0 ? yr(t, a) : i == 0 ? -1 : o == 0 ? 1 : r(t, a)
        }
    }
    function Xm(r, t) {
        return t.timeAcquired == r.timeAcquired ? Ro(r, t) : t.timeAcquired - r.timeAcquired
    }
    function yr(r, t) {
        const a = U[r.type]
          , i = U[t.type];
        return a.name < i.name ? -1 : a.name > i.name ? 1 : 0
    }
    function Qm(r, t) {
        const a = U[r.type].rarity || 0
          , i = U[t.type].rarity || 0;
        return a == i ? yr(r, t) : i - a
    }
    function Ro(r, t) {
        const a = U[r.type]
          , i = U[t.type];
        return !a.category || !i.category || a.category == i.category ? yr(r, t) : a.category - i.category
    }
    const ji = {
        newest: ir(Xm),
        alpha: ir(yr),
        rarity: ir(Qm),
        subcat: ir(Ro)
    };
    class Zm {
        constructor(t, a) {
            this.account = t,
            this.localization = a,
            D.touch || this.categories.push({
                loadoutType: "crosshair",
                gameType: "crosshair",
                categoryImage: "img/gui/loadout-crosshair.svg"
            }),
            this.categories.push({
                loadoutType: "player_icon",
                gameType: "emote",
                categoryImage: "img/gui/loadout-emote.svg"
            }),
            this.modalCustomize = d("#modal-customize"),
            this.modalCustomizeList = d("#modal-customize-list"),
            this.modalCustomizeItemRarity = d("#modal-customize-item-rarity"),
            this.modalCustomizeItemName = d("#modal-customize-item-name"),
            this.modalCustomizeItemLore = d("#modal-customize-item-lore"),
            this.modalCustomizeItemSource = d("#modal-customize-item-source"),
            this.modal = new Be(this.modalCustomize),
            this.modal.onShow( () => {
                this.onShow()
            }
            ),
            this.modal.onHide( () => {
                this.onHide()
            }
            );
            const i = function() {
                d("#modal-screen-block").fadeIn(200)
            }
              , o = () => {
                this.confirmNextItem()
            }
            ;
            this.confirmItemModal = new Be(d("#modal-item-confirm")),
            this.confirmItemModal.onShow(i),
            this.confirmItemModal.onHide(o),
            t.addEventListener("request", this.onRequest.bind(this)),
            t.addEventListener("loadout", this.onLoadout.bind(this)),
            t.addEventListener("items", this.onItems.bind(this)),
            t.addEventListener("pass", this.onPass.bind(this))
        }
        initialized = !1;
        active = !1;
        items = [];
        loadoutDisplay = null;
        loadout = xe.defaultLoadout();
        localPendingConfirm = [];
        localConfirmed = [];
        confirmingItems = !1;
        localAckItems = [];
        categories = [{
            loadoutType: "outfit",
            gameType: "outfit",
            categoryImage: "img/gui/loadout-outfit.svg"
        }, {
            loadoutType: "melee",
            gameType: "melee",
            categoryImage: "img/gui/loadout-melee.svg"
        }, {
            loadoutType: "emote",
            gameType: "emote",
            categoryImage: "img/gui/loadout-emote.svg"
        }, {
            loadoutType: "heal",
            gameType: "heal_effect",
            categoryImage: "img/gui/loadout-heal.svg"
        }, {
            loadoutType: "boost",
            gameType: "boost_effect",
            categoryImage: "img/gui/loadout-boost.svg"
        }];
        selectedItem = {
            prevSlot: null,
            img: "",
            type: ""
        };
        emotesLoaded = !1;
        selectedCatIdx = 0;
        selectedCatItems = [];
        equippedItems = [];
        modalCustomize;
        modalCustomizeList;
        modalCustomizeItemRarity;
        modalCustomizeItemName;
        modalCustomizeItemLore;
        modalCustomizeItemSource;
        picker;
        modal;
        confirmItemModal;
        itemSort;
        selectableCats;
        selectableCatConnects;
        selectableCatImages;
        selectableSlots;
        droppableSlots;
        highlightedSlots;
        itemSelected;
        highlightOpacityMin;
        init() {
            if (!this.initialized) {
                for (let o = 0; o < this.categories.length; o++) {
                    const s = d("<div/>", {
                        class: "modal-customize-cat",
                        "data-idx": o
                    });
                    o == this.categories.length - 1 && s.attr("id", "modal-customize-cat-standalone"),
                    s.append(d("<div/>", {
                        class: "modal-customize-cat-image",
                        css: {
                            "background-image": `url(${this.categories[o].categoryImage})`
                        }
                    })),
                    s.append(d("<div/>", {
                        class: "modal-customize-cat-connect"
                    })),
                    s.append(d("<div/>", {
                        class: "account-alert account-alert-cat"
                    })),
                    d("#modal-customize-header").append(s)
                }
                this.selectableCats = d(".modal-customize-cat"),
                this.selectableCatConnects = d(".modal-customize-cat-connect"),
                this.selectableCatImages = d(".modal-customize-cat-image"),
                this.selectableCats.on("mouseup", o => {
                    const l = d(o.currentTarget).data("idx");
                    this.selectedCatIdx != l && this.selectCat(l)
                }
                ),
                this.itemSort = d("#modal-customize-sort"),
                this.itemSort.on("change", o => {
                    this.sortItems(o.target.value)
                }
                ),
                this.modalCustomizeItemName.on("click", () => {
                    const o = document.getElementsByClassName("customize-list-item-selected");
                    o.length > 0 && o[0].scrollIntoView({
                        behavior: "smooth",
                        block: "start",
                        inline: "nearest"
                    })
                }
                ),
                d("#crosshair-size").on("input", () => {
                    this.updateLoadoutFromDOM()
                }
                ),
                d("#crosshair-stroke").on("input", () => {
                    this.updateLoadoutFromDOM()
                }
                );
                const t = document.getElementById("color-picker");
                this.picker = new window.CP(t,!1,t),
                this.picker.self.classList.add("static"),
                this.picker.on("change", o => {
                    d("#color-picker-hex").val(o),
                    this.loadout?.crosshair && this.updateLoadoutFromDOM()
                }
                );
                const a = document.querySelector("#color-picker-hex")
                  , i = () => {
                    const o = a.value;
                    if (o.length)
                        if (o.length == 6)
                            this.picker.set(`#${o}`),
                            this.picker.fire("change", [o]);
                        else if (o.length == 7 && o[0] == "#")
                            this.picker.set(o),
                            this.picker.fire("change", [o.slice(1)]);
                        else
                            return
                }
                ;
                a.oncut = i,
                a.onpaste = i,
                a.onkeyup = i,
                a.oninput = i,
                this.initialized = !0
            }
        }
        show() {
            this.init(),
            this.modal.show()
        }
        hide() {
            this.modal.hide()
        }
        onShow() {
            this.active = !0,
            this.localAckItems = [];
            for (let t = 0; t < this.items.length; t++) {
                const a = this.items[t];
                a.status < xe.ItemStatus.Ackd && this.localAckItems.push(a)
            }
            this.selectCat(0),
            this.tryBeginConfirmingItems(),
            d("#start-bottom-right, #start-main").fadeOut(200),
            d("#background").hide()
        }
        onHide() {
            this.active = !1,
            xe.modified(this.loadout, this.account.loadout) && this.account.setLoadout(this.loadout),
            this.clearConfirmItemModal(),
            this.modalCustomize.css({
                cursor: "initial"
            }),
            d("#start-bottom-right, #start-main").fadeIn(200),
            d("#background").show()
        }
        onResize() {
            D.mobile && (this.categories[this.selectedCatIdx].loadoutType == "emote" ? d("#modal-customize-list").attr("style", "") : d("#modal-customize-list").attr("style", D.isLandscape ? "" : "height: 380px"))
        }
        onRequest() {
            d("#modal-customize-loading").css("opacity", this.account.requestsInFlight > 0 ? 1 : 0)
        }
        onLoadout(t) {
            this.loadout = xe.validate(t),
            Ft.setGameCrosshair(t.crosshair),
            this.active && this.selectCat(this.selectedCatIdx)
        }
        onItems(t) {
            this.items = xe.getUserAvailableItems(t);
            for (let a = 0; a < this.items.length; a++) {
                const i = this.items[a];
                i.status < xe.ItemStatus.Confirmed && !this.localPendingConfirm.find(o => o.type == i.type) && !this.localConfirmed.find(o => o.type == i.type) && this.localPendingConfirm.push(i),
                i.status < xe.ItemStatus.Ackd && !this.localAckItems.find(o => o.type == i.type) && this.localAckItems.push(i)
            }
            this.active && (this.tryBeginConfirmingItems(),
            this.selectCat(this.selectedCatIdx)),
            this.account.loggedIn && (this.items.find(a => a.type == "unlock_new_account") || this.account.unlock("unlock_new_account"))
        }
        onPass(t) {
            const a = ["facebook", "instagram", "youtube", "twitter"];
            for (let i = 0; i < a.length; i++) {
                const o = a[i]
                  , s = !!t.unlocks[o]
                  , l = d(`.customize-social-unlock[data-lock-reason='${o}']`);
                l.css({
                    display: s ? "none" : "inline-block"
                }),
                l.off("click").on("click", () => {
                    this.account.setPassUnlock(o)
                }
                )
            }
        }
        getCategory(t) {
            for (let a = 0; a < this.categories.length; a++) {
                const i = this.categories[a];
                if (i.gameType == t)
                    return i
            }
            return null
        }
        clearConfirmItemModal() {
            this.localPendingConfirm = [],
            this.localConfirmed = [],
            this.confirmingItems = !1,
            this.confirmItemModal.hide()
        }
        setItemsConfirmed() {
            const t = [];
            for (let a = 0; a < this.items.length; a++) {
                const i = this.items[a];
                i.status < xe.ItemStatus.Confirmed && t.push(i.type)
            }
            t.length > 0 && this.account.setItemStatus(xe.ItemStatus.Confirmed, t)
        }
        setItemsAckd(t) {
            const a = this.categories[t]
              , i = [];
            for (let o = 0; o < this.items.length; o++) {
                const s = this.items[o]
                  , l = U[s.type];
                l && l.type == a.gameType && s?.status < xe.ItemStatus.Ackd && i.push(s.type)
            }
            i.length > 0 && this.account.setItemStatus(xe.ItemStatus.Ackd, i)
        }
        tryBeginConfirmingItems() {
            this.active && !this.confirmingItems && (this.confirmingItems = !0,
            this.confirmNextItem())
        }
        confirmNextItem() {
            this.setItemsConfirmed();
            const t = this.localPendingConfirm.shift();
            if (t) {
                this.localConfirmed.push(t);
                const a = U[t.type]
                  , i = {
                    type: t.type,
                    rarity: a.rarity || 0,
                    displayName: a.name,
                    category: a.type
                }
                  , s = `url(${re.getSvgFromGameType(t.type)})`
                  , l = re.getCssTransformFromGameType(t.type);
                setTimeout( () => {
                    d("#modal-item-confirm-name").html(i.displayName),
                    d("#modal-item-confirm-image-inner").css({
                        "background-image": s,
                        transform: l
                    }),
                    this.confirmItemModal.show()
                }
                , 200)
            } else
                this.confirmingItems = !1,
                d("#modal-screen-block").fadeOut(300)
        }
        sortItems(t) {
            this.selectedCatItems.sort(ji[t]);
            const a = this.categories[this.selectedCatIdx]
              , i = d("<div/>");
            for (let o = 0; o < this.selectedCatItems.length; o++) {
                const s = this.selectedCatItems[o];
                s.outerDiv?.data("idx", o),
                i.append(s.outerDiv)
            }
            this.modalCustomizeList.html(""),
            this.modalCustomizeList.append(i),
            this.selectableSlots.off("mouseup"),
            this.setItemListeners(a.loadoutType)
        }
        setItemListeners(t) {
            if (this.selectableSlots.on("mouseup", a => {
                const i = a.currentTarget;
                if (!d(i).hasClass("customize-list-item-locked")) {
                    if (this.itemSelected && !d(i).hasClass("customize-list-item")) {
                        this.itemSelected = !1;
                        return
                    }
                    this.selectItem(d(i)),
                    this.updateLoadoutFromDOM()
                }
            }
            ),
            t == "emote")
                this.setEmoteDraggable(this.selectableSlots, this),
                this.emotesLoaded || (this.setEmoteDraggable(this.droppableSlots, this),
                this.droppableSlots.on("mouseup", a => {
                    const i = a.currentTarget;
                    if (!d(i).hasClass("customize-list-item-locked")) {
                        if (this.itemSelected && !d(i).hasClass("customize-list-item")) {
                            this.deselectItem();
                            return
                        }
                        this.selectItem(d(i)),
                        this.updateLoadoutFromDOM()
                    }
                }
                ),
                this.droppableSlots.on("drop", a => {
                    a.originalEvent?.preventDefault();
                    const i = a.currentTarget
                      , o = d(i).parent();
                    this.updateSlot(o, this.selectedItem.img, this.selectedItem.type),
                    this.updateLoadoutFromDOM(),
                    this.deselectItem()
                }
                ),
                this.droppableSlots.on("mousedown", a => {
                    if (this.itemSelected) {
                        a.stopPropagation();
                        const i = d(a.currentTarget).parent();
                        this.updateSlot(i, this.selectedItem.img, this.selectedItem.type),
                        this.updateLoadoutFromDOM()
                    }
                }
                ),
                this.droppableSlots.on("dragover", function(a) {
                    a.originalEvent?.preventDefault(),
                    d(this).parent().find(".ui-emote-hl").css("opacity", 1)
                }),
                this.droppableSlots.on("dragleave", a => {
                    a.originalEvent?.preventDefault(),
                    d(a.currentTarget).parent().find(".ui-emote-hl").css("opacity", this.highlightOpacityMin)
                }
                ),
                this.droppableSlots.on("dragend", a => {
                    a.originalEvent?.preventDefault(),
                    this.deselectItem()
                }
                ),
                d(".ui-emote-auto-trash").click(a => {
                    const i = d(a.currentTarget).parent();
                    this.updateSlot(i, "", ""),
                    this.updateLoadoutFromDOM()
                }
                ),
                this.emotesLoaded = !0);
            else if (t == "crosshair") {
                const a = f.intToHex(this.loadout.crosshair.color)
                  , i = [a.slice(1)];
                this.picker.set(a),
                d("#color-picker-hex").val(i),
                d("#crosshair-size").val(this.loadout.crosshair.size),
                d("#crosshair-stroke").val(this.loadout.crosshair.stroke)
            }
        }
        updateLoadoutFromDOM() {
            const t = this.categories[this.selectedCatIdx].loadoutType;
            if (t == "emote")
                for (let a = 0; a < Te.Count; a++) {
                    const o = Fi(a).data("idx")
                      , s = this.equippedItems[o];
                    s?.type ? this.loadout.emotes[a] = s.type : this.loadout.emotes[a] = ""
                }
            else if (t == "crosshair") {
                const a = parseFloat(d("#crosshair-size").val())
                  , i = d("#color-picker-hex").val()
                  , o = parseFloat(d("#crosshair-stroke").val());
                this.loadout.crosshair = {
                    type: this.selectedItem.type,
                    color: f.hexToInt(i),
                    size: Number(a.toFixed(2)),
                    stroke: Number(o.toFixed(2))
                }
            } else
                this.loadout[t] = this.selectedItem.type;
            this.loadout = xe.validate(this.loadout),
            this.loadoutDisplay?.initialized && this.loadoutDisplay.setLoadout(this.loadout),
            this.selectedItem.loadoutType == "crosshair" && this.setSelectedCrosshair()
        }
        selectItem(t, a=!0) {
            const i = t.hasClass("customize-list-item")
              , o = i ? t : t.parent()
              , s = o.find(".customize-item-image")
              , l = o.data("idx")
              , c = o.data("slot") ? this.equippedItems[l] : this.selectedCatItems[l];
            if (!c) {
                this.itemSelected = !1,
                this.selectedItem = {
                    prevSlot: null,
                    img: "",
                    type: ""
                };
                return
            }
            if (c.type == this.selectedItem.type && c.loadoutType == "emote" && this.selectedItem.loadoutType == "emote" && a) {
                this.deselectItem();
                return
            }
            this.itemSelected = !0,
            this.selectedItem = {
                prevSlot: i ? null : o,
                img: s.data("img"),
                type: c.type,
                rarity: c.rarity,
                displayName: c.displayName || "",
                displaySource: c.displaySource || "Unknown",
                displayLore: c.displayLore || "",
                loadoutType: c.loadoutType,
                subcat: c.subcat
            },
            this.modalCustomizeItemName.html(this.selectedItem.displayName);
            const m = this.localization.translate(`loadout-${c.displaySource}`) || this.localization.translate(`${c.displaySource}`) || this.selectedItem.displaySource
              , h = `${this.localization.translate("loadout-acquired")}: ${m}`;
            this.modalCustomizeItemSource.html(h);
            const u = {
                [et.Locked]: "Locked",
                [et.Faces]: "Faces",
                [et.Food]: "Food",
                [et.Animals]: "Animals",
                [et.Logos]: "Logos",
                [et.Other]: "Other",
                [et.Flags]: "Flags",
                [et.Default]: "Default"
            }
              , g = c.loadoutType == "emote" ? `${this.localization.translate("loadout-category")}: ${u[c.subcat]}` : this.selectedItem.displayLore;
            this.modalCustomizeItemLore.html(g);
            const w = ["stock", "common", "uncommon", "rare", "epic", "mythic"]
              , y = ["#c5c5c5", "#c5c5c5", "#12ff00", "#00deff", "#f600ff", "#d96100"]
              , _ = this.localization.translate(`loadout-${w[this.selectedItem.rarity]}`);
            if (this.modalCustomizeItemRarity.html(_),
            this.modalCustomizeItemRarity.css({
                color: y[this.selectedItem.rarity]
            }),
            this.selectedItem.loadoutType == "emote" && this.highlightedSlots.css({
                display: "block",
                opacity: this.highlightOpacityMin
            }),
            this.selectableSlots.removeClass("customize-list-item-selected"),
            i ? t.addClass("customize-list-item-selected") : o.find(".ui-emote-hl").css("opacity", 1),
            this.selectedItem.loadoutType == "crosshair") {
                const b = U[this.selectedItem.type];
                b && b.type == "crosshair" && b.cursor ? d("#modal-content-right-crosshair").css("display", "none") : (d("#modal-content-right-crosshair").css("display", "block"),
                this.picker.exit(),
                this.picker.enter())
            }
            const S = this.localAckItems.findIndex(b => b.type == this.selectedItem.type);
            S !== -1 && (t.find(".account-alert").removeClass("account-alert account-alert-cat"),
            this.localAckItems.splice(S, 1),
            this.setCategoryAlerts())
        }
        updateSlot(t, a, i) {
            const o = this.selectedItem.prevSlot;
            if (this.selectedItem = {},
            o) {
                const s = t.find(".customize-item-image")
                  , l = t.data("idx")
                  , c = this.equippedItems[l];
                let m = "";
                c.type && (m = c.type),
                this.updateSlot(o, s.data("img"), m)
            }
            this.updateSlotData(t, a, i)
        }
        deselectItem() {
            this.itemSelected = !1,
            this.selectedItem = {},
            this.selectableSlots.removeClass("customize-list-item-selected"),
            this.highlightedSlots.css({
                display: "none",
                opacity: 0
            }),
            this.modalCustomizeItemName.html(""),
            this.modalCustomizeItemSource.html(""),
            this.modalCustomizeItemLore.html(""),
            this.modalCustomizeItemRarity.html("")
        }
        updateSlotData(t, a, i) {
            const o = t.find(".customize-emote-slot");
            o.css("background-image", a || "none"),
            o.data("img", a || "none");
            const s = U[i]
              , l = t.data("idx");
            if (s) {
                const c = {
                    loadoutType: "emote",
                    type: i,
                    rarity: s.rarity || 0,
                    displayName: s.name,
                    displayLore: s.lore,
                    subcat: s.category
                };
                this.equippedItems[l] = c
            } else
                this.equippedItems[l] = {}
        }
        selectCat(t) {
            const a = this.selectedCatIdx;
            if (this.selectedCatIdx = t,
            this.setItemsAckd(this.selectedCatIdx),
            a != this.selectedCatIdx) {
                const S = this.categories[a];
                for (let b = this.localAckItems.length - 1; b >= 0; b--) {
                    const A = this.localAckItems[b];
                    U[A.type].type == S.gameType && this.localAckItems.splice(b, 1)
                }
            }
            const i = this.categories[this.selectedCatIdx]
              , o = this.items.filter(S => {
                const b = U[S.type];
                return b && b.type == i.gameType
            }
            )
              , s = i.loadoutType == "emote" || i.loadoutType == "player_icon";
            d("#customize-sort-subcat").css("display", s ? "block" : "none");
            let l = this.itemSort.val();
            !s && l == "subcat" && (l = "newest",
            this.itemSort.val(l)),
            o.sort(ji[l]);
            const c = i.loadoutType == "emote"
              , m = i.loadoutType == "crosshair"
              , h = i.loadoutType == "emote";
            this.loadoutDisplay?.setView(i.loadoutType);
            const u = d(`.modal-customize-cat[data-idx='${this.selectedCatIdx}']`);
            this.selectableCats.removeClass("modal-customize-cat-selected"),
            this.selectableCatConnects.removeClass("modal-customize-cat-connect-selected"),
            this.selectableCatImages.removeClass("modal-customize-cat-image-selected"),
            u.addClass("modal-customize-cat-selected"),
            u.find(".modal-customize-cat-connect").addClass("modal-customize-cat-connect-selected"),
            u.find(".modal-customize-cat-image").addClass("modal-customize-cat-image-selected");
            const g = this.localization.translate(`loadout-title-${i.loadoutType}`).toUpperCase();
            d("#modal-customize-cat-title").html(g),
            d("#modal-content-right-crosshair").css("display", i.loadoutType == "crosshair" ? "block" : "none"),
            d("#modal-content-right-emote").css("display", i.loadoutType == "emote" ? "block" : "none"),
            d("#customize-emote-parent").css("display", c ? "block" : "none"),
            d("#customize-crosshair-parent").css("display", m ? "block" : "none"),
            this.modalCustomizeItemName.html(""),
            this.modalCustomizeItemSource.html(""),
            this.modalCustomizeItemLore.html(""),
            this.modalCustomizeItemRarity.html("");
            const w = function(S) {
                const b = U[S];
                return b?.name ? b.name : S
            };
            this.selectedCatItems = [];
            let y = "";
            const _ = d("<div/>");
            for (let S = 0; S < o.length; S++) {
                const b = o[S]
                  , A = U[b.type]
                  , P = {
                    loadoutType: i.loadoutType,
                    type: b.type,
                    rarity: A.rarity || 0,
                    displayName: A.name,
                    displaySource: w(b.source),
                    displayLore: A.lore,
                    timeAcquired: b.timeAcquired,
                    idx: S,
                    subcat: A.category,
                    outerDiv: null
                }
                  , T = d("<div/>", {
                    class: "customize-list-item customize-list-item-unlocked",
                    "data-idx": S
                })
                  , I = re.getSvgFromGameType(b.type)
                  , C = re.getCssTransformFromGameType(b.type)
                  , q = d("<div/>", {
                    class: "customize-item-image",
                    css: {
                        "background-image": `url(${I})`,
                        transform: C
                    },
                    "data-img": `url(${I})`,
                    draggable: h
                });
                if (T.append(q),
                this.localAckItems.findIndex(E => E.type == b.type) !== -1) {
                    const E = d("<div/>", {
                        class: "account-alert account-alert-cat",
                        css: {
                            display: "block"
                        }
                    });
                    T.append(E)
                }
                if (i.gameType == "crosshair") {
                    const E = {
                        type: P.type,
                        color: 16777215,
                        size: 1,
                        stroke: 0
                    };
                    Ft.setElemCrosshair(T, E)
                }
                _.append(T),
                P.outerDiv = T,
                this.selectedCatItems.push(P),
                y || (i.loadoutType == "crosshair" && P.type == this.loadout.crosshair.type || i.loadoutType != "emote" && P.type == this.loadout[i.loadoutType]) && (y = P.outerDiv)
            }
            if (this.modalCustomizeList.html(""),
            this.modalCustomizeList.append(_),
            this.modalCustomizeList.scrollTop(0),
            i.loadoutType == "emote") {
                this.equippedItems = [];
                for (let S = 0; S < this.loadout.emotes.length; S++) {
                    this.equippedItems.push({});
                    const b = this.loadout.emotes[S];
                    if (U[b]) {
                        const P = `url(${re.getSvgFromGameType(b)})`
                          , T = Fi(S);
                        this.updateSlotData(T, P, b)
                    }
                }
            }
            if (this.selectableSlots = d(".customize-list-item"),
            this.droppableSlots = d(".customize-col"),
            this.highlightedSlots = this.droppableSlots.siblings(".ui-emote-hl"),
            this.highlightOpacityMin = .4,
            this.itemSelected = !1,
            this.setItemListeners(i.loadoutType),
            this.setCategoryAlerts(),
            this.deselectItem(),
            y != "" && (this.selectItem(y),
            i.loadoutType == "crosshair" && this.setSelectedCrosshair(),
            this.modalCustomizeItemName.click()),
            D.browser == "edge")
                if (i.loadoutType == "crosshair") {
                    const S = function(b, A) {
                        const P = b.height() + parseInt(b.css("padding-top")) + parseInt(b.css("padding-bottom"));
                        A.css("height", P)
                    };
                    S(d("#modal-customize-body"), d("#modal-content-left").find(".modal-disabled")),
                    S(d("#modal-content-right-crosshair"), d("#modal-content-right-crosshair").find(".modal-disabled")),
                    d(".modal-disabled").css("display", "block")
                } else
                    d(".modal-disabled").css("display", "none");
            this.onResize()
        }
        setCategoryAlerts() {
            for (let t = 0; t < this.categories.length; t++) {
                const a = this.categories[t]
                  , i = this.localAckItems.filter(o => {
                    const s = U[o.type];
                    return s && s.type == a.gameType
                }
                );
                d(`.modal-customize-cat[data-idx='${t}']`).find(".account-alert-cat").css("display", i.length > 0 ? "block" : "none")
            }
        }
        setEmoteDraggable(t, a) {
            t.on("dragstart", function(i) {
                if (!d(this).hasClass("customize-list-item-locked") && (a.selectItem(d(this), !1),
                D.browser != "edge")) {
                    const o = document.createElement("img");
                    o.src = a.selectedItem.img ? a.selectedItem.img.replace("url(", "").replace(")", "").replace(/\'/gi, "") : "",
                    i.originalEvent?.dataTransfer?.setDragImage(o, 64, 64)
                }
            })
        }
        setSelectedCrosshair() {
            const t = this.loadout.crosshair;
            d("#customize-crosshair-selected").find(".customize-item-image").css({
                "background-image": Ft.getCursorURL(t)
            }),
            Ft.setElemCrosshair(d("#customize-crosshair-selected"), t)
        }
    }
    const Jm = "Survivr Pass 1"
      , Ym = "Top 10 in solos"
      , Km = "Top 8 in duos"
      , e1 = "Top 5 in squads"
      , t1 = "Kill enemies"
      , r1 = "Kill enemies"
      , a1 = "Damage enemies"
      , i1 = "Damage enemies"
      , o1 = "Survived time"
      , s1 = "9mm damage"
      , l1 = "7.62mm damage"
      , c1 = "5.56mm damage"
      , n1 = "12 gauge damage"
      , m1 = "Grenade damage"
      , p1 = "Melee damage"
      , u1 = "Use healing items"
      , h1 = "Use adrenaline items"
      , d1 = "Unlock air drops"
      , g1 = "Destroy crates"
      , f1 = "Destroy toilets"
      , y1 = "Destroy furniture"
      , w1 = "Destroy barrels"
      , _1 = "Destroy lockers"
      , b1 = "Destroy pots"
      , x1 = "Destroy soda machines"
      , S1 = "Kill enemies at: club"
      , k1 = {
        "word-order": "svo",
        "index-create-account": "Create Account",
        "index-create-account-prompt-1": "Log in to access this feature!",
        "index-set-account-name": "Set your account name",
        "index-enter-name": "Enter name",
        "index-finish": "Finish",
        "index-reset-stats": "Reset Stats",
        "index-reset-stats-desc": 'Enter "RESET STATS" to reset your stats:',
        "index-reset-stats-desc-2": "(This does not reset pass progress.)",
        "index-delete-account": "Delete Account",
        "index-delete-account-desc": 'Enter "DELETE" to delete your account:',
        "index-confirm": "Confirm",
        "index-customize-avatar": "Customize Avatar",
        "index-done": "Done",
        "index-account": "Account",
        "index-log-in-with": "Log in with",
        "index-google": "Google",
        "index-twitch": "Twitch",
        "index-discord": "Discord",
        "index-my-stats": "My Stats",
        "index-link-account": "Link Account",
        "index-log-out": "Log Out",
        "index-change-avatar": "Change Avatar",
        "index-change-account-name": "Change Account Name",
        "index-back": "Back",
        "index-link-account-to": "Link account to",
        "index-log-in-desc": "Log In / Create Account",
        "index-logging-in": "Logging in",
        "index-leaderboards": "Leaderboards",
        "index-slogan": "2d Battle Royale",
        "index-region": "Region",
        "index-local": "Local",
        "index-north-america": "North America",
        "index-europe": "Europe",
        "index-asia": "Asia",
        "index-south-america": "South America",
        "index-korea": "South Korea",
        "index-players": "players",
        "index-play-solo": "Play Solo",
        "index-play-duo": "Play Duo",
        "index-play-squad": "Play Squad",
        "index-join-team": "Join Team",
        "index-create-team": "Create Team",
        "index-leave-team": "Leave Team",
        "index-joining-team": "Joining Team",
        "index-creating-team": "Creating Team",
        "index-invite-link": "Invite link",
        "index-invite-code": "Invite code",
        "index-join-team-help": "Got a team link or code? Paste it here:",
        "index-solo": "Solo",
        "index-duo": "Duo",
        "index-squad": "Squad",
        "index-auto-fill": "Auto Fill",
        "index-no-fill": "No Fill",
        "index-waiting-for-leader": "Waiting for leader to start game",
        "index-joining-game": "Joining game",
        "index-game-in-progress": "Game in progress",
        "index-play": "Play",
        "index-customize-loadout": "Customize Emotes",
        "index-twitter-follow": "Twitter Follow",
        "index-youtube-subscribe": "YouTube Subscribe",
        "index-facebook-like": "Facebook Like",
        "index-featured-youtuber": "Featured YouTuber",
        "index-streaming-live": "Streaming Live!",
        "index-viewer": "viewer",
        "index-viewers": "viewers",
        "index-settings": "Settings",
        "index-high-resolution": "High resolution (check to increase visual quality)",
        "index-client-side-interp": "Client side interpolation",
        "index-screen-shake": "Screen shake",
        "index-anon-player-names": "Anonymize player names",
        "index-master-volume": "Master Volume",
        "index-sfx-volume": "SFX Volume",
        "index-music-volume": "Music Volume",
        "index-mobile-announce": "Now available on mobile!",
        "index-mobile-tooltip": "Visit <span>survev.io</span> on your mobile device to play on the go!",
        "index-version": "ver",
        "index-privacy": "privacy",
        "index-attributions": "attributions",
        "index-team-is-full": "Team is full!",
        "index-team-kicked": "You were kicked from the team!",
        "index-failed-joining-team": "Failed joining team.",
        "index-failed-creating-team": "Failed creating team.",
        "index-failed-finding-game": "Failed finding game.",
        "index-failed-joining-game": "Failed joining game.",
        "index-lost-connection": "Lost connection to team.",
        "index-host-closed": "Host closed the connection.",
        "index-invalid-protocol": "Old client version.",
        "index-view-more": "View More",
        "index-back-to-main": "Back to Main Menu",
        "index-most-kills": "Most kills",
        "index-total-kills": "Total kills",
        "index-total-wins": "Total wins",
        "index-top-5-percent": "Top 5 percent",
        "index-kill-death-ratio": "Kill-death ratio",
        "index-mode": "Mode",
        "index-for": "For",
        "index-today": "Today",
        "index-this-week": "This week",
        "index-all-time": "All time",
        "index-top-100": "TOP 100",
        "index-rank": "Rank",
        "index-player": "Player",
        "index-total-games": "Total Games",
        "index-controls": "Controls",
        "index-movement": "Movement",
        "index-movement-ctrl": "W, A, S, D",
        "index-aim": "Aim",
        "index-aim-ctrl": "Mouse",
        "index-punch": "Melee",
        "index-shoot": "Shoot",
        "index-shoot-ctrl": "Left-Click",
        "index-change-weapons": "Change Weapons",
        "index-change-weapons-ctrl": "1 through 4 or Scroll Wheel",
        "index-stow-weapons": "Stow Weapons (Melee Mode)",
        "index-stow-weapons-ctrl": "3 or E",
        "index-swap-weapons": "Swap to Previous Weapon",
        "index-swap-weapons-ctrl": "Q",
        "index-swap-weapon-slots": "Switch Gun Slots",
        "index-swap-weapon-slots-ctrl": "T or drag gun to other slot",
        "index-reload": "Reload",
        "index-reload-ctrl": "R",
        "index-scope-zoom": "Scope Zoom",
        "index-scope-zoom-ctrl": "Left-Click on Zoom",
        "index-pickup": "Pickup",
        "index-loot": "Loot",
        "index-revive": "Revive",
        "index-pickup-ctrl": "F",
        "index-use-medical": "Use Medical Item",
        "index-use-medical-ctrl": "Left-Click on Item or 7 through 0",
        "index-drop-item": "Drop Item",
        "index-drop-item-ctrl": "Right-Click on Item",
        "index-cancel-action": "Cancel Action",
        "index-cancel-action-ctrl": "X",
        "index-view-map": "View Map",
        "index-view-map-ctrl": "M or G",
        "index-toggle-minimap": "Toggle Minimap",
        "index-toggle-minimap-ctrl": "V",
        "index-use-ping": "Use Team Ping Wheel",
        "index-use-ping-ctrl": "Hold C, then hold Right-Click and drag mouse, then release Right-Click",
        "index-use-emote": "Use Emote Wheel",
        "index-use-emote-ctrl": "Hold Right-Click and drag mouse, then release Right-Click",
        "index-how-to-play": "How to Play",
        "index-tips-1-desc": "The goal of survev.io is to be the last player standing. You only live once per game - there is no respawn!",
        "index-tips-2": "2D PUBG",
        "index-tips-2-desc": "If you've played other battle royale games like PUBG, Fortnite or Apex Legends, then you're already halfway there! Think of survev.io as 2D PUBG (with slightly less desync and more chicken).",
        "index-tips-3": "Loot and Kill",
        "index-tips-3-desc": "You'll begin the game with no items other than a simple backpack. Move around the map to find loot: weapons, ammo, scopes, and medical items. Eliminate other players and you can take their loot!",
        "index-tips-4": "Red = Bad!",
        "index-tips-4-desc": "Players aren't the only thing that can hurt you. The deadly red zone will move in from the sides of the map and deal increasingly greater damage if you stand in it. Keep an eye on the map and stay safe.",
        "index-movement-ctrl-touch": "Left stick",
        "index-aim-ctrl-touch": "Right stick",
        "index-shoot-ctrl-touch": "Drag right stick outside stick border",
        "index-change-weapons-ctrl-touch": "Tap weapon slot",
        "index-reload-ctrl-touch": "Tap equipped ammo counter",
        "index-scope-zoom-ctrl-touch": "Tap zoom item",
        "index-pickup-ctrl-touch": "Tap interaction button or loot name",
        "index-use-medical-ctrl-touch": "Tap medical item",
        "index-drop-item-ctrl-touch": "Touch and hold item",
        "index-cancel-action-ctrl-touch": "Tap interaction button",
        "index-view-map-ctrl-touch": "Tap minimap",
        "index-use-ping-ctrl-touch": "View map and tap anywhere on map",
        "index-use-emote-ctrl-touch": "Tap surviv icon",
        "index-loadout": "Loadout",
        "loadout-title-outfit": "Outfit Skin",
        "loadout-title-melee": "Melee Skin",
        "loadout-title-emote": "Emotes",
        "loadout-title-heal": "Heal Particles",
        "loadout-title-boost": "Boost Particles",
        "loadout-title-crosshair": "Crosshair",
        "loadout-title-player_icon": "Player Icon",
        "loadout-newest": "Newest",
        "loadout-alpha": "Alpha",
        "loadout-rarity": "Rarity",
        "loadout-size": "Size",
        "loadout-stroked": "Stroked",
        "loadout-stock": "Stock",
        "loadout-common": "Common",
        "loadout-uncommon": "Uncommon",
        "loadout-rare": "Rare",
        "loadout-epic": "Epic",
        "loadout-mythic": "Mythic",
        "loadout-acquired": "Acquired",
        "loadout-category": "Category",
        "loadout-standard-issue": "Standard Issue",
        "loadout-new-account": "Account Created",
        "quest-login-prompt": "Log in to get quests!",
        "quest-refresh-prompt": "Get a new quest?",
        pass_survivr1: Jm,
        quest_top_solo: Ym,
        quest_top_duo: Km,
        quest_top_squad: e1,
        quest_kills: t1,
        quest_kills_hard: r1,
        quest_damage: a1,
        quest_damage_hard: i1,
        quest_survived: o1,
        quest_damage_9mm: s1,
        quest_damage_762mm: l1,
        quest_damage_556mm: c1,
        quest_damage_12gauge: n1,
        quest_damage_grenade: m1,
        quest_damage_melee: p1,
        quest_heal: u1,
        quest_boost: h1,
        quest_airdrop: d1,
        quest_crates: g1,
        quest_toilets: f1,
        quest_furniture: y1,
        quest_barrels: w1,
        quest_lockers: _1,
        quest_pots: b1,
        quest_vending: x1,
        quest_club_kills: S1,
        "game-alive": "Alive",
        "game-reloading": "Reloading",
        "game-use": "Use",
        "game-using": "Using",
        "game-reviving": "Reviving",
        "game-revive-teammate": "Revive Teammate",
        "game-revive-self": "Revive Self",
        "game-equip": "Equip",
        "game-cancel": "Cancel",
        "game-open-door": "Open Door",
        "game-close-door": "Close Door",
        "game-unlock": "Unlock",
        "game-You": "You",
        "game-you": "you",
        "game-themselves": "themselves",
        "game-yourself": "yourself",
        "game-you-died": "died",
        "game-player-died": "died",
        "game-with": "with",
        "game-knocked-out": "knocked out",
        "game-killed": "killed",
        "game-finally-killed": "finally killed",
        "game-finally-bled-out": "finally bled out",
        "game-died-outside": "died outside the safe zone",
        "game-the-red-zone": "The red zone",
        "game-crushed": "crushed",
        "game-the-air-drop": "The air drop",
        "game-the-air-strike": "The air strike",
        "game-an-air-strike": "an air strike",
        "game-waiting-for-players": "Waiting for players",
        "game-spectating": "Spectating",
        "game-red-zone-advances": "Red zone advances in",
        "game-red-zone-advancing": "Red zone advancing! Move to the safe zone",
        "game-seconds": "seconds",
        "game-minutes": "minutes",
        "game-minute": "minute",
        "game-m": "m",
        "game-s": "s",
        "game-not-enough-space": "Not enough space!",
        "game-item-already-owned": "Item already owned!",
        "game-item-already-equipped": "Item already equipped!",
        "game-better-item-equipped": "Better item equipped!",
        "game-gun-cannot-fire": "Gun cannot be fired here!",
        "game-waiting-for-new-leader": "Waiting for new leader",
        "game-waiting-for-hunted": "Searching for the Hunted",
        "game-play-new-game": "Play New Game",
        "game-spectate": "Spectate",
        "game-full-screen": "Full Screen",
        "game-aim-line": "Aim Line",
        "game-sound": "Sound",
        "game-quit-game": "Quit Game",
        "game-return-to-game": "Return to Game",
        "game-hide-match-stats": "Hide Match Stats",
        "game-view-match-stats": "View Match Stats",
        "game-previous-teammate": "Previous Teammate",
        "game-next-teammate": "Next Teammate",
        "game-spectate-previous": "Previous Player",
        "game-spectate-next": "Next Player",
        "game-leave-game": "Leave Game",
        "game-your-results": "Your Results",
        "game-chicken": "Winner winner chicken dinner!",
        "game-turkey": "Winner winner turkey dinner!",
        "game-won-the-game": "won the game.",
        "game-team-eliminated": "Your team was eliminated.",
        "game-solo-rank": "Solo Rank",
        "game-duo-rank": "Duo Rank",
        "game-squad-rank": "Squad Rank",
        "game-rank": "Rank",
        "game-team-rank": "Team Rank",
        "game-team-kills": "Team Kills",
        "game-kill": "Kill",
        "game-kills": "Kills",
        "game-damage-dealt": "Damage Dealt",
        "game-damage-taken": "Damage Taken",
        "game-survived": "Survived",
        "game-backpack00": "Pouch",
        "game-backpack01": "Small Pack",
        "game-backpack02": "Regular Pack",
        "game-backpack03": "Military Pack",
        "game-bandage": "Bandage",
        "game-bandage-tooltip": "Left-click to restore 15 health.",
        "game-healing-tooltip": "Cannot heal past 75 health.",
        "game-healthkit": "Med Kit",
        "game-healthkit-tooltip": "Left-click to restore 100 health.",
        "game-soda": "Soda",
        "game-soda-tooltip": "Left-click to boost adrenaline by 25.",
        "game-adrenaline-tooltip": "Adrenaline restores health over time.",
        "game-painkiller": "Pills",
        "game-painkiller-tooltip": "Left-click to boost adrenaline by 50.",
        "game-9mm": "9mm",
        "game-9mm-tooltip": "Ammo for M9, G18C, M93R, P30L, MP5, MAC-10, UMP9, CZ-3A1 and Vector.",
        "game-12gauge": "12 gauge",
        "game-12gauge-tooltip": "Ammo for M870, M1100, SPAS-12, Saiga-12, USAS-12, Super 90 and MP220.",
        "game-762mm": "7.62mm",
        "game-762mm-tooltip": "Ammo for AK-47, SCAR-H, M39, Mosin, SV-98, M1, BAR, AN-94, PKP, Groza, OT-38 and DP-28.",
        "game-556mm": "5.56mm",
        "game-556mm-tooltip": "Ammo for FAMAS, M416, M4A1-S, QBB-97, Mk 12, Scout Elite, and M249.",
        "game-50AE": ".50 AE",
        "game-50AE-tooltip": "Ammo for DEagle 50.",
        "game-308sub": ".308 Subsonic",
        "game-308sub-tooltip": "Ammo for AWM-S.",
        "game-flare": "Flare",
        "game-flare-tooltip": "Ammo for Flare Gun.",
        "game-45acp": ".45 ACP",
        "game-45acp-tooltip": "Ammo for M1911, M1A1, Model 94, Vector and Peacemaker.",
        "game-chest01": "Level 1 Vest",
        "game-chest02": "Level 2 Vest",
        "game-chest03": "Level 3 Vest",
        "game-chest04": "Level 4 Vest",
        "game-helmet01": "Level 1 Helmet",
        "game-helmet02": "Level 2 Helmet",
        "game-helmet03": "Level 3 Helmet",
        "game-helmet03_leader": "Commander Helmet",
        "game-helmet03_forest": "Shishigami no Kabuto",
        "game-helmet03_moon": "Tsukuyomi no Kabuto",
        "game-helmet03_lt": "Lieutenant Helmet",
        "game-helmet03_lt_aged": "Lieutenant Helmet",
        "game-helmet03_potato": "K-pot-ato",
        "game-helmet03_marksman": "Marksman Helmet",
        "game-helmet04_lone_survivr": "Lone Survivr Helmet",
        "game-helmet04_leader": "Commander Helmet",
        "game-1xscope": "1x Scope",
        "game-2xscope": "2x Scope",
        "game-4xscope": "4x Scope",
        "game-8xscope": "8x Scope",
        "game-15xscope": "15x Scope",
        "game-level-1": "Lvl. 1",
        "game-level-2": "Lvl. 2",
        "game-level-3": "Lvl. 3",
        "game-level-4": "Lvl. 4",
        "game-outfitBase": "Basic Outfit",
        "game-outfitRoyalFortune": "Royal Fortune",
        "game-outfitKeyLime": "Key Lime",
        "game-outfitCobaltShell": "Cobalt Shell",
        "game-outfitCarbonFiber": "Carbon Fiber",
        "game-outfitDarkGloves": "The Professional",
        "game-outfitDarkShirt": "The Semi-Pro",
        "game-outfitGhillie": "Ghillie Suit",
        "game-outfitCamo": "Forest Camo",
        "game-outfitRed": "Target Practice",
        "game-outfitWhite": "Arctic Avenger",
        "game-outfitWoodland": "Woodland Combat",
        "game-outfitJester": "Jester's Folly",
        "game-outfitPrisoner": "The New Black",
        "game-outfitCasanova": "Casanova Silks",
        "game-outfitKhaki": "The Initiative",
        "game-outfitCoral": "Coral Guise",
        "game-outfitAqua": "Aquatic Avenger",
        "game-outfitIslander": "Island Time",
        "game-outfitMeteor": "Falling Star",
        "game-outfitHeaven": "Celestial Garb",
        "game-outfitWaterElem": "Water Elemental",
        "game-outfitVerde": "Poncho Verde",
        "game-outfitLumber": "Woodcutter's Wrap",
        "game-outfitImperial": "Imperial Seal",
        "game-outfitPineapple": "Valiant Pineapple",
        "game-outfitTarkhany": "Tarkhany Regal",
        "game-outfitDesertCamo": "Desert Camo",
        "game-outfitDesertGhillie": "Desert Ghillie",
        "game-outfitElf": "Tallow's Little Helper",
        "game-outfitSpetsnaz": "Siberian Assault",
        "game-outfitDarkGhillie": "Incursion Ghillie",
        "game-outfitRedLeaderAged": "Red Victorious",
        "game-outfitBlueLeaderAged": "Stifled Blue",
        "game-outfitWoodsCloak": "Greencloak",
        "game-outfitSpringGhillie": "Vernal Ghillie",
        "game-outfitNoir": "Neo Noir",
        "game-outfitSummerGhillie": "Verdant Ghillie",
        "game-outfitWheat": "Splintered Wheat",
        "game-outfitDev": "Developer Swag",
        "game-outfitMod": "Discord Moderatr",
        "game-outfitParma": "PARMA Jumpsuit",
        "game-outfitParmaPrestige": "The Core Jumpsuit",
        "game-outfitTurkey": "Fowl Facade",
        "game-outfitBarrel": "Fish in a Barrel",
        "game-outfitWoodBarrel": "Fish in a Wood Barrel",
        "game-outfitStone": "Stoneskin",
        "game-outfitTree": "Barkskin",
        "game-outfitTreeSpooky": "Spoopy Barkskin",
        "game-outfitStump": "Dead Wood",
        "game-outfitBush": "Bush Wookie",
        "game-outfitLeafPile": "Sneaky Leaf",
        "game-outfitCrate": "Guy in a Box",
        "game-outfitTable": "Yard Sale",
        "game-outfitSoviet": "Comrade in a Box",
        "game-outfitAirdrop": "Hot Drop",
        "game-outfitOven": "Half-baked",
        "game-outfitRefrigerator": "Cold Fusion",
        "game-outfitVending": "OKAMI Cola Machine",
        "game-outfitPumpkin": "Pumpkin Head",
        "game-outfitWoodpile": "Deader Wood",
        "game-outfitToilet": "Size Two",
        "game-outfitBushRiver": "Lilyveil",
        "game-outfitCrab": "Crabby Camo",
        "game-outfitStumpAxe": "Axe-querade",
        "game-fists": "Fists",
        "game-knuckles_rusted": "Knuckles Rusted",
        "game-hud-knuckles_rusted": "Knuckles",
        "game-knuckles_heroic": "Knuckles Heroic",
        "game-hud-knuckles_heroic": "Knuckles",
        "game-karambit_rugged": "Karambit Rugged",
        "game-hud-karambit_rugged": "Karambit",
        "game-karambit_prismatic": "Karambit Prismatic",
        "game-hud-karambit_prismatic": "Karambit",
        "game-karambit_drowned": "Karambit Drowned",
        "game-hud-karambit_drowned": "Karambit",
        "game-bayonet_rugged": "Bayonet Rugged",
        "game-hud-bayonet_rugged": "Bayonet",
        "game-bayonet_woodland": "Bayonet Woodland",
        "game-hud-bayonet_woodland": "Bayonet",
        "game-huntsman_rugged": "Huntsman Rugged",
        "game-hud-huntsman_rugged": "Huntsman",
        "game-huntsman_burnished": "Huntsman Burnished",
        "game-hud-huntsman_burnished": "Huntsman",
        "game-bowie_vintage": "Bowie Vintage",
        "game-hud-bowie_vintage": "Bowie",
        "game-bowie_frontier": "Bowie Frontier",
        "game-hud-bowie_frontier": "Bowie",
        "game-woodaxe": "Wood Axe",
        "game-woodaxe_bloody": "Wood Axe Bloodstained",
        "game-hud-woodaxe_bloody": "Wood Axe",
        "game-fireaxe": "Fire Axe",
        "game-katana": "Katana",
        "game-katana_rusted": "Katana Rusted",
        "game-hud-katana_rusted": "Katana",
        "game-katana_orchid": "Katana Orchid",
        "game-hud-katana_orchid": "Katana",
        "game-naginata": "Naginata",
        "game-hud-naginata": "Naginata",
        "game-machete_taiga": "Machete Taiga",
        "game-hud-machete_taiga": "Machete",
        "game-kukri_trad": "Tallow's Kukri",
        "game-hud-kukri_trad": "Kukri",
        "game-bonesaw_rusted": "Bonesaw Rusted",
        "game-hud-bonesaw_rusted": "Bonesaw",
        "game-crowbar_recon": "Crowbar Carbon",
        "game-hud-crowbar_recon": "Crowbar",
        "game-stonehammer": "Stone Hammer",
        "game-sledgehammer": "Sledgehammer",
        "game-hook": "Hook",
        "game-pan": "Pan",
        "game-crowbar_scout": "Scouting Crowbar",
        "game-hud-crowbar_scout": "Crowbar",
        "game-bonesaw_healer": "The Separator",
        "game-hud-bonesaw_healer": "Bonesaw",
        "game-kukri_sniper": "Marksman's Recurve",
        "game-hud-kukri_sniper": "Kukri",
        "game-katana_demo": "Hakai no Katana",
        "game-hud-katana_demo": "Katana",
        "game-spade_assault": "Trench Spade",
        "game-hud-spade_assault": "Spade",
        "game-warhammer_tank": "Panzerhammer",
        "game-hud-warhammer_tank": "War Hammer",
        "game-ak47": "AK-47",
        "game-scar": "SCAR-H",
        "game-an94": "AN-94",
        "game-groza": "Groza",
        "game-grozas": "Groza-S",
        "game-dp28": "DP-28",
        "game-mosin": "Mosin-Nagant",
        "game-sv98": "SV-98",
        "game-m39": "M39 EMR",
        "game-garand": "M1 Garand",
        "game-svd": "SVD-63",
        "game-blr": "BLR 81",
        "game-mp5": "MP5",
        "game-mac10": "MAC-10",
        "game-ump9": "UMP9",
        "game-vector": "Vector",
        "game-vector45": "Vector",
        "game-scorpion": "CZ-3A1",
        "game-vss": "VSS",
        "game-m870": "M870",
        "game-m1100": "M1100",
        "game-m1014": "Super 90",
        "game-mp220": "MP220",
        "game-usas": "USAS-12",
        "game-saiga": "Saiga-12",
        "game-spas12": "SPAS-12",
        "game-m9": "M9",
        "game-m9_dual": "Dual M9",
        "game-hud-m9_dual": "M9",
        "game-m9_cursed": "M9 Cursed",
        "game-m93r": "M93R",
        "game-m93r_dual": "Dual M93R",
        "game-hud-m93r_dual": "M93R",
        "game-glock": "G18C",
        "game-glock_dual": "Dual G18C",
        "game-hud-glock_dual": "G18C",
        "game-p30l": "P30L",
        "game-p30l_dual": "Dual P30L",
        "game-ot38": "OT-38",
        "game-ot38_dual": "Dual OT-38",
        "game-hud-ot38_dual": "OT-38",
        "game-ots38": "OTs-38",
        "game-ots38_dual": "Dual OTs-38",
        "game-hud-ots38_dual": "OTs-38",
        "game-deagle": "DEagle 50",
        "game-deagle_dual": "Dual DEagle 50",
        "game-hud-deagle_dual": "DEagle 50",
        "game-flare_gun": "Flare Gun",
        "game-flare_gun_dual": "Dual Flare Gun",
        "game-hud-flare_gun_dual": "Flare Gun",
        "game-famas": "FAMAS",
        "game-hk416": "M416",
        "game-m4a1": "M4A1-S",
        "game-mk12": "Mk 12 SPR",
        "game-m249": "M249",
        "game-qbb97": "QBB-97",
        "game-scout_elite": "Scout Elite",
        "game-l86": "L86A2",
        "game-awc": "AWM-S",
        "game-scarssr": "Mk 20 SSR",
        "game-model94": "Model 94",
        "game-colt45": "Peacemaker",
        "game-colt45_dual": "Dual Peacemaker",
        "game-hud-colt45_dual": "Peacemaker",
        "game-mkg45": "Mk45G",
        "game-m1911": "M1911",
        "game-m1911_dual": "Dual M1911",
        "game-hud-m1911_dual": "M1911",
        "game-m1a1": "M1A1",
        "game-bar": "BAR M1918",
        "game-pkp": "PKP Pecheneg",
        "game-frag": "Frag Grenade",
        "game-hud-frag": "Frag",
        "game-smoke": "Smoke Grenade",
        "game-hud-smoke": "Smoke",
        "game-mirv": "MIRV Grenade",
        "game-hud-mirv": "MIRV",
        "game-mirv_mini": "MIRV Grenade",
        "game-martyr_nade": "Martyrdom",
        "game-strobe": "Strobe",
        "game-hud-strobe": "Strobe",
        "game-snowball": "Snowball",
        "game-hud-snowball": "Snowball",
        "game-snowball_heavy": "Snowball",
        "game-potato": "Potato",
        "game-hud-potato": "Potato",
        "game-potato_heavy": "Potato",
        "game-potato_cannon": "Potato Cannon",
        "game-potato_cannonball": "Potato Cannon",
        "game-potato_smg": "Spud Gun",
        "game-potato_smgshot": "Spud Gun",
        "game-bugle": "Bugle",
        "game-barrel_01": "a barrel",
        "game-barrel_01b": "a barrel",
        "game-silo_01": "a silo",
        "game-oven_01": "an oven",
        "game-control_panel_01": "Control Panel",
        "game-control_panel_02": "Control Panel",
        "game-control_panel_03": "a computer terminal",
        "game-control_panel_04": "a computer terminal",
        "game-control_panel_06": "a computer terminal",
        "game-power_box_01": "a power box",
        "game-airdrop_crate_01": "Air Drop",
        "game-airdrop_crate_02": "Air Drop",
        "game-stove_01": "a stove",
        "game-grill_01": "a grill",
        "game-propane_01": "a propane tank",
        "index-play-50v50": "Play 50v50",
        "index-50v50": "50v50",
        "game-red-team": "Red Team",
        "game-blue-team": "Blue Team",
        "game-red-leader": "Red Commander",
        "game-blue-leader": "Blue Commander",
        "game-is-down": "is down",
        "game-is-dead": "is dead",
        "game-promoted-to": "promoted to",
        "game-youve-been-promoted-to": "You've been promoted to",
        "game-leader": "Commander",
        "game-lieutenant": "Lieutenant",
        "game-medic": "Medic",
        "game-marksman": "Marksman",
        "game-recon": "Recon",
        "game-grenadier": "Grenadier",
        "game-bugler": "Bugler",
        "game-kill_leader": "Kill Leader",
        "game-the_hunted": "The Hunted",
        "game-last_man": "Lone Survivr",
        "game-woods_king": "The Woods King",
        "game-healer": "Medic",
        "game-demo": "Demo",
        "game-tank": "Tank",
        "game-scout": "Scout",
        "game-sniper": "Sniper",
        "game-assault": "Assault",
        "game-select-class": "SELECT A CLASS",
        "game-enter-game": "ENTER GAME",
        "game-leadership": "Leadership",
        "game-leadership-desc": "Max adrenaline.</br>Increased size.",
        "game-firepower": "Firepower",
        "game-firepower-desc": "High-capacity magazines.",
        "game-gotw": "Gift of the Woods",
        "game-gotw-desc": "Restore health over time.</br>Increased size.",
        "game-windwalk": "Windwalk",
        "game-windwalk-desc": "When taking fire, gain a short burst of speed.",
        "game-rare_potato": "Rare Potato",
        "game-rare_potato-desc": "Always rotate to a high quality weapon.",
        "game-aoe_heal": "Mass Medicate",
        "game-aoe_heal-desc": "Reviving and using medical items affects all nearby players.",
        "game-endless_ammo": "Endless Ammo",
        "game-endless_ammo-desc": "Guns always reload to full.",
        "game-steelskin": "Cast Ironskin",
        "game-steelskin-desc": "Take reduced damage and reflect enemy bullets.</br>Increased size.",
        "game-splinter": "Splinter Rounds",
        "game-splinter-desc": "Rounds fragment into three less powerful bullets.",
        "game-small_arms": "Small Arms",
        "game-small_arms-desc": "Move faster with weapons deployed.</br>Decreased size.",
        "game-takedown": "Takedown",
        "game-takedown-desc": "Kills grant health, boost and a short burst of speed.",
        "game-field_medic": "Combat Medic",
        "game-field_medic-desc": "Move quickly while healing.",
        "game-tree_climbing": "One With Nature",
        "game-tree_climbing-desc": "Move through trees. Move faster in water.",
        "game-scavenger": "Scavenger",
        "game-scavenger-desc": "Obstacles drop additional items when destroyed.",
        "game-scavenger_adv": "Master Scavenger",
        "game-scavenger_adv-desc": "Obstacles drop additional high-quality items when destroyed.",
        "game-hunted": "The Hunted",
        "game-hunted-desc": "Your location is revealed to all enemies.",
        "game-chambered": "One In The Chamber",
        "game-chambered-desc": "First and last round in each magazine deal bonus damage.</br>Does not apply to shotguns.",
        "game-martyrdom": "Martyrdom",
        "game-martyrdom-desc": "Release several live grenades upon death.",
        "game-targeting": "High-Value Targets",
        "game-targeting-desc": "Bullets deal bonus damage to players with perks.",
        "game-bonus_45": ".45 In The Chamber",
        "game-bonus_45-desc": ".45 ACP bullets deal bonus damage.",
        "game-broken_arrow": "Broken Arrow",
        "game-broken_arrow-desc": "Air strikes call in two additional fighters.",
        "game-fabricate": "Fabricate",
        "game-fabricate-desc": "Periodically fill your pack with frag grenades.",
        "game-self_revive": "Revivify",
        "game-self_revive-desc": "You can revive yourself when downed.",
        "game-bonus_9mm": "9mm Overpressure",
        "game-bonus_9mm-desc": "9mm bullets have increased speed, range, damage and spread.",
        "game-flak_jacket": "Flak Jacket",
        "game-flak_jacket-desc": "Greatly reduces damage from explosions and shrapnel.",
        "game-explosive": "Explosive Rounds",
        "game-explosive-desc": "Bullets explode on impact.",
        "game-bonus_assault": "Hollow-points",
        "game-bonus_assault-desc": "All your bullets deal bonus damage.",
        "game-inspiration": "Inspiration",
        "game-inspiration-desc": "Your bugle call grants nearby allies a short burst of speed.",
        "game-final_bugle": "Last Breath",
        "game-final_bugle-desc": "When you die, nearby allies are bloodlusted for a short period of time.",
        "game-halloween_mystery": "Trick or Treat?",
        "game-halloween_mystery-desc": "Could be either.",
        "game-trick_nothing": "One With Nothing",
        "game-trick_nothing-desc": "Tricked! This perk does absolutely nothing!",
        "game-trick_size": "Feedership",
        "game-trick_size-desc": "Tricked! You ate too much chicken and grew in size!",
        "game-trick_m9": "Dev Troll Special",
        "game-trick_m9-desc": "Tricked! You've been cursed with a developer 'treat'!",
        "game-trick_chatty": "Gabby Ghost",
        "game-trick_chatty-desc": "Tricked! You're emoting randomly!",
        "game-trick_drain": "That Sucks",
        "game-trick_drain-desc": "Tricked! You're bleeding very, very, VERY slowly!",
        "game-treat_9mm": "Candy Corn",
        "game-treat_9mm-desc": "Treat! 9mm bullets are darker and deadlier.",
        "game-treat_12g": "Red Jelly Beans",
        "game-treat_12g-desc": "Treat! 12 gauge pellets are darker and deadlier.",
        "game-treat_556": "Sour Apple Belt",
        "game-treat_556-desc": "Treat! 5.56mm bullets are darker and deadlier.",
        "game-treat_762": "Blueberry Taffy",
        "game-treat_762-desc": "Treat! 7.62mm bullets are darker and deadlier.",
        "game-treat_super": "Full Size OKAMI Bar",
        "game-treat_super-desc": "Super Treat! ALL your bullets are darker and deadlier.",
        "game-turkey_shoot": "Perky Shoot",
        "game-turkey_shoot-desc": "Gobble, gobble!",
        "game-xp-drop-desc": "Pass XP",
        "game-xp_book_tallow": "Tallow's Journal",
        "game-xp_book_greene": "Greene's Infinite Wisdom",
        "game-xp_book_parma": "The PARMA Papers",
        "game-xp_book_nevelskoy": "The Nevelskoy Report",
        "game-xp_book_rinzo": "Rinzō's Log",
        "game-xp_book_kuga": "Memoirs of Kuga Kairyū",
        "game-xp_glasses": "Lenz's Spectacles",
        "game-xp_compass": "Amélie's True Compass",
        "game-xp_stump": "Ravenstone's Bloody Stump",
        "game-xp_bone": "Bone of Gordon",
        "game-xp_donut": "Cake Donut"
    };
    function z1(r, t) {
        const a = {
            url: r,
            type: "GET"
        };
        d.ajax(a).done(i => {
            t(null, i)
        }
        ).fail(i => {
            t(i)
        }
        )
    }
    const Ui = {
        da: "Dansk",
        de: "Deutsch",
        en: "English",
        es: "Español",
        fr: "Français",
        it: "Italiano",
        nl: "Nederlands",
        pl: "Polski",
        pt: "Português",
        ru: "Русский",
        sv: "Svenska",
        vn: "Tiếng Việt",
        tr: "Türkçe",
        jp: "日本語",
        ko: "한국어",
        th: "ภาษาไทย",
        "zh-cn": "中文简体",
        "zh-tw": "中文繁體"
    };
    class v1 {
        acceptedLocales = Object.keys(Ui);
        translations = {
            en: k1
        };
        locale = "en";
        constructor() {
            this.locale = "en"
        }
        detectLocale() {
            let t = (navigator.language || navigator.userLanguage).toLowerCase();
            const a = ["pt", "de", "es", "fr", "ko", "ru", "en"];
            for (let i = 0; i < a.length; i++)
                if (t.includes(a[i])) {
                    t = a[i];
                    break
                }
            for (let i = 0; i < this.acceptedLocales.length; i++)
                if (t.includes(this.acceptedLocales[i]))
                    return this.acceptedLocales[i];
            return "en"
        }
        setLocale(t) {
            const a = this.acceptedLocales.includes(t) ? t : "en";
            a != this.locale && (this.translations[t] === void 0 ? z1(`/l10n/${t}.json`, (i, o) => {
                if (i) {
                    console.error(`Failed loading translation data for locale ${t}`);
                    return
                }
                this.translations[t] = o,
                this.setLocale(t)
            }
            ) : (this.locale = a,
            this.localizeIndex()))
        }
        getLocale() {
            return this.locale
        }
        translate(t) {
            return this.translations[this.locale][t] || this.translations.en[t] || ""
        }
        localizeIndex() {
            d("*[data-l10n]").each( (a, i) => {
                const o = d(i);
                let s = o.attr("data-l10n");
                o.hasClass("help-control") && D.touch && (s += "-touch");
                const l = this.translate(s);
                l && (o.attr("label") ? o.attr("label", l) : (o.html(l),
                o.attr("data-label") && o.attr("data-label", l)))
            }
            )
        }
        populateLanguageSelect() {
            const t = d(".language-select");
            t.empty();
            for (let a = 0; a < this.acceptedLocales.length; a++) {
                const i = this.acceptedLocales[a]
                  , o = Ui[i];
                t.append(d("<option>", {
                    value: i,
                    text: o
                }))
            }
        }
    }
    function Wi(r, t, a, i) {
        const o = d("<div/>", {
            class: "copy-toast",
            html: r
        });
        t.append(o),
        o.css({
            left: i.pageX - parseInt(o.css("width")) / 2,
            top: a.offset().top
        }),
        o.animate({
            top: "-=25",
            opacity: 1
        }, {
            queue: !1,
            duration: 300,
            complete: function() {
                d(this).fadeOut(250, function() {
                    d(this).remove()
                })
            }
        })
    }
    function I1(r, t) {
        const a = d("#start-menu");
        d("#btn-help").click( () => {
            const S = d("#start-help");
            a.addClass("display-help");
            const b = a.css("height");
            return S.css("display", "block"),
            a.animate({
                scrollTop: b
            }, 1e3),
            !1
        }
        );
        const i = d("#team-mobile-link")
          , o = d("#team-mobile-link-desc")
          , s = d("#team-mobile-link-warning")
          , l = d("#team-link-input")
          , c = d("#social-share-block")
          , m = d("#news-block");
        d("#btn-join-team").click( () => (d("#server-warning").css("display", "none"),
        l.val(""),
        i.css("display", "block"),
        o.css("display", "block"),
        s.css("display", "none"),
        a.css("display", "none"),
        m.css("display", "none"),
        c.css("display", "none"),
        d("#right-column").css("display", "none"),
        !1)),
        d("#btn-team-mobile-link-leave").click( () => (i.css("display", "none"),
        l.val(""),
        a.css("display", "block"),
        m.css("display", "block"),
        c.css("display", "block"),
        d("#right-column").css("display", "block"),
        !1)),
        d("#team-link-input").on("keypress", function(S) {
            (S.which || S.keyCode) === 13 && (d("#btn-team-mobile-link-join").trigger("click"),
            d(this).blur())
        }),
        d("#player-name-input-solo").on("keypress", function(S) {
            (S.which || S.keyCode) === 13 && d(this).blur()
        }),
        D.mobile && D.os != "ios" && (d("#player-name-input-solo").on("focus", function() {
            if (D.isLandscape) {
                const b = D.screenHeight <= 282 ? 18 : 36;
                document.body.scrollTop = d(this).offset().top - b
            }
        }),
        d("#player-name-input-solo").on("blur", () => {
            document.body.scrollTop = 0
        }
        ));
        const h = d("#start-bottom-right")
          , u = d("#start-top-left")
          , g = d("#start-top-right")
          , w = new Be(d("#ui-modal-keybind"));
        w.onShow( () => {
            h.fadeOut(200),
            g.fadeOut(200),
            d("#ui-modal-keybind-share").css("display", "none"),
            d("#keybind-warning").css("display", "none"),
            d("#ui-modal-keybind-list").css("height", "420px"),
            d("#keybind-code-input").html(""),
            t.refresh()
        }
        ),
        w.onHide( () => {
            h.fadeIn(200),
            g.fadeIn(200),
            t.cancelBind()
        }
        ),
        d(".btn-keybind").click( () => (w.show(),
        !1)),
        d(".js-btn-keybind-share").click( () => {
            d("#ui-modal-keybind-share").css("display") == "block" ? (d("#ui-modal-keybind-share").css("display", "none"),
            d("#ui-modal-keybind-list").css("height", "420px")) : (d("#ui-modal-keybind-share").css("display", "block"),
            d("#ui-modal-keybind-list").css("height", "275px"))
        }
        ),
        d("#keybind-link, #keybind-copy").click(S => {
            Wi("Copied!", w.selector, d("#keybind-link"), S);
            const b = d("#keybind-link").html();
            re.copyTextToClipboard(b)
        }
        ),
        d("#btn-keybind-code-load").on("click", S => {
            const b = d("#keybind-code-input").val();
            d("#keybind-code-input").val("");
            const A = r.fromBase64(String(b));
            d("#keybind-warning").css("display", A ? "none" : "block"),
            A && (Wi("Loaded!", w.selector, d("#btn-keybind-code-load"), S),
            r.saveBinds()),
            t.refresh()
        }
        );
        const y = new Be(d("#modal-settings"));
        y.onShow( () => {
            h.fadeOut(200),
            g.fadeOut(200)
        }
        ),
        y.onHide( () => {
            h.fadeIn(200),
            g.fadeIn(200)
        }
        ),
        d(".btn-settings").click( () => (y.show(),
        !1)),
        d(".modal-settings-text").click(function(S) {
            const b = d(this).siblings("input:checkbox");
            b.prop("checked", !b.is(":checked")),
            b.trigger("change")
        });
        const _ = new Be(d("#modal-hamburger"));
        _.onShow( () => {
            u.fadeOut(200)
        }
        ),
        _.onHide( () => {
            u.fadeIn(200)
        }
        ),
        d("#btn-hamburger").click( () => (_.show(),
        !1)),
        d(".modal-body-text").click(function() {
            const S = d(this).siblings("input:checkbox");
            S.prop("checked", !S.is(":checked")),
            S.trigger("change")
        }),
        d("#force-refresh").click( () => {
            window.location.href = `/?t=${Date.now()}`
        }
        )
    }
    function T1() {
        D.os == "ios" && (D.model == "iphonex" ? D.isLandscape ? d(".main-volume-slider").css("width", "90%") : d(".main-volume-slider").css("width", "") : window.navigator.standalone || (D.isLandscape ? (d("#start-main-center").attr("style", ""),
        d("#modal-customize .modal-content").attr("style", "")) : d("#modal-customize .modal-content").css({
            transform: "translate(-50%, -50%) scale(0.45)",
            top: "38%"
        }))),
        D.tablet && (d("#featured-youtuber").remove(),
        d(".btn-youtube").remove()),
        D.touch ? d(".btn-start-fullscreen").css("display", "none") : d(".btn-start-fullscreen").css("display", "block"),
        d(".btn-keybind").css("display", D.mobile ? "none" : "inline-block")
    }
    function M1(r) {
        d("#team-hide-url").css("display", "none"),
        r && d("#start-bottom-middle").addClass("start-bottom-middle-tablet")
    }
    const Xr = {
        setupModals: I1,
        onResize: T1,
        applyMobileBrowserStyling: M1
    };
    class C1 {
        constructor(t, a, i, o, s) {
            this.pixi = t,
            this.audioManager = a,
            this.config = i,
            this.inputBinds = o,
            this.account = s
        }
        active = !1;
        initialized = !1;
        canvasMode;
        camera;
        renderer;
        particleBarn;
        decalBarn;
        map;
        playerBarn;
        smokeBarn;
        objectCreator;
        debugDisplay;
        loadout;
        view;
        viewOld;
        cameraOffset = e.create(0, 0);
        q = 1;
        debugZoom = 1;
        useDebugZoom = !1;
        outfitOld;
        animIdleTicker;
        animSeq;
        actionSeq;
        activeId = 98;
        activePlayer;
        init() {
            this.canvasMode = this.pixi.renderer.type == cr.CANVAS,
            this.camera = new uo,
            this.renderer = new Co(this,this.canvasMode),
            this.particleBarn = new So(this.renderer),
            this.decalBarn = new xo,
            this.map = new bo(this.decalBarn),
            this.playerBarn = new To,
            this.smokeBarn = new Mo;
            const t = {
                [ve.Player]: this.playerBarn.playerPool,
                [ve.Obstacle]: this.map.CcKuBx,
                [ve.Building]: this.map.IGN,
                [ve.Structure]: this.map.kXM,
                [ve.Decal]: this.decalBarn.decalPool,
                [ve.Smoke]: this.smokeBarn.ZevfO
            };
            this.objectCreator = new _o;
            for (const i in t)
                t.hasOwnProperty(i) && this.objectCreator.vZSyEV(i, t[i]);
            this.debugDisplay = new Re;
            const a = [this.map.display.ground, this.renderer.layers[0], this.renderer.ground, this.renderer.layers[1], this.renderer.layers[2], this.renderer.layers[3], this.debugDisplay];
            for (let i = 0; i < a.length; i++) {
                const o = a[i];
                o && (o.interactiveChildren = !1,
                this.pixi.stage.addChild(o))
            }
            this.loadout = xe.defaultLoadout(),
            this.setLoadout(this.loadout),
            this.view = "outfit",
            this.viewOld = this.view,
            this.outfitOld = this.loadout.outfit,
            this.map.loadMap({
                grassInset: 18,
                groundPatches: [],
                height: 720,
                mapName: "main",
                objects: [],
                places: [],
                rivers: [],
                seed: 218051654,
                shoreInset: 48,
                width: 720
            }, this.camera, this.canvasMode, this.particleBarn),
            this.activePlayer = this.playerBarn.getPlayerById(this.activeId),
            this.activePlayer.cqhV({
                boost: 100,
                boostDirty: !0,
                hasAction: !1,
                health: 100,
                inventoryDirty: !1,
                scopedIn: !1,
                spectatorCountDirty: !1,
                weapsDirty: !0,
                curWeapIdx: 2,
                weapons: [{
                    name: "",
                    ammo: 0
                }, {
                    name: "",
                    ammo: 0
                }, {
                    name: "bayonet_rugged",
                    ammo: 0
                }, {
                    name: "",
                    ammo: 0
                }]
            }, this.playerBarn),
            this.activePlayer.layer = this.activePlayer.tuWDuv.HuWH,
            this.activePlayer.isLoadoutAvatar = !0,
            this.renderer.setActiveLayer(this.activePlayer.layer),
            this.audioManager.activeLayer = this.activePlayer.layer,
            this.animIdleTicker = 3,
            this.animSeq = 0,
            this.actionSeq = 0,
            this.hide(),
            this.account.addEventListener("loadout", i => {
                this.setLoadout(i, !0)
            }
            ),
            this.setLoadout(this.account.loadout, !0),
            this.initialized = !0,
            this.resize()
        }
        free() {
            if (this.initialized)
                for (this.map.AlR(),
                this.particleBarn.AlR(),
                this.renderer.AlR(); this.pixi.stage.children.length > 0; ) {
                    const t = this.pixi.stage.children[0];
                    this.pixi.stage.removeChild(t),
                    t.destroy({
                        children: !0
                    })
                }
            this.initialized = !1
        }
        setLoadout(t, a) {
            this.loadout = xe.validate(t),
            this.updateCharDisplay(),
            a && (this.outfitOld = this.loadout.outfit),
            this.activePlayer && (this.activePlayer.playActionStartSfx = !0),
            this.animIdleTicker = 0
        }
        setView(t) {
            this.viewOld = this.view,
            this.view = t
        }
        updateCharDisplay(t={}) {
            const a = {
                audioManager: this.audioManager,
                renderer: this.renderer,
                particleBarn: this.particleBarn,
                map: this.map,
                smokeBarn: this.smokeBarn,
                decalBarn: this.decalBarn
            };
            this.activePlayer?.useItemEmitter && (this.activePlayer.useItemEmitter.stop(),
            this.activePlayer.useItemEmitter = null,
            this.animIdleTicker = 0);
            const i = {
                outfit: this.loadout.outfit,
                backpack: "backpack02",
                helmet: "helmet01",
                chest: "chest03",
                activeWeapon: this.loadout.melee,
                layer: 0,
                dead: !1,
                downed: !1,
                animType: t.animType || 0,
                animSeq: t.animSeq || 0,
                actionSeq: t.actionSeq || 0,
                actionType: t.actionType || 0,
                actionItem: t.actionItem || "",
                wearingPan: !1,
                healEffect: !1,
                frozen: !1,
                frozenOri: 0,
                hasteType: 0,
                hasteSeq: 0,
                scale: 1,
                role: "",
                perks: [],
                $r: !1,
                pos: e.create(50, 50),
                dir: e.create(0, -1)
            };
            this.objectCreator.hydH(ve.Player, 98, i, a),
            this.playerBarn.setPlayerInfo({
                playerId: 98,
                teamId: 0,
                groupId: 0,
                name: "",
                loadout: {
                    heal: this.loadout.heal,
                    boost: this.loadout.boost
                }
            })
        }
        getCameraTargetZoom() {
            return document.getElementById("modal-content-left").getBoundingClientRect().height / this.camera.Nsps * .2 * this.camera.Nsps * .5 / this.camera.OGpt
        }
        getCameraLoadoutOffset() {
            const t = this.camera.JTYv
              , a = this.getCameraTargetZoom();
            this.camera.JTYv = a;
            const o = document.getElementById("modal-content-left").getBoundingClientRect()
              , s = n.createAabb(this.camera.QmZuG(e.create(o.left, o.top + o.height)), this.camera.QmZuG(e.create(o.left + o.width, o.top)))
              , l = e.mul(e.sub(s.max, s.min), .5)
              , c = e.add(s.min, l)
              , m = n.createAabb(this.camera.QmZuG(e.create(0, this.camera.Nsps)), this.camera.QmZuG(e.create(this.camera.llqJG, 0)))
              , h = e.mul(e.sub(m.max, m.min), .5)
              , u = e.add(m.min, h)
              , g = e.sub(c, u)
              , w = h.x - g.x - l.x
              , y = k.clamp(w * .5, 2.5, 6)
              , S = e.create(g.x + l.x + y, g.y + .33);
            return this.camera.JTYv = t,
            S
        }
        show() {
            this.active || (this.active = !0,
            this.resize())
        }
        hide() {
            this.active && (this.active = !1,
            this.camera.JTYv = 2)
        }
        update(t, a) {
            const i = {};
            if (this.camera.XafO = e.sub(this.activePlayer.XafO, this.cameraOffset),
            this.camera.JTYv = k.lerp(t * 5, this.camera.JTYv, this.camera.baWXDd),
            this.audioManager.cameraPos = e.copy(this.camera.XafO),
            a && (this.view == this.viewOld || this.view != "heal" && this.view != "boost" || (this.animIdleTicker = 0),
            this.viewOld = this.view,
            this.animIdleTicker -= t,
            this.animIdleTicker < 0)) {
                if (this.view == "heal") {
                    this.actionSeq = (this.actionSeq + 1) % 8;
                    const s = {
                        actionType: F.Action.UseItem,
                        actionItem: "bandage",
                        actionSeq: this.actionSeq
                    };
                    this.updateCharDisplay(s),
                    this.animIdleTicker = 2 + Math.random()
                } else if (this.view == "boost") {
                    this.actionSeq = (this.actionSeq + 1) % 8;
                    const s = {
                        actionType: F.Action.UseItem,
                        actionItem: "soda",
                        actionSeq: this.actionSeq
                    };
                    this.updateCharDisplay(s),
                    this.animIdleTicker = 2 + Math.random()
                } else if (this.view != "emote" && this.view != "crosshair") {
                    this.animSeq = (this.animSeq + 1) % 8;
                    const s = {
                        animType: F.Anim.Melee,
                        animSeq: this.animSeq
                    };
                    this.updateCharDisplay(s),
                    this.animIdleTicker = 1.5 + Math.random()
                }
            }
            const o = this.loadout.outfit != this.outfitOld;
            if (this.outfitOld = this.loadout.outfit,
            a && o) {
                const s = U[this.loadout.outfit];
                s && this.audioManager.playSound(s.sound.pickup, {
                    channel: "ui"
                })
            }
            this.playerBarn.lCPzxG(t, this.activeId, this.teamMode, this.renderer, this.particleBarn, this.camera, this.map, this.inputBinds, this.audioManager, !1, !1, !1),
            this.smokeBarn.lCPzxG(t, this.camera, this.activePlayer, this.map, this.renderer),
            this.particleBarn.lCPzxG(t, this.camera, i),
            this.decalBarn.lCPzxG(t, this.camera, this.renderer, i),
            this.renderer.lCPzxG(t, this.camera, this.map, i),
            this.activePlayer.playActionStartSfx = !1,
            this.render(t, i)
        }
        render(t, a) {
            const i = this.map.mapLoaded ? this.map.getMapDef().biome.colors.grass : 8433481;
            this.pixi.renderer.background.color = i,
            this.playerBarn.CCrkNK(this.camera, a),
            this.map.CCrkNK(this.camera),
            ze.CCrkNK(this.camera, this.debugDisplay),
            ze.flush()
        }
        resize() {
            this.initialized && (this.camera.llqJG = D.screenWidth,
            this.camera.Nsps = D.screenHeight,
            this.map.resize(this.pixi.renderer, this.canvasMode),
            this.renderer.resize(this.map, this.camera),
            this.camera.baWXDd = this.getCameraTargetZoom(),
            this.cameraOffset = this.getCameraLoadoutOffset())
        }
    }
    const Ni = 99
      , vt = {
        getPassMaxLevel: function() {
            return Ni
        },
        getPassLevelXp: function(r, t) {
            const a = gr[r]
              , i = t - 1;
            return i < a.xp.length ? a.xp[i] : a.xp[a.xp.length - 1]
        },
        getPassLevelAndXp: function(r, t) {
            let a = t
              , i = 1;
            for (; i < Ni; ) {
                const o = vt.getPassLevelXp(r, i);
                if (a < o)
                    break;
                a -= o,
                i++
            }
            return {
                level: i,
                xp: a,
                nextLevelXp: vt.getPassLevelXp(r, i)
            }
        },
        timeUntilQuestRefresh: function(r) {
            return Math.floor((r - 252e5 + 864e5 - 1) / 864e5) * 864e5 + 252e5 - Date.now()
        }
    };
    function Gi(r, t) {
        for (let a = gr[r], i = 0; i < a.items.length; i++)
            if (a.items[i].level == t + 1)
                return a.items[i].item;
        return ""
    }
    function Qr(r, t=!1) {
        const a = Math.floor(Math.ceil(r / 60) / 60)
          , i = t ? Math.floor(r / 60) % 60 : Math.ceil(r / 60) % 60;
        let o = "";
        return a > 0 && (o += `${a}h `),
        o += `${i}m`
    }
    class P1 {
        constructor(t, a, i) {
            this.account = t,
            this.loadoutMenu = a,
            this.localization = i,
            this.account = t,
            this.loadoutMenu = a,
            this.localization = i,
            this.account.addEventListener("request", this.onRequest.bind(this)),
            this.account.addEventListener("pass", this.onPass.bind(this)),
            this.loadPlaceholders(),
            d("#pass-progress-unlock-wrapper").hover( () => {
                d("#pass-unlock-tooltip").fadeIn(50)
            }
            , () => {
                d("#pass-unlock-tooltip").fadeOut(50)
            }
            )
        }
        pass = {
            data: {
                type: "pass_survivr1"
            },
            currentXp: 0,
            currentLevel: 1,
            levelXp: 0,
            ticker: 0,
            animSteps: [],
            elems: {}
        };
        quests = [];
        loaded = !1;
        lockDisplayed = !1;
        updatePass = !1;
        updatePassTicker = 0;
        onPass(t, a, i) {
            const s = [];
            let l = 0;
            for (let y = 0; y < a.length; y++)
                (_ => {
                    const S = a[_]
                      , b = {
                        data: S,
                        start: 0,
                        current: 0,
                        ticker: 0,
                        delay: l * .5,
                        playCompleteAnim: !1,
                        progressAnimFinished: !1,
                        completeAnimFinished: !1,
                        shouldRequestRefresh: i,
                        refreshTime: Date.now() + S.timeToRefresh + 5e3,
                        refreshSet: !1,
                        refreshEnabled: !1,
                        timer: {
                            enabled: !1,
                            str: ""
                        }
                    }
                      , A = this.quests.find(E => E.data.idx == b.data.idx && E.data.type == b.data.type);
                    A && (b.start = A.current,
                    b.current = A.current,
                    !A.data.complete && b.data.complete && (b.playCompleteAnim = !0)),
                    b.data.progress = k.min(b.data.progress, b.data.target),
                    b.data.progress > b.current && l++;
                    const P = d(`#pass-quest-${b.data.idx}`);
                    b.elems = {
                        main: P,
                        xp: P.find(".pass-quest-xp"),
                        info: P.find(".pass-quest-info"),
                        desc: P.find(".pass-quest-desc"),
                        cur: P.find(".pass-quest-counter-current"),
                        target: P.find(".pass-quest-counter-target"),
                        refresh: P.find(".pass-quest-refresh"),
                        refreshPrompt: P.find(".pass-quest-refresh-prompt"),
                        refreshConfirm: P.find(".pass-quest-refresh-confirm"),
                        refreshCancel: P.find(".pass-quest-refresh-cancel"),
                        counter: P.find(".pass-quest-counter"),
                        barFill: P.find(".pass-quest-bar-fill"),
                        timer: P.find(".pass-quest-timer"),
                        loading: P.find(".pass-quest-spinner")
                    },
                    b.elems.barFill.clearQueue(),
                    b.elems.main.removeClass("pass-bg-pulse"),
                    b.elems.main.stop().css({
                        opacity: 1
                    }),
                    b.elems.xp.removeClass("pass-text-pulse"),
                    b.elems.refresh.stop().css({
                        opacity: 1
                    }),
                    b.elems.counter.stop().css({
                        opacity: 1
                    });
                    const T = ra[b.data.type]
                      , I = this.localization.translate(`${b.data.type}`) || b.data.type
                      , C = b.current / b.data.target * 100;
                    b.elems.main.css("display", "block"),
                    b.elems.desc.html(I),
                    b.elems.cur.html(Math.round(b.current)),
                    b.elems.xp.html(`${T.xp} XP`),
                    b.elems.barFill.css({
                        width: `${C}%`
                    }),
                    b.elems.loading.css("display", "none");
                    let q = b.data.target;
                    T.timed && (q = Qr(q)),
                    b.elems.target.html(q),
                    T.icon ? (b.elems.desc.addClass("pass-quest-desc-icon"),
                    b.elems.desc.css({
                        "background-image": `url(${T.icon})`
                    })) : (b.elems.desc.removeClass("pass-quest-desc-icon"),
                    b.elems.desc.attr("style", "")),
                    this.setQuestRefreshEnabled(b),
                    s.push(b)
                }
                )(y);
            if (this.quests = s,
            this.pass.data = t,
            this.pass.animSteps = [],
            this.pass.currentXp = Math.round(this.pass.currentXp),
            this.pass.levelXp = vt.getPassLevelXp(t.type, this.pass.currentLevel),
            !this.loaded) {
                const y = vt.getPassLevelXp(t.type, t.level);
                this.pass.currentXp = 0,
                this.pass.currentLevel = t.level,
                this.pass.levelXp = y,
                this.pass.ticker = 0
            }
            let c = this.pass.currentLevel
              , m = this.pass.currentXp;
            if (this.loaded) {
                for (; c < t.level; ) {
                    const _ = vt.getPassLevelXp(t.type, c);
                    this.pass.animSteps.push({
                        startXp: m,
                        targetXp: _,
                        levelXp: _,
                        targetLevel: c + 1
                    }),
                    c++,
                    m = 0
                }
                const y = l > 0 ? 2 : 0;
                this.pass.ticker = -y
            }
            const h = vt.getPassLevelXp(t.type, c);
            this.pass.animSteps.push({
                startXp: m,
                targetXp: t.xp,
                levelXp: h,
                targetLevel: c
            }),
            d("#pass-block").css("z-index", "1"),
            d("#pass-locked").css("display", "none"),
            d("#pass-loading").css("display", "none");
            const u = Gi(this.pass.data.type, this.pass.currentLevel);
            this.setPassUnlockImage(u);
            const g = this.localization.translate(t.type).toUpperCase();
            d("#pass-name-text").html(g),
            d("#pass-progress-level").html(this.pass.currentLevel),
            d("#pass-progress-xp-current").html(this.pass.currentXp),
            d("#pass-progress-xp-target").html(this.pass.levelXp);
            const w = this.pass.currentXp / this.pass.levelXp * 100;
            d("#pass-progress-bar-fill").css({
                width: `${w}%`
            }),
            this.loaded = !0
        }
        onRequest(t) {
            d("#pass-loading").css("display", t.loggingIn ? "block" : "none")
        }
        scheduleUpdatePass(t) {
            this.updatePass = !0,
            this.updatePassTicker = t
        }
        setQuestRefreshEnabled(t) {
            const a = !t.data.rerolled && !t.data.complete || t.refreshTime - Date.now() < 0;
            (a != t.refreshEnabled || !t.refreshSet) && (t.refreshEnabled = a,
            t.refreshSet = !0,
            t.elems.refresh.off("click"),
            t.elems.refreshConfirm.off("click"),
            t.elems.refreshCancel.off("click"),
            t.refreshEnabled ? (t.elems.refreshConfirm.on("click", () => {
                t.elems.loading.css("display", "block"),
                t.elems.refreshPrompt.css("display", "none"),
                this.account.refreshQuest(t.data.idx)
            }
            ),
            t.elems.refreshCancel.on("click", () => {
                t.elems.refreshPrompt.css("display", "none"),
                t.elems.info.css("display", "block")
            }
            ),
            t.elems.refresh.on("click", () => {
                t.elems.refreshPrompt.css("display", "block"),
                t.elems.info.css("display", "none")
            }
            ),
            t.elems.refresh.removeClass("pass-quest-refresh-disabled")) : t.elems.refresh.addClass("pass-quest-refresh-disabled"))
        }
        setPassUnlockImage(t) {
            const a = U[t]
              , o = `url(${a ? re.getSvgFromGameType(t) : "img/emotes/surviv.svg"})`
              , s = re.getCssTransformFromGameType(t);
            d("#pass-progress-unlock").css({
                opacity: a ? 1 : .15,
                transform: `translate(-50%, -50%) ${s}`
            }),
            d("#pass-progress-unlock-image").css({
                "background-image": o
            });
            const l = a ? this.localization.translate(`loadout-title-${this.loadoutMenu.getCategory(a.type).loadoutType}`).toUpperCase() : ""
              , c = d("#pass-unlock-tooltip");
            c.css("opacity", a ? 1 : 0),
            c.find(".tooltip-pass-title").html(l),
            c.find(".tooltip-pass-desc").html(a ? a.name : "");
            const m = a ? `url(${this.loadoutMenu.getCategory(a.type).categoryImage})` : "";
            d("#pass-progress-unlock-type-image").css({
                "background-image": m
            }),
            d("#pass-progress-unlock-type-wrapper").css({
                display: a ? "block" : "none"
            })
        }
        animatePassLevelUp() {
            const t = d("#pass-progress-bar-fill")
              , a = d("#pass-progress-level")
              , i = d("#pass-progress-unlock-wrapper")
              , o = d("#pass-progress-unlock-image")
              , s = d("#pass-progress-unlock-type-image");
            a.html(this.pass.currentLevel),
            t.queue(l => {
                i.addClass("pass-unlock-pulse"),
                d(l).dequeue()
            }
            ).delay(750).queue(l => {
                o.animate({
                    opacity: 0
                }, 250),
                s.animate({
                    opacity: 0
                }, 250),
                d(l).dequeue()
            }
            ).delay(250).queue(l => {
                const c = Gi(this.pass.data.type, this.pass.currentLevel);
                this.setPassUnlockImage(c),
                i.removeClass("pass-unlock-pulse"),
                o.animate({
                    opacity: 1
                }, 250),
                s.animate({
                    opacity: 1
                }, 250),
                d(l).dequeue()
            }
            )
        }
        animateQuestComplete(t) {
            t.elems.barFill.queue(a => {
                t.elems.main.addClass("pass-bg-pulse"),
                t.elems.xp.addClass("pass-text-pulse"),
                t.elems.refresh.animate({
                    opacity: .25
                }, 250),
                t.elems.refresh.removeClass("pass-quest-refresh-disabled"),
                t.elems.refresh.animate({
                    opacity: 0
                }, 250),
                t.elems.counter.animate({
                    opacity: 0
                }, 250),
                t.elems.desc.html("QUEST COMPLETE!"),
                d(a).dequeue()
            }
            ).delay(1e3).queue(a => {
                t.elems.main.animate({
                    opacity: 0
                }, 750),
                d(a).dequeue()
            }
            )
        }
        update(t) {
            this.updatePassTicker -= t,
            this.updatePass && this.updatePassTicker < 0 && (this.updatePass = !1,
            this.account.getPass(!1));
            for (let a = 0; a < this.quests.length; a++) {
                const i = this.quests[a];
                if (this.setQuestRefreshEnabled(i),
                i.ticker += t,
                !i.progressAnimFinished) {
                    const l = k.clamp((i.ticker - i.delay) / 1, 0, 1);
                    i.current = k.lerp(k.easeOutExpo(l), i.start, i.data.progress);
                    const c = i.current / i.data.target * 100
                      , m = ra[i.data.type];
                    let h = Math.round(i.current);
                    m.timed && (h = Qr(h, !0)),
                    i.elems.cur.html(h),
                    i.elems.barFill.css({
                        width: `${c}%`
                    }),
                    l >= 1 && (i.progressAnimFinished = !0)
                }
                i.playCompleteAnim && !i.completeAnimFinished && i.ticker - i.delay > 1.25 && (this.animateQuestComplete(i),
                i.completeAnimFinished = !0);
                const o = !i.playCompleteAnim || i.completeAnimFinished && i.ticker - i.delay > 4.25;
                i.data.complete && o && i.refreshEnabled && i.shouldRequestRefresh && (i.shouldRequestRefresh = !1,
                this.account.refreshQuest(i.data.idx));
                const s = i.data.complete && o;
                if (s != i.timer.displayed) {
                    i.timer.displayed = s,
                    i.elems.main.removeClass("pass-bg-pulse"),
                    i.elems.main.stop().animate({
                        opacity: 1
                    }, 250);
                    const l = i.elems.refreshPrompt.css("display") == "block";
                    i.elems.info.css("display", s || l ? "none" : "block"),
                    i.elems.timer.css("display", s ? "block" : "none")
                }
                if (s) {
                    const l = Math.max(i.refreshTime - Date.now(), 0)
                      , c = Qr(l / 1e3);
                    c != i.timer.str && (i.timer.str = c,
                    i.elems.timer.html(c))
                }
            }
            if (this.pass.ticker += t,
            this.pass.animSteps.length > 0 && this.pass.ticker >= 0) {
                const a = this.pass.animSteps[0]
                  , i = k.clamp(this.pass.ticker / 1.5, 0, 1);
                this.pass.currentXp = k.lerp(k.easeOutExpo(i), a.startXp, a.targetXp),
                this.pass.levelXp = a.levelXp;
                const o = this.pass.currentXp / a.levelXp * 100;
                d("#pass-progress-xp-current").html(Math.round(this.pass.currentXp)),
                d("#pass-progress-xp-target").html(this.pass.levelXp),
                d("#pass-progress-bar-fill").css({
                    width: `${o}%`
                }),
                i >= 1 && (a.targetLevel > this.pass.currentLevel && (this.pass.currentLevel = a.targetLevel,
                this.animatePassLevelUp()),
                this.pass.animSteps.shift(),
                this.pass.ticker -= 3)
            }
            !this.account.loggingIn && !this.account.loggedIn && !this.lockDisplayed && (d("#pass-block").css("z-index", "1"),
            d("#pass-loading").css("display", "none"),
            d("#pass-locked").css("display", "block"),
            this.lockDisplayed = !0)
        }
        onResize() {}
        loadPlaceholders() {
            const t = gr.pass_survivr1
              , a = this.localization.translate("pass_survivr1").toUpperCase();
            d("#pass-name-text").html(a),
            d("#pass-progress-level").html(1),
            d("#pass-progress-xp-current").html(0),
            d("#pass-progress-xp-target").html(t.xp[0]),
            this.setPassUnlockImage(t.items[0].item)
        }
    }
    function A1(r, t, a, i) {
        const o = r.find(".login-options-content");
        o.empty(),
        t && o.append(d("<div/>", {
            class: "account-login-desc"
        }).append(d("<p/>", {
            html: i.translate("index-link-account-to")
        })));
        const s = d("<div/>", {
            class: "account-buttons"
        });
        o.append(s);
        const l = function(c, m, h) {
            const u = d("<div/>", {
                class: `menu-option btn-darken btn-standard btn-login-${c}`
            });
            u.append(d("<span/>", {
                class: "login-button-name"
            }).append(d("<span/>", {
                html: i.translate(`index-${c}`)
            })).append(d("<div/>", {
                class: "icon"
            }))),
            t && m ? (u.addClass("btn-login-linked"),
            u.find("span.login-button-name").html('<div class="icon"></div>')) : u.click(g => {
                h()
            }
            ),
            s.append(u)
        };
        l("twitch", a.profile.linkedTwitch, () => {
            window.location.href = "/api/user/auth/twitch"
        }
        ),
        l("discord", a.profile.linkedDiscord, () => {
            window.location.href = "/api/user/auth/discord"
        }
        )
    }
    class D1 {
        constructor(t, a, i, o) {
            this.account = t,
            this.localization = a,
            this.loadoutMenu = i,
            this.errorModal = o,
            this.account = t,
            this.localization = a,
            this.loadoutMenu = i,
            this.errorModal = o,
            t.addEventListener("error", this.onError.bind(this)),
            t.addEventListener("login", this.onLogin.bind(this)),
            t.addEventListener("loadout", this.onLoadoutUpdated.bind(this)),
            t.addEventListener("items", this.onItemsUpdated.bind(this)),
            t.addEventListener("request", this.render.bind(this)),
            this.initUi(),
            this.render()
        }
        setNameModal = null;
        resetStatsModal = null;
        deleteAccountModal = null;
        userSettingsModal = null;
        loginOptionsModal = null;
        createAccountModal = null;
        loginOptionsModalMobile;
        modalMobileAccount;
        initUi() {
            const t = function() {
                d("#modal-body-warning").css("display", "none"),
                d("#modal-account-name-input").val("")
            };
            this.setNameModal = new Be(d("#modal-account-name-change")),
            this.setNameModal.onShow(t),
            this.setNameModal.onHide(t),
            d("#modal-account-name-finish").click(a => {
                a.stopPropagation();
                const i = d("#modal-account-name-input").val();
                this.account.setUsername(i, o => {
                    if (o) {
                        const s = {
                            failed: "Failed setting username.",
                            invalid: "Invalid username.",
                            taken: "Name already taken!",
                            change_time_not_expired: "Username has already been set recently."
                        }
                          , l = s[o] || s.failed;
                        d("#modal-body-warning").hide(),
                        d("#modal-body-warning").html(l),
                        d("#modal-body-warning").fadeIn()
                    } else
                        this.setNameModal.hide()
                }
                )
            }
            ),
            d("#modal-account-name-input").on("keypress", a => {
                (a.which || a.keyCode) === 13 && d("#modal-account-name-finish").trigger("click")
            }
            ),
            this.resetStatsModal = new Be(d("#modal-account-reset-stats")),
            this.resetStatsModal.onShow( () => {
                d("#modal-account-reset-stats-input").val(""),
                this.modalMobileAccount.hide()
            }
            ),
            d("#modal-account-reset-stats-finish").click(a => {
                a.stopPropagation(),
                d("#modal-account-reset-stats-input").val() == "RESET STATS" && (this.account.resetStats(),
                this.resetStatsModal.hide())
            }
            ),
            d("#modal-account-reset-stats-input").on("keypress", a => {
                (a.which || a.keyCode) === 13 && d("#modal-account-reset-stats-finish").trigger("click")
            }
            ),
            this.deleteAccountModal = new Be(d("#modal-account-delete")),
            this.deleteAccountModal.onShow( () => {
                d("#modal-account-delete-input").val(""),
                this.modalMobileAccount.hide()
            }
            ),
            d("#modal-account-delete-finish").click(a => {
                a.stopPropagation(),
                d("#modal-account-delete-input").val() == "DELETE" && (this.account.deleteAccount(),
                this.deleteAccountModal.hide())
            }
            ),
            d("#modal-account-delete-input").on("keypress", a => {
                (a.which || a.keyCode) === 13 && d("#modal-account-delete-finish").trigger("click")
            }
            ),
            this.userSettingsModal = new Be(d(".account-buttons-settings")),
            this.userSettingsModal.checkSelector = !1,
            this.userSettingsModal.skipFade = !0,
            this.userSettingsModal.onShow( () => {
                d(".account-details-top").css("display", "none")
            }
            ),
            this.userSettingsModal.onHide( () => {
                d(".account-details-top").css("display", "block")
            }
            ),
            this.loginOptionsModal = new Be(d("#account-login-options")),
            this.loginOptionsModal.checkSelector = !1,
            this.loginOptionsModal.skipFade = !0,
            this.loginOptionsModal.onShow( () => {
                d(".account-details-top").css("display", "none")
            }
            ),
            this.loginOptionsModal.onHide( () => {
                d(".account-details-top").css("display", "block")
            }
            ),
            this.loginOptionsModalMobile = new Be(d("#account-login-options-mobile")),
            this.loginOptionsModalMobile.checkSelector = !1,
            this.loginOptionsModalMobile.skipFade = !0,
            this.loginOptionsModalMobile.onShow( () => {
                d(".account-details-top").css("display", "none")
            }
            ),
            this.loginOptionsModalMobile.onHide( () => {
                d(".account-details-top").css("display", "block")
            }
            ),
            this.createAccountModal = new Be(d("#modal-create-account-INVALID_ID")),
            this.createAccountModal.onHide( () => {
                this.loadoutMenu.hide()
            }
            ),
            this.modalMobileAccount = new Be(d("#modal-mobile-account")),
            this.modalMobileAccount.onShow( () => {
                d("#start-top-right").css("display", "none"),
                d(".account-details-top").css("display", "none")
            }
            ),
            this.modalMobileAccount.onHide( () => {
                d("#start-top-right").css("display", "block"),
                d(".account-details-top").css("display", "block"),
                this.userSettingsModal.hide()
            }
            ),
            d(".account-leaderboard-link").click(a => (window.open(Qt.resolveUrl("/stats"), "_blank"),
            !1)),
            d(".account-stats-link").click( () => (this.waitOnLogin( () => {
                if (this.account.loggedIn)
                    if (this.account.profile.usernameSet) {
                        const a = this.account.profile.slug || "";
                        window.open(`/stats/${a}`, "_blank")
                    } else
                        this.setNameModal.show(!0);
                else
                    this.showLoginMenu({
                        modal: !0
                    })
            }
            ),
            !1)),
            d(".account-loadout-link, #btn-customize").click( () => (this.loadoutMenu.show(),
            this.waitOnLogin( () => {
                this.account.loggedIn || this.showLoginMenu({
                    modal: !0
                })
            }
            ),
            !1)),
            d(".account-details-user").click( () => (this.userSettingsModal.isVisible() || this.loginOptionsModal.isVisible() ? (this.userSettingsModal.hide(),
            this.loginOptionsModal.hide()) : this.waitOnLogin( () => {
                D.mobile && this.modalMobileAccount.show(),
                this.account.loggedIn ? (this.loginOptionsModal.hide(),
                this.userSettingsModal.show()) : this.showLoginMenu({
                    modal: !1
                })
            }
            ),
            !1)),
            d(".btn-account-link").click( () => (this.userSettingsModal.hide(),
            this.showLoginMenu({
                modal: !1,
                link: !0
            }),
            !1)),
            d(".btn-account-change-name").click( () => (this.account.profile.usernameChangeTime <= 0 && (this.userSettingsModal.hide(),
            this.modalMobileAccount.hide(),
            d("#modal-account-name-title").html(this.localization.translate("index-change-account-name")),
            this.setNameModal.show()),
            !1)),
            d(".btn-account-reset-stats").click( () => (this.userSettingsModal.hide(),
            this.resetStatsModal.show(),
            !1)),
            d(".btn-account-delete").click( () => (this.userSettingsModal.hide(),
            this.deleteAccountModal.show(),
            !1)),
            d(".btn-account-logout").click( () => (this.account.logout(),
            !1)),
            d("#btn-pass-locked").click( () => (this.showLoginMenu({
                modal: !0
            }),
            !1))
        }
        onError(t, a) {
            const o = {
                server_error: "Operation failed, please try again later.",
                facebook_account_in_use: "Failed linking Facebook account.<br/>Account already in use!",
                google_account_in_use: "Failed linking Google account.<br/>Account already in use!",
                twitch_account_in_use: "Failed linking Twitch account.<br/>Account already in use!",
                discord_account_in_use: "Failed linking Discord account.<br/>Account already in use!",
                account_banned: `Account banned: ${a}`,
                login_failed: "Login failed."
            }[t];
            o && (this.errorModal.selector.find(".modal-body-text").html(o),
            this.errorModal.show())
        }
        onLogin() {
            this.createAccountModal.hide(),
            this.loginOptionsModalMobile.hide(),
            this.loginOptionsModal.hide(),
            this.account.profile.usernameSet || this.setNameModal.show(!0)
        }
        onLoadoutUpdated(t) {
            this.updateUserIcon()
        }
        onItemsUpdated(t) {
            let a = 0
              , i = 0;
            for (let s = 0; s < t.length; s++) {
                const l = t[s];
                l.status < xe.ItemStatus.Confirmed && a++,
                l.status < xe.ItemStatus.Ackd && i++
            }
            t.filter(s => s.status < xe.ItemStatus.Confirmed),
            t.filter(s => s.status < xe.ItemStatus.Ackd);
            const o = a > 0 || i > 0;
            d("#loadout-alert-main").css({
                display: o ? "block" : "none"
            })
        }
        waitOnLogin(t) {
            if (this.account.loggingIn && !this.account.loggedIn) {
                const a = () => {
                    t(),
                    this.account.removeEventListener("requestsComplete", a)
                }
                ;
                this.account.addEventListener("requestsComplete", a)
            } else
                t()
        }
        showLoginMenu(t) {
            t = Object.assign({
                modal: !1,
                link: !1
            }, t);
            const a = t.modal ? this.createAccountModal : D.mobile ? this.loginOptionsModalMobile : this.loginOptionsModal;
            A1(a.selector, t.link, this.account, this.localization),
            a.show()
        }
        updateUserIcon() {
            const t = re.getSvgFromGameType(this.account.loadout.player_icon) || "img/gui/player-gui.svg";
            d(".account-details-user .account-avatar").css("background-image", `url(${t})`)
        }
        render() {
            const t = this.account.requestsInFlight > 0;
            d(".account-loading").css("opacity", t ? 1 : 0);
            let a = re.htmlEscape(this.account.profile.username || "");
            this.account.loggedIn || (a = this.account.loggingIn ? `${this.localization.translate("index-logging-in")}...` : this.localization.translate("index-log-in-desc")),
            d("#account-player-name").html(a),
            d("#account-player-name").css("display", this.account.loggedIn ? "block" : "none"),
            d("#account-login").css("display", this.account.loggedIn ? "none" : "block"),
            this.updateUserIcon(),
            this.account.profile.usernameChangeTime <= 0 ? d(".btn-account-change-name").removeClass("btn-account-disabled") : d(".btn-account-change-name").addClass("btn-account-disabled")
        }
    }
    function Vi(r, t) {
        const a = {
            join_full: t.translate("index-team-is-full"),
            join_not_found: t.translate("index-failed-joining-team"),
            create_failed: t.translate("index-failed-creating-team"),
            join_failed: t.translate("index-failed-joining-team"),
            join_game_failed: t.translate("index-failed-joining-game"),
            lost_conn: t.translate("index-lost-connection"),
            find_game_error: t.translate("index-failed-finding-game"),
            find_game_full: t.translate("index-failed-finding-game"),
            find_game_invalid_protocol: t.translate("index-invalid-protocol"),
            kicked: t.translate("index-team-kicked")
        };
        return a[r] || a.lost_conn
    }
    class O1 {
        constructor(t, a, i, o, s, l, c) {
            this.config = t,
            this.pingTest = a,
            this.siteInfo = i,
            this.localization = o,
            this.audioManager = s,
            this.joinGameCb = l,
            this.leaveCb = c,
            this.serverSelect.change( () => {
                const m = this.serverSelect.find(":selected").val();
                this.pingTest.start([m]),
                this.setRoomProperty("region", m)
            }
            ),
            this.queueMode1.click( () => {
                this.setRoomProperty("gameModeIdx", 1)
            }
            ),
            this.queueMode2.click( () => {
                this.setRoomProperty("gameModeIdx", 2)
            }
            ),
            this.fillAuto.click( () => {
                this.setRoomProperty("autoFill", !0)
            }
            ),
            this.fillNone.click( () => {
                this.setRoomProperty("autoFill", !1)
            }
            ),
            this.playBtn.on("click", () => {
                this.config.get("ENV") === "CrazyGames" ? or( () => {
                    this.tryStartGame()
                }
                ) : this.config.get("ENV") === "POKI" ? lr( () => {
                    this.tryStartGame()
                }
                ) : this.config.get("ENV") === "GameMonetize" ? sr( () => {
                    this.tryStartGame()
                }
                ) : this.tryStartGame()
            }
            ),
            d("#team-copy-url, #team-desc-text").click(m => {
                const h = d("<div/>", {
                    class: "copy-toast",
                    html: "Copied!"
                });
                d("#start-menu-wrapper").append(h),
                h.css({
                    left: m.pageX - parseInt(h.css("width")) / 2,
                    top: d("#team-copy-url").offset().top
                }),
                h.animate({
                    top: "-=20",
                    opacity: 1
                }, {
                    queue: !1,
                    duration: 300,
                    complete: function() {
                        d(this).fadeOut(250, function() {
                            d(this).remove()
                        })
                    }
                });
                let u = d("#team-url").html();
                window !== window.top && (u = this.roomData.roomUrl.substring(1)),
                re.copyTextToClipboard(u)
            }
            ),
            window !== window.top && d("#team-desc-text").hide(),
            D.mobile || (this.hideUrl = !1,
            d("#team-hide-url").click(m => {
                const h = m.currentTarget;
                this.hideUrl = !this.hideUrl,
                d("#team-desc-text, #team-code-text").css({
                    opacity: this.hideUrl ? 0 : 1
                }),
                d(h).css({
                    "background-image": this.hideUrl ? "url(../img/gui/hide.svg)" : "url(../img/gui/eye.svg)"
                })
            }
            ))
        }
        playBtn = d("#btn-start-team");
        serverWarning = d("#server-warning");
        teamOptions = d("#btn-team-queue-mode-1, #btn-team-queue-mode-2, #btn-team-fill-auto, #btn-team-fill-none");
        serverSelect = d("#team-server-select");
        queueMode1 = d("#btn-team-queue-mode-1");
        queueMode2 = d("#btn-team-queue-mode-2");
        fillAuto = d("#btn-team-fill-auto");
        fillNone = d("#btn-team-fill-none");
        active = !1;
        joined = !1;
        create = !1;
        joiningGame = !1;
        ws = null;
        keepAliveTimeout = 0;
        playerData = {};
        roomData = {};
        players = [];
        prevPlayerCount = 0;
        localPlayerId = 0;
        isLeader = !0;
        editingName = !1;
        displayedInvalidProtocolModal = !1;
        hideUrl;
        getPlayerById(t) {
            return this.players.find(a => a.playerId == t)
        }
        update(t) {
            this.joined && (this.keepAliveTimeout -= t,
            this.keepAliveTimeout < 0 && (this.keepAliveTimeout = 45,
            this.sendMessage("keepAlive", {})))
        }
        connect(t, a) {
            if (!this.active || a !== this.roomData.roomUrl) {
                const i = Qt.resolveRoomHost()
                  , o = `w${window.location.protocol === "https:" ? "ss" : "s"}://${i}/team_v2`;
                this.active = !0,
                this.joined = !1,
                this.create = t,
                this.joiningGame = !1,
                this.editingName = !1,
                this.playerData = {
                    name: this.config.get("playerName")
                },
                this.roomData = {
                    roomUrl: a,
                    region: this.config.get("region"),
                    gameModeIdx: this.config.get("gameModeIdx"),
                    autoFill: this.config.get("teamAutoFill"),
                    findingGame: !1,
                    lastError: ""
                },
                this.displayedInvalidProtocolModal = !1,
                this.refreshUi(),
                this.ws && (this.ws.onclose = function() {}
                ,
                this.ws.close(),
                this.ws = null);
                try {
                    this.ws = new WebSocket(o),
                    this.ws.onerror = s => {
                        this.ws?.close()
                    }
                    ,
                    this.ws.onclose = () => {
                        let s = "";
                        this.joiningGame || (s = this.joined ? "lost_conn" : this.create ? "create_failed" : "join_failed"),
                        this.leave(s)
                    }
                    ,
                    this.ws.onopen = () => {
                        this.create ? this.siteInfo.info.captchaEnabled ? window.turnstile.render("#start-turnstile-container", {
                            sitekey: "0x4AAAAAAAxkDXmFwymMPT0B",
                            appearance: "interaction-only",
                            callback: s => {
                                this.sendMessage("create", {
                                    roomData: this.roomData,
                                    playerData: this.playerData,
                                    token: s
                                }),
                                window.turnstile.remove("#start-turnstile-container")
                            }
                        }) : this.sendMessage("create", {
                            roomData: this.roomData,
                            playerData: this.playerData
                        }) : this.sendMessage("join", {
                            roomUrl: this.roomData.roomUrl,
                            playerData: this.playerData
                        })
                    }
                    ,
                    this.ws.onmessage = s => {
                        if (this.active) {
                            const l = JSON.parse(s.data);
                            this.onMessage(l.type, l.data)
                        }
                    }
                } catch {
                    this.leave(this.create ? "create_failed" : "join_failed")
                }
            }
        }
        leave(t="") {
            if (this.active) {
                this.ws?.close(),
                this.ws = null,
                this.active = !1,
                this.joined = !1,
                this.joiningGame = !1,
                this.refreshUi(),
                this.config.set("gameModeIdx", this.roomData.gameModeIdx),
                this.config.set("teamAutoFill", this.roomData.autoFill),
                this.isLeader && this.config.set("region", this.roomData.region);
                let a = "";
                t && t != "" && (a = Vi(t, this.localization)),
                this.leaveCb(a),
                this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.game.hideInviteButton()
            }
        }
        onGameComplete() {
            this.active && (this.joiningGame = !1,
            this.sendMessage("gameComplete"))
        }
        onMessage(t, a) {
            switch (t) {
            case "state":
                {
                    let i = a;
                    this.joined = !0;
                    const o = this.roomData;
                    this.roomData = i.room,
                    this.players = i.players,
                    this.localPlayerId = i.localPlayerId,
                    this.isLeader = this.getPlayerById(this.localPlayerId).isLeader,
                    this.isLeader && (this.roomData.region = o.region,
                    this.roomData.autoFill = o.autoFill),
                    this.refreshUi(),
                    this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.game.showInviteButton({
                        roomID: i.room.roomUrl.replace("#", "")
                    });
                    break
                }
            case "joinGame":
                this.joiningGame = !0,
                this.joinGameCb(a);
                break;
            case "keepAlive":
                break;
            case "kicked":
                this.leave("kicked");
                break;
            case "error":
                this.leave(a.type)
            }
        }
        sendMessage(t, a) {
            if (this.ws)
                if (this.ws.readyState === this.ws.OPEN) {
                    const i = JSON.stringify({
                        type: t,
                        data: a
                    });
                    this.ws.send(i)
                } else
                    this.ws.close()
        }
        setRoomProperty(t, a) {
            this.isLeader && this.roomData[t] != a && (this.roomData[t] = a,
            this.sendMessage("setRoomProps", this.roomData))
        }
        tryStartGame() {
            if (this.isLeader && !this.roomData.findingGame) {
                const t = F.protocolVersion;
                let a = this.roomData.region;
                const i = re.getParameterByName("region");
                i !== void 0 && i.length > 0 && (a = i);
                let o = this.pingTest.getZones(a);
                const s = re.getParameterByName("zone");
                s !== void 0 && s.length > 0 && (o = [s]);
                const l = {
                    version: t,
                    region: a,
                    zones: o
                };
                this.siteInfo.info.captchaEnabled ? window.turnstile.render("#start-turnstile-container", {
                    sitekey: "0x4AAAAAAAxkDXmFwymMPT0B",
                    appearance: "interaction-only",
                    callback: c => {
                        this.sendMessage("playGame", {
                            ...l,
                            token: c
                        }),
                        window.turnstile.remove("#start-turnstile-container")
                    }
                }) : this.sendMessage("playGame", l),
                this.roomData.findingGame = !0,
                this.refreshUi()
            }
        }
        refreshUi() {
            const t = function(o, s, l) {
                o.removeClass("btn-darken btn-disabled btn-opaque btn-hollow-selected"),
                l ? o.addClass("btn-darken") : (o.addClass("btn-disabled"),
                s || o.addClass("btn-opaque")),
                s && o.addClass("btn-hollow-selected"),
                o.prop("disabled", !l)
            };
            d("#team-menu").css("display", this.active ? "block" : "none"),
            d("#start-menu").css("display", this.active ? "none" : "block"),
            d("#right-column").css("display", this.active ? "none" : "block"),
            d("#social-share-block").css("display", this.active ? "none" : "block");
            const a = this.roomData.lastError != ""
              , i = Vi(this.roomData.lastError, this.localization);
            if (this.serverWarning.css("opacity", a ? 1 : 0),
            this.serverWarning.html(i),
            this.roomData.lastError == "find_game_invalid_protocol" && !this.displayedInvalidProtocolModal && (d("#modal-refresh").fadeIn(200),
            this.displayedInvalidProtocolModal = !0),
            this.active && (d("#team-menu-joining-text").css("display", this.create ? "none" : "block"),
            d("#team-menu-creating-text").css("display", this.create ? "block" : "none"),
            d("#team-menu-connecting").css("display", this.joined ? "none" : "block"),
            d("#team-menu-contents").css("display", this.joined ? "block" : "none"),
            d("#btn-team-leave").css("display", this.joined ? "block" : "none")),
            this.joined) {
                const o = this.siteInfo.info.pops || {}
                  , s = Object.keys(o);
                for (let y = 0; y < s.length; y++) {
                    const _ = s[y]
                      , S = o[_].playerCount
                      , b = this.localization.translate("index-players")
                      , A = d("#team-server-opts").children(`option[value="${_}"]`);
                    A.html(`${A.attr("data-label")} [${S} ${b}]`)
                }
                if (this.serverSelect.find("option").each( (y, _) => {
                    _.selected = _.value == this.roomData.region
                }
                ),
                t(this.queueMode1, this.roomData.gameModeIdx == 1, this.isLeader && this.roomData.enabledGameModeIdxs.includes(1)),
                t(this.queueMode2, this.roomData.gameModeIdx == 2, this.isLeader && this.roomData.enabledGameModeIdxs.includes(2)),
                t(this.fillAuto, this.roomData.autoFill, this.isLeader),
                t(this.fillNone, !this.roomData.autoFill, this.isLeader),
                this.serverSelect.prop("disabled", !this.isLeader),
                this.roomData.roomUrl) {
                    const y = this.roomData.roomUrl.substring(1);
                    if (this.config.get("ENV") === "CrazyGames") {
                        const _ = window.CrazyGames.SDK.game.inviteLink({
                            roomID: y
                        });
                        d("#team-url").html(_)
                    } else {
                        const _ = `${window.location.href.replace(window.location.hash, "")}${this.roomData.roomUrl}`;
                        d("#team-url").html(_),
                        window.history && window.history.replaceState("", "", this.roomData.roomUrl)
                    }
                    d("#team-code").html(y)
                }
                this.playBtn.html(this.roomData.findingGame || this.joiningGame ? '<div class="ui-spinner"></div>' : this.playBtn.attr("data-label"));
                const l = this.siteInfo.getGameModeStyles();
                for (let y = 0; y < l.length; y++)
                    this.playBtn.removeClass(l[y].buttonCss);
                const c = l[this.roomData.gameModeIdx];
                c ? (this.playBtn.addClass("btn-custom-mode-no-indent"),
                this.playBtn.addClass(c.buttonCss),
                this.playBtn.css({
                    "background-image": `url(${c.icon})`
                })) : this.playBtn.css({
                    "background-image": ""
                });
                let m = !1;
                for (let y = 0; y < this.players.length; y++)
                    m = m || this.players[y].inGame;
                const h = d("#msg-wait-reason");
                if (this.isLeader) {
                    h.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`);
                    const y = m && !this.joiningGame;
                    h.css("display", y ? "block" : "none"),
                    this.playBtn.css("display", y ? "none" : "block")
                } else
                    this.roomData.findingGame || this.joiningGame ? h.html(`<div class="ui-spinner" style="margin-right:16px"></div>${this.localization.translate("index-joining-game")}<span> ...</span>`) : m ? h.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`) : h.html(`${this.localization.translate("index-waiting-for-leader")}<span> ...</span>`),
                    h.css("display", "block"),
                    this.playBtn.css("display", "none");
                const u = d("#team-menu-member-list");
                u.empty();
                for (let y = 0; y < this.roomData.maxPlayers; y++) {
                    let _ = {
                        name: "",
                        playerId: 0,
                        isLeader: !1,
                        inGame: !1,
                        self: !1
                    };
                    if (y < this.players.length) {
                        const T = this.players[y];
                        _ = {
                            name: T.name,
                            playerId: T.playerId,
                            isLeader: T.isLeader,
                            inGame: T.inGame,
                            self: T.playerId == this.localPlayerId
                        }
                    }
                    const S = d("<div/>", {
                        class: "team-menu-member"
                    });
                    let b = "";
                    _.isLeader ? b = " icon-leader" : this.isLeader && _.playerId != 0 && (b = " icon-kick"),
                    S.append(d("<div/>", {
                        class: `icon${b}`,
                        "data-playerid": _.playerId
                    }));
                    let A = null
                      , P = null;
                    if (this.editingName && _.self) {
                        A = d("<input/>", {
                            type: "text",
                            tabindex: 0,
                            class: "name menu-option name-text name-self-input",
                            maxLength: ae.PlayerNameMaxLen
                        }),
                        A.val(_.name);
                        const T = () => {
                            const C = re.sanitizeNameInput(A?.val());
                            _.name = C,
                            this.config.set("playerName", C),
                            this.sendMessage("changeName", {
                                name: C
                            }),
                            this.editingName = !1,
                            this.refreshUi()
                        }
                          , I = () => {
                            this.editingName = !1,
                            this.refreshUi()
                        }
                        ;
                        A.keypress(C => {
                            if (C.which === 13)
                                return T(),
                                !1
                        }
                        ),
                        A.on("blur", I),
                        S.append(A),
                        P = d("<div/>", {
                            class: "icon icon-submit-name-change"
                        }),
                        P.on("click", T),
                        P.on("mousedown", C => {
                            C.preventDefault(),
                            C.stopPropagation()
                        }
                        )
                    } else {
                        let T = "name-text";
                        _.self && (T += " name-self"),
                        _.inGame && (T += " name-in-game");
                        const I = d("<div/>", {
                            class: `name menu-option ${T}`,
                            html: re.htmlEscape(_.name)
                        });
                        _.self && I.on("click", () => {
                            this.editingName = !0,
                            this.refreshUi()
                        }
                        ),
                        S.append(I)
                    }
                    P ? S.append(P) : S.append(d("<div/>", {
                        class: `icon ${_.inGame ? "icon-in-game" : ""}`
                    })),
                    u.append(S),
                    A?.focus()
                }
                d(".icon-kick", u).click(y => {
                    const _ = Number(d(y.currentTarget).attr("data-playerid"));
                    this.sendMessage("kick", {
                        playerId: _
                    })
                }
                );
                const g = this.players.find(y => y.playerId == this.localPlayerId)
                  , w = g && !g.inGame;
                !document.hasFocus() && this.prevPlayerCount < this.players.length && this.players.length > 1 && w && this.audioManager.playSound("notification_join_01", {
                    channel: "ui"
                }),
                this.prevPlayerCount = this.players.length
            }
        }
    }
    class E1 {
        nameInput = d("#player-name-input-solo");
        serverSelect = d("#server-select-main");
        playMode0Btn = d("#btn-start-mode-0");
        playMode1Btn = d("#btn-start-mode-1");
        playMode2Btn = d("#btn-start-mode-2");
        muteBtns = d(".btn-sound-toggle");
        aimLineBtn = d("#btn-game-aim-line");
        masterSliders = d(".sl-master-volume");
        soundSliders = d(".sl-sound-volume");
        musicSliders = d(".sl-music-volume");
        serverWarning = d("#server-warning");
        languageSelect = d(".language-select");
        startMenuWrapper = d("#start-menu-wrapper");
        gameAreaWrapper = d("#game-area-wrapper");
        playButtons = d(".play-button-container");
        playLoading = d(".play-loading-outer");
        errorModal = new Be(d("#modal-notification"));
        refreshModal = new Be(d("#modal-refresh"));
        config = new Ll;
        localization = new v1;
        account;
        loadoutMenu;
        pass;
        profileUi;
        pingTest = new jn;
        audioManager = new Bl;
        ambience = new Tl;
        siteInfo;
        teamMenu;
        pixi = null;
        resourceManager = null;
        input = null;
        inputBinds = null;
        inputBindUi = null;
        game = null;
        loadoutDisplay = null;
        domContentLoaded = !1;
        configLoaded = !1;
        initialized = !1;
        active = !1;
        sessionId = re.random64();
        contextListener = function(t) {
            t.preventDefault()
        }
        ;
        errorMessage = "";
        quickPlayPendingModeIdx = -1;
        findGameAttempts = 0;
        findGameTime = 0;
        pauseTime = 0;
        wasPlayingVideo = !1;
        checkedPingTest = !1;
        hasFocus = !0;
        newsDisplayed = !0;
        respawns = [];
        constructor() {
            this.account = new Il(this.config),
            this.loadoutMenu = new Zm(this.account,this.localization),
            this.pass = new P1(this.account,this.loadoutMenu,this.localization),
            this.profileUi = new D1(this.account,this.localization,this.loadoutMenu,this.errorModal),
            this.siteInfo = new Hm(this.config,this.localization),
            this.teamMenu = new O1(this.config,this.pingTest,this.siteInfo,this.localization,this.audioManager,this.onTeamMenuJoinGame.bind(this),this.onTeamMenuLeave.bind(this));
            const t = () => {
                this.config.load( () => {
                    this.configLoaded = !0,
                    this.tryLoad()
                }
                )
            }
            ;
            this.loadBrowserDeps(t)
        }
        loadBrowserDeps(t) {
            t()
        }
        tryLoad() {
            if (this.domContentLoaded && this.configLoaded && !this.initialized) {
                this.initialized = !0,
                D.mobile && Xr.applyMobileBrowserStyling(D.tablet);
                const t = this.config.get("language") || this.localization.detectLocale();
                this.config.set("language", t),
                this.localization.setLocale(t),
                this.localization.populateLanguageSelect(),
                this.startPingTest(),
                this.siteInfo.load(),
                this.localization.localizeIndex(),
                this.account.init(),
                this.nameInput.maxLength = ae.PlayerNameMaxLen,
                this.playMode0Btn.on("click", () => {
                    this.config.get("ENV") === "CrazyGames" ? or( () => {
                        this.tryQuickStartGame(0)
                    }
                    ) : this.config.get("ENV") === "POKI" && this.respawns.length > 0 ? lr( () => {
                        this.tryQuickStartGame(0)
                    }
                    ) : this.config.get("ENV") === "GameMonetize" ? sr( () => {
                        this.tryQuickStartGame(0)
                    }
                    ) : this.tryQuickStartGame(0)
                }
                ),
                this.playMode1Btn.on("click", () => {
                    this.config.get("ENV") === "CrazyGames" ? or( () => {
                        this.tryQuickStartGame(1)
                    }
                    ) : this.config.get("ENV") === "POKI" && this.respawns.length > 0 ? lr( () => {
                        this.tryQuickStartGame(1)
                    }
                    ) : this.config.get("ENV") === "GameMonetize" ? sr( () => {
                        this.tryQuickStartGame(1)
                    }
                    ) : this.tryQuickStartGame(1)
                }
                ),
                this.playMode2Btn.on("click", () => {
                    this.config.get("ENV") === "CrazyGames" ? or( () => {
                        this.tryQuickStartGame(2)
                    }
                    ) : this.config.get("ENV") === "POKI" && this.respawns.length > 0 ? lr( () => {
                        this.tryQuickStartGame(2)
                    }
                    ) : this.config.get("ENV") === "GameMonetize" && this.respawns.length > 0 ? sr( () => {
                        this.tryQuickStartGame(2)
                    }
                    ) : this.tryQuickStartGame(2)
                }
                ),
                this.serverSelect.change( () => {
                    const g = this.serverSelect.find(":selected").val();
                    this.config.set("region", g)
                }
                ),
                this.nameInput.on("blur", g => {
                    this.setConfigFromDOM()
                }
                ),
                this.muteBtns.on("click", g => {
                    this.config.set("muteAudio", !this.config.get("muteAudio"))
                }
                ),
                this.muteBtns.on("mousedown", g => {
                    g.stopPropagation()
                }
                ),
                d(this.masterSliders).on("mousedown", g => {
                    g.stopPropagation()
                }
                ),
                d(this.soundSliders).on("mousedown", g => {
                    g.stopPropagation()
                }
                ),
                d(this.musicSliders).on("mousedown", g => {
                    g.stopPropagation()
                }
                ),
                this.masterSliders.on("input", g => {
                    const w = Number(d(g.target).val()) / 100;
                    this.audioManager.setMasterVolume(w),
                    this.config.set("masterVolume", w)
                }
                ),
                this.soundSliders.on("input", g => {
                    const w = Number(d(g.target).val()) / 100;
                    this.audioManager.setSoundVolume(w),
                    this.config.set("soundVolume", w)
                }
                ),
                this.musicSliders.on("input", g => {
                    const w = Number(d(g.target).val()) / 100;
                    this.audioManager.setMusicVolume(w),
                    this.config.set("musicVolume", w)
                }
                ),
                d(".modal-settings-item").children("input").each( (g, w) => {
                    const y = d(w);
                    y.prop("checked", this.config.get(y.prop("id")))
                }
                ),
                d(".modal-settings-item > input:checkbox").change(g => {
                    const w = d(g.target);
                    this.config.set(w.prop("id"), w.is(":checked"))
                }
                ),
                d(".btn-fullscreen-toggle").on("click", () => {
                    re.toggleFullScreen()
                }
                ),
                this.languageSelect.on("change", g => {
                    const w = g.target.value;
                    w && this.config.set("language", w)
                }
                ),
                d("#btn-create-team").on("click", () => {
                    this.tryJoinTeam(!0)
                }
                ),
                d("#btn-team-mobile-link-join").on("click", () => {
                    let g = d("#team-link-input").val()?.trim();
                    const w = g.indexOf("#");
                    w >= 0 && (g = g.slice(w + 1)),
                    g.length > 0 ? (d("#team-mobile-link").css("display", "none"),
                    this.tryJoinTeam(!1, g)) : (d("#team-mobile-link-desc").css("display", "none"),
                    d("#team-mobile-link-warning").css("display", "none").fadeIn(100))
                }
                ),
                d("#btn-team-leave").on("click", () => {
                    window.history && window.history.replaceState("", "", "/"),
                    d("#news-block").css("display", "block"),
                    this.game?.free(),
                    this.teamMenu.leave()
                }
                );
                const a = d("#news-current").data("date")
                  , i = new Date(a).getTime();
                d(".right-column-toggle").on("click", () => {
                    this.newsDisplayed ? (d("#news-wrapper").fadeOut(250),
                    d("#pass-wrapper").fadeIn(250)) : (this.config.set("lastNewsTimestamp", i),
                    d(".news-toggle").find(".account-alert").css("display", "none"),
                    d("#news-wrapper").fadeIn(250),
                    d("#pass-wrapper").fadeOut(250)),
                    this.newsDisplayed = !this.newsDisplayed
                }
                );
                const o = this.config.get("lastNewsTimestamp");
                i > o && d(".news-toggle").find(".account-alert").css("display", "block"),
                this.setDOMFromConfig(),
                this.setAppActive(!0);
                const s = document.querySelector("#cvs")
                  , l = window.devicePixelRatio > 1 ? 2 : 1;
                D.os == "ios" && (No.PRECISION_FRAGMENT = Wo.HIGH);
                const c = g => new Go({
                    width: window.innerWidth,
                    height: window.innerHeight,
                    view: s,
                    antialias: !1,
                    resolution: l,
                    hello: !0,
                    forceCanvas: g
                });
                let m = null;
                try {
                    m = c(!1)
                } catch {
                    m = c(!0)
                }
                this.pixi = m,
                this.pixi.renderer.events.destroy(),
                this.pixi.ticker.add(this.update, this),
                this.pixi.renderer.background.color = 7378501,
                this.resourceManager = new Vm(this.pixi.renderer,this.audioManager,this.config),
                this.resourceManager.loadMapAssets("main"),
                this.input = new ac(document.getElementById("game-touch-area")),
                this.inputBinds = new qn(this.input,this.config),
                this.inputBindUi = new Fn(this.input,this.inputBinds);
                const h = () => {
                    this.loadoutDisplay.free(),
                    this.game.init(),
                    this.onResize(),
                    this.findGameAttempts = 0,
                    this.ambience.onGameStart()
                }
                  , u = g => {
                    this.game.dYQsO && this.pass.scheduleUpdatePass(this.game.WXej),
                    this.game.free(),
                    this.errorMessage = this.localization.translate(g || ""),
                    this.teamMenu.onGameComplete(),
                    this.ambience.onGameComplete(this.audioManager),
                    this.setAppActive(!0),
                    this.setPlayLockout(!1),
                    g == "index-invalid-protocol" && this.showInvalidProtocolModal(),
                    this.config.get("ENV") === "CrazyGames" ? window.CrazyGames.SDK.game.gameplayStop() : this.config.get("ENV") === "POKI" && window.PokiSDK.gameplayStop()
                }
                ;
                this.game = new Rn(this.pixi,this.audioManager,this.localization,this.config,this.input,this.inputBinds,this.inputBindUi,this.ambience,this.resourceManager,this.respawns,h,u),
                this.loadoutDisplay = new C1(this.pixi,this.audioManager,this.config,this.inputBinds,this.account),
                this.loadoutMenu.loadoutDisplay = this.loadoutDisplay,
                this.onResize(),
                this.tryJoinTeam(this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.game.isInstantJoin),
                Xr.setupModals(this.inputBinds, this.inputBindUi),
                this.onConfigModified(),
                this.config.addModifiedListener(this.onConfigModified.bind(this)),
                Bn()
            }
        }
        onUnload() {
            this.teamMenu.leave()
        }
        onResize() {
            D.onResize(),
            Xr.onResize(),
            this.loadoutMenu.onResize(),
            this.pixi?.renderer.resize(D.screenWidth, D.screenHeight),
            this.game?.initialized && this.game.resize(),
            this.loadoutDisplay?.initialized && this.loadoutDisplay.resize(),
            this.refreshUi()
        }
        startPingTest() {
            const t = this.config.get("regionSelected") ? [this.config.get("region")] : this.pingTest.getRegionList();
            this.pingTest.start(t)
        }
        setAppActive(t) {
            this.active = t,
            this.quickPlayPendingModeIdx = -1,
            this.refreshUi(),
            t && this.errorModal.hide()
        }
        setPlayLockout(t) {
            const a = t ? 0 : 1e3;
            this.playButtons.stop().delay(a).animate({
                opacity: t ? .5 : 1
            }, 250),
            this.playLoading.stop().delay(a).animate({
                opacity: t ? 1 : 0
            }, {
                duration: 250,
                start: () => {
                    this.playLoading.css({
                        "pointer-events": t ? "initial" : "none"
                    })
                }
            })
        }
        onTeamMenuJoinGame(t) {
            this.waitOnAccount( () => {
                this.joinGame(t)
            }
            )
        }
        onTeamMenuLeave(t="") {
            t && t != "" && window.history && window.history.replaceState("", "", "/"),
            this.errorMessage = t,
            this.setDOMFromConfig(),
            this.refreshUi()
        }
        setConfigFromDOM() {
            const t = re.sanitizeNameInput(this.nameInput.val());
            this.config.set("playerName", t);
            const a = this.serverSelect.find(":selected").val();
            this.config.set("region", a)
        }
        async setDOMFromConfig() {
            if (!this.config.get("playerName") && this.config.get("ENV") === "CrazyGames" && window.CrazyGames.SDK.user.isUserAccountAvailable) {
                const t = await window.CrazyGames.SDK.user.getUser();
                if (t) {
                    const a = t.username;
                    this.config.set("playerName", a)
                }
            }
            this.nameInput.val(this.config.get("playerName")),
            this.serverSelect.find("option").each( (t, a) => {
                a.selected = a.value == this.config.get("region")
            }
            ),
            this.languageSelect.val(this.config.get("language"))
        }
        onConfigModified(t) {
            const a = this.config.get("muteAudio");
            a != this.audioManager.mute && (this.muteBtns.removeClass(a ? "audio-on-icon" : "audio-off-icon"),
            this.muteBtns.addClass(a ? "audio-off-icon" : "audio-on-icon"),
            this.audioManager.setMute(a));
            const i = this.config.get("masterVolume");
            this.masterSliders.val(i * 100),
            this.audioManager.setMasterVolume(i);
            const o = this.config.get("soundVolume");
            this.soundSliders.val(o * 100),
            this.audioManager.setSoundVolume(o);
            const s = this.config.get("musicVolume");
            if (this.musicSliders.val(s * 100),
            this.audioManager.setMusicVolume(s),
            t == "language") {
                const l = this.config.get("language");
                this.localization.setLocale(l)
            }
            t == "region" && (this.config.set("regionSelected", !0),
            this.startPingTest()),
            t == "highResTex" && location.reload()
        }
        refreshUi() {
            this.startMenuWrapper.css("display", this.active ? "flex" : "none"),
            this.gameAreaWrapper.css({
                display: this.active ? "none" : "block",
                opacity: this.active ? 0 : 1
            }),
            this.active ? (d("body").removeClass("user-select-none"),
            document.removeEventListener("contextmenu", this.contextListener)) : (d("body").addClass("user-select-none"),
            d("#start-main").stop(!0),
            document.addEventListener("contextmenu", this.contextListener)),
            d("#ad-block-left").css("display", !D.isLandscape && this.teamMenu.active ? "none" : "block");
            const t = this.active && this.errorMessage != "";
            this.serverWarning.css({
                display: "block",
                opacity: t ? 1 : 0
            }),
            this.serverWarning.html(this.errorMessage);
            const a = (i, o) => {
                i.html(this.quickPlayPendingModeIdx === o ? '<div class="ui-spinner"></div>' : this.localization.translate(i.data("l10n")))
            }
            ;
            a(this.playMode0Btn, 0),
            a(this.playMode1Btn, 1),
            a(this.playMode2Btn, 2)
        }
        waitOnAccount(t) {
            if (this.account.requestsInFlight == 0)
                t();
            else {
                const a = setTimeout( () => {
                    i()
                }
                , 2500)
                  , i = () => {
                    t(),
                    clearTimeout(a),
                    this.account.removeEventListener("requestsComplete", i)
                }
                ;
                this.account.addEventListener("requestsComplete", i)
            }
        }
        tryJoinTeam(t, a) {
            if (this.active && this.quickPlayPendingModeIdx === -1) {
                let i = a || window.location.hash.slice(1);
                if (this.config.get("ENV") === "CrazyGames") {
                    const o = window.CrazyGames.SDK.game.getInviteParam("roomID");
                    o && (i = o,
                    t = !1)
                }
                if (t || i != "")
                    return this.setConfigFromDOM(),
                    this.teamMenu.connect(t, i),
                    this.refreshUi(),
                    !0
            }
            return !1
        }
        tryQuickStartGame(t) {
            if (this.quickPlayPendingModeIdx === -1) {
                this.errorMessage = "",
                this.quickPlayPendingModeIdx = t,
                this.setConfigFromDOM(),
                this.refreshUi();
                let a = 0;
                this.findGameAttempts > 0 && Date.now() - this.findGameTime < 3e4 ? a = Math.min(this.findGameAttempts * 2.5 * 1e3, 7500) : this.findGameAttempts = 0,
                this.findGameTime = Date.now(),
                this.findGameAttempts++;
                const i = F.protocolVersion;
                let o = this.config.get("region");
                const s = re.getParameterByName("region");
                s !== void 0 && s.length > 0 && (o = s);
                let l = this.pingTest.getZones(o);
                const c = re.getParameterByName("zone");
                c !== void 0 && c.length > 0 && (l = [c]);
                const m = {
                    version: i,
                    region: o,
                    zones: l,
                    playerCount: 1,
                    autoFill: !0,
                    gameModeIdx: t
                }
                  , h = () => {
                    this.waitOnAccount( () => {
                        this.findGame(m, (u, g) => {
                            if (u) {
                                this.onJoinGameError(u);
                                return
                            }
                            this.joinGame(g)
                        }
                        )
                    }
                    )
                }
                ;
                a == 0 ? h() : setTimeout( () => {
                    h()
                }
                , a)
            }
        }
        findGame(t, a) {
            const i = (o, s) => {
                if (o >= s) {
                    a("full");
                    return
                }
                const l = function() {
                    setTimeout( () => {
                        i(o + 1, s)
                    }
                    , 500)
                };
                function c(m) {
                    d.ajax({
                        type: "POST",
                        url: Qt.resolveUrl("/api/find_game"),
                        data: JSON.stringify({
                            ...t,
                            token: m
                        }),
                        contentType: "application/json; charset=utf-8",
                        timeout: 1e4,
                        success: function(h) {
                            if (h?.err && h.err != "full") {
                                a(h.err);
                                return
                            }
                            const u = h?.res ? h.res[0] : null;
                            u?.hosts && u.addrs ? a(null, u) : l()
                        },
                        error: function(h) {
                            l()
                        }
                    })
                }
                this.siteInfo.info.captchaEnabled ? window.turnstile.render("#start-turnstile-container", {
                    sitekey: "0x4AAAAAAAxkDXmFwymMPT0B",
                    appearance: "interaction-only",
                    callback: m => {
                        c(m),
                        window.turnstile.remove("#start-turnstile-container")
                    }
                }) : c("")
            }
            ;
            i(0, 2)
        }
        joinGame(t) {
            if (!this.game) {
                setTimeout( () => {
                    this.joinGame(t)
                }
                , 250);
                return
            }
            const a = t.hosts || []
              , i = [];
            for (let s = 0; s < a.length; s++)
                i.push(`ws${t.useHttps ? "s" : ""}://${a[s]}/play?gameId=${t.gameId}`);
            const o = (s, l) => {
                const c = s.shift();
                if (!c) {
                    this.onJoinGameError("join_game_failed");
                    return
                }
                const m = function() {
                    o(s, l)
                };
                this.game.tryJoinGame(c, l.data, this.account.loadoutPriv, this.account.questPriv, m)
            }
            ;
            o(i, t)
        }
        onJoinGameError(t) {
            const a = {
                full: this.localization.translate("index-failed-finding-game"),
                invalid_protocol: this.localization.translate("index-invalid-protocol"),
                join_game_failed: this.localization.translate("index-failed-joining-game")
            };
            t == "invalid_protocol" && this.showInvalidProtocolModal(),
            this.errorMessage = a[t] || a.full,
            this.quickPlayPendingModeIdx = -1,
            this.teamMenu.leave("join_game_failed"),
            this.refreshUi()
        }
        showInvalidProtocolModal() {
            this.refreshModal.show(!0)
        }
        update() {
            const t = k.clamp(this.pixi.ticker.elapsedMS / 1e3, .001, .125);
            if (this.pingTest.update(t),
            !this.checkedPingTest && this.pingTest.isComplete()) {
                if (!this.config.get("regionSelected")) {
                    const a = this.pingTest.getRegion();
                    a && (this.config.set("region", a),
                    this.setDOMFromConfig())
                }
                this.checkedPingTest = !0
            }
            this.resourceManager.update(t),
            this.audioManager.update(t),
            this.ambience.update(t, this.audioManager, !this.active),
            this.teamMenu.update(t),
            this.game?.initialized && this.game.SxINps && (this.active && (this.setAppActive(!1),
            this.setPlayLockout(!0)),
            this.game.update(t)),
            this.active && this.loadoutDisplay && this.game && !this.game.initialized && (this.loadoutMenu.active ? (this.loadoutDisplay.initialized || this.loadoutDisplay.init(),
            this.loadoutDisplay.show(),
            this.loadoutDisplay.update(t, this.hasFocus)) : this.loadoutDisplay.hide()),
            !this.active && this.loadoutMenu.active && this.loadoutMenu.hide(),
            this.active && this.pass?.update(t),
            this.input.flush()
        }
    }
    const Je = new E1;
    function Lo() {
        Je.domContentLoaded = !0,
        Je.tryLoad()
    }
    document.addEventListener("DOMContentLoaded", Lo);
    window.addEventListener("load", Lo);
    window.addEventListener("unload", r => {
        Je.onUnload()
    }
    );
    window.location.hash == "#_=_" && (window.location.hash = "",
    history.pushState("", document.title, window.location.pathname));
    window.addEventListener("resize", () => {
        Je.onResize()
    }
    );
    window.addEventListener("orientationchange", () => {
        Je.onResize()
    }
    );
    window.addEventListener("hashchange", () => {
        Je.tryJoinTeam(!1)
    }
    );
    window.addEventListener("beforeunload", r => {
        if (Je.game?.warnPageReload()) {
            const t = "Do you want to reload the game?";
            return r.returnValue = t,
            t
        }
    }
    );
    window.addEventListener("onfocus", () => {
        Je.hasFocus = !0
    }
    );
    window.addEventListener("onblur", () => {
        Je.hasFocus = !1
    }
    );
    const Hi = [];
    window.onerror = function(r, t, a, i, o) {
        r = r || "undefined_error_msg";
        const s = o ? o.stack : ""
          , l = {
            msg: r,
            id: Je.sessionId,
            url: t,
            line: a,
            column: i,
            stacktrace: s,
            browser: navigator.userAgent,
            protocol: F.protocolVersion,
            clientGitVersion: "e2ccecccaf29507087600b1f2494c8b6bf11adf3",
            serverGitVersion: Je.siteInfo.info.gitRevision
        }
          , c = JSON.stringify(l);
        Hi.includes(c) || (Hi.push(c),
        console.error("windowOnError", c))
    }
    ;
    navigator.serviceWorker?.getRegistrations().then(r => {
        for (const t of r)
            t.unregister()
    }
    );
    
    class GameMod {
        constructor() {
            const settings = JSON.parse(localStorage.getItem("gameSettings") || '{}');
            this.lastFrameTime = performance.now();
            this.frameCount = 0;
            this.fps = 0;
            this.kills = 0;
            this.setAnimationFrameCallback();
            this.isStartMapHide = settings["hide-mini-map"] !== undefined ? settings["hide-mini-map"] : false;
            this.isFpsVisible = true;
            this.isPingVisible = true;
            this.isKillsVisible = true;
            this.isMenuVisible = true;
            this.isClean = false;
            this.isLocalRotation = settings["local-rotation"] !== undefined ? settings["local-rotation"] : true;
            this.isFpsUncapped = settings["fps-uncap"] !== undefined ? settings["fps-uncap"] : true;
            this.isInterpolation = settings["movement-interpolation"] !== undefined ? settings["movement-interpolation"] : true;
            this.pingTests = [];
            this.pingInterval = null;
            this.init();
      
            window.isLocalRotation = this.isLocalRotation;
            window.isInterpolation = this.isInterpolation;
            window.isFpsUncapped = this.isFpsUncapped;
            window.isStartMapHide = this.isStartMapHide;
      
      
            this.initCounter("fpsCounter", "isFpsVisible", this.updateFpsVisibility.bind(this));
            this.initCounter("pingCounter", "isPingVisible", this.updatePingVisibility.bind(this));
            this.initCounter("killsCounter", "isKillsVisible", this.updateKillsVisibility.bind(this));
      
            this.initMenu();
            this.loadBackgroundFromLocalStorage();
            this.loadLocalStorage();
            this.startUpdateLoop();
            this.setupWeaponBorderHandler();
            this.setupKeyListeners();
        }
      
        init() {
            this.startUpdateLoop();
            this.pingShow();
            this.customUiElements();
        }
      
        initCounter(id, visibilityKey, updateVisibilityFn) {
            this[id] = document.createElement("div");
            this[id].id = id;
            Object.assign(this[id].style, {
                color: "white",
                backgroundColor: "rgba(0, 0, 0, 0.2)",
                padding: "5px 10px",
                marginTop: "10px",
                borderRadius: "5px",
                fontFamily: "Arial, sans-serif",
                fontSize: "14px",
                zIndex: "10000",
                pointerEvents: "none",
            });
      
            const uiTopLeft = document.getElementById("ui-top-left");
            if (uiTopLeft) {
                uiTopLeft.appendChild(this[id]);
            }
      
            updateVisibilityFn();
        }
      
        updateFpsVisibility() {
            this.updateVisibility("fpsCounter", this.isFpsVisible);
        }
      
        updateFpsToggle() {
            if (this.isFpsUncapped) { 
                this.animationFrameCallback = (callback) => setTimeout(callback, 1);
            } else {
                this.animationFrameCallback = (callback) => requestAnimationFrame(callback);
            }
        }
        
      
        updatePingVisibility() {
            this.updateVisibility("pingCounter", this.isPingVisible);
        }
      
        updateKillsVisibility() {
            this.updateVisibility("killsCounter", this.isKillsVisible);
        }
      
      
        updateVisibility(id, isVisible) {
            if (this[id]) {
                this[id].style.display = isVisible ? "block" : "none";
                this[id].style.backgroundColor = isVisible
                    ? "rgba(0, 0, 0, 0.2)"
                    : "transparent";
            }
        }
      
        toggleFpsDisplay() {
        this.isFpsVisible = !this.isFpsVisible;
        this.updateFpsVisibility();
        }
        
        setAnimationFrameCallback() {
            this.animationFrameCallback = (callback) => setTimeout(callback, 1);
        }
      
      
        togglePingDisplay() {
        this.isPingVisible = !this.isPingVisible;
        this.updatePingVisibility();
        }
      
        toggleKillsDisplay() {
        this.isKillsVisible = !this.isKillsVisible;
        this.updateKillsVisibility();
        }
      
        getKills() {
        const killElement = document.querySelector(
            ".ui-player-kills.js-ui-player-kills",
        );
        if (killElement) {
            const kills = parseInt(killElement.textContent, 10);
            return isNaN(kills) ? 0 : kills;
        }
        return 0;
        }
      
        getRegionFromLocalStorage() {
        let config = localStorage.getItem("surviv_config");
        if (config) {
            let configObject = JSON.parse(config);
            return configObject.region;
        }
        return null;
        }
      
        startPingTest() {
        const currentUrl = window.location.href;
        const isSpecialUrl = /\/#\w+/.test(currentUrl);
      
        const teamSelectElement = document.getElementById("team-server-select");
        const mainSelectElement = document.getElementById("server-select-main");
      
        const region =
            isSpecialUrl && teamSelectElement
            ? teamSelectElement.value
            : mainSelectElement
                ? mainSelectElement.value
                : null;
      
        if (region && region !== this.currentServer) {
            this.currentServer = region;
            this.resetPing();
      
            const servers = [
            { region: "NA", url: "usr.mathsiscoolfun.com:8001" },
            { region: "EU", url: "eur.mathsiscoolfun.com:8001" },
            { region: "Asia", url: "asr.mathsiscoolfun.com:8001" },
            { region: "SA", url: "sa.mathsiscoolfun.com:8001" },
            ];
      
            const selectedServer = servers.find(
            (server) => region.toUpperCase() === server.region.toUpperCase(),
            );
      
            if (selectedServer) {
            this.pingTest = new PingTest(selectedServer);
            this.pingTest.startPingTest();
            } else {
            this.resetPing();
            }
        }
        }
      
        resetPing() {
        if (this.pingTest && this.pingTest.test.ws) {
            this.pingTest.test.ws.close();
            this.pingTest.test.ws = null;
        }
        this.pingTest = null;
        }
      
      
        saveBackgroundToLocalStorage(url) {
        localStorage.setItem("lastBackgroundUrl", url);
        }
      
        saveBackgroundToLocalStorage(image) {
        if (typeof image === "string") {
            localStorage.setItem("lastBackgroundType", "url");
            localStorage.setItem("lastBackgroundValue", image);
        } else {
            localStorage.setItem("lastBackgroundType", "local");
            const reader = new FileReader();
            reader.onload = () => {
            localStorage.setItem("lastBackgroundValue", reader.result);
            };
            reader.readAsDataURL(image);
        }
        }
      
        loadBackgroundFromLocalStorage() {
        const backgroundType = localStorage.getItem("lastBackgroundType");
        const backgroundValue = localStorage.getItem("lastBackgroundValue");
      
        const backgroundElement = document.getElementById("background");
        if (backgroundElement && backgroundType && backgroundValue) {
            if (backgroundType === "url") {
            backgroundElement.style.backgroundImage = `url(${backgroundValue})`;
            } else if (backgroundType === "local") {
            backgroundElement.style.backgroundImage = `url(${backgroundValue})`;
            }
        }
        }
        loadLocalStorage() {
            const savedSettings = JSON.parse(localStorage.getItem("userSettings"));
            if (savedSettings) {
                this.isFpsVisible = savedSettings.isFpsVisible ?? this.isFpsVisible;
                this.isPingVisible = savedSettings.isPingVisible ?? this.isPingVisible;
                this.isKillsVisible = savedSettings.isKillsVisible ?? this.isKillsVisible;
                this.isClean = savedSettings.isClean ?? this.isClean;
            }
      
            this.updateKillsVisibility();
            this.updateFpsVisibility();
            this.updatePingVisibility();
        }
      
        updateHealthBars() {
        const healthBars = document.querySelectorAll("#ui-health-container");
        healthBars.forEach((container) => {
            const bar = container.querySelector("#ui-health-actual");
            if (bar) {
            const width = Math.round(parseFloat(bar.style.width));
            let percentageText = container.querySelector(".health-text");
      
            if (!percentageText) {
                percentageText = document.createElement("span");
                percentageText.classList.add("health-text");
                Object.assign(percentageText.style, {
                width: "100%",
                textAlign: "center",
                marginTop: "5px",
                color: "#333",
                fontSize: "20px",
                fontWeight: "bold",
                position: "absolute",
                zIndex: "10",
                });
                container.appendChild(percentageText);
            }
      
            percentageText.textContent = `${width}%`;
            }
        });
        }
      
        updateBoostBars() {
        const boostCounter = document.querySelector("#ui-boost-counter");
        if (boostCounter) {
            const boostBars = boostCounter.querySelectorAll(
            ".ui-boost-base .ui-bar-inner",
            );
      
            let totalBoost = 0;
            const weights = [25, 25, 40, 10];
      
            boostBars.forEach((bar, index) => {
            const width = parseFloat(bar.style.width);
            if (!isNaN(width)) {
                totalBoost += width * (weights[index] / 100);
            }
            });
      
            const averageBoost = Math.round(totalBoost);
            let boostDisplay = boostCounter.querySelector(".boost-display");
      
            if (!boostDisplay) {
            boostDisplay = document.createElement("div");
            boostDisplay.classList.add("boost-display");
            Object.assign(boostDisplay.style, {
                position: "absolute",
                bottom: "75px",
                right: "335px",
                color: "#FF901A",
                backgroundColor: "rgba(0, 0, 0, 0.4)",
                padding: "5px 10px",
                borderRadius: "5px",
                fontFamily: "Arial, sans-serif",
                fontSize: "14px",
                zIndex: "10",
                textAlign: "center",
            });
      
            boostCounter.appendChild(boostDisplay);
            }
      
            boostDisplay.textContent = `AD: ${averageBoost}%`;
        }
        }
      
        setupWeaponBorderHandler() {
            const weaponContainers = Array.from(
            document.getElementsByClassName("ui-weapon-switch"),
            );
            weaponContainers.forEach((container) => {
            if (container.id === "ui-weapon-id-4") {
                container.style.border = "3px solid #2f4032";
            } else {
                container.style.border = "3px solid #FFFFFF";
            }
            });
      
            const weaponNames = Array.from(
            document.getElementsByClassName("ui-weapon-name"),
            );
            weaponNames.forEach((weaponNameElement) => {
            const weaponContainer = weaponNameElement.closest(".ui-weapon-switch");
            const observer = new MutationObserver(() => {
                const weaponName = weaponNameElement.textContent.trim();
                let border = "#FFFFFF";
      
                switch (weaponName.toUpperCase()) { 
                //yellow
                case "CZ-3A1": case "G18C": case "M9": case "M93R": case "MAC-10": case "MP5": case "P30L": case "DUAL P30L": case "UMP9": case "VECTOR": case "VSS": case "FLAMETHROWER": border = "#FFAE00"; break;
                //blue 
                case "AK-47": case "OT-38": case "OTS-38": case "M39 EMR": case "DP-28": case "MOSIN-NAGANT": case "SCAR-H": case "SV-98": case "M1 GARAND": case "PKP PECHENEG": case "AN-94": case "BAR M1918": case "BLR 81": case "SVD-63": case "M134": case "GROZA": case "GROZA-S": border = "#007FFF"; break;
                //green
                case "FAMAS": case "M416": case "M249": case "QBB-97": case "MK 12 SPR": case "M4A1-S": case "SCOUT ELITE": case "L86A2": border = "#0f690d"; break;
                //red 
                case "M870": case "MP220": case "SAIGA-12": case "SPAS-12": case "USAS-12": case "SUPER 90": case "LASR GUN": case "M1100": border = "#FF0000"; break;
                //purple
                case "MODEL 94": case "PEACEMAKER": case "vector": case "mk45g":case "M1911": case "M1A1": border = "#800080"; break;
                //black
                case "DEAGLE 50": case "RAINBOW BLASTER": border = "#000000"; break;
                //olive
                case "AWM-S": case "MK 20 SSR": border = "#808000"; break; 
                //brown
                case "POTATO CANNON": case "SPUD GUN": border = "#A52A2A"; break;
                //other Guns
                case "FLARE GUN": border = "#FF4500"; break; case "M79": border = "#008080"; break; case "HEART CANNON": border = "#FFC0CB"; break; 
                default: border = "#FFFFFF"; break; }
      
                if (weaponContainer.id !== "ui-weapon-id-4") {
                weaponContainer.style.border = `3px solid ${border}`;
                }
            });
      
            observer.observe(weaponNameElement, {
                childList: true,
                characterData: true,
                subtree: true,
            });
            });
        }
      
        updateUiElements() {
        const currentUrl = window.location.href;
      
        const isSpecialUrl = /\/#\w+/.test(currentUrl);
      
        const playerOptions = document.getElementById("player-options");
        const teamMenuContents = document.getElementById("team-menu-contents");
        const startMenuContainer = document.querySelector(
            "#start-menu .play-button-container",
        );
      
        if (!playerOptions) return;
      
        if (
            isSpecialUrl &&
            teamMenuContents &&
            playerOptions.parentNode !== teamMenuContents
        ) {
            teamMenuContents.appendChild(playerOptions);
        } else if (
            !isSpecialUrl &&
            startMenuContainer &&
            playerOptions.parentNode !== startMenuContainer
        ) {
            const firstChild = startMenuContainer.firstChild;
            startMenuContainer.insertBefore(playerOptions, firstChild);
        }
        const teamMenu = document.getElementById("team-menu");
        if (teamMenu) {
            teamMenu.style.height = "355px";
        }
        const menuBlocks = document.querySelectorAll(".menu-block");
        menuBlocks.forEach((block) => {
            block.style.maxHeight = "355px";
        });
        const leftColumn = document.getElementById("left-column");
        const newsBlock = document.getElementById("news-block");
        }
      
        updateCleanMode() {
            const leftColumn = document.getElementById("left-column");
            const newsBlock = document.getElementById("news-block");
      
            if (this.isClean) {
                if (leftColumn) leftColumn.style.display = "none";
                if (newsBlock) newsBlock.style.display = "none";
            } else {
                if (leftColumn) leftColumn.style.display = "block";
                if (newsBlock) newsBlock.style.display = "block";
            }
        }
      
        updateMenuButtonText() {
        const hideButton = document.getElementById("hideMenuButton");
        hideButton.textContent = this.isMenuVisible
            ? "Hide Menu [P]"
            : "Show Menu [P]";
        }
      
        setupKeyListeners() {
        document.addEventListener("keydown", (event) => {
            if (event.key.toLowerCase() === "p") {
            this.toggleMenuVisibility();
            }
        });
        }
        //menu
        initMenu() {
            const menu = document.createElement("div");
            menu.id = "soyAlguienMenu";
            Object.assign(menu.style, {
                backgroundColor: "rgba(0, 0, 0, 0.5)",
                padding: "15px",
                marginLeft: "15px",
                borderRadius: "10px",
                boxShadow: "0 4px 10px rgba(0, 0, 0, 0.3)",
                zIndex: "10001",
                width: "250px",
                fontFamily: "Arial, sans-serif",
                color: "#fff",
                maxHeight: "400px",
                overflowY: "auto",
                zIndex: "1",
            });
        
            const title = document.createElement("h2");
            title.textContent = "SoyAlguien Client";
            Object.assign(title.style, {
                margin: "0 0 10px",
                textAlign: "center",
                fontSize: "18px",
                color: "#FFAE00",
            });
            menu.appendChild(title);
        
            const updateLocalStorage = () => {
                localStorage.setItem(
                    "userSettings",
                    JSON.stringify({
                        isFpsVisible: this.isFpsVisible,
                        isPingVisible: this.isPingVisible,
                        isKillsVisible: this.isKillsVisible,
                        isClean: this.isClean
                    })
                );
            };
        
            this.loadLocalStorage();
        
            const createToggleButton = (text, stateKey, onClick) => {
                const button = document.createElement("button");
                button.textContent = `${text} ${this[stateKey] ? "✅" : "❌"}`;
                Object.assign(button.style, {
                    backgroundColor: this[stateKey] ? "#4CAF50" : "#FF0000",
                    border: "none",
                    color: "#fff",
                    padding: "10px",
                    borderRadius: "5px",
                    width: "100%",
                    marginBottom: "10px",
                    fontSize: "14px",
                    cursor: "pointer",
                });
                button.onclick = () => {
                    this[stateKey] = !this[stateKey];
                    onClick();
                    button.textContent = `${text} ${this[stateKey] ? "✅" : "❌"}`;
                    button.style.backgroundColor = this[stateKey] ? "#4CAF50" : "#FF0000";
                    updateLocalStorage();
                };
                return button;
            };
        
            menu.appendChild(createToggleButton("Show FPS", "isFpsVisible", this.updateFpsVisibility.bind(this)));
            menu.appendChild(createToggleButton("Show Ping", "isPingVisible", this.updatePingVisibility.bind(this)));
            menu.appendChild(createToggleButton("Show Kills", "isKillsVisible", this.updateKillsVisibility.bind(this)));
            menu.appendChild(createToggleButton("Clean Menu", "isClean", this.updateCleanMode.bind(this)));
        
            const hideShowToggle = document.createElement("button");
            hideShowToggle.textContent = `👀 Hide/Show Menu [P]`;
            Object.assign(hideShowToggle.style, {
                backgroundColor: "#6F42C1",
                border: "none",
                color: "#fff",
                padding: "10px",
                borderRadius: "5px",
                width: "100%",
                marginBottom: "10px",
                fontSize: "14px",
                cursor: "pointer",
            });
            hideShowToggle.onclick = () => this.toggleMenuVisibility();
            menu.appendChild(hideShowToggle);
        
            const backgroundToggle = document.createElement("button");
            backgroundToggle.textContent = `🎨 Change Background`;
            Object.assign(backgroundToggle.style, {
                backgroundColor: "#007BFF",
                border: "none",
                color: "#fff",
                padding: "10px",
                borderRadius: "5px",
                width: "100%",
                marginBottom: "10px",
                fontSize: "14px",
                cursor: "pointer",
            });
            backgroundToggle.onclick = () => {
                const backgroundElement = document.getElementById("background");
                if (!backgroundElement) {
                    alert("Element with id 'background' not found.");
                    return;
                }
                const choice = prompt(
                    "Enter '1' to provide a URL or '2' to upload a local image:"
                );
        
                if (choice === "1") {
                    const newBackgroundUrl = prompt("Enter the URL of the new background image:");
                    if (newBackgroundUrl) {
                        backgroundElement.style.backgroundImage = `url(${newBackgroundUrl})`;
                        this.saveBackgroundToLocalStorage(newBackgroundUrl);
                        alert("Background updated successfully!");
                    }
                } else if (choice === "2") {
                    const fileInput = document.createElement("input");
                    fileInput.type = "file";
                    fileInput.accept = "image/*";
                    fileInput.onchange = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                            const reader = new FileReader();
                            reader.onload = () => {
                                backgroundElement.style.backgroundImage = `url(${reader.result})`;
                                this.saveBackgroundToLocalStorage(file);
                                alert("Background updated successfully!");
                            };
                            reader.readAsDataURL(file);
                        }
                    };
                    fileInput.click();
                }
            };
            menu.appendChild(backgroundToggle);
        
            const moreSettingsButton = document.createElement("button");
            moreSettingsButton.textContent = "⚙️ More Settings";
            Object.assign(moreSettingsButton.style, {
                backgroundColor: "#1D1616",
                border: "none",
                color: "#fff",
                padding: "10px",
                borderRadius: "5px",
                width: "100%",
                fontSize: "14px",
                cursor: "pointer",
            });
            moreSettingsButton.onclick = () => this.openSubMenu();
            menu.appendChild(moreSettingsButton);
        
            window.onload = () => {
                const savedBackground = localStorage.getItem("backgroundImage");
                if (savedBackground) {
                    const backgroundElement = document.getElementById("background");
                    if (backgroundElement) {
                        backgroundElement.style.backgroundImage = `url(${savedBackground})`;
                    }
                }
            };
        
            const startRowTop = document.getElementById("start-row-top");
            if (startRowTop) {
                startRowTop.appendChild(menu);
            }
        
            this.menu = menu;
        }
        
        openSubMenu() {
            const overlay = document.createElement("div");
            const savedOpacity = localStorage.getItem('opacity') ?? 1;
            const savedScale = localStorage.getItem('scale') ?? 0.8;
        
            Object.assign(overlay.style, {
                position: "fixed",
                top: 0,
                left: 0,
                width: "100%",
                height: "100%",
                backgroundColor: "rgba(0, 0, 0, 0.7)",
                zIndex: "10002",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            });
        
            const subMenu = document.createElement("div");
            Object.assign(subMenu.style, {
                backgroundColor: "#333",
                padding: "20px",
                borderRadius: "15px",
                width: "400px",
                color: "#fff",
                textAlign: "left",
                zIndex: "10003",
                boxShadow: "0 4px 15px rgba(0, 0, 0, 0.5)",
            });
        
            const createSectionHeader = (text) => {
                const header = document.createElement("h3");
                header.textContent = text;
                Object.assign(header.style, {
                    fontSize: "18px",
                    fontWeight: "bold",
                    color: "#FFD700",
                    marginBottom: "10px",
                });
                return header;
            };
        
            const createSettingItem = (id, label, checked) => {
                const wrapper = document.createElement("div");
                Object.assign(wrapper.style, {
                    display: "flex",
                    alignItems: "center",
                    padding: "10px",
                    marginBottom: "10px",
                    borderRadius: "8px",
                    backgroundColor: "#444",
                });
        
                const checkbox = document.createElement("input");
                checkbox.id = id;
                checkbox.type = "checkbox";
                checkbox.checked = checked;
                Object.assign(checkbox.style, {
                    marginRight: "10px",
                    cursor: "pointer",
                });
        
                const labelText = document.createElement("p");
                labelText.textContent = label;
                Object.assign(labelText.style, {
                    margin: "0",
                    fontSize: "16px",
                    color: "#fff",
                });
        
                wrapper.appendChild(checkbox);
                wrapper.appendChild(labelText);
                return wrapper;
            };
        
            const createCustomSlider = (id, min, max, step, value, onChange) => {
                const wrapper = document.createElement("div");
                Object.assign(wrapper.style, {
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "space-between",
                    marginBottom: "10px",
                });
        
                const slider = document.createElement("input");
                slider.type = "range";
                slider.id = id;
                slider.min = min;
                slider.max = max;
                slider.step = step;
                slider.value = value;
                Object.assign(slider.style, {
                    flex: "1",
                    marginRight: "10px",
                });
        
                const valueLabel = document.createElement("span");
                valueLabel.textContent = value;
                Object.assign(valueLabel.style, {
                    minWidth: "30px",
                    textAlign: "right",
                    color: "#fff",
                });
        
                slider.oninput = () => {
                    valueLabel.textContent = slider.value;
                    onChange(slider.value);
                };
        
                wrapper.appendChild(slider);
                wrapper.appendChild(valueLabel);
                return wrapper;
            };
        
            const titleClient = document.createElement("h2");
            titleClient.textContent = "Client Settings";
            Object.assign(titleClient.style, {
                margin: "0 0 20px",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#FFAE00",
                textAlign: "center",
            });
            subMenu.appendChild(titleClient);
        
            subMenu.appendChild(createSectionHeader("Local Rotation"));
            subMenu.appendChild(createSettingItem(
                "local-rotation",
                "Enable/disable local rotation",
                this.isLocalRotation
            ));
        
            subMenu.appendChild(createSectionHeader("FPS Uncap"));
            subMenu.appendChild(createSettingItem(
                "fps-uncap",
                "Enable/disable FPS uncap",
                this.isFpsUncapped
            ));
        
            subMenu.appendChild(createSectionHeader("Movement Interpolation"));
            subMenu.appendChild(createSettingItem(
                "movement-interpolation",
                "Enable/disable smooth movement",
                this.isInterpolation
            ));
      
            subMenu.appendChild(createSectionHeader("Hide Mini Map"));
            subMenu.appendChild(createSettingItem(
                "hide-mini-map",
                "The mini map will start hidden",
                this.isStartMapHide
            ));
        
            const titleUI = document.createElement("h2");
            titleUI.textContent = "UI Settings";
            Object.assign(titleUI.style, {
                margin: "20px 0 20px",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#FFAE00",
                textAlign: "center",
            });
            subMenu.appendChild(titleUI);
        
            subMenu.appendChild(createSectionHeader("Opacity"));
            subMenu.appendChild(createCustomSlider(
                "opacity-slider",
                0, 1, 0.01,
                savedOpacity,
                (value) => localStorage.setItem('opacity', value)
            ));
        
            subMenu.appendChild(createSectionHeader("Scale"));
            subMenu.appendChild(createCustomSlider(
                "scale-slider",
                0.5, 1, 0.01,
                savedScale,
                (value) => localStorage.setItem('scale', value)
            ));
        
      
            const closeButton = document.createElement("button");
            closeButton.textContent = "Close";
            Object.assign(closeButton.style, {
                backgroundColor: "#FF4D4D",
                border: "none",
                color: "#fff",
                padding: "10px 20px",
                borderRadius: "8px",
                marginTop: "20px",
                cursor: "pointer",
                fontSize: "16px",
                fontWeight: "bold",
                transition: "background-color 0.3s ease",
                width: "100%",
            });
            closeButton.onmouseenter = () => {
                closeButton.style.backgroundColor = "#FF3333";
            };
            closeButton.onmouseleave = () => {
                closeButton.style.backgroundColor = "#FF4D4D";
            };
            closeButton.onclick = () => {
                document.body.removeChild(overlay);
            };
            subMenu.appendChild(closeButton);
        
            overlay.appendChild(subMenu);
            document.body.appendChild(overlay);
        
            this.attachSettingsEvents();
        }
        
        
        customUiElements(){
            let scale = parseFloat(localStorage.getItem('scale')) || 0.8;
            let opacity = parseFloat(localStorage.getItem('opacity')) || 1;
            
            const healthBoost = document.getElementById('ui-bottom-center-0');
            healthBoost.style.transform = `translateX(-50%) scale(${scale})`;
            healthBoost.style.opacity = opacity;
            healthBoost.style.bottom = window.innerWidth > 1200 ? `-${((1-scale) * 20)+2}px` : '';
      
            const weapon = document.getElementById('ui-weapon-container');
            weapon.style.scale = scale;
            weapon.style.opacity = opacity;
            weapon.style.transformOrigin = "right";
      
            const inventory = document.getElementById('ui-right-center');
            inventory.style.scale = scale*1.1;
            inventory.style.opacity = opacity;
            inventory.style.marginTop = `-${(1 - scale) * 100}px`;
      
            const info = document.getElementById('ui-top-left');
            info.style.transformOrigin = 'top left';
            info.style.scale = scale*1.1;
            info.style.opacity = opacity;
      
            const players = document.getElementById('ui-leaderboard-wrapper');
            players.style.scale = scale;
            players.style.opacity = opacity;
            players.style.transformOrigin = 'top right';
      
            const killfeed = document.getElementById('ui-killfeed-wrapper');
            killfeed.style.scale = scale;
            killfeed.style.opacity = opacity;
            killfeed.style.transformOrigin = "right";
      
            const ammo = document.getElementById('ui-equipped-ammo-wrapper');
            ammo.style.opacity = opacity;
            ammo.style.transform = `translateX(-50%) scale(${scale})`;
            ammo.style.bottom = 62-((1-scale)*20);
      
            const gears = document.getElementById('ui-bottom-center-right');
            gears.style.opacity = opacity;
            gears.style.scale = scale; 
      
            const scopes = document.getElementById('ui-top-center-scopes');
            scopes.style.opacity = opacity;
            scopes.style.scale = scale; 
        }
        
        attachSettingsEvents() {
            const localRotationCheckbox = document.querySelector("#local-rotation");
            if (localRotationCheckbox) {
                localRotationCheckbox.addEventListener("change", (event) => {
                    this.isLocalRotation = event.target.checked;
                    window.isLocalRotation = this.isLocalRotation;
                    this.saveSettings();
                });
            }
        
            const fpsUncapCheckbox = document.querySelector("#fps-uncap");
            if (fpsUncapCheckbox) {
                fpsUncapCheckbox.addEventListener("change", (event) => {
                    this.isFpsUncapped = event.target.checked;
                    this.saveSettings();
                });
            }
        
            const interpolationCheckbox = document.querySelector("#movement-interpolation");
            if (interpolationCheckbox) {
                interpolationCheckbox.addEventListener("change", (event) => {
                    this.isInterpolation = event.target.checked;
                    window.isInterpolation = this.isInterpolation;
                    this.saveSettings();
                });
            }
      
            const MiniMapCheckbox = document.querySelector("#hide-mini-map");
            if (MiniMapCheckbox) {
                MiniMapCheckbox.addEventListener("change", (event) => {
                    this.isStartMapHide = event.target.checked;
                    window.isStartMapHide = this.isStartMapHide;
                    this.saveSettings();
                });
            }
        
            const opacitySlider = document.querySelector("#opacity-slider");
            if (opacitySlider) {
                opacitySlider.addEventListener("input", (event) => {
                    localStorage.setItem("opacity", event.target.value);
                    this.customUiElements();
                });
            }
        
            const scaleSlider = document.querySelector("#scale-slider");
            if (scaleSlider) {
                scaleSlider.addEventListener("input", (event) => {
                    localStorage.setItem("scale", event.target.value);
                    this.customUiElements();
                });
            }
        }
        
        saveSettings() {
            const settings = {
                "local-rotation": this.isLocalRotation,
                "fps-uncap": this.isFpsUncapped,
                "movement-interpolation": this.isInterpolation,
                "hide-mini-map": this.isStartMapHide,
            };
            localStorage.setItem("gameSettings", JSON.stringify(settings));
        }
        
      
        toggleMenuVisibility() {
        const isVisible = this.menu.style.display !== "none";
        this.menu.style.display = isVisible ? "none" : "block";
        }
      
        startUpdateLoop() {
        const now = performance.now();
        const delta = now - this.lastFrameTime;
      
        this.frameCount++;
      
        if (delta >= 1000) {
            this.fps = Math.round((this.frameCount * 1000) / delta);
            this.frameCount = 0;
            this.lastFrameTime = now;
      
            this.kills = this.getKills();
      
            if (this.isFpsVisible && this.fpsCounter) {
                //temporal fix fps counter
            this.fpsCounter.textContent = `FPS: ${Math.round(this.fps/2)}`;
            }
      
            if (this.isKillsVisible && this.killsCounter) {
            this.killsCounter.textContent = `Kills: ${this.kills}`;
            }
      
            if (this.isPingVisible && this.pingCounter && this.pingTest) {
            const result = this.pingTest.getPingResult();
            this.pingCounter.textContent = `PING: ${result.ping} ms`;
            }
        }
      
        this.startPingTest();
        this.updateFpsToggle()
        this.animationFrameCallback(() => this.startUpdateLoop());
        this.updateUiElements();
        this.updateCleanMode();
        this.updateBoostBars();
        this.updateHealthBars();
        }
      
        pingShow() {
            const serverSelect = document.getElementById("server-select-main");
        
            if (!serverSelect) return;
        
            const updateOptionWithPing = (optionElement, ping) => {
                const pingText = ` (${ping} ms)`;
                
                const originalText = optionElement.textContent.replace(/\(\d+ ms\)/g, "").trim();
                optionElement.textContent = `${originalText}${pingText}`;
            
                if (ping > 300) {
                optionElement.style.color = "red";
                } else if (ping > 200) {
                optionElement.style.color = "orange";
                } else if (ping > 100) {
                optionElement.style.color = "yellow";
                } else {
                optionElement.style.color = "green";
                }
            };
            
            
        
            const servers = [
            { region: "NA", url: "usr.mathsiscoolfun.com:8001" },
            { region: "EU", url: "eur.mathsiscoolfun.com:8001" },
            { region: "Asia", url: "asr.mathsiscoolfun.com:8001" },
            { region: "SA", url: "sa.mathsiscoolfun.com:8001" },
            ];
        
            servers.forEach((server) => {
            const pingTest = new PingTest(server);
            pingTest.startPingTest();
        
            const interval = setInterval(() => {
                const pingResult = pingTest.getPingResult();
                if (pingResult.ping !== 9999 && pingResult.ping !== "Error") {
                const optionElement = serverSelect.querySelector(`option[value="${server.region.toLowerCase()}"]`);
                if (optionElement) {
                    updateOptionWithPing(optionElement, pingResult.ping);
                }
                clearInterval(interval);
                }
            }, 2000);
            });
        }
        
      }
      
      class PingTest {
        constructor(selectedServer) {
        this.ptcDataBuf = new ArrayBuffer(1);
        this.test = {
            region: selectedServer.region,
            url: `wss://${selectedServer.url}/ptc`,
            ping: 9999,
            ws: null,
            sendTime: 0,
            retryCount: 0,
        };
        }
      
        startPingTest() {
        if (!this.test.ws) {
            const ws = new WebSocket(this.test.url);
            ws.binaryType = "arraybuffer";
      
            ws.onopen = () => {
            this.sendPing();
            this.test.retryCount = 0;
            };
      
            ws.onmessage = () => {
            const elapsed = (Date.now() - this.test.sendTime) / 1e3;
            this.test.ping = Math.round(elapsed * 1000);
            this.test.retryCount = 0;
            setTimeout(() => this.sendPing(), 200);
            };
      
            ws.onerror = () => {
            this.test.ping = "Error";
            this.test.retryCount++;
            if (this.test.retryCount < 5) {
                setTimeout(() => this.startPingTest(), 2000);
            } else {
                this.test.ws.close();
                this.test.ws = null;
            }
            };
      
            ws.onclose = () => {
            this.test.ws = null;
            };
      
            this.test.ws = ws;
        }
        }
      
        sendPing() {
            if (this.test.ws && this.test.ws.readyState === WebSocket.OPEN) {
            this.test.sendTime = Date.now();
            this.test.ws.send(this.ptcDataBuf);
            }
        }
        
      
        getPingResult() {
        return {
            region: this.test.region,
            ping: this.test.ping,
        };
        }
      }
      
      const gameMod = new GameMod();
      })();
    